
TEL_STM_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da30  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  0800dd00  0800dd00  0001dd00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dfac  0800dfac  0001dfac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000010  0800dfb4  0800dfb4  0001dfb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dfc4  0800dfc4  0001dfc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  0800dfc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001788  24000080  0800e044  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001808  0800e044  00021808  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000267a3  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000043f4  00000000  00000000  0004684d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001538  00000000  00000000  0004ac48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013e8  00000000  00000000  0004c180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035ad3  00000000  00000000  0004d568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cebc  00000000  00000000  0008303b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153b3b  00000000  00000000  0009fef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f3a32  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d20  00000000  00000000  001f3a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000080 	.word	0x24000080
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800dce8 	.word	0x0800dce8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000084 	.word	0x24000084
 800030c:	0800dce8 	.word	0x0800dce8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00

0800067c <_Z13DC_motor_initv>:
//DC_motor fl(5.5, 85, 0, 0.001, 43193, 200);
//DC_motor br(148.3, 2813.3, 0.537, 0.001, 26734, 200);
//DC_motor bl(0, 0, 0, 0.001, 41296, 200);


void DC_motor_init(){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8000680:	2100      	movs	r1, #0
 8000682:	481a      	ldr	r0, [pc, #104]	; (80006ec <_Z13DC_motor_initv+0x70>)
 8000684:	f00a f852 	bl	800a72c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8000688:	2104      	movs	r1, #4
 800068a:	4818      	ldr	r0, [pc, #96]	; (80006ec <_Z13DC_motor_initv+0x70>)
 800068c:	f00a f84e 	bl	800a72c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 8000690:	2100      	movs	r1, #0
 8000692:	4817      	ldr	r0, [pc, #92]	; (80006f0 <_Z13DC_motor_initv+0x74>)
 8000694:	f00a f84a 	bl	800a72c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 8000698:	2104      	movs	r1, #4
 800069a:	4815      	ldr	r0, [pc, #84]	; (80006f0 <_Z13DC_motor_initv+0x74>)
 800069c:	f00a f846 	bl	800a72c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80006a0:	2100      	movs	r1, #0
 80006a2:	4814      	ldr	r0, [pc, #80]	; (80006f4 <_Z13DC_motor_initv+0x78>)
 80006a4:	f00a f842 	bl	800a72c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80006a8:	2104      	movs	r1, #4
 80006aa:	4812      	ldr	r0, [pc, #72]	; (80006f4 <_Z13DC_motor_initv+0x78>)
 80006ac:	f00a f83e 	bl	800a72c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	4811      	ldr	r0, [pc, #68]	; (80006f8 <_Z13DC_motor_initv+0x7c>)
 80006b4:	f00a f83a 	bl	800a72c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80006b8:	2104      	movs	r1, #4
 80006ba:	480f      	ldr	r0, [pc, #60]	; (80006f8 <_Z13DC_motor_initv+0x7c>)
 80006bc:	f00a f836 	bl	800a72c <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim13);
 80006c0:	480e      	ldr	r0, [pc, #56]	; (80006fc <_Z13DC_motor_initv+0x80>)
 80006c2:	f009 fd47 	bl	800a154 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_2);
 80006c6:	2104      	movs	r1, #4
 80006c8:	480d      	ldr	r0, [pc, #52]	; (8000700 <_Z13DC_motor_initv+0x84>)
 80006ca:	f009 fe21 	bl	800a310 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 80006ce:	2100      	movs	r1, #0
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <_Z13DC_motor_initv+0x84>)
 80006d2:	f009 fe1d 	bl	800a310 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_2);
 80006d6:	2104      	movs	r1, #4
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <_Z13DC_motor_initv+0x88>)
 80006da:	f009 fe19 	bl	800a310 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 80006de:	2100      	movs	r1, #0
 80006e0:	4808      	ldr	r0, [pc, #32]	; (8000704 <_Z13DC_motor_initv+0x88>)
 80006e2:	f009 fe15 	bl	800a310 <HAL_TIM_PWM_Start_IT>
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	24000260 	.word	0x24000260
 80006f0:	24000344 	.word	0x24000344
 80006f4:	240002ac 	.word	0x240002ac
 80006f8:	240002f8 	.word	0x240002f8
 80006fc:	240003dc 	.word	0x240003dc
 8000700:	24000390 	.word	0x24000390
 8000704:	24000428 	.word	0x24000428

08000708 <_ZN8DC_motorC1Edddddd>:

DC_motor::DC_motor(double p, double i, double d, double time, double res, double ratio){
 8000708:	b480      	push	{r7}
 800070a:	b08f      	sub	sp, #60	; 0x3c
 800070c:	af00      	add	r7, sp, #0
 800070e:	6378      	str	r0, [r7, #52]	; 0x34
 8000710:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8000714:	ed87 1b08 	vstr	d1, [r7, #32]
 8000718:	ed87 2b06 	vstr	d2, [r7, #24]
 800071c:	ed87 3b04 	vstr	d3, [r7, #16]
 8000720:	ed87 4b02 	vstr	d4, [r7, #8]
 8000724:	ed87 5b00 	vstr	d5, [r7]
	this->kp = p;
 8000728:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800072a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800072e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	this->ki = i;
 8000732:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000734:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000738:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	this->kd = d;
 800073c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800073e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000742:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	this->time = time;
 8000746:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000748:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800074c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	this->res_encoder = res;
 8000750:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000752:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000756:	e9c1 2300 	strd	r2, r3, [r1]
	this->sr_ratio = ratio;
 800075a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800075c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000760:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8000764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000766:	4618      	mov	r0, r3
 8000768:	373c      	adds	r7, #60	; 0x3c
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <_ZN8DC_motor10PIDControlEv>:
//	if(PID<-1) PID=-1;
//
//	return rps_now;
//}

void DC_motor::PIDControl(void){
 8000772:	b480      	push	{r7}
 8000774:	b083      	sub	sp, #12
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
	rps_now = (double) CountNow / 4 / res_encoder / sr_ratio / time;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8000780:	ee07 3a90 	vmov	s15, r3
 8000784:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000788:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800078c:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	ed93 7b00 	vldr	d7, [r3]
 8000796:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	ed93 7b02 	vldr	d7, [r3, #8]
 80007a0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 80007aa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	error = rps_goal - rps_now;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80007c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	ed83 7b04 	vstr	d7, [r3, #16]
	error_total += error;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	ed93 6b06 	vldr	d6, [r3, #24]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	ed93 7b04 	vldr	d7, [r3, #16]
 80007d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	ed83 7b06 	vstr	d7, [r3, #24]
	PWM = error*kp + error_total*ki + error_last*kd;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	ed93 6b04 	vldr	d6, [r3, #16]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80007ec:	ee26 6b07 	vmul.f64	d6, d6, d7
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	ed93 5b06 	vldr	d5, [r3, #24]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80007fc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000800:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	ed93 5b08 	vldr	d5, [r3, #32]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8000810:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000814:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	error_last = error;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000824:	6879      	ldr	r1, [r7, #4]
 8000826:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
	...

08000838 <_Z41__static_initialization_and_destruction_0ii>:
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d140      	bne.n	80008ca <_Z41__static_initialization_and_destruction_0ii+0x92>
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800084e:	4293      	cmp	r3, r2
 8000850:	d13b      	bne.n	80008ca <_Z41__static_initialization_and_destruction_0ii+0x92>
DC_motor fr(1000,0.5,0, 0.001,512,20.8);
 8000852:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80008d8 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000856:	ed9f 4b22 	vldr	d4, [pc, #136]	; 80008e0 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 800085a:	ed9f 3b23 	vldr	d3, [pc, #140]	; 80008e8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800085e:	ed9f 2b24 	vldr	d2, [pc, #144]	; 80008f0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000862:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8000866:	ed9f 0b24 	vldr	d0, [pc, #144]	; 80008f8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 800086a:	4827      	ldr	r0, [pc, #156]	; (8000908 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800086c:	f7ff ff4c 	bl	8000708 <_ZN8DC_motorC1Edddddd>
DC_motor fl(1000,0.5,0, 0.001,512,20.8);
 8000870:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80008d8 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000874:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 80008e0 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000878:	ed9f 3b1b 	vldr	d3, [pc, #108]	; 80008e8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800087c:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 80008f0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000880:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8000884:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80008f8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000888:	4820      	ldr	r0, [pc, #128]	; (800090c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800088a:	f7ff ff3d 	bl	8000708 <_ZN8DC_motorC1Edddddd>
DC_motor br(1000,0.5,0, 0.001,512,13.2);
 800088e:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8000900 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000892:	ed9f 4b13 	vldr	d4, [pc, #76]	; 80008e0 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000896:	ed9f 3b14 	vldr	d3, [pc, #80]	; 80008e8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800089a:	ed9f 2b15 	vldr	d2, [pc, #84]	; 80008f0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 800089e:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 80008a2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80008f8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 80008a6:	481a      	ldr	r0, [pc, #104]	; (8000910 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80008a8:	f7ff ff2e 	bl	8000708 <_ZN8DC_motorC1Edddddd>
DC_motor bl(1000,0.5,0, 0.001,512,20.8);
 80008ac:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80008d8 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80008b0:	ed9f 4b0b 	vldr	d4, [pc, #44]	; 80008e0 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80008b4:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 80008e8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80008b8:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 80008f0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80008bc:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 80008c0:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80008f8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 80008c4:	4813      	ldr	r0, [pc, #76]	; (8000914 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80008c6:	f7ff ff1f 	bl	8000708 <_ZN8DC_motorC1Edddddd>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	f3af 8000 	nop.w
 80008d8:	cccccccd 	.word	0xcccccccd
 80008dc:	4034cccc 	.word	0x4034cccc
 80008e0:	00000000 	.word	0x00000000
 80008e4:	40800000 	.word	0x40800000
 80008e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80008ec:	3f50624d 	.word	0x3f50624d
	...
 80008fc:	408f4000 	.word	0x408f4000
 8000900:	66666666 	.word	0x66666666
 8000904:	402a6666 	.word	0x402a6666
 8000908:	240000a0 	.word	0x240000a0
 800090c:	24000110 	.word	0x24000110
 8000910:	24000180 	.word	0x24000180
 8000914:	240001f0 	.word	0x240001f0

08000918 <_GLOBAL__sub_I_fr>:
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
 800091c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000920:	2001      	movs	r0, #1
 8000922:	f7ff ff89 	bl	8000838 <_Z41__static_initialization_and_destruction_0ii>
 8000926:	bd80      	pop	{r7, pc}

08000928 <_Z10debug_loopv>:

/** debug which function **/
bool mecanum_debug = true;


void debug_loop(){
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	while(1){
		if(mecanum_debug) mecanum.run();
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <_Z10debug_loopv+0x14>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d0fb      	beq.n	800092c <_Z10debug_loopv+0x4>
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <_Z10debug_loopv+0x18>)
 8000936:	f000 fcbd 	bl	80012b4 <_ZN7Mecanum3runEv>
 800093a:	e7f7      	b.n	800092c <_Z10debug_loopv+0x4>
 800093c:	24000001 	.word	0x24000001
 8000940:	240005f8 	.word	0x240005f8

08000944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 HAL_Init();
 8000948:	f003 ff7e 	bl	8004848 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094c:	f000 f818 	bl	8000980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000950:	f000 fb56 	bl	8001000 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000954:	f000 f884 	bl	8000a60 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000958:	f000 f8d6 	bl	8000b08 <MX_TIM3_Init>
  MX_TIM4_Init();
 800095c:	f000 f92a 	bl	8000bb4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000960:	f000 f97e 	bl	8000c60 <MX_TIM5_Init>
  MX_TIM12_Init();
 8000964:	f000 f9d2 	bl	8000d0c <MX_TIM12_Init>
  MX_TIM13_Init();
 8000968:	f000 fa20 	bl	8000dac <MX_TIM13_Init>
  MX_TIM15_Init();
 800096c:	f000 fa42 	bl	8000df4 <MX_TIM15_Init>
  MX_DMA_Init();
 8000970:	f000 fb1e 	bl	8000fb0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000974:	f000 fad0 	bl	8000f18 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000978:	f000 fc36 	bl	80011e8 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800097c:	e7fe      	b.n	800097c <main+0x38>
	...

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b09c      	sub	sp, #112	; 0x70
 8000984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098a:	224c      	movs	r2, #76	; 0x4c
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f00d f820 	bl	800d9d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2220      	movs	r2, #32
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f00d f81a 	bl	800d9d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009a0:	2002      	movs	r0, #2
 80009a2:	f007 f8ef 	bl	8007b84 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <SystemClock_Config+0xdc>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009b2:	4a2a      	ldr	r2, [pc, #168]	; (8000a5c <SystemClock_Config+0xdc>)
 80009b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b8:	6193      	str	r3, [r2, #24]
 80009ba:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <SystemClock_Config+0xdc>)
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009c6:	bf00      	nop
 80009c8:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <SystemClock_Config+0xdc>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009d4:	d1f8      	bne.n	80009c8 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d6:	2301      	movs	r3, #1
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e0:	2302      	movs	r3, #2
 80009e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e4:	2302      	movs	r3, #2
 80009e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 80009ec:	232a      	movs	r3, #42	; 0x2a
 80009ee:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009fc:	230c      	movs	r3, #12
 80009fe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f007 f8f3 	bl	8007bf8 <HAL_RCC_OscConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a18:	f000 fbe0 	bl	80011dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1c:	233f      	movs	r3, #63	; 0x3f
 8000a1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a20:	2303      	movs	r3, #3
 8000a22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000a24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a2a:	2308      	movs	r3, #8
 8000a2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a2e:	2340      	movs	r3, #64	; 0x40
 8000a30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a32:	2340      	movs	r3, #64	; 0x40
 8000a34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a3a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a3c:	2340      	movs	r3, #64	; 0x40
 8000a3e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2102      	movs	r1, #2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f007 fc85 	bl	8008354 <HAL_RCC_ClockConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a50:	f000 fbc4 	bl	80011dc <Error_Handler>
  }
}
 8000a54:	bf00      	nop
 8000a56:	3770      	adds	r7, #112	; 0x70
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	58024800 	.word	0x58024800

08000a60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08c      	sub	sp, #48	; 0x30
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	2224      	movs	r2, #36	; 0x24
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f00c ffb0 	bl	800d9d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a74:	463b      	mov	r3, r7
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <MX_TIM2_Init+0xa4>)
 8000a80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <MX_TIM2_Init+0xa4>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_TIM2_Init+0xa4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <MX_TIM2_Init+0xa4>)
 8000a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_TIM2_Init+0xa4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <MX_TIM2_Init+0xa4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <MX_TIM2_Init+0xa4>)
 8000ad2:	f009 fd85 	bl	800a5e0 <HAL_TIM_Encoder_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000adc:	f000 fb7e 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae8:	463b      	mov	r3, r7
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_TIM2_Init+0xa4>)
 8000aee:	f00a fca9 	bl	800b444 <HAL_TIMEx_MasterConfigSynchronization>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000af8:	f000 fb70 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	3730      	adds	r7, #48	; 0x30
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	24000260 	.word	0x24000260

08000b08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	; 0x30
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	2224      	movs	r2, #36	; 0x24
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f00c ff5c 	bl	800d9d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b26:	4b21      	ldr	r3, [pc, #132]	; (8000bac <MX_TIM3_Init+0xa4>)
 8000b28:	4a21      	ldr	r2, [pc, #132]	; (8000bb0 <MX_TIM3_Init+0xa8>)
 8000b2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <MX_TIM3_Init+0xa4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b32:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <MX_TIM3_Init+0xa4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b38:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <MX_TIM3_Init+0xa4>)
 8000b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <MX_TIM3_Init+0xa4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b46:	4b19      	ldr	r3, [pc, #100]	; (8000bac <MX_TIM3_Init+0xa4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b54:	2301      	movs	r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b64:	2301      	movs	r3, #1
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	4619      	mov	r1, r3
 8000b76:	480d      	ldr	r0, [pc, #52]	; (8000bac <MX_TIM3_Init+0xa4>)
 8000b78:	f009 fd32 	bl	800a5e0 <HAL_TIM_Encoder_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000b82:	f000 fb2b 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b8e:	463b      	mov	r3, r7
 8000b90:	4619      	mov	r1, r3
 8000b92:	4806      	ldr	r0, [pc, #24]	; (8000bac <MX_TIM3_Init+0xa4>)
 8000b94:	f00a fc56 	bl	800b444 <HAL_TIMEx_MasterConfigSynchronization>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b9e:	f000 fb1d 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	3730      	adds	r7, #48	; 0x30
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	240002ac 	.word	0x240002ac
 8000bb0:	40000400 	.word	0x40000400

08000bb4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08c      	sub	sp, #48	; 0x30
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	2224      	movs	r2, #36	; 0x24
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f00c ff06 	bl	800d9d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bd2:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <MX_TIM4_Init+0xa4>)
 8000bd4:	4a21      	ldr	r2, [pc, #132]	; (8000c5c <MX_TIM4_Init+0xa8>)
 8000bd6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <MX_TIM4_Init+0xa4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bde:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <MX_TIM4_Init+0xa4>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000be4:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MX_TIM4_Init+0xa4>)
 8000be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_TIM4_Init+0xa4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_TIM4_Init+0xa4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c00:	2301      	movs	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c10:	2301      	movs	r3, #1
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	4619      	mov	r1, r3
 8000c22:	480d      	ldr	r0, [pc, #52]	; (8000c58 <MX_TIM4_Init+0xa4>)
 8000c24:	f009 fcdc 	bl	800a5e0 <HAL_TIM_Encoder_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000c2e:	f000 fad5 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <MX_TIM4_Init+0xa4>)
 8000c40:	f00a fc00 	bl	800b444 <HAL_TIMEx_MasterConfigSynchronization>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000c4a:	f000 fac7 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	3730      	adds	r7, #48	; 0x30
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	240002f8 	.word	0x240002f8
 8000c5c:	40000800 	.word	0x40000800

08000c60 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08c      	sub	sp, #48	; 0x30
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c66:	f107 030c 	add.w	r3, r7, #12
 8000c6a:	2224      	movs	r2, #36	; 0x24
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f00c feb0 	bl	800d9d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c74:	463b      	mov	r3, r7
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <MX_TIM5_Init+0xa4>)
 8000c80:	4a21      	ldr	r2, [pc, #132]	; (8000d08 <MX_TIM5_Init+0xa8>)
 8000c82:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <MX_TIM5_Init+0xa4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <MX_TIM5_Init+0xa4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000c90:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <MX_TIM5_Init+0xa4>)
 8000c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c96:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c98:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <MX_TIM5_Init+0xa4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <MX_TIM5_Init+0xa4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cac:	2301      	movs	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <MX_TIM5_Init+0xa4>)
 8000cd0:	f009 fc86 	bl	800a5e0 <HAL_TIM_Encoder_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000cda:	f000 fa7f 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4806      	ldr	r0, [pc, #24]	; (8000d04 <MX_TIM5_Init+0xa4>)
 8000cec:	f00a fbaa 	bl	800b444 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000cf6:	f000 fa71 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	3730      	adds	r7, #48	; 0x30
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	24000344 	.word	0x24000344
 8000d08:	40000c00 	.word	0x40000c00

08000d0c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
 8000d20:	615a      	str	r2, [r3, #20]
 8000d22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <MX_TIM12_Init+0x98>)
 8000d26:	4a20      	ldr	r2, [pc, #128]	; (8000da8 <MX_TIM12_Init+0x9c>)
 8000d28:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <MX_TIM12_Init+0x98>)
 8000d2c:	2253      	movs	r2, #83	; 0x53
 8000d2e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <MX_TIM12_Init+0x98>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8000d36:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <MX_TIM12_Init+0x98>)
 8000d38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d3c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <MX_TIM12_Init+0x98>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <MX_TIM12_Init+0x98>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000d4a:	4816      	ldr	r0, [pc, #88]	; (8000da4 <MX_TIM12_Init+0x98>)
 8000d4c:	f009 fa88 	bl	800a260 <HAL_TIM_PWM_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000d56:	f000 fa41 	bl	80011dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d5a:	2360      	movs	r3, #96	; 0x60
 8000d5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480c      	ldr	r0, [pc, #48]	; (8000da4 <MX_TIM12_Init+0x98>)
 8000d72:	f009 fe89 	bl	800aa88 <HAL_TIM_PWM_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000d7c:	f000 fa2e 	bl	80011dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	2204      	movs	r2, #4
 8000d84:	4619      	mov	r1, r3
 8000d86:	4807      	ldr	r0, [pc, #28]	; (8000da4 <MX_TIM12_Init+0x98>)
 8000d88:	f009 fe7e 	bl	800aa88 <HAL_TIM_PWM_ConfigChannel>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8000d92:	f000 fa23 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000d96:	4803      	ldr	r0, [pc, #12]	; (8000da4 <MX_TIM12_Init+0x98>)
 8000d98:	f003 f99c 	bl	80040d4 <HAL_TIM_MspPostInit>

}
 8000d9c:	bf00      	nop
 8000d9e:	3720      	adds	r7, #32
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	24000390 	.word	0x24000390
 8000da8:	40001800 	.word	0x40001800

08000dac <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_TIM13_Init+0x40>)
 8000db2:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <MX_TIM13_Init+0x44>)
 8000db4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 83;
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <MX_TIM13_Init+0x40>)
 8000db8:	2253      	movs	r2, #83	; 0x53
 8000dba:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_TIM13_Init+0x40>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <MX_TIM13_Init+0x40>)
 8000dc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dc8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <MX_TIM13_Init+0x40>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_TIM13_Init+0x40>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_TIM13_Init+0x40>)
 8000dd8:	f009 f964 	bl	800a0a4 <HAL_TIM_Base_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8000de2:	f000 f9fb 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	240003dc 	.word	0x240003dc
 8000df0:	40001c00 	.word	0x40001c00

08000df4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b098      	sub	sp, #96	; 0x60
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2234      	movs	r2, #52	; 0x34
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f00c fdd7 	bl	800d9d4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000e26:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <MX_TIM15_Init+0x11c>)
 8000e28:	4a3a      	ldr	r2, [pc, #232]	; (8000f14 <MX_TIM15_Init+0x120>)
 8000e2a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 83;
 8000e2c:	4b38      	ldr	r3, [pc, #224]	; (8000f10 <MX_TIM15_Init+0x11c>)
 8000e2e:	2253      	movs	r2, #83	; 0x53
 8000e30:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e32:	4b37      	ldr	r3, [pc, #220]	; (8000f10 <MX_TIM15_Init+0x11c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8000e38:	4b35      	ldr	r3, [pc, #212]	; (8000f10 <MX_TIM15_Init+0x11c>)
 8000e3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e3e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e40:	4b33      	ldr	r3, [pc, #204]	; (8000f10 <MX_TIM15_Init+0x11c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000e46:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <MX_TIM15_Init+0x11c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4c:	4b30      	ldr	r3, [pc, #192]	; (8000f10 <MX_TIM15_Init+0x11c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000e52:	482f      	ldr	r0, [pc, #188]	; (8000f10 <MX_TIM15_Init+0x11c>)
 8000e54:	f009 fa04 	bl	800a260 <HAL_TIM_PWM_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000e5e:	f000 f9bd 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4827      	ldr	r0, [pc, #156]	; (8000f10 <MX_TIM15_Init+0x11c>)
 8000e72:	f00a fae7 	bl	800b444 <HAL_TIMEx_MasterConfigSynchronization>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000e7c:	f000 f9ae 	bl	80011dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e80:	2360      	movs	r3, #96	; 0x60
 8000e82:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e94:	2300      	movs	r3, #0
 8000e96:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	481a      	ldr	r0, [pc, #104]	; (8000f10 <MX_TIM15_Init+0x11c>)
 8000ea6:	f009 fdef 	bl	800aa88 <HAL_TIM_PWM_ConfigChannel>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000eb0:	f000 f994 	bl	80011dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000eb8:	2204      	movs	r2, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4814      	ldr	r0, [pc, #80]	; (8000f10 <MX_TIM15_Init+0x11c>)
 8000ebe:	f009 fde3 	bl	800aa88 <HAL_TIM_PWM_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000ec8:	f000 f988 	bl	80011dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ee0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4807      	ldr	r0, [pc, #28]	; (8000f10 <MX_TIM15_Init+0x11c>)
 8000ef4:	f00a fb42 	bl	800b57c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000efe:	f000 f96d 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000f02:	4803      	ldr	r0, [pc, #12]	; (8000f10 <MX_TIM15_Init+0x11c>)
 8000f04:	f003 f8e6 	bl	80040d4 <HAL_TIM_MspPostInit>

}
 8000f08:	bf00      	nop
 8000f0a:	3760      	adds	r7, #96	; 0x60
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	24000428 	.word	0x24000428
 8000f14:	40014000 	.word	0x40014000

08000f18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f1c:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f1e:	4a23      	ldr	r2, [pc, #140]	; (8000fac <MX_USART1_UART_Init+0x94>)
 8000f20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f22:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f36:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f3e:	220c      	movs	r2, #12
 8000f40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f60:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f62:	f00a fbc9 	bl	800b6f8 <HAL_UART_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f6c:	f000 f936 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f70:	2100      	movs	r1, #0
 8000f72:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f74:	f00c fc10 	bl	800d798 <HAL_UARTEx_SetTxFifoThreshold>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f7e:	f000 f92d 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f82:	2100      	movs	r1, #0
 8000f84:	4808      	ldr	r0, [pc, #32]	; (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f86:	f00c fc45 	bl	800d814 <HAL_UARTEx_SetRxFifoThreshold>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f90:	f000 f924 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f96:	f00c fbc6 	bl	800d726 <HAL_UARTEx_DisableFifoMode>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000fa0:	f000 f91c 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	24000474 	.word	0x24000474
 8000fac:	40011000 	.word	0x40011000

08000fb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_DMA_Init+0x4c>)
 8000fb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fbc:	4a0f      	ldr	r2, [pc, #60]	; (8000ffc <MX_DMA_Init+0x4c>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <MX_DMA_Init+0x4c>)
 8000fc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	200b      	movs	r0, #11
 8000fda:	f003 fda2 	bl	8004b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fde:	200b      	movs	r0, #11
 8000fe0:	f003 fdb9 	bl	8004b56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	200c      	movs	r0, #12
 8000fea:	f003 fd9a 	bl	8004b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000fee:	200c      	movs	r0, #12
 8000ff0:	f003 fdb1 	bl	8004b56 <HAL_NVIC_EnableIRQ>

}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	58024400 	.word	0x58024400

08001000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08c      	sub	sp, #48	; 0x30
 8001004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001016:	4b6b      	ldr	r3, [pc, #428]	; (80011c4 <MX_GPIO_Init+0x1c4>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101c:	4a69      	ldr	r2, [pc, #420]	; (80011c4 <MX_GPIO_Init+0x1c4>)
 800101e:	f043 0310 	orr.w	r3, r3, #16
 8001022:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001026:	4b67      	ldr	r3, [pc, #412]	; (80011c4 <MX_GPIO_Init+0x1c4>)
 8001028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102c:	f003 0310 	and.w	r3, r3, #16
 8001030:	61bb      	str	r3, [r7, #24]
 8001032:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001034:	4b63      	ldr	r3, [pc, #396]	; (80011c4 <MX_GPIO_Init+0x1c4>)
 8001036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103a:	4a62      	ldr	r2, [pc, #392]	; (80011c4 <MX_GPIO_Init+0x1c4>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001044:	4b5f      	ldr	r3, [pc, #380]	; (80011c4 <MX_GPIO_Init+0x1c4>)
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001052:	4b5c      	ldr	r3, [pc, #368]	; (80011c4 <MX_GPIO_Init+0x1c4>)
 8001054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001058:	4a5a      	ldr	r2, [pc, #360]	; (80011c4 <MX_GPIO_Init+0x1c4>)
 800105a:	f043 0320 	orr.w	r3, r3, #32
 800105e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001062:	4b58      	ldr	r3, [pc, #352]	; (80011c4 <MX_GPIO_Init+0x1c4>)
 8001064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001068:	f003 0320 	and.w	r3, r3, #32
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001070:	4b54      	ldr	r3, [pc, #336]	; (80011c4 <MX_GPIO_Init+0x1c4>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001076:	4a53      	ldr	r2, [pc, #332]	; (80011c4 <MX_GPIO_Init+0x1c4>)
 8001078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800107c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001080:	4b50      	ldr	r3, [pc, #320]	; (80011c4 <MX_GPIO_Init+0x1c4>)
 8001082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b4d      	ldr	r3, [pc, #308]	; (80011c4 <MX_GPIO_Init+0x1c4>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001094:	4a4b      	ldr	r2, [pc, #300]	; (80011c4 <MX_GPIO_Init+0x1c4>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800109e:	4b49      	ldr	r3, [pc, #292]	; (80011c4 <MX_GPIO_Init+0x1c4>)
 80010a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ac:	4b45      	ldr	r3, [pc, #276]	; (80011c4 <MX_GPIO_Init+0x1c4>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b2:	4a44      	ldr	r2, [pc, #272]	; (80011c4 <MX_GPIO_Init+0x1c4>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010bc:	4b41      	ldr	r3, [pc, #260]	; (80011c4 <MX_GPIO_Init+0x1c4>)
 80010be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ca:	4b3e      	ldr	r3, [pc, #248]	; (80011c4 <MX_GPIO_Init+0x1c4>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d0:	4a3c      	ldr	r2, [pc, #240]	; (80011c4 <MX_GPIO_Init+0x1c4>)
 80010d2:	f043 0308 	orr.w	r3, r3, #8
 80010d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010da:	4b3a      	ldr	r3, [pc, #232]	; (80011c4 <MX_GPIO_Init+0x1c4>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e0:	f003 0308 	and.w	r3, r3, #8
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80010ee:	4836      	ldr	r0, [pc, #216]	; (80011c8 <MX_GPIO_Init+0x1c8>)
 80010f0:	f006 fd2e 	bl	8007b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_5, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	f242 0120 	movw	r1, #8224	; 0x2020
 80010fa:	4834      	ldr	r0, [pc, #208]	; (80011cc <MX_GPIO_Init+0x1cc>)
 80010fc:	f006 fd28 	bl	8007b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
 8001106:	4832      	ldr	r0, [pc, #200]	; (80011d0 <MX_GPIO_Init+0x1d0>)
 8001108:	f006 fd22 	bl	8007b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8001112:	4830      	ldr	r0, [pc, #192]	; (80011d4 <MX_GPIO_Init+0x1d4>)
 8001114:	f006 fd1c 	bl	8007b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 800111e:	482e      	ldr	r0, [pc, #184]	; (80011d8 <MX_GPIO_Init+0x1d8>)
 8001120:	f006 fd16 	bl	8007b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8;
 8001124:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8001128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	4619      	mov	r1, r3
 800113c:	4822      	ldr	r0, [pc, #136]	; (80011c8 <MX_GPIO_Init+0x1c8>)
 800113e:	f006 fb5f 	bl	8007800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8001142:	f242 0320 	movw	r3, #8224	; 0x2020
 8001146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4619      	mov	r1, r3
 800115a:	481c      	ldr	r0, [pc, #112]	; (80011cc <MX_GPIO_Init+0x1cc>)
 800115c:	f006 fb50 	bl	8007800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF9 PF11 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15;
 8001160:	f44f 430b 	mov.w	r3, #35584	; 0x8b00
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001166:	2301      	movs	r3, #1
 8001168:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	4619      	mov	r1, r3
 8001178:	4815      	ldr	r0, [pc, #84]	; (80011d0 <MX_GPIO_Init+0x1d0>)
 800117a:	f006 fb41 	bl	8007800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9;
 800117e:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001184:	2301      	movs	r3, #1
 8001186:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4619      	mov	r1, r3
 8001196:	480f      	ldr	r0, [pc, #60]	; (80011d4 <MX_GPIO_Init+0x1d4>)
 8001198:	f006 fb32 	bl	8007800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 800119c:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4619      	mov	r1, r3
 80011b4:	4808      	ldr	r0, [pc, #32]	; (80011d8 <MX_GPIO_Init+0x1d8>)
 80011b6:	f006 fb23 	bl	8007800 <HAL_GPIO_Init>

}
 80011ba:	bf00      	nop
 80011bc:	3730      	adds	r7, #48	; 0x30
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	58024400 	.word	0x58024400
 80011c8:	58021000 	.word	0x58021000
 80011cc:	58020800 	.word	0x58020800
 80011d0:	58021400 	.word	0x58021400
 80011d4:	58020400 	.word	0x58020400
 80011d8:	58020c00 	.word	0x58020c00

080011dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
}
 80011e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <Error_Handler+0x8>
	...

080011e8 <main_function>:
#include "debug.h"
#include "ros_main.h"
#include "stm_main.h"


void main_function(){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	ROS::setup();
 80011ec:	f001 fe9e 	bl	8002f2c <_ZN3ROS5setupEv>
	STM::setup();
 80011f0:	f003 f914 	bl	800441c <_ZN3STM5setupEv>

	while(1){
		if(debug_mode) debug_loop();
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <main_function+0x20>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d002      	beq.n	8001202 <main_function+0x1a>
 80011fc:	f7ff fb94 	bl	8000928 <_Z10debug_loopv>
 8001200:	e7f8      	b.n	80011f4 <main_function+0xc>
		else ROS::loop();
 8001202:	f001 fea9 	bl	8002f58 <_ZN3ROS4loopEv>
		if(debug_mode) debug_loop();
 8001206:	e7f5      	b.n	80011f4 <main_function+0xc>
 8001208:	24000000 	.word	0x24000000

0800120c <_ZN8CAR_INFOC1Ev>:

typedef struct{
	double Vx=0;
	double Vy=0;
	double Omega=0;
} CAR_INFO;
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	e9c1 2300 	strd	r2, r3, [r1]
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	0000      	movs	r0, r0
	...

08001250 <_ZN7MecanumC1Ev>:
#include "mecanum.h"
#include "dc_motor.h"

Mecanum mecanum;

Mecanum::Mecanum(void){
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ffd6 	bl	800120c <_ZN8CAR_INFOC1Ev>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3318      	adds	r3, #24
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ffd1 	bl	800120c <_ZN8CAR_INFOC1Ev>
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <_ZN7MecanumC1Ev+0x60>)
 8001272:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	a309      	add	r3, pc, #36	; (adr r3, 80012a0 <_ZN7MecanumC1Ev+0x50>)
 800127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	a308      	add	r3, pc, #32	; (adr r3, 80012a8 <_ZN7MecanumC1Ev+0x58>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	DC_motor_init();
 800128e:	f7ff f9f5 	bl	800067c <_Z13DC_motor_initv>
}
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	f3af 8000 	nop.w
 80012a0:	cccccccd 	.word	0xcccccccd
 80012a4:	4020cccc 	.word	0x4020cccc
 80012a8:	39581062 	.word	0x39581062
 80012ac:	400d48b4 	.word	0x400d48b4
 80012b0:	40270000 	.word	0x40270000

080012b4 <_ZN7Mecanum3runEv>:

// calculate wheel (-> PID) -> calculate car -> pub
void Mecanum::run(void){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
//	tf2_wheel_speed();
	tf2_car_speed();
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f805 	bl	80012cc <_ZN7Mecanum13tf2_car_speedEv>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <_ZN7Mecanum13tf2_car_speedEv>:
	br.rps_goal = -(CAR_Goal.Vy + CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
}


// give current car speed
void Mecanum::tf2_car_speed(void){
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	CAR_Now.Vy = -(0.25)*radius*(fl.rps_now + fr.rps_now + bl.rps_now + br.rps_now);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80012da:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 80012de:	ee27 6b06 	vmul.f64	d6, d7, d6
 80012e2:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <_ZN7Mecanum13tf2_car_speedEv+0xe4>)
 80012e4:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 80012e8:	4b32      	ldr	r3, [pc, #200]	; (80013b4 <_ZN7Mecanum13tf2_car_speedEv+0xe8>)
 80012ea:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80012ee:	ee35 5b07 	vadd.f64	d5, d5, d7
 80012f2:	4b31      	ldr	r3, [pc, #196]	; (80013b8 <_ZN7Mecanum13tf2_car_speedEv+0xec>)
 80012f4:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80012f8:	ee35 5b07 	vadd.f64	d5, d5, d7
 80012fc:	4b2f      	ldr	r3, [pc, #188]	; (80013bc <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 80012fe:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001302:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001306:	ee26 7b07 	vmul.f64	d7, d6, d7
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	ed83 7b08 	vstr	d7, [r3, #32]
	CAR_Now.Vx = -(0.25)*radius*(fl.rps_now - fr.rps_now - bl.rps_now + br.rps_now);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001316:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 800131a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800131e:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <_ZN7Mecanum13tf2_car_speedEv+0xe4>)
 8001320:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001324:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <_ZN7Mecanum13tf2_car_speedEv+0xe8>)
 8001326:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800132a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800132e:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <_ZN7Mecanum13tf2_car_speedEv+0xec>)
 8001330:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001334:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001338:	4b20      	ldr	r3, [pc, #128]	; (80013bc <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 800133a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800133e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001342:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	ed83 7b06 	vstr	d7, [r3, #24]
	CAR_Now.Omega = -(0.25)*radius*(1/(a+b))*(-fl.rps_now + fr.rps_now - bl.rps_now + br.rps_now);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001352:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 8001356:	ee27 6b06 	vmul.f64	d6, d7, d6
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001366:	ee35 5b07 	vadd.f64	d5, d5, d7
 800136a:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800136e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001372:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <_ZN7Mecanum13tf2_car_speedEv+0xe8>)
 8001378:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <_ZN7Mecanum13tf2_car_speedEv+0xe4>)
 800137e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001382:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <_ZN7Mecanum13tf2_car_speedEv+0xec>)
 8001388:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800138c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 8001392:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001396:	ee35 7b07 	vadd.f64	d7, d5, d7
 800139a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	24000110 	.word	0x24000110
 80013b4:	240000a0 	.word	0x240000a0
 80013b8:	240001f0 	.word	0x240001f0
 80013bc:	24000180 	.word	0x24000180

080013c0 <_Z41__static_initialization_and_destruction_0ii>:
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d107      	bne.n	80013e0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d102      	bne.n	80013e0 <_Z41__static_initialization_and_destruction_0ii+0x20>
Mecanum mecanum;
 80013da:	4803      	ldr	r0, [pc, #12]	; (80013e8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80013dc:	f7ff ff38 	bl	8001250 <_ZN7MecanumC1Ev>
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	240005f8 	.word	0x240005f8

080013ec <_GLOBAL__sub_I_mecanum>:
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013f4:	2001      	movs	r0, #1
 80013f6:	f7ff ffe3 	bl	80013c0 <_Z41__static_initialization_and_destruction_0ii>
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	4a04      	ldr	r2, [pc, #16]	; (800143c <_ZN3ros3MsgC1Ev+0x1c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	0800df5c 	.word	0x0800df5c

08001440 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
      data()
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ffe8 	bl	8001420 <_ZN3ros3MsgC1Ev>
 8001450:	4a06      	ldr	r2, [pc, #24]	; (800146c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3304      	adds	r3, #4
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ffce 	bl	80013fc <_ZN3ros4TimeC1Ev>
    {
    }
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	0800df44 	.word	0x0800df44

08001470 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6859      	ldr	r1, [r3, #4]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	4413      	add	r3, r2
 8001488:	b2ca      	uxtb	r2, r1
 800148a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	0a19      	lsrs	r1, r3, #8
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	3301      	adds	r3, #1
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	4413      	add	r3, r2
 800149a:	b2ca      	uxtb	r2, r1
 800149c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	0c19      	lsrs	r1, r3, #16
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	3302      	adds	r3, #2
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	b2ca      	uxtb	r2, r1
 80014ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	0e19      	lsrs	r1, r3, #24
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	3303      	adds	r3, #3
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	4413      	add	r3, r2
 80014be:	b2ca      	uxtb	r2, r1
 80014c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3304      	adds	r3, #4
 80014c6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6899      	ldr	r1, [r3, #8]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	4413      	add	r3, r2
 80014d2:	b2ca      	uxtb	r2, r1
 80014d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	0a19      	lsrs	r1, r3, #8
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	3301      	adds	r3, #1
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	b2ca      	uxtb	r2, r1
 80014e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	0c19      	lsrs	r1, r3, #16
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3302      	adds	r3, #2
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	4413      	add	r3, r2
 80014f6:	b2ca      	uxtb	r2, r1
 80014f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	0e19      	lsrs	r1, r3, #24
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	3303      	adds	r3, #3
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	4413      	add	r3, r2
 8001508:	b2ca      	uxtb	r2, r1
 800150a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	3304      	adds	r3, #4
 8001510:	60fb      	str	r3, [r7, #12]
      return offset;
 8001512:	68fb      	ldr	r3, [r7, #12]
    }
 8001514:	4618      	mov	r0, r3
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	4413      	add	r3, r2
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3301      	adds	r3, #1
 8001544:	6839      	ldr	r1, [r7, #0]
 8001546:	440b      	add	r3, r1
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3302      	adds	r3, #2
 800155a:	6839      	ldr	r1, [r7, #0]
 800155c:	440b      	add	r3, r1
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	041b      	lsls	r3, r3, #16
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	3303      	adds	r3, #3
 8001570:	6839      	ldr	r1, [r7, #0]
 8001572:	440b      	add	r3, r1
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	061b      	lsls	r3, r3, #24
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	3304      	adds	r3, #4
 8001582:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	4413      	add	r3, r2
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3301      	adds	r3, #1
 800159a:	6839      	ldr	r1, [r7, #0]
 800159c:	440b      	add	r3, r1
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3302      	adds	r3, #2
 80015b0:	6839      	ldr	r1, [r7, #0]
 80015b2:	440b      	add	r3, r1
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	041b      	lsls	r3, r3, #16
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3303      	adds	r3, #3
 80015c6:	6839      	ldr	r1, [r7, #0]
 80015c8:	440b      	add	r3, r1
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	061b      	lsls	r3, r3, #24
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3304      	adds	r3, #4
 80015d8:	60fb      	str	r3, [r7, #12]
     return offset;
 80015da:	68fb      	ldr	r3, [r7, #12]
    }
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	0800dd00 	.word	0x0800dd00

08001604 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	0800dd10 	.word	0x0800dd10

08001620 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fef8 	bl	8001420 <_ZN3ros3MsgC1Ev>
 8001630:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	809a      	strh	r2, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a09      	ldr	r2, [pc, #36]	; (8001664 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a07      	ldr	r2, [pc, #28]	; (8001664 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a06      	ldr	r2, [pc, #24]	; (8001664 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800164c:	611a      	str	r2, [r3, #16]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	615a      	str	r2, [r3, #20]
    {
    }
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	0800df2c 	.word	0x0800df2c
 8001664:	0800dd34 	.word	0x0800dd34

08001668 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	8899      	ldrh	r1, [r3, #4]
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	4413      	add	r3, r2
 8001680:	b2ca      	uxtb	r2, r1
 8001682:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	889b      	ldrh	r3, [r3, #4]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	b299      	uxth	r1, r3
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	3301      	adds	r3, #1
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	4413      	add	r3, r2
 8001694:	b2ca      	uxtb	r2, r1
 8001696:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	3302      	adds	r3, #2
 800169c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe fe34 	bl	8000310 <strlen>
 80016a8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	69b9      	ldr	r1, [r7, #24]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f001 fc7e 	bl	8002fb4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	3304      	adds	r3, #4
 80016bc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	18d0      	adds	r0, r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4619      	mov	r1, r3
 80016cc:	f00c f974 	bl	800d9b8 <memcpy>
      offset += length_topic_name;
 80016d0:	69fa      	ldr	r2, [r7, #28]
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	4413      	add	r3, r2
 80016d6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe fe17 	bl	8000310 <strlen>
 80016e2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	4413      	add	r3, r2
 80016ea:	6979      	ldr	r1, [r7, #20]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f001 fc61 	bl	8002fb4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3304      	adds	r3, #4
 80016f6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	18d0      	adds	r0, r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4619      	mov	r1, r3
 8001706:	f00c f957 	bl	800d9b8 <memcpy>
      offset += length_message_type;
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	4413      	add	r3, r2
 8001710:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe fdfa 	bl	8000310 <strlen>
 800171c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	4413      	add	r3, r2
 8001724:	6939      	ldr	r1, [r7, #16]
 8001726:	4618      	mov	r0, r3
 8001728:	f001 fc44 	bl	8002fb4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	3304      	adds	r3, #4
 8001730:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	18d0      	adds	r0, r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4619      	mov	r1, r3
 8001740:	f00c f93a 	bl	800d9b8 <memcpy>
      offset += length_md5sum;
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4413      	add	r3, r2
 800174a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001752:	68f9      	ldr	r1, [r7, #12]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	4413      	add	r3, r2
 800175a:	b2ca      	uxtb	r2, r1
 800175c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	0a19      	lsrs	r1, r3, #8
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3301      	adds	r3, #1
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	4413      	add	r3, r2
 800176a:	b2ca      	uxtb	r2, r1
 800176c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	0c19      	lsrs	r1, r3, #16
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3302      	adds	r3, #2
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	4413      	add	r3, r2
 800177a:	b2ca      	uxtb	r2, r1
 800177c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	0e19      	lsrs	r1, r3, #24
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3303      	adds	r3, #3
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	4413      	add	r3, r2
 800178a:	b2ca      	uxtb	r2, r1
 800178c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	61fb      	str	r3, [r7, #28]
      return offset;
 8001794:	69fb      	ldr	r3, [r7, #28]
    }
 8001796:	4618      	mov	r0, r3
 8001798:	3720      	adds	r7, #32
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800179e:	b580      	push	{r7, lr}
 80017a0:	b08a      	sub	sp, #40	; 0x28
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	4413      	add	r3, r2
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	889b      	ldrh	r3, [r3, #4]
 80017be:	b21a      	sxth	r2, r3
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	3301      	adds	r3, #1
 80017c4:	6839      	ldr	r1, [r7, #0]
 80017c6:	440b      	add	r3, r1
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	021b      	lsls	r3, r3, #8
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	4313      	orrs	r3, r2
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	3302      	adds	r3, #2
 80017dc:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	441a      	add	r2, r3
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4611      	mov	r1, r2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f001 fc00 	bl	8002ff0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	3304      	adds	r3, #4
 80017f4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	4413      	add	r3, r2
 8001800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001802:	429a      	cmp	r2, r3
 8001804:	d20c      	bcs.n	8001820 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	441a      	add	r2, r3
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	3b01      	subs	r3, #1
 8001810:	6839      	ldr	r1, [r7, #0]
 8001812:	440b      	add	r3, r1
 8001814:	7812      	ldrb	r2, [r2, #0]
 8001816:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	3301      	adds	r3, #1
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
 800181e:	e7ec      	b.n	80017fa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	4413      	add	r3, r2
 8001826:	3b01      	subs	r3, #1
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	4413      	add	r3, r2
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	3b01      	subs	r3, #1
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	441a      	add	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	4413      	add	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	441a      	add	r2, r3
 800184a:	f107 0310 	add.w	r3, r7, #16
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f001 fbcd 	bl	8002ff0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	3304      	adds	r3, #4
 800185a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	623b      	str	r3, [r7, #32]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4413      	add	r3, r2
 8001866:	6a3a      	ldr	r2, [r7, #32]
 8001868:	429a      	cmp	r2, r3
 800186a:	d20c      	bcs.n	8001886 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	441a      	add	r2, r3
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	3b01      	subs	r3, #1
 8001876:	6839      	ldr	r1, [r7, #0]
 8001878:	440b      	add	r3, r1
 800187a:	7812      	ldrb	r2, [r2, #0]
 800187c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	3301      	adds	r3, #1
 8001882:	623b      	str	r3, [r7, #32]
 8001884:	e7ec      	b.n	8001860 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4413      	add	r3, r2
 800188c:	3b01      	subs	r3, #1
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	4413      	add	r3, r2
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	3b01      	subs	r3, #1
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	441a      	add	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4413      	add	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	441a      	add	r2, r3
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	4611      	mov	r1, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f001 fb9a 	bl	8002ff0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	3304      	adds	r3, #4
 80018c0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	69fa      	ldr	r2, [r7, #28]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d20c      	bcs.n	80018ec <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	441a      	add	r2, r3
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	3b01      	subs	r3, #1
 80018dc:	6839      	ldr	r1, [r7, #0]
 80018de:	440b      	add	r3, r1
 80018e0:	7812      	ldrb	r2, [r2, #0]
 80018e2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	3301      	adds	r3, #1
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	e7ec      	b.n	80018c6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4413      	add	r3, r2
 80018f2:	3b01      	subs	r3, #1
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	3b01      	subs	r3, #1
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	441a      	add	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4413      	add	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	6839      	ldr	r1, [r7, #0]
 800191a:	440a      	add	r2, r1
 800191c:	7812      	ldrb	r2, [r2, #0]
 800191e:	4313      	orrs	r3, r2
 8001920:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	3301      	adds	r3, #1
 8001928:	6839      	ldr	r1, [r7, #0]
 800192a:	440b      	add	r3, r1
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	4313      	orrs	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	3302      	adds	r3, #2
 800193a:	6839      	ldr	r1, [r7, #0]
 800193c:	440b      	add	r3, r1
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	041b      	lsls	r3, r3, #16
 8001942:	4313      	orrs	r3, r2
 8001944:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	3303      	adds	r3, #3
 800194c:	6839      	ldr	r1, [r7, #0]
 800194e:	440b      	add	r3, r1
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	061b      	lsls	r3, r3, #24
 8001954:	4313      	orrs	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001958:	68ba      	ldr	r2, [r7, #8]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	3304      	adds	r3, #4
 8001962:	61bb      	str	r3, [r7, #24]
     return offset;
 8001964:	69bb      	ldr	r3, [r7, #24]
    }
 8001966:	4618      	mov	r0, r3
 8001968:	3728      	adds	r7, #40	; 0x28
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	0800dd38 	.word	0x0800dd38

0800198c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	0800dd54 	.word	0x0800dd54

080019a8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fd34 	bl	8001420 <_ZN3ros3MsgC1Ev>
 80019b8:	4a06      	ldr	r2, [pc, #24]	; (80019d4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	711a      	strb	r2, [r3, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80019c8:	609a      	str	r2, [r3, #8]
    {
    }
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	0800df14 	.word	0x0800df14
 80019d8:	0800dd34 	.word	0x0800dd34

080019dc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	7912      	ldrb	r2, [r2, #4]
 80019f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	3301      	adds	r3, #1
 80019fa:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fc85 	bl	8000310 <strlen>
 8001a06:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	68b9      	ldr	r1, [r7, #8]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f001 facf 	bl	8002fb4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	18d0      	adds	r0, r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f00b ffc5 	bl	800d9b8 <memcpy>
      offset += length_msg;
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
      return offset;
 8001a36:	68fb      	ldr	r3, [r7, #12]
    }
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	4413      	add	r3, r2
 8001a54:	781a      	ldrb	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	441a      	add	r2, r3
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f001 fabf 	bl	8002ff0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	3304      	adds	r3, #4
 8001a76:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4413      	add	r3, r2
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d20c      	bcs.n	8001aa2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	441a      	add	r2, r3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	3b01      	subs	r3, #1
 8001a92:	6839      	ldr	r1, [r7, #0]
 8001a94:	440b      	add	r3, r1
 8001a96:	7812      	ldrb	r2, [r2, #0]
 8001a98:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	e7ec      	b.n	8001a7c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	4413      	add	r3, r2
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	441a      	add	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
     return offset;
 8001ac6:	693b      	ldr	r3, [r7, #16]
    }
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	0800dd78 	.word	0x0800dd78

08001aec <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	0800dd8c 	.word	0x0800dd8c

08001b08 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fc84 	bl	8001420 <_ZN3ros3MsgC1Ev>
 8001b18:	4a0c      	ldr	r2, [pc, #48]	; (8001b4c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	61da      	str	r2, [r3, #28]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	0800defc 	.word	0x0800defc

08001b50 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6859      	ldr	r1, [r3, #4]
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	4413      	add	r3, r2
 8001b68:	b2ca      	uxtb	r2, r1
 8001b6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	0a19      	lsrs	r1, r3, #8
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	3301      	adds	r3, #1
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	4413      	add	r3, r2
 8001b7a:	b2ca      	uxtb	r2, r1
 8001b7c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	0c19      	lsrs	r1, r3, #16
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	3302      	adds	r3, #2
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	b2ca      	uxtb	r2, r1
 8001b8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	0e19      	lsrs	r1, r3, #24
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	3303      	adds	r3, #3
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b2ca      	uxtb	r2, r1
 8001ba0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001ba8:	2300      	movs	r3, #0
 8001baa:	623b      	str	r3, [r7, #32]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	6a3a      	ldr	r2, [r7, #32]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d22b      	bcs.n	8001c0e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001bc4:	6939      	ldr	r1, [r7, #16]
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	b2ca      	uxtb	r2, r1
 8001bce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	0a19      	lsrs	r1, r3, #8
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	b2ca      	uxtb	r2, r1
 8001bde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	0c19      	lsrs	r1, r3, #16
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	3302      	adds	r3, #2
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	b2ca      	uxtb	r2, r1
 8001bee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	0e19      	lsrs	r1, r3, #24
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	3303      	adds	r3, #3
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	b2ca      	uxtb	r2, r1
 8001bfe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	3304      	adds	r3, #4
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	623b      	str	r3, [r7, #32]
 8001c0c:	e7ce      	b.n	8001bac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6919      	ldr	r1, [r3, #16]
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	b2ca      	uxtb	r2, r1
 8001c1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	0a19      	lsrs	r1, r3, #8
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	3301      	adds	r3, #1
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	4413      	add	r3, r2
 8001c2a:	b2ca      	uxtb	r2, r1
 8001c2c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	0c19      	lsrs	r1, r3, #16
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	3302      	adds	r3, #2
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	b2ca      	uxtb	r2, r1
 8001c3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	0e19      	lsrs	r1, r3, #24
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	3303      	adds	r3, #3
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	b2ca      	uxtb	r2, r1
 8001c50:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	3304      	adds	r3, #4
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d22b      	bcs.n	8001cbe <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699a      	ldr	r2, [r3, #24]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001c74:	68f9      	ldr	r1, [r7, #12]
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	b2ca      	uxtb	r2, r1
 8001c7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	0a19      	lsrs	r1, r3, #8
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	3301      	adds	r3, #1
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	b2ca      	uxtb	r2, r1
 8001c8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	0c19      	lsrs	r1, r3, #16
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	3302      	adds	r3, #2
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	b2ca      	uxtb	r2, r1
 8001c9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	0e19      	lsrs	r1, r3, #24
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	3303      	adds	r3, #3
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	b2ca      	uxtb	r2, r1
 8001cae:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	e7ce      	b.n	8001c5c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69d9      	ldr	r1, [r3, #28]
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	b2ca      	uxtb	r2, r1
 8001cca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	0a19      	lsrs	r1, r3, #8
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	4413      	add	r3, r2
 8001cda:	b2ca      	uxtb	r2, r1
 8001cdc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	0c19      	lsrs	r1, r3, #16
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	b2ca      	uxtb	r2, r1
 8001cee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	0e19      	lsrs	r1, r3, #24
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	3303      	adds	r3, #3
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	b2ca      	uxtb	r2, r1
 8001d00:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	3304      	adds	r3, #4
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d228      	bcs.n	8001d68 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe faf4 	bl	8000310 <strlen>
 8001d28:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	6979      	ldr	r1, [r7, #20]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f001 f93e 	bl	8002fb4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	18d0      	adds	r0, r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	4619      	mov	r1, r3
 8001d54:	f00b fe30 	bl	800d9b8 <memcpy>
      offset += length_stringsi;
 8001d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	3301      	adds	r3, #1
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	e7d1      	b.n	8001d0c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3728      	adds	r7, #40	; 0x28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b08e      	sub	sp, #56	; 0x38
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	4413      	add	r3, r2
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	4413      	add	r3, r2
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	6a3a      	ldr	r2, [r7, #32]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9e:	3302      	adds	r3, #2
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	041b      	lsls	r3, r3, #16
 8001da8:	6a3a      	ldr	r2, [r7, #32]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db0:	3303      	adds	r3, #3
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	4413      	add	r3, r2
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	061b      	lsls	r3, r3, #24
 8001dba:	6a3a      	ldr	r2, [r7, #32]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	6a3a      	ldr	r2, [r7, #32]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d90a      	bls.n	8001de6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4610      	mov	r0, r2
 8001ddc:	f00b fe02 	bl	800d9e4 <realloc>
 8001de0:	4602      	mov	r2, r0
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a3a      	ldr	r2, [r7, #32]
 8001dea:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001dec:	2300      	movs	r3, #0
 8001dee:	633b      	str	r3, [r7, #48]	; 0x30
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d236      	bcs.n	8001e68 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e02:	6839      	ldr	r1, [r7, #0]
 8001e04:	440a      	add	r2, r1
 8001e06:	7812      	ldrb	r2, [r2, #0]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e10:	3301      	adds	r3, #1
 8001e12:	6839      	ldr	r1, [r7, #0]
 8001e14:	440b      	add	r3, r1
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e22:	3302      	adds	r3, #2
 8001e24:	6839      	ldr	r1, [r7, #0]
 8001e26:	440b      	add	r3, r1
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	041b      	lsls	r3, r3, #16
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e34:	3303      	adds	r3, #3
 8001e36:	6839      	ldr	r1, [r7, #0]
 8001e38:	440b      	add	r3, r1
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	3208      	adds	r2, #8
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e62:	3301      	adds	r3, #1
 8001e64:	633b      	str	r3, [r7, #48]	; 0x30
 8001e66:	e7c3      	b.n	8001df0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e74:	3301      	adds	r3, #1
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	4413      	add	r3, r2
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	021b      	lsls	r3, r3, #8
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e86:	3302      	adds	r3, #2
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	041b      	lsls	r3, r3, #16
 8001e90:	69fa      	ldr	r2, [r7, #28]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e98:	3303      	adds	r3, #3
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	061b      	lsls	r3, r3, #24
 8001ea2:	69fa      	ldr	r2, [r7, #28]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eaa:	3304      	adds	r3, #4
 8001eac:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d90a      	bls.n	8001ece <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699a      	ldr	r2, [r3, #24]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	f00b fd8e 	bl	800d9e4 <realloc>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69fa      	ldr	r2, [r7, #28]
 8001ed2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d236      	bcs.n	8001f50 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eea:	6839      	ldr	r1, [r7, #0]
 8001eec:	440a      	add	r2, r1
 8001eee:	7812      	ldrb	r2, [r2, #0]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef8:	3301      	adds	r3, #1
 8001efa:	6839      	ldr	r1, [r7, #0]
 8001efc:	440b      	add	r3, r1
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	6839      	ldr	r1, [r7, #0]
 8001f0e:	440b      	add	r3, r1
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1c:	3303      	adds	r3, #3
 8001f1e:	6839      	ldr	r1, [r7, #0]
 8001f20:	440b      	add	r3, r1
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	061b      	lsls	r3, r3, #24
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f32:	3304      	adds	r3, #4
 8001f34:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699a      	ldr	r2, [r3, #24]
 8001f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	3214      	adds	r2, #20
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f4e:	e7c3      	b.n	8001ed8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	4413      	add	r3, r2
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	4413      	add	r3, r2
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	021b      	lsls	r3, r3, #8
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f6e:	3302      	adds	r3, #2
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	041b      	lsls	r3, r3, #16
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f80:	3303      	adds	r3, #3
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	4413      	add	r3, r2
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	061b      	lsls	r3, r3, #24
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f92:	3304      	adds	r3, #4
 8001f94:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d90a      	bls.n	8001fb6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4610      	mov	r0, r2
 8001fac:	f00b fd1a 	bl	800d9e4 <realloc>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d23f      	bcs.n	800204a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	441a      	add	r2, r3
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f001 f80a 	bl	8002ff0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fde:	3304      	adds	r3, #4
 8001fe0:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4413      	add	r3, r2
 8001fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d20c      	bcs.n	800200c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	441a      	add	r2, r3
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	6839      	ldr	r1, [r7, #0]
 8001ffe:	440b      	add	r3, r1
 8002000:	7812      	ldrb	r2, [r2, #0]
 8002002:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	3301      	adds	r3, #1
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
 800200a:	e7ec      	b.n	8001fe6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800200c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4413      	add	r3, r2
 8002012:	3b01      	subs	r3, #1
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	4413      	add	r3, r2
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800201c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201e:	3b01      	subs	r3, #1
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	441a      	add	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002028:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4413      	add	r3, r2
 800202e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	3220      	adds	r2, #32
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002044:	3301      	adds	r3, #1
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
 8002048:	e7ba      	b.n	8001fc0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800204a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800204c:	4618      	mov	r0, r3
 800204e:	3738      	adds	r7, #56	; 0x38
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	4b03      	ldr	r3, [pc, #12]	; (800206c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	0800de68 	.word	0x0800de68

08002070 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	4b03      	ldr	r3, [pc, #12]	; (8002088 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	0800ddb0 	.word	0x0800ddb0

0800208c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	611a      	str	r2, [r3, #16]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68d8      	ldr	r0, [r3, #12]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6891      	ldr	r1, [r2, #8]
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	4798      	blx	r3
 80020d8:	4603      	mov	r3, r0
  };
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
  }
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a42      	ldr	r2, [pc, #264]	; (8002218 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d068      	beq.n	80021e4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a40      	ldr	r2, [pc, #256]	; (800221c <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d061      	beq.n	80021e4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a3d      	ldr	r2, [pc, #244]	; (8002220 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d05a      	beq.n	80021e4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a3b      	ldr	r2, [pc, #236]	; (8002224 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d053      	beq.n	80021e4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a38      	ldr	r2, [pc, #224]	; (8002228 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d04c      	beq.n	80021e4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a36      	ldr	r2, [pc, #216]	; (800222c <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d045      	beq.n	80021e4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a33      	ldr	r2, [pc, #204]	; (8002230 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d03e      	beq.n	80021e4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a31      	ldr	r2, [pc, #196]	; (8002234 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d037      	beq.n	80021e4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a2e      	ldr	r2, [pc, #184]	; (8002238 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d030      	beq.n	80021e4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a2c      	ldr	r2, [pc, #176]	; (800223c <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d029      	beq.n	80021e4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a29      	ldr	r2, [pc, #164]	; (8002240 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d022      	beq.n	80021e4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a27      	ldr	r2, [pc, #156]	; (8002244 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d01b      	beq.n	80021e4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a24      	ldr	r2, [pc, #144]	; (8002248 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d014      	beq.n	80021e4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a22      	ldr	r2, [pc, #136]	; (800224c <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d00d      	beq.n	80021e4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a1f      	ldr	r2, [pc, #124]	; (8002250 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d006      	beq.n	80021e4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a1d      	ldr	r2, [pc, #116]	; (8002254 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d109      	bne.n	80021f8 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80021f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f6:	e008      	b.n	800220a <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002206:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40020010 	.word	0x40020010
 800221c:	40020028 	.word	0x40020028
 8002220:	40020040 	.word	0x40020040
 8002224:	40020058 	.word	0x40020058
 8002228:	40020070 	.word	0x40020070
 800222c:	40020088 	.word	0x40020088
 8002230:	400200a0 	.word	0x400200a0
 8002234:	400200b8 	.word	0x400200b8
 8002238:	40020410 	.word	0x40020410
 800223c:	40020428 	.word	0x40020428
 8002240:	40020440 	.word	0x40020440
 8002244:	40020458 	.word	0x40020458
 8002248:	40020470 	.word	0x40020470
 800224c:	40020488 	.word	0x40020488
 8002250:	400204a0 	.word	0x400204a0
 8002254:	400204b8 	.word	0x400204b8

08002258 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a0a      	ldr	r2, [pc, #40]	; (800228c <_ZN13STM32HardwareC1Ev+0x34>)
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
    }
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	24000474 	.word	0x24000474

08002290 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f804 	bl	80022a6 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3304      	adds	r3, #4
 80022b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ba:	4619      	mov	r1, r3
 80022bc:	f009 fafe 	bl	800b8bc <HAL_UART_Receive_DMA>
    }
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <_ZN13STM32Hardware4readEv>:

    int read(){
 80022c8:	b590      	push	{r4, r7, lr}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
      int c = -1;
 80022d0:	f04f 33ff 	mov.w	r3, #4294967295
 80022d4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff0d 	bl	80020fc <_ZN13STM32Hardware10getRdmaIndEv>
 80022e2:	4603      	mov	r3, r0
 80022e4:	429c      	cmp	r4, r3
 80022e6:	bf14      	ite	ne
 80022e8:	2301      	movne	r3, #1
 80022ea:	2300      	moveq	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d012      	beq.n	8002318 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80022f8:	1c59      	adds	r1, r3, #1
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	4413      	add	r3, r2
 8002304:	791b      	ldrb	r3, [r3, #4]
 8002306:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800230e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      }
      return c;
 8002318:	68fb      	ldr	r3, [r7, #12]
    }
 800231a:	4618      	mov	r0, r3
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	bd90      	pop	{r4, r7, pc}
	...

08002324 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002334:	2b20      	cmp	r3, #32
 8002336:	d108      	bne.n	800234a <_ZN13STM32Hardware5flushEv+0x26>
 8002338:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <_ZN13STM32Hardware5flushEv+0xb4>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	f083 0301 	eor.w	r3, r3, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <_ZN13STM32Hardware5flushEv+0x26>
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <_ZN13STM32Hardware5flushEv+0x28>
 800234a:	2300      	movs	r3, #0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d03f      	beq.n	80023d0 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002350:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002352:	2201      	movs	r2, #1
 8002354:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002362:	429a      	cmp	r2, r3
 8002364:	d031      	beq.n	80023ca <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002372:	429a      	cmp	r2, r3
 8002374:	d20a      	bcs.n	800238c <_ZN13STM32Hardware5flushEv+0x68>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800237c:	b29a      	uxth	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002384:	b29b      	uxth	r3, r3
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	b29b      	uxth	r3, r3
 800238a:	e006      	b.n	800239a <_ZN13STM32Hardware5flushEv+0x76>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002392:	b29b      	uxth	r3, r3
 8002394:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002398:	b29b      	uxth	r3, r3
 800239a:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6818      	ldr	r0, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80023a6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	89fa      	ldrh	r2, [r7, #14]
 80023b0:	4619      	mov	r1, r3
 80023b2:	f009 f9f1 	bl	800b798 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 80023bc:	89fb      	ldrh	r3, [r7, #14]
 80023be:	4413      	add	r3, r2
 80023c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
        }
        mutex = false;
 80023ca:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <_ZN13STM32Hardware5flushEv+0xb4>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
      }
    }
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	24000640 	.word	0x24000640

080023dc <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
      int n = length;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023f2:	bfa8      	it	ge
 80023f4:	f44f 6380 	movge.w	r3, #1024	; 0x400
 80023f8:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002400:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	4293      	cmp	r3, r2
 8002408:	bf28      	it	cs
 800240a:	4613      	movcs	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002414:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4413      	add	r3, r2
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	4618      	mov	r0, r3
 8002422:	f00b fac9 	bl	800d9b8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	4413      	add	r3, r2
 8002430:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

      if(n != n_tail){
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	429a      	cmp	r2, r3
 8002440:	d00b      	beq.n	800245a <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	18d1      	adds	r1, r2, r3
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	461a      	mov	r2, r3
 8002456:	f00b faaf 	bl	800d9b8 <memcpy>
      }

      flush();
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f7ff ff62 	bl	8002324 <_ZN13STM32Hardware5flushEv>
    }
 8002460:	bf00      	nop
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	f002 fa70 	bl	8004954 <HAL_GetTick>
 8002474:	4603      	mov	r3, r0
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe ffc8 	bl	8001420 <_ZN3ros3MsgC1Ev>
 8002490:	4a0e      	ldr	r2, [pc, #56]	; (80024cc <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	0800deb8 	.word	0x0800deb8

080024d0 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80024d0:	b480      	push	{r7}
 80024d2:	b08b      	sub	sp, #44	; 0x2c
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80024e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80024e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ee:	6838      	ldr	r0, [r7, #0]
 80024f0:	4401      	add	r1, r0
 80024f2:	b2d3      	uxtb	r3, r2
 80024f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80024f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	0a02      	lsrs	r2, r0, #8
 8002504:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002508:	0a0b      	lsrs	r3, r1, #8
 800250a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800250c:	3101      	adds	r1, #1
 800250e:	6838      	ldr	r0, [r7, #0]
 8002510:	4401      	add	r1, r0
 8002512:	b2d3      	uxtb	r3, r2
 8002514:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002516:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	0c02      	lsrs	r2, r0, #16
 8002524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002528:	0c0b      	lsrs	r3, r1, #16
 800252a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800252c:	3102      	adds	r1, #2
 800252e:	6838      	ldr	r0, [r7, #0]
 8002530:	4401      	add	r1, r0
 8002532:	b2d3      	uxtb	r3, r2
 8002534:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002536:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	0e02      	lsrs	r2, r0, #24
 8002544:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002548:	0e0b      	lsrs	r3, r1, #24
 800254a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800254c:	3103      	adds	r1, #3
 800254e:	6838      	ldr	r0, [r7, #0]
 8002550:	4401      	add	r1, r0
 8002552:	b2d3      	uxtb	r3, r2
 8002554:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002556:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	000a      	movs	r2, r1
 8002564:	2300      	movs	r3, #0
 8002566:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002568:	3104      	adds	r1, #4
 800256a:	6838      	ldr	r0, [r7, #0]
 800256c:	4401      	add	r1, r0
 800256e:	b2d3      	uxtb	r3, r2
 8002570:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002572:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	0a0a      	lsrs	r2, r1, #8
 8002580:	2300      	movs	r3, #0
 8002582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002584:	3105      	adds	r1, #5
 8002586:	6838      	ldr	r0, [r7, #0]
 8002588:	4401      	add	r1, r0
 800258a:	b2d3      	uxtb	r3, r2
 800258c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800258e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	0c0a      	lsrs	r2, r1, #16
 800259c:	2300      	movs	r3, #0
 800259e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025a0:	3106      	adds	r1, #6
 80025a2:	6838      	ldr	r0, [r7, #0]
 80025a4:	4401      	add	r1, r0
 80025a6:	b2d3      	uxtb	r3, r2
 80025a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80025aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	0e0a      	lsrs	r2, r1, #24
 80025b8:	2300      	movs	r3, #0
 80025ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025bc:	3107      	adds	r1, #7
 80025be:	6838      	ldr	r0, [r7, #0]
 80025c0:	4401      	add	r1, r0
 80025c2:	b2d3      	uxtb	r3, r2
 80025c4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	3308      	adds	r3, #8
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80025d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80025d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025dc:	6838      	ldr	r0, [r7, #0]
 80025de:	4401      	add	r1, r0
 80025e0:	b2d3      	uxtb	r3, r2
 80025e2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80025e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	0a02      	lsrs	r2, r0, #8
 80025f2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80025f6:	0a0b      	lsrs	r3, r1, #8
 80025f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025fa:	3101      	adds	r1, #1
 80025fc:	6838      	ldr	r0, [r7, #0]
 80025fe:	4401      	add	r1, r0
 8002600:	b2d3      	uxtb	r3, r2
 8002602:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002604:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	0c02      	lsrs	r2, r0, #16
 8002612:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002616:	0c0b      	lsrs	r3, r1, #16
 8002618:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800261a:	3102      	adds	r1, #2
 800261c:	6838      	ldr	r0, [r7, #0]
 800261e:	4401      	add	r1, r0
 8002620:	b2d3      	uxtb	r3, r2
 8002622:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002624:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	0e02      	lsrs	r2, r0, #24
 8002632:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002636:	0e0b      	lsrs	r3, r1, #24
 8002638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800263a:	3103      	adds	r1, #3
 800263c:	6838      	ldr	r0, [r7, #0]
 800263e:	4401      	add	r1, r0
 8002640:	b2d3      	uxtb	r3, r2
 8002642:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002644:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	000a      	movs	r2, r1
 8002652:	2300      	movs	r3, #0
 8002654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002656:	3104      	adds	r1, #4
 8002658:	6838      	ldr	r0, [r7, #0]
 800265a:	4401      	add	r1, r0
 800265c:	b2d3      	uxtb	r3, r2
 800265e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002660:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	0a0a      	lsrs	r2, r1, #8
 800266e:	2300      	movs	r3, #0
 8002670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002672:	3105      	adds	r1, #5
 8002674:	6838      	ldr	r0, [r7, #0]
 8002676:	4401      	add	r1, r0
 8002678:	b2d3      	uxtb	r3, r2
 800267a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 800267c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	0c0a      	lsrs	r2, r1, #16
 800268a:	2300      	movs	r3, #0
 800268c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800268e:	3106      	adds	r1, #6
 8002690:	6838      	ldr	r0, [r7, #0]
 8002692:	4401      	add	r1, r0
 8002694:	b2d3      	uxtb	r3, r2
 8002696:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002698:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	0e0a      	lsrs	r2, r1, #24
 80026a6:	2300      	movs	r3, #0
 80026a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026aa:	3107      	adds	r1, #7
 80026ac:	6838      	ldr	r0, [r7, #0]
 80026ae:	4401      	add	r1, r0
 80026b0:	b2d3      	uxtb	r3, r2
 80026b2:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	3308      	adds	r3, #8
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80026c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80026c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ca:	6838      	ldr	r0, [r7, #0]
 80026cc:	4401      	add	r1, r0
 80026ce:	b2d3      	uxtb	r3, r2
 80026d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80026d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	0a02      	lsrs	r2, r0, #8
 80026e0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80026e4:	0a0b      	lsrs	r3, r1, #8
 80026e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026e8:	3101      	adds	r1, #1
 80026ea:	6838      	ldr	r0, [r7, #0]
 80026ec:	4401      	add	r1, r0
 80026ee:	b2d3      	uxtb	r3, r2
 80026f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80026f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	0c02      	lsrs	r2, r0, #16
 8002700:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002704:	0c0b      	lsrs	r3, r1, #16
 8002706:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002708:	3102      	adds	r1, #2
 800270a:	6838      	ldr	r0, [r7, #0]
 800270c:	4401      	add	r1, r0
 800270e:	b2d3      	uxtb	r3, r2
 8002710:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002712:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	0e02      	lsrs	r2, r0, #24
 8002720:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002724:	0e0b      	lsrs	r3, r1, #24
 8002726:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002728:	3103      	adds	r1, #3
 800272a:	6838      	ldr	r0, [r7, #0]
 800272c:	4401      	add	r1, r0
 800272e:	b2d3      	uxtb	r3, r2
 8002730:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002732:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	000a      	movs	r2, r1
 8002740:	2300      	movs	r3, #0
 8002742:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002744:	3104      	adds	r1, #4
 8002746:	6838      	ldr	r0, [r7, #0]
 8002748:	4401      	add	r1, r0
 800274a:	b2d3      	uxtb	r3, r2
 800274c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800274e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	0a0a      	lsrs	r2, r1, #8
 800275c:	2300      	movs	r3, #0
 800275e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002760:	3105      	adds	r1, #5
 8002762:	6838      	ldr	r0, [r7, #0]
 8002764:	4401      	add	r1, r0
 8002766:	b2d3      	uxtb	r3, r2
 8002768:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800276a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	0c0a      	lsrs	r2, r1, #16
 8002778:	2300      	movs	r3, #0
 800277a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800277c:	3106      	adds	r1, #6
 800277e:	6838      	ldr	r0, [r7, #0]
 8002780:	4401      	add	r1, r0
 8002782:	b2d3      	uxtb	r3, r2
 8002784:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002786:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	0e0a      	lsrs	r2, r1, #24
 8002794:	2300      	movs	r3, #0
 8002796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002798:	3107      	adds	r1, #7
 800279a:	6838      	ldr	r0, [r7, #0]
 800279c:	4401      	add	r1, r0
 800279e:	b2d3      	uxtb	r3, r2
 80027a0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	3308      	adds	r3, #8
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80027aa:	4618      	mov	r0, r3
 80027ac:	372c      	adds	r7, #44	; 0x2c
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80027b6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80027ba:	b0eb      	sub	sp, #428	; 0x1ac
 80027bc:	af00      	add	r7, sp, #0
 80027be:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80027c2:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80027d8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80027dc:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80027e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027e4:	4413      	add	r3, r2
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2200      	movs	r2, #0
 80027ec:	461c      	mov	r4, r3
 80027ee:	4615      	mov	r5, r2
 80027f0:	ea40 0804 	orr.w	r8, r0, r4
 80027f4:	ea41 0905 	orr.w	r9, r1, r5
 80027f8:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027fc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002800:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800280a:	4413      	add	r3, r2
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2200      	movs	r2, #0
 8002812:	469a      	mov	sl, r3
 8002814:	4693      	mov	fp, r2
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002822:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002826:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800282a:	ea40 0402 	orr.w	r4, r0, r2
 800282e:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002832:	430b      	orrs	r3, r1
 8002834:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002838:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800283c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002840:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002844:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002848:	1c9a      	adds	r2, r3, #2
 800284a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800284e:	4413      	add	r3, r2
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2200      	movs	r2, #0
 8002856:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800285a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 800286a:	464c      	mov	r4, r9
 800286c:	0423      	lsls	r3, r4, #16
 800286e:	4644      	mov	r4, r8
 8002870:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002874:	4644      	mov	r4, r8
 8002876:	0422      	lsls	r2, r4, #16
 8002878:	ea40 0402 	orr.w	r4, r0, r2
 800287c:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002880:	430b      	orrs	r3, r1
 8002882:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002886:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800288a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800288e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002892:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002896:	1cda      	adds	r2, r3, #3
 8002898:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800289c:	4413      	add	r3, r2
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2200      	movs	r2, #0
 80028a4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80028a8:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80028ac:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80028b0:	4623      	mov	r3, r4
 80028b2:	0a1b      	lsrs	r3, r3, #8
 80028b4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80028b8:	4623      	mov	r3, r4
 80028ba:	061b      	lsls	r3, r3, #24
 80028bc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80028c0:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80028c4:	4623      	mov	r3, r4
 80028c6:	4303      	orrs	r3, r0
 80028c8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80028cc:	462b      	mov	r3, r5
 80028ce:	430b      	orrs	r3, r1
 80028d0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80028d4:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80028d8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80028dc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80028e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028e4:	1d1a      	adds	r2, r3, #4
 80028e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028ea:	4413      	add	r3, r2
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2200      	movs	r2, #0
 80028f2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80028f6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002906:	0023      	movs	r3, r4
 8002908:	2200      	movs	r2, #0
 800290a:	ea40 0402 	orr.w	r4, r0, r2
 800290e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002912:	430b      	orrs	r3, r1
 8002914:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002918:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800291c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002920:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002924:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002928:	1d5a      	adds	r2, r3, #5
 800292a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800292e:	4413      	add	r3, r2
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2200      	movs	r2, #0
 8002936:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800293a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800294a:	0223      	lsls	r3, r4, #8
 800294c:	2200      	movs	r2, #0
 800294e:	ea40 0402 	orr.w	r4, r0, r2
 8002952:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002956:	430b      	orrs	r3, r1
 8002958:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800295c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002960:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002964:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002968:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800296c:	1d9a      	adds	r2, r3, #6
 800296e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002972:	4413      	add	r3, r2
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2200      	movs	r2, #0
 800297a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800297e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 800298e:	0423      	lsls	r3, r4, #16
 8002990:	2200      	movs	r2, #0
 8002992:	ea40 0402 	orr.w	r4, r0, r2
 8002996:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800299a:	430b      	orrs	r3, r1
 800299c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029a0:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80029a4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80029a8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029b0:	1dda      	adds	r2, r3, #7
 80029b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029b6:	4413      	add	r3, r2
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2200      	movs	r2, #0
 80029be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80029c2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80029d2:	0623      	lsls	r3, r4, #24
 80029d4:	2200      	movs	r2, #0
 80029d6:	ea40 0402 	orr.w	r4, r0, r2
 80029da:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80029de:	430b      	orrs	r3, r1
 80029e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80029e4:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80029e8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80029ec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029f0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80029f4:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80029f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029fc:	3308      	adds	r3, #8
 80029fe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a0e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a12:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002a16:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a1a:	4413      	add	r3, r2
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2200      	movs	r2, #0
 8002a22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002a26:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002a2a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002a2e:	4623      	mov	r3, r4
 8002a30:	4303      	orrs	r3, r0
 8002a32:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002a36:	462b      	mov	r3, r5
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a3e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002a42:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a46:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a4a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a54:	4413      	add	r3, r2
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002a60:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002a70:	464c      	mov	r4, r9
 8002a72:	0223      	lsls	r3, r4, #8
 8002a74:	4644      	mov	r4, r8
 8002a76:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002a7a:	4644      	mov	r4, r8
 8002a7c:	0222      	lsls	r2, r4, #8
 8002a7e:	ea40 0402 	orr.w	r4, r0, r2
 8002a82:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002a86:	430b      	orrs	r3, r1
 8002a88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002a8c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002a90:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a94:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a98:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a9c:	1c9a      	adds	r2, r3, #2
 8002a9e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002aa2:	4413      	add	r3, r2
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002aae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002abe:	464c      	mov	r4, r9
 8002ac0:	0423      	lsls	r3, r4, #16
 8002ac2:	4644      	mov	r4, r8
 8002ac4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002ac8:	4644      	mov	r4, r8
 8002aca:	0422      	lsls	r2, r4, #16
 8002acc:	ea40 0402 	orr.w	r4, r0, r2
 8002ad0:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ada:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002ade:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ae2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ae6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002aea:	1cda      	adds	r2, r3, #3
 8002aec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002af0:	4413      	add	r3, r2
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2200      	movs	r2, #0
 8002af8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002afc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b00:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002b04:	4623      	mov	r3, r4
 8002b06:	0a1b      	lsrs	r3, r3, #8
 8002b08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002b0c:	4623      	mov	r3, r4
 8002b0e:	061b      	lsls	r3, r3, #24
 8002b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b14:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002b18:	4623      	mov	r3, r4
 8002b1a:	4303      	orrs	r3, r0
 8002b1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b20:	462b      	mov	r3, r5
 8002b22:	430b      	orrs	r3, r1
 8002b24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b28:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002b2c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002b30:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b34:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b38:	1d1a      	adds	r2, r3, #4
 8002b3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b3e:	4413      	add	r3, r2
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2200      	movs	r2, #0
 8002b46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b4a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002b5a:	0023      	movs	r3, r4
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	ea40 0402 	orr.w	r4, r0, r2
 8002b62:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002b66:	430b      	orrs	r3, r1
 8002b68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002b6c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002b70:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002b74:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b7c:	1d5a      	adds	r2, r3, #5
 8002b7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b82:	4413      	add	r3, r2
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b8e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002b9e:	0223      	lsls	r3, r4, #8
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	ea40 0402 	orr.w	r4, r0, r2
 8002ba6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002baa:	430b      	orrs	r3, r1
 8002bac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bb0:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002bb4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002bb8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002bbc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bc0:	1d9a      	adds	r2, r3, #6
 8002bc2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bc6:	4413      	add	r3, r2
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002bd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002be2:	0423      	lsls	r3, r4, #16
 8002be4:	2200      	movs	r2, #0
 8002be6:	ea40 0402 	orr.w	r4, r0, r2
 8002bea:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002bf4:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002bf8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002bfc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c00:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c04:	1dda      	adds	r2, r3, #7
 8002c06:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c0a:	4413      	add	r3, r2
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2200      	movs	r2, #0
 8002c12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002c26:	0623      	lsls	r3, r4, #24
 8002c28:	2200      	movs	r2, #0
 8002c2a:	ea40 0402 	orr.w	r4, r0, r2
 8002c2e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002c32:	430b      	orrs	r3, r1
 8002c34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002c38:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002c3c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002c40:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c44:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002c48:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002c4c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c50:	3308      	adds	r3, #8
 8002c52:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c62:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002c66:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002c6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c6e:	4413      	add	r3, r2
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2200      	movs	r2, #0
 8002c76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c7a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002c7e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002c82:	4623      	mov	r3, r4
 8002c84:	4303      	orrs	r3, r0
 8002c86:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c88:	462b      	mov	r3, r5
 8002c8a:	430b      	orrs	r3, r1
 8002c8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c8e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002c92:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c96:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002c9a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ca4:	4413      	add	r3, r2
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2200      	movs	r2, #0
 8002cac:	673b      	str	r3, [r7, #112]	; 0x70
 8002cae:	677a      	str	r2, [r7, #116]	; 0x74
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002cbc:	464c      	mov	r4, r9
 8002cbe:	0223      	lsls	r3, r4, #8
 8002cc0:	4644      	mov	r4, r8
 8002cc2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002cc6:	4644      	mov	r4, r8
 8002cc8:	0222      	lsls	r2, r4, #8
 8002cca:	ea40 0402 	orr.w	r4, r0, r2
 8002cce:	66bc      	str	r4, [r7, #104]	; 0x68
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cd4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002cd8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002cdc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ce0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ce4:	1c9a      	adds	r2, r3, #2
 8002ce6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cea:	4413      	add	r3, r2
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	663b      	str	r3, [r7, #96]	; 0x60
 8002cf4:	667a      	str	r2, [r7, #100]	; 0x64
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d02:	464c      	mov	r4, r9
 8002d04:	0423      	lsls	r3, r4, #16
 8002d06:	4644      	mov	r4, r8
 8002d08:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002d0c:	4644      	mov	r4, r8
 8002d0e:	0422      	lsls	r2, r4, #16
 8002d10:	ea40 0402 	orr.w	r4, r0, r2
 8002d14:	65bc      	str	r4, [r7, #88]	; 0x58
 8002d16:	430b      	orrs	r3, r1
 8002d18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d1a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002d1e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d22:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d26:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d2a:	1cda      	adds	r2, r3, #3
 8002d2c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d30:	4413      	add	r3, r2
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2200      	movs	r2, #0
 8002d38:	653b      	str	r3, [r7, #80]	; 0x50
 8002d3a:	657a      	str	r2, [r7, #84]	; 0x54
 8002d3c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002d40:	4623      	mov	r3, r4
 8002d42:	0a1b      	lsrs	r3, r3, #8
 8002d44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d46:	4623      	mov	r3, r4
 8002d48:	061b      	lsls	r3, r3, #24
 8002d4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d4c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002d50:	4623      	mov	r3, r4
 8002d52:	4303      	orrs	r3, r0
 8002d54:	643b      	str	r3, [r7, #64]	; 0x40
 8002d56:	462b      	mov	r3, r5
 8002d58:	430b      	orrs	r3, r1
 8002d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d5c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002d60:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002d64:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d68:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d6c:	1d1a      	adds	r2, r3, #4
 8002d6e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d72:	4413      	add	r3, r2
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2200      	movs	r2, #0
 8002d7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002d88:	0023      	movs	r3, r4
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	ea40 0402 	orr.w	r4, r0, r2
 8002d90:	633c      	str	r4, [r7, #48]	; 0x30
 8002d92:	430b      	orrs	r3, r1
 8002d94:	637b      	str	r3, [r7, #52]	; 0x34
 8002d96:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002d9a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002d9e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002da2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002da6:	1d5a      	adds	r2, r3, #5
 8002da8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dac:	4413      	add	r3, r2
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2200      	movs	r2, #0
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002dc2:	0223      	lsls	r3, r4, #8
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	ea40 0402 	orr.w	r4, r0, r2
 8002dca:	623c      	str	r4, [r7, #32]
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002dd4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002dd8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ddc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002de0:	3306      	adds	r3, #6
 8002de2:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002de6:	4413      	add	r3, r2
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2200      	movs	r2, #0
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	61fa      	str	r2, [r7, #28]
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	69bc      	ldr	r4, [r7, #24]
 8002dfc:	0423      	lsls	r3, r4, #16
 8002dfe:	2200      	movs	r2, #0
 8002e00:	ea40 0402 	orr.w	r4, r0, r2
 8002e04:	613c      	str	r4, [r7, #16]
 8002e06:	430b      	orrs	r3, r1
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002e0e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002e12:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e16:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e1a:	3307      	adds	r3, #7
 8002e1c:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002e20:	4413      	add	r3, r2
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2200      	movs	r2, #0
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	60fa      	str	r2, [r7, #12]
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	68bc      	ldr	r4, [r7, #8]
 8002e36:	0623      	lsls	r3, r4, #24
 8002e38:	2200      	movs	r2, #0
 8002e3a:	ea40 0402 	orr.w	r4, r0, r2
 8002e3e:	603c      	str	r4, [r7, #0]
 8002e40:	430b      	orrs	r3, r1
 8002e42:	607b      	str	r3, [r7, #4]
 8002e44:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002e48:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002e4c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002e50:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002e54:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002e58:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e5c:	3308      	adds	r3, #8
 8002e5e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002e62:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002e66:	4618      	mov	r0, r3
 8002e68:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e72:	4770      	bx	lr

08002e74 <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	4b03      	ldr	r3, [pc, #12]	; (8002e8c <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	0800ddd4 	.word	0x0800ddd4

08002e90 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	0800dde8 	.word	0x0800dde8

08002eac <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE>:

geometry_msgs::Point car_speed;
ros::Subscriber<geometry_msgs::Point> mecanum_sub("mecanum_toSTM", ROS::mecanum_callback);
ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);

void ROS::mecanum_callback(const geometry_msgs::Point &msgs){
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
	mecanum.CAR_Goal.Vx = msgs.x;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002eba:	490b      	ldr	r1, [pc, #44]	; (8002ee8 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8002ebc:	e9c1 2300 	strd	r2, r3, [r1]
	mecanum.CAR_Goal.Vy = msgs.y;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002ec6:	4908      	ldr	r1, [pc, #32]	; (8002ee8 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8002ec8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	mecanum.CAR_Goal.Omega = msgs.z;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002ed2:	4905      	ldr	r1, [pc, #20]	; (8002ee8 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8002ed4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	mecanum.run();
 8002ed8:	4803      	ldr	r0, [pc, #12]	; (8002ee8 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8002eda:	f7fe f9eb 	bl	80012b4 <_ZN7Mecanum3runEv>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	240005f8 	.word	0x240005f8

08002eec <_ZN3ROS11pub_car_velEv>:

 void ROS::pub_car_vel(void){
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
 	car_speed.x = mecanum.CAR_Now.Vx;
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <_ZN3ROS11pub_car_velEv+0x34>)
 8002ef2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002ef6:	490b      	ldr	r1, [pc, #44]	; (8002f24 <_ZN3ROS11pub_car_velEv+0x38>)
 8002ef8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 	car_speed.y = mecanum.CAR_Now.Vy;
 8002efc:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <_ZN3ROS11pub_car_velEv+0x34>)
 8002efe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002f02:	4908      	ldr	r1, [pc, #32]	; (8002f24 <_ZN3ROS11pub_car_velEv+0x38>)
 8002f04:	e9c1 2304 	strd	r2, r3, [r1, #16]
 	car_speed.z = mecanum.CAR_Now.Omega;
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <_ZN3ROS11pub_car_velEv+0x34>)
 8002f0a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002f0e:	4905      	ldr	r1, [pc, #20]	; (8002f24 <_ZN3ROS11pub_car_velEv+0x38>)
 8002f10:	e9c1 2306 	strd	r2, r3, [r1, #24]
 	mecanum_pub.publish(&car_speed);
 8002f14:	4903      	ldr	r1, [pc, #12]	; (8002f24 <_ZN3ROS11pub_car_velEv+0x38>)
 8002f16:	4804      	ldr	r0, [pc, #16]	; (8002f28 <_ZN3ROS11pub_car_velEv+0x3c>)
 8002f18:	f7ff f8cf 	bl	80020ba <_ZN3ros9Publisher7publishEPKNS_3MsgE>
 }
 8002f1c:	bf00      	nop
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	240005f8 	.word	0x240005f8
 8002f24:	24001780 	.word	0x24001780
 8002f28:	240017d8 	.word	0x240017d8

08002f2c <_ZN3ROS5setupEv>:


void ROS::setup(void){
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
	nh.initNode();
 8002f30:	4806      	ldr	r0, [pc, #24]	; (8002f4c <_ZN3ROS5setupEv+0x20>)
 8002f32:	f000 f95d 	bl	80031f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>

    nh.subscribe(mecanum_sub);
 8002f36:	4906      	ldr	r1, [pc, #24]	; (8002f50 <_ZN3ROS5setupEv+0x24>)
 8002f38:	4804      	ldr	r0, [pc, #16]	; (8002f4c <_ZN3ROS5setupEv+0x20>)
 8002f3a:	f000 f982 	bl	8003242 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>
    nh.advertise(mecanum_pub);
 8002f3e:	4905      	ldr	r1, [pc, #20]	; (8002f54 <_ZN3ROS5setupEv+0x28>)
 8002f40:	4802      	ldr	r0, [pc, #8]	; (8002f4c <_ZN3ROS5setupEv+0x20>)
 8002f42:	f000 f9a9 	bl	8003298 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	24000644 	.word	0x24000644
 8002f50:	240017a0 	.word	0x240017a0
 8002f54:	240017d8 	.word	0x240017d8

08002f58 <_ZN3ROS4loopEv>:

void ROS::loop(void){
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8002f5c:	4802      	ldr	r0, [pc, #8]	; (8002f68 <_ZN3ROS4loopEv+0x10>)
 8002f5e:	f000 f9cb 	bl	80032f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>
}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	24000644 	.word	0x24000644

08002f6c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8002f74:	4805      	ldr	r0, [pc, #20]	; (8002f8c <HAL_UART_TxCpltCallback+0x20>)
 8002f76:	f000 fc30 	bl	80037da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff f9d1 	bl	8002324 <_ZN13STM32Hardware5flushEv>
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	24000644 	.word	0x24000644

08002f90 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8002f98:	4805      	ldr	r0, [pc, #20]	; (8002fb0 <HAL_UART_RxCpltCallback+0x20>)
 8002f9a:	f000 fc1e 	bl	80037da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff f980 	bl	80022a6 <_ZN13STM32Hardware10reset_rbufEv>
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	24000644 	.word	0x24000644

08002fb4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	d80d      	bhi.n	8002fe4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	fa22 f103 	lsr.w	r1, r2, r3
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	b2ca      	uxtb	r2, r1
 8002fda:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	e7ee      	b.n	8002fc2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002fe4:	bf00      	nop
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003000:	2300      	movs	r3, #0
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b03      	cmp	r3, #3
 8003008:	d811      	bhi.n	800302e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6839      	ldr	r1, [r7, #0]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	440a      	add	r2, r1
 8003014:	7812      	ldrb	r2, [r2, #0]
 8003016:	4611      	mov	r1, r2
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	00d2      	lsls	r2, r2, #3
 800301c:	fa01 f202 	lsl.w	r2, r1, r2
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	3301      	adds	r3, #1
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	e7ea      	b.n	8003004 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800302e:	bf00      	nop
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	4a04      	ldr	r2, [pc, #16]	; (8003058 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	0800dee8 	.word	0x0800dee8

0800305c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff ffe8 	bl	800303c <_ZN3ros15NodeHandleBase_C1Ev>
 800306c:	4a45      	ldr	r2, [pc, #276]	; (8003184 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x128>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3304      	adds	r3, #4
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff f8ee 	bl	8002258 <_ZN13STM32HardwareC1Ev>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	f241 1314 	movw	r3, #4372	; 0x1114
 800308e:	4413      	add	r3, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f7fe fd39 	bl	8001b08 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b18      	cmp	r3, #24
 800309e:	d80b      	bhi.n	80030b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5c>
      publishers[i] = 0;
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	2200      	movs	r2, #0
 80030ae:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	3301      	adds	r3, #1
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	e7f0      	b.n	800309a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	2b18      	cmp	r3, #24
 80030c0:	d80a      	bhi.n	80030d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7c>
      subscribers[i] = 0;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80030ca:	2100      	movs	r1, #0
 80030cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	3301      	adds	r3, #1
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	e7f1      	b.n	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e2:	d20a      	bcs.n	80030fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9e>
      message_in[i] = 0;
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4413      	add	r3, r2
 80030ea:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	3301      	adds	r3, #1
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	e7f0      	b.n	80030dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80030fa:	2300      	movs	r3, #0
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003104:	d20a      	bcs.n	800311c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xc0>
      message_out[i] = 0;
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4413      	add	r3, r2
 800310c:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	3301      	adds	r3, #1
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	e7f0      	b.n	80030fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xa2>

    req_param_resp.ints_length = 0;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003122:	461a      	mov	r2, r3
 8003124:	2300      	movs	r3, #0
 8003126:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
    req_param_resp.ints = NULL;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003130:	461a      	mov	r2, r3
 8003132:	2300      	movs	r3, #0
 8003134:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    req_param_resp.floats_length = 0;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800313e:	461a      	mov	r2, r3
 8003140:	2300      	movs	r3, #0
 8003142:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    req_param_resp.floats = NULL;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800314c:	461a      	mov	r2, r3
 800314e:	2300      	movs	r3, #0
 8003150:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
    req_param_resp.ints_length = 0;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800315a:	461a      	mov	r2, r3
 800315c:	2300      	movs	r3, #0
 800315e:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
    req_param_resp.ints = NULL;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003168:	461a      	mov	r2, r3
 800316a:	2300      	movs	r3, #0
 800316c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    spin_timeout_ = 0;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  }
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	0800dea4 	.word	0x0800dea4

08003188 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	4a04      	ldr	r2, [pc, #16]	; (80031a4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	0800ded0 	.word	0x0800ded0

080031a8 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ffe5 	bl	8003188 <_ZN3ros11Subscriber_C1Ev>
 80031be:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei+0x44>)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3310      	adds	r3, #16
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff f959 	bl	8002480 <_ZN13geometry_msgs5PointC1Ev>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	609a      	str	r2, [r3, #8]
  };
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	0800de8c 	.word	0x0800de8c

080031f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3304      	adds	r3, #4
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff f847 	bl	8002290 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003208:	461a      	mov	r2, r3
 800320a:	2300      	movs	r3, #0
 800320c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
    bytes_ = 0;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003216:	461a      	mov	r2, r3
 8003218:	2300      	movs	r3, #0
 800321a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    index_ = 0;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003224:	461a      	mov	r2, r3
 8003226:	2300      	movs	r3, #0
 8003228:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    topic_ = 0;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003232:	461a      	mov	r2, r3
 8003234:	2300      	movs	r3, #0
 8003236:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  };
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003242:	b480      	push	{r7}
 8003244:	b085      	sub	sp, #20
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b18      	cmp	r3, #24
 8003254:	dc19      	bgt.n	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800325e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10d      	bne.n	8003282 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003266:	6839      	ldr	r1, [r7, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	605a      	str	r2, [r3, #4]
        return true;
 800327e:	2301      	movs	r3, #1
 8003280:	e004      	b.n	800328c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	3301      	adds	r3, #1
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	e7e2      	b.n	8003250 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0xe>
      }
    }
    return false;
 800328a:	2300      	movs	r3, #0
  }
 800328c:	4618      	mov	r0, r3
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2b18      	cmp	r3, #24
 80032aa:	dc1e      	bgt.n	80032ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d111      	bne.n	80032e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	60da      	str	r2, [r3, #12]
        return true;
 80032de:	2301      	movs	r3, #1
 80032e0:	e004      	b.n	80032ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	3301      	adds	r3, #1
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e7dd      	b.n	80032a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
    return false;
 80032ea:	2300      	movs	r3, #0
  }
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3304      	adds	r3, #4
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff f8af 	bl	8002468 <_ZN13STM32Hardware4timeEv>
 800330a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003312:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800331e:	4293      	cmp	r3, r2
 8003320:	d905      	bls.n	800332e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x36>
      configured_ = false;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    if (mode_ != MODE_FIRST_FF)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003334:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00e      	beq.n	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003342:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	429a      	cmp	r2, r3
 800334a:	d906      	bls.n	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003352:	461a      	mov	r2, r3
 8003354:	2300      	movs	r3, #0
 8003356:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
      if (spin_timeout_ > 0)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8003360:	2b00      	cmp	r3, #0
 8003362:	d014      	beq.n	800338e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3304      	adds	r3, #4
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff f87d 	bl	8002468 <_ZN13STM32Hardware4timeEv>
 800336e:	4602      	mov	r2, r0
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1ad2      	subs	r2, r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 800337a:	429a      	cmp	r2, r3
 800337c:	bf8c      	ite	hi
 800337e:	2301      	movhi	r3, #1
 8003380:	2300      	movls	r3, #0
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
          return SPIN_TIMEOUT;
 8003388:	f06f 0301 	mvn.w	r3, #1
 800338c:	e221      	b.n	80037d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      int data = hardware_.read();
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3304      	adds	r3, #4
 8003392:	4618      	mov	r0, r3
 8003394:	f7fe ff98 	bl	80022c8 <_ZN13STM32Hardware4readEv>
 8003398:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	f2c0 81fa 	blt.w	8003796 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x49e>
      checksum_ += data;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033a8:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4413      	add	r3, r2
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033b6:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033c0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80033c4:	2b07      	cmp	r3, #7
 80033c6:	d12b      	bne.n	8003420 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x128>
        message_in[index_++] = data;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ce:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80033da:	f8c1 20f8 	str.w	r2, [r1, #248]	; 0xf8
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	b2d1      	uxtb	r1, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	4413      	add	r3, r2
 80033e6:	460a      	mov	r2, r1
 80033e8:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
        bytes_--;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033f6:	3b01      	subs	r3, #1
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1a4      	bne.n	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003416:	461a      	mov	r2, r3
 8003418:	2308      	movs	r3, #8
 800341a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800341e:	e79c      	b.n	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003426:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800342a:	2b00      	cmp	r3, #0
 800342c:	d130      	bne.n	8003490 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x198>
        if (data == 0xff)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2bff      	cmp	r3, #255	; 0xff
 8003432:	d112      	bne.n	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800343a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800343e:	3301      	adds	r3, #1
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003446:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	3314      	adds	r3, #20
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003454:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8003458:	e77f      	b.n	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3304      	adds	r3, #4
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff f802 	bl	8002468 <_ZN13STM32Hardware4timeEv>
 8003464:	4602      	mov	r2, r0
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f241 3288 	movw	r2, #5000	; 0x1388
 800346e:	4293      	cmp	r3, r2
 8003470:	bf8c      	ite	hi
 8003472:	2301      	movhi	r3, #1
 8003474:	2300      	movls	r3, #0
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	f43f af6e 	beq.w	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          configured_ = false;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
          return SPIN_TIMEOUT;
 800348a:	f06f 0301 	mvn.w	r3, #1
 800348e:	e1a0      	b.n	80037d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003496:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800349a:	2b01      	cmp	r3, #1
 800349c:	d121      	bne.n	80034e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1ea>
        if (data == PROTOCOL_VER)
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2bfe      	cmp	r3, #254	; 0xfe
 80034a2:	d10b      	bne.n	80034bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1c4>
          mode_++;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80034ae:	3301      	adds	r3, #1
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034b6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80034ba:	e74e      	b.n	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034c2:	461a      	mov	r2, r3
 80034c4:	2300      	movs	r3, #0
 80034c6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          if (configured_ == false)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034d0:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f47f af40 	bne.w	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f989 	bl	80037f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 80034e0:	e73b      	b.n	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034e8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d120      	bne.n	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23a>
        bytes_ = data;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034f6:	461a      	mov	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        index_ = 0;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003504:	461a      	mov	r2, r3
 8003506:	2300      	movs	r3, #0
 8003508:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_++;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003512:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003516:	3301      	adds	r3, #1
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800351e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003528:	461a      	mov	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8003530:	e713      	b.n	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003538:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800353c:	2b03      	cmp	r3, #3
 800353e:	d118      	bne.n	8003572 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x27a>
        bytes_ += data << 8;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003546:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	4413      	add	r3, r2
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003556:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        mode_++;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003560:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003564:	3301      	adds	r3, #1
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800356c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003570:	e6f3      	b.n	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003578:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800357c:	2b04      	cmp	r3, #4
 800357e:	d11f      	bne.n	80035c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2c8>
        if ((checksum_ % 256) == 255)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003586:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800358a:	425a      	negs	r2, r3
 800358c:	b2db      	uxtb	r3, r3
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	bf58      	it	pl
 8003592:	4253      	negpl	r3, r2
 8003594:	2bff      	cmp	r3, #255	; 0xff
 8003596:	d10b      	bne.n	80035b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2b8>
          mode_++;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800359e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80035a2:	3301      	adds	r3, #1
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035aa:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80035ae:	e6d4      	b.n	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035b6:	461a      	mov	r2, r3
 80035b8:	2300      	movs	r3, #0
 80035ba:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80035be:	e6cc      	b.n	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035c6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80035ca:	2b05      	cmp	r3, #5
 80035cc:	d119      	bne.n	8003602 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30a>
        topic_ = data;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035d4:	461a      	mov	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_++;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80035e6:	3301      	adds	r3, #1
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035ee:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte included in checksum */
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f8:	461a      	mov	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8003600:	e6ab      	b.n	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003608:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800360c:	2b06      	cmp	r3, #6
 800360e:	d123      	bne.n	8003658 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x360>
        topic_ += data << 8;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003616:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	021b      	lsls	r3, r3, #8
 800361e:	4413      	add	r3, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003626:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_ = MODE_MESSAGE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003630:	461a      	mov	r2, r3
 8003632:	2307      	movs	r3, #7
 8003634:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if (bytes_ == 0)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800363e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003642:	2b00      	cmp	r3, #0
 8003644:	f47f ae89 	bne.w	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800364e:	461a      	mov	r2, r3
 8003650:	2308      	movs	r3, #8
 8003652:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003656:	e680      	b.n	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800365e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003662:	2b08      	cmp	r3, #8
 8003664:	f47f ae79 	bne.w	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800366e:	461a      	mov	r2, r3
 8003670:	2300      	movs	r3, #0
 8003672:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if ((checksum_ % 256) == 255)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800367c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003680:	425a      	negs	r2, r3
 8003682:	b2db      	uxtb	r3, r3
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	bf58      	it	pl
 8003688:	4253      	negpl	r3, r2
 800368a:	2bff      	cmp	r3, #255	; 0xff
 800368c:	f47f ae65 	bne.w	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003696:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d116      	bne.n	80036cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3d4>
            requestSyncTime();
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f8a7 	bl	80037f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f8c2 	bl	800382e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036b0:	461a      	mov	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
            last_sync_receive_time = c_time;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036be:	461a      	mov	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            return SPIN_ERR;
 80036c6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ca:	e082      	b.n	80037d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
          else if (topic_ == TopicInfo::ID_TIME)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036d6:	2b0a      	cmp	r3, #10
 80036d8:	d107      	bne.n	80036ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3f2>
            syncTime(message_in);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80036e0:	4619      	mov	r1, r3
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f984 	bl	80039f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 80036e8:	e637      	b.n	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036f4:	2b06      	cmp	r3, #6
 80036f6:	d111      	bne.n	800371c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x424>
            req_param_resp.deserialize(message_in);
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	f241 1314 	movw	r3, #4372	; 0x1114
 80036fe:	4413      	add	r3, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	f602 0224 	addw	r2, r2, #2084	; 0x824
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f7fe fb32 	bl	8001d72 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800371a:	e61e      	b.n	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003722:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003726:	2b0b      	cmp	r3, #11
 8003728:	d106      	bne.n	8003738 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x440>
            configured_ = false;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8003736:	e610      	b.n	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800373e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003742:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800374c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003750:	2b00      	cmp	r3, #0
 8003752:	f43f ae02 	beq.w	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800375c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003760:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800376a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003778:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	f602 0224 	addw	r2, r2, #2084	; 0x824
 8003790:	4611      	mov	r1, r2
 8003792:	4798      	blx	r3
    while (true)
 8003794:	e5e1      	b.n	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        break;
 8003796:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800379e:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d014      	beq.n	80037d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ac:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d909      	bls.n	80037d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
      requestSyncTime();
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f818 	bl	80037f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037c8:	461a      	mov	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    return SPIN_OK;
 80037d0:	2300      	movs	r3, #0
  }
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:
  Hardware* getHardware()
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
    return &hardware_;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3304      	adds	r3, #4
  }
 80037e6:	4618      	mov	r0, r3
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b086      	sub	sp, #24
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80037fa:	f107 030c 	add.w	r3, r7, #12
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fd fe1e 	bl	8001440 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f107 020c 	add.w	r2, r7, #12
 800380e:	210a      	movs	r1, #10
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	4798      	blx	r3
    rt_time = hardware_.time();
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	4618      	mov	r0, r3
 800381a:	f7fe fe25 	bl	8002468 <_ZN13STM32Hardware4timeEv>
 800381e:	4602      	mov	r2, r0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  }
 8003826:	bf00      	nop
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800382e:	b590      	push	{r4, r7, lr}
 8003830:	b08b      	sub	sp, #44	; 0x2c
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003836:	f107 030c 	add.w	r3, r7, #12
 800383a:	4618      	mov	r0, r3
 800383c:	f7fd fef0 	bl	8001620 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003840:	2300      	movs	r3, #0
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	2b18      	cmp	r3, #24
 8003848:	dc63      	bgt.n	8003912 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d056      	beq.n	800390a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	b29b      	uxth	r3, r3
 800386e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	6859      	ldr	r1, [r3, #4]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3308      	adds	r3, #8
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4608      	mov	r0, r1
 80038aa:	4798      	blx	r3
 80038ac:	4603      	mov	r3, r0
 80038ae:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	330c      	adds	r3, #12
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4608      	mov	r0, r1
 80038d8:	4798      	blx	r3
 80038da:	4603      	mov	r3, r0
 80038dc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80038de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038e2:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681c      	ldr	r4, [r3, #0]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe fbf2 	bl	80020e2 <_ZN3ros9Publisher15getEndpointTypeEv>
 80038fe:	4601      	mov	r1, r0
 8003900:	f107 030c 	add.w	r3, r7, #12
 8003904:	461a      	mov	r2, r3
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	3301      	adds	r3, #1
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
 8003910:	e798      	b.n	8003844 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003912:	2300      	movs	r3, #0
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	2b18      	cmp	r3, #24
 800391a:	dc5f      	bgt.n	80039dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003920:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d053      	beq.n	80039d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003930:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	b29b      	uxth	r3, r3
 800393c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003942:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003952:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003956:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395e:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3308      	adds	r3, #8
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4608      	mov	r0, r1
 800396e:	4798      	blx	r3
 8003970:	4603      	mov	r3, r0
 8003972:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003978:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800397c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003984:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	330c      	adds	r3, #12
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4608      	mov	r0, r1
 8003994:	4798      	blx	r3
 8003996:	4603      	mov	r3, r0
 8003998:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800399a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800399e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681c      	ldr	r4, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039aa:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80039ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b6:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80039ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3304      	adds	r3, #4
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4608      	mov	r0, r1
 80039c6:	4798      	blx	r3
 80039c8:	4601      	mov	r1, r0
 80039ca:	f107 030c 	add.w	r3, r7, #12
 80039ce:	461a      	mov	r2, r3
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	3301      	adds	r3, #1
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
 80039da:	e79c      	b.n	8003916 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  }
 80039e8:	bf00      	nop
 80039ea:	372c      	adds	r7, #44	; 0x2c
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd90      	pop	{r4, r7, pc}

080039f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80039fa:	f107 0308 	add.w	r3, r7, #8
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fd fd1e 	bl	8001440 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fe fd2d 	bl	8002468 <_ZN13STM32Hardware4timeEv>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003a1a:	f107 0308 	add.w	r3, r7, #8
 8003a1e:	6839      	ldr	r1, [r7, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fd fd7d 	bl	8001520 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	4916      	ldr	r1, [pc, #88]	; (8003a84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8003a2c:	fba1 1303 	umull	r1, r3, r1, r3
 8003a30:	099b      	lsrs	r3, r3, #6
 8003a32:	4413      	add	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003a36:	6939      	ldr	r1, [r7, #16]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8003a3c:	fba3 0302 	umull	r0, r3, r3, r2
 8003a40:	099b      	lsrs	r3, r3, #6
 8003a42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a46:	fb00 f303 	mul.w	r3, r0, r3
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	4a0e      	ldr	r2, [pc, #56]	; (8003a88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	440b      	add	r3, r1
 8003a54:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003a56:	f107 0308 	add.w	r3, r7, #8
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f8aa 	bl	8003bb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3304      	adds	r3, #4
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fe fcfd 	bl	8002468 <_ZN13STM32Hardware4timeEv>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a76:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
 8003a7a:	bf00      	nop
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	10624dd3 	.word	0x10624dd3
 8003a88:	000f4240 	.word	0x000f4240

08003a8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b63      	cmp	r3, #99	; 0x63
 8003a9c:	dd0b      	ble.n	8003ab6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa4:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003aa8:	f083 0301 	eor.w	r3, r3, #1
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	e079      	b.n	8003baa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	f602 4224 	addw	r2, r2, #3108	; 0xc24
 8003ac2:	3207      	adds	r2, #7
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	4798      	blx	r3
 8003aca:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	22ff      	movs	r2, #255	; 0xff
 8003ad0:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24
    message_out[1] = PROTOCOL_VER;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	22fe      	movs	r2, #254	; 0xfe
 8003ad8:	f883 2c25 	strb.w	r2, [r3, #3109]	; 0xc25
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f883 2c26 	strb.w	r2, [r3, #3110]	; 0xc26
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	0a1b      	lsrs	r3, r3, #8
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f883 2c27 	strb.w	r2, [r3, #3111]	; 0xc27
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f893 2c26 	ldrb.w	r2, [r3, #3110]	; 0xc26
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f893 3c27 	ldrb.w	r3, [r3, #3111]	; 0xc27
 8003b02:	4413      	add	r3, r2
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	43db      	mvns	r3, r3
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f883 2c29 	strb.w	r2, [r3, #3113]	; 0xc29
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	b21b      	sxth	r3, r3
 8003b1e:	121b      	asrs	r3, r3, #8
 8003b20:	b21b      	sxth	r3, r3
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f883 2c2a 	strb.w	r2, [r3, #3114]	; 0xc2a

    /* calculate checksum */
    int chk = 0;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003b2e:	2305      	movs	r3, #5
 8003b30:	61bb      	str	r3, [r7, #24]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	3306      	adds	r3, #6
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	dc0d      	bgt.n	8003b58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xcc>
      chk += message_out[i];
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	4413      	add	r3, r2
 8003b42:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	3301      	adds	r3, #1
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	e7ec      	b.n	8003b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa6>
    l += 7;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	3307      	adds	r3, #7
 8003b5c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	425a      	negs	r2, r3
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	bf58      	it	pl
 8003b68:	4253      	negpl	r3, r2
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	1c59      	adds	r1, r3, #1
 8003b70:	6179      	str	r1, [r7, #20]
 8003b72:	43d2      	mvns	r2, r2
 8003b74:	b2d1      	uxtb	r1, r2
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4413      	add	r3, r2
 8003b7a:	460a      	mov	r2, r1
 8003b7c:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24

    if (l <= OUTPUT_SIZE)
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b86:	dc0a      	bgt.n	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x112>
    {
      hardware_.write(message_out, l);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	1d18      	adds	r0, r3, #4
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4619      	mov	r1, r3
 8003b96:	f7fe fc21 	bl	80023dc <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	e005      	b.n	8003baa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003b9e:	4905      	ldr	r1, [pc, #20]	; (8003bb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x128>)
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f849 	bl	8003c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8003ba6:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003baa:	4618      	mov	r0, r3
 8003bac:	3720      	adds	r7, #32
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	0800de0c 	.word	0x0800de0c

08003bb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe fc4e 	bl	8002468 <_ZN13STM32Hardware4timeEv>
 8003bcc:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4915      	ldr	r1, [pc, #84]	; (8003c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8003bd6:	fba1 1303 	umull	r1, r3, r1, r3
 8003bda:	099b      	lsrs	r3, r3, #6
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	1e5a      	subs	r2, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6859      	ldr	r1, [r3, #4]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8003bee:	fba3 0302 	umull	r0, r3, r3, r2
 8003bf2:	099b      	lsrs	r3, r3, #6
 8003bf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bf8:	fb00 f303 	mul.w	r3, r0, r3
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	4a0c      	ldr	r2, [pc, #48]	; (8003c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 8003c00:	fb02 f303 	mul.w	r3, r2, r3
 8003c04:	1aca      	subs	r2, r1, r3
 8003c06:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 8003c08:	4413      	add	r3, r2
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	f8c2 381c 	str.w	r3, [r2, #2076]	; 0x81c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	f7fc fd00 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	10624dd3 	.word	0x10624dd3
 8003c30:	000f4240 	.word	0x000f4240
 8003c34:	3b9aca00 	.word	0x3b9aca00

08003c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	2103      	movs	r1, #3
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f804 	bl	8003c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8003c4c:	bf00      	nop
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003c62:	f107 0314 	add.w	r3, r7, #20
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fd fe9e 	bl	80019a8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003c6c:	7afb      	ldrb	r3, [r7, #11]
 8003c6e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f107 0214 	add.w	r2, r7, #20
 8003c7e:	2107      	movs	r1, #7
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	4798      	blx	r3
  }
 8003c84:	bf00      	nop
 8003c86:	3720      	adds	r7, #32
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <_Z41__static_initialization_and_destruction_0ii>:
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d116      	bne.n	8003cca <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d111      	bne.n	8003cca <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8003ca6:	480b      	ldr	r0, [pc, #44]	; (8003cd4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003ca8:	f7ff f9d8 	bl	800305c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
geometry_msgs::Point car_speed;
 8003cac:	480a      	ldr	r0, [pc, #40]	; (8003cd8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003cae:	f7fe fbe7 	bl	8002480 <_ZN13geometry_msgs5PointC1Ev>
ros::Subscriber<geometry_msgs::Point> mecanum_sub("mecanum_toSTM", ROS::mecanum_callback);
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	4a09      	ldr	r2, [pc, #36]	; (8003cdc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003cb6:	490a      	ldr	r1, [pc, #40]	; (8003ce0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003cb8:	480a      	ldr	r0, [pc, #40]	; (8003ce4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003cba:	f7ff fa75 	bl	80031a8 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	4a05      	ldr	r2, [pc, #20]	; (8003cd8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003cc2:	4909      	ldr	r1, [pc, #36]	; (8003ce8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003cc4:	4809      	ldr	r0, [pc, #36]	; (8003cec <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003cc6:	f7fe f9e1 	bl	800208c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	24000644 	.word	0x24000644
 8003cd8:	24001780 	.word	0x24001780
 8003cdc:	08002ead 	.word	0x08002ead
 8003ce0:	0800de48 	.word	0x0800de48
 8003ce4:	240017a0 	.word	0x240017a0
 8003ce8:	0800de58 	.word	0x0800de58
 8003cec:	240017d8 	.word	0x240017d8

08003cf0 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3310      	adds	r3, #16
 8003cfe:	6839      	ldr	r1, [r7, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fe fd58 	bl	80027b6 <_ZN13geometry_msgs5Point11deserializeEPh>
    this->cb_(msg);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	3210      	adds	r2, #16
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4798      	blx	r3
  }
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3310      	adds	r3, #16
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff f898 	bl	8002e74 <_ZN13geometry_msgs5Point7getTypeEv>
 8003d44:	4603      	mov	r3, r0
  }
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b082      	sub	sp, #8
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3310      	adds	r3, #16
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff f898 	bl	8002e90 <_ZN13geometry_msgs5Point6getMD5Ev>
 8003d60:	4603      	mov	r3, r0
  }
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
    return configured_;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d78:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
  };
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <_GLOBAL__sub_I_nh>:
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d90:	2001      	movs	r0, #1
 8003d92:	f7ff ff7b 	bl	8003c8c <_Z41__static_initialization_and_destruction_0ii>
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d9e:	4b0d      	ldr	r3, [pc, #52]	; (8003dd4 <HAL_MspInit+0x3c>)
 8003da0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003da4:	4a0b      	ldr	r2, [pc, #44]	; (8003dd4 <HAL_MspInit+0x3c>)
 8003da6:	f043 0302 	orr.w	r3, r3, #2
 8003daa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003dae:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <HAL_MspInit+0x3c>)
 8003db0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	607b      	str	r3, [r7, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	2005      	movs	r0, #5
 8003dc2:	f000 feae 	bl	8004b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003dc6:	2005      	movs	r0, #5
 8003dc8:	f000 fec5 	bl	8004b56 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dcc:	bf00      	nop
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	58024400 	.word	0x58024400

08003dd8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b090      	sub	sp, #64	; 0x40
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	605a      	str	r2, [r3, #4]
 8003dea:	609a      	str	r2, [r3, #8]
 8003dec:	60da      	str	r2, [r3, #12]
 8003dee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df8:	d14e      	bne.n	8003e98 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003dfa:	4b77      	ldr	r3, [pc, #476]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e00:	4a75      	ldr	r2, [pc, #468]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e0a:	4b73      	ldr	r3, [pc, #460]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e16:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e18:	4b6f      	ldr	r3, [pc, #444]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e1e:	4a6e      	ldr	r2, [pc, #440]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e28:	4b6b      	ldr	r3, [pc, #428]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e36:	4b68      	ldr	r3, [pc, #416]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e3c:	4a66      	ldr	r2, [pc, #408]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e3e:	f043 0302 	orr.w	r3, r3, #2
 8003e42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e46:	4b64      	ldr	r3, [pc, #400]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	623b      	str	r3, [r7, #32]
 8003e52:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003e54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e62:	2300      	movs	r3, #0
 8003e64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e66:	2301      	movs	r3, #1
 8003e68:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e6e:	4619      	mov	r1, r3
 8003e70:	485a      	ldr	r0, [pc, #360]	; (8003fdc <HAL_TIM_Encoder_MspInit+0x204>)
 8003e72:	f003 fcc5 	bl	8007800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e76:	2308      	movs	r3, #8
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e82:	2300      	movs	r3, #0
 8003e84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e86:	2301      	movs	r3, #1
 8003e88:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4853      	ldr	r0, [pc, #332]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x208>)
 8003e92:	f003 fcb5 	bl	8007800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003e96:	e09b      	b.n	8003fd0 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a51      	ldr	r2, [pc, #324]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x20c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d12e      	bne.n	8003f00 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ea2:	4b4d      	ldr	r3, [pc, #308]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003ea4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ea8:	4a4b      	ldr	r2, [pc, #300]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003eaa:	f043 0302 	orr.w	r3, r3, #2
 8003eae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003eb2:	4b49      	ldr	r3, [pc, #292]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ec0:	4b45      	ldr	r3, [pc, #276]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ec6:	4a44      	ldr	r2, [pc, #272]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003ec8:	f043 0302 	orr.w	r3, r3, #2
 8003ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ed0:	4b41      	ldr	r3, [pc, #260]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	61bb      	str	r3, [r7, #24]
 8003edc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003ede:	2330      	movs	r3, #48	; 0x30
 8003ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eea:	2300      	movs	r3, #0
 8003eec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003eee:	2302      	movs	r3, #2
 8003ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4839      	ldr	r0, [pc, #228]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x208>)
 8003efa:	f003 fc81 	bl	8007800 <HAL_GPIO_Init>
}
 8003efe:	e067      	b.n	8003fd0 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a38      	ldr	r2, [pc, #224]	; (8003fe8 <HAL_TIM_Encoder_MspInit+0x210>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d12f      	bne.n	8003f6a <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f0a:	4b33      	ldr	r3, [pc, #204]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f10:	4a31      	ldr	r2, [pc, #196]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f12:	f043 0304 	orr.w	r3, r3, #4
 8003f16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f1a:	4b2f      	ldr	r3, [pc, #188]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f28:	4b2b      	ldr	r3, [pc, #172]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f2e:	4a2a      	ldr	r2, [pc, #168]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f30:	f043 0308 	orr.w	r3, r3, #8
 8003f34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f38:	4b27      	ldr	r3, [pc, #156]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	613b      	str	r3, [r7, #16]
 8003f44:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003f46:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f50:	2300      	movs	r3, #0
 8003f52:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f54:	2300      	movs	r3, #0
 8003f56:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003f58:	2302      	movs	r3, #2
 8003f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f60:	4619      	mov	r1, r3
 8003f62:	4822      	ldr	r0, [pc, #136]	; (8003fec <HAL_TIM_Encoder_MspInit+0x214>)
 8003f64:	f003 fc4c 	bl	8007800 <HAL_GPIO_Init>
}
 8003f68:	e032      	b.n	8003fd0 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a20      	ldr	r2, [pc, #128]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x218>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d12d      	bne.n	8003fd0 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f74:	4b18      	ldr	r3, [pc, #96]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f7a:	4a17      	ldr	r2, [pc, #92]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f7c:	f043 0308 	orr.w	r3, r3, #8
 8003f80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f84:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f92:	4b11      	ldr	r3, [pc, #68]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f98:	4a0f      	ldr	r2, [pc, #60]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fa2:	4b0d      	ldr	r3, [pc, #52]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x200>)
 8003fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4804      	ldr	r0, [pc, #16]	; (8003fdc <HAL_TIM_Encoder_MspInit+0x204>)
 8003fcc:	f003 fc18 	bl	8007800 <HAL_GPIO_Init>
}
 8003fd0:	bf00      	nop
 8003fd2:	3740      	adds	r7, #64	; 0x40
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	58024400 	.word	0x58024400
 8003fdc:	58020000 	.word	0x58020000
 8003fe0:	58020400 	.word	0x58020400
 8003fe4:	40000400 	.word	0x40000400
 8003fe8:	40000800 	.word	0x40000800
 8003fec:	58020c00 	.word	0x58020c00
 8003ff0:	40000c00 	.word	0x40000c00

08003ff4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1d      	ldr	r2, [pc, #116]	; (8004078 <HAL_TIM_PWM_MspInit+0x84>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d117      	bne.n	8004036 <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004006:	4b1d      	ldr	r3, [pc, #116]	; (800407c <HAL_TIM_PWM_MspInit+0x88>)
 8004008:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800400c:	4a1b      	ldr	r2, [pc, #108]	; (800407c <HAL_TIM_PWM_MspInit+0x88>)
 800400e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004012:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004016:	4b19      	ldr	r3, [pc, #100]	; (800407c <HAL_TIM_PWM_MspInit+0x88>)
 8004018:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800401c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004024:	2200      	movs	r2, #0
 8004026:	2100      	movs	r1, #0
 8004028:	202b      	movs	r0, #43	; 0x2b
 800402a:	f000 fd7a 	bl	8004b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800402e:	202b      	movs	r0, #43	; 0x2b
 8004030:	f000 fd91 	bl	8004b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004034:	e01b      	b.n	800406e <HAL_TIM_PWM_MspInit+0x7a>
  else if(htim_pwm->Instance==TIM15)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a11      	ldr	r2, [pc, #68]	; (8004080 <HAL_TIM_PWM_MspInit+0x8c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d116      	bne.n	800406e <HAL_TIM_PWM_MspInit+0x7a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004040:	4b0e      	ldr	r3, [pc, #56]	; (800407c <HAL_TIM_PWM_MspInit+0x88>)
 8004042:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004046:	4a0d      	ldr	r2, [pc, #52]	; (800407c <HAL_TIM_PWM_MspInit+0x88>)
 8004048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004050:	4b0a      	ldr	r3, [pc, #40]	; (800407c <HAL_TIM_PWM_MspInit+0x88>)
 8004052:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800405a:	60bb      	str	r3, [r7, #8]
 800405c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 800405e:	2200      	movs	r2, #0
 8004060:	2100      	movs	r1, #0
 8004062:	2074      	movs	r0, #116	; 0x74
 8004064:	f000 fd5d 	bl	8004b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8004068:	2074      	movs	r0, #116	; 0x74
 800406a:	f000 fd74 	bl	8004b56 <HAL_NVIC_EnableIRQ>
}
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40001800 	.word	0x40001800
 800407c:	58024400 	.word	0x58024400
 8004080:	40014000 	.word	0x40014000

08004084 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a0e      	ldr	r2, [pc, #56]	; (80040cc <HAL_TIM_Base_MspInit+0x48>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d116      	bne.n	80040c4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004096:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <HAL_TIM_Base_MspInit+0x4c>)
 8004098:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800409c:	4a0c      	ldr	r2, [pc, #48]	; (80040d0 <HAL_TIM_Base_MspInit+0x4c>)
 800409e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040a6:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <HAL_TIM_Base_MspInit+0x4c>)
 80040a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80040b4:	2200      	movs	r2, #0
 80040b6:	2100      	movs	r1, #0
 80040b8:	202c      	movs	r0, #44	; 0x2c
 80040ba:	f000 fd32 	bl	8004b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80040be:	202c      	movs	r0, #44	; 0x2c
 80040c0:	f000 fd49 	bl	8004b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80040c4:	bf00      	nop
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40001c00 	.word	0x40001c00
 80040d0:	58024400 	.word	0x58024400

080040d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08a      	sub	sp, #40	; 0x28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040dc:	f107 0314 	add.w	r3, r7, #20
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	605a      	str	r2, [r3, #4]
 80040e6:	609a      	str	r2, [r3, #8]
 80040e8:	60da      	str	r2, [r3, #12]
 80040ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a25      	ldr	r2, [pc, #148]	; (8004188 <HAL_TIM_MspPostInit+0xb4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d120      	bne.n	8004138 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040f6:	4b25      	ldr	r3, [pc, #148]	; (800418c <HAL_TIM_MspPostInit+0xb8>)
 80040f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040fc:	4a23      	ldr	r2, [pc, #140]	; (800418c <HAL_TIM_MspPostInit+0xb8>)
 80040fe:	f043 0302 	orr.w	r3, r3, #2
 8004102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004106:	4b21      	ldr	r3, [pc, #132]	; (800418c <HAL_TIM_MspPostInit+0xb8>)
 8004108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004114:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800411a:	2302      	movs	r3, #2
 800411c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004122:	2300      	movs	r3, #0
 8004124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8004126:	2302      	movs	r3, #2
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800412a:	f107 0314 	add.w	r3, r7, #20
 800412e:	4619      	mov	r1, r3
 8004130:	4817      	ldr	r0, [pc, #92]	; (8004190 <HAL_TIM_MspPostInit+0xbc>)
 8004132:	f003 fb65 	bl	8007800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004136:	e023      	b.n	8004180 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM15)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a15      	ldr	r2, [pc, #84]	; (8004194 <HAL_TIM_MspPostInit+0xc0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d11e      	bne.n	8004180 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004142:	4b12      	ldr	r3, [pc, #72]	; (800418c <HAL_TIM_MspPostInit+0xb8>)
 8004144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004148:	4a10      	ldr	r2, [pc, #64]	; (800418c <HAL_TIM_MspPostInit+0xb8>)
 800414a:	f043 0310 	orr.w	r3, r3, #16
 800414e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004152:	4b0e      	ldr	r3, [pc, #56]	; (800418c <HAL_TIM_MspPostInit+0xb8>)
 8004154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004160:	2360      	movs	r3, #96	; 0x60
 8004162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004164:	2302      	movs	r3, #2
 8004166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004168:	2300      	movs	r3, #0
 800416a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800416c:	2300      	movs	r3, #0
 800416e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004170:	2304      	movs	r3, #4
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004174:	f107 0314 	add.w	r3, r7, #20
 8004178:	4619      	mov	r1, r3
 800417a:	4807      	ldr	r0, [pc, #28]	; (8004198 <HAL_TIM_MspPostInit+0xc4>)
 800417c:	f003 fb40 	bl	8007800 <HAL_GPIO_Init>
}
 8004180:	bf00      	nop
 8004182:	3728      	adds	r7, #40	; 0x28
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40001800 	.word	0x40001800
 800418c:	58024400 	.word	0x58024400
 8004190:	58020400 	.word	0x58020400
 8004194:	40014000 	.word	0x40014000
 8004198:	58021000 	.word	0x58021000

0800419c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b0b6      	sub	sp, #216	; 0xd8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	605a      	str	r2, [r3, #4]
 80041ae:	609a      	str	r2, [r3, #8]
 80041b0:	60da      	str	r2, [r3, #12]
 80041b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041b4:	f107 0310 	add.w	r3, r7, #16
 80041b8:	22b4      	movs	r2, #180	; 0xb4
 80041ba:	2100      	movs	r1, #0
 80041bc:	4618      	mov	r0, r3
 80041be:	f009 fc09 	bl	800d9d4 <memset>
  if(huart->Instance==USART1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a57      	ldr	r2, [pc, #348]	; (8004324 <HAL_UART_MspInit+0x188>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	f040 80a7 	bne.w	800431c <HAL_UART_MspInit+0x180>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80041ce:	2301      	movs	r3, #1
 80041d0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80041d2:	2300      	movs	r3, #0
 80041d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041d8:	f107 0310 	add.w	r3, r7, #16
 80041dc:	4618      	mov	r0, r3
 80041de:	f004 fc45 	bl	8008a6c <HAL_RCCEx_PeriphCLKConfig>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80041e8:	f7fc fff8 	bl	80011dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80041ec:	4b4e      	ldr	r3, [pc, #312]	; (8004328 <HAL_UART_MspInit+0x18c>)
 80041ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041f2:	4a4d      	ldr	r2, [pc, #308]	; (8004328 <HAL_UART_MspInit+0x18c>)
 80041f4:	f043 0310 	orr.w	r3, r3, #16
 80041f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80041fc:	4b4a      	ldr	r3, [pc, #296]	; (8004328 <HAL_UART_MspInit+0x18c>)
 80041fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004202:	f003 0310 	and.w	r3, r3, #16
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800420a:	4b47      	ldr	r3, [pc, #284]	; (8004328 <HAL_UART_MspInit+0x18c>)
 800420c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004210:	4a45      	ldr	r2, [pc, #276]	; (8004328 <HAL_UART_MspInit+0x18c>)
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800421a:	4b43      	ldr	r3, [pc, #268]	; (8004328 <HAL_UART_MspInit+0x18c>)
 800421c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004228:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800422c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004230:	2302      	movs	r3, #2
 8004232:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004236:	2300      	movs	r3, #0
 8004238:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800423c:	2300      	movs	r3, #0
 800423e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004242:	2307      	movs	r3, #7
 8004244:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004248:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800424c:	4619      	mov	r1, r3
 800424e:	4837      	ldr	r0, [pc, #220]	; (800432c <HAL_UART_MspInit+0x190>)
 8004250:	f003 fad6 	bl	8007800 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8004254:	4b36      	ldr	r3, [pc, #216]	; (8004330 <HAL_UART_MspInit+0x194>)
 8004256:	4a37      	ldr	r2, [pc, #220]	; (8004334 <HAL_UART_MspInit+0x198>)
 8004258:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800425a:	4b35      	ldr	r3, [pc, #212]	; (8004330 <HAL_UART_MspInit+0x194>)
 800425c:	2229      	movs	r2, #41	; 0x29
 800425e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004260:	4b33      	ldr	r3, [pc, #204]	; (8004330 <HAL_UART_MspInit+0x194>)
 8004262:	2200      	movs	r2, #0
 8004264:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004266:	4b32      	ldr	r3, [pc, #200]	; (8004330 <HAL_UART_MspInit+0x194>)
 8004268:	2200      	movs	r2, #0
 800426a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800426c:	4b30      	ldr	r3, [pc, #192]	; (8004330 <HAL_UART_MspInit+0x194>)
 800426e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004272:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004274:	4b2e      	ldr	r3, [pc, #184]	; (8004330 <HAL_UART_MspInit+0x194>)
 8004276:	2200      	movs	r2, #0
 8004278:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800427a:	4b2d      	ldr	r3, [pc, #180]	; (8004330 <HAL_UART_MspInit+0x194>)
 800427c:	2200      	movs	r2, #0
 800427e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004280:	4b2b      	ldr	r3, [pc, #172]	; (8004330 <HAL_UART_MspInit+0x194>)
 8004282:	2200      	movs	r2, #0
 8004284:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004286:	4b2a      	ldr	r3, [pc, #168]	; (8004330 <HAL_UART_MspInit+0x194>)
 8004288:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800428c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800428e:	4b28      	ldr	r3, [pc, #160]	; (8004330 <HAL_UART_MspInit+0x194>)
 8004290:	2200      	movs	r2, #0
 8004292:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004294:	4826      	ldr	r0, [pc, #152]	; (8004330 <HAL_UART_MspInit+0x194>)
 8004296:	f000 fc79 	bl	8004b8c <HAL_DMA_Init>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80042a0:	f7fc ff9c 	bl	80011dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a22      	ldr	r2, [pc, #136]	; (8004330 <HAL_UART_MspInit+0x194>)
 80042a8:	67da      	str	r2, [r3, #124]	; 0x7c
 80042aa:	4a21      	ldr	r2, [pc, #132]	; (8004330 <HAL_UART_MspInit+0x194>)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80042b0:	4b21      	ldr	r3, [pc, #132]	; (8004338 <HAL_UART_MspInit+0x19c>)
 80042b2:	4a22      	ldr	r2, [pc, #136]	; (800433c <HAL_UART_MspInit+0x1a0>)
 80042b4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80042b6:	4b20      	ldr	r3, [pc, #128]	; (8004338 <HAL_UART_MspInit+0x19c>)
 80042b8:	222a      	movs	r2, #42	; 0x2a
 80042ba:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042bc:	4b1e      	ldr	r3, [pc, #120]	; (8004338 <HAL_UART_MspInit+0x19c>)
 80042be:	2240      	movs	r2, #64	; 0x40
 80042c0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042c2:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <HAL_UART_MspInit+0x19c>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80042c8:	4b1b      	ldr	r3, [pc, #108]	; (8004338 <HAL_UART_MspInit+0x19c>)
 80042ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042ce:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042d0:	4b19      	ldr	r3, [pc, #100]	; (8004338 <HAL_UART_MspInit+0x19c>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042d6:	4b18      	ldr	r3, [pc, #96]	; (8004338 <HAL_UART_MspInit+0x19c>)
 80042d8:	2200      	movs	r2, #0
 80042da:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80042dc:	4b16      	ldr	r3, [pc, #88]	; (8004338 <HAL_UART_MspInit+0x19c>)
 80042de:	2200      	movs	r2, #0
 80042e0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80042e2:	4b15      	ldr	r3, [pc, #84]	; (8004338 <HAL_UART_MspInit+0x19c>)
 80042e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042e8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042ea:	4b13      	ldr	r3, [pc, #76]	; (8004338 <HAL_UART_MspInit+0x19c>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80042f0:	4811      	ldr	r0, [pc, #68]	; (8004338 <HAL_UART_MspInit+0x19c>)
 80042f2:	f000 fc4b 	bl	8004b8c <HAL_DMA_Init>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 80042fc:	f7fc ff6e 	bl	80011dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a0d      	ldr	r2, [pc, #52]	; (8004338 <HAL_UART_MspInit+0x19c>)
 8004304:	679a      	str	r2, [r3, #120]	; 0x78
 8004306:	4a0c      	ldr	r2, [pc, #48]	; (8004338 <HAL_UART_MspInit+0x19c>)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800430c:	2200      	movs	r2, #0
 800430e:	2100      	movs	r1, #0
 8004310:	2025      	movs	r0, #37	; 0x25
 8004312:	f000 fc06 	bl	8004b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004316:	2025      	movs	r0, #37	; 0x25
 8004318:	f000 fc1d 	bl	8004b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800431c:	bf00      	nop
 800431e:	37d8      	adds	r7, #216	; 0xd8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40011000 	.word	0x40011000
 8004328:	58024400 	.word	0x58024400
 800432c:	58020000 	.word	0x58020000
 8004330:	24000504 	.word	0x24000504
 8004334:	40020010 	.word	0x40020010
 8004338:	2400057c 	.word	0x2400057c
 800433c:	40020028 	.word	0x40020028

08004340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004344:	e7fe      	b.n	8004344 <NMI_Handler+0x4>

08004346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004346:	b480      	push	{r7}
 8004348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800434a:	e7fe      	b.n	800434a <HardFault_Handler+0x4>

0800434c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004350:	e7fe      	b.n	8004350 <MemManage_Handler+0x4>

08004352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004352:	b480      	push	{r7}
 8004354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004356:	e7fe      	b.n	8004356 <BusFault_Handler+0x4>

08004358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800435c:	e7fe      	b.n	800435c <UsageFault_Handler+0x4>

0800435e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800435e:	b480      	push	{r7}
 8004360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004362:	bf00      	nop
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004370:	bf00      	nop
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800437a:	b480      	push	{r7}
 800437c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800437e:	bf00      	nop
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800438c:	f000 face 	bl	800492c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004390:	bf00      	nop
 8004392:	bd80      	pop	{r7, pc}

08004394 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004398:	bf00      	nop
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
	...

080043a4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80043a8:	4802      	ldr	r0, [pc, #8]	; (80043b4 <DMA1_Stream0_IRQHandler+0x10>)
 80043aa:	f001 ff17 	bl	80061dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80043ae:	bf00      	nop
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	24000504 	.word	0x24000504

080043b8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80043bc:	4802      	ldr	r0, [pc, #8]	; (80043c8 <DMA1_Stream1_IRQHandler+0x10>)
 80043be:	f001 ff0d 	bl	80061dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80043c2:	bf00      	nop
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	2400057c 	.word	0x2400057c

080043cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80043d0:	4802      	ldr	r0, [pc, #8]	; (80043dc <USART1_IRQHandler+0x10>)
 80043d2:	f007 fac9 	bl	800b968 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80043d6:	bf00      	nop
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	24000474 	.word	0x24000474

080043e0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80043e4:	4802      	ldr	r0, [pc, #8]	; (80043f0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80043e6:	f006 fa2f 	bl	800a848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80043ea:	bf00      	nop
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	24000390 	.word	0x24000390

080043f4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80043f8:	4802      	ldr	r0, [pc, #8]	; (8004404 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80043fa:	f006 fa25 	bl	800a848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80043fe:	bf00      	nop
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	240003dc 	.word	0x240003dc

08004408 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800440c:	4802      	ldr	r0, [pc, #8]	; (8004418 <TIM15_IRQHandler+0x10>)
 800440e:	f006 fa1b 	bl	800a848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8004412:	bf00      	nop
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	24000428 	.word	0x24000428

0800441c <_ZN3STM5setupEv>:
#include "stm_main.h"
#include "dc_motor.h"
#include "mecanum.h"

void STM::setup(void){
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
	DC_motor_init();
 8004420:	f7fc f92c 	bl	800067c <_Z13DC_motor_initv>
}
 8004424:	bf00      	nop
 8004426:	bd80      	pop	{r7, pc}

08004428 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
	return 1;
 800442c:	2301      	movs	r3, #1
}
 800442e:	4618      	mov	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <_kill>:

int _kill(int pid, int sig)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004442:	f009 fa8f 	bl	800d964 <__errno>
 8004446:	4603      	mov	r3, r0
 8004448:	2216      	movs	r2, #22
 800444a:	601a      	str	r2, [r3, #0]
	return -1;
 800444c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004450:	4618      	mov	r0, r3
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <_exit>:

void _exit (int status)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004460:	f04f 31ff 	mov.w	r1, #4294967295
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff ffe7 	bl	8004438 <_kill>
	while (1) {}		/* Make sure we hang here */
 800446a:	e7fe      	b.n	800446a <_exit+0x12>

0800446c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004474:	4a14      	ldr	r2, [pc, #80]	; (80044c8 <_sbrk+0x5c>)
 8004476:	4b15      	ldr	r3, [pc, #84]	; (80044cc <_sbrk+0x60>)
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004480:	4b13      	ldr	r3, [pc, #76]	; (80044d0 <_sbrk+0x64>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d102      	bne.n	800448e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004488:	4b11      	ldr	r3, [pc, #68]	; (80044d0 <_sbrk+0x64>)
 800448a:	4a12      	ldr	r2, [pc, #72]	; (80044d4 <_sbrk+0x68>)
 800448c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800448e:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <_sbrk+0x64>)
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4413      	add	r3, r2
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	429a      	cmp	r2, r3
 800449a:	d207      	bcs.n	80044ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800449c:	f009 fa62 	bl	800d964 <__errno>
 80044a0:	4603      	mov	r3, r0
 80044a2:	220c      	movs	r2, #12
 80044a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044a6:	f04f 33ff 	mov.w	r3, #4294967295
 80044aa:	e009      	b.n	80044c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044ac:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <_sbrk+0x64>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044b2:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <_sbrk+0x64>)
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4413      	add	r3, r2
 80044ba:	4a05      	ldr	r2, [pc, #20]	; (80044d0 <_sbrk+0x64>)
 80044bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044be:	68fb      	ldr	r3, [r7, #12]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	24050000 	.word	0x24050000
 80044cc:	00000400 	.word	0x00000400
 80044d0:	240017ec 	.word	0x240017ec
 80044d4:	24001808 	.word	0x24001808

080044d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80044dc:	4b32      	ldr	r3, [pc, #200]	; (80045a8 <SystemInit+0xd0>)
 80044de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e2:	4a31      	ldr	r2, [pc, #196]	; (80045a8 <SystemInit+0xd0>)
 80044e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80044ec:	4b2f      	ldr	r3, [pc, #188]	; (80045ac <SystemInit+0xd4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	2b06      	cmp	r3, #6
 80044f6:	d807      	bhi.n	8004508 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80044f8:	4b2c      	ldr	r3, [pc, #176]	; (80045ac <SystemInit+0xd4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f023 030f 	bic.w	r3, r3, #15
 8004500:	4a2a      	ldr	r2, [pc, #168]	; (80045ac <SystemInit+0xd4>)
 8004502:	f043 0307 	orr.w	r3, r3, #7
 8004506:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004508:	4b29      	ldr	r3, [pc, #164]	; (80045b0 <SystemInit+0xd8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a28      	ldr	r2, [pc, #160]	; (80045b0 <SystemInit+0xd8>)
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004514:	4b26      	ldr	r3, [pc, #152]	; (80045b0 <SystemInit+0xd8>)
 8004516:	2200      	movs	r2, #0
 8004518:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800451a:	4b25      	ldr	r3, [pc, #148]	; (80045b0 <SystemInit+0xd8>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4924      	ldr	r1, [pc, #144]	; (80045b0 <SystemInit+0xd8>)
 8004520:	4b24      	ldr	r3, [pc, #144]	; (80045b4 <SystemInit+0xdc>)
 8004522:	4013      	ands	r3, r2
 8004524:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004526:	4b21      	ldr	r3, [pc, #132]	; (80045ac <SystemInit+0xd4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d007      	beq.n	8004542 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004532:	4b1e      	ldr	r3, [pc, #120]	; (80045ac <SystemInit+0xd4>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 030f 	bic.w	r3, r3, #15
 800453a:	4a1c      	ldr	r2, [pc, #112]	; (80045ac <SystemInit+0xd4>)
 800453c:	f043 0307 	orr.w	r3, r3, #7
 8004540:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004542:	4b1b      	ldr	r3, [pc, #108]	; (80045b0 <SystemInit+0xd8>)
 8004544:	2200      	movs	r2, #0
 8004546:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004548:	4b19      	ldr	r3, [pc, #100]	; (80045b0 <SystemInit+0xd8>)
 800454a:	2200      	movs	r2, #0
 800454c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800454e:	4b18      	ldr	r3, [pc, #96]	; (80045b0 <SystemInit+0xd8>)
 8004550:	2200      	movs	r2, #0
 8004552:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004554:	4b16      	ldr	r3, [pc, #88]	; (80045b0 <SystemInit+0xd8>)
 8004556:	4a18      	ldr	r2, [pc, #96]	; (80045b8 <SystemInit+0xe0>)
 8004558:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800455a:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <SystemInit+0xd8>)
 800455c:	4a17      	ldr	r2, [pc, #92]	; (80045bc <SystemInit+0xe4>)
 800455e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004560:	4b13      	ldr	r3, [pc, #76]	; (80045b0 <SystemInit+0xd8>)
 8004562:	4a17      	ldr	r2, [pc, #92]	; (80045c0 <SystemInit+0xe8>)
 8004564:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004566:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <SystemInit+0xd8>)
 8004568:	2200      	movs	r2, #0
 800456a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800456c:	4b10      	ldr	r3, [pc, #64]	; (80045b0 <SystemInit+0xd8>)
 800456e:	4a14      	ldr	r2, [pc, #80]	; (80045c0 <SystemInit+0xe8>)
 8004570:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004572:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <SystemInit+0xd8>)
 8004574:	2200      	movs	r2, #0
 8004576:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004578:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <SystemInit+0xd8>)
 800457a:	4a11      	ldr	r2, [pc, #68]	; (80045c0 <SystemInit+0xe8>)
 800457c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800457e:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <SystemInit+0xd8>)
 8004580:	2200      	movs	r2, #0
 8004582:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004584:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <SystemInit+0xd8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a09      	ldr	r2, [pc, #36]	; (80045b0 <SystemInit+0xd8>)
 800458a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800458e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004590:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <SystemInit+0xd8>)
 8004592:	2200      	movs	r2, #0
 8004594:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004596:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <SystemInit+0xec>)
 8004598:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800459c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800459e:	bf00      	nop
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	e000ed00 	.word	0xe000ed00
 80045ac:	52002000 	.word	0x52002000
 80045b0:	58024400 	.word	0x58024400
 80045b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80045b8:	02020200 	.word	0x02020200
 80045bc:	01ff0000 	.word	0x01ff0000
 80045c0:	01010280 	.word	0x01010280
 80045c4:	52004000 	.word	0x52004000

080045c8 <HAL_TIM_PeriodElapsedCallback>:

void motor_standard(void);
void motor_matlab(int fr, int fl, int br, int bl);
void motor_debug(void);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM13) {
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a0f      	ldr	r2, [pc, #60]	; (8004614 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d117      	bne.n	800460a <HAL_TIM_PeriodElapsedCallback+0x42>

	/* ROS publish */
		static int ms=0;
		ms++;
 80045da:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3301      	adds	r3, #1
 80045e0:	4a0d      	ldr	r2, [pc, #52]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80045e2:	6013      	str	r3, [r2, #0]
		if(ms%10==0) ROS::pub_car_vel();
 80045e4:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80045e6:	6819      	ldr	r1, [r3, #0]
 80045e8:	4b0c      	ldr	r3, [pc, #48]	; (800461c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80045ea:	fb83 2301 	smull	r2, r3, r3, r1
 80045ee:	109a      	asrs	r2, r3, #2
 80045f0:	17cb      	asrs	r3, r1, #31
 80045f2:	1ad2      	subs	r2, r2, r3
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	1aca      	subs	r2, r1, r3
 80045fe:	2a00      	cmp	r2, #0
 8004600:	d101      	bne.n	8004606 <HAL_TIM_PeriodElapsedCallback+0x3e>
 8004602:	f7fe fc73 	bl	8002eec <_ZN3ROS11pub_car_velEv>

	/* STM control */
//		motor_matlab(true, false, false, false);
		motor_standard();
 8004606:	f000 f80b 	bl	8004620 <_Z14motor_standardv>
	}
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40001c00 	.word	0x40001c00
 8004618:	240017f0 	.word	0x240017f0
 800461c:	66666667 	.word	0x66666667

08004620 <_Z14motor_standardv>:


void motor_standard(void){
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
	/*enc 1*/
		fr.CountNow = __HAL_TIM_GetCounter(&htim2);
 8004624:	4b65      	ldr	r3, [pc, #404]	; (80047bc <_Z14motor_standardv+0x19c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	b21a      	sxth	r2, r3
 800462c:	4b64      	ldr	r3, [pc, #400]	; (80047c0 <_Z14motor_standardv+0x1a0>)
 800462e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		fr.PIDControl();
 8004632:	4863      	ldr	r0, [pc, #396]	; (80047c0 <_Z14motor_standardv+0x1a0>)
 8004634:	f7fc f89d 	bl	8000772 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim2,0);
 8004638:	4b60      	ldr	r3, [pc, #384]	; (80047bc <_Z14motor_standardv+0x19c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2200      	movs	r2, #0
 800463e:	625a      	str	r2, [r3, #36]	; 0x24

		if (fr.PWM < 0) {
 8004640:	4b5f      	ldr	r3, [pc, #380]	; (80047c0 <_Z14motor_standardv+0x1a0>)
 8004642:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8004646:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800464a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464e:	d50c      	bpl.n	800466a <_Z14motor_standardv+0x4a>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_SET);
 8004650:	2201      	movs	r2, #1
 8004652:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004656:	485b      	ldr	r0, [pc, #364]	; (80047c4 <_Z14motor_standardv+0x1a4>)
 8004658:	f003 fa7a 	bl	8007b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_RESET);
 800465c:	2200      	movs	r2, #0
 800465e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004662:	4858      	ldr	r0, [pc, #352]	; (80047c4 <_Z14motor_standardv+0x1a4>)
 8004664:	f003 fa74 	bl	8007b50 <HAL_GPIO_WritePin>
 8004668:	e00b      	b.n	8004682 <_Z14motor_standardv+0x62>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_RESET);
 800466a:	2200      	movs	r2, #0
 800466c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004670:	4854      	ldr	r0, [pc, #336]	; (80047c4 <_Z14motor_standardv+0x1a4>)
 8004672:	f003 fa6d 	bl	8007b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_SET);
 8004676:	2201      	movs	r2, #1
 8004678:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800467c:	4851      	ldr	r0, [pc, #324]	; (80047c4 <_Z14motor_standardv+0x1a4>)
 800467e:	f003 fa67 	bl	8007b50 <HAL_GPIO_WritePin>
		}

		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, fabs(fr.PWM));
 8004682:	4b4f      	ldr	r3, [pc, #316]	; (80047c0 <_Z14motor_standardv+0x1a0>)
 8004684:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8004688:	eeb0 7bc7 	vabs.f64	d7, d7
 800468c:	4b4e      	ldr	r3, [pc, #312]	; (80047c8 <_Z14motor_standardv+0x1a8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004694:	ee17 2a90 	vmov	r2, s15
 8004698:	639a      	str	r2, [r3, #56]	; 0x38

	/*enc 2*/
		fl.CountNow = __HAL_TIM_GetCounter(&htim5);
 800469a:	4b4c      	ldr	r3, [pc, #304]	; (80047cc <_Z14motor_standardv+0x1ac>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	b21a      	sxth	r2, r3
 80046a2:	4b4b      	ldr	r3, [pc, #300]	; (80047d0 <_Z14motor_standardv+0x1b0>)
 80046a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		fl.PIDControl();
 80046a8:	4849      	ldr	r0, [pc, #292]	; (80047d0 <_Z14motor_standardv+0x1b0>)
 80046aa:	f7fc f862 	bl	8000772 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim5,0);
 80046ae:	4b47      	ldr	r3, [pc, #284]	; (80047cc <_Z14motor_standardv+0x1ac>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2200      	movs	r2, #0
 80046b4:	625a      	str	r2, [r3, #36]	; 0x24
//		if (fl.PWM > 0) {
//			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_SET);
//			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_RESET);
//		}
//		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_RESET);
 80046b6:	2200      	movs	r2, #0
 80046b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80046bc:	4845      	ldr	r0, [pc, #276]	; (80047d4 <_Z14motor_standardv+0x1b4>)
 80046be:	f003 fa47 	bl	8007b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_SET);
 80046c2:	2201      	movs	r2, #1
 80046c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046c8:	4842      	ldr	r0, [pc, #264]	; (80047d4 <_Z14motor_standardv+0x1b4>)
 80046ca:	f003 fa41 	bl	8007b50 <HAL_GPIO_WritePin>
//		}

		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 300);
 80046ce:	4b3e      	ldr	r3, [pc, #248]	; (80047c8 <_Z14motor_standardv+0x1a8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046d6:	635a      	str	r2, [r3, #52]	; 0x34

	/*enc 3*/
		br.CountNow = __HAL_TIM_GetCounter(&htim3);
 80046d8:	4b3f      	ldr	r3, [pc, #252]	; (80047d8 <_Z14motor_standardv+0x1b8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	b21a      	sxth	r2, r3
 80046e0:	4b3e      	ldr	r3, [pc, #248]	; (80047dc <_Z14motor_standardv+0x1bc>)
 80046e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		br.PIDControl();
 80046e6:	483d      	ldr	r0, [pc, #244]	; (80047dc <_Z14motor_standardv+0x1bc>)
 80046e8:	f7fc f843 	bl	8000772 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim3,0);
 80046ec:	4b3a      	ldr	r3, [pc, #232]	; (80047d8 <_Z14motor_standardv+0x1b8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2200      	movs	r2, #0
 80046f2:	625a      	str	r2, [r3, #36]	; 0x24

		if (br.PWM > 0) {
 80046f4:	4b39      	ldr	r3, [pc, #228]	; (80047dc <_Z14motor_standardv+0x1bc>)
 80046f6:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80046fa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80046fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004702:	dd0a      	ble.n	800471a <_Z14motor_standardv+0xfa>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_SET);
 8004704:	2201      	movs	r2, #1
 8004706:	2104      	movs	r1, #4
 8004708:	4835      	ldr	r0, [pc, #212]	; (80047e0 <_Z14motor_standardv+0x1c0>)
 800470a:	f003 fa21 	bl	8007b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_RESET);
 800470e:	2200      	movs	r2, #0
 8004710:	2108      	movs	r1, #8
 8004712:	4833      	ldr	r0, [pc, #204]	; (80047e0 <_Z14motor_standardv+0x1c0>)
 8004714:	f003 fa1c 	bl	8007b50 <HAL_GPIO_WritePin>
 8004718:	e009      	b.n	800472e <_Z14motor_standardv+0x10e>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_RESET);
 800471a:	2200      	movs	r2, #0
 800471c:	2104      	movs	r1, #4
 800471e:	4830      	ldr	r0, [pc, #192]	; (80047e0 <_Z14motor_standardv+0x1c0>)
 8004720:	f003 fa16 	bl	8007b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_SET);
 8004724:	2201      	movs	r2, #1
 8004726:	2108      	movs	r1, #8
 8004728:	482d      	ldr	r0, [pc, #180]	; (80047e0 <_Z14motor_standardv+0x1c0>)
 800472a:	f003 fa11 	bl	8007b50 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, fabs(br.PWM));
 800472e:	4b2b      	ldr	r3, [pc, #172]	; (80047dc <_Z14motor_standardv+0x1bc>)
 8004730:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8004734:	eeb0 7bc7 	vabs.f64	d7, d7
 8004738:	4b2a      	ldr	r3, [pc, #168]	; (80047e4 <_Z14motor_standardv+0x1c4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004740:	ee17 2a90 	vmov	r2, s15
 8004744:	635a      	str	r2, [r3, #52]	; 0x34

	/*enc 4*/
		bl.CountNow = __HAL_TIM_GetCounter(&htim4);
 8004746:	4b28      	ldr	r3, [pc, #160]	; (80047e8 <_Z14motor_standardv+0x1c8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	b21a      	sxth	r2, r3
 800474e:	4b27      	ldr	r3, [pc, #156]	; (80047ec <_Z14motor_standardv+0x1cc>)
 8004750:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		bl.PIDControl();
 8004754:	4825      	ldr	r0, [pc, #148]	; (80047ec <_Z14motor_standardv+0x1cc>)
 8004756:	f7fc f80c 	bl	8000772 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim4,0);
 800475a:	4b23      	ldr	r3, [pc, #140]	; (80047e8 <_Z14motor_standardv+0x1c8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2200      	movs	r2, #0
 8004760:	625a      	str	r2, [r3, #36]	; 0x24

		if (bl.PWM < 0) {
 8004762:	4b22      	ldr	r3, [pc, #136]	; (80047ec <_Z14motor_standardv+0x1cc>)
 8004764:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8004768:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800476c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004770:	d50b      	bpl.n	800478a <_Z14motor_standardv+0x16a>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_SET);
 8004772:	2201      	movs	r2, #1
 8004774:	2110      	movs	r1, #16
 8004776:	481a      	ldr	r0, [pc, #104]	; (80047e0 <_Z14motor_standardv+0x1c0>)
 8004778:	f003 f9ea 	bl	8007b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_RESET);
 800477c:	2200      	movs	r2, #0
 800477e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004782:	481b      	ldr	r0, [pc, #108]	; (80047f0 <_Z14motor_standardv+0x1d0>)
 8004784:	f003 f9e4 	bl	8007b50 <HAL_GPIO_WritePin>
 8004788:	e00a      	b.n	80047a0 <_Z14motor_standardv+0x180>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_RESET);
 800478a:	2200      	movs	r2, #0
 800478c:	2110      	movs	r1, #16
 800478e:	4814      	ldr	r0, [pc, #80]	; (80047e0 <_Z14motor_standardv+0x1c0>)
 8004790:	f003 f9de 	bl	8007b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_SET);
 8004794:	2201      	movs	r2, #1
 8004796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800479a:	4815      	ldr	r0, [pc, #84]	; (80047f0 <_Z14motor_standardv+0x1d0>)
 800479c:	f003 f9d8 	bl	8007b50 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, fabs(bl.PWM));
 80047a0:	4b12      	ldr	r3, [pc, #72]	; (80047ec <_Z14motor_standardv+0x1cc>)
 80047a2:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80047a6:	eeb0 7bc7 	vabs.f64	d7, d7
 80047aa:	4b0e      	ldr	r3, [pc, #56]	; (80047e4 <_Z14motor_standardv+0x1c4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80047b2:	ee17 2a90 	vmov	r2, s15
 80047b6:	639a      	str	r2, [r3, #56]	; 0x38

}
 80047b8:	bf00      	nop
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	24000260 	.word	0x24000260
 80047c0:	240000a0 	.word	0x240000a0
 80047c4:	58020c00 	.word	0x58020c00
 80047c8:	24000390 	.word	0x24000390
 80047cc:	24000344 	.word	0x24000344
 80047d0:	24000110 	.word	0x24000110
 80047d4:	58020400 	.word	0x58020400
 80047d8:	240002ac 	.word	0x240002ac
 80047dc:	24000180 	.word	0x24000180
 80047e0:	58021000 	.word	0x58021000
 80047e4:	24000428 	.word	0x24000428
 80047e8:	240002f8 	.word	0x240002f8
 80047ec:	240001f0 	.word	0x240001f0
 80047f0:	58020800 	.word	0x58020800

080047f4 <Reset_Handler>:
 80047f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800482c <LoopFillZerobss+0xe>
 80047f8:	f7ff fe6e 	bl	80044d8 <SystemInit>
 80047fc:	480c      	ldr	r0, [pc, #48]	; (8004830 <LoopFillZerobss+0x12>)
 80047fe:	490d      	ldr	r1, [pc, #52]	; (8004834 <LoopFillZerobss+0x16>)
 8004800:	4a0d      	ldr	r2, [pc, #52]	; (8004838 <LoopFillZerobss+0x1a>)
 8004802:	2300      	movs	r3, #0
 8004804:	e002      	b.n	800480c <LoopCopyDataInit>

08004806 <CopyDataInit>:
 8004806:	58d4      	ldr	r4, [r2, r3]
 8004808:	50c4      	str	r4, [r0, r3]
 800480a:	3304      	adds	r3, #4

0800480c <LoopCopyDataInit>:
 800480c:	18c4      	adds	r4, r0, r3
 800480e:	428c      	cmp	r4, r1
 8004810:	d3f9      	bcc.n	8004806 <CopyDataInit>
 8004812:	4a0a      	ldr	r2, [pc, #40]	; (800483c <LoopFillZerobss+0x1e>)
 8004814:	4c0a      	ldr	r4, [pc, #40]	; (8004840 <LoopFillZerobss+0x22>)
 8004816:	2300      	movs	r3, #0
 8004818:	e001      	b.n	800481e <LoopFillZerobss>

0800481a <FillZerobss>:
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	3204      	adds	r2, #4

0800481e <LoopFillZerobss>:
 800481e:	42a2      	cmp	r2, r4
 8004820:	d3fb      	bcc.n	800481a <FillZerobss>
 8004822:	f009 f8a5 	bl	800d970 <__libc_init_array>
 8004826:	f7fc f88d 	bl	8000944 <main>
 800482a:	4770      	bx	lr
 800482c:	24050000 	.word	0x24050000
 8004830:	24000000 	.word	0x24000000
 8004834:	2400007c 	.word	0x2400007c
 8004838:	0800dfc8 	.word	0x0800dfc8
 800483c:	24000080 	.word	0x24000080
 8004840:	24001808 	.word	0x24001808

08004844 <ADC3_IRQHandler>:
 8004844:	e7fe      	b.n	8004844 <ADC3_IRQHandler>
	...

08004848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800484e:	2003      	movs	r0, #3
 8004850:	f000 f95c 	bl	8004b0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004854:	f003 ff34 	bl	80086c0 <HAL_RCC_GetSysClockFreq>
 8004858:	4602      	mov	r2, r0
 800485a:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <HAL_Init+0x68>)
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	0a1b      	lsrs	r3, r3, #8
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	4913      	ldr	r1, [pc, #76]	; (80048b4 <HAL_Init+0x6c>)
 8004866:	5ccb      	ldrb	r3, [r1, r3]
 8004868:	f003 031f 	and.w	r3, r3, #31
 800486c:	fa22 f303 	lsr.w	r3, r2, r3
 8004870:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004872:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <HAL_Init+0x68>)
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	4a0e      	ldr	r2, [pc, #56]	; (80048b4 <HAL_Init+0x6c>)
 800487c:	5cd3      	ldrb	r3, [r2, r3]
 800487e:	f003 031f 	and.w	r3, r3, #31
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
 8004888:	4a0b      	ldr	r2, [pc, #44]	; (80048b8 <HAL_Init+0x70>)
 800488a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800488c:	4a0b      	ldr	r2, [pc, #44]	; (80048bc <HAL_Init+0x74>)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004892:	200f      	movs	r0, #15
 8004894:	f000 f814 	bl	80048c0 <HAL_InitTick>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e002      	b.n	80048a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80048a2:	f7ff fa79 	bl	8003d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	58024400 	.word	0x58024400
 80048b4:	0800df6c 	.word	0x0800df6c
 80048b8:	24000008 	.word	0x24000008
 80048bc:	24000004 	.word	0x24000004

080048c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80048c8:	4b15      	ldr	r3, [pc, #84]	; (8004920 <HAL_InitTick+0x60>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e021      	b.n	8004918 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80048d4:	4b13      	ldr	r3, [pc, #76]	; (8004924 <HAL_InitTick+0x64>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4b11      	ldr	r3, [pc, #68]	; (8004920 <HAL_InitTick+0x60>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	4619      	mov	r1, r3
 80048de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80048e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 f941 	bl	8004b72 <HAL_SYSTICK_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e00e      	b.n	8004918 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b0f      	cmp	r3, #15
 80048fe:	d80a      	bhi.n	8004916 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004900:	2200      	movs	r2, #0
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	f04f 30ff 	mov.w	r0, #4294967295
 8004908:	f000 f90b 	bl	8004b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800490c:	4a06      	ldr	r2, [pc, #24]	; (8004928 <HAL_InitTick+0x68>)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	e000      	b.n	8004918 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
}
 8004918:	4618      	mov	r0, r3
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	24000010 	.word	0x24000010
 8004924:	24000004 	.word	0x24000004
 8004928:	2400000c 	.word	0x2400000c

0800492c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004930:	4b06      	ldr	r3, [pc, #24]	; (800494c <HAL_IncTick+0x20>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	461a      	mov	r2, r3
 8004936:	4b06      	ldr	r3, [pc, #24]	; (8004950 <HAL_IncTick+0x24>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4413      	add	r3, r2
 800493c:	4a04      	ldr	r2, [pc, #16]	; (8004950 <HAL_IncTick+0x24>)
 800493e:	6013      	str	r3, [r2, #0]
}
 8004940:	bf00      	nop
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	24000010 	.word	0x24000010
 8004950:	240017f4 	.word	0x240017f4

08004954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  return uwTick;
 8004958:	4b03      	ldr	r3, [pc, #12]	; (8004968 <HAL_GetTick+0x14>)
 800495a:	681b      	ldr	r3, [r3, #0]
}
 800495c:	4618      	mov	r0, r3
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	240017f4 	.word	0x240017f4

0800496c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <__NVIC_SetPriorityGrouping+0x40>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004988:	4013      	ands	r3, r2
 800498a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004994:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <__NVIC_SetPriorityGrouping+0x44>)
 8004996:	4313      	orrs	r3, r2
 8004998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800499a:	4a04      	ldr	r2, [pc, #16]	; (80049ac <__NVIC_SetPriorityGrouping+0x40>)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	60d3      	str	r3, [r2, #12]
}
 80049a0:	bf00      	nop
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	e000ed00 	.word	0xe000ed00
 80049b0:	05fa0000 	.word	0x05fa0000

080049b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049b8:	4b04      	ldr	r3, [pc, #16]	; (80049cc <__NVIC_GetPriorityGrouping+0x18>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	0a1b      	lsrs	r3, r3, #8
 80049be:	f003 0307 	and.w	r3, r3, #7
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	e000ed00 	.word	0xe000ed00

080049d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	db0b      	blt.n	80049fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	f003 021f 	and.w	r2, r3, #31
 80049e8:	4907      	ldr	r1, [pc, #28]	; (8004a08 <__NVIC_EnableIRQ+0x38>)
 80049ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	2001      	movs	r0, #1
 80049f2:	fa00 f202 	lsl.w	r2, r0, r2
 80049f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	e000e100 	.word	0xe000e100

08004a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	6039      	str	r1, [r7, #0]
 8004a16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	db0a      	blt.n	8004a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	490c      	ldr	r1, [pc, #48]	; (8004a58 <__NVIC_SetPriority+0x4c>)
 8004a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a2a:	0112      	lsls	r2, r2, #4
 8004a2c:	b2d2      	uxtb	r2, r2
 8004a2e:	440b      	add	r3, r1
 8004a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a34:	e00a      	b.n	8004a4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	4908      	ldr	r1, [pc, #32]	; (8004a5c <__NVIC_SetPriority+0x50>)
 8004a3c:	88fb      	ldrh	r3, [r7, #6]
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	3b04      	subs	r3, #4
 8004a44:	0112      	lsls	r2, r2, #4
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	440b      	add	r3, r1
 8004a4a:	761a      	strb	r2, [r3, #24]
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	e000e100 	.word	0xe000e100
 8004a5c:	e000ed00 	.word	0xe000ed00

08004a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b089      	sub	sp, #36	; 0x24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	f1c3 0307 	rsb	r3, r3, #7
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	bf28      	it	cs
 8004a7e:	2304      	movcs	r3, #4
 8004a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	3304      	adds	r3, #4
 8004a86:	2b06      	cmp	r3, #6
 8004a88:	d902      	bls.n	8004a90 <NVIC_EncodePriority+0x30>
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	3b03      	subs	r3, #3
 8004a8e:	e000      	b.n	8004a92 <NVIC_EncodePriority+0x32>
 8004a90:	2300      	movs	r3, #0
 8004a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a94:	f04f 32ff 	mov.w	r2, #4294967295
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9e:	43da      	mvns	r2, r3
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	401a      	ands	r2, r3
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab2:	43d9      	mvns	r1, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ab8:	4313      	orrs	r3, r2
         );
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3724      	adds	r7, #36	; 0x24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
	...

08004ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ad8:	d301      	bcc.n	8004ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ada:	2301      	movs	r3, #1
 8004adc:	e00f      	b.n	8004afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ade:	4a0a      	ldr	r2, [pc, #40]	; (8004b08 <SysTick_Config+0x40>)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ae6:	210f      	movs	r1, #15
 8004ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aec:	f7ff ff8e 	bl	8004a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004af0:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <SysTick_Config+0x40>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004af6:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <SysTick_Config+0x40>)
 8004af8:	2207      	movs	r2, #7
 8004afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	e000e010 	.word	0xe000e010

08004b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7ff ff29 	bl	800496c <__NVIC_SetPriorityGrouping>
}
 8004b1a:	bf00      	nop
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b086      	sub	sp, #24
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	4603      	mov	r3, r0
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	607a      	str	r2, [r7, #4]
 8004b2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b30:	f7ff ff40 	bl	80049b4 <__NVIC_GetPriorityGrouping>
 8004b34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	68b9      	ldr	r1, [r7, #8]
 8004b3a:	6978      	ldr	r0, [r7, #20]
 8004b3c:	f7ff ff90 	bl	8004a60 <NVIC_EncodePriority>
 8004b40:	4602      	mov	r2, r0
 8004b42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b46:	4611      	mov	r1, r2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff ff5f 	bl	8004a0c <__NVIC_SetPriority>
}
 8004b4e:	bf00      	nop
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b082      	sub	sp, #8
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff ff33 	bl	80049d0 <__NVIC_EnableIRQ>
}
 8004b6a:	bf00      	nop
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b082      	sub	sp, #8
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7ff ffa4 	bl	8004ac8 <SysTick_Config>
 8004b80:	4603      	mov	r3, r0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004b94:	f7ff fede 	bl	8004954 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e314      	b.n	80051ce <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a66      	ldr	r2, [pc, #408]	; (8004d44 <HAL_DMA_Init+0x1b8>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d04a      	beq.n	8004c44 <HAL_DMA_Init+0xb8>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a65      	ldr	r2, [pc, #404]	; (8004d48 <HAL_DMA_Init+0x1bc>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d045      	beq.n	8004c44 <HAL_DMA_Init+0xb8>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a63      	ldr	r2, [pc, #396]	; (8004d4c <HAL_DMA_Init+0x1c0>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d040      	beq.n	8004c44 <HAL_DMA_Init+0xb8>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a62      	ldr	r2, [pc, #392]	; (8004d50 <HAL_DMA_Init+0x1c4>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d03b      	beq.n	8004c44 <HAL_DMA_Init+0xb8>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a60      	ldr	r2, [pc, #384]	; (8004d54 <HAL_DMA_Init+0x1c8>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d036      	beq.n	8004c44 <HAL_DMA_Init+0xb8>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a5f      	ldr	r2, [pc, #380]	; (8004d58 <HAL_DMA_Init+0x1cc>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d031      	beq.n	8004c44 <HAL_DMA_Init+0xb8>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a5d      	ldr	r2, [pc, #372]	; (8004d5c <HAL_DMA_Init+0x1d0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d02c      	beq.n	8004c44 <HAL_DMA_Init+0xb8>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a5c      	ldr	r2, [pc, #368]	; (8004d60 <HAL_DMA_Init+0x1d4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d027      	beq.n	8004c44 <HAL_DMA_Init+0xb8>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a5a      	ldr	r2, [pc, #360]	; (8004d64 <HAL_DMA_Init+0x1d8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d022      	beq.n	8004c44 <HAL_DMA_Init+0xb8>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a59      	ldr	r2, [pc, #356]	; (8004d68 <HAL_DMA_Init+0x1dc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d01d      	beq.n	8004c44 <HAL_DMA_Init+0xb8>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a57      	ldr	r2, [pc, #348]	; (8004d6c <HAL_DMA_Init+0x1e0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d018      	beq.n	8004c44 <HAL_DMA_Init+0xb8>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a56      	ldr	r2, [pc, #344]	; (8004d70 <HAL_DMA_Init+0x1e4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d013      	beq.n	8004c44 <HAL_DMA_Init+0xb8>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a54      	ldr	r2, [pc, #336]	; (8004d74 <HAL_DMA_Init+0x1e8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00e      	beq.n	8004c44 <HAL_DMA_Init+0xb8>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a53      	ldr	r2, [pc, #332]	; (8004d78 <HAL_DMA_Init+0x1ec>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d009      	beq.n	8004c44 <HAL_DMA_Init+0xb8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a51      	ldr	r2, [pc, #324]	; (8004d7c <HAL_DMA_Init+0x1f0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d004      	beq.n	8004c44 <HAL_DMA_Init+0xb8>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a50      	ldr	r2, [pc, #320]	; (8004d80 <HAL_DMA_Init+0x1f4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d101      	bne.n	8004c48 <HAL_DMA_Init+0xbc>
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <HAL_DMA_Init+0xbe>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 813c 	beq.w	8004ec8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a37      	ldr	r2, [pc, #220]	; (8004d44 <HAL_DMA_Init+0x1b8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d04a      	beq.n	8004d00 <HAL_DMA_Init+0x174>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a36      	ldr	r2, [pc, #216]	; (8004d48 <HAL_DMA_Init+0x1bc>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d045      	beq.n	8004d00 <HAL_DMA_Init+0x174>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a34      	ldr	r2, [pc, #208]	; (8004d4c <HAL_DMA_Init+0x1c0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d040      	beq.n	8004d00 <HAL_DMA_Init+0x174>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a33      	ldr	r2, [pc, #204]	; (8004d50 <HAL_DMA_Init+0x1c4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d03b      	beq.n	8004d00 <HAL_DMA_Init+0x174>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a31      	ldr	r2, [pc, #196]	; (8004d54 <HAL_DMA_Init+0x1c8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d036      	beq.n	8004d00 <HAL_DMA_Init+0x174>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a30      	ldr	r2, [pc, #192]	; (8004d58 <HAL_DMA_Init+0x1cc>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d031      	beq.n	8004d00 <HAL_DMA_Init+0x174>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a2e      	ldr	r2, [pc, #184]	; (8004d5c <HAL_DMA_Init+0x1d0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d02c      	beq.n	8004d00 <HAL_DMA_Init+0x174>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a2d      	ldr	r2, [pc, #180]	; (8004d60 <HAL_DMA_Init+0x1d4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d027      	beq.n	8004d00 <HAL_DMA_Init+0x174>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a2b      	ldr	r2, [pc, #172]	; (8004d64 <HAL_DMA_Init+0x1d8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d022      	beq.n	8004d00 <HAL_DMA_Init+0x174>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a2a      	ldr	r2, [pc, #168]	; (8004d68 <HAL_DMA_Init+0x1dc>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d01d      	beq.n	8004d00 <HAL_DMA_Init+0x174>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a28      	ldr	r2, [pc, #160]	; (8004d6c <HAL_DMA_Init+0x1e0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d018      	beq.n	8004d00 <HAL_DMA_Init+0x174>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a27      	ldr	r2, [pc, #156]	; (8004d70 <HAL_DMA_Init+0x1e4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d013      	beq.n	8004d00 <HAL_DMA_Init+0x174>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a25      	ldr	r2, [pc, #148]	; (8004d74 <HAL_DMA_Init+0x1e8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00e      	beq.n	8004d00 <HAL_DMA_Init+0x174>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a24      	ldr	r2, [pc, #144]	; (8004d78 <HAL_DMA_Init+0x1ec>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d009      	beq.n	8004d00 <HAL_DMA_Init+0x174>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a22      	ldr	r2, [pc, #136]	; (8004d7c <HAL_DMA_Init+0x1f0>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d004      	beq.n	8004d00 <HAL_DMA_Init+0x174>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a21      	ldr	r2, [pc, #132]	; (8004d80 <HAL_DMA_Init+0x1f4>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d108      	bne.n	8004d12 <HAL_DMA_Init+0x186>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0201 	bic.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	e007      	b.n	8004d22 <HAL_DMA_Init+0x196>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0201 	bic.w	r2, r2, #1
 8004d20:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d22:	e02f      	b.n	8004d84 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d24:	f7ff fe16 	bl	8004954 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b05      	cmp	r3, #5
 8004d30:	d928      	bls.n	8004d84 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2220      	movs	r2, #32
 8004d36:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2203      	movs	r2, #3
 8004d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e244      	b.n	80051ce <HAL_DMA_Init+0x642>
 8004d44:	40020010 	.word	0x40020010
 8004d48:	40020028 	.word	0x40020028
 8004d4c:	40020040 	.word	0x40020040
 8004d50:	40020058 	.word	0x40020058
 8004d54:	40020070 	.word	0x40020070
 8004d58:	40020088 	.word	0x40020088
 8004d5c:	400200a0 	.word	0x400200a0
 8004d60:	400200b8 	.word	0x400200b8
 8004d64:	40020410 	.word	0x40020410
 8004d68:	40020428 	.word	0x40020428
 8004d6c:	40020440 	.word	0x40020440
 8004d70:	40020458 	.word	0x40020458
 8004d74:	40020470 	.word	0x40020470
 8004d78:	40020488 	.word	0x40020488
 8004d7c:	400204a0 	.word	0x400204a0
 8004d80:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1c8      	bne.n	8004d24 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	4b84      	ldr	r3, [pc, #528]	; (8004fb0 <HAL_DMA_Init+0x424>)
 8004d9e:	4013      	ands	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004daa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004db6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dc2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d107      	bne.n	8004de8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de0:	4313      	orrs	r3, r2
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b28      	cmp	r3, #40	; 0x28
 8004dee:	d903      	bls.n	8004df8 <HAL_DMA_Init+0x26c>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b2e      	cmp	r3, #46	; 0x2e
 8004df6:	d91f      	bls.n	8004e38 <HAL_DMA_Init+0x2ac>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b3e      	cmp	r3, #62	; 0x3e
 8004dfe:	d903      	bls.n	8004e08 <HAL_DMA_Init+0x27c>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2b42      	cmp	r3, #66	; 0x42
 8004e06:	d917      	bls.n	8004e38 <HAL_DMA_Init+0x2ac>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2b46      	cmp	r3, #70	; 0x46
 8004e0e:	d903      	bls.n	8004e18 <HAL_DMA_Init+0x28c>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b48      	cmp	r3, #72	; 0x48
 8004e16:	d90f      	bls.n	8004e38 <HAL_DMA_Init+0x2ac>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b4e      	cmp	r3, #78	; 0x4e
 8004e1e:	d903      	bls.n	8004e28 <HAL_DMA_Init+0x29c>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b52      	cmp	r3, #82	; 0x52
 8004e26:	d907      	bls.n	8004e38 <HAL_DMA_Init+0x2ac>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b73      	cmp	r3, #115	; 0x73
 8004e2e:	d905      	bls.n	8004e3c <HAL_DMA_Init+0x2b0>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b77      	cmp	r3, #119	; 0x77
 8004e36:	d801      	bhi.n	8004e3c <HAL_DMA_Init+0x2b0>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e000      	b.n	8004e3e <HAL_DMA_Init+0x2b2>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e48:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f023 0307 	bic.w	r3, r3, #7
 8004e60:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	d117      	bne.n	8004ea4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00e      	beq.n	8004ea4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f002 fb30 	bl	80074ec <DMA_CheckFifoParam>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d008      	beq.n	8004ea4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2240      	movs	r2, #64	; 0x40
 8004e96:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e194      	b.n	80051ce <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f002 fa6b 	bl	8007388 <DMA_CalcBaseAndBitshift>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eba:	f003 031f 	and.w	r3, r3, #31
 8004ebe:	223f      	movs	r2, #63	; 0x3f
 8004ec0:	409a      	lsls	r2, r3
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	609a      	str	r2, [r3, #8]
 8004ec6:	e0ca      	b.n	800505e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a39      	ldr	r2, [pc, #228]	; (8004fb4 <HAL_DMA_Init+0x428>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d022      	beq.n	8004f18 <HAL_DMA_Init+0x38c>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a38      	ldr	r2, [pc, #224]	; (8004fb8 <HAL_DMA_Init+0x42c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d01d      	beq.n	8004f18 <HAL_DMA_Init+0x38c>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a36      	ldr	r2, [pc, #216]	; (8004fbc <HAL_DMA_Init+0x430>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d018      	beq.n	8004f18 <HAL_DMA_Init+0x38c>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a35      	ldr	r2, [pc, #212]	; (8004fc0 <HAL_DMA_Init+0x434>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d013      	beq.n	8004f18 <HAL_DMA_Init+0x38c>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a33      	ldr	r2, [pc, #204]	; (8004fc4 <HAL_DMA_Init+0x438>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00e      	beq.n	8004f18 <HAL_DMA_Init+0x38c>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a32      	ldr	r2, [pc, #200]	; (8004fc8 <HAL_DMA_Init+0x43c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d009      	beq.n	8004f18 <HAL_DMA_Init+0x38c>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a30      	ldr	r2, [pc, #192]	; (8004fcc <HAL_DMA_Init+0x440>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d004      	beq.n	8004f18 <HAL_DMA_Init+0x38c>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a2f      	ldr	r2, [pc, #188]	; (8004fd0 <HAL_DMA_Init+0x444>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d101      	bne.n	8004f1c <HAL_DMA_Init+0x390>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e000      	b.n	8004f1e <HAL_DMA_Init+0x392>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f000 8094 	beq.w	800504c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a22      	ldr	r2, [pc, #136]	; (8004fb4 <HAL_DMA_Init+0x428>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d021      	beq.n	8004f72 <HAL_DMA_Init+0x3e6>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a21      	ldr	r2, [pc, #132]	; (8004fb8 <HAL_DMA_Init+0x42c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d01c      	beq.n	8004f72 <HAL_DMA_Init+0x3e6>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a1f      	ldr	r2, [pc, #124]	; (8004fbc <HAL_DMA_Init+0x430>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d017      	beq.n	8004f72 <HAL_DMA_Init+0x3e6>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a1e      	ldr	r2, [pc, #120]	; (8004fc0 <HAL_DMA_Init+0x434>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d012      	beq.n	8004f72 <HAL_DMA_Init+0x3e6>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a1c      	ldr	r2, [pc, #112]	; (8004fc4 <HAL_DMA_Init+0x438>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00d      	beq.n	8004f72 <HAL_DMA_Init+0x3e6>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a1b      	ldr	r2, [pc, #108]	; (8004fc8 <HAL_DMA_Init+0x43c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d008      	beq.n	8004f72 <HAL_DMA_Init+0x3e6>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a19      	ldr	r2, [pc, #100]	; (8004fcc <HAL_DMA_Init+0x440>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d003      	beq.n	8004f72 <HAL_DMA_Init+0x3e6>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a18      	ldr	r2, [pc, #96]	; (8004fd0 <HAL_DMA_Init+0x444>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <HAL_DMA_Init+0x448>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b40      	cmp	r3, #64	; 0x40
 8004f9a:	d01d      	beq.n	8004fd8 <HAL_DMA_Init+0x44c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b80      	cmp	r3, #128	; 0x80
 8004fa2:	d102      	bne.n	8004faa <HAL_DMA_Init+0x41e>
 8004fa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004fa8:	e017      	b.n	8004fda <HAL_DMA_Init+0x44e>
 8004faa:	2300      	movs	r3, #0
 8004fac:	e015      	b.n	8004fda <HAL_DMA_Init+0x44e>
 8004fae:	bf00      	nop
 8004fb0:	fe10803f 	.word	0xfe10803f
 8004fb4:	58025408 	.word	0x58025408
 8004fb8:	5802541c 	.word	0x5802541c
 8004fbc:	58025430 	.word	0x58025430
 8004fc0:	58025444 	.word	0x58025444
 8004fc4:	58025458 	.word	0x58025458
 8004fc8:	5802546c 	.word	0x5802546c
 8004fcc:	58025480 	.word	0x58025480
 8004fd0:	58025494 	.word	0x58025494
 8004fd4:	fffe000f 	.word	0xfffe000f
 8004fd8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	68d2      	ldr	r2, [r2, #12]
 8004fde:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004fe0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004fe8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ff0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ff8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005000:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005008:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	461a      	mov	r2, r3
 800501e:	4b6e      	ldr	r3, [pc, #440]	; (80051d8 <HAL_DMA_Init+0x64c>)
 8005020:	4413      	add	r3, r2
 8005022:	4a6e      	ldr	r2, [pc, #440]	; (80051dc <HAL_DMA_Init+0x650>)
 8005024:	fba2 2303 	umull	r2, r3, r2, r3
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	009a      	lsls	r2, r3, #2
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f002 f9a9 	bl	8007388 <DMA_CalcBaseAndBitshift>
 8005036:	4603      	mov	r3, r0
 8005038:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503e:	f003 031f 	and.w	r3, r3, #31
 8005042:	2201      	movs	r2, #1
 8005044:	409a      	lsls	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	605a      	str	r2, [r3, #4]
 800504a:	e008      	b.n	800505e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2240      	movs	r2, #64	; 0x40
 8005050:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2203      	movs	r2, #3
 8005056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e0b7      	b.n	80051ce <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a5f      	ldr	r2, [pc, #380]	; (80051e0 <HAL_DMA_Init+0x654>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d072      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a5d      	ldr	r2, [pc, #372]	; (80051e4 <HAL_DMA_Init+0x658>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d06d      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a5c      	ldr	r2, [pc, #368]	; (80051e8 <HAL_DMA_Init+0x65c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d068      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a5a      	ldr	r2, [pc, #360]	; (80051ec <HAL_DMA_Init+0x660>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d063      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a59      	ldr	r2, [pc, #356]	; (80051f0 <HAL_DMA_Init+0x664>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d05e      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a57      	ldr	r2, [pc, #348]	; (80051f4 <HAL_DMA_Init+0x668>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d059      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a56      	ldr	r2, [pc, #344]	; (80051f8 <HAL_DMA_Init+0x66c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d054      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a54      	ldr	r2, [pc, #336]	; (80051fc <HAL_DMA_Init+0x670>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d04f      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a53      	ldr	r2, [pc, #332]	; (8005200 <HAL_DMA_Init+0x674>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d04a      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a51      	ldr	r2, [pc, #324]	; (8005204 <HAL_DMA_Init+0x678>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d045      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a50      	ldr	r2, [pc, #320]	; (8005208 <HAL_DMA_Init+0x67c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d040      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a4e      	ldr	r2, [pc, #312]	; (800520c <HAL_DMA_Init+0x680>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d03b      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a4d      	ldr	r2, [pc, #308]	; (8005210 <HAL_DMA_Init+0x684>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d036      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a4b      	ldr	r2, [pc, #300]	; (8005214 <HAL_DMA_Init+0x688>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d031      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a4a      	ldr	r2, [pc, #296]	; (8005218 <HAL_DMA_Init+0x68c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d02c      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a48      	ldr	r2, [pc, #288]	; (800521c <HAL_DMA_Init+0x690>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d027      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a47      	ldr	r2, [pc, #284]	; (8005220 <HAL_DMA_Init+0x694>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d022      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a45      	ldr	r2, [pc, #276]	; (8005224 <HAL_DMA_Init+0x698>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d01d      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a44      	ldr	r2, [pc, #272]	; (8005228 <HAL_DMA_Init+0x69c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d018      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a42      	ldr	r2, [pc, #264]	; (800522c <HAL_DMA_Init+0x6a0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d013      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a41      	ldr	r2, [pc, #260]	; (8005230 <HAL_DMA_Init+0x6a4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00e      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a3f      	ldr	r2, [pc, #252]	; (8005234 <HAL_DMA_Init+0x6a8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d009      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a3e      	ldr	r2, [pc, #248]	; (8005238 <HAL_DMA_Init+0x6ac>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d004      	beq.n	800514e <HAL_DMA_Init+0x5c2>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a3c      	ldr	r2, [pc, #240]	; (800523c <HAL_DMA_Init+0x6b0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d101      	bne.n	8005152 <HAL_DMA_Init+0x5c6>
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <HAL_DMA_Init+0x5c8>
 8005152:	2300      	movs	r3, #0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d032      	beq.n	80051be <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f002 fa43 	bl	80075e4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	2b80      	cmp	r3, #128	; 0x80
 8005164:	d102      	bne.n	800516c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005180:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d010      	beq.n	80051ac <HAL_DMA_Init+0x620>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b08      	cmp	r3, #8
 8005190:	d80c      	bhi.n	80051ac <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f002 fac0 	bl	8007718 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80051a8:	605a      	str	r2, [r3, #4]
 80051aa:	e008      	b.n	80051be <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	a7fdabf8 	.word	0xa7fdabf8
 80051dc:	cccccccd 	.word	0xcccccccd
 80051e0:	40020010 	.word	0x40020010
 80051e4:	40020028 	.word	0x40020028
 80051e8:	40020040 	.word	0x40020040
 80051ec:	40020058 	.word	0x40020058
 80051f0:	40020070 	.word	0x40020070
 80051f4:	40020088 	.word	0x40020088
 80051f8:	400200a0 	.word	0x400200a0
 80051fc:	400200b8 	.word	0x400200b8
 8005200:	40020410 	.word	0x40020410
 8005204:	40020428 	.word	0x40020428
 8005208:	40020440 	.word	0x40020440
 800520c:	40020458 	.word	0x40020458
 8005210:	40020470 	.word	0x40020470
 8005214:	40020488 	.word	0x40020488
 8005218:	400204a0 	.word	0x400204a0
 800521c:	400204b8 	.word	0x400204b8
 8005220:	58025408 	.word	0x58025408
 8005224:	5802541c 	.word	0x5802541c
 8005228:	58025430 	.word	0x58025430
 800522c:	58025444 	.word	0x58025444
 8005230:	58025458 	.word	0x58025458
 8005234:	5802546c 	.word	0x5802546c
 8005238:	58025480 	.word	0x58025480
 800523c:	58025494 	.word	0x58025494

08005240 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800524e:	2300      	movs	r3, #0
 8005250:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e226      	b.n	80056aa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005262:	2b01      	cmp	r3, #1
 8005264:	d101      	bne.n	800526a <HAL_DMA_Start_IT+0x2a>
 8005266:	2302      	movs	r3, #2
 8005268:	e21f      	b.n	80056aa <HAL_DMA_Start_IT+0x46a>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b01      	cmp	r3, #1
 800527c:	f040 820a 	bne.w	8005694 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a68      	ldr	r2, [pc, #416]	; (8005434 <HAL_DMA_Start_IT+0x1f4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d04a      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a66      	ldr	r2, [pc, #408]	; (8005438 <HAL_DMA_Start_IT+0x1f8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d045      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a65      	ldr	r2, [pc, #404]	; (800543c <HAL_DMA_Start_IT+0x1fc>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d040      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a63      	ldr	r2, [pc, #396]	; (8005440 <HAL_DMA_Start_IT+0x200>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d03b      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a62      	ldr	r2, [pc, #392]	; (8005444 <HAL_DMA_Start_IT+0x204>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d036      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a60      	ldr	r2, [pc, #384]	; (8005448 <HAL_DMA_Start_IT+0x208>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d031      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a5f      	ldr	r2, [pc, #380]	; (800544c <HAL_DMA_Start_IT+0x20c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d02c      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a5d      	ldr	r2, [pc, #372]	; (8005450 <HAL_DMA_Start_IT+0x210>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d027      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a5c      	ldr	r2, [pc, #368]	; (8005454 <HAL_DMA_Start_IT+0x214>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d022      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a5a      	ldr	r2, [pc, #360]	; (8005458 <HAL_DMA_Start_IT+0x218>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d01d      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a59      	ldr	r2, [pc, #356]	; (800545c <HAL_DMA_Start_IT+0x21c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d018      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a57      	ldr	r2, [pc, #348]	; (8005460 <HAL_DMA_Start_IT+0x220>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d013      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a56      	ldr	r2, [pc, #344]	; (8005464 <HAL_DMA_Start_IT+0x224>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00e      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a54      	ldr	r2, [pc, #336]	; (8005468 <HAL_DMA_Start_IT+0x228>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d009      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a53      	ldr	r2, [pc, #332]	; (800546c <HAL_DMA_Start_IT+0x22c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d004      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a51      	ldr	r2, [pc, #324]	; (8005470 <HAL_DMA_Start_IT+0x230>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d108      	bne.n	8005340 <HAL_DMA_Start_IT+0x100>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0201 	bic.w	r2, r2, #1
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	e007      	b.n	8005350 <HAL_DMA_Start_IT+0x110>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0201 	bic.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	68b9      	ldr	r1, [r7, #8]
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f001 fe6a 	bl	8007030 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a34      	ldr	r2, [pc, #208]	; (8005434 <HAL_DMA_Start_IT+0x1f4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d04a      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a33      	ldr	r2, [pc, #204]	; (8005438 <HAL_DMA_Start_IT+0x1f8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d045      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a31      	ldr	r2, [pc, #196]	; (800543c <HAL_DMA_Start_IT+0x1fc>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d040      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a30      	ldr	r2, [pc, #192]	; (8005440 <HAL_DMA_Start_IT+0x200>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d03b      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a2e      	ldr	r2, [pc, #184]	; (8005444 <HAL_DMA_Start_IT+0x204>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d036      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a2d      	ldr	r2, [pc, #180]	; (8005448 <HAL_DMA_Start_IT+0x208>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d031      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a2b      	ldr	r2, [pc, #172]	; (800544c <HAL_DMA_Start_IT+0x20c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d02c      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a2a      	ldr	r2, [pc, #168]	; (8005450 <HAL_DMA_Start_IT+0x210>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d027      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a28      	ldr	r2, [pc, #160]	; (8005454 <HAL_DMA_Start_IT+0x214>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d022      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a27      	ldr	r2, [pc, #156]	; (8005458 <HAL_DMA_Start_IT+0x218>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d01d      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a25      	ldr	r2, [pc, #148]	; (800545c <HAL_DMA_Start_IT+0x21c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d018      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a24      	ldr	r2, [pc, #144]	; (8005460 <HAL_DMA_Start_IT+0x220>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d013      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a22      	ldr	r2, [pc, #136]	; (8005464 <HAL_DMA_Start_IT+0x224>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00e      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a21      	ldr	r2, [pc, #132]	; (8005468 <HAL_DMA_Start_IT+0x228>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d009      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1f      	ldr	r2, [pc, #124]	; (800546c <HAL_DMA_Start_IT+0x22c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d004      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1e      	ldr	r2, [pc, #120]	; (8005470 <HAL_DMA_Start_IT+0x230>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d101      	bne.n	8005400 <HAL_DMA_Start_IT+0x1c0>
 80053fc:	2301      	movs	r3, #1
 80053fe:	e000      	b.n	8005402 <HAL_DMA_Start_IT+0x1c2>
 8005400:	2300      	movs	r3, #0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d036      	beq.n	8005474 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f023 021e 	bic.w	r2, r3, #30
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0216 	orr.w	r2, r2, #22
 8005418:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d03e      	beq.n	80054a0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f042 0208 	orr.w	r2, r2, #8
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	e035      	b.n	80054a0 <HAL_DMA_Start_IT+0x260>
 8005434:	40020010 	.word	0x40020010
 8005438:	40020028 	.word	0x40020028
 800543c:	40020040 	.word	0x40020040
 8005440:	40020058 	.word	0x40020058
 8005444:	40020070 	.word	0x40020070
 8005448:	40020088 	.word	0x40020088
 800544c:	400200a0 	.word	0x400200a0
 8005450:	400200b8 	.word	0x400200b8
 8005454:	40020410 	.word	0x40020410
 8005458:	40020428 	.word	0x40020428
 800545c:	40020440 	.word	0x40020440
 8005460:	40020458 	.word	0x40020458
 8005464:	40020470 	.word	0x40020470
 8005468:	40020488 	.word	0x40020488
 800546c:	400204a0 	.word	0x400204a0
 8005470:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f023 020e 	bic.w	r2, r3, #14
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 020a 	orr.w	r2, r2, #10
 8005486:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0204 	orr.w	r2, r2, #4
 800549e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a83      	ldr	r2, [pc, #524]	; (80056b4 <HAL_DMA_Start_IT+0x474>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d072      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a82      	ldr	r2, [pc, #520]	; (80056b8 <HAL_DMA_Start_IT+0x478>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d06d      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a80      	ldr	r2, [pc, #512]	; (80056bc <HAL_DMA_Start_IT+0x47c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d068      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a7f      	ldr	r2, [pc, #508]	; (80056c0 <HAL_DMA_Start_IT+0x480>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d063      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a7d      	ldr	r2, [pc, #500]	; (80056c4 <HAL_DMA_Start_IT+0x484>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d05e      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a7c      	ldr	r2, [pc, #496]	; (80056c8 <HAL_DMA_Start_IT+0x488>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d059      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a7a      	ldr	r2, [pc, #488]	; (80056cc <HAL_DMA_Start_IT+0x48c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d054      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a79      	ldr	r2, [pc, #484]	; (80056d0 <HAL_DMA_Start_IT+0x490>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d04f      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a77      	ldr	r2, [pc, #476]	; (80056d4 <HAL_DMA_Start_IT+0x494>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d04a      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a76      	ldr	r2, [pc, #472]	; (80056d8 <HAL_DMA_Start_IT+0x498>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d045      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a74      	ldr	r2, [pc, #464]	; (80056dc <HAL_DMA_Start_IT+0x49c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d040      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a73      	ldr	r2, [pc, #460]	; (80056e0 <HAL_DMA_Start_IT+0x4a0>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d03b      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a71      	ldr	r2, [pc, #452]	; (80056e4 <HAL_DMA_Start_IT+0x4a4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d036      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a70      	ldr	r2, [pc, #448]	; (80056e8 <HAL_DMA_Start_IT+0x4a8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d031      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a6e      	ldr	r2, [pc, #440]	; (80056ec <HAL_DMA_Start_IT+0x4ac>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d02c      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a6d      	ldr	r2, [pc, #436]	; (80056f0 <HAL_DMA_Start_IT+0x4b0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d027      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a6b      	ldr	r2, [pc, #428]	; (80056f4 <HAL_DMA_Start_IT+0x4b4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d022      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a6a      	ldr	r2, [pc, #424]	; (80056f8 <HAL_DMA_Start_IT+0x4b8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d01d      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a68      	ldr	r2, [pc, #416]	; (80056fc <HAL_DMA_Start_IT+0x4bc>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d018      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a67      	ldr	r2, [pc, #412]	; (8005700 <HAL_DMA_Start_IT+0x4c0>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d013      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a65      	ldr	r2, [pc, #404]	; (8005704 <HAL_DMA_Start_IT+0x4c4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00e      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a64      	ldr	r2, [pc, #400]	; (8005708 <HAL_DMA_Start_IT+0x4c8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d009      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a62      	ldr	r2, [pc, #392]	; (800570c <HAL_DMA_Start_IT+0x4cc>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d004      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a61      	ldr	r2, [pc, #388]	; (8005710 <HAL_DMA_Start_IT+0x4d0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d101      	bne.n	8005594 <HAL_DMA_Start_IT+0x354>
 8005590:	2301      	movs	r3, #1
 8005592:	e000      	b.n	8005596 <HAL_DMA_Start_IT+0x356>
 8005594:	2300      	movs	r3, #0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d01a      	beq.n	80055d0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d007      	beq.n	80055b8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055b6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d007      	beq.n	80055d0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ce:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a37      	ldr	r2, [pc, #220]	; (80056b4 <HAL_DMA_Start_IT+0x474>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d04a      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a36      	ldr	r2, [pc, #216]	; (80056b8 <HAL_DMA_Start_IT+0x478>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d045      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a34      	ldr	r2, [pc, #208]	; (80056bc <HAL_DMA_Start_IT+0x47c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d040      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a33      	ldr	r2, [pc, #204]	; (80056c0 <HAL_DMA_Start_IT+0x480>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d03b      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a31      	ldr	r2, [pc, #196]	; (80056c4 <HAL_DMA_Start_IT+0x484>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d036      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a30      	ldr	r2, [pc, #192]	; (80056c8 <HAL_DMA_Start_IT+0x488>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d031      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a2e      	ldr	r2, [pc, #184]	; (80056cc <HAL_DMA_Start_IT+0x48c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d02c      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a2d      	ldr	r2, [pc, #180]	; (80056d0 <HAL_DMA_Start_IT+0x490>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d027      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a2b      	ldr	r2, [pc, #172]	; (80056d4 <HAL_DMA_Start_IT+0x494>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d022      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a2a      	ldr	r2, [pc, #168]	; (80056d8 <HAL_DMA_Start_IT+0x498>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d01d      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a28      	ldr	r2, [pc, #160]	; (80056dc <HAL_DMA_Start_IT+0x49c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d018      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a27      	ldr	r2, [pc, #156]	; (80056e0 <HAL_DMA_Start_IT+0x4a0>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d013      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a25      	ldr	r2, [pc, #148]	; (80056e4 <HAL_DMA_Start_IT+0x4a4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00e      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a24      	ldr	r2, [pc, #144]	; (80056e8 <HAL_DMA_Start_IT+0x4a8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d009      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a22      	ldr	r2, [pc, #136]	; (80056ec <HAL_DMA_Start_IT+0x4ac>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d004      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a21      	ldr	r2, [pc, #132]	; (80056f0 <HAL_DMA_Start_IT+0x4b0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d108      	bne.n	8005682 <HAL_DMA_Start_IT+0x442>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0201 	orr.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	e012      	b.n	80056a8 <HAL_DMA_Start_IT+0x468>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0201 	orr.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	e009      	b.n	80056a8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800569a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80056a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40020010 	.word	0x40020010
 80056b8:	40020028 	.word	0x40020028
 80056bc:	40020040 	.word	0x40020040
 80056c0:	40020058 	.word	0x40020058
 80056c4:	40020070 	.word	0x40020070
 80056c8:	40020088 	.word	0x40020088
 80056cc:	400200a0 	.word	0x400200a0
 80056d0:	400200b8 	.word	0x400200b8
 80056d4:	40020410 	.word	0x40020410
 80056d8:	40020428 	.word	0x40020428
 80056dc:	40020440 	.word	0x40020440
 80056e0:	40020458 	.word	0x40020458
 80056e4:	40020470 	.word	0x40020470
 80056e8:	40020488 	.word	0x40020488
 80056ec:	400204a0 	.word	0x400204a0
 80056f0:	400204b8 	.word	0x400204b8
 80056f4:	58025408 	.word	0x58025408
 80056f8:	5802541c 	.word	0x5802541c
 80056fc:	58025430 	.word	0x58025430
 8005700:	58025444 	.word	0x58025444
 8005704:	58025458 	.word	0x58025458
 8005708:	5802546c 	.word	0x5802546c
 800570c:	58025480 	.word	0x58025480
 8005710:	58025494 	.word	0x58025494

08005714 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800571c:	f7ff f91a 	bl	8004954 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e2dc      	b.n	8005ce6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d008      	beq.n	800574a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2280      	movs	r2, #128	; 0x80
 800573c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e2cd      	b.n	8005ce6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a76      	ldr	r2, [pc, #472]	; (8005928 <HAL_DMA_Abort+0x214>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d04a      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a74      	ldr	r2, [pc, #464]	; (800592c <HAL_DMA_Abort+0x218>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d045      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a73      	ldr	r2, [pc, #460]	; (8005930 <HAL_DMA_Abort+0x21c>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d040      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a71      	ldr	r2, [pc, #452]	; (8005934 <HAL_DMA_Abort+0x220>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d03b      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a70      	ldr	r2, [pc, #448]	; (8005938 <HAL_DMA_Abort+0x224>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d036      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a6e      	ldr	r2, [pc, #440]	; (800593c <HAL_DMA_Abort+0x228>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d031      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a6d      	ldr	r2, [pc, #436]	; (8005940 <HAL_DMA_Abort+0x22c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d02c      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a6b      	ldr	r2, [pc, #428]	; (8005944 <HAL_DMA_Abort+0x230>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d027      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a6a      	ldr	r2, [pc, #424]	; (8005948 <HAL_DMA_Abort+0x234>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d022      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a68      	ldr	r2, [pc, #416]	; (800594c <HAL_DMA_Abort+0x238>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d01d      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a67      	ldr	r2, [pc, #412]	; (8005950 <HAL_DMA_Abort+0x23c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d018      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a65      	ldr	r2, [pc, #404]	; (8005954 <HAL_DMA_Abort+0x240>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d013      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a64      	ldr	r2, [pc, #400]	; (8005958 <HAL_DMA_Abort+0x244>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00e      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a62      	ldr	r2, [pc, #392]	; (800595c <HAL_DMA_Abort+0x248>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d009      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a61      	ldr	r2, [pc, #388]	; (8005960 <HAL_DMA_Abort+0x24c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d004      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a5f      	ldr	r2, [pc, #380]	; (8005964 <HAL_DMA_Abort+0x250>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d101      	bne.n	80057ee <HAL_DMA_Abort+0xda>
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <HAL_DMA_Abort+0xdc>
 80057ee:	2300      	movs	r3, #0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d013      	beq.n	800581c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 021e 	bic.w	r2, r2, #30
 8005802:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695a      	ldr	r2, [r3, #20]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005812:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	e00a      	b.n	8005832 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 020e 	bic.w	r2, r2, #14
 800582a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a3c      	ldr	r2, [pc, #240]	; (8005928 <HAL_DMA_Abort+0x214>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d072      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a3a      	ldr	r2, [pc, #232]	; (800592c <HAL_DMA_Abort+0x218>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d06d      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a39      	ldr	r2, [pc, #228]	; (8005930 <HAL_DMA_Abort+0x21c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d068      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a37      	ldr	r2, [pc, #220]	; (8005934 <HAL_DMA_Abort+0x220>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d063      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a36      	ldr	r2, [pc, #216]	; (8005938 <HAL_DMA_Abort+0x224>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d05e      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a34      	ldr	r2, [pc, #208]	; (800593c <HAL_DMA_Abort+0x228>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d059      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a33      	ldr	r2, [pc, #204]	; (8005940 <HAL_DMA_Abort+0x22c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d054      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a31      	ldr	r2, [pc, #196]	; (8005944 <HAL_DMA_Abort+0x230>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d04f      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a30      	ldr	r2, [pc, #192]	; (8005948 <HAL_DMA_Abort+0x234>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d04a      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a2e      	ldr	r2, [pc, #184]	; (800594c <HAL_DMA_Abort+0x238>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d045      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a2d      	ldr	r2, [pc, #180]	; (8005950 <HAL_DMA_Abort+0x23c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d040      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a2b      	ldr	r2, [pc, #172]	; (8005954 <HAL_DMA_Abort+0x240>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d03b      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a2a      	ldr	r2, [pc, #168]	; (8005958 <HAL_DMA_Abort+0x244>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d036      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a28      	ldr	r2, [pc, #160]	; (800595c <HAL_DMA_Abort+0x248>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d031      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a27      	ldr	r2, [pc, #156]	; (8005960 <HAL_DMA_Abort+0x24c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d02c      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a25      	ldr	r2, [pc, #148]	; (8005964 <HAL_DMA_Abort+0x250>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d027      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a24      	ldr	r2, [pc, #144]	; (8005968 <HAL_DMA_Abort+0x254>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d022      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a22      	ldr	r2, [pc, #136]	; (800596c <HAL_DMA_Abort+0x258>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d01d      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a21      	ldr	r2, [pc, #132]	; (8005970 <HAL_DMA_Abort+0x25c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d018      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a1f      	ldr	r2, [pc, #124]	; (8005974 <HAL_DMA_Abort+0x260>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d013      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a1e      	ldr	r2, [pc, #120]	; (8005978 <HAL_DMA_Abort+0x264>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d00e      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a1c      	ldr	r2, [pc, #112]	; (800597c <HAL_DMA_Abort+0x268>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d009      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a1b      	ldr	r2, [pc, #108]	; (8005980 <HAL_DMA_Abort+0x26c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d004      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a19      	ldr	r2, [pc, #100]	; (8005984 <HAL_DMA_Abort+0x270>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d132      	bne.n	8005988 <HAL_DMA_Abort+0x274>
 8005922:	2301      	movs	r3, #1
 8005924:	e031      	b.n	800598a <HAL_DMA_Abort+0x276>
 8005926:	bf00      	nop
 8005928:	40020010 	.word	0x40020010
 800592c:	40020028 	.word	0x40020028
 8005930:	40020040 	.word	0x40020040
 8005934:	40020058 	.word	0x40020058
 8005938:	40020070 	.word	0x40020070
 800593c:	40020088 	.word	0x40020088
 8005940:	400200a0 	.word	0x400200a0
 8005944:	400200b8 	.word	0x400200b8
 8005948:	40020410 	.word	0x40020410
 800594c:	40020428 	.word	0x40020428
 8005950:	40020440 	.word	0x40020440
 8005954:	40020458 	.word	0x40020458
 8005958:	40020470 	.word	0x40020470
 800595c:	40020488 	.word	0x40020488
 8005960:	400204a0 	.word	0x400204a0
 8005964:	400204b8 	.word	0x400204b8
 8005968:	58025408 	.word	0x58025408
 800596c:	5802541c 	.word	0x5802541c
 8005970:	58025430 	.word	0x58025430
 8005974:	58025444 	.word	0x58025444
 8005978:	58025458 	.word	0x58025458
 800597c:	5802546c 	.word	0x5802546c
 8005980:	58025480 	.word	0x58025480
 8005984:	58025494 	.word	0x58025494
 8005988:	2300      	movs	r3, #0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d007      	beq.n	800599e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800599c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a6d      	ldr	r2, [pc, #436]	; (8005b58 <HAL_DMA_Abort+0x444>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d04a      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a6b      	ldr	r2, [pc, #428]	; (8005b5c <HAL_DMA_Abort+0x448>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d045      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a6a      	ldr	r2, [pc, #424]	; (8005b60 <HAL_DMA_Abort+0x44c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d040      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a68      	ldr	r2, [pc, #416]	; (8005b64 <HAL_DMA_Abort+0x450>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d03b      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a67      	ldr	r2, [pc, #412]	; (8005b68 <HAL_DMA_Abort+0x454>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d036      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a65      	ldr	r2, [pc, #404]	; (8005b6c <HAL_DMA_Abort+0x458>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d031      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a64      	ldr	r2, [pc, #400]	; (8005b70 <HAL_DMA_Abort+0x45c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d02c      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a62      	ldr	r2, [pc, #392]	; (8005b74 <HAL_DMA_Abort+0x460>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d027      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a61      	ldr	r2, [pc, #388]	; (8005b78 <HAL_DMA_Abort+0x464>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d022      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a5f      	ldr	r2, [pc, #380]	; (8005b7c <HAL_DMA_Abort+0x468>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d01d      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a5e      	ldr	r2, [pc, #376]	; (8005b80 <HAL_DMA_Abort+0x46c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d018      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a5c      	ldr	r2, [pc, #368]	; (8005b84 <HAL_DMA_Abort+0x470>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d013      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a5b      	ldr	r2, [pc, #364]	; (8005b88 <HAL_DMA_Abort+0x474>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d00e      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a59      	ldr	r2, [pc, #356]	; (8005b8c <HAL_DMA_Abort+0x478>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d009      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a58      	ldr	r2, [pc, #352]	; (8005b90 <HAL_DMA_Abort+0x47c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d004      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a56      	ldr	r2, [pc, #344]	; (8005b94 <HAL_DMA_Abort+0x480>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d108      	bne.n	8005a50 <HAL_DMA_Abort+0x33c>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0201 	bic.w	r2, r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	e007      	b.n	8005a60 <HAL_DMA_Abort+0x34c>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0201 	bic.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005a60:	e013      	b.n	8005a8a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a62:	f7fe ff77 	bl	8004954 <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	2b05      	cmp	r3, #5
 8005a6e:	d90c      	bls.n	8005a8a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2220      	movs	r2, #32
 8005a74:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2203      	movs	r2, #3
 8005a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e12d      	b.n	8005ce6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1e5      	bne.n	8005a62 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a2f      	ldr	r2, [pc, #188]	; (8005b58 <HAL_DMA_Abort+0x444>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d04a      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a2d      	ldr	r2, [pc, #180]	; (8005b5c <HAL_DMA_Abort+0x448>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d045      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a2c      	ldr	r2, [pc, #176]	; (8005b60 <HAL_DMA_Abort+0x44c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d040      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a2a      	ldr	r2, [pc, #168]	; (8005b64 <HAL_DMA_Abort+0x450>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d03b      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a29      	ldr	r2, [pc, #164]	; (8005b68 <HAL_DMA_Abort+0x454>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d036      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a27      	ldr	r2, [pc, #156]	; (8005b6c <HAL_DMA_Abort+0x458>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d031      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a26      	ldr	r2, [pc, #152]	; (8005b70 <HAL_DMA_Abort+0x45c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d02c      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a24      	ldr	r2, [pc, #144]	; (8005b74 <HAL_DMA_Abort+0x460>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d027      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a23      	ldr	r2, [pc, #140]	; (8005b78 <HAL_DMA_Abort+0x464>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d022      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a21      	ldr	r2, [pc, #132]	; (8005b7c <HAL_DMA_Abort+0x468>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d01d      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a20      	ldr	r2, [pc, #128]	; (8005b80 <HAL_DMA_Abort+0x46c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d018      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a1e      	ldr	r2, [pc, #120]	; (8005b84 <HAL_DMA_Abort+0x470>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d013      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a1d      	ldr	r2, [pc, #116]	; (8005b88 <HAL_DMA_Abort+0x474>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00e      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a1b      	ldr	r2, [pc, #108]	; (8005b8c <HAL_DMA_Abort+0x478>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d009      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a1a      	ldr	r2, [pc, #104]	; (8005b90 <HAL_DMA_Abort+0x47c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d004      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a18      	ldr	r2, [pc, #96]	; (8005b94 <HAL_DMA_Abort+0x480>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d101      	bne.n	8005b3a <HAL_DMA_Abort+0x426>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <HAL_DMA_Abort+0x428>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d02b      	beq.n	8005b98 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b44:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b4a:	f003 031f 	and.w	r3, r3, #31
 8005b4e:	223f      	movs	r2, #63	; 0x3f
 8005b50:	409a      	lsls	r2, r3
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	609a      	str	r2, [r3, #8]
 8005b56:	e02a      	b.n	8005bae <HAL_DMA_Abort+0x49a>
 8005b58:	40020010 	.word	0x40020010
 8005b5c:	40020028 	.word	0x40020028
 8005b60:	40020040 	.word	0x40020040
 8005b64:	40020058 	.word	0x40020058
 8005b68:	40020070 	.word	0x40020070
 8005b6c:	40020088 	.word	0x40020088
 8005b70:	400200a0 	.word	0x400200a0
 8005b74:	400200b8 	.word	0x400200b8
 8005b78:	40020410 	.word	0x40020410
 8005b7c:	40020428 	.word	0x40020428
 8005b80:	40020440 	.word	0x40020440
 8005b84:	40020458 	.word	0x40020458
 8005b88:	40020470 	.word	0x40020470
 8005b8c:	40020488 	.word	0x40020488
 8005b90:	400204a0 	.word	0x400204a0
 8005b94:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b9c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba2:	f003 031f 	and.w	r3, r3, #31
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	409a      	lsls	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a4f      	ldr	r2, [pc, #316]	; (8005cf0 <HAL_DMA_Abort+0x5dc>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d072      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a4d      	ldr	r2, [pc, #308]	; (8005cf4 <HAL_DMA_Abort+0x5e0>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d06d      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a4c      	ldr	r2, [pc, #304]	; (8005cf8 <HAL_DMA_Abort+0x5e4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d068      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a4a      	ldr	r2, [pc, #296]	; (8005cfc <HAL_DMA_Abort+0x5e8>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d063      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a49      	ldr	r2, [pc, #292]	; (8005d00 <HAL_DMA_Abort+0x5ec>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d05e      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a47      	ldr	r2, [pc, #284]	; (8005d04 <HAL_DMA_Abort+0x5f0>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d059      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a46      	ldr	r2, [pc, #280]	; (8005d08 <HAL_DMA_Abort+0x5f4>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d054      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a44      	ldr	r2, [pc, #272]	; (8005d0c <HAL_DMA_Abort+0x5f8>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d04f      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a43      	ldr	r2, [pc, #268]	; (8005d10 <HAL_DMA_Abort+0x5fc>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d04a      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a41      	ldr	r2, [pc, #260]	; (8005d14 <HAL_DMA_Abort+0x600>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d045      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a40      	ldr	r2, [pc, #256]	; (8005d18 <HAL_DMA_Abort+0x604>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d040      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a3e      	ldr	r2, [pc, #248]	; (8005d1c <HAL_DMA_Abort+0x608>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d03b      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a3d      	ldr	r2, [pc, #244]	; (8005d20 <HAL_DMA_Abort+0x60c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d036      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a3b      	ldr	r2, [pc, #236]	; (8005d24 <HAL_DMA_Abort+0x610>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d031      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a3a      	ldr	r2, [pc, #232]	; (8005d28 <HAL_DMA_Abort+0x614>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d02c      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a38      	ldr	r2, [pc, #224]	; (8005d2c <HAL_DMA_Abort+0x618>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d027      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a37      	ldr	r2, [pc, #220]	; (8005d30 <HAL_DMA_Abort+0x61c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d022      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a35      	ldr	r2, [pc, #212]	; (8005d34 <HAL_DMA_Abort+0x620>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d01d      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a34      	ldr	r2, [pc, #208]	; (8005d38 <HAL_DMA_Abort+0x624>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d018      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a32      	ldr	r2, [pc, #200]	; (8005d3c <HAL_DMA_Abort+0x628>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d013      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a31      	ldr	r2, [pc, #196]	; (8005d40 <HAL_DMA_Abort+0x62c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00e      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a2f      	ldr	r2, [pc, #188]	; (8005d44 <HAL_DMA_Abort+0x630>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d009      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a2e      	ldr	r2, [pc, #184]	; (8005d48 <HAL_DMA_Abort+0x634>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d004      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a2c      	ldr	r2, [pc, #176]	; (8005d4c <HAL_DMA_Abort+0x638>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d101      	bne.n	8005ca2 <HAL_DMA_Abort+0x58e>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <HAL_DMA_Abort+0x590>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d015      	beq.n	8005cd4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005cb0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00c      	beq.n	8005cd4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cc8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005cd2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	40020010 	.word	0x40020010
 8005cf4:	40020028 	.word	0x40020028
 8005cf8:	40020040 	.word	0x40020040
 8005cfc:	40020058 	.word	0x40020058
 8005d00:	40020070 	.word	0x40020070
 8005d04:	40020088 	.word	0x40020088
 8005d08:	400200a0 	.word	0x400200a0
 8005d0c:	400200b8 	.word	0x400200b8
 8005d10:	40020410 	.word	0x40020410
 8005d14:	40020428 	.word	0x40020428
 8005d18:	40020440 	.word	0x40020440
 8005d1c:	40020458 	.word	0x40020458
 8005d20:	40020470 	.word	0x40020470
 8005d24:	40020488 	.word	0x40020488
 8005d28:	400204a0 	.word	0x400204a0
 8005d2c:	400204b8 	.word	0x400204b8
 8005d30:	58025408 	.word	0x58025408
 8005d34:	5802541c 	.word	0x5802541c
 8005d38:	58025430 	.word	0x58025430
 8005d3c:	58025444 	.word	0x58025444
 8005d40:	58025458 	.word	0x58025458
 8005d44:	5802546c 	.word	0x5802546c
 8005d48:	58025480 	.word	0x58025480
 8005d4c:	58025494 	.word	0x58025494

08005d50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e237      	b.n	80061d2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d004      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2280      	movs	r2, #128	; 0x80
 8005d72:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e22c      	b.n	80061d2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a5c      	ldr	r2, [pc, #368]	; (8005ef0 <HAL_DMA_Abort_IT+0x1a0>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d04a      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a5b      	ldr	r2, [pc, #364]	; (8005ef4 <HAL_DMA_Abort_IT+0x1a4>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d045      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a59      	ldr	r2, [pc, #356]	; (8005ef8 <HAL_DMA_Abort_IT+0x1a8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d040      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a58      	ldr	r2, [pc, #352]	; (8005efc <HAL_DMA_Abort_IT+0x1ac>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d03b      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a56      	ldr	r2, [pc, #344]	; (8005f00 <HAL_DMA_Abort_IT+0x1b0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d036      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a55      	ldr	r2, [pc, #340]	; (8005f04 <HAL_DMA_Abort_IT+0x1b4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d031      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a53      	ldr	r2, [pc, #332]	; (8005f08 <HAL_DMA_Abort_IT+0x1b8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d02c      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a52      	ldr	r2, [pc, #328]	; (8005f0c <HAL_DMA_Abort_IT+0x1bc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d027      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a50      	ldr	r2, [pc, #320]	; (8005f10 <HAL_DMA_Abort_IT+0x1c0>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d022      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a4f      	ldr	r2, [pc, #316]	; (8005f14 <HAL_DMA_Abort_IT+0x1c4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d01d      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a4d      	ldr	r2, [pc, #308]	; (8005f18 <HAL_DMA_Abort_IT+0x1c8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d018      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a4c      	ldr	r2, [pc, #304]	; (8005f1c <HAL_DMA_Abort_IT+0x1cc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d013      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a4a      	ldr	r2, [pc, #296]	; (8005f20 <HAL_DMA_Abort_IT+0x1d0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00e      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a49      	ldr	r2, [pc, #292]	; (8005f24 <HAL_DMA_Abort_IT+0x1d4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d009      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a47      	ldr	r2, [pc, #284]	; (8005f28 <HAL_DMA_Abort_IT+0x1d8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d004      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a46      	ldr	r2, [pc, #280]	; (8005f2c <HAL_DMA_Abort_IT+0x1dc>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d101      	bne.n	8005e1c <HAL_DMA_Abort_IT+0xcc>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e000      	b.n	8005e1e <HAL_DMA_Abort_IT+0xce>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 8086 	beq.w	8005f30 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2204      	movs	r2, #4
 8005e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a2f      	ldr	r2, [pc, #188]	; (8005ef0 <HAL_DMA_Abort_IT+0x1a0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d04a      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a2e      	ldr	r2, [pc, #184]	; (8005ef4 <HAL_DMA_Abort_IT+0x1a4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d045      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a2c      	ldr	r2, [pc, #176]	; (8005ef8 <HAL_DMA_Abort_IT+0x1a8>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d040      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a2b      	ldr	r2, [pc, #172]	; (8005efc <HAL_DMA_Abort_IT+0x1ac>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d03b      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a29      	ldr	r2, [pc, #164]	; (8005f00 <HAL_DMA_Abort_IT+0x1b0>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d036      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a28      	ldr	r2, [pc, #160]	; (8005f04 <HAL_DMA_Abort_IT+0x1b4>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d031      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a26      	ldr	r2, [pc, #152]	; (8005f08 <HAL_DMA_Abort_IT+0x1b8>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d02c      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a25      	ldr	r2, [pc, #148]	; (8005f0c <HAL_DMA_Abort_IT+0x1bc>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d027      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a23      	ldr	r2, [pc, #140]	; (8005f10 <HAL_DMA_Abort_IT+0x1c0>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d022      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a22      	ldr	r2, [pc, #136]	; (8005f14 <HAL_DMA_Abort_IT+0x1c4>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d01d      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a20      	ldr	r2, [pc, #128]	; (8005f18 <HAL_DMA_Abort_IT+0x1c8>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d018      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a1f      	ldr	r2, [pc, #124]	; (8005f1c <HAL_DMA_Abort_IT+0x1cc>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d013      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1d      	ldr	r2, [pc, #116]	; (8005f20 <HAL_DMA_Abort_IT+0x1d0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00e      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a1c      	ldr	r2, [pc, #112]	; (8005f24 <HAL_DMA_Abort_IT+0x1d4>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d009      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1a      	ldr	r2, [pc, #104]	; (8005f28 <HAL_DMA_Abort_IT+0x1d8>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d004      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a19      	ldr	r2, [pc, #100]	; (8005f2c <HAL_DMA_Abort_IT+0x1dc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d108      	bne.n	8005ede <HAL_DMA_Abort_IT+0x18e>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0201 	bic.w	r2, r2, #1
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	e178      	b.n	80061d0 <HAL_DMA_Abort_IT+0x480>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0201 	bic.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	e16f      	b.n	80061d0 <HAL_DMA_Abort_IT+0x480>
 8005ef0:	40020010 	.word	0x40020010
 8005ef4:	40020028 	.word	0x40020028
 8005ef8:	40020040 	.word	0x40020040
 8005efc:	40020058 	.word	0x40020058
 8005f00:	40020070 	.word	0x40020070
 8005f04:	40020088 	.word	0x40020088
 8005f08:	400200a0 	.word	0x400200a0
 8005f0c:	400200b8 	.word	0x400200b8
 8005f10:	40020410 	.word	0x40020410
 8005f14:	40020428 	.word	0x40020428
 8005f18:	40020440 	.word	0x40020440
 8005f1c:	40020458 	.word	0x40020458
 8005f20:	40020470 	.word	0x40020470
 8005f24:	40020488 	.word	0x40020488
 8005f28:	400204a0 	.word	0x400204a0
 8005f2c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 020e 	bic.w	r2, r2, #14
 8005f3e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a6c      	ldr	r2, [pc, #432]	; (80060f8 <HAL_DMA_Abort_IT+0x3a8>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d04a      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a6b      	ldr	r2, [pc, #428]	; (80060fc <HAL_DMA_Abort_IT+0x3ac>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d045      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a69      	ldr	r2, [pc, #420]	; (8006100 <HAL_DMA_Abort_IT+0x3b0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d040      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a68      	ldr	r2, [pc, #416]	; (8006104 <HAL_DMA_Abort_IT+0x3b4>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d03b      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a66      	ldr	r2, [pc, #408]	; (8006108 <HAL_DMA_Abort_IT+0x3b8>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d036      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a65      	ldr	r2, [pc, #404]	; (800610c <HAL_DMA_Abort_IT+0x3bc>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d031      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a63      	ldr	r2, [pc, #396]	; (8006110 <HAL_DMA_Abort_IT+0x3c0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d02c      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a62      	ldr	r2, [pc, #392]	; (8006114 <HAL_DMA_Abort_IT+0x3c4>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d027      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a60      	ldr	r2, [pc, #384]	; (8006118 <HAL_DMA_Abort_IT+0x3c8>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d022      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a5f      	ldr	r2, [pc, #380]	; (800611c <HAL_DMA_Abort_IT+0x3cc>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d01d      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a5d      	ldr	r2, [pc, #372]	; (8006120 <HAL_DMA_Abort_IT+0x3d0>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d018      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a5c      	ldr	r2, [pc, #368]	; (8006124 <HAL_DMA_Abort_IT+0x3d4>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d013      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a5a      	ldr	r2, [pc, #360]	; (8006128 <HAL_DMA_Abort_IT+0x3d8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d00e      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a59      	ldr	r2, [pc, #356]	; (800612c <HAL_DMA_Abort_IT+0x3dc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d009      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a57      	ldr	r2, [pc, #348]	; (8006130 <HAL_DMA_Abort_IT+0x3e0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d004      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a56      	ldr	r2, [pc, #344]	; (8006134 <HAL_DMA_Abort_IT+0x3e4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d108      	bne.n	8005ff2 <HAL_DMA_Abort_IT+0x2a2>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0201 	bic.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	e007      	b.n	8006002 <HAL_DMA_Abort_IT+0x2b2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0201 	bic.w	r2, r2, #1
 8006000:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a3c      	ldr	r2, [pc, #240]	; (80060f8 <HAL_DMA_Abort_IT+0x3a8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d072      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a3a      	ldr	r2, [pc, #232]	; (80060fc <HAL_DMA_Abort_IT+0x3ac>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d06d      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a39      	ldr	r2, [pc, #228]	; (8006100 <HAL_DMA_Abort_IT+0x3b0>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d068      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a37      	ldr	r2, [pc, #220]	; (8006104 <HAL_DMA_Abort_IT+0x3b4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d063      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a36      	ldr	r2, [pc, #216]	; (8006108 <HAL_DMA_Abort_IT+0x3b8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d05e      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a34      	ldr	r2, [pc, #208]	; (800610c <HAL_DMA_Abort_IT+0x3bc>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d059      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a33      	ldr	r2, [pc, #204]	; (8006110 <HAL_DMA_Abort_IT+0x3c0>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d054      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a31      	ldr	r2, [pc, #196]	; (8006114 <HAL_DMA_Abort_IT+0x3c4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d04f      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a30      	ldr	r2, [pc, #192]	; (8006118 <HAL_DMA_Abort_IT+0x3c8>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d04a      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a2e      	ldr	r2, [pc, #184]	; (800611c <HAL_DMA_Abort_IT+0x3cc>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d045      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a2d      	ldr	r2, [pc, #180]	; (8006120 <HAL_DMA_Abort_IT+0x3d0>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d040      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a2b      	ldr	r2, [pc, #172]	; (8006124 <HAL_DMA_Abort_IT+0x3d4>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d03b      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a2a      	ldr	r2, [pc, #168]	; (8006128 <HAL_DMA_Abort_IT+0x3d8>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d036      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a28      	ldr	r2, [pc, #160]	; (800612c <HAL_DMA_Abort_IT+0x3dc>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d031      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a27      	ldr	r2, [pc, #156]	; (8006130 <HAL_DMA_Abort_IT+0x3e0>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d02c      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a25      	ldr	r2, [pc, #148]	; (8006134 <HAL_DMA_Abort_IT+0x3e4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d027      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a24      	ldr	r2, [pc, #144]	; (8006138 <HAL_DMA_Abort_IT+0x3e8>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d022      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a22      	ldr	r2, [pc, #136]	; (800613c <HAL_DMA_Abort_IT+0x3ec>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d01d      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a21      	ldr	r2, [pc, #132]	; (8006140 <HAL_DMA_Abort_IT+0x3f0>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d018      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a1f      	ldr	r2, [pc, #124]	; (8006144 <HAL_DMA_Abort_IT+0x3f4>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d013      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a1e      	ldr	r2, [pc, #120]	; (8006148 <HAL_DMA_Abort_IT+0x3f8>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d00e      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a1c      	ldr	r2, [pc, #112]	; (800614c <HAL_DMA_Abort_IT+0x3fc>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d009      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a1b      	ldr	r2, [pc, #108]	; (8006150 <HAL_DMA_Abort_IT+0x400>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d004      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a19      	ldr	r2, [pc, #100]	; (8006154 <HAL_DMA_Abort_IT+0x404>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d132      	bne.n	8006158 <HAL_DMA_Abort_IT+0x408>
 80060f2:	2301      	movs	r3, #1
 80060f4:	e031      	b.n	800615a <HAL_DMA_Abort_IT+0x40a>
 80060f6:	bf00      	nop
 80060f8:	40020010 	.word	0x40020010
 80060fc:	40020028 	.word	0x40020028
 8006100:	40020040 	.word	0x40020040
 8006104:	40020058 	.word	0x40020058
 8006108:	40020070 	.word	0x40020070
 800610c:	40020088 	.word	0x40020088
 8006110:	400200a0 	.word	0x400200a0
 8006114:	400200b8 	.word	0x400200b8
 8006118:	40020410 	.word	0x40020410
 800611c:	40020428 	.word	0x40020428
 8006120:	40020440 	.word	0x40020440
 8006124:	40020458 	.word	0x40020458
 8006128:	40020470 	.word	0x40020470
 800612c:	40020488 	.word	0x40020488
 8006130:	400204a0 	.word	0x400204a0
 8006134:	400204b8 	.word	0x400204b8
 8006138:	58025408 	.word	0x58025408
 800613c:	5802541c 	.word	0x5802541c
 8006140:	58025430 	.word	0x58025430
 8006144:	58025444 	.word	0x58025444
 8006148:	58025458 	.word	0x58025458
 800614c:	5802546c 	.word	0x5802546c
 8006150:	58025480 	.word	0x58025480
 8006154:	58025494 	.word	0x58025494
 8006158:	2300      	movs	r3, #0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d028      	beq.n	80061b0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006168:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800616c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006172:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	2201      	movs	r2, #1
 800617e:	409a      	lsls	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800618c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00c      	beq.n	80061b0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061a4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80061ae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop

080061dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08a      	sub	sp, #40	; 0x28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80061e8:	4b67      	ldr	r3, [pc, #412]	; (8006388 <HAL_DMA_IRQHandler+0x1ac>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a67      	ldr	r2, [pc, #412]	; (800638c <HAL_DMA_IRQHandler+0x1b0>)
 80061ee:	fba2 2303 	umull	r2, r3, r2, r3
 80061f2:	0a9b      	lsrs	r3, r3, #10
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006200:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a5f      	ldr	r2, [pc, #380]	; (8006390 <HAL_DMA_IRQHandler+0x1b4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d04a      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a5d      	ldr	r2, [pc, #372]	; (8006394 <HAL_DMA_IRQHandler+0x1b8>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d045      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a5c      	ldr	r2, [pc, #368]	; (8006398 <HAL_DMA_IRQHandler+0x1bc>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d040      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a5a      	ldr	r2, [pc, #360]	; (800639c <HAL_DMA_IRQHandler+0x1c0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d03b      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a59      	ldr	r2, [pc, #356]	; (80063a0 <HAL_DMA_IRQHandler+0x1c4>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d036      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a57      	ldr	r2, [pc, #348]	; (80063a4 <HAL_DMA_IRQHandler+0x1c8>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d031      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a56      	ldr	r2, [pc, #344]	; (80063a8 <HAL_DMA_IRQHandler+0x1cc>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d02c      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a54      	ldr	r2, [pc, #336]	; (80063ac <HAL_DMA_IRQHandler+0x1d0>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d027      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a53      	ldr	r2, [pc, #332]	; (80063b0 <HAL_DMA_IRQHandler+0x1d4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d022      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a51      	ldr	r2, [pc, #324]	; (80063b4 <HAL_DMA_IRQHandler+0x1d8>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d01d      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a50      	ldr	r2, [pc, #320]	; (80063b8 <HAL_DMA_IRQHandler+0x1dc>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d018      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a4e      	ldr	r2, [pc, #312]	; (80063bc <HAL_DMA_IRQHandler+0x1e0>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d013      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a4d      	ldr	r2, [pc, #308]	; (80063c0 <HAL_DMA_IRQHandler+0x1e4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d00e      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a4b      	ldr	r2, [pc, #300]	; (80063c4 <HAL_DMA_IRQHandler+0x1e8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d009      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a4a      	ldr	r2, [pc, #296]	; (80063c8 <HAL_DMA_IRQHandler+0x1ec>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d004      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a48      	ldr	r2, [pc, #288]	; (80063cc <HAL_DMA_IRQHandler+0x1f0>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d101      	bne.n	80062b2 <HAL_DMA_IRQHandler+0xd6>
 80062ae:	2301      	movs	r3, #1
 80062b0:	e000      	b.n	80062b4 <HAL_DMA_IRQHandler+0xd8>
 80062b2:	2300      	movs	r3, #0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 842b 	beq.w	8006b10 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062be:	f003 031f 	and.w	r3, r3, #31
 80062c2:	2208      	movs	r2, #8
 80062c4:	409a      	lsls	r2, r3
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	4013      	ands	r3, r2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 80a2 	beq.w	8006414 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a2e      	ldr	r2, [pc, #184]	; (8006390 <HAL_DMA_IRQHandler+0x1b4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d04a      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a2d      	ldr	r2, [pc, #180]	; (8006394 <HAL_DMA_IRQHandler+0x1b8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d045      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a2b      	ldr	r2, [pc, #172]	; (8006398 <HAL_DMA_IRQHandler+0x1bc>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d040      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a2a      	ldr	r2, [pc, #168]	; (800639c <HAL_DMA_IRQHandler+0x1c0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d03b      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a28      	ldr	r2, [pc, #160]	; (80063a0 <HAL_DMA_IRQHandler+0x1c4>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d036      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a27      	ldr	r2, [pc, #156]	; (80063a4 <HAL_DMA_IRQHandler+0x1c8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d031      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a25      	ldr	r2, [pc, #148]	; (80063a8 <HAL_DMA_IRQHandler+0x1cc>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d02c      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a24      	ldr	r2, [pc, #144]	; (80063ac <HAL_DMA_IRQHandler+0x1d0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d027      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a22      	ldr	r2, [pc, #136]	; (80063b0 <HAL_DMA_IRQHandler+0x1d4>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d022      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a21      	ldr	r2, [pc, #132]	; (80063b4 <HAL_DMA_IRQHandler+0x1d8>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d01d      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a1f      	ldr	r2, [pc, #124]	; (80063b8 <HAL_DMA_IRQHandler+0x1dc>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d018      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a1e      	ldr	r2, [pc, #120]	; (80063bc <HAL_DMA_IRQHandler+0x1e0>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d013      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1c      	ldr	r2, [pc, #112]	; (80063c0 <HAL_DMA_IRQHandler+0x1e4>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d00e      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1b      	ldr	r2, [pc, #108]	; (80063c4 <HAL_DMA_IRQHandler+0x1e8>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d009      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a19      	ldr	r2, [pc, #100]	; (80063c8 <HAL_DMA_IRQHandler+0x1ec>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d004      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a18      	ldr	r2, [pc, #96]	; (80063cc <HAL_DMA_IRQHandler+0x1f0>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d12f      	bne.n	80063d0 <HAL_DMA_IRQHandler+0x1f4>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0304 	and.w	r3, r3, #4
 800637a:	2b00      	cmp	r3, #0
 800637c:	bf14      	ite	ne
 800637e:	2301      	movne	r3, #1
 8006380:	2300      	moveq	r3, #0
 8006382:	b2db      	uxtb	r3, r3
 8006384:	e02e      	b.n	80063e4 <HAL_DMA_IRQHandler+0x208>
 8006386:	bf00      	nop
 8006388:	24000004 	.word	0x24000004
 800638c:	1b4e81b5 	.word	0x1b4e81b5
 8006390:	40020010 	.word	0x40020010
 8006394:	40020028 	.word	0x40020028
 8006398:	40020040 	.word	0x40020040
 800639c:	40020058 	.word	0x40020058
 80063a0:	40020070 	.word	0x40020070
 80063a4:	40020088 	.word	0x40020088
 80063a8:	400200a0 	.word	0x400200a0
 80063ac:	400200b8 	.word	0x400200b8
 80063b0:	40020410 	.word	0x40020410
 80063b4:	40020428 	.word	0x40020428
 80063b8:	40020440 	.word	0x40020440
 80063bc:	40020458 	.word	0x40020458
 80063c0:	40020470 	.word	0x40020470
 80063c4:	40020488 	.word	0x40020488
 80063c8:	400204a0 	.word	0x400204a0
 80063cc:	400204b8 	.word	0x400204b8
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0308 	and.w	r3, r3, #8
 80063da:	2b00      	cmp	r3, #0
 80063dc:	bf14      	ite	ne
 80063de:	2301      	movne	r3, #1
 80063e0:	2300      	moveq	r3, #0
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d015      	beq.n	8006414 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0204 	bic.w	r2, r2, #4
 80063f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063fc:	f003 031f 	and.w	r3, r3, #31
 8006400:	2208      	movs	r2, #8
 8006402:	409a      	lsls	r2, r3
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640c:	f043 0201 	orr.w	r2, r3, #1
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006418:	f003 031f 	and.w	r3, r3, #31
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	fa22 f303 	lsr.w	r3, r2, r3
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d06e      	beq.n	8006508 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a69      	ldr	r2, [pc, #420]	; (80065d4 <HAL_DMA_IRQHandler+0x3f8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d04a      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a67      	ldr	r2, [pc, #412]	; (80065d8 <HAL_DMA_IRQHandler+0x3fc>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d045      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a66      	ldr	r2, [pc, #408]	; (80065dc <HAL_DMA_IRQHandler+0x400>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d040      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a64      	ldr	r2, [pc, #400]	; (80065e0 <HAL_DMA_IRQHandler+0x404>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d03b      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a63      	ldr	r2, [pc, #396]	; (80065e4 <HAL_DMA_IRQHandler+0x408>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d036      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a61      	ldr	r2, [pc, #388]	; (80065e8 <HAL_DMA_IRQHandler+0x40c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d031      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a60      	ldr	r2, [pc, #384]	; (80065ec <HAL_DMA_IRQHandler+0x410>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d02c      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a5e      	ldr	r2, [pc, #376]	; (80065f0 <HAL_DMA_IRQHandler+0x414>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d027      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a5d      	ldr	r2, [pc, #372]	; (80065f4 <HAL_DMA_IRQHandler+0x418>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d022      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a5b      	ldr	r2, [pc, #364]	; (80065f8 <HAL_DMA_IRQHandler+0x41c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d01d      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a5a      	ldr	r2, [pc, #360]	; (80065fc <HAL_DMA_IRQHandler+0x420>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d018      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a58      	ldr	r2, [pc, #352]	; (8006600 <HAL_DMA_IRQHandler+0x424>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d013      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a57      	ldr	r2, [pc, #348]	; (8006604 <HAL_DMA_IRQHandler+0x428>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d00e      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a55      	ldr	r2, [pc, #340]	; (8006608 <HAL_DMA_IRQHandler+0x42c>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d009      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a54      	ldr	r2, [pc, #336]	; (800660c <HAL_DMA_IRQHandler+0x430>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d004      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a52      	ldr	r2, [pc, #328]	; (8006610 <HAL_DMA_IRQHandler+0x434>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d10a      	bne.n	80064e0 <HAL_DMA_IRQHandler+0x304>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	bf14      	ite	ne
 80064d8:	2301      	movne	r3, #1
 80064da:	2300      	moveq	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	e003      	b.n	80064e8 <HAL_DMA_IRQHandler+0x30c>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2300      	movs	r3, #0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00d      	beq.n	8006508 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f0:	f003 031f 	and.w	r3, r3, #31
 80064f4:	2201      	movs	r2, #1
 80064f6:	409a      	lsls	r2, r3
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006500:	f043 0202 	orr.w	r2, r3, #2
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650c:	f003 031f 	and.w	r3, r3, #31
 8006510:	2204      	movs	r2, #4
 8006512:	409a      	lsls	r2, r3
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	4013      	ands	r3, r2
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 808f 	beq.w	800663c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a2c      	ldr	r2, [pc, #176]	; (80065d4 <HAL_DMA_IRQHandler+0x3f8>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d04a      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a2a      	ldr	r2, [pc, #168]	; (80065d8 <HAL_DMA_IRQHandler+0x3fc>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d045      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a29      	ldr	r2, [pc, #164]	; (80065dc <HAL_DMA_IRQHandler+0x400>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d040      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a27      	ldr	r2, [pc, #156]	; (80065e0 <HAL_DMA_IRQHandler+0x404>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d03b      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a26      	ldr	r2, [pc, #152]	; (80065e4 <HAL_DMA_IRQHandler+0x408>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d036      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a24      	ldr	r2, [pc, #144]	; (80065e8 <HAL_DMA_IRQHandler+0x40c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d031      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a23      	ldr	r2, [pc, #140]	; (80065ec <HAL_DMA_IRQHandler+0x410>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d02c      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a21      	ldr	r2, [pc, #132]	; (80065f0 <HAL_DMA_IRQHandler+0x414>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d027      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a20      	ldr	r2, [pc, #128]	; (80065f4 <HAL_DMA_IRQHandler+0x418>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d022      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a1e      	ldr	r2, [pc, #120]	; (80065f8 <HAL_DMA_IRQHandler+0x41c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d01d      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a1d      	ldr	r2, [pc, #116]	; (80065fc <HAL_DMA_IRQHandler+0x420>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d018      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a1b      	ldr	r2, [pc, #108]	; (8006600 <HAL_DMA_IRQHandler+0x424>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d013      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a1a      	ldr	r2, [pc, #104]	; (8006604 <HAL_DMA_IRQHandler+0x428>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d00e      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a18      	ldr	r2, [pc, #96]	; (8006608 <HAL_DMA_IRQHandler+0x42c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d009      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a17      	ldr	r2, [pc, #92]	; (800660c <HAL_DMA_IRQHandler+0x430>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d004      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a15      	ldr	r2, [pc, #84]	; (8006610 <HAL_DMA_IRQHandler+0x434>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d12a      	bne.n	8006614 <HAL_DMA_IRQHandler+0x438>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	bf14      	ite	ne
 80065cc:	2301      	movne	r3, #1
 80065ce:	2300      	moveq	r3, #0
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	e023      	b.n	800661c <HAL_DMA_IRQHandler+0x440>
 80065d4:	40020010 	.word	0x40020010
 80065d8:	40020028 	.word	0x40020028
 80065dc:	40020040 	.word	0x40020040
 80065e0:	40020058 	.word	0x40020058
 80065e4:	40020070 	.word	0x40020070
 80065e8:	40020088 	.word	0x40020088
 80065ec:	400200a0 	.word	0x400200a0
 80065f0:	400200b8 	.word	0x400200b8
 80065f4:	40020410 	.word	0x40020410
 80065f8:	40020428 	.word	0x40020428
 80065fc:	40020440 	.word	0x40020440
 8006600:	40020458 	.word	0x40020458
 8006604:	40020470 	.word	0x40020470
 8006608:	40020488 	.word	0x40020488
 800660c:	400204a0 	.word	0x400204a0
 8006610:	400204b8 	.word	0x400204b8
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2300      	movs	r3, #0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00d      	beq.n	800663c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006624:	f003 031f 	and.w	r3, r3, #31
 8006628:	2204      	movs	r2, #4
 800662a:	409a      	lsls	r2, r3
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006634:	f043 0204 	orr.w	r2, r3, #4
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006640:	f003 031f 	and.w	r3, r3, #31
 8006644:	2210      	movs	r2, #16
 8006646:	409a      	lsls	r2, r3
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	4013      	ands	r3, r2
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 80a6 	beq.w	800679e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a85      	ldr	r2, [pc, #532]	; (800686c <HAL_DMA_IRQHandler+0x690>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d04a      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a83      	ldr	r2, [pc, #524]	; (8006870 <HAL_DMA_IRQHandler+0x694>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d045      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a82      	ldr	r2, [pc, #520]	; (8006874 <HAL_DMA_IRQHandler+0x698>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d040      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a80      	ldr	r2, [pc, #512]	; (8006878 <HAL_DMA_IRQHandler+0x69c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d03b      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a7f      	ldr	r2, [pc, #508]	; (800687c <HAL_DMA_IRQHandler+0x6a0>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d036      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a7d      	ldr	r2, [pc, #500]	; (8006880 <HAL_DMA_IRQHandler+0x6a4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d031      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a7c      	ldr	r2, [pc, #496]	; (8006884 <HAL_DMA_IRQHandler+0x6a8>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d02c      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a7a      	ldr	r2, [pc, #488]	; (8006888 <HAL_DMA_IRQHandler+0x6ac>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d027      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a79      	ldr	r2, [pc, #484]	; (800688c <HAL_DMA_IRQHandler+0x6b0>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d022      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a77      	ldr	r2, [pc, #476]	; (8006890 <HAL_DMA_IRQHandler+0x6b4>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d01d      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a76      	ldr	r2, [pc, #472]	; (8006894 <HAL_DMA_IRQHandler+0x6b8>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d018      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a74      	ldr	r2, [pc, #464]	; (8006898 <HAL_DMA_IRQHandler+0x6bc>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d013      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a73      	ldr	r2, [pc, #460]	; (800689c <HAL_DMA_IRQHandler+0x6c0>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d00e      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a71      	ldr	r2, [pc, #452]	; (80068a0 <HAL_DMA_IRQHandler+0x6c4>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d009      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a70      	ldr	r2, [pc, #448]	; (80068a4 <HAL_DMA_IRQHandler+0x6c8>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d004      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a6e      	ldr	r2, [pc, #440]	; (80068a8 <HAL_DMA_IRQHandler+0x6cc>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d10a      	bne.n	8006708 <HAL_DMA_IRQHandler+0x52c>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0308 	and.w	r3, r3, #8
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	bf14      	ite	ne
 8006700:	2301      	movne	r3, #1
 8006702:	2300      	moveq	r3, #0
 8006704:	b2db      	uxtb	r3, r3
 8006706:	e009      	b.n	800671c <HAL_DMA_IRQHandler+0x540>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0304 	and.w	r3, r3, #4
 8006712:	2b00      	cmp	r3, #0
 8006714:	bf14      	ite	ne
 8006716:	2301      	movne	r3, #1
 8006718:	2300      	moveq	r3, #0
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	d03e      	beq.n	800679e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006724:	f003 031f 	and.w	r3, r3, #31
 8006728:	2210      	movs	r2, #16
 800672a:	409a      	lsls	r2, r3
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d018      	beq.n	8006770 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d108      	bne.n	800675e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006750:	2b00      	cmp	r3, #0
 8006752:	d024      	beq.n	800679e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	4798      	blx	r3
 800675c:	e01f      	b.n	800679e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006762:	2b00      	cmp	r3, #0
 8006764:	d01b      	beq.n	800679e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	4798      	blx	r3
 800676e:	e016      	b.n	800679e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800677a:	2b00      	cmp	r3, #0
 800677c:	d107      	bne.n	800678e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 0208 	bic.w	r2, r2, #8
 800678c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a2:	f003 031f 	and.w	r3, r3, #31
 80067a6:	2220      	movs	r2, #32
 80067a8:	409a      	lsls	r2, r3
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	4013      	ands	r3, r2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 8110 	beq.w	80069d4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a2c      	ldr	r2, [pc, #176]	; (800686c <HAL_DMA_IRQHandler+0x690>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d04a      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a2b      	ldr	r2, [pc, #172]	; (8006870 <HAL_DMA_IRQHandler+0x694>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d045      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a29      	ldr	r2, [pc, #164]	; (8006874 <HAL_DMA_IRQHandler+0x698>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d040      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a28      	ldr	r2, [pc, #160]	; (8006878 <HAL_DMA_IRQHandler+0x69c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d03b      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a26      	ldr	r2, [pc, #152]	; (800687c <HAL_DMA_IRQHandler+0x6a0>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d036      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a25      	ldr	r2, [pc, #148]	; (8006880 <HAL_DMA_IRQHandler+0x6a4>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d031      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a23      	ldr	r2, [pc, #140]	; (8006884 <HAL_DMA_IRQHandler+0x6a8>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d02c      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a22      	ldr	r2, [pc, #136]	; (8006888 <HAL_DMA_IRQHandler+0x6ac>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d027      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a20      	ldr	r2, [pc, #128]	; (800688c <HAL_DMA_IRQHandler+0x6b0>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d022      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a1f      	ldr	r2, [pc, #124]	; (8006890 <HAL_DMA_IRQHandler+0x6b4>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d01d      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a1d      	ldr	r2, [pc, #116]	; (8006894 <HAL_DMA_IRQHandler+0x6b8>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d018      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a1c      	ldr	r2, [pc, #112]	; (8006898 <HAL_DMA_IRQHandler+0x6bc>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d013      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a1a      	ldr	r2, [pc, #104]	; (800689c <HAL_DMA_IRQHandler+0x6c0>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d00e      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a19      	ldr	r2, [pc, #100]	; (80068a0 <HAL_DMA_IRQHandler+0x6c4>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d009      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a17      	ldr	r2, [pc, #92]	; (80068a4 <HAL_DMA_IRQHandler+0x6c8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d004      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a16      	ldr	r2, [pc, #88]	; (80068a8 <HAL_DMA_IRQHandler+0x6cc>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d12b      	bne.n	80068ac <HAL_DMA_IRQHandler+0x6d0>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0310 	and.w	r3, r3, #16
 800685e:	2b00      	cmp	r3, #0
 8006860:	bf14      	ite	ne
 8006862:	2301      	movne	r3, #1
 8006864:	2300      	moveq	r3, #0
 8006866:	b2db      	uxtb	r3, r3
 8006868:	e02a      	b.n	80068c0 <HAL_DMA_IRQHandler+0x6e4>
 800686a:	bf00      	nop
 800686c:	40020010 	.word	0x40020010
 8006870:	40020028 	.word	0x40020028
 8006874:	40020040 	.word	0x40020040
 8006878:	40020058 	.word	0x40020058
 800687c:	40020070 	.word	0x40020070
 8006880:	40020088 	.word	0x40020088
 8006884:	400200a0 	.word	0x400200a0
 8006888:	400200b8 	.word	0x400200b8
 800688c:	40020410 	.word	0x40020410
 8006890:	40020428 	.word	0x40020428
 8006894:	40020440 	.word	0x40020440
 8006898:	40020458 	.word	0x40020458
 800689c:	40020470 	.word	0x40020470
 80068a0:	40020488 	.word	0x40020488
 80068a4:	400204a0 	.word	0x400204a0
 80068a8:	400204b8 	.word	0x400204b8
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	bf14      	ite	ne
 80068ba:	2301      	movne	r3, #1
 80068bc:	2300      	moveq	r3, #0
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 8087 	beq.w	80069d4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ca:	f003 031f 	and.w	r3, r3, #31
 80068ce:	2220      	movs	r2, #32
 80068d0:	409a      	lsls	r2, r3
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d139      	bne.n	8006956 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 0216 	bic.w	r2, r2, #22
 80068f0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	695a      	ldr	r2, [r3, #20]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006900:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	2b00      	cmp	r3, #0
 8006908:	d103      	bne.n	8006912 <HAL_DMA_IRQHandler+0x736>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800690e:	2b00      	cmp	r3, #0
 8006910:	d007      	beq.n	8006922 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 0208 	bic.w	r2, r2, #8
 8006920:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006926:	f003 031f 	and.w	r3, r3, #31
 800692a:	223f      	movs	r2, #63	; 0x3f
 800692c:	409a      	lsls	r2, r3
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 834a 	beq.w	8006fe0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	4798      	blx	r3
          }
          return;
 8006954:	e344      	b.n	8006fe0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d018      	beq.n	8006996 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d108      	bne.n	8006984 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006976:	2b00      	cmp	r3, #0
 8006978:	d02c      	beq.n	80069d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	4798      	blx	r3
 8006982:	e027      	b.n	80069d4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006988:	2b00      	cmp	r3, #0
 800698a:	d023      	beq.n	80069d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	4798      	blx	r3
 8006994:	e01e      	b.n	80069d4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10f      	bne.n	80069c4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 0210 	bic.w	r2, r2, #16
 80069b2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 8306 	beq.w	8006fea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f000 8088 	beq.w	8006afc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2204      	movs	r2, #4
 80069f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a7a      	ldr	r2, [pc, #488]	; (8006be4 <HAL_DMA_IRQHandler+0xa08>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d04a      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a79      	ldr	r2, [pc, #484]	; (8006be8 <HAL_DMA_IRQHandler+0xa0c>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d045      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a77      	ldr	r2, [pc, #476]	; (8006bec <HAL_DMA_IRQHandler+0xa10>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d040      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a76      	ldr	r2, [pc, #472]	; (8006bf0 <HAL_DMA_IRQHandler+0xa14>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d03b      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a74      	ldr	r2, [pc, #464]	; (8006bf4 <HAL_DMA_IRQHandler+0xa18>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d036      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a73      	ldr	r2, [pc, #460]	; (8006bf8 <HAL_DMA_IRQHandler+0xa1c>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d031      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a71      	ldr	r2, [pc, #452]	; (8006bfc <HAL_DMA_IRQHandler+0xa20>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d02c      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a70      	ldr	r2, [pc, #448]	; (8006c00 <HAL_DMA_IRQHandler+0xa24>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d027      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a6e      	ldr	r2, [pc, #440]	; (8006c04 <HAL_DMA_IRQHandler+0xa28>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d022      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a6d      	ldr	r2, [pc, #436]	; (8006c08 <HAL_DMA_IRQHandler+0xa2c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d01d      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a6b      	ldr	r2, [pc, #428]	; (8006c0c <HAL_DMA_IRQHandler+0xa30>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d018      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a6a      	ldr	r2, [pc, #424]	; (8006c10 <HAL_DMA_IRQHandler+0xa34>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d013      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a68      	ldr	r2, [pc, #416]	; (8006c14 <HAL_DMA_IRQHandler+0xa38>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d00e      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a67      	ldr	r2, [pc, #412]	; (8006c18 <HAL_DMA_IRQHandler+0xa3c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d009      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a65      	ldr	r2, [pc, #404]	; (8006c1c <HAL_DMA_IRQHandler+0xa40>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d004      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a64      	ldr	r2, [pc, #400]	; (8006c20 <HAL_DMA_IRQHandler+0xa44>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d108      	bne.n	8006aa6 <HAL_DMA_IRQHandler+0x8ca>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0201 	bic.w	r2, r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	e007      	b.n	8006ab6 <HAL_DMA_IRQHandler+0x8da>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0201 	bic.w	r2, r2, #1
 8006ab4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d307      	bcc.n	8006ad2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1f2      	bne.n	8006ab6 <HAL_DMA_IRQHandler+0x8da>
 8006ad0:	e000      	b.n	8006ad4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006ad2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d004      	beq.n	8006aec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2203      	movs	r2, #3
 8006ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006aea:	e003      	b.n	8006af4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 8272 	beq.w	8006fea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	4798      	blx	r3
 8006b0e:	e26c      	b.n	8006fea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a43      	ldr	r2, [pc, #268]	; (8006c24 <HAL_DMA_IRQHandler+0xa48>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d022      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x984>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a42      	ldr	r2, [pc, #264]	; (8006c28 <HAL_DMA_IRQHandler+0xa4c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d01d      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x984>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a40      	ldr	r2, [pc, #256]	; (8006c2c <HAL_DMA_IRQHandler+0xa50>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d018      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x984>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a3f      	ldr	r2, [pc, #252]	; (8006c30 <HAL_DMA_IRQHandler+0xa54>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d013      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x984>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a3d      	ldr	r2, [pc, #244]	; (8006c34 <HAL_DMA_IRQHandler+0xa58>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d00e      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x984>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a3c      	ldr	r2, [pc, #240]	; (8006c38 <HAL_DMA_IRQHandler+0xa5c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d009      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x984>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a3a      	ldr	r2, [pc, #232]	; (8006c3c <HAL_DMA_IRQHandler+0xa60>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d004      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x984>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a39      	ldr	r2, [pc, #228]	; (8006c40 <HAL_DMA_IRQHandler+0xa64>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d101      	bne.n	8006b64 <HAL_DMA_IRQHandler+0x988>
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <HAL_DMA_IRQHandler+0x98a>
 8006b64:	2300      	movs	r3, #0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 823f 	beq.w	8006fea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b78:	f003 031f 	and.w	r3, r3, #31
 8006b7c:	2204      	movs	r2, #4
 8006b7e:	409a      	lsls	r2, r3
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	4013      	ands	r3, r2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 80cd 	beq.w	8006d24 <HAL_DMA_IRQHandler+0xb48>
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 80c7 	beq.w	8006d24 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b9a:	f003 031f 	and.w	r3, r3, #31
 8006b9e:	2204      	movs	r2, #4
 8006ba0:	409a      	lsls	r2, r3
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d049      	beq.n	8006c44 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d109      	bne.n	8006bce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 8210 	beq.w	8006fe4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bcc:	e20a      	b.n	8006fe4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 8206 	beq.w	8006fe4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006be0:	e200      	b.n	8006fe4 <HAL_DMA_IRQHandler+0xe08>
 8006be2:	bf00      	nop
 8006be4:	40020010 	.word	0x40020010
 8006be8:	40020028 	.word	0x40020028
 8006bec:	40020040 	.word	0x40020040
 8006bf0:	40020058 	.word	0x40020058
 8006bf4:	40020070 	.word	0x40020070
 8006bf8:	40020088 	.word	0x40020088
 8006bfc:	400200a0 	.word	0x400200a0
 8006c00:	400200b8 	.word	0x400200b8
 8006c04:	40020410 	.word	0x40020410
 8006c08:	40020428 	.word	0x40020428
 8006c0c:	40020440 	.word	0x40020440
 8006c10:	40020458 	.word	0x40020458
 8006c14:	40020470 	.word	0x40020470
 8006c18:	40020488 	.word	0x40020488
 8006c1c:	400204a0 	.word	0x400204a0
 8006c20:	400204b8 	.word	0x400204b8
 8006c24:	58025408 	.word	0x58025408
 8006c28:	5802541c 	.word	0x5802541c
 8006c2c:	58025430 	.word	0x58025430
 8006c30:	58025444 	.word	0x58025444
 8006c34:	58025458 	.word	0x58025458
 8006c38:	5802546c 	.word	0x5802546c
 8006c3c:	58025480 	.word	0x58025480
 8006c40:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d160      	bne.n	8006d10 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a7f      	ldr	r2, [pc, #508]	; (8006e50 <HAL_DMA_IRQHandler+0xc74>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d04a      	beq.n	8006cee <HAL_DMA_IRQHandler+0xb12>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a7d      	ldr	r2, [pc, #500]	; (8006e54 <HAL_DMA_IRQHandler+0xc78>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d045      	beq.n	8006cee <HAL_DMA_IRQHandler+0xb12>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a7c      	ldr	r2, [pc, #496]	; (8006e58 <HAL_DMA_IRQHandler+0xc7c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d040      	beq.n	8006cee <HAL_DMA_IRQHandler+0xb12>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a7a      	ldr	r2, [pc, #488]	; (8006e5c <HAL_DMA_IRQHandler+0xc80>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d03b      	beq.n	8006cee <HAL_DMA_IRQHandler+0xb12>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a79      	ldr	r2, [pc, #484]	; (8006e60 <HAL_DMA_IRQHandler+0xc84>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d036      	beq.n	8006cee <HAL_DMA_IRQHandler+0xb12>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a77      	ldr	r2, [pc, #476]	; (8006e64 <HAL_DMA_IRQHandler+0xc88>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d031      	beq.n	8006cee <HAL_DMA_IRQHandler+0xb12>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a76      	ldr	r2, [pc, #472]	; (8006e68 <HAL_DMA_IRQHandler+0xc8c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d02c      	beq.n	8006cee <HAL_DMA_IRQHandler+0xb12>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a74      	ldr	r2, [pc, #464]	; (8006e6c <HAL_DMA_IRQHandler+0xc90>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d027      	beq.n	8006cee <HAL_DMA_IRQHandler+0xb12>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a73      	ldr	r2, [pc, #460]	; (8006e70 <HAL_DMA_IRQHandler+0xc94>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d022      	beq.n	8006cee <HAL_DMA_IRQHandler+0xb12>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a71      	ldr	r2, [pc, #452]	; (8006e74 <HAL_DMA_IRQHandler+0xc98>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d01d      	beq.n	8006cee <HAL_DMA_IRQHandler+0xb12>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a70      	ldr	r2, [pc, #448]	; (8006e78 <HAL_DMA_IRQHandler+0xc9c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d018      	beq.n	8006cee <HAL_DMA_IRQHandler+0xb12>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a6e      	ldr	r2, [pc, #440]	; (8006e7c <HAL_DMA_IRQHandler+0xca0>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d013      	beq.n	8006cee <HAL_DMA_IRQHandler+0xb12>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a6d      	ldr	r2, [pc, #436]	; (8006e80 <HAL_DMA_IRQHandler+0xca4>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d00e      	beq.n	8006cee <HAL_DMA_IRQHandler+0xb12>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a6b      	ldr	r2, [pc, #428]	; (8006e84 <HAL_DMA_IRQHandler+0xca8>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d009      	beq.n	8006cee <HAL_DMA_IRQHandler+0xb12>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a6a      	ldr	r2, [pc, #424]	; (8006e88 <HAL_DMA_IRQHandler+0xcac>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d004      	beq.n	8006cee <HAL_DMA_IRQHandler+0xb12>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a68      	ldr	r2, [pc, #416]	; (8006e8c <HAL_DMA_IRQHandler+0xcb0>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d108      	bne.n	8006d00 <HAL_DMA_IRQHandler+0xb24>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0208 	bic.w	r2, r2, #8
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	e007      	b.n	8006d10 <HAL_DMA_IRQHandler+0xb34>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 0204 	bic.w	r2, r2, #4
 8006d0e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 8165 	beq.w	8006fe4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d22:	e15f      	b.n	8006fe4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d28:	f003 031f 	and.w	r3, r3, #31
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	409a      	lsls	r2, r3
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	4013      	ands	r3, r2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 80c5 	beq.w	8006ec4 <HAL_DMA_IRQHandler+0xce8>
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 80bf 	beq.w	8006ec4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d4a:	f003 031f 	and.w	r3, r3, #31
 8006d4e:	2202      	movs	r2, #2
 8006d50:	409a      	lsls	r2, r3
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d018      	beq.n	8006d92 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d109      	bne.n	8006d7e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 813a 	beq.w	8006fe8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d7c:	e134      	b.n	8006fe8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 8130 	beq.w	8006fe8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d90:	e12a      	b.n	8006fe8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f003 0320 	and.w	r3, r3, #32
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f040 8089 	bne.w	8006eb0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a2b      	ldr	r2, [pc, #172]	; (8006e50 <HAL_DMA_IRQHandler+0xc74>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d04a      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xc62>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a29      	ldr	r2, [pc, #164]	; (8006e54 <HAL_DMA_IRQHandler+0xc78>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d045      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xc62>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a28      	ldr	r2, [pc, #160]	; (8006e58 <HAL_DMA_IRQHandler+0xc7c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d040      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xc62>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a26      	ldr	r2, [pc, #152]	; (8006e5c <HAL_DMA_IRQHandler+0xc80>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d03b      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xc62>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a25      	ldr	r2, [pc, #148]	; (8006e60 <HAL_DMA_IRQHandler+0xc84>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d036      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xc62>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a23      	ldr	r2, [pc, #140]	; (8006e64 <HAL_DMA_IRQHandler+0xc88>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d031      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xc62>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a22      	ldr	r2, [pc, #136]	; (8006e68 <HAL_DMA_IRQHandler+0xc8c>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d02c      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xc62>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a20      	ldr	r2, [pc, #128]	; (8006e6c <HAL_DMA_IRQHandler+0xc90>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d027      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xc62>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a1f      	ldr	r2, [pc, #124]	; (8006e70 <HAL_DMA_IRQHandler+0xc94>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d022      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xc62>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a1d      	ldr	r2, [pc, #116]	; (8006e74 <HAL_DMA_IRQHandler+0xc98>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d01d      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xc62>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a1c      	ldr	r2, [pc, #112]	; (8006e78 <HAL_DMA_IRQHandler+0xc9c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d018      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xc62>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a1a      	ldr	r2, [pc, #104]	; (8006e7c <HAL_DMA_IRQHandler+0xca0>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d013      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xc62>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a19      	ldr	r2, [pc, #100]	; (8006e80 <HAL_DMA_IRQHandler+0xca4>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d00e      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xc62>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a17      	ldr	r2, [pc, #92]	; (8006e84 <HAL_DMA_IRQHandler+0xca8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d009      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xc62>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a16      	ldr	r2, [pc, #88]	; (8006e88 <HAL_DMA_IRQHandler+0xcac>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d004      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xc62>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a14      	ldr	r2, [pc, #80]	; (8006e8c <HAL_DMA_IRQHandler+0xcb0>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d128      	bne.n	8006e90 <HAL_DMA_IRQHandler+0xcb4>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f022 0214 	bic.w	r2, r2, #20
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	e027      	b.n	8006ea0 <HAL_DMA_IRQHandler+0xcc4>
 8006e50:	40020010 	.word	0x40020010
 8006e54:	40020028 	.word	0x40020028
 8006e58:	40020040 	.word	0x40020040
 8006e5c:	40020058 	.word	0x40020058
 8006e60:	40020070 	.word	0x40020070
 8006e64:	40020088 	.word	0x40020088
 8006e68:	400200a0 	.word	0x400200a0
 8006e6c:	400200b8 	.word	0x400200b8
 8006e70:	40020410 	.word	0x40020410
 8006e74:	40020428 	.word	0x40020428
 8006e78:	40020440 	.word	0x40020440
 8006e7c:	40020458 	.word	0x40020458
 8006e80:	40020470 	.word	0x40020470
 8006e84:	40020488 	.word	0x40020488
 8006e88:	400204a0 	.word	0x400204a0
 8006e8c:	400204b8 	.word	0x400204b8
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 020a 	bic.w	r2, r2, #10
 8006e9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 8097 	beq.w	8006fe8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ec2:	e091      	b.n	8006fe8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec8:	f003 031f 	and.w	r3, r3, #31
 8006ecc:	2208      	movs	r2, #8
 8006ece:	409a      	lsls	r2, r3
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 8088 	beq.w	8006fea <HAL_DMA_IRQHandler+0xe0e>
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	f003 0308 	and.w	r3, r3, #8
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 8082 	beq.w	8006fea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a41      	ldr	r2, [pc, #260]	; (8006ff0 <HAL_DMA_IRQHandler+0xe14>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d04a      	beq.n	8006f86 <HAL_DMA_IRQHandler+0xdaa>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a3f      	ldr	r2, [pc, #252]	; (8006ff4 <HAL_DMA_IRQHandler+0xe18>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d045      	beq.n	8006f86 <HAL_DMA_IRQHandler+0xdaa>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a3e      	ldr	r2, [pc, #248]	; (8006ff8 <HAL_DMA_IRQHandler+0xe1c>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d040      	beq.n	8006f86 <HAL_DMA_IRQHandler+0xdaa>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a3c      	ldr	r2, [pc, #240]	; (8006ffc <HAL_DMA_IRQHandler+0xe20>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d03b      	beq.n	8006f86 <HAL_DMA_IRQHandler+0xdaa>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a3b      	ldr	r2, [pc, #236]	; (8007000 <HAL_DMA_IRQHandler+0xe24>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d036      	beq.n	8006f86 <HAL_DMA_IRQHandler+0xdaa>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a39      	ldr	r2, [pc, #228]	; (8007004 <HAL_DMA_IRQHandler+0xe28>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d031      	beq.n	8006f86 <HAL_DMA_IRQHandler+0xdaa>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a38      	ldr	r2, [pc, #224]	; (8007008 <HAL_DMA_IRQHandler+0xe2c>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d02c      	beq.n	8006f86 <HAL_DMA_IRQHandler+0xdaa>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a36      	ldr	r2, [pc, #216]	; (800700c <HAL_DMA_IRQHandler+0xe30>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d027      	beq.n	8006f86 <HAL_DMA_IRQHandler+0xdaa>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a35      	ldr	r2, [pc, #212]	; (8007010 <HAL_DMA_IRQHandler+0xe34>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d022      	beq.n	8006f86 <HAL_DMA_IRQHandler+0xdaa>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a33      	ldr	r2, [pc, #204]	; (8007014 <HAL_DMA_IRQHandler+0xe38>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d01d      	beq.n	8006f86 <HAL_DMA_IRQHandler+0xdaa>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a32      	ldr	r2, [pc, #200]	; (8007018 <HAL_DMA_IRQHandler+0xe3c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d018      	beq.n	8006f86 <HAL_DMA_IRQHandler+0xdaa>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a30      	ldr	r2, [pc, #192]	; (800701c <HAL_DMA_IRQHandler+0xe40>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d013      	beq.n	8006f86 <HAL_DMA_IRQHandler+0xdaa>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a2f      	ldr	r2, [pc, #188]	; (8007020 <HAL_DMA_IRQHandler+0xe44>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d00e      	beq.n	8006f86 <HAL_DMA_IRQHandler+0xdaa>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a2d      	ldr	r2, [pc, #180]	; (8007024 <HAL_DMA_IRQHandler+0xe48>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d009      	beq.n	8006f86 <HAL_DMA_IRQHandler+0xdaa>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a2c      	ldr	r2, [pc, #176]	; (8007028 <HAL_DMA_IRQHandler+0xe4c>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d004      	beq.n	8006f86 <HAL_DMA_IRQHandler+0xdaa>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a2a      	ldr	r2, [pc, #168]	; (800702c <HAL_DMA_IRQHandler+0xe50>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d108      	bne.n	8006f98 <HAL_DMA_IRQHandler+0xdbc>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 021c 	bic.w	r2, r2, #28
 8006f94:	601a      	str	r2, [r3, #0]
 8006f96:	e007      	b.n	8006fa8 <HAL_DMA_IRQHandler+0xdcc>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 020e 	bic.w	r2, r2, #14
 8006fa6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fac:	f003 031f 	and.w	r3, r3, #31
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	409a      	lsls	r2, r3
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d009      	beq.n	8006fea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	4798      	blx	r3
 8006fde:	e004      	b.n	8006fea <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006fe0:	bf00      	nop
 8006fe2:	e002      	b.n	8006fea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fe4:	bf00      	nop
 8006fe6:	e000      	b.n	8006fea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fe8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006fea:	3728      	adds	r7, #40	; 0x28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	40020010 	.word	0x40020010
 8006ff4:	40020028 	.word	0x40020028
 8006ff8:	40020040 	.word	0x40020040
 8006ffc:	40020058 	.word	0x40020058
 8007000:	40020070 	.word	0x40020070
 8007004:	40020088 	.word	0x40020088
 8007008:	400200a0 	.word	0x400200a0
 800700c:	400200b8 	.word	0x400200b8
 8007010:	40020410 	.word	0x40020410
 8007014:	40020428 	.word	0x40020428
 8007018:	40020440 	.word	0x40020440
 800701c:	40020458 	.word	0x40020458
 8007020:	40020470 	.word	0x40020470
 8007024:	40020488 	.word	0x40020488
 8007028:	400204a0 	.word	0x400204a0
 800702c:	400204b8 	.word	0x400204b8

08007030 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007030:	b480      	push	{r7}
 8007032:	b087      	sub	sp, #28
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
 800703c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007042:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007048:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a7f      	ldr	r2, [pc, #508]	; (800724c <DMA_SetConfig+0x21c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d072      	beq.n	800713a <DMA_SetConfig+0x10a>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a7d      	ldr	r2, [pc, #500]	; (8007250 <DMA_SetConfig+0x220>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d06d      	beq.n	800713a <DMA_SetConfig+0x10a>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a7c      	ldr	r2, [pc, #496]	; (8007254 <DMA_SetConfig+0x224>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d068      	beq.n	800713a <DMA_SetConfig+0x10a>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a7a      	ldr	r2, [pc, #488]	; (8007258 <DMA_SetConfig+0x228>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d063      	beq.n	800713a <DMA_SetConfig+0x10a>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a79      	ldr	r2, [pc, #484]	; (800725c <DMA_SetConfig+0x22c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d05e      	beq.n	800713a <DMA_SetConfig+0x10a>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a77      	ldr	r2, [pc, #476]	; (8007260 <DMA_SetConfig+0x230>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d059      	beq.n	800713a <DMA_SetConfig+0x10a>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a76      	ldr	r2, [pc, #472]	; (8007264 <DMA_SetConfig+0x234>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d054      	beq.n	800713a <DMA_SetConfig+0x10a>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a74      	ldr	r2, [pc, #464]	; (8007268 <DMA_SetConfig+0x238>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d04f      	beq.n	800713a <DMA_SetConfig+0x10a>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a73      	ldr	r2, [pc, #460]	; (800726c <DMA_SetConfig+0x23c>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d04a      	beq.n	800713a <DMA_SetConfig+0x10a>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a71      	ldr	r2, [pc, #452]	; (8007270 <DMA_SetConfig+0x240>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d045      	beq.n	800713a <DMA_SetConfig+0x10a>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a70      	ldr	r2, [pc, #448]	; (8007274 <DMA_SetConfig+0x244>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d040      	beq.n	800713a <DMA_SetConfig+0x10a>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a6e      	ldr	r2, [pc, #440]	; (8007278 <DMA_SetConfig+0x248>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d03b      	beq.n	800713a <DMA_SetConfig+0x10a>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a6d      	ldr	r2, [pc, #436]	; (800727c <DMA_SetConfig+0x24c>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d036      	beq.n	800713a <DMA_SetConfig+0x10a>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a6b      	ldr	r2, [pc, #428]	; (8007280 <DMA_SetConfig+0x250>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d031      	beq.n	800713a <DMA_SetConfig+0x10a>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a6a      	ldr	r2, [pc, #424]	; (8007284 <DMA_SetConfig+0x254>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d02c      	beq.n	800713a <DMA_SetConfig+0x10a>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a68      	ldr	r2, [pc, #416]	; (8007288 <DMA_SetConfig+0x258>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d027      	beq.n	800713a <DMA_SetConfig+0x10a>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a67      	ldr	r2, [pc, #412]	; (800728c <DMA_SetConfig+0x25c>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d022      	beq.n	800713a <DMA_SetConfig+0x10a>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a65      	ldr	r2, [pc, #404]	; (8007290 <DMA_SetConfig+0x260>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d01d      	beq.n	800713a <DMA_SetConfig+0x10a>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a64      	ldr	r2, [pc, #400]	; (8007294 <DMA_SetConfig+0x264>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d018      	beq.n	800713a <DMA_SetConfig+0x10a>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a62      	ldr	r2, [pc, #392]	; (8007298 <DMA_SetConfig+0x268>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d013      	beq.n	800713a <DMA_SetConfig+0x10a>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a61      	ldr	r2, [pc, #388]	; (800729c <DMA_SetConfig+0x26c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d00e      	beq.n	800713a <DMA_SetConfig+0x10a>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a5f      	ldr	r2, [pc, #380]	; (80072a0 <DMA_SetConfig+0x270>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d009      	beq.n	800713a <DMA_SetConfig+0x10a>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a5e      	ldr	r2, [pc, #376]	; (80072a4 <DMA_SetConfig+0x274>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d004      	beq.n	800713a <DMA_SetConfig+0x10a>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a5c      	ldr	r2, [pc, #368]	; (80072a8 <DMA_SetConfig+0x278>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d101      	bne.n	800713e <DMA_SetConfig+0x10e>
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <DMA_SetConfig+0x110>
 800713e:	2300      	movs	r3, #0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00d      	beq.n	8007160 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800714c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007152:	2b00      	cmp	r3, #0
 8007154:	d004      	beq.n	8007160 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800715e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a39      	ldr	r2, [pc, #228]	; (800724c <DMA_SetConfig+0x21c>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d04a      	beq.n	8007200 <DMA_SetConfig+0x1d0>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a38      	ldr	r2, [pc, #224]	; (8007250 <DMA_SetConfig+0x220>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d045      	beq.n	8007200 <DMA_SetConfig+0x1d0>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a36      	ldr	r2, [pc, #216]	; (8007254 <DMA_SetConfig+0x224>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d040      	beq.n	8007200 <DMA_SetConfig+0x1d0>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a35      	ldr	r2, [pc, #212]	; (8007258 <DMA_SetConfig+0x228>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d03b      	beq.n	8007200 <DMA_SetConfig+0x1d0>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a33      	ldr	r2, [pc, #204]	; (800725c <DMA_SetConfig+0x22c>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d036      	beq.n	8007200 <DMA_SetConfig+0x1d0>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a32      	ldr	r2, [pc, #200]	; (8007260 <DMA_SetConfig+0x230>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d031      	beq.n	8007200 <DMA_SetConfig+0x1d0>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a30      	ldr	r2, [pc, #192]	; (8007264 <DMA_SetConfig+0x234>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d02c      	beq.n	8007200 <DMA_SetConfig+0x1d0>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a2f      	ldr	r2, [pc, #188]	; (8007268 <DMA_SetConfig+0x238>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d027      	beq.n	8007200 <DMA_SetConfig+0x1d0>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a2d      	ldr	r2, [pc, #180]	; (800726c <DMA_SetConfig+0x23c>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d022      	beq.n	8007200 <DMA_SetConfig+0x1d0>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a2c      	ldr	r2, [pc, #176]	; (8007270 <DMA_SetConfig+0x240>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d01d      	beq.n	8007200 <DMA_SetConfig+0x1d0>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a2a      	ldr	r2, [pc, #168]	; (8007274 <DMA_SetConfig+0x244>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d018      	beq.n	8007200 <DMA_SetConfig+0x1d0>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a29      	ldr	r2, [pc, #164]	; (8007278 <DMA_SetConfig+0x248>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d013      	beq.n	8007200 <DMA_SetConfig+0x1d0>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a27      	ldr	r2, [pc, #156]	; (800727c <DMA_SetConfig+0x24c>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d00e      	beq.n	8007200 <DMA_SetConfig+0x1d0>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a26      	ldr	r2, [pc, #152]	; (8007280 <DMA_SetConfig+0x250>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d009      	beq.n	8007200 <DMA_SetConfig+0x1d0>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a24      	ldr	r2, [pc, #144]	; (8007284 <DMA_SetConfig+0x254>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d004      	beq.n	8007200 <DMA_SetConfig+0x1d0>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a23      	ldr	r2, [pc, #140]	; (8007288 <DMA_SetConfig+0x258>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d101      	bne.n	8007204 <DMA_SetConfig+0x1d4>
 8007200:	2301      	movs	r3, #1
 8007202:	e000      	b.n	8007206 <DMA_SetConfig+0x1d6>
 8007204:	2300      	movs	r3, #0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d059      	beq.n	80072be <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800720e:	f003 031f 	and.w	r3, r3, #31
 8007212:	223f      	movs	r2, #63	; 0x3f
 8007214:	409a      	lsls	r2, r3
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007228:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	2b40      	cmp	r3, #64	; 0x40
 8007238:	d138      	bne.n	80072ac <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800724a:	e086      	b.n	800735a <DMA_SetConfig+0x32a>
 800724c:	40020010 	.word	0x40020010
 8007250:	40020028 	.word	0x40020028
 8007254:	40020040 	.word	0x40020040
 8007258:	40020058 	.word	0x40020058
 800725c:	40020070 	.word	0x40020070
 8007260:	40020088 	.word	0x40020088
 8007264:	400200a0 	.word	0x400200a0
 8007268:	400200b8 	.word	0x400200b8
 800726c:	40020410 	.word	0x40020410
 8007270:	40020428 	.word	0x40020428
 8007274:	40020440 	.word	0x40020440
 8007278:	40020458 	.word	0x40020458
 800727c:	40020470 	.word	0x40020470
 8007280:	40020488 	.word	0x40020488
 8007284:	400204a0 	.word	0x400204a0
 8007288:	400204b8 	.word	0x400204b8
 800728c:	58025408 	.word	0x58025408
 8007290:	5802541c 	.word	0x5802541c
 8007294:	58025430 	.word	0x58025430
 8007298:	58025444 	.word	0x58025444
 800729c:	58025458 	.word	0x58025458
 80072a0:	5802546c 	.word	0x5802546c
 80072a4:	58025480 	.word	0x58025480
 80072a8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	60da      	str	r2, [r3, #12]
}
 80072bc:	e04d      	b.n	800735a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a29      	ldr	r2, [pc, #164]	; (8007368 <DMA_SetConfig+0x338>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d022      	beq.n	800730e <DMA_SetConfig+0x2de>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a27      	ldr	r2, [pc, #156]	; (800736c <DMA_SetConfig+0x33c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d01d      	beq.n	800730e <DMA_SetConfig+0x2de>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a26      	ldr	r2, [pc, #152]	; (8007370 <DMA_SetConfig+0x340>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d018      	beq.n	800730e <DMA_SetConfig+0x2de>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a24      	ldr	r2, [pc, #144]	; (8007374 <DMA_SetConfig+0x344>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d013      	beq.n	800730e <DMA_SetConfig+0x2de>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a23      	ldr	r2, [pc, #140]	; (8007378 <DMA_SetConfig+0x348>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d00e      	beq.n	800730e <DMA_SetConfig+0x2de>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a21      	ldr	r2, [pc, #132]	; (800737c <DMA_SetConfig+0x34c>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d009      	beq.n	800730e <DMA_SetConfig+0x2de>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a20      	ldr	r2, [pc, #128]	; (8007380 <DMA_SetConfig+0x350>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d004      	beq.n	800730e <DMA_SetConfig+0x2de>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a1e      	ldr	r2, [pc, #120]	; (8007384 <DMA_SetConfig+0x354>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d101      	bne.n	8007312 <DMA_SetConfig+0x2e2>
 800730e:	2301      	movs	r3, #1
 8007310:	e000      	b.n	8007314 <DMA_SetConfig+0x2e4>
 8007312:	2300      	movs	r3, #0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d020      	beq.n	800735a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800731c:	f003 031f 	and.w	r3, r3, #31
 8007320:	2201      	movs	r2, #1
 8007322:	409a      	lsls	r2, r3
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	2b40      	cmp	r3, #64	; 0x40
 8007336:	d108      	bne.n	800734a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	60da      	str	r2, [r3, #12]
}
 8007348:	e007      	b.n	800735a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	60da      	str	r2, [r3, #12]
}
 800735a:	bf00      	nop
 800735c:	371c      	adds	r7, #28
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	58025408 	.word	0x58025408
 800736c:	5802541c 	.word	0x5802541c
 8007370:	58025430 	.word	0x58025430
 8007374:	58025444 	.word	0x58025444
 8007378:	58025458 	.word	0x58025458
 800737c:	5802546c 	.word	0x5802546c
 8007380:	58025480 	.word	0x58025480
 8007384:	58025494 	.word	0x58025494

08007388 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a42      	ldr	r2, [pc, #264]	; (80074a0 <DMA_CalcBaseAndBitshift+0x118>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d04a      	beq.n	8007430 <DMA_CalcBaseAndBitshift+0xa8>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a41      	ldr	r2, [pc, #260]	; (80074a4 <DMA_CalcBaseAndBitshift+0x11c>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d045      	beq.n	8007430 <DMA_CalcBaseAndBitshift+0xa8>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a3f      	ldr	r2, [pc, #252]	; (80074a8 <DMA_CalcBaseAndBitshift+0x120>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d040      	beq.n	8007430 <DMA_CalcBaseAndBitshift+0xa8>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a3e      	ldr	r2, [pc, #248]	; (80074ac <DMA_CalcBaseAndBitshift+0x124>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d03b      	beq.n	8007430 <DMA_CalcBaseAndBitshift+0xa8>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a3c      	ldr	r2, [pc, #240]	; (80074b0 <DMA_CalcBaseAndBitshift+0x128>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d036      	beq.n	8007430 <DMA_CalcBaseAndBitshift+0xa8>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a3b      	ldr	r2, [pc, #236]	; (80074b4 <DMA_CalcBaseAndBitshift+0x12c>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d031      	beq.n	8007430 <DMA_CalcBaseAndBitshift+0xa8>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a39      	ldr	r2, [pc, #228]	; (80074b8 <DMA_CalcBaseAndBitshift+0x130>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d02c      	beq.n	8007430 <DMA_CalcBaseAndBitshift+0xa8>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a38      	ldr	r2, [pc, #224]	; (80074bc <DMA_CalcBaseAndBitshift+0x134>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d027      	beq.n	8007430 <DMA_CalcBaseAndBitshift+0xa8>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a36      	ldr	r2, [pc, #216]	; (80074c0 <DMA_CalcBaseAndBitshift+0x138>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d022      	beq.n	8007430 <DMA_CalcBaseAndBitshift+0xa8>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a35      	ldr	r2, [pc, #212]	; (80074c4 <DMA_CalcBaseAndBitshift+0x13c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d01d      	beq.n	8007430 <DMA_CalcBaseAndBitshift+0xa8>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a33      	ldr	r2, [pc, #204]	; (80074c8 <DMA_CalcBaseAndBitshift+0x140>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d018      	beq.n	8007430 <DMA_CalcBaseAndBitshift+0xa8>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a32      	ldr	r2, [pc, #200]	; (80074cc <DMA_CalcBaseAndBitshift+0x144>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d013      	beq.n	8007430 <DMA_CalcBaseAndBitshift+0xa8>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a30      	ldr	r2, [pc, #192]	; (80074d0 <DMA_CalcBaseAndBitshift+0x148>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d00e      	beq.n	8007430 <DMA_CalcBaseAndBitshift+0xa8>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a2f      	ldr	r2, [pc, #188]	; (80074d4 <DMA_CalcBaseAndBitshift+0x14c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d009      	beq.n	8007430 <DMA_CalcBaseAndBitshift+0xa8>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a2d      	ldr	r2, [pc, #180]	; (80074d8 <DMA_CalcBaseAndBitshift+0x150>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d004      	beq.n	8007430 <DMA_CalcBaseAndBitshift+0xa8>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a2c      	ldr	r2, [pc, #176]	; (80074dc <DMA_CalcBaseAndBitshift+0x154>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d101      	bne.n	8007434 <DMA_CalcBaseAndBitshift+0xac>
 8007430:	2301      	movs	r3, #1
 8007432:	e000      	b.n	8007436 <DMA_CalcBaseAndBitshift+0xae>
 8007434:	2300      	movs	r3, #0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d024      	beq.n	8007484 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	b2db      	uxtb	r3, r3
 8007440:	3b10      	subs	r3, #16
 8007442:	4a27      	ldr	r2, [pc, #156]	; (80074e0 <DMA_CalcBaseAndBitshift+0x158>)
 8007444:	fba2 2303 	umull	r2, r3, r2, r3
 8007448:	091b      	lsrs	r3, r3, #4
 800744a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f003 0307 	and.w	r3, r3, #7
 8007452:	4a24      	ldr	r2, [pc, #144]	; (80074e4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007454:	5cd3      	ldrb	r3, [r2, r3]
 8007456:	461a      	mov	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2b03      	cmp	r3, #3
 8007460:	d908      	bls.n	8007474 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	4b1f      	ldr	r3, [pc, #124]	; (80074e8 <DMA_CalcBaseAndBitshift+0x160>)
 800746a:	4013      	ands	r3, r2
 800746c:	1d1a      	adds	r2, r3, #4
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	659a      	str	r2, [r3, #88]	; 0x58
 8007472:	e00d      	b.n	8007490 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	461a      	mov	r2, r3
 800747a:	4b1b      	ldr	r3, [pc, #108]	; (80074e8 <DMA_CalcBaseAndBitshift+0x160>)
 800747c:	4013      	ands	r3, r2
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	6593      	str	r3, [r2, #88]	; 0x58
 8007482:	e005      	b.n	8007490 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	40020010 	.word	0x40020010
 80074a4:	40020028 	.word	0x40020028
 80074a8:	40020040 	.word	0x40020040
 80074ac:	40020058 	.word	0x40020058
 80074b0:	40020070 	.word	0x40020070
 80074b4:	40020088 	.word	0x40020088
 80074b8:	400200a0 	.word	0x400200a0
 80074bc:	400200b8 	.word	0x400200b8
 80074c0:	40020410 	.word	0x40020410
 80074c4:	40020428 	.word	0x40020428
 80074c8:	40020440 	.word	0x40020440
 80074cc:	40020458 	.word	0x40020458
 80074d0:	40020470 	.word	0x40020470
 80074d4:	40020488 	.word	0x40020488
 80074d8:	400204a0 	.word	0x400204a0
 80074dc:	400204b8 	.word	0x400204b8
 80074e0:	aaaaaaab 	.word	0xaaaaaaab
 80074e4:	0800df7c 	.word	0x0800df7c
 80074e8:	fffffc00 	.word	0xfffffc00

080074ec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d120      	bne.n	8007542 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007504:	2b03      	cmp	r3, #3
 8007506:	d858      	bhi.n	80075ba <DMA_CheckFifoParam+0xce>
 8007508:	a201      	add	r2, pc, #4	; (adr r2, 8007510 <DMA_CheckFifoParam+0x24>)
 800750a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750e:	bf00      	nop
 8007510:	08007521 	.word	0x08007521
 8007514:	08007533 	.word	0x08007533
 8007518:	08007521 	.word	0x08007521
 800751c:	080075bb 	.word	0x080075bb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007524:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d048      	beq.n	80075be <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007530:	e045      	b.n	80075be <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007536:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800753a:	d142      	bne.n	80075c2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007540:	e03f      	b.n	80075c2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800754a:	d123      	bne.n	8007594 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007550:	2b03      	cmp	r3, #3
 8007552:	d838      	bhi.n	80075c6 <DMA_CheckFifoParam+0xda>
 8007554:	a201      	add	r2, pc, #4	; (adr r2, 800755c <DMA_CheckFifoParam+0x70>)
 8007556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755a:	bf00      	nop
 800755c:	0800756d 	.word	0x0800756d
 8007560:	08007573 	.word	0x08007573
 8007564:	0800756d 	.word	0x0800756d
 8007568:	08007585 	.word	0x08007585
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	73fb      	strb	r3, [r7, #15]
        break;
 8007570:	e030      	b.n	80075d4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007576:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d025      	beq.n	80075ca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007582:	e022      	b.n	80075ca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007588:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800758c:	d11f      	bne.n	80075ce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007592:	e01c      	b.n	80075ce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007598:	2b02      	cmp	r3, #2
 800759a:	d902      	bls.n	80075a2 <DMA_CheckFifoParam+0xb6>
 800759c:	2b03      	cmp	r3, #3
 800759e:	d003      	beq.n	80075a8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80075a0:	e018      	b.n	80075d4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	73fb      	strb	r3, [r7, #15]
        break;
 80075a6:	e015      	b.n	80075d4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00e      	beq.n	80075d2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	73fb      	strb	r3, [r7, #15]
    break;
 80075b8:	e00b      	b.n	80075d2 <DMA_CheckFifoParam+0xe6>
        break;
 80075ba:	bf00      	nop
 80075bc:	e00a      	b.n	80075d4 <DMA_CheckFifoParam+0xe8>
        break;
 80075be:	bf00      	nop
 80075c0:	e008      	b.n	80075d4 <DMA_CheckFifoParam+0xe8>
        break;
 80075c2:	bf00      	nop
 80075c4:	e006      	b.n	80075d4 <DMA_CheckFifoParam+0xe8>
        break;
 80075c6:	bf00      	nop
 80075c8:	e004      	b.n	80075d4 <DMA_CheckFifoParam+0xe8>
        break;
 80075ca:	bf00      	nop
 80075cc:	e002      	b.n	80075d4 <DMA_CheckFifoParam+0xe8>
        break;
 80075ce:	bf00      	nop
 80075d0:	e000      	b.n	80075d4 <DMA_CheckFifoParam+0xe8>
    break;
 80075d2:	bf00      	nop
    }
  }

  return status;
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop

080075e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a38      	ldr	r2, [pc, #224]	; (80076d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d022      	beq.n	8007642 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a36      	ldr	r2, [pc, #216]	; (80076dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d01d      	beq.n	8007642 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a35      	ldr	r2, [pc, #212]	; (80076e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d018      	beq.n	8007642 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a33      	ldr	r2, [pc, #204]	; (80076e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d013      	beq.n	8007642 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a32      	ldr	r2, [pc, #200]	; (80076e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d00e      	beq.n	8007642 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a30      	ldr	r2, [pc, #192]	; (80076ec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d009      	beq.n	8007642 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a2f      	ldr	r2, [pc, #188]	; (80076f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d004      	beq.n	8007642 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a2d      	ldr	r2, [pc, #180]	; (80076f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d101      	bne.n	8007646 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007642:	2301      	movs	r3, #1
 8007644:	e000      	b.n	8007648 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007646:	2300      	movs	r3, #0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d01a      	beq.n	8007682 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	b2db      	uxtb	r3, r3
 8007652:	3b08      	subs	r3, #8
 8007654:	4a28      	ldr	r2, [pc, #160]	; (80076f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007656:	fba2 2303 	umull	r2, r3, r2, r3
 800765a:	091b      	lsrs	r3, r3, #4
 800765c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	4b26      	ldr	r3, [pc, #152]	; (80076fc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007662:	4413      	add	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	461a      	mov	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a24      	ldr	r2, [pc, #144]	; (8007700 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007670:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f003 031f 	and.w	r3, r3, #31
 8007678:	2201      	movs	r2, #1
 800767a:	409a      	lsls	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007680:	e024      	b.n	80076cc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	b2db      	uxtb	r3, r3
 8007688:	3b10      	subs	r3, #16
 800768a:	4a1e      	ldr	r2, [pc, #120]	; (8007704 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800768c:	fba2 2303 	umull	r2, r3, r2, r3
 8007690:	091b      	lsrs	r3, r3, #4
 8007692:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	4a1c      	ldr	r2, [pc, #112]	; (8007708 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d806      	bhi.n	80076aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	4a1b      	ldr	r2, [pc, #108]	; (800770c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d902      	bls.n	80076aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	3308      	adds	r3, #8
 80076a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	4b18      	ldr	r3, [pc, #96]	; (8007710 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80076ae:	4413      	add	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	461a      	mov	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a16      	ldr	r2, [pc, #88]	; (8007714 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80076bc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f003 031f 	and.w	r3, r3, #31
 80076c4:	2201      	movs	r2, #1
 80076c6:	409a      	lsls	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	669a      	str	r2, [r3, #104]	; 0x68
}
 80076cc:	bf00      	nop
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	58025408 	.word	0x58025408
 80076dc:	5802541c 	.word	0x5802541c
 80076e0:	58025430 	.word	0x58025430
 80076e4:	58025444 	.word	0x58025444
 80076e8:	58025458 	.word	0x58025458
 80076ec:	5802546c 	.word	0x5802546c
 80076f0:	58025480 	.word	0x58025480
 80076f4:	58025494 	.word	0x58025494
 80076f8:	cccccccd 	.word	0xcccccccd
 80076fc:	16009600 	.word	0x16009600
 8007700:	58025880 	.word	0x58025880
 8007704:	aaaaaaab 	.word	0xaaaaaaab
 8007708:	400204b8 	.word	0x400204b8
 800770c:	4002040f 	.word	0x4002040f
 8007710:	10008200 	.word	0x10008200
 8007714:	40020880 	.word	0x40020880

08007718 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	b2db      	uxtb	r3, r3
 8007726:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d04a      	beq.n	80077c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2b08      	cmp	r3, #8
 8007732:	d847      	bhi.n	80077c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a25      	ldr	r2, [pc, #148]	; (80077d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d022      	beq.n	8007784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a24      	ldr	r2, [pc, #144]	; (80077d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d01d      	beq.n	8007784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a22      	ldr	r2, [pc, #136]	; (80077d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d018      	beq.n	8007784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a21      	ldr	r2, [pc, #132]	; (80077dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d013      	beq.n	8007784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a1f      	ldr	r2, [pc, #124]	; (80077e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d00e      	beq.n	8007784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a1e      	ldr	r2, [pc, #120]	; (80077e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d009      	beq.n	8007784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a1c      	ldr	r2, [pc, #112]	; (80077e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d004      	beq.n	8007784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a1b      	ldr	r2, [pc, #108]	; (80077ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d101      	bne.n	8007788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007784:	2301      	movs	r3, #1
 8007786:	e000      	b.n	800778a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007788:	2300      	movs	r3, #0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	4b17      	ldr	r3, [pc, #92]	; (80077f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007792:	4413      	add	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	461a      	mov	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a15      	ldr	r2, [pc, #84]	; (80077f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80077a0:	671a      	str	r2, [r3, #112]	; 0x70
 80077a2:	e009      	b.n	80077b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	4b14      	ldr	r3, [pc, #80]	; (80077f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80077a8:	4413      	add	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	461a      	mov	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a11      	ldr	r2, [pc, #68]	; (80077fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80077b6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	3b01      	subs	r3, #1
 80077bc:	2201      	movs	r2, #1
 80077be:	409a      	lsls	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80077c4:	bf00      	nop
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	58025408 	.word	0x58025408
 80077d4:	5802541c 	.word	0x5802541c
 80077d8:	58025430 	.word	0x58025430
 80077dc:	58025444 	.word	0x58025444
 80077e0:	58025458 	.word	0x58025458
 80077e4:	5802546c 	.word	0x5802546c
 80077e8:	58025480 	.word	0x58025480
 80077ec:	58025494 	.word	0x58025494
 80077f0:	1600963f 	.word	0x1600963f
 80077f4:	58025940 	.word	0x58025940
 80077f8:	1000823f 	.word	0x1000823f
 80077fc:	40020940 	.word	0x40020940

08007800 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007800:	b480      	push	{r7}
 8007802:	b089      	sub	sp, #36	; 0x24
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800780a:	2300      	movs	r3, #0
 800780c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800780e:	4b86      	ldr	r3, [pc, #536]	; (8007a28 <HAL_GPIO_Init+0x228>)
 8007810:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007812:	e18c      	b.n	8007b2e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	2101      	movs	r1, #1
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	fa01 f303 	lsl.w	r3, r1, r3
 8007820:	4013      	ands	r3, r2
 8007822:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	2b00      	cmp	r3, #0
 8007828:	f000 817e 	beq.w	8007b28 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f003 0303 	and.w	r3, r3, #3
 8007834:	2b01      	cmp	r3, #1
 8007836:	d005      	beq.n	8007844 <HAL_GPIO_Init+0x44>
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f003 0303 	and.w	r3, r3, #3
 8007840:	2b02      	cmp	r3, #2
 8007842:	d130      	bne.n	80078a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	005b      	lsls	r3, r3, #1
 800784e:	2203      	movs	r2, #3
 8007850:	fa02 f303 	lsl.w	r3, r2, r3
 8007854:	43db      	mvns	r3, r3
 8007856:	69ba      	ldr	r2, [r7, #24]
 8007858:	4013      	ands	r3, r2
 800785a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	68da      	ldr	r2, [r3, #12]
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	005b      	lsls	r3, r3, #1
 8007864:	fa02 f303 	lsl.w	r3, r2, r3
 8007868:	69ba      	ldr	r2, [r7, #24]
 800786a:	4313      	orrs	r3, r2
 800786c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	69ba      	ldr	r2, [r7, #24]
 8007872:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800787a:	2201      	movs	r2, #1
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	fa02 f303 	lsl.w	r3, r2, r3
 8007882:	43db      	mvns	r3, r3
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	4013      	ands	r3, r2
 8007888:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	091b      	lsrs	r3, r3, #4
 8007890:	f003 0201 	and.w	r2, r3, #1
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	fa02 f303 	lsl.w	r3, r2, r3
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	4313      	orrs	r3, r2
 800789e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f003 0303 	and.w	r3, r3, #3
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	d017      	beq.n	80078e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	2203      	movs	r2, #3
 80078be:	fa02 f303 	lsl.w	r3, r2, r3
 80078c2:	43db      	mvns	r3, r3
 80078c4:	69ba      	ldr	r2, [r7, #24]
 80078c6:	4013      	ands	r3, r2
 80078c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	689a      	ldr	r2, [r3, #8]
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	005b      	lsls	r3, r3, #1
 80078d2:	fa02 f303 	lsl.w	r3, r2, r3
 80078d6:	69ba      	ldr	r2, [r7, #24]
 80078d8:	4313      	orrs	r3, r2
 80078da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	69ba      	ldr	r2, [r7, #24]
 80078e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f003 0303 	and.w	r3, r3, #3
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d123      	bne.n	8007936 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	08da      	lsrs	r2, r3, #3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	3208      	adds	r2, #8
 80078f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	f003 0307 	and.w	r3, r3, #7
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	220f      	movs	r2, #15
 8007906:	fa02 f303 	lsl.w	r3, r2, r3
 800790a:	43db      	mvns	r3, r3
 800790c:	69ba      	ldr	r2, [r7, #24]
 800790e:	4013      	ands	r3, r2
 8007910:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	691a      	ldr	r2, [r3, #16]
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	f003 0307 	and.w	r3, r3, #7
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	fa02 f303 	lsl.w	r3, r2, r3
 8007922:	69ba      	ldr	r2, [r7, #24]
 8007924:	4313      	orrs	r3, r2
 8007926:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	08da      	lsrs	r2, r3, #3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	3208      	adds	r2, #8
 8007930:	69b9      	ldr	r1, [r7, #24]
 8007932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	005b      	lsls	r3, r3, #1
 8007940:	2203      	movs	r2, #3
 8007942:	fa02 f303 	lsl.w	r3, r2, r3
 8007946:	43db      	mvns	r3, r3
 8007948:	69ba      	ldr	r2, [r7, #24]
 800794a:	4013      	ands	r3, r2
 800794c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f003 0203 	and.w	r2, r3, #3
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	fa02 f303 	lsl.w	r3, r2, r3
 800795e:	69ba      	ldr	r2, [r7, #24]
 8007960:	4313      	orrs	r3, r2
 8007962:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	69ba      	ldr	r2, [r7, #24]
 8007968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007972:	2b00      	cmp	r3, #0
 8007974:	f000 80d8 	beq.w	8007b28 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007978:	4b2c      	ldr	r3, [pc, #176]	; (8007a2c <HAL_GPIO_Init+0x22c>)
 800797a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800797e:	4a2b      	ldr	r2, [pc, #172]	; (8007a2c <HAL_GPIO_Init+0x22c>)
 8007980:	f043 0302 	orr.w	r3, r3, #2
 8007984:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007988:	4b28      	ldr	r3, [pc, #160]	; (8007a2c <HAL_GPIO_Init+0x22c>)
 800798a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800798e:	f003 0302 	and.w	r3, r3, #2
 8007992:	60fb      	str	r3, [r7, #12]
 8007994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007996:	4a26      	ldr	r2, [pc, #152]	; (8007a30 <HAL_GPIO_Init+0x230>)
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	089b      	lsrs	r3, r3, #2
 800799c:	3302      	adds	r3, #2
 800799e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	f003 0303 	and.w	r3, r3, #3
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	220f      	movs	r2, #15
 80079ae:	fa02 f303 	lsl.w	r3, r2, r3
 80079b2:	43db      	mvns	r3, r3
 80079b4:	69ba      	ldr	r2, [r7, #24]
 80079b6:	4013      	ands	r3, r2
 80079b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a1d      	ldr	r2, [pc, #116]	; (8007a34 <HAL_GPIO_Init+0x234>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d04a      	beq.n	8007a58 <HAL_GPIO_Init+0x258>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a1c      	ldr	r2, [pc, #112]	; (8007a38 <HAL_GPIO_Init+0x238>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d02b      	beq.n	8007a22 <HAL_GPIO_Init+0x222>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a1b      	ldr	r2, [pc, #108]	; (8007a3c <HAL_GPIO_Init+0x23c>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d025      	beq.n	8007a1e <HAL_GPIO_Init+0x21e>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a1a      	ldr	r2, [pc, #104]	; (8007a40 <HAL_GPIO_Init+0x240>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d01f      	beq.n	8007a1a <HAL_GPIO_Init+0x21a>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a19      	ldr	r2, [pc, #100]	; (8007a44 <HAL_GPIO_Init+0x244>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d019      	beq.n	8007a16 <HAL_GPIO_Init+0x216>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a18      	ldr	r2, [pc, #96]	; (8007a48 <HAL_GPIO_Init+0x248>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d013      	beq.n	8007a12 <HAL_GPIO_Init+0x212>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a17      	ldr	r2, [pc, #92]	; (8007a4c <HAL_GPIO_Init+0x24c>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d00d      	beq.n	8007a0e <HAL_GPIO_Init+0x20e>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a16      	ldr	r2, [pc, #88]	; (8007a50 <HAL_GPIO_Init+0x250>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d007      	beq.n	8007a0a <HAL_GPIO_Init+0x20a>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a15      	ldr	r2, [pc, #84]	; (8007a54 <HAL_GPIO_Init+0x254>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d101      	bne.n	8007a06 <HAL_GPIO_Init+0x206>
 8007a02:	2309      	movs	r3, #9
 8007a04:	e029      	b.n	8007a5a <HAL_GPIO_Init+0x25a>
 8007a06:	230a      	movs	r3, #10
 8007a08:	e027      	b.n	8007a5a <HAL_GPIO_Init+0x25a>
 8007a0a:	2307      	movs	r3, #7
 8007a0c:	e025      	b.n	8007a5a <HAL_GPIO_Init+0x25a>
 8007a0e:	2306      	movs	r3, #6
 8007a10:	e023      	b.n	8007a5a <HAL_GPIO_Init+0x25a>
 8007a12:	2305      	movs	r3, #5
 8007a14:	e021      	b.n	8007a5a <HAL_GPIO_Init+0x25a>
 8007a16:	2304      	movs	r3, #4
 8007a18:	e01f      	b.n	8007a5a <HAL_GPIO_Init+0x25a>
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e01d      	b.n	8007a5a <HAL_GPIO_Init+0x25a>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	e01b      	b.n	8007a5a <HAL_GPIO_Init+0x25a>
 8007a22:	2301      	movs	r3, #1
 8007a24:	e019      	b.n	8007a5a <HAL_GPIO_Init+0x25a>
 8007a26:	bf00      	nop
 8007a28:	58000080 	.word	0x58000080
 8007a2c:	58024400 	.word	0x58024400
 8007a30:	58000400 	.word	0x58000400
 8007a34:	58020000 	.word	0x58020000
 8007a38:	58020400 	.word	0x58020400
 8007a3c:	58020800 	.word	0x58020800
 8007a40:	58020c00 	.word	0x58020c00
 8007a44:	58021000 	.word	0x58021000
 8007a48:	58021400 	.word	0x58021400
 8007a4c:	58021800 	.word	0x58021800
 8007a50:	58021c00 	.word	0x58021c00
 8007a54:	58022400 	.word	0x58022400
 8007a58:	2300      	movs	r3, #0
 8007a5a:	69fa      	ldr	r2, [r7, #28]
 8007a5c:	f002 0203 	and.w	r2, r2, #3
 8007a60:	0092      	lsls	r2, r2, #2
 8007a62:	4093      	lsls	r3, r2
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a6a:	4938      	ldr	r1, [pc, #224]	; (8007b4c <HAL_GPIO_Init+0x34c>)
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	089b      	lsrs	r3, r3, #2
 8007a70:	3302      	adds	r3, #2
 8007a72:	69ba      	ldr	r2, [r7, #24]
 8007a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	43db      	mvns	r3, r3
 8007a84:	69ba      	ldr	r2, [r7, #24]
 8007a86:	4013      	ands	r3, r2
 8007a88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007a96:	69ba      	ldr	r2, [r7, #24]
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007a9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	43db      	mvns	r3, r3
 8007ab2:	69ba      	ldr	r2, [r7, #24]
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d003      	beq.n	8007acc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007ac4:	69ba      	ldr	r2, [r7, #24]
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007acc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	43db      	mvns	r3, r3
 8007ade:	69ba      	ldr	r2, [r7, #24]
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d003      	beq.n	8007af8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007af0:	69ba      	ldr	r2, [r7, #24]
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	69ba      	ldr	r2, [r7, #24]
 8007afc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	43db      	mvns	r3, r3
 8007b08:	69ba      	ldr	r2, [r7, #24]
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	fa22 f303 	lsr.w	r3, r2, r3
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f47f ae6b 	bne.w	8007814 <HAL_GPIO_Init+0x14>
  }
}
 8007b3e:	bf00      	nop
 8007b40:	bf00      	nop
 8007b42:	3724      	adds	r7, #36	; 0x24
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	58000400 	.word	0x58000400

08007b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	807b      	strh	r3, [r7, #2]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007b60:	787b      	ldrb	r3, [r7, #1]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b66:	887a      	ldrh	r2, [r7, #2]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007b6c:	e003      	b.n	8007b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007b6e:	887b      	ldrh	r3, [r7, #2]
 8007b70:	041a      	lsls	r2, r3, #16
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	619a      	str	r2, [r3, #24]
}
 8007b76:	bf00      	nop
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
	...

08007b84 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007b8c:	4b19      	ldr	r3, [pc, #100]	; (8007bf4 <HAL_PWREx_ConfigSupply+0x70>)
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	f003 0304 	and.w	r3, r3, #4
 8007b94:	2b04      	cmp	r3, #4
 8007b96:	d00a      	beq.n	8007bae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007b98:	4b16      	ldr	r3, [pc, #88]	; (8007bf4 <HAL_PWREx_ConfigSupply+0x70>)
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	f003 0307 	and.w	r3, r3, #7
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d001      	beq.n	8007baa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e01f      	b.n	8007bea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	e01d      	b.n	8007bea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007bae:	4b11      	ldr	r3, [pc, #68]	; (8007bf4 <HAL_PWREx_ConfigSupply+0x70>)
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	f023 0207 	bic.w	r2, r3, #7
 8007bb6:	490f      	ldr	r1, [pc, #60]	; (8007bf4 <HAL_PWREx_ConfigSupply+0x70>)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007bbe:	f7fc fec9 	bl	8004954 <HAL_GetTick>
 8007bc2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007bc4:	e009      	b.n	8007bda <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007bc6:	f7fc fec5 	bl	8004954 <HAL_GetTick>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bd4:	d901      	bls.n	8007bda <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e007      	b.n	8007bea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007bda:	4b06      	ldr	r3, [pc, #24]	; (8007bf4 <HAL_PWREx_ConfigSupply+0x70>)
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007be6:	d1ee      	bne.n	8007bc6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	58024800 	.word	0x58024800

08007bf8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08c      	sub	sp, #48	; 0x30
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e39d      	b.n	8008346 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 8087 	beq.w	8007d26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c18:	4b88      	ldr	r3, [pc, #544]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c22:	4b86      	ldr	r3, [pc, #536]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c26:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2a:	2b10      	cmp	r3, #16
 8007c2c:	d007      	beq.n	8007c3e <HAL_RCC_OscConfig+0x46>
 8007c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c30:	2b18      	cmp	r3, #24
 8007c32:	d110      	bne.n	8007c56 <HAL_RCC_OscConfig+0x5e>
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	f003 0303 	and.w	r3, r3, #3
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d10b      	bne.n	8007c56 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c3e:	4b7f      	ldr	r3, [pc, #508]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d06c      	beq.n	8007d24 <HAL_RCC_OscConfig+0x12c>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d168      	bne.n	8007d24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e377      	b.n	8008346 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c5e:	d106      	bne.n	8007c6e <HAL_RCC_OscConfig+0x76>
 8007c60:	4b76      	ldr	r3, [pc, #472]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a75      	ldr	r2, [pc, #468]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	e02e      	b.n	8007ccc <HAL_RCC_OscConfig+0xd4>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10c      	bne.n	8007c90 <HAL_RCC_OscConfig+0x98>
 8007c76:	4b71      	ldr	r3, [pc, #452]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a70      	ldr	r2, [pc, #448]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c80:	6013      	str	r3, [r2, #0]
 8007c82:	4b6e      	ldr	r3, [pc, #440]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a6d      	ldr	r2, [pc, #436]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007c88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c8c:	6013      	str	r3, [r2, #0]
 8007c8e:	e01d      	b.n	8007ccc <HAL_RCC_OscConfig+0xd4>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c98:	d10c      	bne.n	8007cb4 <HAL_RCC_OscConfig+0xbc>
 8007c9a:	4b68      	ldr	r3, [pc, #416]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a67      	ldr	r2, [pc, #412]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ca4:	6013      	str	r3, [r2, #0]
 8007ca6:	4b65      	ldr	r3, [pc, #404]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a64      	ldr	r2, [pc, #400]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cb0:	6013      	str	r3, [r2, #0]
 8007cb2:	e00b      	b.n	8007ccc <HAL_RCC_OscConfig+0xd4>
 8007cb4:	4b61      	ldr	r3, [pc, #388]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a60      	ldr	r2, [pc, #384]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cbe:	6013      	str	r3, [r2, #0]
 8007cc0:	4b5e      	ldr	r3, [pc, #376]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a5d      	ldr	r2, [pc, #372]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d013      	beq.n	8007cfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cd4:	f7fc fe3e 	bl	8004954 <HAL_GetTick>
 8007cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007cda:	e008      	b.n	8007cee <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007cdc:	f7fc fe3a 	bl	8004954 <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	2b64      	cmp	r3, #100	; 0x64
 8007ce8:	d901      	bls.n	8007cee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e32b      	b.n	8008346 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007cee:	4b53      	ldr	r3, [pc, #332]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d0f0      	beq.n	8007cdc <HAL_RCC_OscConfig+0xe4>
 8007cfa:	e014      	b.n	8007d26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cfc:	f7fc fe2a 	bl	8004954 <HAL_GetTick>
 8007d00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d02:	e008      	b.n	8007d16 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d04:	f7fc fe26 	bl	8004954 <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	2b64      	cmp	r3, #100	; 0x64
 8007d10:	d901      	bls.n	8007d16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e317      	b.n	8008346 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d16:	4b49      	ldr	r3, [pc, #292]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1f0      	bne.n	8007d04 <HAL_RCC_OscConfig+0x10c>
 8007d22:	e000      	b.n	8007d26 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 808c 	beq.w	8007e4c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d34:	4b41      	ldr	r3, [pc, #260]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d3c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d3e:	4b3f      	ldr	r3, [pc, #252]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d42:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d007      	beq.n	8007d5a <HAL_RCC_OscConfig+0x162>
 8007d4a:	6a3b      	ldr	r3, [r7, #32]
 8007d4c:	2b18      	cmp	r3, #24
 8007d4e:	d137      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x1c8>
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	f003 0303 	and.w	r3, r3, #3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d132      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d5a:	4b38      	ldr	r3, [pc, #224]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 0304 	and.w	r3, r3, #4
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d005      	beq.n	8007d72 <HAL_RCC_OscConfig+0x17a>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e2e9      	b.n	8008346 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007d72:	4b32      	ldr	r3, [pc, #200]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f023 0219 	bic.w	r2, r3, #25
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	492f      	ldr	r1, [pc, #188]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007d80:	4313      	orrs	r3, r2
 8007d82:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007d84:	f7fc fde6 	bl	8004954 <HAL_GetTick>
 8007d88:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d8a:	e008      	b.n	8007d9e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d8c:	f7fc fde2 	bl	8004954 <HAL_GetTick>
 8007d90:	4602      	mov	r2, r0
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d901      	bls.n	8007d9e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e2d3      	b.n	8008346 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d9e:	4b27      	ldr	r3, [pc, #156]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0304 	and.w	r3, r3, #4
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d0f0      	beq.n	8007d8c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007daa:	4b24      	ldr	r3, [pc, #144]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	061b      	lsls	r3, r3, #24
 8007db8:	4920      	ldr	r1, [pc, #128]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007dbe:	e045      	b.n	8007e4c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d026      	beq.n	8007e16 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007dc8:	4b1c      	ldr	r3, [pc, #112]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f023 0219 	bic.w	r2, r3, #25
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	4919      	ldr	r1, [pc, #100]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dda:	f7fc fdbb 	bl	8004954 <HAL_GetTick>
 8007dde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007de0:	e008      	b.n	8007df4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007de2:	f7fc fdb7 	bl	8004954 <HAL_GetTick>
 8007de6:	4602      	mov	r2, r0
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d901      	bls.n	8007df4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e2a8      	b.n	8008346 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007df4:	4b11      	ldr	r3, [pc, #68]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0304 	and.w	r3, r3, #4
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d0f0      	beq.n	8007de2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e00:	4b0e      	ldr	r3, [pc, #56]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	061b      	lsls	r3, r3, #24
 8007e0e:	490b      	ldr	r1, [pc, #44]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	604b      	str	r3, [r1, #4]
 8007e14:	e01a      	b.n	8007e4c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e16:	4b09      	ldr	r3, [pc, #36]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a08      	ldr	r2, [pc, #32]	; (8007e3c <HAL_RCC_OscConfig+0x244>)
 8007e1c:	f023 0301 	bic.w	r3, r3, #1
 8007e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e22:	f7fc fd97 	bl	8004954 <HAL_GetTick>
 8007e26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007e28:	e00a      	b.n	8007e40 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e2a:	f7fc fd93 	bl	8004954 <HAL_GetTick>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d903      	bls.n	8007e40 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e284      	b.n	8008346 <HAL_RCC_OscConfig+0x74e>
 8007e3c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007e40:	4b96      	ldr	r3, [pc, #600]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0304 	and.w	r3, r3, #4
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1ee      	bne.n	8007e2a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0310 	and.w	r3, r3, #16
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d06a      	beq.n	8007f2e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e58:	4b90      	ldr	r3, [pc, #576]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e60:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e62:	4b8e      	ldr	r3, [pc, #568]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e66:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	2b08      	cmp	r3, #8
 8007e6c:	d007      	beq.n	8007e7e <HAL_RCC_OscConfig+0x286>
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	2b18      	cmp	r3, #24
 8007e72:	d11b      	bne.n	8007eac <HAL_RCC_OscConfig+0x2b4>
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	f003 0303 	and.w	r3, r3, #3
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d116      	bne.n	8007eac <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e7e:	4b87      	ldr	r3, [pc, #540]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d005      	beq.n	8007e96 <HAL_RCC_OscConfig+0x29e>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	69db      	ldr	r3, [r3, #28]
 8007e8e:	2b80      	cmp	r3, #128	; 0x80
 8007e90:	d001      	beq.n	8007e96 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e257      	b.n	8008346 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e96:	4b81      	ldr	r3, [pc, #516]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	061b      	lsls	r3, r3, #24
 8007ea4:	497d      	ldr	r1, [pc, #500]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007eaa:	e040      	b.n	8007f2e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	69db      	ldr	r3, [r3, #28]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d023      	beq.n	8007efc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007eb4:	4b79      	ldr	r3, [pc, #484]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a78      	ldr	r2, [pc, #480]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec0:	f7fc fd48 	bl	8004954 <HAL_GetTick>
 8007ec4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ec6:	e008      	b.n	8007eda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007ec8:	f7fc fd44 	bl	8004954 <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d901      	bls.n	8007eda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e235      	b.n	8008346 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007eda:	4b70      	ldr	r3, [pc, #448]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0f0      	beq.n	8007ec8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ee6:	4b6d      	ldr	r3, [pc, #436]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	061b      	lsls	r3, r3, #24
 8007ef4:	4969      	ldr	r1, [pc, #420]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	60cb      	str	r3, [r1, #12]
 8007efa:	e018      	b.n	8007f2e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007efc:	4b67      	ldr	r3, [pc, #412]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a66      	ldr	r2, [pc, #408]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f08:	f7fc fd24 	bl	8004954 <HAL_GetTick>
 8007f0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007f0e:	e008      	b.n	8007f22 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007f10:	f7fc fd20 	bl	8004954 <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d901      	bls.n	8007f22 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e211      	b.n	8008346 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007f22:	4b5e      	ldr	r3, [pc, #376]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1f0      	bne.n	8007f10 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0308 	and.w	r3, r3, #8
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d036      	beq.n	8007fa8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d019      	beq.n	8007f76 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f42:	4b56      	ldr	r3, [pc, #344]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f46:	4a55      	ldr	r2, [pc, #340]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007f48:	f043 0301 	orr.w	r3, r3, #1
 8007f4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f4e:	f7fc fd01 	bl	8004954 <HAL_GetTick>
 8007f52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f54:	e008      	b.n	8007f68 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f56:	f7fc fcfd 	bl	8004954 <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d901      	bls.n	8007f68 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e1ee      	b.n	8008346 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f68:	4b4c      	ldr	r3, [pc, #304]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f6c:	f003 0302 	and.w	r3, r3, #2
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d0f0      	beq.n	8007f56 <HAL_RCC_OscConfig+0x35e>
 8007f74:	e018      	b.n	8007fa8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f76:	4b49      	ldr	r3, [pc, #292]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f7a:	4a48      	ldr	r2, [pc, #288]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007f7c:	f023 0301 	bic.w	r3, r3, #1
 8007f80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f82:	f7fc fce7 	bl	8004954 <HAL_GetTick>
 8007f86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f88:	e008      	b.n	8007f9c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f8a:	f7fc fce3 	bl	8004954 <HAL_GetTick>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d901      	bls.n	8007f9c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e1d4      	b.n	8008346 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f9c:	4b3f      	ldr	r3, [pc, #252]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fa0:	f003 0302 	and.w	r3, r3, #2
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1f0      	bne.n	8007f8a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0320 	and.w	r3, r3, #32
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d036      	beq.n	8008022 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d019      	beq.n	8007ff0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007fbc:	4b37      	ldr	r3, [pc, #220]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a36      	ldr	r2, [pc, #216]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007fc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007fc6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007fc8:	f7fc fcc4 	bl	8004954 <HAL_GetTick>
 8007fcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007fce:	e008      	b.n	8007fe2 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007fd0:	f7fc fcc0 	bl	8004954 <HAL_GetTick>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d901      	bls.n	8007fe2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e1b1      	b.n	8008346 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007fe2:	4b2e      	ldr	r3, [pc, #184]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d0f0      	beq.n	8007fd0 <HAL_RCC_OscConfig+0x3d8>
 8007fee:	e018      	b.n	8008022 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007ff0:	4b2a      	ldr	r3, [pc, #168]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a29      	ldr	r2, [pc, #164]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8007ff6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ffa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007ffc:	f7fc fcaa 	bl	8004954 <HAL_GetTick>
 8008000:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008002:	e008      	b.n	8008016 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008004:	f7fc fca6 	bl	8004954 <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	2b02      	cmp	r3, #2
 8008010:	d901      	bls.n	8008016 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e197      	b.n	8008346 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008016:	4b21      	ldr	r3, [pc, #132]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1f0      	bne.n	8008004 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0304 	and.w	r3, r3, #4
 800802a:	2b00      	cmp	r3, #0
 800802c:	f000 8086 	beq.w	800813c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008030:	4b1b      	ldr	r3, [pc, #108]	; (80080a0 <HAL_RCC_OscConfig+0x4a8>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a1a      	ldr	r2, [pc, #104]	; (80080a0 <HAL_RCC_OscConfig+0x4a8>)
 8008036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800803a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800803c:	f7fc fc8a 	bl	8004954 <HAL_GetTick>
 8008040:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008042:	e008      	b.n	8008056 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008044:	f7fc fc86 	bl	8004954 <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	2b64      	cmp	r3, #100	; 0x64
 8008050:	d901      	bls.n	8008056 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e177      	b.n	8008346 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008056:	4b12      	ldr	r3, [pc, #72]	; (80080a0 <HAL_RCC_OscConfig+0x4a8>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800805e:	2b00      	cmp	r3, #0
 8008060:	d0f0      	beq.n	8008044 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d106      	bne.n	8008078 <HAL_RCC_OscConfig+0x480>
 800806a:	4b0c      	ldr	r3, [pc, #48]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 800806c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800806e:	4a0b      	ldr	r2, [pc, #44]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8008070:	f043 0301 	orr.w	r3, r3, #1
 8008074:	6713      	str	r3, [r2, #112]	; 0x70
 8008076:	e032      	b.n	80080de <HAL_RCC_OscConfig+0x4e6>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d111      	bne.n	80080a4 <HAL_RCC_OscConfig+0x4ac>
 8008080:	4b06      	ldr	r3, [pc, #24]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8008082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008084:	4a05      	ldr	r2, [pc, #20]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8008086:	f023 0301 	bic.w	r3, r3, #1
 800808a:	6713      	str	r3, [r2, #112]	; 0x70
 800808c:	4b03      	ldr	r3, [pc, #12]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 800808e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008090:	4a02      	ldr	r2, [pc, #8]	; (800809c <HAL_RCC_OscConfig+0x4a4>)
 8008092:	f023 0304 	bic.w	r3, r3, #4
 8008096:	6713      	str	r3, [r2, #112]	; 0x70
 8008098:	e021      	b.n	80080de <HAL_RCC_OscConfig+0x4e6>
 800809a:	bf00      	nop
 800809c:	58024400 	.word	0x58024400
 80080a0:	58024800 	.word	0x58024800
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	2b05      	cmp	r3, #5
 80080aa:	d10c      	bne.n	80080c6 <HAL_RCC_OscConfig+0x4ce>
 80080ac:	4b83      	ldr	r3, [pc, #524]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 80080ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b0:	4a82      	ldr	r2, [pc, #520]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 80080b2:	f043 0304 	orr.w	r3, r3, #4
 80080b6:	6713      	str	r3, [r2, #112]	; 0x70
 80080b8:	4b80      	ldr	r3, [pc, #512]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 80080ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080bc:	4a7f      	ldr	r2, [pc, #508]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 80080be:	f043 0301 	orr.w	r3, r3, #1
 80080c2:	6713      	str	r3, [r2, #112]	; 0x70
 80080c4:	e00b      	b.n	80080de <HAL_RCC_OscConfig+0x4e6>
 80080c6:	4b7d      	ldr	r3, [pc, #500]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 80080c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ca:	4a7c      	ldr	r2, [pc, #496]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 80080cc:	f023 0301 	bic.w	r3, r3, #1
 80080d0:	6713      	str	r3, [r2, #112]	; 0x70
 80080d2:	4b7a      	ldr	r3, [pc, #488]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 80080d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d6:	4a79      	ldr	r2, [pc, #484]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 80080d8:	f023 0304 	bic.w	r3, r3, #4
 80080dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d015      	beq.n	8008112 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080e6:	f7fc fc35 	bl	8004954 <HAL_GetTick>
 80080ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080ec:	e00a      	b.n	8008104 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080ee:	f7fc fc31 	bl	8004954 <HAL_GetTick>
 80080f2:	4602      	mov	r2, r0
 80080f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d901      	bls.n	8008104 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e120      	b.n	8008346 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008104:	4b6d      	ldr	r3, [pc, #436]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 8008106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008108:	f003 0302 	and.w	r3, r3, #2
 800810c:	2b00      	cmp	r3, #0
 800810e:	d0ee      	beq.n	80080ee <HAL_RCC_OscConfig+0x4f6>
 8008110:	e014      	b.n	800813c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008112:	f7fc fc1f 	bl	8004954 <HAL_GetTick>
 8008116:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008118:	e00a      	b.n	8008130 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800811a:	f7fc fc1b 	bl	8004954 <HAL_GetTick>
 800811e:	4602      	mov	r2, r0
 8008120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	f241 3288 	movw	r2, #5000	; 0x1388
 8008128:	4293      	cmp	r3, r2
 800812a:	d901      	bls.n	8008130 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	e10a      	b.n	8008346 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008130:	4b62      	ldr	r3, [pc, #392]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 8008132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008134:	f003 0302 	and.w	r3, r3, #2
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1ee      	bne.n	800811a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	2b00      	cmp	r3, #0
 8008142:	f000 80ff 	beq.w	8008344 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008146:	4b5d      	ldr	r3, [pc, #372]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800814e:	2b18      	cmp	r3, #24
 8008150:	f000 80ba 	beq.w	80082c8 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008158:	2b02      	cmp	r3, #2
 800815a:	f040 8095 	bne.w	8008288 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800815e:	4b57      	ldr	r3, [pc, #348]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a56      	ldr	r2, [pc, #344]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 8008164:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800816a:	f7fc fbf3 	bl	8004954 <HAL_GetTick>
 800816e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008170:	e008      	b.n	8008184 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008172:	f7fc fbef 	bl	8004954 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d901      	bls.n	8008184 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e0e0      	b.n	8008346 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008184:	4b4d      	ldr	r3, [pc, #308]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1f0      	bne.n	8008172 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008190:	4b4a      	ldr	r3, [pc, #296]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 8008192:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008194:	4b4a      	ldr	r3, [pc, #296]	; (80082c0 <HAL_RCC_OscConfig+0x6c8>)
 8008196:	4013      	ands	r3, r2
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80081a0:	0112      	lsls	r2, r2, #4
 80081a2:	430a      	orrs	r2, r1
 80081a4:	4945      	ldr	r1, [pc, #276]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	628b      	str	r3, [r1, #40]	; 0x28
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ae:	3b01      	subs	r3, #1
 80081b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081b8:	3b01      	subs	r3, #1
 80081ba:	025b      	lsls	r3, r3, #9
 80081bc:	b29b      	uxth	r3, r3
 80081be:	431a      	orrs	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c4:	3b01      	subs	r3, #1
 80081c6:	041b      	lsls	r3, r3, #16
 80081c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081cc:	431a      	orrs	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d2:	3b01      	subs	r3, #1
 80081d4:	061b      	lsls	r3, r3, #24
 80081d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081da:	4938      	ldr	r1, [pc, #224]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80081e0:	4b36      	ldr	r3, [pc, #216]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 80081e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e4:	4a35      	ldr	r2, [pc, #212]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 80081e6:	f023 0301 	bic.w	r3, r3, #1
 80081ea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80081ec:	4b33      	ldr	r3, [pc, #204]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 80081ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081f0:	4b34      	ldr	r3, [pc, #208]	; (80082c4 <HAL_RCC_OscConfig+0x6cc>)
 80081f2:	4013      	ands	r3, r2
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80081f8:	00d2      	lsls	r2, r2, #3
 80081fa:	4930      	ldr	r1, [pc, #192]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 80081fc:	4313      	orrs	r3, r2
 80081fe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008200:	4b2e      	ldr	r3, [pc, #184]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 8008202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008204:	f023 020c 	bic.w	r2, r3, #12
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820c:	492b      	ldr	r1, [pc, #172]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 800820e:	4313      	orrs	r3, r2
 8008210:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008212:	4b2a      	ldr	r3, [pc, #168]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 8008214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008216:	f023 0202 	bic.w	r2, r3, #2
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800821e:	4927      	ldr	r1, [pc, #156]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 8008220:	4313      	orrs	r3, r2
 8008222:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008224:	4b25      	ldr	r3, [pc, #148]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 8008226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008228:	4a24      	ldr	r2, [pc, #144]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 800822a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800822e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008230:	4b22      	ldr	r3, [pc, #136]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 8008232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008234:	4a21      	ldr	r2, [pc, #132]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 8008236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800823a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800823c:	4b1f      	ldr	r3, [pc, #124]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 800823e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008240:	4a1e      	ldr	r2, [pc, #120]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 8008242:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008246:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008248:	4b1c      	ldr	r3, [pc, #112]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	4a1b      	ldr	r2, [pc, #108]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 800824e:	f043 0301 	orr.w	r3, r3, #1
 8008252:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008254:	4b19      	ldr	r3, [pc, #100]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a18      	ldr	r2, [pc, #96]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 800825a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800825e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008260:	f7fc fb78 	bl	8004954 <HAL_GetTick>
 8008264:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008266:	e008      	b.n	800827a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008268:	f7fc fb74 	bl	8004954 <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	2b02      	cmp	r3, #2
 8008274:	d901      	bls.n	800827a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e065      	b.n	8008346 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800827a:	4b10      	ldr	r3, [pc, #64]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0f0      	beq.n	8008268 <HAL_RCC_OscConfig+0x670>
 8008286:	e05d      	b.n	8008344 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008288:	4b0c      	ldr	r3, [pc, #48]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a0b      	ldr	r2, [pc, #44]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 800828e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008294:	f7fc fb5e 	bl	8004954 <HAL_GetTick>
 8008298:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800829a:	e008      	b.n	80082ae <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800829c:	f7fc fb5a 	bl	8004954 <HAL_GetTick>
 80082a0:	4602      	mov	r2, r0
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d901      	bls.n	80082ae <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e04b      	b.n	8008346 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082ae:	4b03      	ldr	r3, [pc, #12]	; (80082bc <HAL_RCC_OscConfig+0x6c4>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1f0      	bne.n	800829c <HAL_RCC_OscConfig+0x6a4>
 80082ba:	e043      	b.n	8008344 <HAL_RCC_OscConfig+0x74c>
 80082bc:	58024400 	.word	0x58024400
 80082c0:	fffffc0c 	.word	0xfffffc0c
 80082c4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80082c8:	4b21      	ldr	r3, [pc, #132]	; (8008350 <HAL_RCC_OscConfig+0x758>)
 80082ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80082ce:	4b20      	ldr	r3, [pc, #128]	; (8008350 <HAL_RCC_OscConfig+0x758>)
 80082d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d031      	beq.n	8008340 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	f003 0203 	and.w	r2, r3, #3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d12a      	bne.n	8008340 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	091b      	lsrs	r3, r3, #4
 80082ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d122      	bne.n	8008340 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008304:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008306:	429a      	cmp	r2, r3
 8008308:	d11a      	bne.n	8008340 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	0a5b      	lsrs	r3, r3, #9
 800830e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008316:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008318:	429a      	cmp	r2, r3
 800831a:	d111      	bne.n	8008340 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	0c1b      	lsrs	r3, r3, #16
 8008320:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008328:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800832a:	429a      	cmp	r2, r3
 800832c:	d108      	bne.n	8008340 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	0e1b      	lsrs	r3, r3, #24
 8008332:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800833a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800833c:	429a      	cmp	r2, r3
 800833e:	d001      	beq.n	8008344 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	e000      	b.n	8008346 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3730      	adds	r7, #48	; 0x30
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	58024400 	.word	0x58024400

08008354 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e19c      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008368:	4b8a      	ldr	r3, [pc, #552]	; (8008594 <HAL_RCC_ClockConfig+0x240>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 030f 	and.w	r3, r3, #15
 8008370:	683a      	ldr	r2, [r7, #0]
 8008372:	429a      	cmp	r2, r3
 8008374:	d910      	bls.n	8008398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008376:	4b87      	ldr	r3, [pc, #540]	; (8008594 <HAL_RCC_ClockConfig+0x240>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f023 020f 	bic.w	r2, r3, #15
 800837e:	4985      	ldr	r1, [pc, #532]	; (8008594 <HAL_RCC_ClockConfig+0x240>)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	4313      	orrs	r3, r2
 8008384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008386:	4b83      	ldr	r3, [pc, #524]	; (8008594 <HAL_RCC_ClockConfig+0x240>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 030f 	and.w	r3, r3, #15
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	429a      	cmp	r2, r3
 8008392:	d001      	beq.n	8008398 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e184      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0304 	and.w	r3, r3, #4
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d010      	beq.n	80083c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	691a      	ldr	r2, [r3, #16]
 80083a8:	4b7b      	ldr	r3, [pc, #492]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d908      	bls.n	80083c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083b4:	4b78      	ldr	r3, [pc, #480]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	4975      	ldr	r1, [pc, #468]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 0308 	and.w	r3, r3, #8
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d010      	beq.n	80083f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	695a      	ldr	r2, [r3, #20]
 80083d6:	4b70      	ldr	r3, [pc, #448]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083de:	429a      	cmp	r2, r3
 80083e0:	d908      	bls.n	80083f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80083e2:	4b6d      	ldr	r3, [pc, #436]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 80083e4:	69db      	ldr	r3, [r3, #28]
 80083e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	496a      	ldr	r1, [pc, #424]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 80083f0:	4313      	orrs	r3, r2
 80083f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0310 	and.w	r3, r3, #16
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d010      	beq.n	8008422 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	699a      	ldr	r2, [r3, #24]
 8008404:	4b64      	ldr	r3, [pc, #400]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008406:	69db      	ldr	r3, [r3, #28]
 8008408:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800840c:	429a      	cmp	r2, r3
 800840e:	d908      	bls.n	8008422 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008410:	4b61      	ldr	r3, [pc, #388]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008412:	69db      	ldr	r3, [r3, #28]
 8008414:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	699b      	ldr	r3, [r3, #24]
 800841c:	495e      	ldr	r1, [pc, #376]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 800841e:	4313      	orrs	r3, r2
 8008420:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0320 	and.w	r3, r3, #32
 800842a:	2b00      	cmp	r3, #0
 800842c:	d010      	beq.n	8008450 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	69da      	ldr	r2, [r3, #28]
 8008432:	4b59      	ldr	r3, [pc, #356]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800843a:	429a      	cmp	r2, r3
 800843c:	d908      	bls.n	8008450 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800843e:	4b56      	ldr	r3, [pc, #344]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	4953      	ldr	r1, [pc, #332]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 800844c:	4313      	orrs	r3, r2
 800844e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0302 	and.w	r3, r3, #2
 8008458:	2b00      	cmp	r3, #0
 800845a:	d010      	beq.n	800847e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	68da      	ldr	r2, [r3, #12]
 8008460:	4b4d      	ldr	r3, [pc, #308]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	f003 030f 	and.w	r3, r3, #15
 8008468:	429a      	cmp	r2, r3
 800846a:	d908      	bls.n	800847e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800846c:	4b4a      	ldr	r3, [pc, #296]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	f023 020f 	bic.w	r2, r3, #15
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	4947      	ldr	r1, [pc, #284]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 800847a:	4313      	orrs	r3, r2
 800847c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d055      	beq.n	8008536 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800848a:	4b43      	ldr	r3, [pc, #268]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	4940      	ldr	r1, [pc, #256]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008498:	4313      	orrs	r3, r2
 800849a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d107      	bne.n	80084b4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084a4:	4b3c      	ldr	r3, [pc, #240]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d121      	bne.n	80084f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e0f6      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d107      	bne.n	80084cc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084bc:	4b36      	ldr	r3, [pc, #216]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d115      	bne.n	80084f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e0ea      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d107      	bne.n	80084e4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084d4:	4b30      	ldr	r3, [pc, #192]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d109      	bne.n	80084f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e0de      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084e4:	4b2c      	ldr	r3, [pc, #176]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 0304 	and.w	r3, r3, #4
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e0d6      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80084f4:	4b28      	ldr	r3, [pc, #160]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	f023 0207 	bic.w	r2, r3, #7
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	4925      	ldr	r1, [pc, #148]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008502:	4313      	orrs	r3, r2
 8008504:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008506:	f7fc fa25 	bl	8004954 <HAL_GetTick>
 800850a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800850c:	e00a      	b.n	8008524 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800850e:	f7fc fa21 	bl	8004954 <HAL_GetTick>
 8008512:	4602      	mov	r2, r0
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	f241 3288 	movw	r2, #5000	; 0x1388
 800851c:	4293      	cmp	r3, r2
 800851e:	d901      	bls.n	8008524 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e0be      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008524:	4b1c      	ldr	r3, [pc, #112]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	00db      	lsls	r3, r3, #3
 8008532:	429a      	cmp	r2, r3
 8008534:	d1eb      	bne.n	800850e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0302 	and.w	r3, r3, #2
 800853e:	2b00      	cmp	r3, #0
 8008540:	d010      	beq.n	8008564 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68da      	ldr	r2, [r3, #12]
 8008546:	4b14      	ldr	r3, [pc, #80]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	f003 030f 	and.w	r3, r3, #15
 800854e:	429a      	cmp	r2, r3
 8008550:	d208      	bcs.n	8008564 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008552:	4b11      	ldr	r3, [pc, #68]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	f023 020f 	bic.w	r2, r3, #15
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	490e      	ldr	r1, [pc, #56]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008560:	4313      	orrs	r3, r2
 8008562:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008564:	4b0b      	ldr	r3, [pc, #44]	; (8008594 <HAL_RCC_ClockConfig+0x240>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 030f 	and.w	r3, r3, #15
 800856c:	683a      	ldr	r2, [r7, #0]
 800856e:	429a      	cmp	r2, r3
 8008570:	d214      	bcs.n	800859c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008572:	4b08      	ldr	r3, [pc, #32]	; (8008594 <HAL_RCC_ClockConfig+0x240>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f023 020f 	bic.w	r2, r3, #15
 800857a:	4906      	ldr	r1, [pc, #24]	; (8008594 <HAL_RCC_ClockConfig+0x240>)
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	4313      	orrs	r3, r2
 8008580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008582:	4b04      	ldr	r3, [pc, #16]	; (8008594 <HAL_RCC_ClockConfig+0x240>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 030f 	and.w	r3, r3, #15
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	429a      	cmp	r2, r3
 800858e:	d005      	beq.n	800859c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e086      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>
 8008594:	52002000 	.word	0x52002000
 8008598:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 0304 	and.w	r3, r3, #4
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d010      	beq.n	80085ca <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	691a      	ldr	r2, [r3, #16]
 80085ac:	4b3f      	ldr	r3, [pc, #252]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d208      	bcs.n	80085ca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085b8:	4b3c      	ldr	r3, [pc, #240]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	4939      	ldr	r1, [pc, #228]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0308 	and.w	r3, r3, #8
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d010      	beq.n	80085f8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	695a      	ldr	r2, [r3, #20]
 80085da:	4b34      	ldr	r3, [pc, #208]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d208      	bcs.n	80085f8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80085e6:	4b31      	ldr	r3, [pc, #196]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 80085e8:	69db      	ldr	r3, [r3, #28]
 80085ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	492e      	ldr	r1, [pc, #184]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 80085f4:	4313      	orrs	r3, r2
 80085f6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0310 	and.w	r3, r3, #16
 8008600:	2b00      	cmp	r3, #0
 8008602:	d010      	beq.n	8008626 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	699a      	ldr	r2, [r3, #24]
 8008608:	4b28      	ldr	r3, [pc, #160]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 800860a:	69db      	ldr	r3, [r3, #28]
 800860c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008610:	429a      	cmp	r2, r3
 8008612:	d208      	bcs.n	8008626 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008614:	4b25      	ldr	r3, [pc, #148]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 8008616:	69db      	ldr	r3, [r3, #28]
 8008618:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	4922      	ldr	r1, [pc, #136]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 8008622:	4313      	orrs	r3, r2
 8008624:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 0320 	and.w	r3, r3, #32
 800862e:	2b00      	cmp	r3, #0
 8008630:	d010      	beq.n	8008654 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	69da      	ldr	r2, [r3, #28]
 8008636:	4b1d      	ldr	r3, [pc, #116]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800863e:	429a      	cmp	r2, r3
 8008640:	d208      	bcs.n	8008654 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008642:	4b1a      	ldr	r3, [pc, #104]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 8008644:	6a1b      	ldr	r3, [r3, #32]
 8008646:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	69db      	ldr	r3, [r3, #28]
 800864e:	4917      	ldr	r1, [pc, #92]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 8008650:	4313      	orrs	r3, r2
 8008652:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008654:	f000 f834 	bl	80086c0 <HAL_RCC_GetSysClockFreq>
 8008658:	4602      	mov	r2, r0
 800865a:	4b14      	ldr	r3, [pc, #80]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	0a1b      	lsrs	r3, r3, #8
 8008660:	f003 030f 	and.w	r3, r3, #15
 8008664:	4912      	ldr	r1, [pc, #72]	; (80086b0 <HAL_RCC_ClockConfig+0x35c>)
 8008666:	5ccb      	ldrb	r3, [r1, r3]
 8008668:	f003 031f 	and.w	r3, r3, #31
 800866c:	fa22 f303 	lsr.w	r3, r2, r3
 8008670:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008672:	4b0e      	ldr	r3, [pc, #56]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	f003 030f 	and.w	r3, r3, #15
 800867a:	4a0d      	ldr	r2, [pc, #52]	; (80086b0 <HAL_RCC_ClockConfig+0x35c>)
 800867c:	5cd3      	ldrb	r3, [r2, r3]
 800867e:	f003 031f 	and.w	r3, r3, #31
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	fa22 f303 	lsr.w	r3, r2, r3
 8008688:	4a0a      	ldr	r2, [pc, #40]	; (80086b4 <HAL_RCC_ClockConfig+0x360>)
 800868a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800868c:	4a0a      	ldr	r2, [pc, #40]	; (80086b8 <HAL_RCC_ClockConfig+0x364>)
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008692:	4b0a      	ldr	r3, [pc, #40]	; (80086bc <HAL_RCC_ClockConfig+0x368>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f7fc f912 	bl	80048c0 <HAL_InitTick>
 800869c:	4603      	mov	r3, r0
 800869e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3718      	adds	r7, #24
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	58024400 	.word	0x58024400
 80086b0:	0800df6c 	.word	0x0800df6c
 80086b4:	24000008 	.word	0x24000008
 80086b8:	24000004 	.word	0x24000004
 80086bc:	2400000c 	.word	0x2400000c

080086c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b089      	sub	sp, #36	; 0x24
 80086c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086c6:	4bb3      	ldr	r3, [pc, #716]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086ce:	2b18      	cmp	r3, #24
 80086d0:	f200 8155 	bhi.w	800897e <HAL_RCC_GetSysClockFreq+0x2be>
 80086d4:	a201      	add	r2, pc, #4	; (adr r2, 80086dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80086d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086da:	bf00      	nop
 80086dc:	08008741 	.word	0x08008741
 80086e0:	0800897f 	.word	0x0800897f
 80086e4:	0800897f 	.word	0x0800897f
 80086e8:	0800897f 	.word	0x0800897f
 80086ec:	0800897f 	.word	0x0800897f
 80086f0:	0800897f 	.word	0x0800897f
 80086f4:	0800897f 	.word	0x0800897f
 80086f8:	0800897f 	.word	0x0800897f
 80086fc:	08008767 	.word	0x08008767
 8008700:	0800897f 	.word	0x0800897f
 8008704:	0800897f 	.word	0x0800897f
 8008708:	0800897f 	.word	0x0800897f
 800870c:	0800897f 	.word	0x0800897f
 8008710:	0800897f 	.word	0x0800897f
 8008714:	0800897f 	.word	0x0800897f
 8008718:	0800897f 	.word	0x0800897f
 800871c:	0800876d 	.word	0x0800876d
 8008720:	0800897f 	.word	0x0800897f
 8008724:	0800897f 	.word	0x0800897f
 8008728:	0800897f 	.word	0x0800897f
 800872c:	0800897f 	.word	0x0800897f
 8008730:	0800897f 	.word	0x0800897f
 8008734:	0800897f 	.word	0x0800897f
 8008738:	0800897f 	.word	0x0800897f
 800873c:	08008773 	.word	0x08008773
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008740:	4b94      	ldr	r3, [pc, #592]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0320 	and.w	r3, r3, #32
 8008748:	2b00      	cmp	r3, #0
 800874a:	d009      	beq.n	8008760 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800874c:	4b91      	ldr	r3, [pc, #580]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	08db      	lsrs	r3, r3, #3
 8008752:	f003 0303 	and.w	r3, r3, #3
 8008756:	4a90      	ldr	r2, [pc, #576]	; (8008998 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008758:	fa22 f303 	lsr.w	r3, r2, r3
 800875c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800875e:	e111      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008760:	4b8d      	ldr	r3, [pc, #564]	; (8008998 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008762:	61bb      	str	r3, [r7, #24]
    break;
 8008764:	e10e      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008766:	4b8d      	ldr	r3, [pc, #564]	; (800899c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008768:	61bb      	str	r3, [r7, #24]
    break;
 800876a:	e10b      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800876c:	4b8c      	ldr	r3, [pc, #560]	; (80089a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800876e:	61bb      	str	r3, [r7, #24]
    break;
 8008770:	e108      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008772:	4b88      	ldr	r3, [pc, #544]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008776:	f003 0303 	and.w	r3, r3, #3
 800877a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800877c:	4b85      	ldr	r3, [pc, #532]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800877e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008780:	091b      	lsrs	r3, r3, #4
 8008782:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008786:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008788:	4b82      	ldr	r3, [pc, #520]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800878a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878c:	f003 0301 	and.w	r3, r3, #1
 8008790:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008792:	4b80      	ldr	r3, [pc, #512]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008796:	08db      	lsrs	r3, r3, #3
 8008798:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	fb02 f303 	mul.w	r3, r2, r3
 80087a2:	ee07 3a90 	vmov	s15, r3
 80087a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087aa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f000 80e1 	beq.w	8008978 <HAL_RCC_GetSysClockFreq+0x2b8>
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	f000 8083 	beq.w	80088c4 <HAL_RCC_GetSysClockFreq+0x204>
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	f200 80a1 	bhi.w	8008908 <HAL_RCC_GetSysClockFreq+0x248>
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d003      	beq.n	80087d4 <HAL_RCC_GetSysClockFreq+0x114>
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d056      	beq.n	8008880 <HAL_RCC_GetSysClockFreq+0x1c0>
 80087d2:	e099      	b.n	8008908 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087d4:	4b6f      	ldr	r3, [pc, #444]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0320 	and.w	r3, r3, #32
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d02d      	beq.n	800883c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087e0:	4b6c      	ldr	r3, [pc, #432]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	08db      	lsrs	r3, r3, #3
 80087e6:	f003 0303 	and.w	r3, r3, #3
 80087ea:	4a6b      	ldr	r2, [pc, #428]	; (8008998 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80087ec:	fa22 f303 	lsr.w	r3, r2, r3
 80087f0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	ee07 3a90 	vmov	s15, r3
 80087f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	ee07 3a90 	vmov	s15, r3
 8008802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800880a:	4b62      	ldr	r3, [pc, #392]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800880c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008812:	ee07 3a90 	vmov	s15, r3
 8008816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800881a:	ed97 6a02 	vldr	s12, [r7, #8]
 800881e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80089a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800882a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800882e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008836:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800883a:	e087      	b.n	800894c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008846:	eddf 6a58 	vldr	s13, [pc, #352]	; 80089a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800884a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800884e:	4b51      	ldr	r3, [pc, #324]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008856:	ee07 3a90 	vmov	s15, r3
 800885a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800885e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008862:	eddf 5a50 	vldr	s11, [pc, #320]	; 80089a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800886a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800886e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800887a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800887e:	e065      	b.n	800894c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	ee07 3a90 	vmov	s15, r3
 8008886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800888a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80089ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800888e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008892:	4b40      	ldr	r3, [pc, #256]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800889a:	ee07 3a90 	vmov	s15, r3
 800889e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80088a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80089a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088c2:	e043      	b.n	800894c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	ee07 3a90 	vmov	s15, r3
 80088ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80089b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80088d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088d6:	4b2f      	ldr	r3, [pc, #188]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088de:	ee07 3a90 	vmov	s15, r3
 80088e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80088ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80089a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008906:	e021      	b.n	800894c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	ee07 3a90 	vmov	s15, r3
 800890e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008912:	eddf 6a26 	vldr	s13, [pc, #152]	; 80089ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8008916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800891a:	4b1e      	ldr	r3, [pc, #120]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800891c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008922:	ee07 3a90 	vmov	s15, r3
 8008926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800892a:	ed97 6a02 	vldr	s12, [r7, #8]
 800892e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80089a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800893a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800893e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800894a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800894c:	4b11      	ldr	r3, [pc, #68]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800894e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008950:	0a5b      	lsrs	r3, r3, #9
 8008952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008956:	3301      	adds	r3, #1
 8008958:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	ee07 3a90 	vmov	s15, r3
 8008960:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008964:	edd7 6a07 	vldr	s13, [r7, #28]
 8008968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800896c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008970:	ee17 3a90 	vmov	r3, s15
 8008974:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008976:	e005      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	61bb      	str	r3, [r7, #24]
    break;
 800897c:	e002      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800897e:	4b07      	ldr	r3, [pc, #28]	; (800899c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008980:	61bb      	str	r3, [r7, #24]
    break;
 8008982:	bf00      	nop
  }

  return sysclockfreq;
 8008984:	69bb      	ldr	r3, [r7, #24]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3724      	adds	r7, #36	; 0x24
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	58024400 	.word	0x58024400
 8008998:	03d09000 	.word	0x03d09000
 800899c:	003d0900 	.word	0x003d0900
 80089a0:	007a1200 	.word	0x007a1200
 80089a4:	46000000 	.word	0x46000000
 80089a8:	4c742400 	.word	0x4c742400
 80089ac:	4a742400 	.word	0x4a742400
 80089b0:	4af42400 	.word	0x4af42400

080089b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089ba:	f7ff fe81 	bl	80086c0 <HAL_RCC_GetSysClockFreq>
 80089be:	4602      	mov	r2, r0
 80089c0:	4b10      	ldr	r3, [pc, #64]	; (8008a04 <HAL_RCC_GetHCLKFreq+0x50>)
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	0a1b      	lsrs	r3, r3, #8
 80089c6:	f003 030f 	and.w	r3, r3, #15
 80089ca:	490f      	ldr	r1, [pc, #60]	; (8008a08 <HAL_RCC_GetHCLKFreq+0x54>)
 80089cc:	5ccb      	ldrb	r3, [r1, r3]
 80089ce:	f003 031f 	and.w	r3, r3, #31
 80089d2:	fa22 f303 	lsr.w	r3, r2, r3
 80089d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089d8:	4b0a      	ldr	r3, [pc, #40]	; (8008a04 <HAL_RCC_GetHCLKFreq+0x50>)
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	f003 030f 	and.w	r3, r3, #15
 80089e0:	4a09      	ldr	r2, [pc, #36]	; (8008a08 <HAL_RCC_GetHCLKFreq+0x54>)
 80089e2:	5cd3      	ldrb	r3, [r2, r3]
 80089e4:	f003 031f 	and.w	r3, r3, #31
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	fa22 f303 	lsr.w	r3, r2, r3
 80089ee:	4a07      	ldr	r2, [pc, #28]	; (8008a0c <HAL_RCC_GetHCLKFreq+0x58>)
 80089f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80089f2:	4a07      	ldr	r2, [pc, #28]	; (8008a10 <HAL_RCC_GetHCLKFreq+0x5c>)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80089f8:	4b04      	ldr	r3, [pc, #16]	; (8008a0c <HAL_RCC_GetHCLKFreq+0x58>)
 80089fa:	681b      	ldr	r3, [r3, #0]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	58024400 	.word	0x58024400
 8008a08:	0800df6c 	.word	0x0800df6c
 8008a0c:	24000008 	.word	0x24000008
 8008a10:	24000004 	.word	0x24000004

08008a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008a18:	f7ff ffcc 	bl	80089b4 <HAL_RCC_GetHCLKFreq>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	4b06      	ldr	r3, [pc, #24]	; (8008a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	091b      	lsrs	r3, r3, #4
 8008a24:	f003 0307 	and.w	r3, r3, #7
 8008a28:	4904      	ldr	r1, [pc, #16]	; (8008a3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a2a:	5ccb      	ldrb	r3, [r1, r3]
 8008a2c:	f003 031f 	and.w	r3, r3, #31
 8008a30:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	58024400 	.word	0x58024400
 8008a3c:	0800df6c 	.word	0x0800df6c

08008a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008a44:	f7ff ffb6 	bl	80089b4 <HAL_RCC_GetHCLKFreq>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	4b06      	ldr	r3, [pc, #24]	; (8008a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	0a1b      	lsrs	r3, r3, #8
 8008a50:	f003 0307 	and.w	r3, r3, #7
 8008a54:	4904      	ldr	r1, [pc, #16]	; (8008a68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a56:	5ccb      	ldrb	r3, [r1, r3]
 8008a58:	f003 031f 	and.w	r3, r3, #31
 8008a5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	58024400 	.word	0x58024400
 8008a68:	0800df6c 	.word	0x0800df6c

08008a6c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008a74:	2300      	movs	r3, #0
 8008a76:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008a78:	2300      	movs	r3, #0
 8008a7a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d03f      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a90:	d02a      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008a92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a96:	d824      	bhi.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008a98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a9c:	d018      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008a9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008aa2:	d81e      	bhi.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d003      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008aa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008aac:	d007      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008aae:	e018      	b.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ab0:	4ba4      	ldr	r3, [pc, #656]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab4:	4aa3      	ldr	r2, [pc, #652]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008aba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008abc:	e015      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	2102      	movs	r1, #2
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f001 f989 	bl	8009ddc <RCCEx_PLL2_Config>
 8008aca:	4603      	mov	r3, r0
 8008acc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008ace:	e00c      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	3324      	adds	r3, #36	; 0x24
 8008ad4:	2102      	movs	r1, #2
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f001 fa32 	bl	8009f40 <RCCEx_PLL3_Config>
 8008adc:	4603      	mov	r3, r0
 8008ade:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008ae0:	e003      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ae6:	e000      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008ae8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008aea:	7dfb      	ldrb	r3, [r7, #23]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d109      	bne.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008af0:	4b94      	ldr	r3, [pc, #592]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008af4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008afc:	4991      	ldr	r1, [pc, #580]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008afe:	4313      	orrs	r3, r2
 8008b00:	650b      	str	r3, [r1, #80]	; 0x50
 8008b02:	e001      	b.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b04:	7dfb      	ldrb	r3, [r7, #23]
 8008b06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d03d      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b18:	2b04      	cmp	r3, #4
 8008b1a:	d826      	bhi.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008b1c:	a201      	add	r2, pc, #4	; (adr r2, 8008b24 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b22:	bf00      	nop
 8008b24:	08008b39 	.word	0x08008b39
 8008b28:	08008b47 	.word	0x08008b47
 8008b2c:	08008b59 	.word	0x08008b59
 8008b30:	08008b71 	.word	0x08008b71
 8008b34:	08008b71 	.word	0x08008b71
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b38:	4b82      	ldr	r3, [pc, #520]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3c:	4a81      	ldr	r2, [pc, #516]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b44:	e015      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	3304      	adds	r3, #4
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f001 f945 	bl	8009ddc <RCCEx_PLL2_Config>
 8008b52:	4603      	mov	r3, r0
 8008b54:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b56:	e00c      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	3324      	adds	r3, #36	; 0x24
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f001 f9ee 	bl	8009f40 <RCCEx_PLL3_Config>
 8008b64:	4603      	mov	r3, r0
 8008b66:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b68:	e003      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b6e:	e000      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b72:	7dfb      	ldrb	r3, [r7, #23]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d109      	bne.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b78:	4b72      	ldr	r3, [pc, #456]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b7c:	f023 0207 	bic.w	r2, r3, #7
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b84:	496f      	ldr	r1, [pc, #444]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008b86:	4313      	orrs	r3, r2
 8008b88:	650b      	str	r3, [r1, #80]	; 0x50
 8008b8a:	e001      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b8c:	7dfb      	ldrb	r3, [r7, #23]
 8008b8e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d051      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008ba2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008ba6:	d036      	beq.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008ba8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008bac:	d830      	bhi.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008bae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bb2:	d032      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8008bb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bb8:	d82a      	bhi.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008bba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008bbe:	d02e      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008bc0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008bc4:	d824      	bhi.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008bc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bca:	d018      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008bcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bd0:	d81e      	bhi.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d003      	beq.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x172>
 8008bd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bda:	d007      	beq.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008bdc:	e018      	b.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bde:	4b59      	ldr	r3, [pc, #356]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be2:	4a58      	ldr	r2, [pc, #352]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008be8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008bea:	e019      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	3304      	adds	r3, #4
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f001 f8f2 	bl	8009ddc <RCCEx_PLL2_Config>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008bfc:	e010      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	3324      	adds	r3, #36	; 0x24
 8008c02:	2100      	movs	r1, #0
 8008c04:	4618      	mov	r0, r3
 8008c06:	f001 f99b 	bl	8009f40 <RCCEx_PLL3_Config>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c0e:	e007      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	75fb      	strb	r3, [r7, #23]
      break;
 8008c14:	e004      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008c16:	bf00      	nop
 8008c18:	e002      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008c1a:	bf00      	nop
 8008c1c:	e000      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008c1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c20:	7dfb      	ldrb	r3, [r7, #23]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10a      	bne.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008c26:	4b47      	ldr	r3, [pc, #284]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c2a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008c34:	4943      	ldr	r1, [pc, #268]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c36:	4313      	orrs	r3, r2
 8008c38:	658b      	str	r3, [r1, #88]	; 0x58
 8008c3a:	e001      	b.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c3c:	7dfb      	ldrb	r3, [r7, #23]
 8008c3e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d051      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c52:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008c56:	d036      	beq.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008c58:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008c5c:	d830      	bhi.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008c5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c62:	d032      	beq.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8008c64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c68:	d82a      	bhi.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008c6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c6e:	d02e      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008c70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c74:	d824      	bhi.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008c76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c7a:	d018      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008c7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c80:	d81e      	bhi.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d003      	beq.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008c86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c8a:	d007      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008c8c:	e018      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c8e:	4b2d      	ldr	r3, [pc, #180]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c92:	4a2c      	ldr	r2, [pc, #176]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c9a:	e019      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	3304      	adds	r3, #4
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f001 f89a 	bl	8009ddc <RCCEx_PLL2_Config>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008cac:	e010      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	3324      	adds	r3, #36	; 0x24
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f001 f943 	bl	8009f40 <RCCEx_PLL3_Config>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cbe:	e007      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8008cc4:	e004      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008cc6:	bf00      	nop
 8008cc8:	e002      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008cca:	bf00      	nop
 8008ccc:	e000      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008cce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cd0:	7dfb      	ldrb	r3, [r7, #23]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10a      	bne.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008cd6:	4b1b      	ldr	r3, [pc, #108]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cda:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008ce4:	4917      	ldr	r1, [pc, #92]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	658b      	str	r3, [r1, #88]	; 0x58
 8008cea:	e001      	b.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cec:	7dfb      	ldrb	r3, [r7, #23]
 8008cee:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d035      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d00:	2b30      	cmp	r3, #48	; 0x30
 8008d02:	d01c      	beq.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008d04:	2b30      	cmp	r3, #48	; 0x30
 8008d06:	d817      	bhi.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008d08:	2b20      	cmp	r3, #32
 8008d0a:	d00c      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008d0c:	2b20      	cmp	r3, #32
 8008d0e:	d813      	bhi.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d019      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8008d14:	2b10      	cmp	r3, #16
 8008d16:	d10f      	bne.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d18:	4b0a      	ldr	r3, [pc, #40]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1c:	4a09      	ldr	r2, [pc, #36]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008d24:	e011      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	3304      	adds	r3, #4
 8008d2a:	2102      	movs	r1, #2
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f001 f855 	bl	8009ddc <RCCEx_PLL2_Config>
 8008d32:	4603      	mov	r3, r0
 8008d34:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008d36:	e008      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d3c:	e005      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8008d3e:	bf00      	nop
 8008d40:	e003      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008d42:	bf00      	nop
 8008d44:	58024400 	.word	0x58024400
      break;
 8008d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d109      	bne.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008d50:	4ba3      	ldr	r3, [pc, #652]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d5c:	49a0      	ldr	r1, [pc, #640]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008d62:	e001      	b.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d64:	7dfb      	ldrb	r3, [r7, #23]
 8008d66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d047      	beq.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d7c:	d030      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d82:	d82a      	bhi.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008d84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d88:	d02c      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008d8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d8e:	d824      	bhi.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d94:	d018      	beq.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d9a:	d81e      	bhi.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d003      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008da4:	d007      	beq.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008da6:	e018      	b.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008da8:	4b8d      	ldr	r3, [pc, #564]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dac:	4a8c      	ldr	r2, [pc, #560]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008db2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008db4:	e017      	b.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	3304      	adds	r3, #4
 8008dba:	2100      	movs	r1, #0
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f001 f80d 	bl	8009ddc <RCCEx_PLL2_Config>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008dc6:	e00e      	b.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	3324      	adds	r3, #36	; 0x24
 8008dcc:	2100      	movs	r1, #0
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f001 f8b6 	bl	8009f40 <RCCEx_PLL3_Config>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008dd8:	e005      	b.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8008dde:	e002      	b.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008de0:	bf00      	nop
 8008de2:	e000      	b.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d109      	bne.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008dec:	4b7c      	ldr	r3, [pc, #496]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008df0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df8:	4979      	ldr	r1, [pc, #484]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	650b      	str	r3, [r1, #80]	; 0x50
 8008dfe:	e001      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e00:	7dfb      	ldrb	r3, [r7, #23]
 8008e02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d049      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e18:	d02e      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8008e1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e1e:	d828      	bhi.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008e20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e24:	d02a      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008e26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e2a:	d822      	bhi.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008e2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e30:	d026      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008e32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e36:	d81c      	bhi.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008e38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e3c:	d010      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008e3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e42:	d816      	bhi.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d01d      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e4c:	d111      	bne.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	3304      	adds	r3, #4
 8008e52:	2101      	movs	r1, #1
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 ffc1 	bl	8009ddc <RCCEx_PLL2_Config>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008e5e:	e012      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	3324      	adds	r3, #36	; 0x24
 8008e64:	2101      	movs	r1, #1
 8008e66:	4618      	mov	r0, r3
 8008e68:	f001 f86a 	bl	8009f40 <RCCEx_PLL3_Config>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008e70:	e009      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	75fb      	strb	r3, [r7, #23]
      break;
 8008e76:	e006      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008e78:	bf00      	nop
 8008e7a:	e004      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008e7c:	bf00      	nop
 8008e7e:	e002      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008e80:	bf00      	nop
 8008e82:	e000      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008e84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e86:	7dfb      	ldrb	r3, [r7, #23]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d109      	bne.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008e8c:	4b54      	ldr	r3, [pc, #336]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e90:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e98:	4951      	ldr	r1, [pc, #324]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	650b      	str	r3, [r1, #80]	; 0x50
 8008e9e:	e001      	b.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea0:	7dfb      	ldrb	r3, [r7, #23]
 8008ea2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d04b      	beq.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008eb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008eba:	d02e      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8008ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ec0:	d828      	bhi.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ec6:	d02a      	beq.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8008ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ecc:	d822      	bhi.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008ece:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ed2:	d026      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8008ed4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ed8:	d81c      	bhi.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ede:	d010      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8008ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ee4:	d816      	bhi.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d01d      	beq.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8008eea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eee:	d111      	bne.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	2101      	movs	r1, #1
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f000 ff70 	bl	8009ddc <RCCEx_PLL2_Config>
 8008efc:	4603      	mov	r3, r0
 8008efe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008f00:	e012      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	3324      	adds	r3, #36	; 0x24
 8008f06:	2101      	movs	r1, #1
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f001 f819 	bl	8009f40 <RCCEx_PLL3_Config>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008f12:	e009      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	75fb      	strb	r3, [r7, #23]
      break;
 8008f18:	e006      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008f1a:	bf00      	nop
 8008f1c:	e004      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008f1e:	bf00      	nop
 8008f20:	e002      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008f22:	bf00      	nop
 8008f24:	e000      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008f26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f28:	7dfb      	ldrb	r3, [r7, #23]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10a      	bne.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008f2e:	4b2c      	ldr	r3, [pc, #176]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f32:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f3c:	4928      	ldr	r1, [pc, #160]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	658b      	str	r3, [r1, #88]	; 0x58
 8008f42:	e001      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f44:	7dfb      	ldrb	r3, [r7, #23]
 8008f46:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d02f      	beq.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f5c:	d00e      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8008f5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f62:	d814      	bhi.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d015      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008f68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f6c:	d10f      	bne.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f6e:	4b1c      	ldr	r3, [pc, #112]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f72:	4a1b      	ldr	r2, [pc, #108]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008f7a:	e00c      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	3304      	adds	r3, #4
 8008f80:	2101      	movs	r1, #1
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 ff2a 	bl	8009ddc <RCCEx_PLL2_Config>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008f8c:	e003      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	75fb      	strb	r3, [r7, #23]
      break;
 8008f92:	e000      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8008f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f96:	7dfb      	ldrb	r3, [r7, #23]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d109      	bne.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008f9c:	4b10      	ldr	r3, [pc, #64]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fa0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fa8:	490d      	ldr	r1, [pc, #52]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008faa:	4313      	orrs	r3, r2
 8008fac:	650b      	str	r3, [r1, #80]	; 0x50
 8008fae:	e001      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fb0:	7dfb      	ldrb	r3, [r7, #23]
 8008fb2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d034      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fc4:	2b03      	cmp	r3, #3
 8008fc6:	d81d      	bhi.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8008fc8:	a201      	add	r2, pc, #4	; (adr r2, 8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8008fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fce:	bf00      	nop
 8008fd0:	0800900b 	.word	0x0800900b
 8008fd4:	08008fe5 	.word	0x08008fe5
 8008fd8:	08008ff3 	.word	0x08008ff3
 8008fdc:	0800900b 	.word	0x0800900b
 8008fe0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fe4:	4bb1      	ldr	r3, [pc, #708]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe8:	4ab0      	ldr	r2, [pc, #704]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008ff0:	e00c      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	3304      	adds	r3, #4
 8008ff6:	2102      	movs	r1, #2
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f000 feef 	bl	8009ddc <RCCEx_PLL2_Config>
 8008ffe:	4603      	mov	r3, r0
 8009000:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009002:	e003      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	75fb      	strb	r3, [r7, #23]
      break;
 8009008:	e000      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800900a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800900c:	7dfb      	ldrb	r3, [r7, #23]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d109      	bne.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009012:	4ba6      	ldr	r3, [pc, #664]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009016:	f023 0203 	bic.w	r2, r3, #3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800901e:	49a3      	ldr	r1, [pc, #652]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009020:	4313      	orrs	r3, r2
 8009022:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009024:	e001      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009026:	7dfb      	ldrb	r3, [r7, #23]
 8009028:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 8086 	beq.w	8009144 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009038:	4b9d      	ldr	r3, [pc, #628]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a9c      	ldr	r2, [pc, #624]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800903e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009042:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009044:	f7fb fc86 	bl	8004954 <HAL_GetTick>
 8009048:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800904a:	e009      	b.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800904c:	f7fb fc82 	bl	8004954 <HAL_GetTick>
 8009050:	4602      	mov	r2, r0
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	2b64      	cmp	r3, #100	; 0x64
 8009058:	d902      	bls.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	75fb      	strb	r3, [r7, #23]
        break;
 800905e:	e005      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009060:	4b93      	ldr	r3, [pc, #588]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009068:	2b00      	cmp	r3, #0
 800906a:	d0ef      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800906c:	7dfb      	ldrb	r3, [r7, #23]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d166      	bne.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009072:	4b8e      	ldr	r3, [pc, #568]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009074:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800907c:	4053      	eors	r3, r2
 800907e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009082:	2b00      	cmp	r3, #0
 8009084:	d013      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009086:	4b89      	ldr	r3, [pc, #548]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800908a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800908e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009090:	4b86      	ldr	r3, [pc, #536]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009094:	4a85      	ldr	r2, [pc, #532]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800909a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800909c:	4b83      	ldr	r3, [pc, #524]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800909e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a0:	4a82      	ldr	r2, [pc, #520]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090a6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80090a8:	4a80      	ldr	r2, [pc, #512]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80090b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090b8:	d115      	bne.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ba:	f7fb fc4b 	bl	8004954 <HAL_GetTick>
 80090be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090c0:	e00b      	b.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090c2:	f7fb fc47 	bl	8004954 <HAL_GetTick>
 80090c6:	4602      	mov	r2, r0
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	1ad3      	subs	r3, r2, r3
 80090cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d902      	bls.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80090d4:	2303      	movs	r3, #3
 80090d6:	75fb      	strb	r3, [r7, #23]
            break;
 80090d8:	e005      	b.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090da:	4b74      	ldr	r3, [pc, #464]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090de:	f003 0302 	and.w	r3, r3, #2
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d0ed      	beq.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d126      	bne.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80090f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090fa:	d10d      	bne.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80090fc:	4b6b      	ldr	r3, [pc, #428]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800910a:	0919      	lsrs	r1, r3, #4
 800910c:	4b69      	ldr	r3, [pc, #420]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800910e:	400b      	ands	r3, r1
 8009110:	4966      	ldr	r1, [pc, #408]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009112:	4313      	orrs	r3, r2
 8009114:	610b      	str	r3, [r1, #16]
 8009116:	e005      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009118:	4b64      	ldr	r3, [pc, #400]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	4a63      	ldr	r2, [pc, #396]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800911e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009122:	6113      	str	r3, [r2, #16]
 8009124:	4b61      	ldr	r3, [pc, #388]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009126:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800912e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009132:	495e      	ldr	r1, [pc, #376]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009134:	4313      	orrs	r3, r2
 8009136:	670b      	str	r3, [r1, #112]	; 0x70
 8009138:	e004      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800913a:	7dfb      	ldrb	r3, [r7, #23]
 800913c:	75bb      	strb	r3, [r7, #22]
 800913e:	e001      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009140:	7dfb      	ldrb	r3, [r7, #23]
 8009142:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 0301 	and.w	r3, r3, #1
 800914c:	2b00      	cmp	r3, #0
 800914e:	d07e      	beq.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009154:	2b28      	cmp	r3, #40	; 0x28
 8009156:	d867      	bhi.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8009158:	a201      	add	r2, pc, #4	; (adr r2, 8009160 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800915a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915e:	bf00      	nop
 8009160:	0800922f 	.word	0x0800922f
 8009164:	08009229 	.word	0x08009229
 8009168:	08009229 	.word	0x08009229
 800916c:	08009229 	.word	0x08009229
 8009170:	08009229 	.word	0x08009229
 8009174:	08009229 	.word	0x08009229
 8009178:	08009229 	.word	0x08009229
 800917c:	08009229 	.word	0x08009229
 8009180:	08009205 	.word	0x08009205
 8009184:	08009229 	.word	0x08009229
 8009188:	08009229 	.word	0x08009229
 800918c:	08009229 	.word	0x08009229
 8009190:	08009229 	.word	0x08009229
 8009194:	08009229 	.word	0x08009229
 8009198:	08009229 	.word	0x08009229
 800919c:	08009229 	.word	0x08009229
 80091a0:	08009217 	.word	0x08009217
 80091a4:	08009229 	.word	0x08009229
 80091a8:	08009229 	.word	0x08009229
 80091ac:	08009229 	.word	0x08009229
 80091b0:	08009229 	.word	0x08009229
 80091b4:	08009229 	.word	0x08009229
 80091b8:	08009229 	.word	0x08009229
 80091bc:	08009229 	.word	0x08009229
 80091c0:	0800922f 	.word	0x0800922f
 80091c4:	08009229 	.word	0x08009229
 80091c8:	08009229 	.word	0x08009229
 80091cc:	08009229 	.word	0x08009229
 80091d0:	08009229 	.word	0x08009229
 80091d4:	08009229 	.word	0x08009229
 80091d8:	08009229 	.word	0x08009229
 80091dc:	08009229 	.word	0x08009229
 80091e0:	0800922f 	.word	0x0800922f
 80091e4:	08009229 	.word	0x08009229
 80091e8:	08009229 	.word	0x08009229
 80091ec:	08009229 	.word	0x08009229
 80091f0:	08009229 	.word	0x08009229
 80091f4:	08009229 	.word	0x08009229
 80091f8:	08009229 	.word	0x08009229
 80091fc:	08009229 	.word	0x08009229
 8009200:	0800922f 	.word	0x0800922f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	3304      	adds	r3, #4
 8009208:	2101      	movs	r1, #1
 800920a:	4618      	mov	r0, r3
 800920c:	f000 fde6 	bl	8009ddc <RCCEx_PLL2_Config>
 8009210:	4603      	mov	r3, r0
 8009212:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009214:	e00c      	b.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	3324      	adds	r3, #36	; 0x24
 800921a:	2101      	movs	r1, #1
 800921c:	4618      	mov	r0, r3
 800921e:	f000 fe8f 	bl	8009f40 <RCCEx_PLL3_Config>
 8009222:	4603      	mov	r3, r0
 8009224:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009226:	e003      	b.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	75fb      	strb	r3, [r7, #23]
      break;
 800922c:	e000      	b.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800922e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009230:	7dfb      	ldrb	r3, [r7, #23]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d109      	bne.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009236:	4b1d      	ldr	r3, [pc, #116]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800923a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009242:	491a      	ldr	r1, [pc, #104]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009244:	4313      	orrs	r3, r2
 8009246:	654b      	str	r3, [r1, #84]	; 0x54
 8009248:	e001      	b.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 0302 	and.w	r3, r3, #2
 8009256:	2b00      	cmp	r3, #0
 8009258:	d03e      	beq.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800925e:	2b05      	cmp	r3, #5
 8009260:	d820      	bhi.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8009262:	a201      	add	r2, pc, #4	; (adr r2, 8009268 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8009264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009268:	080092b9 	.word	0x080092b9
 800926c:	08009281 	.word	0x08009281
 8009270:	08009293 	.word	0x08009293
 8009274:	080092b9 	.word	0x080092b9
 8009278:	080092b9 	.word	0x080092b9
 800927c:	080092b9 	.word	0x080092b9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	3304      	adds	r3, #4
 8009284:	2101      	movs	r1, #1
 8009286:	4618      	mov	r0, r3
 8009288:	f000 fda8 	bl	8009ddc <RCCEx_PLL2_Config>
 800928c:	4603      	mov	r3, r0
 800928e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009290:	e013      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	3324      	adds	r3, #36	; 0x24
 8009296:	2101      	movs	r1, #1
 8009298:	4618      	mov	r0, r3
 800929a:	f000 fe51 	bl	8009f40 <RCCEx_PLL3_Config>
 800929e:	4603      	mov	r3, r0
 80092a0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80092a2:	e00a      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	75fb      	strb	r3, [r7, #23]
      break;
 80092a8:	e007      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80092aa:	bf00      	nop
 80092ac:	58024400 	.word	0x58024400
 80092b0:	58024800 	.word	0x58024800
 80092b4:	00ffffcf 	.word	0x00ffffcf
      break;
 80092b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092ba:	7dfb      	ldrb	r3, [r7, #23]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d109      	bne.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80092c0:	4b9f      	ldr	r3, [pc, #636]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80092c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092c4:	f023 0207 	bic.w	r2, r3, #7
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092cc:	499c      	ldr	r1, [pc, #624]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80092ce:	4313      	orrs	r3, r2
 80092d0:	654b      	str	r3, [r1, #84]	; 0x54
 80092d2:	e001      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092d4:	7dfb      	ldrb	r3, [r7, #23]
 80092d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f003 0304 	and.w	r3, r3, #4
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d039      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092ea:	2b05      	cmp	r3, #5
 80092ec:	d820      	bhi.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80092ee:	a201      	add	r2, pc, #4	; (adr r2, 80092f4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80092f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f4:	08009337 	.word	0x08009337
 80092f8:	0800930d 	.word	0x0800930d
 80092fc:	0800931f 	.word	0x0800931f
 8009300:	08009337 	.word	0x08009337
 8009304:	08009337 	.word	0x08009337
 8009308:	08009337 	.word	0x08009337
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	3304      	adds	r3, #4
 8009310:	2101      	movs	r1, #1
 8009312:	4618      	mov	r0, r3
 8009314:	f000 fd62 	bl	8009ddc <RCCEx_PLL2_Config>
 8009318:	4603      	mov	r3, r0
 800931a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800931c:	e00c      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	3324      	adds	r3, #36	; 0x24
 8009322:	2101      	movs	r1, #1
 8009324:	4618      	mov	r0, r3
 8009326:	f000 fe0b 	bl	8009f40 <RCCEx_PLL3_Config>
 800932a:	4603      	mov	r3, r0
 800932c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800932e:	e003      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	75fb      	strb	r3, [r7, #23]
      break;
 8009334:	e000      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8009336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009338:	7dfb      	ldrb	r3, [r7, #23]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d10a      	bne.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800933e:	4b80      	ldr	r3, [pc, #512]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009342:	f023 0207 	bic.w	r2, r3, #7
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800934c:	497c      	ldr	r1, [pc, #496]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800934e:	4313      	orrs	r3, r2
 8009350:	658b      	str	r3, [r1, #88]	; 0x58
 8009352:	e001      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009354:	7dfb      	ldrb	r3, [r7, #23]
 8009356:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 0320 	and.w	r3, r3, #32
 8009360:	2b00      	cmp	r3, #0
 8009362:	d04b      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800936a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800936e:	d02e      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x962>
 8009370:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009374:	d828      	bhi.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800937a:	d02a      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800937c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009380:	d822      	bhi.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009382:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009386:	d026      	beq.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009388:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800938c:	d81c      	bhi.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800938e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009392:	d010      	beq.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8009394:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009398:	d816      	bhi.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800939a:	2b00      	cmp	r3, #0
 800939c:	d01d      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800939e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093a2:	d111      	bne.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	3304      	adds	r3, #4
 80093a8:	2100      	movs	r1, #0
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 fd16 	bl	8009ddc <RCCEx_PLL2_Config>
 80093b0:	4603      	mov	r3, r0
 80093b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80093b4:	e012      	b.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	3324      	adds	r3, #36	; 0x24
 80093ba:	2102      	movs	r1, #2
 80093bc:	4618      	mov	r0, r3
 80093be:	f000 fdbf 	bl	8009f40 <RCCEx_PLL3_Config>
 80093c2:	4603      	mov	r3, r0
 80093c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80093c6:	e009      	b.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	75fb      	strb	r3, [r7, #23]
      break;
 80093cc:	e006      	b.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80093ce:	bf00      	nop
 80093d0:	e004      	b.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80093d2:	bf00      	nop
 80093d4:	e002      	b.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80093d6:	bf00      	nop
 80093d8:	e000      	b.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80093da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093dc:	7dfb      	ldrb	r3, [r7, #23]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10a      	bne.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80093e2:	4b57      	ldr	r3, [pc, #348]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80093e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093f0:	4953      	ldr	r1, [pc, #332]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80093f2:	4313      	orrs	r3, r2
 80093f4:	654b      	str	r3, [r1, #84]	; 0x54
 80093f6:	e001      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f8:	7dfb      	ldrb	r3, [r7, #23]
 80093fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009404:	2b00      	cmp	r3, #0
 8009406:	d04b      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800940e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009412:	d02e      	beq.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8009414:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009418:	d828      	bhi.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800941a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800941e:	d02a      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009424:	d822      	bhi.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009426:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800942a:	d026      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800942c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009430:	d81c      	bhi.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009436:	d010      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8009438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800943c:	d816      	bhi.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800943e:	2b00      	cmp	r3, #0
 8009440:	d01d      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009446:	d111      	bne.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	3304      	adds	r3, #4
 800944c:	2100      	movs	r1, #0
 800944e:	4618      	mov	r0, r3
 8009450:	f000 fcc4 	bl	8009ddc <RCCEx_PLL2_Config>
 8009454:	4603      	mov	r3, r0
 8009456:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009458:	e012      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	3324      	adds	r3, #36	; 0x24
 800945e:	2102      	movs	r1, #2
 8009460:	4618      	mov	r0, r3
 8009462:	f000 fd6d 	bl	8009f40 <RCCEx_PLL3_Config>
 8009466:	4603      	mov	r3, r0
 8009468:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800946a:	e009      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	75fb      	strb	r3, [r7, #23]
      break;
 8009470:	e006      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009472:	bf00      	nop
 8009474:	e004      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009476:	bf00      	nop
 8009478:	e002      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800947a:	bf00      	nop
 800947c:	e000      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800947e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009480:	7dfb      	ldrb	r3, [r7, #23]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10a      	bne.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009486:	4b2e      	ldr	r3, [pc, #184]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800948a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009494:	492a      	ldr	r1, [pc, #168]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009496:	4313      	orrs	r3, r2
 8009498:	658b      	str	r3, [r1, #88]	; 0x58
 800949a:	e001      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800949c:	7dfb      	ldrb	r3, [r7, #23]
 800949e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d04d      	beq.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80094b6:	d02e      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80094b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80094bc:	d828      	bhi.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80094be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094c2:	d02a      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80094c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094c8:	d822      	bhi.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80094ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80094ce:	d026      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80094d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80094d4:	d81c      	bhi.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80094d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094da:	d010      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80094dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094e0:	d816      	bhi.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d01d      	beq.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80094e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094ea:	d111      	bne.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	3304      	adds	r3, #4
 80094f0:	2100      	movs	r1, #0
 80094f2:	4618      	mov	r0, r3
 80094f4:	f000 fc72 	bl	8009ddc <RCCEx_PLL2_Config>
 80094f8:	4603      	mov	r3, r0
 80094fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80094fc:	e012      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	3324      	adds	r3, #36	; 0x24
 8009502:	2102      	movs	r1, #2
 8009504:	4618      	mov	r0, r3
 8009506:	f000 fd1b 	bl	8009f40 <RCCEx_PLL3_Config>
 800950a:	4603      	mov	r3, r0
 800950c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800950e:	e009      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	75fb      	strb	r3, [r7, #23]
      break;
 8009514:	e006      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009516:	bf00      	nop
 8009518:	e004      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800951a:	bf00      	nop
 800951c:	e002      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800951e:	bf00      	nop
 8009520:	e000      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009522:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009524:	7dfb      	ldrb	r3, [r7, #23]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10c      	bne.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800952a:	4b05      	ldr	r3, [pc, #20]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800952c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800952e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009538:	4901      	ldr	r1, [pc, #4]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800953a:	4313      	orrs	r3, r2
 800953c:	658b      	str	r3, [r1, #88]	; 0x58
 800953e:	e003      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009540:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009544:	7dfb      	ldrb	r3, [r7, #23]
 8009546:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0308 	and.w	r3, r3, #8
 8009550:	2b00      	cmp	r3, #0
 8009552:	d018      	beq.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800955c:	d10a      	bne.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	3324      	adds	r3, #36	; 0x24
 8009562:	2102      	movs	r1, #2
 8009564:	4618      	mov	r0, r3
 8009566:	f000 fceb 	bl	8009f40 <RCCEx_PLL3_Config>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d001      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009574:	4b8a      	ldr	r3, [pc, #552]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009578:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009580:	4987      	ldr	r1, [pc, #540]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009582:	4313      	orrs	r3, r2
 8009584:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 0310 	and.w	r3, r3, #16
 800958e:	2b00      	cmp	r3, #0
 8009590:	d01a      	beq.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800959c:	d10a      	bne.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	3324      	adds	r3, #36	; 0x24
 80095a2:	2102      	movs	r1, #2
 80095a4:	4618      	mov	r0, r3
 80095a6:	f000 fccb 	bl	8009f40 <RCCEx_PLL3_Config>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80095b4:	4b7a      	ldr	r3, [pc, #488]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80095b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095c2:	4977      	ldr	r1, [pc, #476]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80095c4:	4313      	orrs	r3, r2
 80095c6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d034      	beq.n	800963e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095de:	d01d      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80095e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095e4:	d817      	bhi.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d003      	beq.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80095ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095ee:	d009      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80095f0:	e011      	b.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	3304      	adds	r3, #4
 80095f6:	2100      	movs	r1, #0
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 fbef 	bl	8009ddc <RCCEx_PLL2_Config>
 80095fe:	4603      	mov	r3, r0
 8009600:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009602:	e00c      	b.n	800961e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	3324      	adds	r3, #36	; 0x24
 8009608:	2102      	movs	r1, #2
 800960a:	4618      	mov	r0, r3
 800960c:	f000 fc98 	bl	8009f40 <RCCEx_PLL3_Config>
 8009610:	4603      	mov	r3, r0
 8009612:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009614:	e003      	b.n	800961e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	75fb      	strb	r3, [r7, #23]
      break;
 800961a:	e000      	b.n	800961e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800961c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800961e:	7dfb      	ldrb	r3, [r7, #23]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10a      	bne.n	800963a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009624:	4b5e      	ldr	r3, [pc, #376]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009628:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009632:	495b      	ldr	r1, [pc, #364]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009634:	4313      	orrs	r3, r2
 8009636:	658b      	str	r3, [r1, #88]	; 0x58
 8009638:	e001      	b.n	800963e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800963a:	7dfb      	ldrb	r3, [r7, #23]
 800963c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009646:	2b00      	cmp	r3, #0
 8009648:	d033      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009650:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009654:	d01c      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009656:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800965a:	d816      	bhi.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800965c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009660:	d003      	beq.n	800966a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009662:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009666:	d007      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009668:	e00f      	b.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800966a:	4b4d      	ldr	r3, [pc, #308]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800966c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966e:	4a4c      	ldr	r2, [pc, #304]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009674:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009676:	e00c      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	3324      	adds	r3, #36	; 0x24
 800967c:	2101      	movs	r1, #1
 800967e:	4618      	mov	r0, r3
 8009680:	f000 fc5e 	bl	8009f40 <RCCEx_PLL3_Config>
 8009684:	4603      	mov	r3, r0
 8009686:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009688:	e003      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	75fb      	strb	r3, [r7, #23]
      break;
 800968e:	e000      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8009690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009692:	7dfb      	ldrb	r3, [r7, #23]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d10a      	bne.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009698:	4b41      	ldr	r3, [pc, #260]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800969a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800969c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096a6:	493e      	ldr	r1, [pc, #248]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80096a8:	4313      	orrs	r3, r2
 80096aa:	654b      	str	r3, [r1, #84]	; 0x54
 80096ac:	e001      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ae:	7dfb      	ldrb	r3, [r7, #23]
 80096b0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d029      	beq.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d003      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80096c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096ca:	d007      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80096cc:	e00f      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096ce:	4b34      	ldr	r3, [pc, #208]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80096d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d2:	4a33      	ldr	r2, [pc, #204]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80096d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80096da:	e00b      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	3304      	adds	r3, #4
 80096e0:	2102      	movs	r1, #2
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 fb7a 	bl	8009ddc <RCCEx_PLL2_Config>
 80096e8:	4603      	mov	r3, r0
 80096ea:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80096ec:	e002      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	75fb      	strb	r3, [r7, #23]
      break;
 80096f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096f4:	7dfb      	ldrb	r3, [r7, #23]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d109      	bne.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80096fa:	4b29      	ldr	r3, [pc, #164]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80096fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009706:	4926      	ldr	r1, [pc, #152]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009708:	4313      	orrs	r3, r2
 800970a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800970c:	e001      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800970e:	7dfb      	ldrb	r3, [r7, #23]
 8009710:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00a      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	3324      	adds	r3, #36	; 0x24
 8009722:	2102      	movs	r1, #2
 8009724:	4618      	mov	r0, r3
 8009726:	f000 fc0b 	bl	8009f40 <RCCEx_PLL3_Config>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800973c:	2b00      	cmp	r3, #0
 800973e:	d033      	beq.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009744:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009748:	d017      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800974a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800974e:	d811      	bhi.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009754:	d013      	beq.n	800977e <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8009756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800975a:	d80b      	bhi.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800975c:	2b00      	cmp	r3, #0
 800975e:	d010      	beq.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8009760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009764:	d106      	bne.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009766:	4b0e      	ldr	r3, [pc, #56]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976a:	4a0d      	ldr	r2, [pc, #52]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800976c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009770:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009772:	e007      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	75fb      	strb	r3, [r7, #23]
      break;
 8009778:	e004      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800977a:	bf00      	nop
 800977c:	e002      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800977e:	bf00      	nop
 8009780:	e000      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009784:	7dfb      	ldrb	r3, [r7, #23]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10c      	bne.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800978a:	4b05      	ldr	r3, [pc, #20]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800978c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800978e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009796:	4902      	ldr	r1, [pc, #8]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009798:	4313      	orrs	r3, r2
 800979a:	654b      	str	r3, [r1, #84]	; 0x54
 800979c:	e004      	b.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800979e:	bf00      	nop
 80097a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097a4:	7dfb      	ldrb	r3, [r7, #23]
 80097a6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d008      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80097b4:	4b29      	ldr	r3, [pc, #164]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097c0:	4926      	ldr	r1, [pc, #152]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097c2:	4313      	orrs	r3, r2
 80097c4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d008      	beq.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80097d2:	4b22      	ldr	r3, [pc, #136]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097de:	491f      	ldr	r1, [pc, #124]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097e0:	4313      	orrs	r3, r2
 80097e2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00d      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80097f0:	4b1a      	ldr	r3, [pc, #104]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	4a19      	ldr	r2, [pc, #100]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80097fa:	6113      	str	r3, [r2, #16]
 80097fc:	4b17      	ldr	r3, [pc, #92]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097fe:	691a      	ldr	r2, [r3, #16]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009806:	4915      	ldr	r1, [pc, #84]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009808:	4313      	orrs	r3, r2
 800980a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	da08      	bge.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009814:	4b11      	ldr	r3, [pc, #68]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009818:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009820:	490e      	ldr	r1, [pc, #56]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009822:	4313      	orrs	r3, r2
 8009824:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d009      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009832:	4b0a      	ldr	r3, [pc, #40]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009836:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009840:	4906      	ldr	r1, [pc, #24]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009842:	4313      	orrs	r3, r2
 8009844:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009846:	7dbb      	ldrb	r3, [r7, #22]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d101      	bne.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	e000      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009850:	2301      	movs	r3, #1
}
 8009852:	4618      	mov	r0, r3
 8009854:	3718      	adds	r7, #24
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	58024400 	.word	0x58024400

08009860 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009864:	f7ff f8a6 	bl	80089b4 <HAL_RCC_GetHCLKFreq>
 8009868:	4602      	mov	r2, r0
 800986a:	4b06      	ldr	r3, [pc, #24]	; (8009884 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	091b      	lsrs	r3, r3, #4
 8009870:	f003 0307 	and.w	r3, r3, #7
 8009874:	4904      	ldr	r1, [pc, #16]	; (8009888 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009876:	5ccb      	ldrb	r3, [r1, r3]
 8009878:	f003 031f 	and.w	r3, r3, #31
 800987c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009880:	4618      	mov	r0, r3
 8009882:	bd80      	pop	{r7, pc}
 8009884:	58024400 	.word	0x58024400
 8009888:	0800df6c 	.word	0x0800df6c

0800988c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800988c:	b480      	push	{r7}
 800988e:	b089      	sub	sp, #36	; 0x24
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009894:	4ba1      	ldr	r3, [pc, #644]	; (8009b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009898:	f003 0303 	and.w	r3, r3, #3
 800989c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800989e:	4b9f      	ldr	r3, [pc, #636]	; (8009b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a2:	0b1b      	lsrs	r3, r3, #12
 80098a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80098aa:	4b9c      	ldr	r3, [pc, #624]	; (8009b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ae:	091b      	lsrs	r3, r3, #4
 80098b0:	f003 0301 	and.w	r3, r3, #1
 80098b4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80098b6:	4b99      	ldr	r3, [pc, #612]	; (8009b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ba:	08db      	lsrs	r3, r3, #3
 80098bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098c0:	693a      	ldr	r2, [r7, #16]
 80098c2:	fb02 f303 	mul.w	r3, r2, r3
 80098c6:	ee07 3a90 	vmov	s15, r3
 80098ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f000 8111 	beq.w	8009afc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	2b02      	cmp	r3, #2
 80098de:	f000 8083 	beq.w	80099e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	f200 80a1 	bhi.w	8009a2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d003      	beq.n	80098f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d056      	beq.n	80099a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80098f6:	e099      	b.n	8009a2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098f8:	4b88      	ldr	r3, [pc, #544]	; (8009b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 0320 	and.w	r3, r3, #32
 8009900:	2b00      	cmp	r3, #0
 8009902:	d02d      	beq.n	8009960 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009904:	4b85      	ldr	r3, [pc, #532]	; (8009b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	08db      	lsrs	r3, r3, #3
 800990a:	f003 0303 	and.w	r3, r3, #3
 800990e:	4a84      	ldr	r2, [pc, #528]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009910:	fa22 f303 	lsr.w	r3, r2, r3
 8009914:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	ee07 3a90 	vmov	s15, r3
 800991c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	ee07 3a90 	vmov	s15, r3
 8009926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800992a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800992e:	4b7b      	ldr	r3, [pc, #492]	; (8009b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009936:	ee07 3a90 	vmov	s15, r3
 800993a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800993e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009942:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009b24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800994a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800994e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800995a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800995e:	e087      	b.n	8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	ee07 3a90 	vmov	s15, r3
 8009966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800996a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800996e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009972:	4b6a      	ldr	r3, [pc, #424]	; (8009b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800997a:	ee07 3a90 	vmov	s15, r3
 800997e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009982:	ed97 6a03 	vldr	s12, [r7, #12]
 8009986:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009b24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800998a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800998e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800999a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800999e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099a2:	e065      	b.n	8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	ee07 3a90 	vmov	s15, r3
 80099aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80099b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099b6:	4b59      	ldr	r3, [pc, #356]	; (8009b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099be:	ee07 3a90 	vmov	s15, r3
 80099c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009b24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099e6:	e043      	b.n	8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	ee07 3a90 	vmov	s15, r3
 80099ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80099f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099fa:	4b48      	ldr	r3, [pc, #288]	; (8009b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a02:	ee07 3a90 	vmov	s15, r3
 8009a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009b24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a2a:	e021      	b.n	8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	ee07 3a90 	vmov	s15, r3
 8009a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a3e:	4b37      	ldr	r3, [pc, #220]	; (8009b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a46:	ee07 3a90 	vmov	s15, r3
 8009a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a52:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009a70:	4b2a      	ldr	r3, [pc, #168]	; (8009b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a74:	0a5b      	lsrs	r3, r3, #9
 8009a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a7a:	ee07 3a90 	vmov	s15, r3
 8009a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a96:	ee17 2a90 	vmov	r2, s15
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009a9e:	4b1f      	ldr	r3, [pc, #124]	; (8009b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa2:	0c1b      	lsrs	r3, r3, #16
 8009aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aa8:	ee07 3a90 	vmov	s15, r3
 8009aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ab4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ab8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009abc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ac4:	ee17 2a90 	vmov	r2, s15
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009acc:	4b13      	ldr	r3, [pc, #76]	; (8009b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad0:	0e1b      	lsrs	r3, r3, #24
 8009ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ad6:	ee07 3a90 	vmov	s15, r3
 8009ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ade:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ae2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ae6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009af2:	ee17 2a90 	vmov	r2, s15
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009afa:	e008      	b.n	8009b0e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	609a      	str	r2, [r3, #8]
}
 8009b0e:	bf00      	nop
 8009b10:	3724      	adds	r7, #36	; 0x24
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	58024400 	.word	0x58024400
 8009b20:	03d09000 	.word	0x03d09000
 8009b24:	46000000 	.word	0x46000000
 8009b28:	4c742400 	.word	0x4c742400
 8009b2c:	4a742400 	.word	0x4a742400
 8009b30:	4af42400 	.word	0x4af42400

08009b34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b089      	sub	sp, #36	; 0x24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b3c:	4ba1      	ldr	r3, [pc, #644]	; (8009dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b40:	f003 0303 	and.w	r3, r3, #3
 8009b44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009b46:	4b9f      	ldr	r3, [pc, #636]	; (8009dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4a:	0d1b      	lsrs	r3, r3, #20
 8009b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009b52:	4b9c      	ldr	r3, [pc, #624]	; (8009dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b56:	0a1b      	lsrs	r3, r3, #8
 8009b58:	f003 0301 	and.w	r3, r3, #1
 8009b5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009b5e:	4b99      	ldr	r3, [pc, #612]	; (8009dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b62:	08db      	lsrs	r3, r3, #3
 8009b64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b68:	693a      	ldr	r2, [r7, #16]
 8009b6a:	fb02 f303 	mul.w	r3, r2, r3
 8009b6e:	ee07 3a90 	vmov	s15, r3
 8009b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f000 8111 	beq.w	8009da4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	f000 8083 	beq.w	8009c90 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	2b02      	cmp	r3, #2
 8009b8e:	f200 80a1 	bhi.w	8009cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d003      	beq.n	8009ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d056      	beq.n	8009c4c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009b9e:	e099      	b.n	8009cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ba0:	4b88      	ldr	r3, [pc, #544]	; (8009dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f003 0320 	and.w	r3, r3, #32
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d02d      	beq.n	8009c08 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bac:	4b85      	ldr	r3, [pc, #532]	; (8009dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	08db      	lsrs	r3, r3, #3
 8009bb2:	f003 0303 	and.w	r3, r3, #3
 8009bb6:	4a84      	ldr	r2, [pc, #528]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8009bbc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	ee07 3a90 	vmov	s15, r3
 8009bc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	ee07 3a90 	vmov	s15, r3
 8009bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bd6:	4b7b      	ldr	r3, [pc, #492]	; (8009dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bde:	ee07 3a90 	vmov	s15, r3
 8009be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bea:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009dcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c02:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009c06:	e087      	b.n	8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	ee07 3a90 	vmov	s15, r3
 8009c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c1a:	4b6a      	ldr	r3, [pc, #424]	; (8009dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c22:	ee07 3a90 	vmov	s15, r3
 8009c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009dcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c4a:	e065      	b.n	8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	ee07 3a90 	vmov	s15, r3
 8009c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c5e:	4b59      	ldr	r3, [pc, #356]	; (8009dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c66:	ee07 3a90 	vmov	s15, r3
 8009c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c72:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009dcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c8e:	e043      	b.n	8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	ee07 3a90 	vmov	s15, r3
 8009c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ca2:	4b48      	ldr	r3, [pc, #288]	; (8009dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009caa:	ee07 3a90 	vmov	s15, r3
 8009cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cb6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009dcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cd2:	e021      	b.n	8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	ee07 3a90 	vmov	s15, r3
 8009cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cde:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ce6:	4b37      	ldr	r3, [pc, #220]	; (8009dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cee:	ee07 3a90 	vmov	s15, r3
 8009cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cfa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009dcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009d18:	4b2a      	ldr	r3, [pc, #168]	; (8009dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1c:	0a5b      	lsrs	r3, r3, #9
 8009d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d22:	ee07 3a90 	vmov	s15, r3
 8009d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d32:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d3e:	ee17 2a90 	vmov	r2, s15
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009d46:	4b1f      	ldr	r3, [pc, #124]	; (8009dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4a:	0c1b      	lsrs	r3, r3, #16
 8009d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d50:	ee07 3a90 	vmov	s15, r3
 8009d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d60:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d6c:	ee17 2a90 	vmov	r2, s15
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009d74:	4b13      	ldr	r3, [pc, #76]	; (8009dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d78:	0e1b      	lsrs	r3, r3, #24
 8009d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d7e:	ee07 3a90 	vmov	s15, r3
 8009d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d9a:	ee17 2a90 	vmov	r2, s15
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009da2:	e008      	b.n	8009db6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	609a      	str	r2, [r3, #8]
}
 8009db6:	bf00      	nop
 8009db8:	3724      	adds	r7, #36	; 0x24
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop
 8009dc4:	58024400 	.word	0x58024400
 8009dc8:	03d09000 	.word	0x03d09000
 8009dcc:	46000000 	.word	0x46000000
 8009dd0:	4c742400 	.word	0x4c742400
 8009dd4:	4a742400 	.word	0x4a742400
 8009dd8:	4af42400 	.word	0x4af42400

08009ddc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009dea:	4b53      	ldr	r3, [pc, #332]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dee:	f003 0303 	and.w	r3, r3, #3
 8009df2:	2b03      	cmp	r3, #3
 8009df4:	d101      	bne.n	8009dfa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	e099      	b.n	8009f2e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009dfa:	4b4f      	ldr	r3, [pc, #316]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a4e      	ldr	r2, [pc, #312]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009e00:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e06:	f7fa fda5 	bl	8004954 <HAL_GetTick>
 8009e0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e0c:	e008      	b.n	8009e20 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009e0e:	f7fa fda1 	bl	8004954 <HAL_GetTick>
 8009e12:	4602      	mov	r2, r0
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	1ad3      	subs	r3, r2, r3
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	d901      	bls.n	8009e20 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009e1c:	2303      	movs	r3, #3
 8009e1e:	e086      	b.n	8009f2e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e20:	4b45      	ldr	r3, [pc, #276]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d1f0      	bne.n	8009e0e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009e2c:	4b42      	ldr	r3, [pc, #264]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e30:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	031b      	lsls	r3, r3, #12
 8009e3a:	493f      	ldr	r1, [pc, #252]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	628b      	str	r3, [r1, #40]	; 0x28
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	3b01      	subs	r3, #1
 8009e46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	025b      	lsls	r3, r3, #9
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	431a      	orrs	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	041b      	lsls	r3, r3, #16
 8009e5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e62:	431a      	orrs	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	061b      	lsls	r3, r3, #24
 8009e6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e70:	4931      	ldr	r1, [pc, #196]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009e72:	4313      	orrs	r3, r2
 8009e74:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009e76:	4b30      	ldr	r3, [pc, #192]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	695b      	ldr	r3, [r3, #20]
 8009e82:	492d      	ldr	r1, [pc, #180]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009e84:	4313      	orrs	r3, r2
 8009e86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009e88:	4b2b      	ldr	r3, [pc, #172]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e8c:	f023 0220 	bic.w	r2, r3, #32
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	699b      	ldr	r3, [r3, #24]
 8009e94:	4928      	ldr	r1, [pc, #160]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009e96:	4313      	orrs	r3, r2
 8009e98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009e9a:	4b27      	ldr	r3, [pc, #156]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9e:	4a26      	ldr	r2, [pc, #152]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009ea0:	f023 0310 	bic.w	r3, r3, #16
 8009ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009ea6:	4b24      	ldr	r3, [pc, #144]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009ea8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009eaa:	4b24      	ldr	r3, [pc, #144]	; (8009f3c <RCCEx_PLL2_Config+0x160>)
 8009eac:	4013      	ands	r3, r2
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	69d2      	ldr	r2, [r2, #28]
 8009eb2:	00d2      	lsls	r2, r2, #3
 8009eb4:	4920      	ldr	r1, [pc, #128]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009eba:	4b1f      	ldr	r3, [pc, #124]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebe:	4a1e      	ldr	r2, [pc, #120]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009ec0:	f043 0310 	orr.w	r3, r3, #16
 8009ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d106      	bne.n	8009eda <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009ecc:	4b1a      	ldr	r3, [pc, #104]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed0:	4a19      	ldr	r2, [pc, #100]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009ed2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ed6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ed8:	e00f      	b.n	8009efa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d106      	bne.n	8009eee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009ee0:	4b15      	ldr	r3, [pc, #84]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee4:	4a14      	ldr	r2, [pc, #80]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009ee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009eea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009eec:	e005      	b.n	8009efa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009eee:	4b12      	ldr	r3, [pc, #72]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef2:	4a11      	ldr	r2, [pc, #68]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009ef4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ef8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009efa:	4b0f      	ldr	r3, [pc, #60]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a0e      	ldr	r2, [pc, #56]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009f00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009f04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f06:	f7fa fd25 	bl	8004954 <HAL_GetTick>
 8009f0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f0c:	e008      	b.n	8009f20 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009f0e:	f7fa fd21 	bl	8004954 <HAL_GetTick>
 8009f12:	4602      	mov	r2, r0
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	1ad3      	subs	r3, r2, r3
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d901      	bls.n	8009f20 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009f1c:	2303      	movs	r3, #3
 8009f1e:	e006      	b.n	8009f2e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f20:	4b05      	ldr	r3, [pc, #20]	; (8009f38 <RCCEx_PLL2_Config+0x15c>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d0f0      	beq.n	8009f0e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	58024400 	.word	0x58024400
 8009f3c:	ffff0007 	.word	0xffff0007

08009f40 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f4e:	4b53      	ldr	r3, [pc, #332]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 8009f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f52:	f003 0303 	and.w	r3, r3, #3
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	d101      	bne.n	8009f5e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e099      	b.n	800a092 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009f5e:	4b4f      	ldr	r3, [pc, #316]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a4e      	ldr	r2, [pc, #312]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 8009f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f6a:	f7fa fcf3 	bl	8004954 <HAL_GetTick>
 8009f6e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f70:	e008      	b.n	8009f84 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009f72:	f7fa fcef 	bl	8004954 <HAL_GetTick>
 8009f76:	4602      	mov	r2, r0
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	1ad3      	subs	r3, r2, r3
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d901      	bls.n	8009f84 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f80:	2303      	movs	r3, #3
 8009f82:	e086      	b.n	800a092 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f84:	4b45      	ldr	r3, [pc, #276]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d1f0      	bne.n	8009f72 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009f90:	4b42      	ldr	r3, [pc, #264]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 8009f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f94:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	051b      	lsls	r3, r3, #20
 8009f9e:	493f      	ldr	r1, [pc, #252]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	628b      	str	r3, [r1, #40]	; 0x28
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	025b      	lsls	r3, r3, #9
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	431a      	orrs	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	041b      	lsls	r3, r3, #16
 8009fc2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009fc6:	431a      	orrs	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	061b      	lsls	r3, r3, #24
 8009fd0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009fd4:	4931      	ldr	r1, [pc, #196]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009fda:	4b30      	ldr	r3, [pc, #192]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 8009fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	695b      	ldr	r3, [r3, #20]
 8009fe6:	492d      	ldr	r1, [pc, #180]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009fec:	4b2b      	ldr	r3, [pc, #172]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 8009fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	699b      	ldr	r3, [r3, #24]
 8009ff8:	4928      	ldr	r1, [pc, #160]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009ffe:	4b27      	ldr	r3, [pc, #156]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 800a000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a002:	4a26      	ldr	r2, [pc, #152]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 800a004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a008:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a00a:	4b24      	ldr	r3, [pc, #144]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 800a00c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a00e:	4b24      	ldr	r3, [pc, #144]	; (800a0a0 <RCCEx_PLL3_Config+0x160>)
 800a010:	4013      	ands	r3, r2
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	69d2      	ldr	r2, [r2, #28]
 800a016:	00d2      	lsls	r2, r2, #3
 800a018:	4920      	ldr	r1, [pc, #128]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 800a01a:	4313      	orrs	r3, r2
 800a01c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a01e:	4b1f      	ldr	r3, [pc, #124]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 800a020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a022:	4a1e      	ldr	r2, [pc, #120]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 800a024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a028:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d106      	bne.n	800a03e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a030:	4b1a      	ldr	r3, [pc, #104]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 800a032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a034:	4a19      	ldr	r2, [pc, #100]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 800a036:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a03a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a03c:	e00f      	b.n	800a05e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d106      	bne.n	800a052 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a044:	4b15      	ldr	r3, [pc, #84]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 800a046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a048:	4a14      	ldr	r2, [pc, #80]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 800a04a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a04e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a050:	e005      	b.n	800a05e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a052:	4b12      	ldr	r3, [pc, #72]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 800a054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a056:	4a11      	ldr	r2, [pc, #68]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 800a058:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a05c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a05e:	4b0f      	ldr	r3, [pc, #60]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a0e      	ldr	r2, [pc, #56]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 800a064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a06a:	f7fa fc73 	bl	8004954 <HAL_GetTick>
 800a06e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a070:	e008      	b.n	800a084 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a072:	f7fa fc6f 	bl	8004954 <HAL_GetTick>
 800a076:	4602      	mov	r2, r0
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	1ad3      	subs	r3, r2, r3
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d901      	bls.n	800a084 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a080:	2303      	movs	r3, #3
 800a082:	e006      	b.n	800a092 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a084:	4b05      	ldr	r3, [pc, #20]	; (800a09c <RCCEx_PLL3_Config+0x15c>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d0f0      	beq.n	800a072 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a090:	7bfb      	ldrb	r3, [r7, #15]
}
 800a092:	4618      	mov	r0, r3
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	58024400 	.word	0x58024400
 800a0a0:	ffff0007 	.word	0xffff0007

0800a0a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e049      	b.n	800a14a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d106      	bne.n	800a0d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7f9 ffda 	bl	8004084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2202      	movs	r2, #2
 800a0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	3304      	adds	r3, #4
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	4610      	mov	r0, r2
 800a0e4:	f000 fe0c 	bl	800ad00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
	...

0800a154 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a162:	b2db      	uxtb	r3, r3
 800a164:	2b01      	cmp	r3, #1
 800a166:	d001      	beq.n	800a16c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	e05e      	b.n	800a22a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2202      	movs	r2, #2
 800a170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	68da      	ldr	r2, [r3, #12]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f042 0201 	orr.w	r2, r2, #1
 800a182:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a2b      	ldr	r2, [pc, #172]	; (800a238 <HAL_TIM_Base_Start_IT+0xe4>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d02c      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0x94>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a196:	d027      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0x94>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a27      	ldr	r2, [pc, #156]	; (800a23c <HAL_TIM_Base_Start_IT+0xe8>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d022      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0x94>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a26      	ldr	r2, [pc, #152]	; (800a240 <HAL_TIM_Base_Start_IT+0xec>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d01d      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0x94>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a24      	ldr	r2, [pc, #144]	; (800a244 <HAL_TIM_Base_Start_IT+0xf0>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d018      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0x94>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a23      	ldr	r2, [pc, #140]	; (800a248 <HAL_TIM_Base_Start_IT+0xf4>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d013      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0x94>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a21      	ldr	r2, [pc, #132]	; (800a24c <HAL_TIM_Base_Start_IT+0xf8>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d00e      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0x94>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a20      	ldr	r2, [pc, #128]	; (800a250 <HAL_TIM_Base_Start_IT+0xfc>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d009      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0x94>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a1e      	ldr	r2, [pc, #120]	; (800a254 <HAL_TIM_Base_Start_IT+0x100>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d004      	beq.n	800a1e8 <HAL_TIM_Base_Start_IT+0x94>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a1d      	ldr	r2, [pc, #116]	; (800a258 <HAL_TIM_Base_Start_IT+0x104>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d115      	bne.n	800a214 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	689a      	ldr	r2, [r3, #8]
 800a1ee:	4b1b      	ldr	r3, [pc, #108]	; (800a25c <HAL_TIM_Base_Start_IT+0x108>)
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2b06      	cmp	r3, #6
 800a1f8:	d015      	beq.n	800a226 <HAL_TIM_Base_Start_IT+0xd2>
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a200:	d011      	beq.n	800a226 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f042 0201 	orr.w	r2, r2, #1
 800a210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a212:	e008      	b.n	800a226 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f042 0201 	orr.w	r2, r2, #1
 800a222:	601a      	str	r2, [r3, #0]
 800a224:	e000      	b.n	800a228 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a226:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3714      	adds	r7, #20
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop
 800a238:	40010000 	.word	0x40010000
 800a23c:	40000400 	.word	0x40000400
 800a240:	40000800 	.word	0x40000800
 800a244:	40000c00 	.word	0x40000c00
 800a248:	40010400 	.word	0x40010400
 800a24c:	40001800 	.word	0x40001800
 800a250:	40014000 	.word	0x40014000
 800a254:	4000e000 	.word	0x4000e000
 800a258:	4000e400 	.word	0x4000e400
 800a25c:	00010007 	.word	0x00010007

0800a260 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d101      	bne.n	800a272 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	e049      	b.n	800a306 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d106      	bne.n	800a28c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f7f9 feb4 	bl	8003ff4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2202      	movs	r2, #2
 800a290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	3304      	adds	r3, #4
 800a29c:	4619      	mov	r1, r3
 800a29e:	4610      	mov	r0, r2
 800a2a0:	f000 fd2e 	bl	800ad00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
	...

0800a310 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d109      	bne.n	800a338 <HAL_TIM_PWM_Start_IT+0x28>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	bf14      	ite	ne
 800a330:	2301      	movne	r3, #1
 800a332:	2300      	moveq	r3, #0
 800a334:	b2db      	uxtb	r3, r3
 800a336:	e03c      	b.n	800a3b2 <HAL_TIM_PWM_Start_IT+0xa2>
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	2b04      	cmp	r3, #4
 800a33c:	d109      	bne.n	800a352 <HAL_TIM_PWM_Start_IT+0x42>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b01      	cmp	r3, #1
 800a348:	bf14      	ite	ne
 800a34a:	2301      	movne	r3, #1
 800a34c:	2300      	moveq	r3, #0
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	e02f      	b.n	800a3b2 <HAL_TIM_PWM_Start_IT+0xa2>
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	2b08      	cmp	r3, #8
 800a356:	d109      	bne.n	800a36c <HAL_TIM_PWM_Start_IT+0x5c>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	2b01      	cmp	r3, #1
 800a362:	bf14      	ite	ne
 800a364:	2301      	movne	r3, #1
 800a366:	2300      	moveq	r3, #0
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	e022      	b.n	800a3b2 <HAL_TIM_PWM_Start_IT+0xa2>
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	2b0c      	cmp	r3, #12
 800a370:	d109      	bne.n	800a386 <HAL_TIM_PWM_Start_IT+0x76>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	bf14      	ite	ne
 800a37e:	2301      	movne	r3, #1
 800a380:	2300      	moveq	r3, #0
 800a382:	b2db      	uxtb	r3, r3
 800a384:	e015      	b.n	800a3b2 <HAL_TIM_PWM_Start_IT+0xa2>
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	2b10      	cmp	r3, #16
 800a38a:	d109      	bne.n	800a3a0 <HAL_TIM_PWM_Start_IT+0x90>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a392:	b2db      	uxtb	r3, r3
 800a394:	2b01      	cmp	r3, #1
 800a396:	bf14      	ite	ne
 800a398:	2301      	movne	r3, #1
 800a39a:	2300      	moveq	r3, #0
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	e008      	b.n	800a3b2 <HAL_TIM_PWM_Start_IT+0xa2>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	bf14      	ite	ne
 800a3ac:	2301      	movne	r3, #1
 800a3ae:	2300      	moveq	r3, #0
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d001      	beq.n	800a3ba <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e0f6      	b.n	800a5a8 <HAL_TIM_PWM_Start_IT+0x298>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d104      	bne.n	800a3ca <HAL_TIM_PWM_Start_IT+0xba>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2202      	movs	r2, #2
 800a3c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3c8:	e023      	b.n	800a412 <HAL_TIM_PWM_Start_IT+0x102>
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	2b04      	cmp	r3, #4
 800a3ce:	d104      	bne.n	800a3da <HAL_TIM_PWM_Start_IT+0xca>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2202      	movs	r2, #2
 800a3d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3d8:	e01b      	b.n	800a412 <HAL_TIM_PWM_Start_IT+0x102>
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	2b08      	cmp	r3, #8
 800a3de:	d104      	bne.n	800a3ea <HAL_TIM_PWM_Start_IT+0xda>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2202      	movs	r2, #2
 800a3e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3e8:	e013      	b.n	800a412 <HAL_TIM_PWM_Start_IT+0x102>
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	2b0c      	cmp	r3, #12
 800a3ee:	d104      	bne.n	800a3fa <HAL_TIM_PWM_Start_IT+0xea>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2202      	movs	r2, #2
 800a3f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3f8:	e00b      	b.n	800a412 <HAL_TIM_PWM_Start_IT+0x102>
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2b10      	cmp	r3, #16
 800a3fe:	d104      	bne.n	800a40a <HAL_TIM_PWM_Start_IT+0xfa>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2202      	movs	r2, #2
 800a404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a408:	e003      	b.n	800a412 <HAL_TIM_PWM_Start_IT+0x102>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2202      	movs	r2, #2
 800a40e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	2b0c      	cmp	r3, #12
 800a416:	d841      	bhi.n	800a49c <HAL_TIM_PWM_Start_IT+0x18c>
 800a418:	a201      	add	r2, pc, #4	; (adr r2, 800a420 <HAL_TIM_PWM_Start_IT+0x110>)
 800a41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a41e:	bf00      	nop
 800a420:	0800a455 	.word	0x0800a455
 800a424:	0800a49d 	.word	0x0800a49d
 800a428:	0800a49d 	.word	0x0800a49d
 800a42c:	0800a49d 	.word	0x0800a49d
 800a430:	0800a467 	.word	0x0800a467
 800a434:	0800a49d 	.word	0x0800a49d
 800a438:	0800a49d 	.word	0x0800a49d
 800a43c:	0800a49d 	.word	0x0800a49d
 800a440:	0800a479 	.word	0x0800a479
 800a444:	0800a49d 	.word	0x0800a49d
 800a448:	0800a49d 	.word	0x0800a49d
 800a44c:	0800a49d 	.word	0x0800a49d
 800a450:	0800a48b 	.word	0x0800a48b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	68da      	ldr	r2, [r3, #12]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f042 0202 	orr.w	r2, r2, #2
 800a462:	60da      	str	r2, [r3, #12]
      break;
 800a464:	e01d      	b.n	800a4a2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68da      	ldr	r2, [r3, #12]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f042 0204 	orr.w	r2, r2, #4
 800a474:	60da      	str	r2, [r3, #12]
      break;
 800a476:	e014      	b.n	800a4a2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	68da      	ldr	r2, [r3, #12]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f042 0208 	orr.w	r2, r2, #8
 800a486:	60da      	str	r2, [r3, #12]
      break;
 800a488:	e00b      	b.n	800a4a2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	68da      	ldr	r2, [r3, #12]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f042 0210 	orr.w	r2, r2, #16
 800a498:	60da      	str	r2, [r3, #12]
      break;
 800a49a:	e002      	b.n	800a4a2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	73fb      	strb	r3, [r7, #15]
      break;
 800a4a0:	bf00      	nop
  }

  if (status == HAL_OK)
 800a4a2:	7bfb      	ldrb	r3, [r7, #15]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d17e      	bne.n	800a5a6 <HAL_TIM_PWM_Start_IT+0x296>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	6839      	ldr	r1, [r7, #0]
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f000 ffa1 	bl	800b3f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a3d      	ldr	r2, [pc, #244]	; (800a5b0 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d013      	beq.n	800a4e8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a3b      	ldr	r2, [pc, #236]	; (800a5b4 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d00e      	beq.n	800a4e8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a3a      	ldr	r2, [pc, #232]	; (800a5b8 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d009      	beq.n	800a4e8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a38      	ldr	r2, [pc, #224]	; (800a5bc <HAL_TIM_PWM_Start_IT+0x2ac>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d004      	beq.n	800a4e8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a37      	ldr	r2, [pc, #220]	; (800a5c0 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d101      	bne.n	800a4ec <HAL_TIM_PWM_Start_IT+0x1dc>
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e000      	b.n	800a4ee <HAL_TIM_PWM_Start_IT+0x1de>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d007      	beq.n	800a502 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a500:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a2a      	ldr	r2, [pc, #168]	; (800a5b0 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d02c      	beq.n	800a566 <HAL_TIM_PWM_Start_IT+0x256>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a514:	d027      	beq.n	800a566 <HAL_TIM_PWM_Start_IT+0x256>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a2a      	ldr	r2, [pc, #168]	; (800a5c4 <HAL_TIM_PWM_Start_IT+0x2b4>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d022      	beq.n	800a566 <HAL_TIM_PWM_Start_IT+0x256>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a28      	ldr	r2, [pc, #160]	; (800a5c8 <HAL_TIM_PWM_Start_IT+0x2b8>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d01d      	beq.n	800a566 <HAL_TIM_PWM_Start_IT+0x256>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a27      	ldr	r2, [pc, #156]	; (800a5cc <HAL_TIM_PWM_Start_IT+0x2bc>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d018      	beq.n	800a566 <HAL_TIM_PWM_Start_IT+0x256>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a1e      	ldr	r2, [pc, #120]	; (800a5b4 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d013      	beq.n	800a566 <HAL_TIM_PWM_Start_IT+0x256>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a23      	ldr	r2, [pc, #140]	; (800a5d0 <HAL_TIM_PWM_Start_IT+0x2c0>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d00e      	beq.n	800a566 <HAL_TIM_PWM_Start_IT+0x256>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a1a      	ldr	r2, [pc, #104]	; (800a5b8 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d009      	beq.n	800a566 <HAL_TIM_PWM_Start_IT+0x256>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a1f      	ldr	r2, [pc, #124]	; (800a5d4 <HAL_TIM_PWM_Start_IT+0x2c4>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d004      	beq.n	800a566 <HAL_TIM_PWM_Start_IT+0x256>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a1d      	ldr	r2, [pc, #116]	; (800a5d8 <HAL_TIM_PWM_Start_IT+0x2c8>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d115      	bne.n	800a592 <HAL_TIM_PWM_Start_IT+0x282>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	689a      	ldr	r2, [r3, #8]
 800a56c:	4b1b      	ldr	r3, [pc, #108]	; (800a5dc <HAL_TIM_PWM_Start_IT+0x2cc>)
 800a56e:	4013      	ands	r3, r2
 800a570:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	2b06      	cmp	r3, #6
 800a576:	d015      	beq.n	800a5a4 <HAL_TIM_PWM_Start_IT+0x294>
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a57e:	d011      	beq.n	800a5a4 <HAL_TIM_PWM_Start_IT+0x294>
      {
        __HAL_TIM_ENABLE(htim);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f042 0201 	orr.w	r2, r2, #1
 800a58e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a590:	e008      	b.n	800a5a4 <HAL_TIM_PWM_Start_IT+0x294>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f042 0201 	orr.w	r2, r2, #1
 800a5a0:	601a      	str	r2, [r3, #0]
 800a5a2:	e000      	b.n	800a5a6 <HAL_TIM_PWM_Start_IT+0x296>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5a4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3710      	adds	r7, #16
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	40010000 	.word	0x40010000
 800a5b4:	40010400 	.word	0x40010400
 800a5b8:	40014000 	.word	0x40014000
 800a5bc:	40014400 	.word	0x40014400
 800a5c0:	40014800 	.word	0x40014800
 800a5c4:	40000400 	.word	0x40000400
 800a5c8:	40000800 	.word	0x40000800
 800a5cc:	40000c00 	.word	0x40000c00
 800a5d0:	40001800 	.word	0x40001800
 800a5d4:	4000e000 	.word	0x4000e000
 800a5d8:	4000e400 	.word	0x4000e400
 800a5dc:	00010007 	.word	0x00010007

0800a5e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e08f      	b.n	800a714 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d106      	bne.n	800a60e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f7f9 fbe5 	bl	8003dd8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2202      	movs	r2, #2
 800a612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	6899      	ldr	r1, [r3, #8]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	4b3e      	ldr	r3, [pc, #248]	; (800a71c <HAL_TIM_Encoder_Init+0x13c>)
 800a622:	400b      	ands	r3, r1
 800a624:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	3304      	adds	r3, #4
 800a62e:	4619      	mov	r1, r3
 800a630:	4610      	mov	r0, r2
 800a632:	f000 fb65 	bl	800ad00 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	699b      	ldr	r3, [r3, #24]
 800a644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	6a1b      	ldr	r3, [r3, #32]
 800a64c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	697a      	ldr	r2, [r7, #20]
 800a654:	4313      	orrs	r3, r2
 800a656:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a658:	693a      	ldr	r2, [r7, #16]
 800a65a:	4b31      	ldr	r3, [pc, #196]	; (800a720 <HAL_TIM_Encoder_Init+0x140>)
 800a65c:	4013      	ands	r3, r2
 800a65e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	689a      	ldr	r2, [r3, #8]
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	699b      	ldr	r3, [r3, #24]
 800a668:	021b      	lsls	r3, r3, #8
 800a66a:	4313      	orrs	r3, r2
 800a66c:	693a      	ldr	r2, [r7, #16]
 800a66e:	4313      	orrs	r3, r2
 800a670:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a672:	693a      	ldr	r2, [r7, #16]
 800a674:	4b2b      	ldr	r3, [pc, #172]	; (800a724 <HAL_TIM_Encoder_Init+0x144>)
 800a676:	4013      	ands	r3, r2
 800a678:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a67a:	693a      	ldr	r2, [r7, #16]
 800a67c:	4b2a      	ldr	r3, [pc, #168]	; (800a728 <HAL_TIM_Encoder_Init+0x148>)
 800a67e:	4013      	ands	r3, r2
 800a680:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	68da      	ldr	r2, [r3, #12]
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	69db      	ldr	r3, [r3, #28]
 800a68a:	021b      	lsls	r3, r3, #8
 800a68c:	4313      	orrs	r3, r2
 800a68e:	693a      	ldr	r2, [r7, #16]
 800a690:	4313      	orrs	r3, r2
 800a692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	011a      	lsls	r2, r3, #4
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	6a1b      	ldr	r3, [r3, #32]
 800a69e:	031b      	lsls	r3, r3, #12
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	693a      	ldr	r2, [r7, #16]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a6ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a6b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	685a      	ldr	r2, [r3, #4]
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	695b      	ldr	r3, [r3, #20]
 800a6c0:	011b      	lsls	r3, r3, #4
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	697a      	ldr	r2, [r7, #20]
 800a6d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	693a      	ldr	r2, [r7, #16]
 800a6d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2201      	movs	r2, #1
 800a706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2201      	movs	r2, #1
 800a70e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a712:	2300      	movs	r3, #0
}
 800a714:	4618      	mov	r0, r3
 800a716:	3718      	adds	r7, #24
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	fffebff8 	.word	0xfffebff8
 800a720:	fffffcfc 	.word	0xfffffcfc
 800a724:	fffff3f3 	.word	0xfffff3f3
 800a728:	ffff0f0f 	.word	0xffff0f0f

0800a72c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a73c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a744:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a74c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a754:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d110      	bne.n	800a77e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a75c:	7bfb      	ldrb	r3, [r7, #15]
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d102      	bne.n	800a768 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a762:	7b7b      	ldrb	r3, [r7, #13]
 800a764:	2b01      	cmp	r3, #1
 800a766:	d001      	beq.n	800a76c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	e069      	b.n	800a840 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2202      	movs	r2, #2
 800a770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2202      	movs	r2, #2
 800a778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a77c:	e031      	b.n	800a7e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	2b04      	cmp	r3, #4
 800a782:	d110      	bne.n	800a7a6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a784:	7bbb      	ldrb	r3, [r7, #14]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d102      	bne.n	800a790 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a78a:	7b3b      	ldrb	r3, [r7, #12]
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d001      	beq.n	800a794 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a790:	2301      	movs	r3, #1
 800a792:	e055      	b.n	800a840 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2202      	movs	r2, #2
 800a798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2202      	movs	r2, #2
 800a7a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7a4:	e01d      	b.n	800a7e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a7a6:	7bfb      	ldrb	r3, [r7, #15]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d108      	bne.n	800a7be <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a7ac:	7bbb      	ldrb	r3, [r7, #14]
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d105      	bne.n	800a7be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a7b2:	7b7b      	ldrb	r3, [r7, #13]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d102      	bne.n	800a7be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a7b8:	7b3b      	ldrb	r3, [r7, #12]
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d001      	beq.n	800a7c2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e03e      	b.n	800a840 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2202      	movs	r2, #2
 800a7c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2202      	movs	r2, #2
 800a7ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2202      	movs	r2, #2
 800a7d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2202      	movs	r2, #2
 800a7de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d003      	beq.n	800a7f0 <HAL_TIM_Encoder_Start+0xc4>
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	2b04      	cmp	r3, #4
 800a7ec:	d008      	beq.n	800a800 <HAL_TIM_Encoder_Start+0xd4>
 800a7ee:	e00f      	b.n	800a810 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	2100      	movs	r1, #0
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 fdfd 	bl	800b3f8 <TIM_CCxChannelCmd>
      break;
 800a7fe:	e016      	b.n	800a82e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2201      	movs	r2, #1
 800a806:	2104      	movs	r1, #4
 800a808:	4618      	mov	r0, r3
 800a80a:	f000 fdf5 	bl	800b3f8 <TIM_CCxChannelCmd>
      break;
 800a80e:	e00e      	b.n	800a82e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2201      	movs	r2, #1
 800a816:	2100      	movs	r1, #0
 800a818:	4618      	mov	r0, r3
 800a81a:	f000 fded 	bl	800b3f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	2201      	movs	r2, #1
 800a824:	2104      	movs	r1, #4
 800a826:	4618      	mov	r0, r3
 800a828:	f000 fde6 	bl	800b3f8 <TIM_CCxChannelCmd>
      break;
 800a82c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f042 0201 	orr.w	r2, r2, #1
 800a83c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	3710      	adds	r7, #16
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	f003 0302 	and.w	r3, r3, #2
 800a85a:	2b02      	cmp	r3, #2
 800a85c:	d122      	bne.n	800a8a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	f003 0302 	and.w	r3, r3, #2
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d11b      	bne.n	800a8a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f06f 0202 	mvn.w	r2, #2
 800a874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	699b      	ldr	r3, [r3, #24]
 800a882:	f003 0303 	and.w	r3, r3, #3
 800a886:	2b00      	cmp	r3, #0
 800a888:	d003      	beq.n	800a892 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 fa1a 	bl	800acc4 <HAL_TIM_IC_CaptureCallback>
 800a890:	e005      	b.n	800a89e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 fa0c 	bl	800acb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 fa1d 	bl	800acd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	f003 0304 	and.w	r3, r3, #4
 800a8ae:	2b04      	cmp	r3, #4
 800a8b0:	d122      	bne.n	800a8f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	f003 0304 	and.w	r3, r3, #4
 800a8bc:	2b04      	cmp	r3, #4
 800a8be:	d11b      	bne.n	800a8f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f06f 0204 	mvn.w	r2, #4
 800a8c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2202      	movs	r2, #2
 800a8ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	699b      	ldr	r3, [r3, #24]
 800a8d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d003      	beq.n	800a8e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 f9f0 	bl	800acc4 <HAL_TIM_IC_CaptureCallback>
 800a8e4:	e005      	b.n	800a8f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 f9e2 	bl	800acb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 f9f3 	bl	800acd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	f003 0308 	and.w	r3, r3, #8
 800a902:	2b08      	cmp	r3, #8
 800a904:	d122      	bne.n	800a94c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	f003 0308 	and.w	r3, r3, #8
 800a910:	2b08      	cmp	r3, #8
 800a912:	d11b      	bne.n	800a94c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f06f 0208 	mvn.w	r2, #8
 800a91c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2204      	movs	r2, #4
 800a922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	69db      	ldr	r3, [r3, #28]
 800a92a:	f003 0303 	and.w	r3, r3, #3
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d003      	beq.n	800a93a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f9c6 	bl	800acc4 <HAL_TIM_IC_CaptureCallback>
 800a938:	e005      	b.n	800a946 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f9b8 	bl	800acb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 f9c9 	bl	800acd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	691b      	ldr	r3, [r3, #16]
 800a952:	f003 0310 	and.w	r3, r3, #16
 800a956:	2b10      	cmp	r3, #16
 800a958:	d122      	bne.n	800a9a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	f003 0310 	and.w	r3, r3, #16
 800a964:	2b10      	cmp	r3, #16
 800a966:	d11b      	bne.n	800a9a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f06f 0210 	mvn.w	r2, #16
 800a970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2208      	movs	r2, #8
 800a976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	69db      	ldr	r3, [r3, #28]
 800a97e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a982:	2b00      	cmp	r3, #0
 800a984:	d003      	beq.n	800a98e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f99c 	bl	800acc4 <HAL_TIM_IC_CaptureCallback>
 800a98c:	e005      	b.n	800a99a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 f98e 	bl	800acb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 f99f 	bl	800acd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	f003 0301 	and.w	r3, r3, #1
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d10e      	bne.n	800a9cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	f003 0301 	and.w	r3, r3, #1
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d107      	bne.n	800a9cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f06f 0201 	mvn.w	r2, #1
 800a9c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f7f9 fdfe 	bl	80045c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9d6:	2b80      	cmp	r3, #128	; 0x80
 800a9d8:	d10e      	bne.n	800a9f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9e4:	2b80      	cmp	r3, #128	; 0x80
 800a9e6:	d107      	bne.n	800a9f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a9f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fe6c 	bl	800b6d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	691b      	ldr	r3, [r3, #16]
 800a9fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa06:	d10e      	bne.n	800aa26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa12:	2b80      	cmp	r3, #128	; 0x80
 800aa14:	d107      	bne.n	800aa26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 fe5f 	bl	800b6e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	691b      	ldr	r3, [r3, #16]
 800aa2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa30:	2b40      	cmp	r3, #64	; 0x40
 800aa32:	d10e      	bne.n	800aa52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa3e:	2b40      	cmp	r3, #64	; 0x40
 800aa40:	d107      	bne.n	800aa52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 f94d 	bl	800acec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	f003 0320 	and.w	r3, r3, #32
 800aa5c:	2b20      	cmp	r3, #32
 800aa5e:	d10e      	bne.n	800aa7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	68db      	ldr	r3, [r3, #12]
 800aa66:	f003 0320 	and.w	r3, r3, #32
 800aa6a:	2b20      	cmp	r3, #32
 800aa6c:	d107      	bne.n	800aa7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f06f 0220 	mvn.w	r2, #32
 800aa76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 fe1f 	bl	800b6bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa7e:	bf00      	nop
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
	...

0800aa88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa94:	2300      	movs	r3, #0
 800aa96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d101      	bne.n	800aaa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aaa2:	2302      	movs	r3, #2
 800aaa4:	e0ff      	b.n	800aca6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2b14      	cmp	r3, #20
 800aab2:	f200 80f0 	bhi.w	800ac96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aab6:	a201      	add	r2, pc, #4	; (adr r2, 800aabc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aabc:	0800ab11 	.word	0x0800ab11
 800aac0:	0800ac97 	.word	0x0800ac97
 800aac4:	0800ac97 	.word	0x0800ac97
 800aac8:	0800ac97 	.word	0x0800ac97
 800aacc:	0800ab51 	.word	0x0800ab51
 800aad0:	0800ac97 	.word	0x0800ac97
 800aad4:	0800ac97 	.word	0x0800ac97
 800aad8:	0800ac97 	.word	0x0800ac97
 800aadc:	0800ab93 	.word	0x0800ab93
 800aae0:	0800ac97 	.word	0x0800ac97
 800aae4:	0800ac97 	.word	0x0800ac97
 800aae8:	0800ac97 	.word	0x0800ac97
 800aaec:	0800abd3 	.word	0x0800abd3
 800aaf0:	0800ac97 	.word	0x0800ac97
 800aaf4:	0800ac97 	.word	0x0800ac97
 800aaf8:	0800ac97 	.word	0x0800ac97
 800aafc:	0800ac15 	.word	0x0800ac15
 800ab00:	0800ac97 	.word	0x0800ac97
 800ab04:	0800ac97 	.word	0x0800ac97
 800ab08:	0800ac97 	.word	0x0800ac97
 800ab0c:	0800ac55 	.word	0x0800ac55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	68b9      	ldr	r1, [r7, #8]
 800ab16:	4618      	mov	r0, r3
 800ab18:	f000 f998 	bl	800ae4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	699a      	ldr	r2, [r3, #24]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f042 0208 	orr.w	r2, r2, #8
 800ab2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	699a      	ldr	r2, [r3, #24]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f022 0204 	bic.w	r2, r2, #4
 800ab3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	6999      	ldr	r1, [r3, #24]
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	691a      	ldr	r2, [r3, #16]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	430a      	orrs	r2, r1
 800ab4c:	619a      	str	r2, [r3, #24]
      break;
 800ab4e:	e0a5      	b.n	800ac9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	68b9      	ldr	r1, [r7, #8]
 800ab56:	4618      	mov	r0, r3
 800ab58:	f000 fa08 	bl	800af6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	699a      	ldr	r2, [r3, #24]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	699a      	ldr	r2, [r3, #24]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	6999      	ldr	r1, [r3, #24]
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	021a      	lsls	r2, r3, #8
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	430a      	orrs	r2, r1
 800ab8e:	619a      	str	r2, [r3, #24]
      break;
 800ab90:	e084      	b.n	800ac9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	68b9      	ldr	r1, [r7, #8]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f000 fa71 	bl	800b080 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	69da      	ldr	r2, [r3, #28]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f042 0208 	orr.w	r2, r2, #8
 800abac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	69da      	ldr	r2, [r3, #28]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f022 0204 	bic.w	r2, r2, #4
 800abbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	69d9      	ldr	r1, [r3, #28]
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	691a      	ldr	r2, [r3, #16]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	430a      	orrs	r2, r1
 800abce:	61da      	str	r2, [r3, #28]
      break;
 800abd0:	e064      	b.n	800ac9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68b9      	ldr	r1, [r7, #8]
 800abd8:	4618      	mov	r0, r3
 800abda:	f000 fad9 	bl	800b190 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	69da      	ldr	r2, [r3, #28]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	69da      	ldr	r2, [r3, #28]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	69d9      	ldr	r1, [r3, #28]
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	691b      	ldr	r3, [r3, #16]
 800ac08:	021a      	lsls	r2, r3, #8
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	430a      	orrs	r2, r1
 800ac10:	61da      	str	r2, [r3, #28]
      break;
 800ac12:	e043      	b.n	800ac9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	68b9      	ldr	r1, [r7, #8]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f000 fb22 	bl	800b264 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f042 0208 	orr.w	r2, r2, #8
 800ac2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f022 0204 	bic.w	r2, r2, #4
 800ac3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	691a      	ldr	r2, [r3, #16]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	430a      	orrs	r2, r1
 800ac50:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ac52:	e023      	b.n	800ac9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68b9      	ldr	r1, [r7, #8]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f000 fb66 	bl	800b32c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	691b      	ldr	r3, [r3, #16]
 800ac8a:	021a      	lsls	r2, r3, #8
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	430a      	orrs	r2, r1
 800ac92:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ac94:	e002      	b.n	800ac9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	75fb      	strb	r3, [r7, #23]
      break;
 800ac9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aca4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3718      	adds	r7, #24
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop

0800acb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800acb8:	bf00      	nop
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ace0:	bf00      	nop
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800acf4:	bf00      	nop
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b085      	sub	sp, #20
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4a44      	ldr	r2, [pc, #272]	; (800ae24 <TIM_Base_SetConfig+0x124>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d013      	beq.n	800ad40 <TIM_Base_SetConfig+0x40>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad1e:	d00f      	beq.n	800ad40 <TIM_Base_SetConfig+0x40>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a41      	ldr	r2, [pc, #260]	; (800ae28 <TIM_Base_SetConfig+0x128>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d00b      	beq.n	800ad40 <TIM_Base_SetConfig+0x40>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a40      	ldr	r2, [pc, #256]	; (800ae2c <TIM_Base_SetConfig+0x12c>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d007      	beq.n	800ad40 <TIM_Base_SetConfig+0x40>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a3f      	ldr	r2, [pc, #252]	; (800ae30 <TIM_Base_SetConfig+0x130>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d003      	beq.n	800ad40 <TIM_Base_SetConfig+0x40>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4a3e      	ldr	r2, [pc, #248]	; (800ae34 <TIM_Base_SetConfig+0x134>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d108      	bne.n	800ad52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4a33      	ldr	r2, [pc, #204]	; (800ae24 <TIM_Base_SetConfig+0x124>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d027      	beq.n	800adaa <TIM_Base_SetConfig+0xaa>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad60:	d023      	beq.n	800adaa <TIM_Base_SetConfig+0xaa>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	4a30      	ldr	r2, [pc, #192]	; (800ae28 <TIM_Base_SetConfig+0x128>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d01f      	beq.n	800adaa <TIM_Base_SetConfig+0xaa>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	4a2f      	ldr	r2, [pc, #188]	; (800ae2c <TIM_Base_SetConfig+0x12c>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d01b      	beq.n	800adaa <TIM_Base_SetConfig+0xaa>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4a2e      	ldr	r2, [pc, #184]	; (800ae30 <TIM_Base_SetConfig+0x130>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d017      	beq.n	800adaa <TIM_Base_SetConfig+0xaa>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4a2d      	ldr	r2, [pc, #180]	; (800ae34 <TIM_Base_SetConfig+0x134>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d013      	beq.n	800adaa <TIM_Base_SetConfig+0xaa>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4a2c      	ldr	r2, [pc, #176]	; (800ae38 <TIM_Base_SetConfig+0x138>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d00f      	beq.n	800adaa <TIM_Base_SetConfig+0xaa>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4a2b      	ldr	r2, [pc, #172]	; (800ae3c <TIM_Base_SetConfig+0x13c>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d00b      	beq.n	800adaa <TIM_Base_SetConfig+0xaa>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a2a      	ldr	r2, [pc, #168]	; (800ae40 <TIM_Base_SetConfig+0x140>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d007      	beq.n	800adaa <TIM_Base_SetConfig+0xaa>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a29      	ldr	r2, [pc, #164]	; (800ae44 <TIM_Base_SetConfig+0x144>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d003      	beq.n	800adaa <TIM_Base_SetConfig+0xaa>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a28      	ldr	r2, [pc, #160]	; (800ae48 <TIM_Base_SetConfig+0x148>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d108      	bne.n	800adbc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	4313      	orrs	r3, r2
 800adba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	695b      	ldr	r3, [r3, #20]
 800adc6:	4313      	orrs	r3, r2
 800adc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	689a      	ldr	r2, [r3, #8]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a10      	ldr	r2, [pc, #64]	; (800ae24 <TIM_Base_SetConfig+0x124>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d00f      	beq.n	800ae08 <TIM_Base_SetConfig+0x108>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	4a12      	ldr	r2, [pc, #72]	; (800ae34 <TIM_Base_SetConfig+0x134>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d00b      	beq.n	800ae08 <TIM_Base_SetConfig+0x108>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a11      	ldr	r2, [pc, #68]	; (800ae38 <TIM_Base_SetConfig+0x138>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d007      	beq.n	800ae08 <TIM_Base_SetConfig+0x108>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a10      	ldr	r2, [pc, #64]	; (800ae3c <TIM_Base_SetConfig+0x13c>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d003      	beq.n	800ae08 <TIM_Base_SetConfig+0x108>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a0f      	ldr	r2, [pc, #60]	; (800ae40 <TIM_Base_SetConfig+0x140>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d103      	bne.n	800ae10 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	691a      	ldr	r2, [r3, #16]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	615a      	str	r2, [r3, #20]
}
 800ae16:	bf00      	nop
 800ae18:	3714      	adds	r7, #20
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop
 800ae24:	40010000 	.word	0x40010000
 800ae28:	40000400 	.word	0x40000400
 800ae2c:	40000800 	.word	0x40000800
 800ae30:	40000c00 	.word	0x40000c00
 800ae34:	40010400 	.word	0x40010400
 800ae38:	40014000 	.word	0x40014000
 800ae3c:	40014400 	.word	0x40014400
 800ae40:	40014800 	.word	0x40014800
 800ae44:	4000e000 	.word	0x4000e000
 800ae48:	4000e400 	.word	0x4000e400

0800ae4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b087      	sub	sp, #28
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6a1b      	ldr	r3, [r3, #32]
 800ae5a:	f023 0201 	bic.w	r2, r3, #1
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a1b      	ldr	r3, [r3, #32]
 800ae66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	699b      	ldr	r3, [r3, #24]
 800ae72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae74:	68fa      	ldr	r2, [r7, #12]
 800ae76:	4b37      	ldr	r3, [pc, #220]	; (800af54 <TIM_OC1_SetConfig+0x108>)
 800ae78:	4013      	ands	r3, r2
 800ae7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f023 0303 	bic.w	r3, r3, #3
 800ae82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	f023 0302 	bic.w	r3, r3, #2
 800ae94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	689b      	ldr	r3, [r3, #8]
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	4a2d      	ldr	r2, [pc, #180]	; (800af58 <TIM_OC1_SetConfig+0x10c>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d00f      	beq.n	800aec8 <TIM_OC1_SetConfig+0x7c>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4a2c      	ldr	r2, [pc, #176]	; (800af5c <TIM_OC1_SetConfig+0x110>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d00b      	beq.n	800aec8 <TIM_OC1_SetConfig+0x7c>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a2b      	ldr	r2, [pc, #172]	; (800af60 <TIM_OC1_SetConfig+0x114>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d007      	beq.n	800aec8 <TIM_OC1_SetConfig+0x7c>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4a2a      	ldr	r2, [pc, #168]	; (800af64 <TIM_OC1_SetConfig+0x118>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d003      	beq.n	800aec8 <TIM_OC1_SetConfig+0x7c>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4a29      	ldr	r2, [pc, #164]	; (800af68 <TIM_OC1_SetConfig+0x11c>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d10c      	bne.n	800aee2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	f023 0308 	bic.w	r3, r3, #8
 800aece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	697a      	ldr	r2, [r7, #20]
 800aed6:	4313      	orrs	r3, r2
 800aed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	f023 0304 	bic.w	r3, r3, #4
 800aee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4a1c      	ldr	r2, [pc, #112]	; (800af58 <TIM_OC1_SetConfig+0x10c>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d00f      	beq.n	800af0a <TIM_OC1_SetConfig+0xbe>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4a1b      	ldr	r2, [pc, #108]	; (800af5c <TIM_OC1_SetConfig+0x110>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d00b      	beq.n	800af0a <TIM_OC1_SetConfig+0xbe>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4a1a      	ldr	r2, [pc, #104]	; (800af60 <TIM_OC1_SetConfig+0x114>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d007      	beq.n	800af0a <TIM_OC1_SetConfig+0xbe>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4a19      	ldr	r2, [pc, #100]	; (800af64 <TIM_OC1_SetConfig+0x118>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d003      	beq.n	800af0a <TIM_OC1_SetConfig+0xbe>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4a18      	ldr	r2, [pc, #96]	; (800af68 <TIM_OC1_SetConfig+0x11c>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d111      	bne.n	800af2e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	695b      	ldr	r3, [r3, #20]
 800af1e:	693a      	ldr	r2, [r7, #16]
 800af20:	4313      	orrs	r3, r2
 800af22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	699b      	ldr	r3, [r3, #24]
 800af28:	693a      	ldr	r2, [r7, #16]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	685a      	ldr	r2, [r3, #4]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	697a      	ldr	r2, [r7, #20]
 800af46:	621a      	str	r2, [r3, #32]
}
 800af48:	bf00      	nop
 800af4a:	371c      	adds	r7, #28
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr
 800af54:	fffeff8f 	.word	0xfffeff8f
 800af58:	40010000 	.word	0x40010000
 800af5c:	40010400 	.word	0x40010400
 800af60:	40014000 	.word	0x40014000
 800af64:	40014400 	.word	0x40014400
 800af68:	40014800 	.word	0x40014800

0800af6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b087      	sub	sp, #28
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a1b      	ldr	r3, [r3, #32]
 800af7a:	f023 0210 	bic.w	r2, r3, #16
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6a1b      	ldr	r3, [r3, #32]
 800af86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	699b      	ldr	r3, [r3, #24]
 800af92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800af94:	68fa      	ldr	r2, [r7, #12]
 800af96:	4b34      	ldr	r3, [pc, #208]	; (800b068 <TIM_OC2_SetConfig+0xfc>)
 800af98:	4013      	ands	r3, r2
 800af9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	021b      	lsls	r3, r3, #8
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	4313      	orrs	r3, r2
 800afae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	f023 0320 	bic.w	r3, r3, #32
 800afb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	011b      	lsls	r3, r3, #4
 800afbe:	697a      	ldr	r2, [r7, #20]
 800afc0:	4313      	orrs	r3, r2
 800afc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	4a29      	ldr	r2, [pc, #164]	; (800b06c <TIM_OC2_SetConfig+0x100>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d003      	beq.n	800afd4 <TIM_OC2_SetConfig+0x68>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	4a28      	ldr	r2, [pc, #160]	; (800b070 <TIM_OC2_SetConfig+0x104>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d10d      	bne.n	800aff0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	011b      	lsls	r3, r3, #4
 800afe2:	697a      	ldr	r2, [r7, #20]
 800afe4:	4313      	orrs	r3, r2
 800afe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4a1e      	ldr	r2, [pc, #120]	; (800b06c <TIM_OC2_SetConfig+0x100>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d00f      	beq.n	800b018 <TIM_OC2_SetConfig+0xac>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4a1d      	ldr	r2, [pc, #116]	; (800b070 <TIM_OC2_SetConfig+0x104>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d00b      	beq.n	800b018 <TIM_OC2_SetConfig+0xac>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a1c      	ldr	r2, [pc, #112]	; (800b074 <TIM_OC2_SetConfig+0x108>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d007      	beq.n	800b018 <TIM_OC2_SetConfig+0xac>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a1b      	ldr	r2, [pc, #108]	; (800b078 <TIM_OC2_SetConfig+0x10c>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d003      	beq.n	800b018 <TIM_OC2_SetConfig+0xac>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4a1a      	ldr	r2, [pc, #104]	; (800b07c <TIM_OC2_SetConfig+0x110>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d113      	bne.n	800b040 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b01e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b026:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	695b      	ldr	r3, [r3, #20]
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	693a      	ldr	r2, [r7, #16]
 800b030:	4313      	orrs	r3, r2
 800b032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	693a      	ldr	r2, [r7, #16]
 800b03c:	4313      	orrs	r3, r2
 800b03e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	693a      	ldr	r2, [r7, #16]
 800b044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	68fa      	ldr	r2, [r7, #12]
 800b04a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	685a      	ldr	r2, [r3, #4]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	697a      	ldr	r2, [r7, #20]
 800b058:	621a      	str	r2, [r3, #32]
}
 800b05a:	bf00      	nop
 800b05c:	371c      	adds	r7, #28
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	feff8fff 	.word	0xfeff8fff
 800b06c:	40010000 	.word	0x40010000
 800b070:	40010400 	.word	0x40010400
 800b074:	40014000 	.word	0x40014000
 800b078:	40014400 	.word	0x40014400
 800b07c:	40014800 	.word	0x40014800

0800b080 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b080:	b480      	push	{r7}
 800b082:	b087      	sub	sp, #28
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6a1b      	ldr	r3, [r3, #32]
 800b08e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a1b      	ldr	r3, [r3, #32]
 800b09a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	69db      	ldr	r3, [r3, #28]
 800b0a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b0a8:	68fa      	ldr	r2, [r7, #12]
 800b0aa:	4b33      	ldr	r3, [pc, #204]	; (800b178 <TIM_OC3_SetConfig+0xf8>)
 800b0ac:	4013      	ands	r3, r2
 800b0ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f023 0303 	bic.w	r3, r3, #3
 800b0b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b0c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	021b      	lsls	r3, r3, #8
 800b0d0:	697a      	ldr	r2, [r7, #20]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4a28      	ldr	r2, [pc, #160]	; (800b17c <TIM_OC3_SetConfig+0xfc>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d003      	beq.n	800b0e6 <TIM_OC3_SetConfig+0x66>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	4a27      	ldr	r2, [pc, #156]	; (800b180 <TIM_OC3_SetConfig+0x100>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d10d      	bne.n	800b102 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	68db      	ldr	r3, [r3, #12]
 800b0f2:	021b      	lsls	r3, r3, #8
 800b0f4:	697a      	ldr	r2, [r7, #20]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a1d      	ldr	r2, [pc, #116]	; (800b17c <TIM_OC3_SetConfig+0xfc>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d00f      	beq.n	800b12a <TIM_OC3_SetConfig+0xaa>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4a1c      	ldr	r2, [pc, #112]	; (800b180 <TIM_OC3_SetConfig+0x100>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d00b      	beq.n	800b12a <TIM_OC3_SetConfig+0xaa>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	4a1b      	ldr	r2, [pc, #108]	; (800b184 <TIM_OC3_SetConfig+0x104>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d007      	beq.n	800b12a <TIM_OC3_SetConfig+0xaa>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	4a1a      	ldr	r2, [pc, #104]	; (800b188 <TIM_OC3_SetConfig+0x108>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d003      	beq.n	800b12a <TIM_OC3_SetConfig+0xaa>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	4a19      	ldr	r2, [pc, #100]	; (800b18c <TIM_OC3_SetConfig+0x10c>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d113      	bne.n	800b152 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b130:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b138:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	695b      	ldr	r3, [r3, #20]
 800b13e:	011b      	lsls	r3, r3, #4
 800b140:	693a      	ldr	r2, [r7, #16]
 800b142:	4313      	orrs	r3, r2
 800b144:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	699b      	ldr	r3, [r3, #24]
 800b14a:	011b      	lsls	r3, r3, #4
 800b14c:	693a      	ldr	r2, [r7, #16]
 800b14e:	4313      	orrs	r3, r2
 800b150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	693a      	ldr	r2, [r7, #16]
 800b156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	68fa      	ldr	r2, [r7, #12]
 800b15c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	685a      	ldr	r2, [r3, #4]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	697a      	ldr	r2, [r7, #20]
 800b16a:	621a      	str	r2, [r3, #32]
}
 800b16c:	bf00      	nop
 800b16e:	371c      	adds	r7, #28
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr
 800b178:	fffeff8f 	.word	0xfffeff8f
 800b17c:	40010000 	.word	0x40010000
 800b180:	40010400 	.word	0x40010400
 800b184:	40014000 	.word	0x40014000
 800b188:	40014400 	.word	0x40014400
 800b18c:	40014800 	.word	0x40014800

0800b190 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b190:	b480      	push	{r7}
 800b192:	b087      	sub	sp, #28
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6a1b      	ldr	r3, [r3, #32]
 800b19e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6a1b      	ldr	r3, [r3, #32]
 800b1aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	69db      	ldr	r3, [r3, #28]
 800b1b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	4b24      	ldr	r3, [pc, #144]	; (800b24c <TIM_OC4_SetConfig+0xbc>)
 800b1bc:	4013      	ands	r3, r2
 800b1be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	021b      	lsls	r3, r3, #8
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	031b      	lsls	r3, r3, #12
 800b1e2:	693a      	ldr	r2, [r7, #16]
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a19      	ldr	r2, [pc, #100]	; (800b250 <TIM_OC4_SetConfig+0xc0>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d00f      	beq.n	800b210 <TIM_OC4_SetConfig+0x80>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	4a18      	ldr	r2, [pc, #96]	; (800b254 <TIM_OC4_SetConfig+0xc4>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d00b      	beq.n	800b210 <TIM_OC4_SetConfig+0x80>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	4a17      	ldr	r2, [pc, #92]	; (800b258 <TIM_OC4_SetConfig+0xc8>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d007      	beq.n	800b210 <TIM_OC4_SetConfig+0x80>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	4a16      	ldr	r2, [pc, #88]	; (800b25c <TIM_OC4_SetConfig+0xcc>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d003      	beq.n	800b210 <TIM_OC4_SetConfig+0x80>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4a15      	ldr	r2, [pc, #84]	; (800b260 <TIM_OC4_SetConfig+0xd0>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d109      	bne.n	800b224 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b216:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	695b      	ldr	r3, [r3, #20]
 800b21c:	019b      	lsls	r3, r3, #6
 800b21e:	697a      	ldr	r2, [r7, #20]
 800b220:	4313      	orrs	r3, r2
 800b222:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	697a      	ldr	r2, [r7, #20]
 800b228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	685a      	ldr	r2, [r3, #4]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	693a      	ldr	r2, [r7, #16]
 800b23c:	621a      	str	r2, [r3, #32]
}
 800b23e:	bf00      	nop
 800b240:	371c      	adds	r7, #28
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop
 800b24c:	feff8fff 	.word	0xfeff8fff
 800b250:	40010000 	.word	0x40010000
 800b254:	40010400 	.word	0x40010400
 800b258:	40014000 	.word	0x40014000
 800b25c:	40014400 	.word	0x40014400
 800b260:	40014800 	.word	0x40014800

0800b264 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b264:	b480      	push	{r7}
 800b266:	b087      	sub	sp, #28
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6a1b      	ldr	r3, [r3, #32]
 800b272:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a1b      	ldr	r3, [r3, #32]
 800b27e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	4b21      	ldr	r3, [pc, #132]	; (800b314 <TIM_OC5_SetConfig+0xb0>)
 800b290:	4013      	ands	r3, r2
 800b292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b2a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	689b      	ldr	r3, [r3, #8]
 800b2aa:	041b      	lsls	r3, r3, #16
 800b2ac:	693a      	ldr	r2, [r7, #16]
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4a18      	ldr	r2, [pc, #96]	; (800b318 <TIM_OC5_SetConfig+0xb4>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d00f      	beq.n	800b2da <TIM_OC5_SetConfig+0x76>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a17      	ldr	r2, [pc, #92]	; (800b31c <TIM_OC5_SetConfig+0xb8>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d00b      	beq.n	800b2da <TIM_OC5_SetConfig+0x76>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4a16      	ldr	r2, [pc, #88]	; (800b320 <TIM_OC5_SetConfig+0xbc>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d007      	beq.n	800b2da <TIM_OC5_SetConfig+0x76>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a15      	ldr	r2, [pc, #84]	; (800b324 <TIM_OC5_SetConfig+0xc0>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d003      	beq.n	800b2da <TIM_OC5_SetConfig+0x76>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a14      	ldr	r2, [pc, #80]	; (800b328 <TIM_OC5_SetConfig+0xc4>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d109      	bne.n	800b2ee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	695b      	ldr	r3, [r3, #20]
 800b2e6:	021b      	lsls	r3, r3, #8
 800b2e8:	697a      	ldr	r2, [r7, #20]
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	697a      	ldr	r2, [r7, #20]
 800b2f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	68fa      	ldr	r2, [r7, #12]
 800b2f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	685a      	ldr	r2, [r3, #4]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	693a      	ldr	r2, [r7, #16]
 800b306:	621a      	str	r2, [r3, #32]
}
 800b308:	bf00      	nop
 800b30a:	371c      	adds	r7, #28
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr
 800b314:	fffeff8f 	.word	0xfffeff8f
 800b318:	40010000 	.word	0x40010000
 800b31c:	40010400 	.word	0x40010400
 800b320:	40014000 	.word	0x40014000
 800b324:	40014400 	.word	0x40014400
 800b328:	40014800 	.word	0x40014800

0800b32c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b087      	sub	sp, #28
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6a1b      	ldr	r3, [r3, #32]
 800b33a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6a1b      	ldr	r3, [r3, #32]
 800b346:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b354:	68fa      	ldr	r2, [r7, #12]
 800b356:	4b22      	ldr	r3, [pc, #136]	; (800b3e0 <TIM_OC6_SetConfig+0xb4>)
 800b358:	4013      	ands	r3, r2
 800b35a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	021b      	lsls	r3, r3, #8
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	4313      	orrs	r3, r2
 800b366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b36e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	051b      	lsls	r3, r3, #20
 800b376:	693a      	ldr	r2, [r7, #16]
 800b378:	4313      	orrs	r3, r2
 800b37a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a19      	ldr	r2, [pc, #100]	; (800b3e4 <TIM_OC6_SetConfig+0xb8>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d00f      	beq.n	800b3a4 <TIM_OC6_SetConfig+0x78>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	4a18      	ldr	r2, [pc, #96]	; (800b3e8 <TIM_OC6_SetConfig+0xbc>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d00b      	beq.n	800b3a4 <TIM_OC6_SetConfig+0x78>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a17      	ldr	r2, [pc, #92]	; (800b3ec <TIM_OC6_SetConfig+0xc0>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d007      	beq.n	800b3a4 <TIM_OC6_SetConfig+0x78>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4a16      	ldr	r2, [pc, #88]	; (800b3f0 <TIM_OC6_SetConfig+0xc4>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d003      	beq.n	800b3a4 <TIM_OC6_SetConfig+0x78>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4a15      	ldr	r2, [pc, #84]	; (800b3f4 <TIM_OC6_SetConfig+0xc8>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d109      	bne.n	800b3b8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b3aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	695b      	ldr	r3, [r3, #20]
 800b3b0:	029b      	lsls	r3, r3, #10
 800b3b2:	697a      	ldr	r2, [r7, #20]
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	697a      	ldr	r2, [r7, #20]
 800b3bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	68fa      	ldr	r2, [r7, #12]
 800b3c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	685a      	ldr	r2, [r3, #4]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	693a      	ldr	r2, [r7, #16]
 800b3d0:	621a      	str	r2, [r3, #32]
}
 800b3d2:	bf00      	nop
 800b3d4:	371c      	adds	r7, #28
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	feff8fff 	.word	0xfeff8fff
 800b3e4:	40010000 	.word	0x40010000
 800b3e8:	40010400 	.word	0x40010400
 800b3ec:	40014000 	.word	0x40014000
 800b3f0:	40014400 	.word	0x40014400
 800b3f4:	40014800 	.word	0x40014800

0800b3f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b087      	sub	sp, #28
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	f003 031f 	and.w	r3, r3, #31
 800b40a:	2201      	movs	r2, #1
 800b40c:	fa02 f303 	lsl.w	r3, r2, r3
 800b410:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	6a1a      	ldr	r2, [r3, #32]
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	43db      	mvns	r3, r3
 800b41a:	401a      	ands	r2, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	6a1a      	ldr	r2, [r3, #32]
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	f003 031f 	and.w	r3, r3, #31
 800b42a:	6879      	ldr	r1, [r7, #4]
 800b42c:	fa01 f303 	lsl.w	r3, r1, r3
 800b430:	431a      	orrs	r2, r3
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	621a      	str	r2, [r3, #32]
}
 800b436:	bf00      	nop
 800b438:	371c      	adds	r7, #28
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
	...

0800b444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b444:	b480      	push	{r7}
 800b446:	b085      	sub	sp, #20
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b454:	2b01      	cmp	r3, #1
 800b456:	d101      	bne.n	800b45c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b458:	2302      	movs	r3, #2
 800b45a:	e077      	b.n	800b54c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2201      	movs	r2, #1
 800b460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2202      	movs	r2, #2
 800b468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a35      	ldr	r2, [pc, #212]	; (800b558 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d004      	beq.n	800b490 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a34      	ldr	r2, [pc, #208]	; (800b55c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d108      	bne.n	800b4a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b496:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	68fa      	ldr	r2, [r7, #12]
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a25      	ldr	r2, [pc, #148]	; (800b558 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d02c      	beq.n	800b520 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4ce:	d027      	beq.n	800b520 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a22      	ldr	r2, [pc, #136]	; (800b560 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d022      	beq.n	800b520 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a21      	ldr	r2, [pc, #132]	; (800b564 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d01d      	beq.n	800b520 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a1f      	ldr	r2, [pc, #124]	; (800b568 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d018      	beq.n	800b520 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a1a      	ldr	r2, [pc, #104]	; (800b55c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d013      	beq.n	800b520 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a1b      	ldr	r2, [pc, #108]	; (800b56c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d00e      	beq.n	800b520 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a1a      	ldr	r2, [pc, #104]	; (800b570 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d009      	beq.n	800b520 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a18      	ldr	r2, [pc, #96]	; (800b574 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d004      	beq.n	800b520 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a17      	ldr	r2, [pc, #92]	; (800b578 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d10c      	bne.n	800b53a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b526:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	68ba      	ldr	r2, [r7, #8]
 800b52e:	4313      	orrs	r3, r2
 800b530:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	68ba      	ldr	r2, [r7, #8]
 800b538:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2201      	movs	r2, #1
 800b53e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2200      	movs	r2, #0
 800b546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b54a:	2300      	movs	r3, #0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3714      	adds	r7, #20
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr
 800b558:	40010000 	.word	0x40010000
 800b55c:	40010400 	.word	0x40010400
 800b560:	40000400 	.word	0x40000400
 800b564:	40000800 	.word	0x40000800
 800b568:	40000c00 	.word	0x40000c00
 800b56c:	40001800 	.word	0x40001800
 800b570:	40014000 	.word	0x40014000
 800b574:	4000e000 	.word	0x4000e000
 800b578:	4000e400 	.word	0x4000e400

0800b57c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b085      	sub	sp, #20
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b586:	2300      	movs	r3, #0
 800b588:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b590:	2b01      	cmp	r3, #1
 800b592:	d101      	bne.n	800b598 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b594:	2302      	movs	r3, #2
 800b596:	e087      	b.n	800b6a8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	695b      	ldr	r3, [r3, #20]
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5fe:	4313      	orrs	r3, r2
 800b600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	699b      	ldr	r3, [r3, #24]
 800b60c:	041b      	lsls	r3, r3, #16
 800b60e:	4313      	orrs	r3, r2
 800b610:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4a27      	ldr	r2, [pc, #156]	; (800b6b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d004      	beq.n	800b626 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a25      	ldr	r2, [pc, #148]	; (800b6b8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d106      	bne.n	800b634 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	69db      	ldr	r3, [r3, #28]
 800b630:	4313      	orrs	r3, r2
 800b632:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a1e      	ldr	r2, [pc, #120]	; (800b6b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d004      	beq.n	800b648 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4a1d      	ldr	r2, [pc, #116]	; (800b6b8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d126      	bne.n	800b696 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b652:	051b      	lsls	r3, r3, #20
 800b654:	4313      	orrs	r3, r2
 800b656:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	6a1b      	ldr	r3, [r3, #32]
 800b662:	4313      	orrs	r3, r2
 800b664:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b670:	4313      	orrs	r3, r2
 800b672:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a0e      	ldr	r2, [pc, #56]	; (800b6b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d004      	beq.n	800b688 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a0d      	ldr	r2, [pc, #52]	; (800b6b8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d106      	bne.n	800b696 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b692:	4313      	orrs	r3, r2
 800b694:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	68fa      	ldr	r2, [r7, #12]
 800b69c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b6a6:	2300      	movs	r3, #0
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3714      	adds	r7, #20
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr
 800b6b4:	40010000 	.word	0x40010000
 800b6b8:	40010400 	.word	0x40010400

0800b6bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b6c4:	bf00      	nop
 800b6c6:	370c      	adds	r7, #12
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b6d8:	bf00      	nop
 800b6da:	370c      	adds	r7, #12
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b6ec:	bf00      	nop
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d101      	bne.n	800b70a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	e042      	b.n	800b790 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b710:	2b00      	cmp	r3, #0
 800b712:	d106      	bne.n	800b722 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2200      	movs	r2, #0
 800b718:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f7f8 fd3d 	bl	800419c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2224      	movs	r2, #36	; 0x24
 800b726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f022 0201 	bic.w	r2, r2, #1
 800b738:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 fcdc 	bl	800c0f8 <UART_SetConfig>
 800b740:	4603      	mov	r3, r0
 800b742:	2b01      	cmp	r3, #1
 800b744:	d101      	bne.n	800b74a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	e022      	b.n	800b790 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d002      	beq.n	800b758 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f001 fb3c 	bl	800cdd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	685a      	ldr	r2, [r3, #4]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b766:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	689a      	ldr	r2, [r3, #8]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b776:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f042 0201 	orr.w	r2, r2, #1
 800b786:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f001 fbc3 	bl	800cf14 <UART_CheckIdleState>
 800b78e:	4603      	mov	r3, r0
}
 800b790:	4618      	mov	r0, r3
 800b792:	3708      	adds	r7, #8
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b08a      	sub	sp, #40	; 0x28
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7ac:	2b20      	cmp	r3, #32
 800b7ae:	d17a      	bne.n	800b8a6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d002      	beq.n	800b7bc <HAL_UART_Transmit_DMA+0x24>
 800b7b6:	88fb      	ldrh	r3, [r7, #6]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d101      	bne.n	800b7c0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e073      	b.n	800b8a8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d101      	bne.n	800b7ce <HAL_UART_Transmit_DMA+0x36>
 800b7ca:	2302      	movs	r3, #2
 800b7cc:	e06c      	b.n	800b8a8 <HAL_UART_Transmit_DMA+0x110>
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	68ba      	ldr	r2, [r7, #8]
 800b7da:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	88fa      	ldrh	r2, [r7, #6]
 800b7e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	88fa      	ldrh	r2, [r7, #6]
 800b7e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2221      	movs	r2, #33	; 0x21
 800b7f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b800:	2b00      	cmp	r3, #0
 800b802:	d02c      	beq.n	800b85e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b808:	4a29      	ldr	r2, [pc, #164]	; (800b8b0 <HAL_UART_Transmit_DMA+0x118>)
 800b80a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b810:	4a28      	ldr	r2, [pc, #160]	; (800b8b4 <HAL_UART_Transmit_DMA+0x11c>)
 800b812:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b818:	4a27      	ldr	r2, [pc, #156]	; (800b8b8 <HAL_UART_Transmit_DMA+0x120>)
 800b81a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b820:	2200      	movs	r2, #0
 800b822:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b82c:	4619      	mov	r1, r3
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	3328      	adds	r3, #40	; 0x28
 800b834:	461a      	mov	r2, r3
 800b836:	88fb      	ldrh	r3, [r7, #6]
 800b838:	f7f9 fd02 	bl	8005240 <HAL_DMA_Start_IT>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00d      	beq.n	800b85e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2210      	movs	r2, #16
 800b846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2200      	movs	r2, #0
 800b84e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2220      	movs	r2, #32
 800b856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800b85a:	2301      	movs	r3, #1
 800b85c:	e024      	b.n	800b8a8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2240      	movs	r2, #64	; 0x40
 800b864:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2200      	movs	r2, #0
 800b86a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	3308      	adds	r3, #8
 800b874:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	e853 3f00 	ldrex	r3, [r3]
 800b87c:	613b      	str	r3, [r7, #16]
   return(result);
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b884:	627b      	str	r3, [r7, #36]	; 0x24
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	3308      	adds	r3, #8
 800b88c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b88e:	623a      	str	r2, [r7, #32]
 800b890:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b892:	69f9      	ldr	r1, [r7, #28]
 800b894:	6a3a      	ldr	r2, [r7, #32]
 800b896:	e841 2300 	strex	r3, r2, [r1]
 800b89a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d1e5      	bne.n	800b86e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	e000      	b.n	800b8a8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800b8a6:	2302      	movs	r3, #2
  }
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3728      	adds	r7, #40	; 0x28
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	0800d3dd 	.word	0x0800d3dd
 800b8b4:	0800d473 	.word	0x0800d473
 800b8b8:	0800d5e9 	.word	0x0800d5e9

0800b8bc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b08a      	sub	sp, #40	; 0x28
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8d0:	2b20      	cmp	r3, #32
 800b8d2:	d142      	bne.n	800b95a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d002      	beq.n	800b8e0 <HAL_UART_Receive_DMA+0x24>
 800b8da:	88fb      	ldrh	r3, [r7, #6]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d101      	bne.n	800b8e4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	e03b      	b.n	800b95c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d101      	bne.n	800b8f2 <HAL_UART_Receive_DMA+0x36>
 800b8ee:	2302      	movs	r3, #2
 800b8f0:	e034      	b.n	800b95c <HAL_UART_Receive_DMA+0xa0>
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a17      	ldr	r2, [pc, #92]	; (800b964 <HAL_UART_Receive_DMA+0xa8>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d01f      	beq.n	800b94a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b914:	2b00      	cmp	r3, #0
 800b916:	d018      	beq.n	800b94a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	e853 3f00 	ldrex	r3, [r3]
 800b924:	613b      	str	r3, [r7, #16]
   return(result);
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b92c:	627b      	str	r3, [r7, #36]	; 0x24
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	461a      	mov	r2, r3
 800b934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b936:	623b      	str	r3, [r7, #32]
 800b938:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b93a:	69f9      	ldr	r1, [r7, #28]
 800b93c:	6a3a      	ldr	r2, [r7, #32]
 800b93e:	e841 2300 	strex	r3, r2, [r1]
 800b942:	61bb      	str	r3, [r7, #24]
   return(result);
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d1e6      	bne.n	800b918 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b94a:	88fb      	ldrh	r3, [r7, #6]
 800b94c:	461a      	mov	r2, r3
 800b94e:	68b9      	ldr	r1, [r7, #8]
 800b950:	68f8      	ldr	r0, [r7, #12]
 800b952:	f001 fbf3 	bl	800d13c <UART_Start_Receive_DMA>
 800b956:	4603      	mov	r3, r0
 800b958:	e000      	b.n	800b95c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b95a:	2302      	movs	r3, #2
  }
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3728      	adds	r7, #40	; 0x28
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}
 800b964:	58000c00 	.word	0x58000c00

0800b968 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b0ba      	sub	sp, #232	; 0xe8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	69db      	ldr	r3, [r3, #28]
 800b976:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b98e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b992:	f640 030f 	movw	r3, #2063	; 0x80f
 800b996:	4013      	ands	r3, r2
 800b998:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b99c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d11b      	bne.n	800b9dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b9a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9a8:	f003 0320 	and.w	r3, r3, #32
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d015      	beq.n	800b9dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b9b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9b4:	f003 0320 	and.w	r3, r3, #32
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d105      	bne.n	800b9c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b9bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d009      	beq.n	800b9dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f000 835a 	beq.w	800c086 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	4798      	blx	r3
      }
      return;
 800b9da:	e354      	b.n	800c086 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b9dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f000 811f 	beq.w	800bc24 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b9e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b9ea:	4b8b      	ldr	r3, [pc, #556]	; (800bc18 <HAL_UART_IRQHandler+0x2b0>)
 800b9ec:	4013      	ands	r3, r2
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d106      	bne.n	800ba00 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b9f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b9f6:	4b89      	ldr	r3, [pc, #548]	; (800bc1c <HAL_UART_IRQHandler+0x2b4>)
 800b9f8:	4013      	ands	r3, r2
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	f000 8112 	beq.w	800bc24 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ba00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba04:	f003 0301 	and.w	r3, r3, #1
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d011      	beq.n	800ba30 <HAL_UART_IRQHandler+0xc8>
 800ba0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d00b      	beq.n	800ba30 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba26:	f043 0201 	orr.w	r2, r3, #1
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba34:	f003 0302 	and.w	r3, r3, #2
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d011      	beq.n	800ba60 <HAL_UART_IRQHandler+0xf8>
 800ba3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba40:	f003 0301 	and.w	r3, r3, #1
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d00b      	beq.n	800ba60 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2202      	movs	r2, #2
 800ba4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba56:	f043 0204 	orr.w	r2, r3, #4
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba64:	f003 0304 	and.w	r3, r3, #4
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d011      	beq.n	800ba90 <HAL_UART_IRQHandler+0x128>
 800ba6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba70:	f003 0301 	and.w	r3, r3, #1
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d00b      	beq.n	800ba90 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2204      	movs	r2, #4
 800ba7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba86:	f043 0202 	orr.w	r2, r3, #2
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ba90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba94:	f003 0308 	and.w	r3, r3, #8
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d017      	beq.n	800bacc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ba9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baa0:	f003 0320 	and.w	r3, r3, #32
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d105      	bne.n	800bab4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800baa8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800baac:	4b5a      	ldr	r3, [pc, #360]	; (800bc18 <HAL_UART_IRQHandler+0x2b0>)
 800baae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d00b      	beq.n	800bacc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	2208      	movs	r2, #8
 800baba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bac2:	f043 0208 	orr.w	r2, r3, #8
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bacc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d012      	beq.n	800bafe <HAL_UART_IRQHandler+0x196>
 800bad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800badc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d00c      	beq.n	800bafe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800baec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800baf4:	f043 0220 	orr.w	r2, r3, #32
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	f000 82c0 	beq.w	800c08a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb0e:	f003 0320 	and.w	r3, r3, #32
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d013      	beq.n	800bb3e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bb16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb1a:	f003 0320 	and.w	r3, r3, #32
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d105      	bne.n	800bb2e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bb22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d007      	beq.n	800bb3e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d003      	beq.n	800bb3e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb52:	2b40      	cmp	r3, #64	; 0x40
 800bb54:	d005      	beq.n	800bb62 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bb56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d04f      	beq.n	800bc02 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f001 fbd4 	bl	800d310 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	689b      	ldr	r3, [r3, #8]
 800bb6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb72:	2b40      	cmp	r3, #64	; 0x40
 800bb74:	d141      	bne.n	800bbfa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	3308      	adds	r3, #8
 800bb7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb84:	e853 3f00 	ldrex	r3, [r3]
 800bb88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bb8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bb90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	3308      	adds	r3, #8
 800bb9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bba2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bbae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bbb2:	e841 2300 	strex	r3, r2, [r1]
 800bbb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bbba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1d9      	bne.n	800bb76 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d013      	beq.n	800bbf2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbce:	4a14      	ldr	r2, [pc, #80]	; (800bc20 <HAL_UART_IRQHandler+0x2b8>)
 800bbd0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fa f8ba 	bl	8005d50 <HAL_DMA_Abort_IT>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d017      	beq.n	800bc12 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bbec:	4610      	mov	r0, r2
 800bbee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbf0:	e00f      	b.n	800bc12 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 fa6a 	bl	800c0cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbf8:	e00b      	b.n	800bc12 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 fa66 	bl	800c0cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc00:	e007      	b.n	800bc12 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 fa62 	bl	800c0cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bc10:	e23b      	b.n	800c08a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc12:	bf00      	nop
    return;
 800bc14:	e239      	b.n	800c08a <HAL_UART_IRQHandler+0x722>
 800bc16:	bf00      	nop
 800bc18:	10000001 	.word	0x10000001
 800bc1c:	04000120 	.word	0x04000120
 800bc20:	0800d669 	.word	0x0800d669

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	f040 81ce 	bne.w	800bfca <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bc2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc32:	f003 0310 	and.w	r3, r3, #16
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f000 81c7 	beq.w	800bfca <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bc3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc40:	f003 0310 	and.w	r3, r3, #16
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f000 81c0 	beq.w	800bfca <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2210      	movs	r2, #16
 800bc50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc5c:	2b40      	cmp	r3, #64	; 0x40
 800bc5e:	f040 813b 	bne.w	800bed8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	4a8b      	ldr	r2, [pc, #556]	; (800be98 <HAL_UART_IRQHandler+0x530>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d059      	beq.n	800bd22 <HAL_UART_IRQHandler+0x3ba>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a89      	ldr	r2, [pc, #548]	; (800be9c <HAL_UART_IRQHandler+0x534>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d053      	beq.n	800bd22 <HAL_UART_IRQHandler+0x3ba>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a87      	ldr	r2, [pc, #540]	; (800bea0 <HAL_UART_IRQHandler+0x538>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d04d      	beq.n	800bd22 <HAL_UART_IRQHandler+0x3ba>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a85      	ldr	r2, [pc, #532]	; (800bea4 <HAL_UART_IRQHandler+0x53c>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d047      	beq.n	800bd22 <HAL_UART_IRQHandler+0x3ba>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4a83      	ldr	r2, [pc, #524]	; (800bea8 <HAL_UART_IRQHandler+0x540>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d041      	beq.n	800bd22 <HAL_UART_IRQHandler+0x3ba>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a81      	ldr	r2, [pc, #516]	; (800beac <HAL_UART_IRQHandler+0x544>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d03b      	beq.n	800bd22 <HAL_UART_IRQHandler+0x3ba>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a7f      	ldr	r2, [pc, #508]	; (800beb0 <HAL_UART_IRQHandler+0x548>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d035      	beq.n	800bd22 <HAL_UART_IRQHandler+0x3ba>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a7d      	ldr	r2, [pc, #500]	; (800beb4 <HAL_UART_IRQHandler+0x54c>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d02f      	beq.n	800bd22 <HAL_UART_IRQHandler+0x3ba>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a7b      	ldr	r2, [pc, #492]	; (800beb8 <HAL_UART_IRQHandler+0x550>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d029      	beq.n	800bd22 <HAL_UART_IRQHandler+0x3ba>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a79      	ldr	r2, [pc, #484]	; (800bebc <HAL_UART_IRQHandler+0x554>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d023      	beq.n	800bd22 <HAL_UART_IRQHandler+0x3ba>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a77      	ldr	r2, [pc, #476]	; (800bec0 <HAL_UART_IRQHandler+0x558>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d01d      	beq.n	800bd22 <HAL_UART_IRQHandler+0x3ba>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a75      	ldr	r2, [pc, #468]	; (800bec4 <HAL_UART_IRQHandler+0x55c>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d017      	beq.n	800bd22 <HAL_UART_IRQHandler+0x3ba>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a73      	ldr	r2, [pc, #460]	; (800bec8 <HAL_UART_IRQHandler+0x560>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d011      	beq.n	800bd22 <HAL_UART_IRQHandler+0x3ba>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4a71      	ldr	r2, [pc, #452]	; (800becc <HAL_UART_IRQHandler+0x564>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d00b      	beq.n	800bd22 <HAL_UART_IRQHandler+0x3ba>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a6f      	ldr	r2, [pc, #444]	; (800bed0 <HAL_UART_IRQHandler+0x568>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d005      	beq.n	800bd22 <HAL_UART_IRQHandler+0x3ba>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a6d      	ldr	r2, [pc, #436]	; (800bed4 <HAL_UART_IRQHandler+0x56c>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d105      	bne.n	800bd2e <HAL_UART_IRQHandler+0x3c6>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	e004      	b.n	800bd38 <HAL_UART_IRQHandler+0x3d0>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bd3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	f000 81a4 	beq.w	800c08e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bd4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd50:	429a      	cmp	r2, r3
 800bd52:	f080 819c 	bcs.w	800c08e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd64:	69db      	ldr	r3, [r3, #28]
 800bd66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd6a:	f000 8086 	beq.w	800be7a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd7a:	e853 3f00 	ldrex	r3, [r3]
 800bd7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bd82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	461a      	mov	r2, r3
 800bd94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bd98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bd9c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bda4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bda8:	e841 2300 	strex	r3, r2, [r1]
 800bdac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bdb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d1da      	bne.n	800bd6e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	3308      	adds	r3, #8
 800bdbe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bdc2:	e853 3f00 	ldrex	r3, [r3]
 800bdc6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bdc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bdca:	f023 0301 	bic.w	r3, r3, #1
 800bdce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	3308      	adds	r3, #8
 800bdd8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bddc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bde0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bde4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bde8:	e841 2300 	strex	r3, r2, [r1]
 800bdec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bdee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1e1      	bne.n	800bdb8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	3308      	adds	r3, #8
 800bdfa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdfe:	e853 3f00 	ldrex	r3, [r3]
 800be02:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800be04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	3308      	adds	r3, #8
 800be14:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800be18:	66fa      	str	r2, [r7, #108]	; 0x6c
 800be1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800be1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800be20:	e841 2300 	strex	r3, r2, [r1]
 800be24:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800be26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d1e3      	bne.n	800bdf4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2220      	movs	r2, #32
 800be30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2200      	movs	r2, #0
 800be38:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be42:	e853 3f00 	ldrex	r3, [r3]
 800be46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800be48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be4a:	f023 0310 	bic.w	r3, r3, #16
 800be4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	461a      	mov	r2, r3
 800be58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be5c:	65bb      	str	r3, [r7, #88]	; 0x58
 800be5e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800be62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be64:	e841 2300 	strex	r3, r2, [r1]
 800be68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800be6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d1e4      	bne.n	800be3a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be74:	4618      	mov	r0, r3
 800be76:	f7f9 fc4d 	bl	8005714 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be86:	b29b      	uxth	r3, r3
 800be88:	1ad3      	subs	r3, r2, r3
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	4619      	mov	r1, r3
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 f926 	bl	800c0e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800be94:	e0fb      	b.n	800c08e <HAL_UART_IRQHandler+0x726>
 800be96:	bf00      	nop
 800be98:	40020010 	.word	0x40020010
 800be9c:	40020028 	.word	0x40020028
 800bea0:	40020040 	.word	0x40020040
 800bea4:	40020058 	.word	0x40020058
 800bea8:	40020070 	.word	0x40020070
 800beac:	40020088 	.word	0x40020088
 800beb0:	400200a0 	.word	0x400200a0
 800beb4:	400200b8 	.word	0x400200b8
 800beb8:	40020410 	.word	0x40020410
 800bebc:	40020428 	.word	0x40020428
 800bec0:	40020440 	.word	0x40020440
 800bec4:	40020458 	.word	0x40020458
 800bec8:	40020470 	.word	0x40020470
 800becc:	40020488 	.word	0x40020488
 800bed0:	400204a0 	.word	0x400204a0
 800bed4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	1ad3      	subs	r3, r2, r3
 800bee8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	f000 80cc 	beq.w	800c092 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800befa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800befe:	2b00      	cmp	r3, #0
 800bf00:	f000 80c7 	beq.w	800c092 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0c:	e853 3f00 	ldrex	r3, [r3]
 800bf10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	461a      	mov	r2, r3
 800bf22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bf26:	647b      	str	r3, [r7, #68]	; 0x44
 800bf28:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf2e:	e841 2300 	strex	r3, r2, [r1]
 800bf32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d1e4      	bne.n	800bf04 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	3308      	adds	r3, #8
 800bf40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf44:	e853 3f00 	ldrex	r3, [r3]
 800bf48:	623b      	str	r3, [r7, #32]
   return(result);
 800bf4a:	6a3a      	ldr	r2, [r7, #32]
 800bf4c:	4b54      	ldr	r3, [pc, #336]	; (800c0a0 <HAL_UART_IRQHandler+0x738>)
 800bf4e:	4013      	ands	r3, r2
 800bf50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	3308      	adds	r3, #8
 800bf5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bf5e:	633a      	str	r2, [r7, #48]	; 0x30
 800bf60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf66:	e841 2300 	strex	r3, r2, [r1]
 800bf6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1e3      	bne.n	800bf3a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2220      	movs	r2, #32
 800bf76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2200      	movs	r2, #0
 800bf84:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	e853 3f00 	ldrex	r3, [r3]
 800bf92:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f023 0310 	bic.w	r3, r3, #16
 800bf9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bfa8:	61fb      	str	r3, [r7, #28]
 800bfaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfac:	69b9      	ldr	r1, [r7, #24]
 800bfae:	69fa      	ldr	r2, [r7, #28]
 800bfb0:	e841 2300 	strex	r3, r2, [r1]
 800bfb4:	617b      	str	r3, [r7, #20]
   return(result);
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1e4      	bne.n	800bf86 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bfbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 f88c 	bl	800c0e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bfc8:	e063      	b.n	800c092 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bfca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d00e      	beq.n	800bff4 <HAL_UART_IRQHandler+0x68c>
 800bfd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d008      	beq.n	800bff4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bfea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f001 fb7c 	bl	800d6ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bff2:	e051      	b.n	800c098 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d014      	beq.n	800c02a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d105      	bne.n	800c018 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c00c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c010:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c014:	2b00      	cmp	r3, #0
 800c016:	d008      	beq.n	800c02a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d03a      	beq.n	800c096 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	4798      	blx	r3
    }
    return;
 800c028:	e035      	b.n	800c096 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c02a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c02e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c032:	2b00      	cmp	r3, #0
 800c034:	d009      	beq.n	800c04a <HAL_UART_IRQHandler+0x6e2>
 800c036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c03a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d003      	beq.n	800c04a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f001 fb26 	bl	800d694 <UART_EndTransmit_IT>
    return;
 800c048:	e026      	b.n	800c098 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c04a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c04e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c052:	2b00      	cmp	r3, #0
 800c054:	d009      	beq.n	800c06a <HAL_UART_IRQHandler+0x702>
 800c056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c05a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d003      	beq.n	800c06a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f001 fb55 	bl	800d712 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c068:	e016      	b.n	800c098 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c06a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c06e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c072:	2b00      	cmp	r3, #0
 800c074:	d010      	beq.n	800c098 <HAL_UART_IRQHandler+0x730>
 800c076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	da0c      	bge.n	800c098 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f001 fb3d 	bl	800d6fe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c084:	e008      	b.n	800c098 <HAL_UART_IRQHandler+0x730>
      return;
 800c086:	bf00      	nop
 800c088:	e006      	b.n	800c098 <HAL_UART_IRQHandler+0x730>
    return;
 800c08a:	bf00      	nop
 800c08c:	e004      	b.n	800c098 <HAL_UART_IRQHandler+0x730>
      return;
 800c08e:	bf00      	nop
 800c090:	e002      	b.n	800c098 <HAL_UART_IRQHandler+0x730>
      return;
 800c092:	bf00      	nop
 800c094:	e000      	b.n	800c098 <HAL_UART_IRQHandler+0x730>
    return;
 800c096:	bf00      	nop
  }
}
 800c098:	37e8      	adds	r7, #232	; 0xe8
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	effffffe 	.word	0xeffffffe

0800c0a4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c0ac:	bf00      	nop
 800c0ae:	370c      	adds	r7, #12
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c0c0:	bf00      	nop
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c0d4:	bf00      	nop
 800c0d6:	370c      	adds	r7, #12
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr

0800c0e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	460b      	mov	r3, r1
 800c0ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c0ec:	bf00      	nop
 800c0ee:	370c      	adds	r7, #12
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c0f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c0fc:	b092      	sub	sp, #72	; 0x48
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c102:	2300      	movs	r3, #0
 800c104:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	689a      	ldr	r2, [r3, #8]
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	691b      	ldr	r3, [r3, #16]
 800c110:	431a      	orrs	r2, r3
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	695b      	ldr	r3, [r3, #20]
 800c116:	431a      	orrs	r2, r3
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	69db      	ldr	r3, [r3, #28]
 800c11c:	4313      	orrs	r3, r2
 800c11e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	4bbe      	ldr	r3, [pc, #760]	; (800c420 <UART_SetConfig+0x328>)
 800c128:	4013      	ands	r3, r2
 800c12a:	697a      	ldr	r2, [r7, #20]
 800c12c:	6812      	ldr	r2, [r2, #0]
 800c12e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c130:	430b      	orrs	r3, r1
 800c132:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	68da      	ldr	r2, [r3, #12]
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	430a      	orrs	r2, r1
 800c148:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	699b      	ldr	r3, [r3, #24]
 800c14e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4ab3      	ldr	r2, [pc, #716]	; (800c424 <UART_SetConfig+0x32c>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d004      	beq.n	800c164 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	6a1b      	ldr	r3, [r3, #32]
 800c15e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c160:	4313      	orrs	r3, r2
 800c162:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	689a      	ldr	r2, [r3, #8]
 800c16a:	4baf      	ldr	r3, [pc, #700]	; (800c428 <UART_SetConfig+0x330>)
 800c16c:	4013      	ands	r3, r2
 800c16e:	697a      	ldr	r2, [r7, #20]
 800c170:	6812      	ldr	r2, [r2, #0]
 800c172:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c174:	430b      	orrs	r3, r1
 800c176:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c17e:	f023 010f 	bic.w	r1, r3, #15
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	430a      	orrs	r2, r1
 800c18c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	4aa6      	ldr	r2, [pc, #664]	; (800c42c <UART_SetConfig+0x334>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d177      	bne.n	800c288 <UART_SetConfig+0x190>
 800c198:	4ba5      	ldr	r3, [pc, #660]	; (800c430 <UART_SetConfig+0x338>)
 800c19a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c19c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c1a0:	2b28      	cmp	r3, #40	; 0x28
 800c1a2:	d86d      	bhi.n	800c280 <UART_SetConfig+0x188>
 800c1a4:	a201      	add	r2, pc, #4	; (adr r2, 800c1ac <UART_SetConfig+0xb4>)
 800c1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1aa:	bf00      	nop
 800c1ac:	0800c251 	.word	0x0800c251
 800c1b0:	0800c281 	.word	0x0800c281
 800c1b4:	0800c281 	.word	0x0800c281
 800c1b8:	0800c281 	.word	0x0800c281
 800c1bc:	0800c281 	.word	0x0800c281
 800c1c0:	0800c281 	.word	0x0800c281
 800c1c4:	0800c281 	.word	0x0800c281
 800c1c8:	0800c281 	.word	0x0800c281
 800c1cc:	0800c259 	.word	0x0800c259
 800c1d0:	0800c281 	.word	0x0800c281
 800c1d4:	0800c281 	.word	0x0800c281
 800c1d8:	0800c281 	.word	0x0800c281
 800c1dc:	0800c281 	.word	0x0800c281
 800c1e0:	0800c281 	.word	0x0800c281
 800c1e4:	0800c281 	.word	0x0800c281
 800c1e8:	0800c281 	.word	0x0800c281
 800c1ec:	0800c261 	.word	0x0800c261
 800c1f0:	0800c281 	.word	0x0800c281
 800c1f4:	0800c281 	.word	0x0800c281
 800c1f8:	0800c281 	.word	0x0800c281
 800c1fc:	0800c281 	.word	0x0800c281
 800c200:	0800c281 	.word	0x0800c281
 800c204:	0800c281 	.word	0x0800c281
 800c208:	0800c281 	.word	0x0800c281
 800c20c:	0800c269 	.word	0x0800c269
 800c210:	0800c281 	.word	0x0800c281
 800c214:	0800c281 	.word	0x0800c281
 800c218:	0800c281 	.word	0x0800c281
 800c21c:	0800c281 	.word	0x0800c281
 800c220:	0800c281 	.word	0x0800c281
 800c224:	0800c281 	.word	0x0800c281
 800c228:	0800c281 	.word	0x0800c281
 800c22c:	0800c271 	.word	0x0800c271
 800c230:	0800c281 	.word	0x0800c281
 800c234:	0800c281 	.word	0x0800c281
 800c238:	0800c281 	.word	0x0800c281
 800c23c:	0800c281 	.word	0x0800c281
 800c240:	0800c281 	.word	0x0800c281
 800c244:	0800c281 	.word	0x0800c281
 800c248:	0800c281 	.word	0x0800c281
 800c24c:	0800c279 	.word	0x0800c279
 800c250:	2301      	movs	r3, #1
 800c252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c256:	e326      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c258:	2304      	movs	r3, #4
 800c25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25e:	e322      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c260:	2308      	movs	r3, #8
 800c262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c266:	e31e      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c268:	2310      	movs	r3, #16
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c26e:	e31a      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c270:	2320      	movs	r3, #32
 800c272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c276:	e316      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c278:	2340      	movs	r3, #64	; 0x40
 800c27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c27e:	e312      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c280:	2380      	movs	r3, #128	; 0x80
 800c282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c286:	e30e      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a69      	ldr	r2, [pc, #420]	; (800c434 <UART_SetConfig+0x33c>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d130      	bne.n	800c2f4 <UART_SetConfig+0x1fc>
 800c292:	4b67      	ldr	r3, [pc, #412]	; (800c430 <UART_SetConfig+0x338>)
 800c294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c296:	f003 0307 	and.w	r3, r3, #7
 800c29a:	2b05      	cmp	r3, #5
 800c29c:	d826      	bhi.n	800c2ec <UART_SetConfig+0x1f4>
 800c29e:	a201      	add	r2, pc, #4	; (adr r2, 800c2a4 <UART_SetConfig+0x1ac>)
 800c2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2a4:	0800c2bd 	.word	0x0800c2bd
 800c2a8:	0800c2c5 	.word	0x0800c2c5
 800c2ac:	0800c2cd 	.word	0x0800c2cd
 800c2b0:	0800c2d5 	.word	0x0800c2d5
 800c2b4:	0800c2dd 	.word	0x0800c2dd
 800c2b8:	0800c2e5 	.word	0x0800c2e5
 800c2bc:	2300      	movs	r3, #0
 800c2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2c2:	e2f0      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c2c4:	2304      	movs	r3, #4
 800c2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ca:	e2ec      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c2cc:	2308      	movs	r3, #8
 800c2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2d2:	e2e8      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c2d4:	2310      	movs	r3, #16
 800c2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2da:	e2e4      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c2dc:	2320      	movs	r3, #32
 800c2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2e2:	e2e0      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c2e4:	2340      	movs	r3, #64	; 0x40
 800c2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ea:	e2dc      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c2ec:	2380      	movs	r3, #128	; 0x80
 800c2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2f2:	e2d8      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4a4f      	ldr	r2, [pc, #316]	; (800c438 <UART_SetConfig+0x340>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d130      	bne.n	800c360 <UART_SetConfig+0x268>
 800c2fe:	4b4c      	ldr	r3, [pc, #304]	; (800c430 <UART_SetConfig+0x338>)
 800c300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c302:	f003 0307 	and.w	r3, r3, #7
 800c306:	2b05      	cmp	r3, #5
 800c308:	d826      	bhi.n	800c358 <UART_SetConfig+0x260>
 800c30a:	a201      	add	r2, pc, #4	; (adr r2, 800c310 <UART_SetConfig+0x218>)
 800c30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c310:	0800c329 	.word	0x0800c329
 800c314:	0800c331 	.word	0x0800c331
 800c318:	0800c339 	.word	0x0800c339
 800c31c:	0800c341 	.word	0x0800c341
 800c320:	0800c349 	.word	0x0800c349
 800c324:	0800c351 	.word	0x0800c351
 800c328:	2300      	movs	r3, #0
 800c32a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c32e:	e2ba      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c330:	2304      	movs	r3, #4
 800c332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c336:	e2b6      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c338:	2308      	movs	r3, #8
 800c33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c33e:	e2b2      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c340:	2310      	movs	r3, #16
 800c342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c346:	e2ae      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c348:	2320      	movs	r3, #32
 800c34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c34e:	e2aa      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c350:	2340      	movs	r3, #64	; 0x40
 800c352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c356:	e2a6      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c358:	2380      	movs	r3, #128	; 0x80
 800c35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c35e:	e2a2      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4a35      	ldr	r2, [pc, #212]	; (800c43c <UART_SetConfig+0x344>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d130      	bne.n	800c3cc <UART_SetConfig+0x2d4>
 800c36a:	4b31      	ldr	r3, [pc, #196]	; (800c430 <UART_SetConfig+0x338>)
 800c36c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c36e:	f003 0307 	and.w	r3, r3, #7
 800c372:	2b05      	cmp	r3, #5
 800c374:	d826      	bhi.n	800c3c4 <UART_SetConfig+0x2cc>
 800c376:	a201      	add	r2, pc, #4	; (adr r2, 800c37c <UART_SetConfig+0x284>)
 800c378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c37c:	0800c395 	.word	0x0800c395
 800c380:	0800c39d 	.word	0x0800c39d
 800c384:	0800c3a5 	.word	0x0800c3a5
 800c388:	0800c3ad 	.word	0x0800c3ad
 800c38c:	0800c3b5 	.word	0x0800c3b5
 800c390:	0800c3bd 	.word	0x0800c3bd
 800c394:	2300      	movs	r3, #0
 800c396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c39a:	e284      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c39c:	2304      	movs	r3, #4
 800c39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3a2:	e280      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c3a4:	2308      	movs	r3, #8
 800c3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3aa:	e27c      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c3ac:	2310      	movs	r3, #16
 800c3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3b2:	e278      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c3b4:	2320      	movs	r3, #32
 800c3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ba:	e274      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c3bc:	2340      	movs	r3, #64	; 0x40
 800c3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3c2:	e270      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c3c4:	2380      	movs	r3, #128	; 0x80
 800c3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ca:	e26c      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a1b      	ldr	r2, [pc, #108]	; (800c440 <UART_SetConfig+0x348>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d142      	bne.n	800c45c <UART_SetConfig+0x364>
 800c3d6:	4b16      	ldr	r3, [pc, #88]	; (800c430 <UART_SetConfig+0x338>)
 800c3d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3da:	f003 0307 	and.w	r3, r3, #7
 800c3de:	2b05      	cmp	r3, #5
 800c3e0:	d838      	bhi.n	800c454 <UART_SetConfig+0x35c>
 800c3e2:	a201      	add	r2, pc, #4	; (adr r2, 800c3e8 <UART_SetConfig+0x2f0>)
 800c3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e8:	0800c401 	.word	0x0800c401
 800c3ec:	0800c409 	.word	0x0800c409
 800c3f0:	0800c411 	.word	0x0800c411
 800c3f4:	0800c419 	.word	0x0800c419
 800c3f8:	0800c445 	.word	0x0800c445
 800c3fc:	0800c44d 	.word	0x0800c44d
 800c400:	2300      	movs	r3, #0
 800c402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c406:	e24e      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c408:	2304      	movs	r3, #4
 800c40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c40e:	e24a      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c410:	2308      	movs	r3, #8
 800c412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c416:	e246      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c418:	2310      	movs	r3, #16
 800c41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c41e:	e242      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c420:	cfff69f3 	.word	0xcfff69f3
 800c424:	58000c00 	.word	0x58000c00
 800c428:	11fff4ff 	.word	0x11fff4ff
 800c42c:	40011000 	.word	0x40011000
 800c430:	58024400 	.word	0x58024400
 800c434:	40004400 	.word	0x40004400
 800c438:	40004800 	.word	0x40004800
 800c43c:	40004c00 	.word	0x40004c00
 800c440:	40005000 	.word	0x40005000
 800c444:	2320      	movs	r3, #32
 800c446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c44a:	e22c      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c44c:	2340      	movs	r3, #64	; 0x40
 800c44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c452:	e228      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c454:	2380      	movs	r3, #128	; 0x80
 800c456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c45a:	e224      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4ab1      	ldr	r2, [pc, #708]	; (800c728 <UART_SetConfig+0x630>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d176      	bne.n	800c554 <UART_SetConfig+0x45c>
 800c466:	4bb1      	ldr	r3, [pc, #708]	; (800c72c <UART_SetConfig+0x634>)
 800c468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c46a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c46e:	2b28      	cmp	r3, #40	; 0x28
 800c470:	d86c      	bhi.n	800c54c <UART_SetConfig+0x454>
 800c472:	a201      	add	r2, pc, #4	; (adr r2, 800c478 <UART_SetConfig+0x380>)
 800c474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c478:	0800c51d 	.word	0x0800c51d
 800c47c:	0800c54d 	.word	0x0800c54d
 800c480:	0800c54d 	.word	0x0800c54d
 800c484:	0800c54d 	.word	0x0800c54d
 800c488:	0800c54d 	.word	0x0800c54d
 800c48c:	0800c54d 	.word	0x0800c54d
 800c490:	0800c54d 	.word	0x0800c54d
 800c494:	0800c54d 	.word	0x0800c54d
 800c498:	0800c525 	.word	0x0800c525
 800c49c:	0800c54d 	.word	0x0800c54d
 800c4a0:	0800c54d 	.word	0x0800c54d
 800c4a4:	0800c54d 	.word	0x0800c54d
 800c4a8:	0800c54d 	.word	0x0800c54d
 800c4ac:	0800c54d 	.word	0x0800c54d
 800c4b0:	0800c54d 	.word	0x0800c54d
 800c4b4:	0800c54d 	.word	0x0800c54d
 800c4b8:	0800c52d 	.word	0x0800c52d
 800c4bc:	0800c54d 	.word	0x0800c54d
 800c4c0:	0800c54d 	.word	0x0800c54d
 800c4c4:	0800c54d 	.word	0x0800c54d
 800c4c8:	0800c54d 	.word	0x0800c54d
 800c4cc:	0800c54d 	.word	0x0800c54d
 800c4d0:	0800c54d 	.word	0x0800c54d
 800c4d4:	0800c54d 	.word	0x0800c54d
 800c4d8:	0800c535 	.word	0x0800c535
 800c4dc:	0800c54d 	.word	0x0800c54d
 800c4e0:	0800c54d 	.word	0x0800c54d
 800c4e4:	0800c54d 	.word	0x0800c54d
 800c4e8:	0800c54d 	.word	0x0800c54d
 800c4ec:	0800c54d 	.word	0x0800c54d
 800c4f0:	0800c54d 	.word	0x0800c54d
 800c4f4:	0800c54d 	.word	0x0800c54d
 800c4f8:	0800c53d 	.word	0x0800c53d
 800c4fc:	0800c54d 	.word	0x0800c54d
 800c500:	0800c54d 	.word	0x0800c54d
 800c504:	0800c54d 	.word	0x0800c54d
 800c508:	0800c54d 	.word	0x0800c54d
 800c50c:	0800c54d 	.word	0x0800c54d
 800c510:	0800c54d 	.word	0x0800c54d
 800c514:	0800c54d 	.word	0x0800c54d
 800c518:	0800c545 	.word	0x0800c545
 800c51c:	2301      	movs	r3, #1
 800c51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c522:	e1c0      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c524:	2304      	movs	r3, #4
 800c526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c52a:	e1bc      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c52c:	2308      	movs	r3, #8
 800c52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c532:	e1b8      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c534:	2310      	movs	r3, #16
 800c536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c53a:	e1b4      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c53c:	2320      	movs	r3, #32
 800c53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c542:	e1b0      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c544:	2340      	movs	r3, #64	; 0x40
 800c546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c54a:	e1ac      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c54c:	2380      	movs	r3, #128	; 0x80
 800c54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c552:	e1a8      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a75      	ldr	r2, [pc, #468]	; (800c730 <UART_SetConfig+0x638>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d130      	bne.n	800c5c0 <UART_SetConfig+0x4c8>
 800c55e:	4b73      	ldr	r3, [pc, #460]	; (800c72c <UART_SetConfig+0x634>)
 800c560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c562:	f003 0307 	and.w	r3, r3, #7
 800c566:	2b05      	cmp	r3, #5
 800c568:	d826      	bhi.n	800c5b8 <UART_SetConfig+0x4c0>
 800c56a:	a201      	add	r2, pc, #4	; (adr r2, 800c570 <UART_SetConfig+0x478>)
 800c56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c570:	0800c589 	.word	0x0800c589
 800c574:	0800c591 	.word	0x0800c591
 800c578:	0800c599 	.word	0x0800c599
 800c57c:	0800c5a1 	.word	0x0800c5a1
 800c580:	0800c5a9 	.word	0x0800c5a9
 800c584:	0800c5b1 	.word	0x0800c5b1
 800c588:	2300      	movs	r3, #0
 800c58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c58e:	e18a      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c590:	2304      	movs	r3, #4
 800c592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c596:	e186      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c598:	2308      	movs	r3, #8
 800c59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c59e:	e182      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c5a0:	2310      	movs	r3, #16
 800c5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5a6:	e17e      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c5a8:	2320      	movs	r3, #32
 800c5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ae:	e17a      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c5b0:	2340      	movs	r3, #64	; 0x40
 800c5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5b6:	e176      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c5b8:	2380      	movs	r3, #128	; 0x80
 800c5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5be:	e172      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4a5b      	ldr	r2, [pc, #364]	; (800c734 <UART_SetConfig+0x63c>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d130      	bne.n	800c62c <UART_SetConfig+0x534>
 800c5ca:	4b58      	ldr	r3, [pc, #352]	; (800c72c <UART_SetConfig+0x634>)
 800c5cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5ce:	f003 0307 	and.w	r3, r3, #7
 800c5d2:	2b05      	cmp	r3, #5
 800c5d4:	d826      	bhi.n	800c624 <UART_SetConfig+0x52c>
 800c5d6:	a201      	add	r2, pc, #4	; (adr r2, 800c5dc <UART_SetConfig+0x4e4>)
 800c5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5dc:	0800c5f5 	.word	0x0800c5f5
 800c5e0:	0800c5fd 	.word	0x0800c5fd
 800c5e4:	0800c605 	.word	0x0800c605
 800c5e8:	0800c60d 	.word	0x0800c60d
 800c5ec:	0800c615 	.word	0x0800c615
 800c5f0:	0800c61d 	.word	0x0800c61d
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5fa:	e154      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c5fc:	2304      	movs	r3, #4
 800c5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c602:	e150      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c604:	2308      	movs	r3, #8
 800c606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c60a:	e14c      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c60c:	2310      	movs	r3, #16
 800c60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c612:	e148      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c614:	2320      	movs	r3, #32
 800c616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c61a:	e144      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c61c:	2340      	movs	r3, #64	; 0x40
 800c61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c622:	e140      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c624:	2380      	movs	r3, #128	; 0x80
 800c626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c62a:	e13c      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a41      	ldr	r2, [pc, #260]	; (800c738 <UART_SetConfig+0x640>)
 800c632:	4293      	cmp	r3, r2
 800c634:	f040 8082 	bne.w	800c73c <UART_SetConfig+0x644>
 800c638:	4b3c      	ldr	r3, [pc, #240]	; (800c72c <UART_SetConfig+0x634>)
 800c63a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c63c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c640:	2b28      	cmp	r3, #40	; 0x28
 800c642:	d86d      	bhi.n	800c720 <UART_SetConfig+0x628>
 800c644:	a201      	add	r2, pc, #4	; (adr r2, 800c64c <UART_SetConfig+0x554>)
 800c646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c64a:	bf00      	nop
 800c64c:	0800c6f1 	.word	0x0800c6f1
 800c650:	0800c721 	.word	0x0800c721
 800c654:	0800c721 	.word	0x0800c721
 800c658:	0800c721 	.word	0x0800c721
 800c65c:	0800c721 	.word	0x0800c721
 800c660:	0800c721 	.word	0x0800c721
 800c664:	0800c721 	.word	0x0800c721
 800c668:	0800c721 	.word	0x0800c721
 800c66c:	0800c6f9 	.word	0x0800c6f9
 800c670:	0800c721 	.word	0x0800c721
 800c674:	0800c721 	.word	0x0800c721
 800c678:	0800c721 	.word	0x0800c721
 800c67c:	0800c721 	.word	0x0800c721
 800c680:	0800c721 	.word	0x0800c721
 800c684:	0800c721 	.word	0x0800c721
 800c688:	0800c721 	.word	0x0800c721
 800c68c:	0800c701 	.word	0x0800c701
 800c690:	0800c721 	.word	0x0800c721
 800c694:	0800c721 	.word	0x0800c721
 800c698:	0800c721 	.word	0x0800c721
 800c69c:	0800c721 	.word	0x0800c721
 800c6a0:	0800c721 	.word	0x0800c721
 800c6a4:	0800c721 	.word	0x0800c721
 800c6a8:	0800c721 	.word	0x0800c721
 800c6ac:	0800c709 	.word	0x0800c709
 800c6b0:	0800c721 	.word	0x0800c721
 800c6b4:	0800c721 	.word	0x0800c721
 800c6b8:	0800c721 	.word	0x0800c721
 800c6bc:	0800c721 	.word	0x0800c721
 800c6c0:	0800c721 	.word	0x0800c721
 800c6c4:	0800c721 	.word	0x0800c721
 800c6c8:	0800c721 	.word	0x0800c721
 800c6cc:	0800c711 	.word	0x0800c711
 800c6d0:	0800c721 	.word	0x0800c721
 800c6d4:	0800c721 	.word	0x0800c721
 800c6d8:	0800c721 	.word	0x0800c721
 800c6dc:	0800c721 	.word	0x0800c721
 800c6e0:	0800c721 	.word	0x0800c721
 800c6e4:	0800c721 	.word	0x0800c721
 800c6e8:	0800c721 	.word	0x0800c721
 800c6ec:	0800c719 	.word	0x0800c719
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6f6:	e0d6      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c6f8:	2304      	movs	r3, #4
 800c6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6fe:	e0d2      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c700:	2308      	movs	r3, #8
 800c702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c706:	e0ce      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c708:	2310      	movs	r3, #16
 800c70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c70e:	e0ca      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c710:	2320      	movs	r3, #32
 800c712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c716:	e0c6      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c718:	2340      	movs	r3, #64	; 0x40
 800c71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c71e:	e0c2      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c720:	2380      	movs	r3, #128	; 0x80
 800c722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c726:	e0be      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c728:	40011400 	.word	0x40011400
 800c72c:	58024400 	.word	0x58024400
 800c730:	40007800 	.word	0x40007800
 800c734:	40007c00 	.word	0x40007c00
 800c738:	40011800 	.word	0x40011800
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4aad      	ldr	r2, [pc, #692]	; (800c9f8 <UART_SetConfig+0x900>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d176      	bne.n	800c834 <UART_SetConfig+0x73c>
 800c746:	4bad      	ldr	r3, [pc, #692]	; (800c9fc <UART_SetConfig+0x904>)
 800c748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c74a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c74e:	2b28      	cmp	r3, #40	; 0x28
 800c750:	d86c      	bhi.n	800c82c <UART_SetConfig+0x734>
 800c752:	a201      	add	r2, pc, #4	; (adr r2, 800c758 <UART_SetConfig+0x660>)
 800c754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c758:	0800c7fd 	.word	0x0800c7fd
 800c75c:	0800c82d 	.word	0x0800c82d
 800c760:	0800c82d 	.word	0x0800c82d
 800c764:	0800c82d 	.word	0x0800c82d
 800c768:	0800c82d 	.word	0x0800c82d
 800c76c:	0800c82d 	.word	0x0800c82d
 800c770:	0800c82d 	.word	0x0800c82d
 800c774:	0800c82d 	.word	0x0800c82d
 800c778:	0800c805 	.word	0x0800c805
 800c77c:	0800c82d 	.word	0x0800c82d
 800c780:	0800c82d 	.word	0x0800c82d
 800c784:	0800c82d 	.word	0x0800c82d
 800c788:	0800c82d 	.word	0x0800c82d
 800c78c:	0800c82d 	.word	0x0800c82d
 800c790:	0800c82d 	.word	0x0800c82d
 800c794:	0800c82d 	.word	0x0800c82d
 800c798:	0800c80d 	.word	0x0800c80d
 800c79c:	0800c82d 	.word	0x0800c82d
 800c7a0:	0800c82d 	.word	0x0800c82d
 800c7a4:	0800c82d 	.word	0x0800c82d
 800c7a8:	0800c82d 	.word	0x0800c82d
 800c7ac:	0800c82d 	.word	0x0800c82d
 800c7b0:	0800c82d 	.word	0x0800c82d
 800c7b4:	0800c82d 	.word	0x0800c82d
 800c7b8:	0800c815 	.word	0x0800c815
 800c7bc:	0800c82d 	.word	0x0800c82d
 800c7c0:	0800c82d 	.word	0x0800c82d
 800c7c4:	0800c82d 	.word	0x0800c82d
 800c7c8:	0800c82d 	.word	0x0800c82d
 800c7cc:	0800c82d 	.word	0x0800c82d
 800c7d0:	0800c82d 	.word	0x0800c82d
 800c7d4:	0800c82d 	.word	0x0800c82d
 800c7d8:	0800c81d 	.word	0x0800c81d
 800c7dc:	0800c82d 	.word	0x0800c82d
 800c7e0:	0800c82d 	.word	0x0800c82d
 800c7e4:	0800c82d 	.word	0x0800c82d
 800c7e8:	0800c82d 	.word	0x0800c82d
 800c7ec:	0800c82d 	.word	0x0800c82d
 800c7f0:	0800c82d 	.word	0x0800c82d
 800c7f4:	0800c82d 	.word	0x0800c82d
 800c7f8:	0800c825 	.word	0x0800c825
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c802:	e050      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c804:	2304      	movs	r3, #4
 800c806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c80a:	e04c      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c80c:	2308      	movs	r3, #8
 800c80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c812:	e048      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c814:	2310      	movs	r3, #16
 800c816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c81a:	e044      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c81c:	2320      	movs	r3, #32
 800c81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c822:	e040      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c824:	2340      	movs	r3, #64	; 0x40
 800c826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c82a:	e03c      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c82c:	2380      	movs	r3, #128	; 0x80
 800c82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c832:	e038      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4a71      	ldr	r2, [pc, #452]	; (800ca00 <UART_SetConfig+0x908>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d130      	bne.n	800c8a0 <UART_SetConfig+0x7a8>
 800c83e:	4b6f      	ldr	r3, [pc, #444]	; (800c9fc <UART_SetConfig+0x904>)
 800c840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c842:	f003 0307 	and.w	r3, r3, #7
 800c846:	2b05      	cmp	r3, #5
 800c848:	d826      	bhi.n	800c898 <UART_SetConfig+0x7a0>
 800c84a:	a201      	add	r2, pc, #4	; (adr r2, 800c850 <UART_SetConfig+0x758>)
 800c84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c850:	0800c869 	.word	0x0800c869
 800c854:	0800c871 	.word	0x0800c871
 800c858:	0800c879 	.word	0x0800c879
 800c85c:	0800c881 	.word	0x0800c881
 800c860:	0800c889 	.word	0x0800c889
 800c864:	0800c891 	.word	0x0800c891
 800c868:	2302      	movs	r3, #2
 800c86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c86e:	e01a      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c870:	2304      	movs	r3, #4
 800c872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c876:	e016      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c878:	2308      	movs	r3, #8
 800c87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c87e:	e012      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c880:	2310      	movs	r3, #16
 800c882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c886:	e00e      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c888:	2320      	movs	r3, #32
 800c88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c88e:	e00a      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c890:	2340      	movs	r3, #64	; 0x40
 800c892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c896:	e006      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c898:	2380      	movs	r3, #128	; 0x80
 800c89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c89e:	e002      	b.n	800c8a6 <UART_SetConfig+0x7ae>
 800c8a0:	2380      	movs	r3, #128	; 0x80
 800c8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4a55      	ldr	r2, [pc, #340]	; (800ca00 <UART_SetConfig+0x908>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	f040 80f8 	bne.w	800caa2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c8b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c8b6:	2b20      	cmp	r3, #32
 800c8b8:	dc46      	bgt.n	800c948 <UART_SetConfig+0x850>
 800c8ba:	2b02      	cmp	r3, #2
 800c8bc:	db75      	blt.n	800c9aa <UART_SetConfig+0x8b2>
 800c8be:	3b02      	subs	r3, #2
 800c8c0:	2b1e      	cmp	r3, #30
 800c8c2:	d872      	bhi.n	800c9aa <UART_SetConfig+0x8b2>
 800c8c4:	a201      	add	r2, pc, #4	; (adr r2, 800c8cc <UART_SetConfig+0x7d4>)
 800c8c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ca:	bf00      	nop
 800c8cc:	0800c94f 	.word	0x0800c94f
 800c8d0:	0800c9ab 	.word	0x0800c9ab
 800c8d4:	0800c957 	.word	0x0800c957
 800c8d8:	0800c9ab 	.word	0x0800c9ab
 800c8dc:	0800c9ab 	.word	0x0800c9ab
 800c8e0:	0800c9ab 	.word	0x0800c9ab
 800c8e4:	0800c967 	.word	0x0800c967
 800c8e8:	0800c9ab 	.word	0x0800c9ab
 800c8ec:	0800c9ab 	.word	0x0800c9ab
 800c8f0:	0800c9ab 	.word	0x0800c9ab
 800c8f4:	0800c9ab 	.word	0x0800c9ab
 800c8f8:	0800c9ab 	.word	0x0800c9ab
 800c8fc:	0800c9ab 	.word	0x0800c9ab
 800c900:	0800c9ab 	.word	0x0800c9ab
 800c904:	0800c977 	.word	0x0800c977
 800c908:	0800c9ab 	.word	0x0800c9ab
 800c90c:	0800c9ab 	.word	0x0800c9ab
 800c910:	0800c9ab 	.word	0x0800c9ab
 800c914:	0800c9ab 	.word	0x0800c9ab
 800c918:	0800c9ab 	.word	0x0800c9ab
 800c91c:	0800c9ab 	.word	0x0800c9ab
 800c920:	0800c9ab 	.word	0x0800c9ab
 800c924:	0800c9ab 	.word	0x0800c9ab
 800c928:	0800c9ab 	.word	0x0800c9ab
 800c92c:	0800c9ab 	.word	0x0800c9ab
 800c930:	0800c9ab 	.word	0x0800c9ab
 800c934:	0800c9ab 	.word	0x0800c9ab
 800c938:	0800c9ab 	.word	0x0800c9ab
 800c93c:	0800c9ab 	.word	0x0800c9ab
 800c940:	0800c9ab 	.word	0x0800c9ab
 800c944:	0800c99d 	.word	0x0800c99d
 800c948:	2b40      	cmp	r3, #64	; 0x40
 800c94a:	d02a      	beq.n	800c9a2 <UART_SetConfig+0x8aa>
 800c94c:	e02d      	b.n	800c9aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c94e:	f7fc ff87 	bl	8009860 <HAL_RCCEx_GetD3PCLK1Freq>
 800c952:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c954:	e02f      	b.n	800c9b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7fc ff96 	bl	800988c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c964:	e027      	b.n	800c9b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c966:	f107 0318 	add.w	r3, r7, #24
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7fd f8e2 	bl	8009b34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c970:	69fb      	ldr	r3, [r7, #28]
 800c972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c974:	e01f      	b.n	800c9b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c976:	4b21      	ldr	r3, [pc, #132]	; (800c9fc <UART_SetConfig+0x904>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f003 0320 	and.w	r3, r3, #32
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d009      	beq.n	800c996 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c982:	4b1e      	ldr	r3, [pc, #120]	; (800c9fc <UART_SetConfig+0x904>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	08db      	lsrs	r3, r3, #3
 800c988:	f003 0303 	and.w	r3, r3, #3
 800c98c:	4a1d      	ldr	r2, [pc, #116]	; (800ca04 <UART_SetConfig+0x90c>)
 800c98e:	fa22 f303 	lsr.w	r3, r2, r3
 800c992:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c994:	e00f      	b.n	800c9b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c996:	4b1b      	ldr	r3, [pc, #108]	; (800ca04 <UART_SetConfig+0x90c>)
 800c998:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c99a:	e00c      	b.n	800c9b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c99c:	4b1a      	ldr	r3, [pc, #104]	; (800ca08 <UART_SetConfig+0x910>)
 800c99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9a0:	e009      	b.n	800c9b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9a8:	e005      	b.n	800c9b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c9b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c9b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f000 81ee 	beq.w	800cd9a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c2:	4a12      	ldr	r2, [pc, #72]	; (800ca0c <UART_SetConfig+0x914>)
 800c9c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9d0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	685a      	ldr	r2, [r3, #4]
 800c9d6:	4613      	mov	r3, r2
 800c9d8:	005b      	lsls	r3, r3, #1
 800c9da:	4413      	add	r3, r2
 800c9dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d305      	bcc.n	800c9ee <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d910      	bls.n	800ca10 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c9f4:	e1d1      	b.n	800cd9a <UART_SetConfig+0xca2>
 800c9f6:	bf00      	nop
 800c9f8:	40011c00 	.word	0x40011c00
 800c9fc:	58024400 	.word	0x58024400
 800ca00:	58000c00 	.word	0x58000c00
 800ca04:	03d09000 	.word	0x03d09000
 800ca08:	003d0900 	.word	0x003d0900
 800ca0c:	0800df84 	.word	0x0800df84
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca12:	2200      	movs	r2, #0
 800ca14:	60bb      	str	r3, [r7, #8]
 800ca16:	60fa      	str	r2, [r7, #12]
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca1c:	4ac0      	ldr	r2, [pc, #768]	; (800cd20 <UART_SetConfig+0xc28>)
 800ca1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca22:	b29b      	uxth	r3, r3
 800ca24:	2200      	movs	r2, #0
 800ca26:	603b      	str	r3, [r7, #0]
 800ca28:	607a      	str	r2, [r7, #4]
 800ca2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ca32:	f7f3 fc75 	bl	8000320 <__aeabi_uldivmod>
 800ca36:	4602      	mov	r2, r0
 800ca38:	460b      	mov	r3, r1
 800ca3a:	4610      	mov	r0, r2
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	f04f 0200 	mov.w	r2, #0
 800ca42:	f04f 0300 	mov.w	r3, #0
 800ca46:	020b      	lsls	r3, r1, #8
 800ca48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca4c:	0202      	lsls	r2, r0, #8
 800ca4e:	6979      	ldr	r1, [r7, #20]
 800ca50:	6849      	ldr	r1, [r1, #4]
 800ca52:	0849      	lsrs	r1, r1, #1
 800ca54:	2000      	movs	r0, #0
 800ca56:	460c      	mov	r4, r1
 800ca58:	4605      	mov	r5, r0
 800ca5a:	eb12 0804 	adds.w	r8, r2, r4
 800ca5e:	eb43 0905 	adc.w	r9, r3, r5
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	685b      	ldr	r3, [r3, #4]
 800ca66:	2200      	movs	r2, #0
 800ca68:	469a      	mov	sl, r3
 800ca6a:	4693      	mov	fp, r2
 800ca6c:	4652      	mov	r2, sl
 800ca6e:	465b      	mov	r3, fp
 800ca70:	4640      	mov	r0, r8
 800ca72:	4649      	mov	r1, r9
 800ca74:	f7f3 fc54 	bl	8000320 <__aeabi_uldivmod>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca86:	d308      	bcc.n	800ca9a <UART_SetConfig+0x9a2>
 800ca88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca8e:	d204      	bcs.n	800ca9a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca96:	60da      	str	r2, [r3, #12]
 800ca98:	e17f      	b.n	800cd9a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800caa0:	e17b      	b.n	800cd9a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	69db      	ldr	r3, [r3, #28]
 800caa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800caaa:	f040 80bd 	bne.w	800cc28 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800caae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cab2:	2b20      	cmp	r3, #32
 800cab4:	dc48      	bgt.n	800cb48 <UART_SetConfig+0xa50>
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	db7b      	blt.n	800cbb2 <UART_SetConfig+0xaba>
 800caba:	2b20      	cmp	r3, #32
 800cabc:	d879      	bhi.n	800cbb2 <UART_SetConfig+0xaba>
 800cabe:	a201      	add	r2, pc, #4	; (adr r2, 800cac4 <UART_SetConfig+0x9cc>)
 800cac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cac4:	0800cb4f 	.word	0x0800cb4f
 800cac8:	0800cb57 	.word	0x0800cb57
 800cacc:	0800cbb3 	.word	0x0800cbb3
 800cad0:	0800cbb3 	.word	0x0800cbb3
 800cad4:	0800cb5f 	.word	0x0800cb5f
 800cad8:	0800cbb3 	.word	0x0800cbb3
 800cadc:	0800cbb3 	.word	0x0800cbb3
 800cae0:	0800cbb3 	.word	0x0800cbb3
 800cae4:	0800cb6f 	.word	0x0800cb6f
 800cae8:	0800cbb3 	.word	0x0800cbb3
 800caec:	0800cbb3 	.word	0x0800cbb3
 800caf0:	0800cbb3 	.word	0x0800cbb3
 800caf4:	0800cbb3 	.word	0x0800cbb3
 800caf8:	0800cbb3 	.word	0x0800cbb3
 800cafc:	0800cbb3 	.word	0x0800cbb3
 800cb00:	0800cbb3 	.word	0x0800cbb3
 800cb04:	0800cb7f 	.word	0x0800cb7f
 800cb08:	0800cbb3 	.word	0x0800cbb3
 800cb0c:	0800cbb3 	.word	0x0800cbb3
 800cb10:	0800cbb3 	.word	0x0800cbb3
 800cb14:	0800cbb3 	.word	0x0800cbb3
 800cb18:	0800cbb3 	.word	0x0800cbb3
 800cb1c:	0800cbb3 	.word	0x0800cbb3
 800cb20:	0800cbb3 	.word	0x0800cbb3
 800cb24:	0800cbb3 	.word	0x0800cbb3
 800cb28:	0800cbb3 	.word	0x0800cbb3
 800cb2c:	0800cbb3 	.word	0x0800cbb3
 800cb30:	0800cbb3 	.word	0x0800cbb3
 800cb34:	0800cbb3 	.word	0x0800cbb3
 800cb38:	0800cbb3 	.word	0x0800cbb3
 800cb3c:	0800cbb3 	.word	0x0800cbb3
 800cb40:	0800cbb3 	.word	0x0800cbb3
 800cb44:	0800cba5 	.word	0x0800cba5
 800cb48:	2b40      	cmp	r3, #64	; 0x40
 800cb4a:	d02e      	beq.n	800cbaa <UART_SetConfig+0xab2>
 800cb4c:	e031      	b.n	800cbb2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb4e:	f7fb ff61 	bl	8008a14 <HAL_RCC_GetPCLK1Freq>
 800cb52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb54:	e033      	b.n	800cbbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb56:	f7fb ff73 	bl	8008a40 <HAL_RCC_GetPCLK2Freq>
 800cb5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb5c:	e02f      	b.n	800cbbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7fc fe92 	bl	800988c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb6c:	e027      	b.n	800cbbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb6e:	f107 0318 	add.w	r3, r7, #24
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7fc ffde 	bl	8009b34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb7c:	e01f      	b.n	800cbbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb7e:	4b69      	ldr	r3, [pc, #420]	; (800cd24 <UART_SetConfig+0xc2c>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f003 0320 	and.w	r3, r3, #32
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d009      	beq.n	800cb9e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb8a:	4b66      	ldr	r3, [pc, #408]	; (800cd24 <UART_SetConfig+0xc2c>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	08db      	lsrs	r3, r3, #3
 800cb90:	f003 0303 	and.w	r3, r3, #3
 800cb94:	4a64      	ldr	r2, [pc, #400]	; (800cd28 <UART_SetConfig+0xc30>)
 800cb96:	fa22 f303 	lsr.w	r3, r2, r3
 800cb9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb9c:	e00f      	b.n	800cbbe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800cb9e:	4b62      	ldr	r3, [pc, #392]	; (800cd28 <UART_SetConfig+0xc30>)
 800cba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cba2:	e00c      	b.n	800cbbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cba4:	4b61      	ldr	r3, [pc, #388]	; (800cd2c <UART_SetConfig+0xc34>)
 800cba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cba8:	e009      	b.n	800cbbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbb0:	e005      	b.n	800cbbe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cbbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cbbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	f000 80ea 	beq.w	800cd9a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbca:	4a55      	ldr	r2, [pc, #340]	; (800cd20 <UART_SetConfig+0xc28>)
 800cbcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbd4:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbd8:	005a      	lsls	r2, r3, #1
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	085b      	lsrs	r3, r3, #1
 800cbe0:	441a      	add	r2, r3
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbee:	2b0f      	cmp	r3, #15
 800cbf0:	d916      	bls.n	800cc20 <UART_SetConfig+0xb28>
 800cbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbf8:	d212      	bcs.n	800cc20 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	f023 030f 	bic.w	r3, r3, #15
 800cc02:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc06:	085b      	lsrs	r3, r3, #1
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	f003 0307 	and.w	r3, r3, #7
 800cc0e:	b29a      	uxth	r2, r3
 800cc10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cc12:	4313      	orrs	r3, r2
 800cc14:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cc1c:	60da      	str	r2, [r3, #12]
 800cc1e:	e0bc      	b.n	800cd9a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cc20:	2301      	movs	r3, #1
 800cc22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cc26:	e0b8      	b.n	800cd9a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cc28:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cc2c:	2b20      	cmp	r3, #32
 800cc2e:	dc4b      	bgt.n	800ccc8 <UART_SetConfig+0xbd0>
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	f2c0 8087 	blt.w	800cd44 <UART_SetConfig+0xc4c>
 800cc36:	2b20      	cmp	r3, #32
 800cc38:	f200 8084 	bhi.w	800cd44 <UART_SetConfig+0xc4c>
 800cc3c:	a201      	add	r2, pc, #4	; (adr r2, 800cc44 <UART_SetConfig+0xb4c>)
 800cc3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc42:	bf00      	nop
 800cc44:	0800cccf 	.word	0x0800cccf
 800cc48:	0800ccd7 	.word	0x0800ccd7
 800cc4c:	0800cd45 	.word	0x0800cd45
 800cc50:	0800cd45 	.word	0x0800cd45
 800cc54:	0800ccdf 	.word	0x0800ccdf
 800cc58:	0800cd45 	.word	0x0800cd45
 800cc5c:	0800cd45 	.word	0x0800cd45
 800cc60:	0800cd45 	.word	0x0800cd45
 800cc64:	0800ccef 	.word	0x0800ccef
 800cc68:	0800cd45 	.word	0x0800cd45
 800cc6c:	0800cd45 	.word	0x0800cd45
 800cc70:	0800cd45 	.word	0x0800cd45
 800cc74:	0800cd45 	.word	0x0800cd45
 800cc78:	0800cd45 	.word	0x0800cd45
 800cc7c:	0800cd45 	.word	0x0800cd45
 800cc80:	0800cd45 	.word	0x0800cd45
 800cc84:	0800ccff 	.word	0x0800ccff
 800cc88:	0800cd45 	.word	0x0800cd45
 800cc8c:	0800cd45 	.word	0x0800cd45
 800cc90:	0800cd45 	.word	0x0800cd45
 800cc94:	0800cd45 	.word	0x0800cd45
 800cc98:	0800cd45 	.word	0x0800cd45
 800cc9c:	0800cd45 	.word	0x0800cd45
 800cca0:	0800cd45 	.word	0x0800cd45
 800cca4:	0800cd45 	.word	0x0800cd45
 800cca8:	0800cd45 	.word	0x0800cd45
 800ccac:	0800cd45 	.word	0x0800cd45
 800ccb0:	0800cd45 	.word	0x0800cd45
 800ccb4:	0800cd45 	.word	0x0800cd45
 800ccb8:	0800cd45 	.word	0x0800cd45
 800ccbc:	0800cd45 	.word	0x0800cd45
 800ccc0:	0800cd45 	.word	0x0800cd45
 800ccc4:	0800cd37 	.word	0x0800cd37
 800ccc8:	2b40      	cmp	r3, #64	; 0x40
 800ccca:	d037      	beq.n	800cd3c <UART_SetConfig+0xc44>
 800cccc:	e03a      	b.n	800cd44 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ccce:	f7fb fea1 	bl	8008a14 <HAL_RCC_GetPCLK1Freq>
 800ccd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ccd4:	e03c      	b.n	800cd50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ccd6:	f7fb feb3 	bl	8008a40 <HAL_RCC_GetPCLK2Freq>
 800ccda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ccdc:	e038      	b.n	800cd50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7fc fdd2 	bl	800988c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccec:	e030      	b.n	800cd50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccee:	f107 0318 	add.w	r3, r7, #24
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7fc ff1e 	bl	8009b34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccfc:	e028      	b.n	800cd50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccfe:	4b09      	ldr	r3, [pc, #36]	; (800cd24 <UART_SetConfig+0xc2c>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f003 0320 	and.w	r3, r3, #32
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d012      	beq.n	800cd30 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd0a:	4b06      	ldr	r3, [pc, #24]	; (800cd24 <UART_SetConfig+0xc2c>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	08db      	lsrs	r3, r3, #3
 800cd10:	f003 0303 	and.w	r3, r3, #3
 800cd14:	4a04      	ldr	r2, [pc, #16]	; (800cd28 <UART_SetConfig+0xc30>)
 800cd16:	fa22 f303 	lsr.w	r3, r2, r3
 800cd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd1c:	e018      	b.n	800cd50 <UART_SetConfig+0xc58>
 800cd1e:	bf00      	nop
 800cd20:	0800df84 	.word	0x0800df84
 800cd24:	58024400 	.word	0x58024400
 800cd28:	03d09000 	.word	0x03d09000
 800cd2c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800cd30:	4b24      	ldr	r3, [pc, #144]	; (800cdc4 <UART_SetConfig+0xccc>)
 800cd32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd34:	e00c      	b.n	800cd50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd36:	4b24      	ldr	r3, [pc, #144]	; (800cdc8 <UART_SetConfig+0xcd0>)
 800cd38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd3a:	e009      	b.n	800cd50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd42:	e005      	b.n	800cd50 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800cd44:	2300      	movs	r3, #0
 800cd46:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cd4e:	bf00      	nop
    }

    if (pclk != 0U)
 800cd50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d021      	beq.n	800cd9a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd5a:	4a1c      	ldr	r2, [pc, #112]	; (800cdcc <UART_SetConfig+0xcd4>)
 800cd5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd60:	461a      	mov	r2, r3
 800cd62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd64:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	085b      	lsrs	r3, r3, #1
 800cd6e:	441a      	add	r2, r3
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd78:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7c:	2b0f      	cmp	r3, #15
 800cd7e:	d909      	bls.n	800cd94 <UART_SetConfig+0xc9c>
 800cd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd86:	d205      	bcs.n	800cd94 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8a:	b29a      	uxth	r2, r3
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	60da      	str	r2, [r3, #12]
 800cd92:	e002      	b.n	800cd9a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cd94:	2301      	movs	r3, #1
 800cd96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	2201      	movs	r2, #1
 800cda6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	2200      	movs	r2, #0
 800cdae:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cdb6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3748      	adds	r7, #72	; 0x48
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cdc4:	03d09000 	.word	0x03d09000
 800cdc8:	003d0900 	.word	0x003d0900
 800cdcc:	0800df84 	.word	0x0800df84

0800cdd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b083      	sub	sp, #12
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cddc:	f003 0301 	and.w	r3, r3, #1
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d00a      	beq.n	800cdfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	430a      	orrs	r2, r1
 800cdf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdfe:	f003 0302 	and.w	r3, r3, #2
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d00a      	beq.n	800ce1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	430a      	orrs	r2, r1
 800ce1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce20:	f003 0304 	and.w	r3, r3, #4
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d00a      	beq.n	800ce3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	430a      	orrs	r2, r1
 800ce3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce42:	f003 0308 	and.w	r3, r3, #8
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d00a      	beq.n	800ce60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	430a      	orrs	r2, r1
 800ce5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce64:	f003 0310 	and.w	r3, r3, #16
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d00a      	beq.n	800ce82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	689b      	ldr	r3, [r3, #8]
 800ce72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	430a      	orrs	r2, r1
 800ce80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce86:	f003 0320 	and.w	r3, r3, #32
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d00a      	beq.n	800cea4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	689b      	ldr	r3, [r3, #8]
 800ce94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	430a      	orrs	r2, r1
 800cea2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d01a      	beq.n	800cee6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	685b      	ldr	r3, [r3, #4]
 800ceb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	430a      	orrs	r2, r1
 800cec4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cece:	d10a      	bne.n	800cee6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	430a      	orrs	r2, r1
 800cee4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d00a      	beq.n	800cf08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	430a      	orrs	r2, r1
 800cf06:	605a      	str	r2, [r3, #4]
  }
}
 800cf08:	bf00      	nop
 800cf0a:	370c      	adds	r7, #12
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr

0800cf14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b086      	sub	sp, #24
 800cf18:	af02      	add	r7, sp, #8
 800cf1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf24:	f7f7 fd16 	bl	8004954 <HAL_GetTick>
 800cf28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f003 0308 	and.w	r3, r3, #8
 800cf34:	2b08      	cmp	r3, #8
 800cf36:	d10e      	bne.n	800cf56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf3c:	9300      	str	r3, [sp, #0]
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2200      	movs	r2, #0
 800cf42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 f82f 	bl	800cfaa <UART_WaitOnFlagUntilTimeout>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d001      	beq.n	800cf56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf52:	2303      	movs	r3, #3
 800cf54:	e025      	b.n	800cfa2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f003 0304 	and.w	r3, r3, #4
 800cf60:	2b04      	cmp	r3, #4
 800cf62:	d10e      	bne.n	800cf82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf68:	9300      	str	r3, [sp, #0]
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f000 f819 	bl	800cfaa <UART_WaitOnFlagUntilTimeout>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d001      	beq.n	800cf82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf7e:	2303      	movs	r3, #3
 800cf80:	e00f      	b.n	800cfa2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2220      	movs	r2, #32
 800cf86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2220      	movs	r2, #32
 800cf8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2200      	movs	r2, #0
 800cf96:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cfa0:	2300      	movs	r3, #0
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3710      	adds	r7, #16
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}

0800cfaa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cfaa:	b580      	push	{r7, lr}
 800cfac:	b09c      	sub	sp, #112	; 0x70
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	60f8      	str	r0, [r7, #12]
 800cfb2:	60b9      	str	r1, [r7, #8]
 800cfb4:	603b      	str	r3, [r7, #0]
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cfba:	e0a9      	b.n	800d110 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cfbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cfbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfc2:	f000 80a5 	beq.w	800d110 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cfc6:	f7f7 fcc5 	bl	8004954 <HAL_GetTick>
 800cfca:	4602      	mov	r2, r0
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	1ad3      	subs	r3, r2, r3
 800cfd0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d302      	bcc.n	800cfdc <UART_WaitOnFlagUntilTimeout+0x32>
 800cfd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d140      	bne.n	800d05e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfe4:	e853 3f00 	ldrex	r3, [r3]
 800cfe8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cfea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cff0:	667b      	str	r3, [r7, #100]	; 0x64
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	461a      	mov	r2, r3
 800cff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cffa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cffc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cffe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d000:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d002:	e841 2300 	strex	r3, r2, [r1]
 800d006:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d1e6      	bne.n	800cfdc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	3308      	adds	r3, #8
 800d014:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d018:	e853 3f00 	ldrex	r3, [r3]
 800d01c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d020:	f023 0301 	bic.w	r3, r3, #1
 800d024:	663b      	str	r3, [r7, #96]	; 0x60
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	3308      	adds	r3, #8
 800d02c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d02e:	64ba      	str	r2, [r7, #72]	; 0x48
 800d030:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d032:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d034:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d036:	e841 2300 	strex	r3, r2, [r1]
 800d03a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d03c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d1e5      	bne.n	800d00e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2220      	movs	r2, #32
 800d046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2220      	movs	r2, #32
 800d04e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2200      	movs	r2, #0
 800d056:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d05a:	2303      	movs	r3, #3
 800d05c:	e069      	b.n	800d132 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f003 0304 	and.w	r3, r3, #4
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d051      	beq.n	800d110 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	69db      	ldr	r3, [r3, #28]
 800d072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d07a:	d149      	bne.n	800d110 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d084:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08e:	e853 3f00 	ldrex	r3, [r3]
 800d092:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d096:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d09a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	461a      	mov	r2, r3
 800d0a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0a4:	637b      	str	r3, [r7, #52]	; 0x34
 800d0a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d0aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0ac:	e841 2300 	strex	r3, r2, [r1]
 800d0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d1e6      	bne.n	800d086 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	3308      	adds	r3, #8
 800d0be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	e853 3f00 	ldrex	r3, [r3]
 800d0c6:	613b      	str	r3, [r7, #16]
   return(result);
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	f023 0301 	bic.w	r3, r3, #1
 800d0ce:	66bb      	str	r3, [r7, #104]	; 0x68
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	3308      	adds	r3, #8
 800d0d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d0d8:	623a      	str	r2, [r7, #32]
 800d0da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0dc:	69f9      	ldr	r1, [r7, #28]
 800d0de:	6a3a      	ldr	r2, [r7, #32]
 800d0e0:	e841 2300 	strex	r3, r2, [r1]
 800d0e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d0e6:	69bb      	ldr	r3, [r7, #24]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d1e5      	bne.n	800d0b8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2220      	movs	r2, #32
 800d0f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2220      	movs	r2, #32
 800d0f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2220      	movs	r2, #32
 800d100:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2200      	movs	r2, #0
 800d108:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d10c:	2303      	movs	r3, #3
 800d10e:	e010      	b.n	800d132 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	69da      	ldr	r2, [r3, #28]
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	4013      	ands	r3, r2
 800d11a:	68ba      	ldr	r2, [r7, #8]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	bf0c      	ite	eq
 800d120:	2301      	moveq	r3, #1
 800d122:	2300      	movne	r3, #0
 800d124:	b2db      	uxtb	r3, r3
 800d126:	461a      	mov	r2, r3
 800d128:	79fb      	ldrb	r3, [r7, #7]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	f43f af46 	beq.w	800cfbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d130:	2300      	movs	r3, #0
}
 800d132:	4618      	mov	r0, r3
 800d134:	3770      	adds	r7, #112	; 0x70
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
	...

0800d13c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b096      	sub	sp, #88	; 0x58
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	4613      	mov	r3, r2
 800d148:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	68ba      	ldr	r2, [r7, #8]
 800d14e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	88fa      	ldrh	r2, [r7, #6]
 800d154:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2200      	movs	r2, #0
 800d15c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2222      	movs	r2, #34	; 0x22
 800d164:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d02c      	beq.n	800d1ca <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d174:	4a42      	ldr	r2, [pc, #264]	; (800d280 <UART_Start_Receive_DMA+0x144>)
 800d176:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d17c:	4a41      	ldr	r2, [pc, #260]	; (800d284 <UART_Start_Receive_DMA+0x148>)
 800d17e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d184:	4a40      	ldr	r2, [pc, #256]	; (800d288 <UART_Start_Receive_DMA+0x14c>)
 800d186:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d18c:	2200      	movs	r2, #0
 800d18e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	3324      	adds	r3, #36	; 0x24
 800d19a:	4619      	mov	r1, r3
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	88fb      	ldrh	r3, [r7, #6]
 800d1a4:	f7f8 f84c 	bl	8005240 <HAL_DMA_Start_IT>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d00d      	beq.n	800d1ca <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2210      	movs	r2, #16
 800d1b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2220      	movs	r2, #32
 800d1c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e055      	b.n	800d276 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	691b      	ldr	r3, [r3, #16]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d018      	beq.n	800d20c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1e2:	e853 3f00 	ldrex	r3, [r3]
 800d1e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1ee:	657b      	str	r3, [r7, #84]	; 0x54
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	461a      	mov	r2, r3
 800d1f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1fa:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d1fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d200:	e841 2300 	strex	r3, r2, [r1]
 800d204:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d1e6      	bne.n	800d1da <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	3308      	adds	r3, #8
 800d212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d216:	e853 3f00 	ldrex	r3, [r3]
 800d21a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21e:	f043 0301 	orr.w	r3, r3, #1
 800d222:	653b      	str	r3, [r7, #80]	; 0x50
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	3308      	adds	r3, #8
 800d22a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d22c:	637a      	str	r2, [r7, #52]	; 0x34
 800d22e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d230:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d234:	e841 2300 	strex	r3, r2, [r1]
 800d238:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d1e5      	bne.n	800d20c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	3308      	adds	r3, #8
 800d246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	e853 3f00 	ldrex	r3, [r3]
 800d24e:	613b      	str	r3, [r7, #16]
   return(result);
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d256:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	3308      	adds	r3, #8
 800d25e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d260:	623a      	str	r2, [r7, #32]
 800d262:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d264:	69f9      	ldr	r1, [r7, #28]
 800d266:	6a3a      	ldr	r2, [r7, #32]
 800d268:	e841 2300 	strex	r3, r2, [r1]
 800d26c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d26e:	69bb      	ldr	r3, [r7, #24]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d1e5      	bne.n	800d240 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d274:	2300      	movs	r3, #0
}
 800d276:	4618      	mov	r0, r3
 800d278:	3758      	adds	r7, #88	; 0x58
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop
 800d280:	0800d48f 	.word	0x0800d48f
 800d284:	0800d5b1 	.word	0x0800d5b1
 800d288:	0800d5e9 	.word	0x0800d5e9

0800d28c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b08f      	sub	sp, #60	; 0x3c
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d29a:	6a3b      	ldr	r3, [r7, #32]
 800d29c:	e853 3f00 	ldrex	r3, [r3]
 800d2a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d2a2:	69fb      	ldr	r3, [r7, #28]
 800d2a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d2a8:	637b      	str	r3, [r7, #52]	; 0x34
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2b4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2ba:	e841 2300 	strex	r3, r2, [r1]
 800d2be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d1e6      	bne.n	800d294 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	3308      	adds	r3, #8
 800d2cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	e853 3f00 	ldrex	r3, [r3]
 800d2d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d2dc:	633b      	str	r3, [r7, #48]	; 0x30
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	3308      	adds	r3, #8
 800d2e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2e6:	61ba      	str	r2, [r7, #24]
 800d2e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ea:	6979      	ldr	r1, [r7, #20]
 800d2ec:	69ba      	ldr	r2, [r7, #24]
 800d2ee:	e841 2300 	strex	r3, r2, [r1]
 800d2f2:	613b      	str	r3, [r7, #16]
   return(result);
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d1e5      	bne.n	800d2c6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2220      	movs	r2, #32
 800d2fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d302:	bf00      	nop
 800d304:	373c      	adds	r7, #60	; 0x3c
 800d306:	46bd      	mov	sp, r7
 800d308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30c:	4770      	bx	lr
	...

0800d310 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d310:	b480      	push	{r7}
 800d312:	b095      	sub	sp, #84	; 0x54
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d320:	e853 3f00 	ldrex	r3, [r3]
 800d324:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d32c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	461a      	mov	r2, r3
 800d334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d336:	643b      	str	r3, [r7, #64]	; 0x40
 800d338:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d33a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d33c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d33e:	e841 2300 	strex	r3, r2, [r1]
 800d342:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d346:	2b00      	cmp	r3, #0
 800d348:	d1e6      	bne.n	800d318 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	3308      	adds	r3, #8
 800d350:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d352:	6a3b      	ldr	r3, [r7, #32]
 800d354:	e853 3f00 	ldrex	r3, [r3]
 800d358:	61fb      	str	r3, [r7, #28]
   return(result);
 800d35a:	69fa      	ldr	r2, [r7, #28]
 800d35c:	4b1e      	ldr	r3, [pc, #120]	; (800d3d8 <UART_EndRxTransfer+0xc8>)
 800d35e:	4013      	ands	r3, r2
 800d360:	64bb      	str	r3, [r7, #72]	; 0x48
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	3308      	adds	r3, #8
 800d368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d36a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d36c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d36e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d372:	e841 2300 	strex	r3, r2, [r1]
 800d376:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d1e5      	bne.n	800d34a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d382:	2b01      	cmp	r3, #1
 800d384:	d118      	bne.n	800d3b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	e853 3f00 	ldrex	r3, [r3]
 800d392:	60bb      	str	r3, [r7, #8]
   return(result);
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	f023 0310 	bic.w	r3, r3, #16
 800d39a:	647b      	str	r3, [r7, #68]	; 0x44
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3a4:	61bb      	str	r3, [r7, #24]
 800d3a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a8:	6979      	ldr	r1, [r7, #20]
 800d3aa:	69ba      	ldr	r2, [r7, #24]
 800d3ac:	e841 2300 	strex	r3, r2, [r1]
 800d3b0:	613b      	str	r3, [r7, #16]
   return(result);
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d1e6      	bne.n	800d386 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2220      	movs	r2, #32
 800d3bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d3cc:	bf00      	nop
 800d3ce:	3754      	adds	r7, #84	; 0x54
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d6:	4770      	bx	lr
 800d3d8:	effffffe 	.word	0xeffffffe

0800d3dc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b090      	sub	sp, #64	; 0x40
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	69db      	ldr	r3, [r3, #28]
 800d3ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3f2:	d037      	beq.n	800d464 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d3f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d3fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	3308      	adds	r3, #8
 800d402:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d406:	e853 3f00 	ldrex	r3, [r3]
 800d40a:	623b      	str	r3, [r7, #32]
   return(result);
 800d40c:	6a3b      	ldr	r3, [r7, #32]
 800d40e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d412:	63bb      	str	r3, [r7, #56]	; 0x38
 800d414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	3308      	adds	r3, #8
 800d41a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d41c:	633a      	str	r2, [r7, #48]	; 0x30
 800d41e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d420:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d424:	e841 2300 	strex	r3, r2, [r1]
 800d428:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d1e5      	bne.n	800d3fc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	e853 3f00 	ldrex	r3, [r3]
 800d43c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d444:	637b      	str	r3, [r7, #52]	; 0x34
 800d446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	461a      	mov	r2, r3
 800d44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d44e:	61fb      	str	r3, [r7, #28]
 800d450:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d452:	69b9      	ldr	r1, [r7, #24]
 800d454:	69fa      	ldr	r2, [r7, #28]
 800d456:	e841 2300 	strex	r3, r2, [r1]
 800d45a:	617b      	str	r3, [r7, #20]
   return(result);
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d1e6      	bne.n	800d430 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d462:	e002      	b.n	800d46a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d464:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d466:	f7f5 fd81 	bl	8002f6c <HAL_UART_TxCpltCallback>
}
 800d46a:	bf00      	nop
 800d46c:	3740      	adds	r7, #64	; 0x40
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}

0800d472 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d472:	b580      	push	{r7, lr}
 800d474:	b084      	sub	sp, #16
 800d476:	af00      	add	r7, sp, #0
 800d478:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d47e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d480:	68f8      	ldr	r0, [r7, #12]
 800d482:	f7fe fe0f 	bl	800c0a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d486:	bf00      	nop
 800d488:	3710      	adds	r7, #16
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}

0800d48e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d48e:	b580      	push	{r7, lr}
 800d490:	b09c      	sub	sp, #112	; 0x70
 800d492:	af00      	add	r7, sp, #0
 800d494:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d49a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	69db      	ldr	r3, [r3, #28]
 800d4a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4a4:	d071      	beq.n	800d58a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d4a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d4ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4b6:	e853 3f00 	ldrex	r3, [r3]
 800d4ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d4bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d4c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d4c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d4cc:	65bb      	str	r3, [r7, #88]	; 0x58
 800d4ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d4d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d4d4:	e841 2300 	strex	r3, r2, [r1]
 800d4d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d4da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d1e6      	bne.n	800d4ae <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	3308      	adds	r3, #8
 800d4e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ea:	e853 3f00 	ldrex	r3, [r3]
 800d4ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4f2:	f023 0301 	bic.w	r3, r3, #1
 800d4f6:	667b      	str	r3, [r7, #100]	; 0x64
 800d4f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	3308      	adds	r3, #8
 800d4fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d500:	647a      	str	r2, [r7, #68]	; 0x44
 800d502:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d504:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d506:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d508:	e841 2300 	strex	r3, r2, [r1]
 800d50c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d50e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d510:	2b00      	cmp	r3, #0
 800d512:	d1e5      	bne.n	800d4e0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	3308      	adds	r3, #8
 800d51a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51e:	e853 3f00 	ldrex	r3, [r3]
 800d522:	623b      	str	r3, [r7, #32]
   return(result);
 800d524:	6a3b      	ldr	r3, [r7, #32]
 800d526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d52a:	663b      	str	r3, [r7, #96]	; 0x60
 800d52c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	3308      	adds	r3, #8
 800d532:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d534:	633a      	str	r2, [r7, #48]	; 0x30
 800d536:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d538:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d53a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d53c:	e841 2300 	strex	r3, r2, [r1]
 800d540:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d544:	2b00      	cmp	r3, #0
 800d546:	d1e5      	bne.n	800d514 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d54a:	2220      	movs	r2, #32
 800d54c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d554:	2b01      	cmp	r3, #1
 800d556:	d118      	bne.n	800d58a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	e853 3f00 	ldrex	r3, [r3]
 800d564:	60fb      	str	r3, [r7, #12]
   return(result);
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	f023 0310 	bic.w	r3, r3, #16
 800d56c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d56e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	461a      	mov	r2, r3
 800d574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d576:	61fb      	str	r3, [r7, #28]
 800d578:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d57a:	69b9      	ldr	r1, [r7, #24]
 800d57c:	69fa      	ldr	r2, [r7, #28]
 800d57e:	e841 2300 	strex	r3, r2, [r1]
 800d582:	617b      	str	r3, [r7, #20]
   return(result);
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d1e6      	bne.n	800d558 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d58a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d58c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d107      	bne.n	800d5a2 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d594:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d598:	4619      	mov	r1, r3
 800d59a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d59c:	f7fe fda0 	bl	800c0e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d5a0:	e002      	b.n	800d5a8 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800d5a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d5a4:	f7f5 fcf4 	bl	8002f90 <HAL_UART_RxCpltCallback>
}
 800d5a8:	bf00      	nop
 800d5aa:	3770      	adds	r7, #112	; 0x70
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5bc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5c2:	2b01      	cmp	r3, #1
 800d5c4:	d109      	bne.n	800d5da <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d5cc:	085b      	lsrs	r3, r3, #1
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	68f8      	ldr	r0, [r7, #12]
 800d5d4:	f7fe fd84 	bl	800c0e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d5d8:	e002      	b.n	800d5e0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d5da:	68f8      	ldr	r0, [r7, #12]
 800d5dc:	f7fe fd6c 	bl	800c0b8 <HAL_UART_RxHalfCpltCallback>
}
 800d5e0:	bf00      	nop
 800d5e2:	3710      	adds	r7, #16
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b086      	sub	sp, #24
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5f4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5fc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d604:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	689b      	ldr	r3, [r3, #8]
 800d60c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d610:	2b80      	cmp	r3, #128	; 0x80
 800d612:	d109      	bne.n	800d628 <UART_DMAError+0x40>
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	2b21      	cmp	r3, #33	; 0x21
 800d618:	d106      	bne.n	800d628 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	2200      	movs	r2, #0
 800d61e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d622:	6978      	ldr	r0, [r7, #20]
 800d624:	f7ff fe32 	bl	800d28c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	689b      	ldr	r3, [r3, #8]
 800d62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d632:	2b40      	cmp	r3, #64	; 0x40
 800d634:	d109      	bne.n	800d64a <UART_DMAError+0x62>
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2b22      	cmp	r3, #34	; 0x22
 800d63a:	d106      	bne.n	800d64a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	2200      	movs	r2, #0
 800d640:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d644:	6978      	ldr	r0, [r7, #20]
 800d646:	f7ff fe63 	bl	800d310 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d650:	f043 0210 	orr.w	r2, r3, #16
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d65a:	6978      	ldr	r0, [r7, #20]
 800d65c:	f7fe fd36 	bl	800c0cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d660:	bf00      	nop
 800d662:	3718      	adds	r7, #24
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d674:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2200      	movs	r2, #0
 800d67a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2200      	movs	r2, #0
 800d682:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d686:	68f8      	ldr	r0, [r7, #12]
 800d688:	f7fe fd20 	bl	800c0cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d68c:	bf00      	nop
 800d68e:	3710      	adds	r7, #16
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}

0800d694 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b088      	sub	sp, #32
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	e853 3f00 	ldrex	r3, [r3]
 800d6a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6b0:	61fb      	str	r3, [r7, #28]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	461a      	mov	r2, r3
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	61bb      	str	r3, [r7, #24]
 800d6bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6be:	6979      	ldr	r1, [r7, #20]
 800d6c0:	69ba      	ldr	r2, [r7, #24]
 800d6c2:	e841 2300 	strex	r3, r2, [r1]
 800d6c6:	613b      	str	r3, [r7, #16]
   return(result);
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d1e6      	bne.n	800d69c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2220      	movs	r2, #32
 800d6d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f7f5 fc45 	bl	8002f6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6e2:	bf00      	nop
 800d6e4:	3720      	adds	r7, #32
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}

0800d6ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d6ea:	b480      	push	{r7}
 800d6ec:	b083      	sub	sp, #12
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d6f2:	bf00      	nop
 800d6f4:	370c      	adds	r7, #12
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fc:	4770      	bx	lr

0800d6fe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d6fe:	b480      	push	{r7}
 800d700:	b083      	sub	sp, #12
 800d702:	af00      	add	r7, sp, #0
 800d704:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d706:	bf00      	nop
 800d708:	370c      	adds	r7, #12
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr

0800d712 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d712:	b480      	push	{r7}
 800d714:	b083      	sub	sp, #12
 800d716:	af00      	add	r7, sp, #0
 800d718:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d71a:	bf00      	nop
 800d71c:	370c      	adds	r7, #12
 800d71e:	46bd      	mov	sp, r7
 800d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d724:	4770      	bx	lr

0800d726 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d726:	b480      	push	{r7}
 800d728:	b085      	sub	sp, #20
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d734:	2b01      	cmp	r3, #1
 800d736:	d101      	bne.n	800d73c <HAL_UARTEx_DisableFifoMode+0x16>
 800d738:	2302      	movs	r3, #2
 800d73a:	e027      	b.n	800d78c <HAL_UARTEx_DisableFifoMode+0x66>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2201      	movs	r2, #1
 800d740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2224      	movs	r2, #36	; 0x24
 800d748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f022 0201 	bic.w	r2, r2, #1
 800d762:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d76a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2200      	movs	r2, #0
 800d770:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	68fa      	ldr	r2, [r7, #12]
 800d778:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2220      	movs	r2, #32
 800d77e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2200      	movs	r2, #0
 800d786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d78a:	2300      	movs	r3, #0
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3714      	adds	r7, #20
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr

0800d798 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d101      	bne.n	800d7b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d7ac:	2302      	movs	r3, #2
 800d7ae:	e02d      	b.n	800d80c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2224      	movs	r2, #36	; 0x24
 800d7bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	681a      	ldr	r2, [r3, #0]
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f022 0201 	bic.w	r2, r2, #1
 800d7d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	683a      	ldr	r2, [r7, #0]
 800d7e8:	430a      	orrs	r2, r1
 800d7ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f000 f84f 	bl	800d890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	68fa      	ldr	r2, [r7, #12]
 800d7f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2220      	movs	r2, #32
 800d7fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2200      	movs	r2, #0
 800d806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d80a:	2300      	movs	r3, #0
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3710      	adds	r7, #16
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b084      	sub	sp, #16
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d824:	2b01      	cmp	r3, #1
 800d826:	d101      	bne.n	800d82c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d828:	2302      	movs	r3, #2
 800d82a:	e02d      	b.n	800d888 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2201      	movs	r2, #1
 800d830:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2224      	movs	r2, #36	; 0x24
 800d838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f022 0201 	bic.w	r2, r2, #1
 800d852:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	689b      	ldr	r3, [r3, #8]
 800d85a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	683a      	ldr	r2, [r7, #0]
 800d864:	430a      	orrs	r2, r1
 800d866:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f000 f811 	bl	800d890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	68fa      	ldr	r2, [r7, #12]
 800d874:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2220      	movs	r2, #32
 800d87a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2200      	movs	r2, #0
 800d882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d886:	2300      	movs	r3, #0
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3710      	adds	r7, #16
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d890:	b480      	push	{r7}
 800d892:	b085      	sub	sp, #20
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d108      	bne.n	800d8b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d8b0:	e031      	b.n	800d916 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d8b2:	2310      	movs	r3, #16
 800d8b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d8b6:	2310      	movs	r3, #16
 800d8b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	689b      	ldr	r3, [r3, #8]
 800d8c0:	0e5b      	lsrs	r3, r3, #25
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	f003 0307 	and.w	r3, r3, #7
 800d8c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	689b      	ldr	r3, [r3, #8]
 800d8d0:	0f5b      	lsrs	r3, r3, #29
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	f003 0307 	and.w	r3, r3, #7
 800d8d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d8da:	7bbb      	ldrb	r3, [r7, #14]
 800d8dc:	7b3a      	ldrb	r2, [r7, #12]
 800d8de:	4911      	ldr	r1, [pc, #68]	; (800d924 <UARTEx_SetNbDataToProcess+0x94>)
 800d8e0:	5c8a      	ldrb	r2, [r1, r2]
 800d8e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d8e6:	7b3a      	ldrb	r2, [r7, #12]
 800d8e8:	490f      	ldr	r1, [pc, #60]	; (800d928 <UARTEx_SetNbDataToProcess+0x98>)
 800d8ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d8ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800d8f0:	b29a      	uxth	r2, r3
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d8f8:	7bfb      	ldrb	r3, [r7, #15]
 800d8fa:	7b7a      	ldrb	r2, [r7, #13]
 800d8fc:	4909      	ldr	r1, [pc, #36]	; (800d924 <UARTEx_SetNbDataToProcess+0x94>)
 800d8fe:	5c8a      	ldrb	r2, [r1, r2]
 800d900:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d904:	7b7a      	ldrb	r2, [r7, #13]
 800d906:	4908      	ldr	r1, [pc, #32]	; (800d928 <UARTEx_SetNbDataToProcess+0x98>)
 800d908:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d90a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d90e:	b29a      	uxth	r2, r3
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d916:	bf00      	nop
 800d918:	3714      	adds	r7, #20
 800d91a:	46bd      	mov	sp, r7
 800d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d920:	4770      	bx	lr
 800d922:	bf00      	nop
 800d924:	0800df9c 	.word	0x0800df9c
 800d928:	0800dfa4 	.word	0x0800dfa4

0800d92c <__cxa_pure_virtual>:
 800d92c:	b508      	push	{r3, lr}
 800d92e:	f000 f80d 	bl	800d94c <_ZSt9terminatev>

0800d932 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800d932:	b508      	push	{r3, lr}
 800d934:	4780      	blx	r0
 800d936:	f000 f80e 	bl	800d956 <abort>
	...

0800d93c <_ZSt13get_terminatev>:
 800d93c:	4b02      	ldr	r3, [pc, #8]	; (800d948 <_ZSt13get_terminatev+0xc>)
 800d93e:	6818      	ldr	r0, [r3, #0]
 800d940:	f3bf 8f5b 	dmb	ish
 800d944:	4770      	bx	lr
 800d946:	bf00      	nop
 800d948:	24000014 	.word	0x24000014

0800d94c <_ZSt9terminatev>:
 800d94c:	b508      	push	{r3, lr}
 800d94e:	f7ff fff5 	bl	800d93c <_ZSt13get_terminatev>
 800d952:	f7ff ffee 	bl	800d932 <_ZN10__cxxabiv111__terminateEPFvvE>

0800d956 <abort>:
 800d956:	b508      	push	{r3, lr}
 800d958:	2006      	movs	r0, #6
 800d95a:	f000 f873 	bl	800da44 <raise>
 800d95e:	2001      	movs	r0, #1
 800d960:	f7f6 fd7a 	bl	8004458 <_exit>

0800d964 <__errno>:
 800d964:	4b01      	ldr	r3, [pc, #4]	; (800d96c <__errno+0x8>)
 800d966:	6818      	ldr	r0, [r3, #0]
 800d968:	4770      	bx	lr
 800d96a:	bf00      	nop
 800d96c:	24000018 	.word	0x24000018

0800d970 <__libc_init_array>:
 800d970:	b570      	push	{r4, r5, r6, lr}
 800d972:	4d0d      	ldr	r5, [pc, #52]	; (800d9a8 <__libc_init_array+0x38>)
 800d974:	4c0d      	ldr	r4, [pc, #52]	; (800d9ac <__libc_init_array+0x3c>)
 800d976:	1b64      	subs	r4, r4, r5
 800d978:	10a4      	asrs	r4, r4, #2
 800d97a:	2600      	movs	r6, #0
 800d97c:	42a6      	cmp	r6, r4
 800d97e:	d109      	bne.n	800d994 <__libc_init_array+0x24>
 800d980:	4d0b      	ldr	r5, [pc, #44]	; (800d9b0 <__libc_init_array+0x40>)
 800d982:	4c0c      	ldr	r4, [pc, #48]	; (800d9b4 <__libc_init_array+0x44>)
 800d984:	f000 f9b0 	bl	800dce8 <_init>
 800d988:	1b64      	subs	r4, r4, r5
 800d98a:	10a4      	asrs	r4, r4, #2
 800d98c:	2600      	movs	r6, #0
 800d98e:	42a6      	cmp	r6, r4
 800d990:	d105      	bne.n	800d99e <__libc_init_array+0x2e>
 800d992:	bd70      	pop	{r4, r5, r6, pc}
 800d994:	f855 3b04 	ldr.w	r3, [r5], #4
 800d998:	4798      	blx	r3
 800d99a:	3601      	adds	r6, #1
 800d99c:	e7ee      	b.n	800d97c <__libc_init_array+0xc>
 800d99e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9a2:	4798      	blx	r3
 800d9a4:	3601      	adds	r6, #1
 800d9a6:	e7f2      	b.n	800d98e <__libc_init_array+0x1e>
 800d9a8:	0800dfb4 	.word	0x0800dfb4
 800d9ac:	0800dfb4 	.word	0x0800dfb4
 800d9b0:	0800dfb4 	.word	0x0800dfb4
 800d9b4:	0800dfc4 	.word	0x0800dfc4

0800d9b8 <memcpy>:
 800d9b8:	440a      	add	r2, r1
 800d9ba:	4291      	cmp	r1, r2
 800d9bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d9c0:	d100      	bne.n	800d9c4 <memcpy+0xc>
 800d9c2:	4770      	bx	lr
 800d9c4:	b510      	push	{r4, lr}
 800d9c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9ce:	4291      	cmp	r1, r2
 800d9d0:	d1f9      	bne.n	800d9c6 <memcpy+0xe>
 800d9d2:	bd10      	pop	{r4, pc}

0800d9d4 <memset>:
 800d9d4:	4402      	add	r2, r0
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	d100      	bne.n	800d9de <memset+0xa>
 800d9dc:	4770      	bx	lr
 800d9de:	f803 1b01 	strb.w	r1, [r3], #1
 800d9e2:	e7f9      	b.n	800d9d8 <memset+0x4>

0800d9e4 <realloc>:
 800d9e4:	4b02      	ldr	r3, [pc, #8]	; (800d9f0 <realloc+0xc>)
 800d9e6:	460a      	mov	r2, r1
 800d9e8:	4601      	mov	r1, r0
 800d9ea:	6818      	ldr	r0, [r3, #0]
 800d9ec:	f000 b8da 	b.w	800dba4 <_realloc_r>
 800d9f0:	24000018 	.word	0x24000018

0800d9f4 <_raise_r>:
 800d9f4:	291f      	cmp	r1, #31
 800d9f6:	b538      	push	{r3, r4, r5, lr}
 800d9f8:	4604      	mov	r4, r0
 800d9fa:	460d      	mov	r5, r1
 800d9fc:	d904      	bls.n	800da08 <_raise_r+0x14>
 800d9fe:	2316      	movs	r3, #22
 800da00:	6003      	str	r3, [r0, #0]
 800da02:	f04f 30ff 	mov.w	r0, #4294967295
 800da06:	bd38      	pop	{r3, r4, r5, pc}
 800da08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da0a:	b112      	cbz	r2, 800da12 <_raise_r+0x1e>
 800da0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da10:	b94b      	cbnz	r3, 800da26 <_raise_r+0x32>
 800da12:	4620      	mov	r0, r4
 800da14:	f000 f830 	bl	800da78 <_getpid_r>
 800da18:	462a      	mov	r2, r5
 800da1a:	4601      	mov	r1, r0
 800da1c:	4620      	mov	r0, r4
 800da1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da22:	f000 b817 	b.w	800da54 <_kill_r>
 800da26:	2b01      	cmp	r3, #1
 800da28:	d00a      	beq.n	800da40 <_raise_r+0x4c>
 800da2a:	1c59      	adds	r1, r3, #1
 800da2c:	d103      	bne.n	800da36 <_raise_r+0x42>
 800da2e:	2316      	movs	r3, #22
 800da30:	6003      	str	r3, [r0, #0]
 800da32:	2001      	movs	r0, #1
 800da34:	e7e7      	b.n	800da06 <_raise_r+0x12>
 800da36:	2400      	movs	r4, #0
 800da38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da3c:	4628      	mov	r0, r5
 800da3e:	4798      	blx	r3
 800da40:	2000      	movs	r0, #0
 800da42:	e7e0      	b.n	800da06 <_raise_r+0x12>

0800da44 <raise>:
 800da44:	4b02      	ldr	r3, [pc, #8]	; (800da50 <raise+0xc>)
 800da46:	4601      	mov	r1, r0
 800da48:	6818      	ldr	r0, [r3, #0]
 800da4a:	f7ff bfd3 	b.w	800d9f4 <_raise_r>
 800da4e:	bf00      	nop
 800da50:	24000018 	.word	0x24000018

0800da54 <_kill_r>:
 800da54:	b538      	push	{r3, r4, r5, lr}
 800da56:	4d07      	ldr	r5, [pc, #28]	; (800da74 <_kill_r+0x20>)
 800da58:	2300      	movs	r3, #0
 800da5a:	4604      	mov	r4, r0
 800da5c:	4608      	mov	r0, r1
 800da5e:	4611      	mov	r1, r2
 800da60:	602b      	str	r3, [r5, #0]
 800da62:	f7f6 fce9 	bl	8004438 <_kill>
 800da66:	1c43      	adds	r3, r0, #1
 800da68:	d102      	bne.n	800da70 <_kill_r+0x1c>
 800da6a:	682b      	ldr	r3, [r5, #0]
 800da6c:	b103      	cbz	r3, 800da70 <_kill_r+0x1c>
 800da6e:	6023      	str	r3, [r4, #0]
 800da70:	bd38      	pop	{r3, r4, r5, pc}
 800da72:	bf00      	nop
 800da74:	24001800 	.word	0x24001800

0800da78 <_getpid_r>:
 800da78:	f7f6 bcd6 	b.w	8004428 <_getpid>

0800da7c <sbrk_aligned>:
 800da7c:	b570      	push	{r4, r5, r6, lr}
 800da7e:	4e0e      	ldr	r6, [pc, #56]	; (800dab8 <sbrk_aligned+0x3c>)
 800da80:	460c      	mov	r4, r1
 800da82:	6831      	ldr	r1, [r6, #0]
 800da84:	4605      	mov	r5, r0
 800da86:	b911      	cbnz	r1, 800da8e <sbrk_aligned+0x12>
 800da88:	f000 f8bc 	bl	800dc04 <_sbrk_r>
 800da8c:	6030      	str	r0, [r6, #0]
 800da8e:	4621      	mov	r1, r4
 800da90:	4628      	mov	r0, r5
 800da92:	f000 f8b7 	bl	800dc04 <_sbrk_r>
 800da96:	1c43      	adds	r3, r0, #1
 800da98:	d00a      	beq.n	800dab0 <sbrk_aligned+0x34>
 800da9a:	1cc4      	adds	r4, r0, #3
 800da9c:	f024 0403 	bic.w	r4, r4, #3
 800daa0:	42a0      	cmp	r0, r4
 800daa2:	d007      	beq.n	800dab4 <sbrk_aligned+0x38>
 800daa4:	1a21      	subs	r1, r4, r0
 800daa6:	4628      	mov	r0, r5
 800daa8:	f000 f8ac 	bl	800dc04 <_sbrk_r>
 800daac:	3001      	adds	r0, #1
 800daae:	d101      	bne.n	800dab4 <sbrk_aligned+0x38>
 800dab0:	f04f 34ff 	mov.w	r4, #4294967295
 800dab4:	4620      	mov	r0, r4
 800dab6:	bd70      	pop	{r4, r5, r6, pc}
 800dab8:	240017fc 	.word	0x240017fc

0800dabc <_malloc_r>:
 800dabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dac0:	1ccd      	adds	r5, r1, #3
 800dac2:	f025 0503 	bic.w	r5, r5, #3
 800dac6:	3508      	adds	r5, #8
 800dac8:	2d0c      	cmp	r5, #12
 800daca:	bf38      	it	cc
 800dacc:	250c      	movcc	r5, #12
 800dace:	2d00      	cmp	r5, #0
 800dad0:	4607      	mov	r7, r0
 800dad2:	db01      	blt.n	800dad8 <_malloc_r+0x1c>
 800dad4:	42a9      	cmp	r1, r5
 800dad6:	d905      	bls.n	800dae4 <_malloc_r+0x28>
 800dad8:	230c      	movs	r3, #12
 800dada:	603b      	str	r3, [r7, #0]
 800dadc:	2600      	movs	r6, #0
 800dade:	4630      	mov	r0, r6
 800dae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dae4:	4e2e      	ldr	r6, [pc, #184]	; (800dba0 <_malloc_r+0xe4>)
 800dae6:	f000 f89d 	bl	800dc24 <__malloc_lock>
 800daea:	6833      	ldr	r3, [r6, #0]
 800daec:	461c      	mov	r4, r3
 800daee:	bb34      	cbnz	r4, 800db3e <_malloc_r+0x82>
 800daf0:	4629      	mov	r1, r5
 800daf2:	4638      	mov	r0, r7
 800daf4:	f7ff ffc2 	bl	800da7c <sbrk_aligned>
 800daf8:	1c43      	adds	r3, r0, #1
 800dafa:	4604      	mov	r4, r0
 800dafc:	d14d      	bne.n	800db9a <_malloc_r+0xde>
 800dafe:	6834      	ldr	r4, [r6, #0]
 800db00:	4626      	mov	r6, r4
 800db02:	2e00      	cmp	r6, #0
 800db04:	d140      	bne.n	800db88 <_malloc_r+0xcc>
 800db06:	6823      	ldr	r3, [r4, #0]
 800db08:	4631      	mov	r1, r6
 800db0a:	4638      	mov	r0, r7
 800db0c:	eb04 0803 	add.w	r8, r4, r3
 800db10:	f000 f878 	bl	800dc04 <_sbrk_r>
 800db14:	4580      	cmp	r8, r0
 800db16:	d13a      	bne.n	800db8e <_malloc_r+0xd2>
 800db18:	6821      	ldr	r1, [r4, #0]
 800db1a:	3503      	adds	r5, #3
 800db1c:	1a6d      	subs	r5, r5, r1
 800db1e:	f025 0503 	bic.w	r5, r5, #3
 800db22:	3508      	adds	r5, #8
 800db24:	2d0c      	cmp	r5, #12
 800db26:	bf38      	it	cc
 800db28:	250c      	movcc	r5, #12
 800db2a:	4629      	mov	r1, r5
 800db2c:	4638      	mov	r0, r7
 800db2e:	f7ff ffa5 	bl	800da7c <sbrk_aligned>
 800db32:	3001      	adds	r0, #1
 800db34:	d02b      	beq.n	800db8e <_malloc_r+0xd2>
 800db36:	6823      	ldr	r3, [r4, #0]
 800db38:	442b      	add	r3, r5
 800db3a:	6023      	str	r3, [r4, #0]
 800db3c:	e00e      	b.n	800db5c <_malloc_r+0xa0>
 800db3e:	6822      	ldr	r2, [r4, #0]
 800db40:	1b52      	subs	r2, r2, r5
 800db42:	d41e      	bmi.n	800db82 <_malloc_r+0xc6>
 800db44:	2a0b      	cmp	r2, #11
 800db46:	d916      	bls.n	800db76 <_malloc_r+0xba>
 800db48:	1961      	adds	r1, r4, r5
 800db4a:	42a3      	cmp	r3, r4
 800db4c:	6025      	str	r5, [r4, #0]
 800db4e:	bf18      	it	ne
 800db50:	6059      	strne	r1, [r3, #4]
 800db52:	6863      	ldr	r3, [r4, #4]
 800db54:	bf08      	it	eq
 800db56:	6031      	streq	r1, [r6, #0]
 800db58:	5162      	str	r2, [r4, r5]
 800db5a:	604b      	str	r3, [r1, #4]
 800db5c:	4638      	mov	r0, r7
 800db5e:	f104 060b 	add.w	r6, r4, #11
 800db62:	f000 f865 	bl	800dc30 <__malloc_unlock>
 800db66:	f026 0607 	bic.w	r6, r6, #7
 800db6a:	1d23      	adds	r3, r4, #4
 800db6c:	1af2      	subs	r2, r6, r3
 800db6e:	d0b6      	beq.n	800dade <_malloc_r+0x22>
 800db70:	1b9b      	subs	r3, r3, r6
 800db72:	50a3      	str	r3, [r4, r2]
 800db74:	e7b3      	b.n	800dade <_malloc_r+0x22>
 800db76:	6862      	ldr	r2, [r4, #4]
 800db78:	42a3      	cmp	r3, r4
 800db7a:	bf0c      	ite	eq
 800db7c:	6032      	streq	r2, [r6, #0]
 800db7e:	605a      	strne	r2, [r3, #4]
 800db80:	e7ec      	b.n	800db5c <_malloc_r+0xa0>
 800db82:	4623      	mov	r3, r4
 800db84:	6864      	ldr	r4, [r4, #4]
 800db86:	e7b2      	b.n	800daee <_malloc_r+0x32>
 800db88:	4634      	mov	r4, r6
 800db8a:	6876      	ldr	r6, [r6, #4]
 800db8c:	e7b9      	b.n	800db02 <_malloc_r+0x46>
 800db8e:	230c      	movs	r3, #12
 800db90:	603b      	str	r3, [r7, #0]
 800db92:	4638      	mov	r0, r7
 800db94:	f000 f84c 	bl	800dc30 <__malloc_unlock>
 800db98:	e7a1      	b.n	800dade <_malloc_r+0x22>
 800db9a:	6025      	str	r5, [r4, #0]
 800db9c:	e7de      	b.n	800db5c <_malloc_r+0xa0>
 800db9e:	bf00      	nop
 800dba0:	240017f8 	.word	0x240017f8

0800dba4 <_realloc_r>:
 800dba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dba8:	4680      	mov	r8, r0
 800dbaa:	4614      	mov	r4, r2
 800dbac:	460e      	mov	r6, r1
 800dbae:	b921      	cbnz	r1, 800dbba <_realloc_r+0x16>
 800dbb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbb4:	4611      	mov	r1, r2
 800dbb6:	f7ff bf81 	b.w	800dabc <_malloc_r>
 800dbba:	b92a      	cbnz	r2, 800dbc8 <_realloc_r+0x24>
 800dbbc:	f000 f83e 	bl	800dc3c <_free_r>
 800dbc0:	4625      	mov	r5, r4
 800dbc2:	4628      	mov	r0, r5
 800dbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbc8:	f000 f884 	bl	800dcd4 <_malloc_usable_size_r>
 800dbcc:	4284      	cmp	r4, r0
 800dbce:	4607      	mov	r7, r0
 800dbd0:	d802      	bhi.n	800dbd8 <_realloc_r+0x34>
 800dbd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dbd6:	d812      	bhi.n	800dbfe <_realloc_r+0x5a>
 800dbd8:	4621      	mov	r1, r4
 800dbda:	4640      	mov	r0, r8
 800dbdc:	f7ff ff6e 	bl	800dabc <_malloc_r>
 800dbe0:	4605      	mov	r5, r0
 800dbe2:	2800      	cmp	r0, #0
 800dbe4:	d0ed      	beq.n	800dbc2 <_realloc_r+0x1e>
 800dbe6:	42bc      	cmp	r4, r7
 800dbe8:	4622      	mov	r2, r4
 800dbea:	4631      	mov	r1, r6
 800dbec:	bf28      	it	cs
 800dbee:	463a      	movcs	r2, r7
 800dbf0:	f7ff fee2 	bl	800d9b8 <memcpy>
 800dbf4:	4631      	mov	r1, r6
 800dbf6:	4640      	mov	r0, r8
 800dbf8:	f000 f820 	bl	800dc3c <_free_r>
 800dbfc:	e7e1      	b.n	800dbc2 <_realloc_r+0x1e>
 800dbfe:	4635      	mov	r5, r6
 800dc00:	e7df      	b.n	800dbc2 <_realloc_r+0x1e>
	...

0800dc04 <_sbrk_r>:
 800dc04:	b538      	push	{r3, r4, r5, lr}
 800dc06:	4d06      	ldr	r5, [pc, #24]	; (800dc20 <_sbrk_r+0x1c>)
 800dc08:	2300      	movs	r3, #0
 800dc0a:	4604      	mov	r4, r0
 800dc0c:	4608      	mov	r0, r1
 800dc0e:	602b      	str	r3, [r5, #0]
 800dc10:	f7f6 fc2c 	bl	800446c <_sbrk>
 800dc14:	1c43      	adds	r3, r0, #1
 800dc16:	d102      	bne.n	800dc1e <_sbrk_r+0x1a>
 800dc18:	682b      	ldr	r3, [r5, #0]
 800dc1a:	b103      	cbz	r3, 800dc1e <_sbrk_r+0x1a>
 800dc1c:	6023      	str	r3, [r4, #0]
 800dc1e:	bd38      	pop	{r3, r4, r5, pc}
 800dc20:	24001800 	.word	0x24001800

0800dc24 <__malloc_lock>:
 800dc24:	4801      	ldr	r0, [pc, #4]	; (800dc2c <__malloc_lock+0x8>)
 800dc26:	f000 b85d 	b.w	800dce4 <__retarget_lock_acquire_recursive>
 800dc2a:	bf00      	nop
 800dc2c:	24001804 	.word	0x24001804

0800dc30 <__malloc_unlock>:
 800dc30:	4801      	ldr	r0, [pc, #4]	; (800dc38 <__malloc_unlock+0x8>)
 800dc32:	f000 b858 	b.w	800dce6 <__retarget_lock_release_recursive>
 800dc36:	bf00      	nop
 800dc38:	24001804 	.word	0x24001804

0800dc3c <_free_r>:
 800dc3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc3e:	2900      	cmp	r1, #0
 800dc40:	d044      	beq.n	800dccc <_free_r+0x90>
 800dc42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc46:	9001      	str	r0, [sp, #4]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	f1a1 0404 	sub.w	r4, r1, #4
 800dc4e:	bfb8      	it	lt
 800dc50:	18e4      	addlt	r4, r4, r3
 800dc52:	f7ff ffe7 	bl	800dc24 <__malloc_lock>
 800dc56:	4a1e      	ldr	r2, [pc, #120]	; (800dcd0 <_free_r+0x94>)
 800dc58:	9801      	ldr	r0, [sp, #4]
 800dc5a:	6813      	ldr	r3, [r2, #0]
 800dc5c:	b933      	cbnz	r3, 800dc6c <_free_r+0x30>
 800dc5e:	6063      	str	r3, [r4, #4]
 800dc60:	6014      	str	r4, [r2, #0]
 800dc62:	b003      	add	sp, #12
 800dc64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc68:	f7ff bfe2 	b.w	800dc30 <__malloc_unlock>
 800dc6c:	42a3      	cmp	r3, r4
 800dc6e:	d908      	bls.n	800dc82 <_free_r+0x46>
 800dc70:	6825      	ldr	r5, [r4, #0]
 800dc72:	1961      	adds	r1, r4, r5
 800dc74:	428b      	cmp	r3, r1
 800dc76:	bf01      	itttt	eq
 800dc78:	6819      	ldreq	r1, [r3, #0]
 800dc7a:	685b      	ldreq	r3, [r3, #4]
 800dc7c:	1949      	addeq	r1, r1, r5
 800dc7e:	6021      	streq	r1, [r4, #0]
 800dc80:	e7ed      	b.n	800dc5e <_free_r+0x22>
 800dc82:	461a      	mov	r2, r3
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	b10b      	cbz	r3, 800dc8c <_free_r+0x50>
 800dc88:	42a3      	cmp	r3, r4
 800dc8a:	d9fa      	bls.n	800dc82 <_free_r+0x46>
 800dc8c:	6811      	ldr	r1, [r2, #0]
 800dc8e:	1855      	adds	r5, r2, r1
 800dc90:	42a5      	cmp	r5, r4
 800dc92:	d10b      	bne.n	800dcac <_free_r+0x70>
 800dc94:	6824      	ldr	r4, [r4, #0]
 800dc96:	4421      	add	r1, r4
 800dc98:	1854      	adds	r4, r2, r1
 800dc9a:	42a3      	cmp	r3, r4
 800dc9c:	6011      	str	r1, [r2, #0]
 800dc9e:	d1e0      	bne.n	800dc62 <_free_r+0x26>
 800dca0:	681c      	ldr	r4, [r3, #0]
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	6053      	str	r3, [r2, #4]
 800dca6:	4421      	add	r1, r4
 800dca8:	6011      	str	r1, [r2, #0]
 800dcaa:	e7da      	b.n	800dc62 <_free_r+0x26>
 800dcac:	d902      	bls.n	800dcb4 <_free_r+0x78>
 800dcae:	230c      	movs	r3, #12
 800dcb0:	6003      	str	r3, [r0, #0]
 800dcb2:	e7d6      	b.n	800dc62 <_free_r+0x26>
 800dcb4:	6825      	ldr	r5, [r4, #0]
 800dcb6:	1961      	adds	r1, r4, r5
 800dcb8:	428b      	cmp	r3, r1
 800dcba:	bf04      	itt	eq
 800dcbc:	6819      	ldreq	r1, [r3, #0]
 800dcbe:	685b      	ldreq	r3, [r3, #4]
 800dcc0:	6063      	str	r3, [r4, #4]
 800dcc2:	bf04      	itt	eq
 800dcc4:	1949      	addeq	r1, r1, r5
 800dcc6:	6021      	streq	r1, [r4, #0]
 800dcc8:	6054      	str	r4, [r2, #4]
 800dcca:	e7ca      	b.n	800dc62 <_free_r+0x26>
 800dccc:	b003      	add	sp, #12
 800dcce:	bd30      	pop	{r4, r5, pc}
 800dcd0:	240017f8 	.word	0x240017f8

0800dcd4 <_malloc_usable_size_r>:
 800dcd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcd8:	1f18      	subs	r0, r3, #4
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	bfbc      	itt	lt
 800dcde:	580b      	ldrlt	r3, [r1, r0]
 800dce0:	18c0      	addlt	r0, r0, r3
 800dce2:	4770      	bx	lr

0800dce4 <__retarget_lock_acquire_recursive>:
 800dce4:	4770      	bx	lr

0800dce6 <__retarget_lock_release_recursive>:
 800dce6:	4770      	bx	lr

0800dce8 <_init>:
 800dce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcea:	bf00      	nop
 800dcec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcee:	bc08      	pop	{r3}
 800dcf0:	469e      	mov	lr, r3
 800dcf2:	4770      	bx	lr

0800dcf4 <_fini>:
 800dcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcf6:	bf00      	nop
 800dcf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcfa:	bc08      	pop	{r3}
 800dcfc:	469e      	mov	lr, r3
 800dcfe:	4770      	bx	lr
