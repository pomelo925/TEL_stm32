
TEL_STM_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e8c  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c50  08011160  08011160  00021160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012db0  08012db0  00022db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000014  08012db8  08012db8  00022db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012dcc  08012dcc  00022dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  08012dd0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001aa0  24000080  08012e4c  00030080  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001b20  08012e4c  00031b20  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000306b0  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005086  00000000  00000000  0006075a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016b0  00000000  00000000  000657e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001518  00000000  00000000  00066e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036e18  00000000  00000000  000683a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021839  00000000  00000000  0009f1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001549fe  00000000  00000000  000c09f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002153f7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000066ec  00000000  00000000  00215448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000080 	.word	0x24000080
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08011144 	.word	0x08011144

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000084 	.word	0x24000084
 800030c:	08011144 	.word	0x08011144

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_drsub>:
 8000320:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000324:	e002      	b.n	800032c <__adddf3>
 8000326:	bf00      	nop

08000328 <__aeabi_dsub>:
 8000328:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800032c <__adddf3>:
 800032c:	b530      	push	{r4, r5, lr}
 800032e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000332:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000336:	ea94 0f05 	teq	r4, r5
 800033a:	bf08      	it	eq
 800033c:	ea90 0f02 	teqeq	r0, r2
 8000340:	bf1f      	itttt	ne
 8000342:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000346:	ea55 0c02 	orrsne.w	ip, r5, r2
 800034a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800034e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000352:	f000 80e2 	beq.w	800051a <__adddf3+0x1ee>
 8000356:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800035a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800035e:	bfb8      	it	lt
 8000360:	426d      	neglt	r5, r5
 8000362:	dd0c      	ble.n	800037e <__adddf3+0x52>
 8000364:	442c      	add	r4, r5
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	ea82 0000 	eor.w	r0, r2, r0
 8000372:	ea83 0101 	eor.w	r1, r3, r1
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	2d36      	cmp	r5, #54	; 0x36
 8000380:	bf88      	it	hi
 8000382:	bd30      	pophi	{r4, r5, pc}
 8000384:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000388:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800038c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000390:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000394:	d002      	beq.n	800039c <__adddf3+0x70>
 8000396:	4240      	negs	r0, r0
 8000398:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800039c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003a8:	d002      	beq.n	80003b0 <__adddf3+0x84>
 80003aa:	4252      	negs	r2, r2
 80003ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003b0:	ea94 0f05 	teq	r4, r5
 80003b4:	f000 80a7 	beq.w	8000506 <__adddf3+0x1da>
 80003b8:	f1a4 0401 	sub.w	r4, r4, #1
 80003bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003c0:	db0d      	blt.n	80003de <__adddf3+0xb2>
 80003c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003c6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ca:	1880      	adds	r0, r0, r2
 80003cc:	f141 0100 	adc.w	r1, r1, #0
 80003d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003d4:	1880      	adds	r0, r0, r2
 80003d6:	fa43 f305 	asr.w	r3, r3, r5
 80003da:	4159      	adcs	r1, r3
 80003dc:	e00e      	b.n	80003fc <__adddf3+0xd0>
 80003de:	f1a5 0520 	sub.w	r5, r5, #32
 80003e2:	f10e 0e20 	add.w	lr, lr, #32
 80003e6:	2a01      	cmp	r2, #1
 80003e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ec:	bf28      	it	cs
 80003ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003f2:	fa43 f305 	asr.w	r3, r3, r5
 80003f6:	18c0      	adds	r0, r0, r3
 80003f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000400:	d507      	bpl.n	8000412 <__adddf3+0xe6>
 8000402:	f04f 0e00 	mov.w	lr, #0
 8000406:	f1dc 0c00 	rsbs	ip, ip, #0
 800040a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800040e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000412:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000416:	d31b      	bcc.n	8000450 <__adddf3+0x124>
 8000418:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800041c:	d30c      	bcc.n	8000438 <__adddf3+0x10c>
 800041e:	0849      	lsrs	r1, r1, #1
 8000420:	ea5f 0030 	movs.w	r0, r0, rrx
 8000424:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000428:	f104 0401 	add.w	r4, r4, #1
 800042c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000430:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000434:	f080 809a 	bcs.w	800056c <__adddf3+0x240>
 8000438:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800043c:	bf08      	it	eq
 800043e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000442:	f150 0000 	adcs.w	r0, r0, #0
 8000446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800044a:	ea41 0105 	orr.w	r1, r1, r5
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000454:	4140      	adcs	r0, r0
 8000456:	eb41 0101 	adc.w	r1, r1, r1
 800045a:	3c01      	subs	r4, #1
 800045c:	bf28      	it	cs
 800045e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000462:	d2e9      	bcs.n	8000438 <__adddf3+0x10c>
 8000464:	f091 0f00 	teq	r1, #0
 8000468:	bf04      	itt	eq
 800046a:	4601      	moveq	r1, r0
 800046c:	2000      	moveq	r0, #0
 800046e:	fab1 f381 	clz	r3, r1
 8000472:	bf08      	it	eq
 8000474:	3320      	addeq	r3, #32
 8000476:	f1a3 030b 	sub.w	r3, r3, #11
 800047a:	f1b3 0220 	subs.w	r2, r3, #32
 800047e:	da0c      	bge.n	800049a <__adddf3+0x16e>
 8000480:	320c      	adds	r2, #12
 8000482:	dd08      	ble.n	8000496 <__adddf3+0x16a>
 8000484:	f102 0c14 	add.w	ip, r2, #20
 8000488:	f1c2 020c 	rsb	r2, r2, #12
 800048c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000490:	fa21 f102 	lsr.w	r1, r1, r2
 8000494:	e00c      	b.n	80004b0 <__adddf3+0x184>
 8000496:	f102 0214 	add.w	r2, r2, #20
 800049a:	bfd8      	it	le
 800049c:	f1c2 0c20 	rsble	ip, r2, #32
 80004a0:	fa01 f102 	lsl.w	r1, r1, r2
 80004a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004a8:	bfdc      	itt	le
 80004aa:	ea41 010c 	orrle.w	r1, r1, ip
 80004ae:	4090      	lslle	r0, r2
 80004b0:	1ae4      	subs	r4, r4, r3
 80004b2:	bfa2      	ittt	ge
 80004b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004b8:	4329      	orrge	r1, r5
 80004ba:	bd30      	popge	{r4, r5, pc}
 80004bc:	ea6f 0404 	mvn.w	r4, r4
 80004c0:	3c1f      	subs	r4, #31
 80004c2:	da1c      	bge.n	80004fe <__adddf3+0x1d2>
 80004c4:	340c      	adds	r4, #12
 80004c6:	dc0e      	bgt.n	80004e6 <__adddf3+0x1ba>
 80004c8:	f104 0414 	add.w	r4, r4, #20
 80004cc:	f1c4 0220 	rsb	r2, r4, #32
 80004d0:	fa20 f004 	lsr.w	r0, r0, r4
 80004d4:	fa01 f302 	lsl.w	r3, r1, r2
 80004d8:	ea40 0003 	orr.w	r0, r0, r3
 80004dc:	fa21 f304 	lsr.w	r3, r1, r4
 80004e0:	ea45 0103 	orr.w	r1, r5, r3
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f1c4 040c 	rsb	r4, r4, #12
 80004ea:	f1c4 0220 	rsb	r2, r4, #32
 80004ee:	fa20 f002 	lsr.w	r0, r0, r2
 80004f2:	fa01 f304 	lsl.w	r3, r1, r4
 80004f6:	ea40 0003 	orr.w	r0, r0, r3
 80004fa:	4629      	mov	r1, r5
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000502:	4629      	mov	r1, r5
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f094 0f00 	teq	r4, #0
 800050a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800050e:	bf06      	itte	eq
 8000510:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000514:	3401      	addeq	r4, #1
 8000516:	3d01      	subne	r5, #1
 8000518:	e74e      	b.n	80003b8 <__adddf3+0x8c>
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf18      	it	ne
 8000520:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000524:	d029      	beq.n	800057a <__adddf3+0x24e>
 8000526:	ea94 0f05 	teq	r4, r5
 800052a:	bf08      	it	eq
 800052c:	ea90 0f02 	teqeq	r0, r2
 8000530:	d005      	beq.n	800053e <__adddf3+0x212>
 8000532:	ea54 0c00 	orrs.w	ip, r4, r0
 8000536:	bf04      	itt	eq
 8000538:	4619      	moveq	r1, r3
 800053a:	4610      	moveq	r0, r2
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea91 0f03 	teq	r1, r3
 8000542:	bf1e      	ittt	ne
 8000544:	2100      	movne	r1, #0
 8000546:	2000      	movne	r0, #0
 8000548:	bd30      	popne	{r4, r5, pc}
 800054a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800054e:	d105      	bne.n	800055c <__adddf3+0x230>
 8000550:	0040      	lsls	r0, r0, #1
 8000552:	4149      	adcs	r1, r1
 8000554:	bf28      	it	cs
 8000556:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000560:	bf3c      	itt	cc
 8000562:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000566:	bd30      	popcc	{r4, r5, pc}
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000570:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf1a      	itte	ne
 8000580:	4619      	movne	r1, r3
 8000582:	4610      	movne	r0, r2
 8000584:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000588:	bf1c      	itt	ne
 800058a:	460b      	movne	r3, r1
 800058c:	4602      	movne	r2, r0
 800058e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000592:	bf06      	itte	eq
 8000594:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000598:	ea91 0f03 	teqeq	r1, r3
 800059c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	bf00      	nop

080005a4 <__aeabi_ui2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f04f 0500 	mov.w	r5, #0
 80005bc:	f04f 0100 	mov.w	r1, #0
 80005c0:	e750      	b.n	8000464 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_i2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005dc:	bf48      	it	mi
 80005de:	4240      	negmi	r0, r0
 80005e0:	f04f 0100 	mov.w	r1, #0
 80005e4:	e73e      	b.n	8000464 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_f2d>:
 80005e8:	0042      	lsls	r2, r0, #1
 80005ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80005f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005f6:	bf1f      	itttt	ne
 80005f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000600:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000604:	4770      	bxne	lr
 8000606:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800060a:	bf08      	it	eq
 800060c:	4770      	bxeq	lr
 800060e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000612:	bf04      	itt	eq
 8000614:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000618:	4770      	bxeq	lr
 800061a:	b530      	push	{r4, r5, lr}
 800061c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000620:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	e71c      	b.n	8000464 <__adddf3+0x138>
 800062a:	bf00      	nop

0800062c <__aeabi_ul2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	e00a      	b.n	8000652 <__aeabi_l2d+0x16>

0800063c <__aeabi_l2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800064a:	d502      	bpl.n	8000652 <__aeabi_l2d+0x16>
 800064c:	4240      	negs	r0, r0
 800064e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000652:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000656:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800065e:	f43f aed8 	beq.w	8000412 <__adddf3+0xe6>
 8000662:	f04f 0203 	mov.w	r2, #3
 8000666:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800066a:	bf18      	it	ne
 800066c:	3203      	addne	r2, #3
 800066e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000672:	bf18      	it	ne
 8000674:	3203      	addne	r2, #3
 8000676:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800067a:	f1c2 0320 	rsb	r3, r2, #32
 800067e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000682:	fa20 f002 	lsr.w	r0, r0, r2
 8000686:	fa01 fe03 	lsl.w	lr, r1, r3
 800068a:	ea40 000e 	orr.w	r0, r0, lr
 800068e:	fa21 f102 	lsr.w	r1, r1, r2
 8000692:	4414      	add	r4, r2
 8000694:	e6bd      	b.n	8000412 <__adddf3+0xe6>
 8000696:	bf00      	nop

08000698 <__aeabi_uldivmod>:
 8000698:	b953      	cbnz	r3, 80006b0 <__aeabi_uldivmod+0x18>
 800069a:	b94a      	cbnz	r2, 80006b0 <__aeabi_uldivmod+0x18>
 800069c:	2900      	cmp	r1, #0
 800069e:	bf08      	it	eq
 80006a0:	2800      	cmpeq	r0, #0
 80006a2:	bf1c      	itt	ne
 80006a4:	f04f 31ff 	movne.w	r1, #4294967295
 80006a8:	f04f 30ff 	movne.w	r0, #4294967295
 80006ac:	f000 b974 	b.w	8000998 <__aeabi_idiv0>
 80006b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b8:	f000 f806 	bl	80006c8 <__udivmoddi4>
 80006bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c4:	b004      	add	sp, #16
 80006c6:	4770      	bx	lr

080006c8 <__udivmoddi4>:
 80006c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006cc:	9d08      	ldr	r5, [sp, #32]
 80006ce:	4604      	mov	r4, r0
 80006d0:	468e      	mov	lr, r1
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d14d      	bne.n	8000772 <__udivmoddi4+0xaa>
 80006d6:	428a      	cmp	r2, r1
 80006d8:	4694      	mov	ip, r2
 80006da:	d969      	bls.n	80007b0 <__udivmoddi4+0xe8>
 80006dc:	fab2 f282 	clz	r2, r2
 80006e0:	b152      	cbz	r2, 80006f8 <__udivmoddi4+0x30>
 80006e2:	fa01 f302 	lsl.w	r3, r1, r2
 80006e6:	f1c2 0120 	rsb	r1, r2, #32
 80006ea:	fa20 f101 	lsr.w	r1, r0, r1
 80006ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80006f2:	ea41 0e03 	orr.w	lr, r1, r3
 80006f6:	4094      	lsls	r4, r2
 80006f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006fc:	0c21      	lsrs	r1, r4, #16
 80006fe:	fbbe f6f8 	udiv	r6, lr, r8
 8000702:	fa1f f78c 	uxth.w	r7, ip
 8000706:	fb08 e316 	mls	r3, r8, r6, lr
 800070a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800070e:	fb06 f107 	mul.w	r1, r6, r7
 8000712:	4299      	cmp	r1, r3
 8000714:	d90a      	bls.n	800072c <__udivmoddi4+0x64>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f106 30ff 	add.w	r0, r6, #4294967295
 800071e:	f080 811f 	bcs.w	8000960 <__udivmoddi4+0x298>
 8000722:	4299      	cmp	r1, r3
 8000724:	f240 811c 	bls.w	8000960 <__udivmoddi4+0x298>
 8000728:	3e02      	subs	r6, #2
 800072a:	4463      	add	r3, ip
 800072c:	1a5b      	subs	r3, r3, r1
 800072e:	b2a4      	uxth	r4, r4
 8000730:	fbb3 f0f8 	udiv	r0, r3, r8
 8000734:	fb08 3310 	mls	r3, r8, r0, r3
 8000738:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800073c:	fb00 f707 	mul.w	r7, r0, r7
 8000740:	42a7      	cmp	r7, r4
 8000742:	d90a      	bls.n	800075a <__udivmoddi4+0x92>
 8000744:	eb1c 0404 	adds.w	r4, ip, r4
 8000748:	f100 33ff 	add.w	r3, r0, #4294967295
 800074c:	f080 810a 	bcs.w	8000964 <__udivmoddi4+0x29c>
 8000750:	42a7      	cmp	r7, r4
 8000752:	f240 8107 	bls.w	8000964 <__udivmoddi4+0x29c>
 8000756:	4464      	add	r4, ip
 8000758:	3802      	subs	r0, #2
 800075a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800075e:	1be4      	subs	r4, r4, r7
 8000760:	2600      	movs	r6, #0
 8000762:	b11d      	cbz	r5, 800076c <__udivmoddi4+0xa4>
 8000764:	40d4      	lsrs	r4, r2
 8000766:	2300      	movs	r3, #0
 8000768:	e9c5 4300 	strd	r4, r3, [r5]
 800076c:	4631      	mov	r1, r6
 800076e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000772:	428b      	cmp	r3, r1
 8000774:	d909      	bls.n	800078a <__udivmoddi4+0xc2>
 8000776:	2d00      	cmp	r5, #0
 8000778:	f000 80ef 	beq.w	800095a <__udivmoddi4+0x292>
 800077c:	2600      	movs	r6, #0
 800077e:	e9c5 0100 	strd	r0, r1, [r5]
 8000782:	4630      	mov	r0, r6
 8000784:	4631      	mov	r1, r6
 8000786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800078a:	fab3 f683 	clz	r6, r3
 800078e:	2e00      	cmp	r6, #0
 8000790:	d14a      	bne.n	8000828 <__udivmoddi4+0x160>
 8000792:	428b      	cmp	r3, r1
 8000794:	d302      	bcc.n	800079c <__udivmoddi4+0xd4>
 8000796:	4282      	cmp	r2, r0
 8000798:	f200 80f9 	bhi.w	800098e <__udivmoddi4+0x2c6>
 800079c:	1a84      	subs	r4, r0, r2
 800079e:	eb61 0303 	sbc.w	r3, r1, r3
 80007a2:	2001      	movs	r0, #1
 80007a4:	469e      	mov	lr, r3
 80007a6:	2d00      	cmp	r5, #0
 80007a8:	d0e0      	beq.n	800076c <__udivmoddi4+0xa4>
 80007aa:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ae:	e7dd      	b.n	800076c <__udivmoddi4+0xa4>
 80007b0:	b902      	cbnz	r2, 80007b4 <__udivmoddi4+0xec>
 80007b2:	deff      	udf	#255	; 0xff
 80007b4:	fab2 f282 	clz	r2, r2
 80007b8:	2a00      	cmp	r2, #0
 80007ba:	f040 8092 	bne.w	80008e2 <__udivmoddi4+0x21a>
 80007be:	eba1 010c 	sub.w	r1, r1, ip
 80007c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007c6:	fa1f fe8c 	uxth.w	lr, ip
 80007ca:	2601      	movs	r6, #1
 80007cc:	0c20      	lsrs	r0, r4, #16
 80007ce:	fbb1 f3f7 	udiv	r3, r1, r7
 80007d2:	fb07 1113 	mls	r1, r7, r3, r1
 80007d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007da:	fb0e f003 	mul.w	r0, lr, r3
 80007de:	4288      	cmp	r0, r1
 80007e0:	d908      	bls.n	80007f4 <__udivmoddi4+0x12c>
 80007e2:	eb1c 0101 	adds.w	r1, ip, r1
 80007e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80007ea:	d202      	bcs.n	80007f2 <__udivmoddi4+0x12a>
 80007ec:	4288      	cmp	r0, r1
 80007ee:	f200 80cb 	bhi.w	8000988 <__udivmoddi4+0x2c0>
 80007f2:	4643      	mov	r3, r8
 80007f4:	1a09      	subs	r1, r1, r0
 80007f6:	b2a4      	uxth	r4, r4
 80007f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007fc:	fb07 1110 	mls	r1, r7, r0, r1
 8000800:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000804:	fb0e fe00 	mul.w	lr, lr, r0
 8000808:	45a6      	cmp	lr, r4
 800080a:	d908      	bls.n	800081e <__udivmoddi4+0x156>
 800080c:	eb1c 0404 	adds.w	r4, ip, r4
 8000810:	f100 31ff 	add.w	r1, r0, #4294967295
 8000814:	d202      	bcs.n	800081c <__udivmoddi4+0x154>
 8000816:	45a6      	cmp	lr, r4
 8000818:	f200 80bb 	bhi.w	8000992 <__udivmoddi4+0x2ca>
 800081c:	4608      	mov	r0, r1
 800081e:	eba4 040e 	sub.w	r4, r4, lr
 8000822:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000826:	e79c      	b.n	8000762 <__udivmoddi4+0x9a>
 8000828:	f1c6 0720 	rsb	r7, r6, #32
 800082c:	40b3      	lsls	r3, r6
 800082e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000832:	ea4c 0c03 	orr.w	ip, ip, r3
 8000836:	fa20 f407 	lsr.w	r4, r0, r7
 800083a:	fa01 f306 	lsl.w	r3, r1, r6
 800083e:	431c      	orrs	r4, r3
 8000840:	40f9      	lsrs	r1, r7
 8000842:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000846:	fa00 f306 	lsl.w	r3, r0, r6
 800084a:	fbb1 f8f9 	udiv	r8, r1, r9
 800084e:	0c20      	lsrs	r0, r4, #16
 8000850:	fa1f fe8c 	uxth.w	lr, ip
 8000854:	fb09 1118 	mls	r1, r9, r8, r1
 8000858:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800085c:	fb08 f00e 	mul.w	r0, r8, lr
 8000860:	4288      	cmp	r0, r1
 8000862:	fa02 f206 	lsl.w	r2, r2, r6
 8000866:	d90b      	bls.n	8000880 <__udivmoddi4+0x1b8>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000870:	f080 8088 	bcs.w	8000984 <__udivmoddi4+0x2bc>
 8000874:	4288      	cmp	r0, r1
 8000876:	f240 8085 	bls.w	8000984 <__udivmoddi4+0x2bc>
 800087a:	f1a8 0802 	sub.w	r8, r8, #2
 800087e:	4461      	add	r1, ip
 8000880:	1a09      	subs	r1, r1, r0
 8000882:	b2a4      	uxth	r4, r4
 8000884:	fbb1 f0f9 	udiv	r0, r1, r9
 8000888:	fb09 1110 	mls	r1, r9, r0, r1
 800088c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000890:	fb00 fe0e 	mul.w	lr, r0, lr
 8000894:	458e      	cmp	lr, r1
 8000896:	d908      	bls.n	80008aa <__udivmoddi4+0x1e2>
 8000898:	eb1c 0101 	adds.w	r1, ip, r1
 800089c:	f100 34ff 	add.w	r4, r0, #4294967295
 80008a0:	d26c      	bcs.n	800097c <__udivmoddi4+0x2b4>
 80008a2:	458e      	cmp	lr, r1
 80008a4:	d96a      	bls.n	800097c <__udivmoddi4+0x2b4>
 80008a6:	3802      	subs	r0, #2
 80008a8:	4461      	add	r1, ip
 80008aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ae:	fba0 9402 	umull	r9, r4, r0, r2
 80008b2:	eba1 010e 	sub.w	r1, r1, lr
 80008b6:	42a1      	cmp	r1, r4
 80008b8:	46c8      	mov	r8, r9
 80008ba:	46a6      	mov	lr, r4
 80008bc:	d356      	bcc.n	800096c <__udivmoddi4+0x2a4>
 80008be:	d053      	beq.n	8000968 <__udivmoddi4+0x2a0>
 80008c0:	b15d      	cbz	r5, 80008da <__udivmoddi4+0x212>
 80008c2:	ebb3 0208 	subs.w	r2, r3, r8
 80008c6:	eb61 010e 	sbc.w	r1, r1, lr
 80008ca:	fa01 f707 	lsl.w	r7, r1, r7
 80008ce:	fa22 f306 	lsr.w	r3, r2, r6
 80008d2:	40f1      	lsrs	r1, r6
 80008d4:	431f      	orrs	r7, r3
 80008d6:	e9c5 7100 	strd	r7, r1, [r5]
 80008da:	2600      	movs	r6, #0
 80008dc:	4631      	mov	r1, r6
 80008de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e2:	f1c2 0320 	rsb	r3, r2, #32
 80008e6:	40d8      	lsrs	r0, r3
 80008e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ec:	fa21 f303 	lsr.w	r3, r1, r3
 80008f0:	4091      	lsls	r1, r2
 80008f2:	4301      	orrs	r1, r0
 80008f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008f8:	fa1f fe8c 	uxth.w	lr, ip
 80008fc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000900:	fb07 3610 	mls	r6, r7, r0, r3
 8000904:	0c0b      	lsrs	r3, r1, #16
 8000906:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800090a:	fb00 f60e 	mul.w	r6, r0, lr
 800090e:	429e      	cmp	r6, r3
 8000910:	fa04 f402 	lsl.w	r4, r4, r2
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x260>
 8000916:	eb1c 0303 	adds.w	r3, ip, r3
 800091a:	f100 38ff 	add.w	r8, r0, #4294967295
 800091e:	d22f      	bcs.n	8000980 <__udivmoddi4+0x2b8>
 8000920:	429e      	cmp	r6, r3
 8000922:	d92d      	bls.n	8000980 <__udivmoddi4+0x2b8>
 8000924:	3802      	subs	r0, #2
 8000926:	4463      	add	r3, ip
 8000928:	1b9b      	subs	r3, r3, r6
 800092a:	b289      	uxth	r1, r1
 800092c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000930:	fb07 3316 	mls	r3, r7, r6, r3
 8000934:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000938:	fb06 f30e 	mul.w	r3, r6, lr
 800093c:	428b      	cmp	r3, r1
 800093e:	d908      	bls.n	8000952 <__udivmoddi4+0x28a>
 8000940:	eb1c 0101 	adds.w	r1, ip, r1
 8000944:	f106 38ff 	add.w	r8, r6, #4294967295
 8000948:	d216      	bcs.n	8000978 <__udivmoddi4+0x2b0>
 800094a:	428b      	cmp	r3, r1
 800094c:	d914      	bls.n	8000978 <__udivmoddi4+0x2b0>
 800094e:	3e02      	subs	r6, #2
 8000950:	4461      	add	r1, ip
 8000952:	1ac9      	subs	r1, r1, r3
 8000954:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000958:	e738      	b.n	80007cc <__udivmoddi4+0x104>
 800095a:	462e      	mov	r6, r5
 800095c:	4628      	mov	r0, r5
 800095e:	e705      	b.n	800076c <__udivmoddi4+0xa4>
 8000960:	4606      	mov	r6, r0
 8000962:	e6e3      	b.n	800072c <__udivmoddi4+0x64>
 8000964:	4618      	mov	r0, r3
 8000966:	e6f8      	b.n	800075a <__udivmoddi4+0x92>
 8000968:	454b      	cmp	r3, r9
 800096a:	d2a9      	bcs.n	80008c0 <__udivmoddi4+0x1f8>
 800096c:	ebb9 0802 	subs.w	r8, r9, r2
 8000970:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000974:	3801      	subs	r0, #1
 8000976:	e7a3      	b.n	80008c0 <__udivmoddi4+0x1f8>
 8000978:	4646      	mov	r6, r8
 800097a:	e7ea      	b.n	8000952 <__udivmoddi4+0x28a>
 800097c:	4620      	mov	r0, r4
 800097e:	e794      	b.n	80008aa <__udivmoddi4+0x1e2>
 8000980:	4640      	mov	r0, r8
 8000982:	e7d1      	b.n	8000928 <__udivmoddi4+0x260>
 8000984:	46d0      	mov	r8, sl
 8000986:	e77b      	b.n	8000880 <__udivmoddi4+0x1b8>
 8000988:	3b02      	subs	r3, #2
 800098a:	4461      	add	r1, ip
 800098c:	e732      	b.n	80007f4 <__udivmoddi4+0x12c>
 800098e:	4630      	mov	r0, r6
 8000990:	e709      	b.n	80007a6 <__udivmoddi4+0xde>
 8000992:	4464      	add	r4, ip
 8000994:	3802      	subs	r0, #2
 8000996:	e742      	b.n	800081e <__udivmoddi4+0x156>

08000998 <__aeabi_idiv0>:
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <_ZN3ros16normalizeSecNSecERmS0_>:
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	0a5a      	lsrs	r2, r3, #9
 80009ac:	490f      	ldr	r1, [pc, #60]	; (80009ec <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80009ae:	fba1 1202 	umull	r1, r2, r1, r2
 80009b2:	09d2      	lsrs	r2, r2, #7
 80009b4:	490e      	ldr	r1, [pc, #56]	; (80009f0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80009b6:	fb01 f202 	mul.w	r2, r1, r2
 80009ba:	1a9b      	subs	r3, r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	0a5b      	lsrs	r3, r3, #9
 80009c4:	4a09      	ldr	r2, [pc, #36]	; (80009ec <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80009c6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ca:	09db      	lsrs	r3, r3, #7
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	441a      	add	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	68fa      	ldr	r2, [r7, #12]
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	00044b83 	.word	0x00044b83
 80009f0:	3b9aca00 	.word	0x3b9aca00

080009f4 <_Z13DC_motor_initv>:
//DC_motor fl(5.5, 85, 0, 0.001, 43193, 200);
//DC_motor br(148.3, 2813.3, 0.537, 0.001, 26734, 200);
//DC_motor bl(0, 0, 0, 0.001, 41296, 200);


void DC_motor_init(){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 80009f8:	2100      	movs	r1, #0
 80009fa:	4822      	ldr	r0, [pc, #136]	; (8000a84 <_Z13DC_motor_initv+0x90>)
 80009fc:	f00c f9a8 	bl	800cd50 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8000a00:	2104      	movs	r1, #4
 8000a02:	4820      	ldr	r0, [pc, #128]	; (8000a84 <_Z13DC_motor_initv+0x90>)
 8000a04:	f00c f9a4 	bl	800cd50 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	481f      	ldr	r0, [pc, #124]	; (8000a88 <_Z13DC_motor_initv+0x94>)
 8000a0c:	f00c f9a0 	bl	800cd50 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 8000a10:	2104      	movs	r1, #4
 8000a12:	481d      	ldr	r0, [pc, #116]	; (8000a88 <_Z13DC_motor_initv+0x94>)
 8000a14:	f00c f99c 	bl	800cd50 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8000a18:	2100      	movs	r1, #0
 8000a1a:	481c      	ldr	r0, [pc, #112]	; (8000a8c <_Z13DC_motor_initv+0x98>)
 8000a1c:	f00c f998 	bl	800cd50 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8000a20:	2104      	movs	r1, #4
 8000a22:	481a      	ldr	r0, [pc, #104]	; (8000a8c <_Z13DC_motor_initv+0x98>)
 8000a24:	f00c f994 	bl	800cd50 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4819      	ldr	r0, [pc, #100]	; (8000a90 <_Z13DC_motor_initv+0x9c>)
 8000a2c:	f00c f990 	bl	800cd50 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8000a30:	2104      	movs	r1, #4
 8000a32:	4817      	ldr	r0, [pc, #92]	; (8000a90 <_Z13DC_motor_initv+0x9c>)
 8000a34:	f00c f98c 	bl	800cd50 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_2);
 8000a38:	2104      	movs	r1, #4
 8000a3a:	4816      	ldr	r0, [pc, #88]	; (8000a94 <_Z13DC_motor_initv+0xa0>)
 8000a3c:	f00b ff7a 	bl	800c934 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 8000a40:	2100      	movs	r1, #0
 8000a42:	4814      	ldr	r0, [pc, #80]	; (8000a94 <_Z13DC_motor_initv+0xa0>)
 8000a44:	f00b ff76 	bl	800c934 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_2);
 8000a48:	2104      	movs	r1, #4
 8000a4a:	4813      	ldr	r0, [pc, #76]	; (8000a98 <_Z13DC_motor_initv+0xa4>)
 8000a4c:	f00b ff72 	bl	800c934 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 8000a50:	2100      	movs	r1, #0
 8000a52:	4811      	ldr	r0, [pc, #68]	; (8000a98 <_Z13DC_motor_initv+0xa4>)
 8000a54:	f00b ff6e 	bl	800c934 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start(&htim23, TIM_CHANNEL_1);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4810      	ldr	r0, [pc, #64]	; (8000a9c <_Z13DC_motor_initv+0xa8>)
 8000a5c:	f00b fe4e 	bl	800c6fc <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim7);
 8000a60:	480f      	ldr	r0, [pc, #60]	; (8000aa0 <_Z13DC_motor_initv+0xac>)
 8000a62:	f00b fd6d 	bl	800c540 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 8000a66:	480f      	ldr	r0, [pc, #60]	; (8000aa4 <_Z13DC_motor_initv+0xb0>)
 8000a68:	f00b fd6a 	bl	800c540 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8000a6c:	480e      	ldr	r0, [pc, #56]	; (8000aa8 <_Z13DC_motor_initv+0xb4>)
 8000a6e:	f00b fd67 	bl	800c540 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <_Z13DC_motor_initv+0xb8>)
 8000a74:	f00b fd64 	bl	800c540 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim23);
 8000a78:	4808      	ldr	r0, [pc, #32]	; (8000a9c <_Z13DC_motor_initv+0xa8>)
 8000a7a:	f00b fd61 	bl	800c540 <HAL_TIM_Base_Start_IT>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	24000280 	.word	0x24000280
 8000a88:	24000364 	.word	0x24000364
 8000a8c:	240002cc 	.word	0x240002cc
 8000a90:	24000318 	.word	0x24000318
 8000a94:	24000448 	.word	0x24000448
 8000a98:	2400052c 	.word	0x2400052c
 8000a9c:	24000578 	.word	0x24000578
 8000aa0:	240003b0 	.word	0x240003b0
 8000aa4:	240003fc 	.word	0x240003fc
 8000aa8:	24000494 	.word	0x24000494
 8000aac:	240004e0 	.word	0x240004e0

08000ab0 <_ZN8DC_motorC1Edddddd>:

DC_motor::DC_motor(double p, double i, double d, double time, double res, double ratio){
 8000ab0:	b480      	push	{r7}
 8000ab2:	b08f      	sub	sp, #60	; 0x3c
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6378      	str	r0, [r7, #52]	; 0x34
 8000ab8:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8000abc:	ed87 1b08 	vstr	d1, [r7, #32]
 8000ac0:	ed87 2b06 	vstr	d2, [r7, #24]
 8000ac4:	ed87 3b04 	vstr	d3, [r7, #16]
 8000ac8:	ed87 4b02 	vstr	d4, [r7, #8]
 8000acc:	ed87 5b00 	vstr	d5, [r7]
	this->kp = p;
 8000ad0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ad2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000ad6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	this->ki = i;
 8000ada:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000adc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ae0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	this->kd = d;
 8000ae4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ae6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000aea:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	this->time = time;
 8000aee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000af0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000af4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	this->res_encoder = res;
 8000af8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000afa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000afe:	e9c1 2300 	strd	r2, r3, [r1]
	this->sr_ratio = ratio;
 8000b02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b08:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8000b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b0e:	4618      	mov	r0, r3
 8000b10:	373c      	adds	r7, #60	; 0x3c
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_ZN8DC_motor10PIDControlEv>:
//	if(PID<-1) PID=-1;
//
//	return rps_now;
//}

void DC_motor::PIDControl(void){
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
	rps_now = (double) CountNow / 4 / res_encoder / sr_ratio / time;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8000b28:	ee07 3a90 	vmov	s15, r3
 8000b2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b30:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000b34:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	ed93 7b00 	vldr	d7, [r3]
 8000b3e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	ed93 7b02 	vldr	d7, [r3, #8]
 8000b48:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 8000b52:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	error = rps_goal - rps_now;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000b68:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	ed83 7b04 	vstr	d7, [r3, #16]
	error_total += error;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	ed93 6b06 	vldr	d6, [r3, #24]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	ed93 7b04 	vldr	d7, [r3, #16]
 8000b7e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	ed83 7b06 	vstr	d7, [r3, #24]
	PWM = error*kp + error_total*ki + error_last*kd;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	ed93 6b04 	vldr	d6, [r3, #16]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8000b94:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	ed93 5b06 	vldr	d5, [r3, #24]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000ba4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000ba8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	ed93 5b08 	vldr	d5, [r3, #32]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8000bb8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000bbc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	error_last = error;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <_Z41__static_initialization_and_destruction_0ii>:
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d140      	bne.n	8000c72 <_Z41__static_initialization_and_destruction_0ii+0x92>
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d13b      	bne.n	8000c72 <_Z41__static_initialization_and_destruction_0ii+0x92>
DC_motor fr(2700,0.5,0, 0.001,512,20.8);
 8000bfa:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000c80 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000bfe:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8000c88 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000c02:	ed9f 3b23 	vldr	d3, [pc, #140]	; 8000c90 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000c06:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8000c98 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000c0a:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8000c0e:	ed9f 0b24 	vldr	d0, [pc, #144]	; 8000ca0 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000c12:	482f      	ldr	r0, [pc, #188]	; (8000cd0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8000c14:	f7ff ff4c 	bl	8000ab0 <_ZN8DC_motorC1Edddddd>
DC_motor fl(1700,0.5,0, 0.001,512,20.8);
 8000c18:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000c80 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000c1c:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 8000c88 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000c20:	ed9f 3b1b 	vldr	d3, [pc, #108]	; 8000c90 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000c24:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 8000c98 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000c28:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8000c2c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8000ca8 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000c30:	4828      	ldr	r0, [pc, #160]	; (8000cd4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8000c32:	f7ff ff3d 	bl	8000ab0 <_ZN8DC_motorC1Edddddd>
DC_motor br(3800,0.6,0.002, 0.001,512,20.8);
 8000c36:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8000c80 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000c3a:	ed9f 4b13 	vldr	d4, [pc, #76]	; 8000c88 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000c3e:	ed9f 3b14 	vldr	d3, [pc, #80]	; 8000c90 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000c42:	ed9f 2b1b 	vldr	d2, [pc, #108]	; 8000cb0 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8000c46:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8000cb8 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 8000c4a:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8000cc0 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 8000c4e:	4822      	ldr	r0, [pc, #136]	; (8000cd8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8000c50:	f7ff ff2e 	bl	8000ab0 <_ZN8DC_motorC1Edddddd>
DC_motor bl(3200,0.5,0, 0.001,512,20.8);
 8000c54:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000c80 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000c58:	ed9f 4b0b 	vldr	d4, [pc, #44]	; 8000c88 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000c5c:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 8000c90 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000c60:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8000c98 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000c64:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8000c68:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8000cc8 <_Z41__static_initialization_and_destruction_0ii+0xe8>
 8000c6c:	481b      	ldr	r0, [pc, #108]	; (8000cdc <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8000c6e:	f7ff ff1f 	bl	8000ab0 <_ZN8DC_motorC1Edddddd>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	f3af 8000 	nop.w
 8000c80:	cccccccd 	.word	0xcccccccd
 8000c84:	4034cccc 	.word	0x4034cccc
 8000c88:	00000000 	.word	0x00000000
 8000c8c:	40800000 	.word	0x40800000
 8000c90:	d2f1a9fc 	.word	0xd2f1a9fc
 8000c94:	3f50624d 	.word	0x3f50624d
	...
 8000ca4:	40a51800 	.word	0x40a51800
 8000ca8:	00000000 	.word	0x00000000
 8000cac:	409a9000 	.word	0x409a9000
 8000cb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8000cb4:	3f60624d 	.word	0x3f60624d
 8000cb8:	33333333 	.word	0x33333333
 8000cbc:	3fe33333 	.word	0x3fe33333
 8000cc0:	00000000 	.word	0x00000000
 8000cc4:	40adb000 	.word	0x40adb000
 8000cc8:	00000000 	.word	0x00000000
 8000ccc:	40a90000 	.word	0x40a90000
 8000cd0:	240000a0 	.word	0x240000a0
 8000cd4:	24000110 	.word	0x24000110
 8000cd8:	24000180 	.word	0x24000180
 8000cdc:	240001f0 	.word	0x240001f0

08000ce0 <_GLOBAL__sub_I_fr>:
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f7ff ff79 	bl	8000be0 <_Z41__static_initialization_and_destruction_0ii>
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <_Z10debug_loopv>:
bool mecanum_debug = false;
bool intake_debug = true;
bool scara_debug = false;


void debug_loop(){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	while(1){
		if(mecanum_debug) mecanum.run();
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <_Z10debug_loopv+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d002      	beq.n	8000d02 <_Z10debug_loopv+0x12>
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <_Z10debug_loopv+0x24>)
 8000cfe:	f000 fee5 	bl	8001acc <_ZN7Mecanum3runEv>
		if(intake_debug) INTAKE::run();
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <_Z10debug_loopv+0x28>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f4      	beq.n	8000cf4 <_Z10debug_loopv+0x4>
 8000d0a:	f000 f807 	bl	8000d1c <_ZN6INTAKE3runEv>
		if(mecanum_debug) mecanum.run();
 8000d0e:	e7f1      	b.n	8000cf4 <_Z10debug_loopv+0x4>
 8000d10:	24000261 	.word	0x24000261
 8000d14:	24000748 	.word	0x24000748
 8000d18:	24000000 	.word	0x24000000

08000d1c <_ZN6INTAKE3runEv>:

namespace INTAKE{
	double tilt, stretch, suck;
}

void INTAKE::run(void){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	 /*stretch*/
	    if (INTAKE::stretch == 0){
 8000d20:	4b5c      	ldr	r3, [pc, #368]	; (8000e94 <_ZN6INTAKE3runEv+0x178>)
 8000d22:	ed93 7b00 	vldr	d7, [r3]
 8000d26:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2e:	d10a      	bne.n	8000d46 <_ZN6INTAKE3runEv+0x2a>
	    	HAL_GPIO_WritePin(STRETCH_INA_PORT, STRETCH_INA_PIN, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2140      	movs	r1, #64	; 0x40
 8000d34:	4858      	ldr	r0, [pc, #352]	; (8000e98 <_ZN6INTAKE3runEv+0x17c>)
 8000d36:	f009 f901 	bl	8009f3c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(STRETCH_INB_PORT, STRETCH_INB_PIN, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2180      	movs	r1, #128	; 0x80
 8000d3e:	4856      	ldr	r0, [pc, #344]	; (8000e98 <_ZN6INTAKE3runEv+0x17c>)
 8000d40:	f009 f8fc 	bl	8009f3c <HAL_GPIO_WritePin>
 8000d44:	e028      	b.n	8000d98 <_ZN6INTAKE3runEv+0x7c>
	    } else if (INTAKE::stretch == -1){
 8000d46:	4b53      	ldr	r3, [pc, #332]	; (8000e94 <_ZN6INTAKE3runEv+0x178>)
 8000d48:	ed93 7b00 	vldr	d7, [r3]
 8000d4c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000d50:	eeb4 7b46 	vcmp.f64	d7, d6
 8000d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d58:	d10a      	bne.n	8000d70 <_ZN6INTAKE3runEv+0x54>
	    	HAL_GPIO_WritePin(STRETCH_INA_PORT, STRETCH_INA_PIN, GPIO_PIN_SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2140      	movs	r1, #64	; 0x40
 8000d5e:	484e      	ldr	r0, [pc, #312]	; (8000e98 <_ZN6INTAKE3runEv+0x17c>)
 8000d60:	f009 f8ec 	bl	8009f3c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(STRETCH_INB_PORT, STRETCH_INB_PIN, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2180      	movs	r1, #128	; 0x80
 8000d68:	484b      	ldr	r0, [pc, #300]	; (8000e98 <_ZN6INTAKE3runEv+0x17c>)
 8000d6a:	f009 f8e7 	bl	8009f3c <HAL_GPIO_WritePin>
 8000d6e:	e013      	b.n	8000d98 <_ZN6INTAKE3runEv+0x7c>
	    } else if (INTAKE::stretch == 1){
 8000d70:	4b48      	ldr	r3, [pc, #288]	; (8000e94 <_ZN6INTAKE3runEv+0x178>)
 8000d72:	ed93 7b00 	vldr	d7, [r3]
 8000d76:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d7a:	eeb4 7b46 	vcmp.f64	d7, d6
 8000d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d82:	d109      	bne.n	8000d98 <_ZN6INTAKE3runEv+0x7c>
	    	HAL_GPIO_WritePin(STRETCH_INA_PORT, STRETCH_INA_PIN, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2140      	movs	r1, #64	; 0x40
 8000d88:	4843      	ldr	r0, [pc, #268]	; (8000e98 <_ZN6INTAKE3runEv+0x17c>)
 8000d8a:	f009 f8d7 	bl	8009f3c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(STRETCH_INB_PORT, STRETCH_INB_PIN, GPIO_PIN_SET);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2180      	movs	r1, #128	; 0x80
 8000d92:	4841      	ldr	r0, [pc, #260]	; (8000e98 <_ZN6INTAKE3runEv+0x17c>)
 8000d94:	f009 f8d2 	bl	8009f3c <HAL_GPIO_WritePin>
	    }

	/*tilt*/
	    if (INTAKE::tilt == 0){
 8000d98:	4b40      	ldr	r3, [pc, #256]	; (8000e9c <_ZN6INTAKE3runEv+0x180>)
 8000d9a:	ed93 7b00 	vldr	d7, [r3]
 8000d9e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da6:	d10b      	bne.n	8000dc0 <_ZN6INTAKE3runEv+0xa4>
	    	HAL_GPIO_WritePin(TILT_INA_PORT, TILT_INA_PIN, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dae:	483a      	ldr	r0, [pc, #232]	; (8000e98 <_ZN6INTAKE3runEv+0x17c>)
 8000db0:	f009 f8c4 	bl	8009f3c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(TILT_INB_PORT, TILT_INB_PIN, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2110      	movs	r1, #16
 8000db8:	4839      	ldr	r0, [pc, #228]	; (8000ea0 <_ZN6INTAKE3runEv+0x184>)
 8000dba:	f009 f8bf 	bl	8009f3c <HAL_GPIO_WritePin>
 8000dbe:	e02a      	b.n	8000e16 <_ZN6INTAKE3runEv+0xfa>
	    } else if (INTAKE::tilt == 1){
 8000dc0:	4b36      	ldr	r3, [pc, #216]	; (8000e9c <_ZN6INTAKE3runEv+0x180>)
 8000dc2:	ed93 7b00 	vldr	d7, [r3]
 8000dc6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000dca:	eeb4 7b46 	vcmp.f64	d7, d6
 8000dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd2:	d10b      	bne.n	8000dec <_ZN6INTAKE3runEv+0xd0>
	    	HAL_GPIO_WritePin(TILT_INA_PORT, TILT_INA_PIN, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dda:	482f      	ldr	r0, [pc, #188]	; (8000e98 <_ZN6INTAKE3runEv+0x17c>)
 8000ddc:	f009 f8ae 	bl	8009f3c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(TILT_INB_PORT, TILT_INB_PIN, GPIO_PIN_SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	2110      	movs	r1, #16
 8000de4:	482e      	ldr	r0, [pc, #184]	; (8000ea0 <_ZN6INTAKE3runEv+0x184>)
 8000de6:	f009 f8a9 	bl	8009f3c <HAL_GPIO_WritePin>
 8000dea:	e014      	b.n	8000e16 <_ZN6INTAKE3runEv+0xfa>
	    } else if (INTAKE::tilt == -1){
 8000dec:	4b2b      	ldr	r3, [pc, #172]	; (8000e9c <_ZN6INTAKE3runEv+0x180>)
 8000dee:	ed93 7b00 	vldr	d7, [r3]
 8000df2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000df6:	eeb4 7b46 	vcmp.f64	d7, d6
 8000dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dfe:	d10a      	bne.n	8000e16 <_ZN6INTAKE3runEv+0xfa>
	    	HAL_GPIO_WritePin(TILT_INA_PORT, TILT_INA_PIN, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e06:	4824      	ldr	r0, [pc, #144]	; (8000e98 <_ZN6INTAKE3runEv+0x17c>)
 8000e08:	f009 f898 	bl	8009f3c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(TILT_INB_PORT, TILT_INB_PIN, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2110      	movs	r1, #16
 8000e10:	4823      	ldr	r0, [pc, #140]	; (8000ea0 <_ZN6INTAKE3runEv+0x184>)
 8000e12:	f009 f893 	bl	8009f3c <HAL_GPIO_WritePin>
	    }

    /*suck*/
	    if (INTAKE::suck == 0){
 8000e16:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <_ZN6INTAKE3runEv+0x188>)
 8000e18:	ed93 7b00 	vldr	d7, [r3]
 8000e1c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e24:	d10a      	bne.n	8000e3c <_ZN6INTAKE3runEv+0x120>
	    	HAL_GPIO_WritePin(SUCK_INA_PORT, SUCK_INA_PIN, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2140      	movs	r1, #64	; 0x40
 8000e2a:	481f      	ldr	r0, [pc, #124]	; (8000ea8 <_ZN6INTAKE3runEv+0x18c>)
 8000e2c:	f009 f886 	bl	8009f3c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SUCK_INB_PORT, SUCK_INB_PIN, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2180      	movs	r1, #128	; 0x80
 8000e34:	481c      	ldr	r0, [pc, #112]	; (8000ea8 <_ZN6INTAKE3runEv+0x18c>)
 8000e36:	f009 f881 	bl	8009f3c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SUCK_INB_PORT, SUCK_INB_PIN, GPIO_PIN_RESET);
	    } else if (INTAKE::suck == -1){
	    	HAL_GPIO_WritePin(SUCK_INA_PORT, SUCK_INA_PIN, GPIO_PIN_RESET);
	    	HAL_GPIO_WritePin(SUCK_INB_PORT, SUCK_INB_PIN, GPIO_PIN_SET);
	    }
}
 8000e3a:	e028      	b.n	8000e8e <_ZN6INTAKE3runEv+0x172>
	    } else if (INTAKE::suck == 1){
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <_ZN6INTAKE3runEv+0x188>)
 8000e3e:	ed93 7b00 	vldr	d7, [r3]
 8000e42:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e46:	eeb4 7b46 	vcmp.f64	d7, d6
 8000e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4e:	d10a      	bne.n	8000e66 <_ZN6INTAKE3runEv+0x14a>
	    	HAL_GPIO_WritePin(SUCK_INA_PORT, SUCK_INA_PIN, GPIO_PIN_SET);
 8000e50:	2201      	movs	r2, #1
 8000e52:	2140      	movs	r1, #64	; 0x40
 8000e54:	4814      	ldr	r0, [pc, #80]	; (8000ea8 <_ZN6INTAKE3runEv+0x18c>)
 8000e56:	f009 f871 	bl	8009f3c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SUCK_INB_PORT, SUCK_INB_PIN, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2180      	movs	r1, #128	; 0x80
 8000e5e:	4812      	ldr	r0, [pc, #72]	; (8000ea8 <_ZN6INTAKE3runEv+0x18c>)
 8000e60:	f009 f86c 	bl	8009f3c <HAL_GPIO_WritePin>
}
 8000e64:	e013      	b.n	8000e8e <_ZN6INTAKE3runEv+0x172>
	    } else if (INTAKE::suck == -1){
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <_ZN6INTAKE3runEv+0x188>)
 8000e68:	ed93 7b00 	vldr	d7, [r3]
 8000e6c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000e70:	eeb4 7b46 	vcmp.f64	d7, d6
 8000e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e78:	d109      	bne.n	8000e8e <_ZN6INTAKE3runEv+0x172>
	    	HAL_GPIO_WritePin(SUCK_INA_PORT, SUCK_INA_PIN, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2140      	movs	r1, #64	; 0x40
 8000e7e:	480a      	ldr	r0, [pc, #40]	; (8000ea8 <_ZN6INTAKE3runEv+0x18c>)
 8000e80:	f009 f85c 	bl	8009f3c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SUCK_INB_PORT, SUCK_INB_PIN, GPIO_PIN_SET);
 8000e84:	2201      	movs	r2, #1
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <_ZN6INTAKE3runEv+0x18c>)
 8000e8a:	f009 f857 	bl	8009f3c <HAL_GPIO_WritePin>
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	24000270 	.word	0x24000270
 8000e98:	58020400 	.word	0x58020400
 8000e9c:	24000268 	.word	0x24000268
 8000ea0:	58020800 	.word	0x58020800
 8000ea4:	24000278 	.word	0x24000278
 8000ea8:	58020000 	.word	0x58020000

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb0:	f005 fe84 	bl	8006bbc <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb4:	f000 f820 	bl	8000ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb8:	f000 fc64 	bl	8001784 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ebc:	f000 f88c 	bl	8000fd8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ec0:	f000 f8de 	bl	8001080 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ec4:	f000 f932 	bl	800112c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000ec8:	f000 f986 	bl	80011d8 <MX_TIM5_Init>
  MX_TIM12_Init();
 8000ecc:	f000 fa64 	bl	8001398 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000ed0:	f000 fab2 	bl	8001438 <MX_TIM13_Init>
  MX_TIM15_Init();
 8000ed4:	f000 faf6 	bl	80014c4 <MX_TIM15_Init>
  MX_DMA_Init();
 8000ed8:	f000 fc2c 	bl	8001734 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000edc:	f000 fbde 	bl	800169c <MX_USART1_UART_Init>
  MX_TIM8_Init();
 8000ee0:	f000 fa06 	bl	80012f0 <MX_TIM8_Init>
  MX_TIM14_Init();
 8000ee4:	f000 facc 	bl	8001480 <MX_TIM14_Init>
  MX_TIM7_Init();
 8000ee8:	f000 f9cc 	bl	8001284 <MX_TIM7_Init>
  MX_TIM23_Init();
 8000eec:	f000 fb7c 	bl	80015e8 <MX_TIM23_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000ef0:	f000 fd86 	bl	8001a00 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <main+0x48>
	...

08000ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b09c      	sub	sp, #112	; 0x70
 8000efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f02:	224c      	movs	r2, #76	; 0x4c
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f00f ff92 	bl	8010e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2220      	movs	r2, #32
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f00f ff8c 	bl	8010e30 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f009 f829 	bl	8009f70 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f1e:	2300      	movs	r3, #0
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	4b2c      	ldr	r3, [pc, #176]	; (8000fd4 <SystemClock_Config+0xdc>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f2a:	4a2a      	ldr	r2, [pc, #168]	; (8000fd4 <SystemClock_Config+0xdc>)
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f30:	6193      	str	r3, [r2, #24]
 8000f32:	4b28      	ldr	r3, [pc, #160]	; (8000fd4 <SystemClock_Config+0xdc>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f3e:	bf00      	nop
 8000f40:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <SystemClock_Config+0xdc>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f4c:	d1f8      	bne.n	8000f40 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f60:	2301      	movs	r3, #1
 8000f62:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000f64:	232a      	movs	r3, #42	; 0x2a
 8000f66:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f74:	230c      	movs	r3, #12
 8000f76:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f84:	4618      	mov	r0, r3
 8000f86:	f009 f82d 	bl	8009fe4 <HAL_RCC_OscConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f90:	f000 fd30 	bl	80019f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f94:	233f      	movs	r3, #63	; 0x3f
 8000f96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000f9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000fa2:	2308      	movs	r3, #8
 8000fa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fa6:	2340      	movs	r3, #64	; 0x40
 8000fa8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000faa:	2340      	movs	r3, #64	; 0x40
 8000fac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fb2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fb4:	2340      	movs	r3, #64	; 0x40
 8000fb6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2102      	movs	r1, #2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f009 fbbf 	bl	800a740 <HAL_RCC_ClockConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000fc8:	f000 fd14 	bl	80019f4 <Error_Handler>
  }
}
 8000fcc:	bf00      	nop
 8000fce:	3770      	adds	r7, #112	; 0x70
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	58024800 	.word	0x58024800

08000fd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08c      	sub	sp, #48	; 0x30
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	2224      	movs	r2, #36	; 0x24
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f00f ff22 	bl	8010e30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fec:	463b      	mov	r3, r7
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ff6:	4b21      	ldr	r3, [pc, #132]	; (800107c <MX_TIM2_Init+0xa4>)
 8000ff8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ffc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	; (800107c <MX_TIM2_Init+0xa4>)
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001004:	4b1d      	ldr	r3, [pc, #116]	; (800107c <MX_TIM2_Init+0xa4>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800100a:	4b1c      	ldr	r3, [pc, #112]	; (800107c <MX_TIM2_Init+0xa4>)
 800100c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001010:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <MX_TIM2_Init+0xa4>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_TIM2_Init+0xa4>)
 800101a:	2200      	movs	r2, #0
 800101c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800101e:	2303      	movs	r3, #3
 8001020:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001026:	2301      	movs	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001036:	2301      	movs	r3, #1
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	4619      	mov	r1, r3
 8001048:	480c      	ldr	r0, [pc, #48]	; (800107c <MX_TIM2_Init+0xa4>)
 800104a:	f00b fddb 	bl	800cc04 <HAL_TIM_Encoder_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001054:	f000 fcce 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001058:	2300      	movs	r3, #0
 800105a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001060:	463b      	mov	r3, r7
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_TIM2_Init+0xa4>)
 8001066:	f00c fe95 	bl	800dd94 <HAL_TIMEx_MasterConfigSynchronization>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001070:	f000 fcc0 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	3730      	adds	r7, #48	; 0x30
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	24000280 	.word	0x24000280

08001080 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08c      	sub	sp, #48	; 0x30
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	2224      	movs	r2, #36	; 0x24
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f00f fece 	bl	8010e30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001094:	463b      	mov	r3, r7
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <MX_TIM3_Init+0xa4>)
 80010a0:	4a21      	ldr	r2, [pc, #132]	; (8001128 <MX_TIM3_Init+0xa8>)
 80010a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010a4:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <MX_TIM3_Init+0xa4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <MX_TIM3_Init+0xa4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <MX_TIM3_Init+0xa4>)
 80010b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <MX_TIM3_Init+0xa4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <MX_TIM3_Init+0xa4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010c4:	2303      	movs	r3, #3
 80010c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010cc:	2301      	movs	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010dc:	2301      	movs	r3, #1
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	4619      	mov	r1, r3
 80010ee:	480d      	ldr	r0, [pc, #52]	; (8001124 <MX_TIM3_Init+0xa4>)
 80010f0:	f00b fd88 	bl	800cc04 <HAL_TIM_Encoder_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80010fa:	f000 fc7b 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001106:	463b      	mov	r3, r7
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <MX_TIM3_Init+0xa4>)
 800110c:	f00c fe42 	bl	800dd94 <HAL_TIMEx_MasterConfigSynchronization>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001116:	f000 fc6d 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	3730      	adds	r7, #48	; 0x30
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	240002cc 	.word	0x240002cc
 8001128:	40000400 	.word	0x40000400

0800112c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08c      	sub	sp, #48	; 0x30
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	2224      	movs	r2, #36	; 0x24
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f00f fe78 	bl	8010e30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001140:	463b      	mov	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <MX_TIM4_Init+0xa4>)
 800114c:	4a21      	ldr	r2, [pc, #132]	; (80011d4 <MX_TIM4_Init+0xa8>)
 800114e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001150:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <MX_TIM4_Init+0xa4>)
 8001152:	2200      	movs	r2, #0
 8001154:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001156:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <MX_TIM4_Init+0xa4>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <MX_TIM4_Init+0xa4>)
 800115e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001162:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <MX_TIM4_Init+0xa4>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <MX_TIM4_Init+0xa4>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001170:	2303      	movs	r3, #3
 8001172:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001178:	2301      	movs	r3, #1
 800117a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001188:	2301      	movs	r3, #1
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	4619      	mov	r1, r3
 800119a:	480d      	ldr	r0, [pc, #52]	; (80011d0 <MX_TIM4_Init+0xa4>)
 800119c:	f00b fd32 	bl	800cc04 <HAL_TIM_Encoder_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80011a6:	f000 fc25 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <MX_TIM4_Init+0xa4>)
 80011b8:	f00c fdec 	bl	800dd94 <HAL_TIMEx_MasterConfigSynchronization>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80011c2:	f000 fc17 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	3730      	adds	r7, #48	; 0x30
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	24000318 	.word	0x24000318
 80011d4:	40000800 	.word	0x40000800

080011d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08c      	sub	sp, #48	; 0x30
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	2224      	movs	r2, #36	; 0x24
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f00f fe22 	bl	8010e30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ec:	463b      	mov	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <MX_TIM5_Init+0xa4>)
 80011f8:	4a21      	ldr	r2, [pc, #132]	; (8001280 <MX_TIM5_Init+0xa8>)
 80011fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_TIM5_Init+0xa4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001202:	4b1e      	ldr	r3, [pc, #120]	; (800127c <MX_TIM5_Init+0xa4>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001208:	4b1c      	ldr	r3, [pc, #112]	; (800127c <MX_TIM5_Init+0xa4>)
 800120a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800120e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_TIM5_Init+0xa4>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <MX_TIM5_Init+0xa4>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800121c:	2303      	movs	r3, #3
 800121e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001220:	2300      	movs	r3, #0
 8001222:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001224:	2301      	movs	r3, #1
 8001226:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001234:	2301      	movs	r3, #1
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4619      	mov	r1, r3
 8001246:	480d      	ldr	r0, [pc, #52]	; (800127c <MX_TIM5_Init+0xa4>)
 8001248:	f00b fcdc 	bl	800cc04 <HAL_TIM_Encoder_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001252:	f000 fbcf 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800125e:	463b      	mov	r3, r7
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	; (800127c <MX_TIM5_Init+0xa4>)
 8001264:	f00c fd96 	bl	800dd94 <HAL_TIMEx_MasterConfigSynchronization>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800126e:	f000 fbc1 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	3730      	adds	r7, #48	; 0x30
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	24000364 	.word	0x24000364
 8001280:	40000c00 	.word	0x40000c00

08001284 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_TIM7_Init+0x64>)
 8001296:	4a15      	ldr	r2, [pc, #84]	; (80012ec <MX_TIM7_Init+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 63;
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <MX_TIM7_Init+0x64>)
 800129c:	223f      	movs	r2, #63	; 0x3f
 800129e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_TIM7_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1999;
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <MX_TIM7_Init+0x64>)
 80012a8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80012ac:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <MX_TIM7_Init+0x64>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <MX_TIM7_Init+0x64>)
 80012b6:	f00b f8eb 	bl	800c490 <HAL_TIM_Base_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80012c0:	f000 fb98 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_TIM7_Init+0x64>)
 80012d2:	f00c fd5f 	bl	800dd94 <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80012dc:	f000 fb8a 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	240003b0 	.word	0x240003b0
 80012ec:	40001400 	.word	0x40001400

080012f0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800130e:	4b20      	ldr	r3, [pc, #128]	; (8001390 <MX_TIM8_Init+0xa0>)
 8001310:	4a20      	ldr	r2, [pc, #128]	; (8001394 <MX_TIM8_Init+0xa4>)
 8001312:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 31;
 8001314:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <MX_TIM8_Init+0xa0>)
 8001316:	221f      	movs	r2, #31
 8001318:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <MX_TIM8_Init+0xa0>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8001320:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <MX_TIM8_Init+0xa0>)
 8001322:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001326:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001328:	4b19      	ldr	r3, [pc, #100]	; (8001390 <MX_TIM8_Init+0xa0>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_TIM8_Init+0xa0>)
 8001330:	2200      	movs	r2, #0
 8001332:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001334:	4b16      	ldr	r3, [pc, #88]	; (8001390 <MX_TIM8_Init+0xa0>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800133a:	4815      	ldr	r0, [pc, #84]	; (8001390 <MX_TIM8_Init+0xa0>)
 800133c:	f00b f8a8 	bl	800c490 <HAL_TIM_Base_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001346:	f000 fb55 	bl	80019f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	4619      	mov	r1, r3
 8001356:	480e      	ldr	r0, [pc, #56]	; (8001390 <MX_TIM8_Init+0xa0>)
 8001358:	f00b ffbc 	bl	800d2d4 <HAL_TIM_ConfigClockSource>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001362:	f000 fb47 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	4619      	mov	r1, r3
 8001376:	4806      	ldr	r0, [pc, #24]	; (8001390 <MX_TIM8_Init+0xa0>)
 8001378:	f00c fd0c 	bl	800dd94 <HAL_TIMEx_MasterConfigSynchronization>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001382:	f000 fb37 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	3720      	adds	r7, #32
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	240003fc 	.word	0x240003fc
 8001394:	40010400 	.word	0x40010400

08001398 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
 80013ac:	615a      	str	r2, [r3, #20]
 80013ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80013b0:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <MX_TIM12_Init+0x98>)
 80013b2:	4a20      	ldr	r2, [pc, #128]	; (8001434 <MX_TIM12_Init+0x9c>)
 80013b4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 3;
 80013b6:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <MX_TIM12_Init+0x98>)
 80013b8:	2203      	movs	r2, #3
 80013ba:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013bc:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <MX_TIM12_Init+0x98>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 80013c2:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <MX_TIM12_Init+0x98>)
 80013c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013c8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <MX_TIM12_Init+0x98>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <MX_TIM12_Init+0x98>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80013d6:	4816      	ldr	r0, [pc, #88]	; (8001430 <MX_TIM12_Init+0x98>)
 80013d8:	f00b f938 	bl	800c64c <HAL_TIM_PWM_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80013e2:	f000 fb07 	bl	80019f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e6:	2360      	movs	r3, #96	; 0x60
 80013e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	4619      	mov	r1, r3
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <MX_TIM12_Init+0x98>)
 80013fe:	f00b fe55 	bl	800d0ac <HAL_TIM_PWM_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001408:	f000 faf4 	bl	80019f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	2204      	movs	r2, #4
 8001410:	4619      	mov	r1, r3
 8001412:	4807      	ldr	r0, [pc, #28]	; (8001430 <MX_TIM12_Init+0x98>)
 8001414:	f00b fe4a 	bl	800d0ac <HAL_TIM_PWM_ConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800141e:	f000 fae9 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001422:	4803      	ldr	r0, [pc, #12]	; (8001430 <MX_TIM12_Init+0x98>)
 8001424:	f004 fe9c 	bl	8006160 <HAL_TIM_MspPostInit>

}
 8001428:	bf00      	nop
 800142a:	3720      	adds	r7, #32
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	24000448 	.word	0x24000448
 8001434:	40001800 	.word	0x40001800

08001438 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <MX_TIM13_Init+0x40>)
 800143e:	4a0f      	ldr	r2, [pc, #60]	; (800147c <MX_TIM13_Init+0x44>)
 8001440:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 83;
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <MX_TIM13_Init+0x40>)
 8001444:	2253      	movs	r2, #83	; 0x53
 8001446:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <MX_TIM13_Init+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <MX_TIM13_Init+0x40>)
 8001450:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001454:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <MX_TIM13_Init+0x40>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_TIM13_Init+0x40>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_TIM13_Init+0x40>)
 8001464:	f00b f814 	bl	800c490 <HAL_TIM_Base_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800146e:	f000 fac1 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	24000494 	.word	0x24000494
 800147c:	40001c00 	.word	0x40001c00

08001480 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <MX_TIM14_Init+0x3c>)
 8001486:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <MX_TIM14_Init+0x40>)
 8001488:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 63;
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_TIM14_Init+0x3c>)
 800148c:	223f      	movs	r2, #63	; 0x3f
 800148e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <MX_TIM14_Init+0x3c>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_TIM14_Init+0x3c>)
 8001498:	2263      	movs	r2, #99	; 0x63
 800149a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <MX_TIM14_Init+0x3c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_TIM14_Init+0x3c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	; (80014bc <MX_TIM14_Init+0x3c>)
 80014aa:	f00a fff1 	bl	800c490 <HAL_TIM_Base_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80014b4:	f000 fa9e 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	240004e0 	.word	0x240004e0
 80014c0:	40002000 	.word	0x40002000

080014c4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b098      	sub	sp, #96	; 0x60
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]
 80014e6:	615a      	str	r2, [r3, #20]
 80014e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2234      	movs	r2, #52	; 0x34
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f00f fc9d 	bl	8010e30 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80014f6:	4b3a      	ldr	r3, [pc, #232]	; (80015e0 <MX_TIM15_Init+0x11c>)
 80014f8:	4a3a      	ldr	r2, [pc, #232]	; (80015e4 <MX_TIM15_Init+0x120>)
 80014fa:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 3;
 80014fc:	4b38      	ldr	r3, [pc, #224]	; (80015e0 <MX_TIM15_Init+0x11c>)
 80014fe:	2203      	movs	r2, #3
 8001500:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001502:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <MX_TIM15_Init+0x11c>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8001508:	4b35      	ldr	r3, [pc, #212]	; (80015e0 <MX_TIM15_Init+0x11c>)
 800150a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800150e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001510:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <MX_TIM15_Init+0x11c>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001516:	4b32      	ldr	r3, [pc, #200]	; (80015e0 <MX_TIM15_Init+0x11c>)
 8001518:	2200      	movs	r2, #0
 800151a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151c:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <MX_TIM15_Init+0x11c>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001522:	482f      	ldr	r0, [pc, #188]	; (80015e0 <MX_TIM15_Init+0x11c>)
 8001524:	f00b f892 	bl	800c64c <HAL_TIM_PWM_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800152e:	f000 fa61 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800153a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800153e:	4619      	mov	r1, r3
 8001540:	4827      	ldr	r0, [pc, #156]	; (80015e0 <MX_TIM15_Init+0x11c>)
 8001542:	f00c fc27 	bl	800dd94 <HAL_TIMEx_MasterConfigSynchronization>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800154c:	f000 fa52 	bl	80019f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001550:	2360      	movs	r3, #96	; 0x60
 8001552:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001558:	2300      	movs	r3, #0
 800155a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800155c:	2300      	movs	r3, #0
 800155e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800156c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001570:	2200      	movs	r2, #0
 8001572:	4619      	mov	r1, r3
 8001574:	481a      	ldr	r0, [pc, #104]	; (80015e0 <MX_TIM15_Init+0x11c>)
 8001576:	f00b fd99 	bl	800d0ac <HAL_TIM_PWM_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001580:	f000 fa38 	bl	80019f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001584:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001588:	2204      	movs	r2, #4
 800158a:	4619      	mov	r1, r3
 800158c:	4814      	ldr	r0, [pc, #80]	; (80015e0 <MX_TIM15_Init+0x11c>)
 800158e:	f00b fd8d 	bl	800d0ac <HAL_TIM_PWM_ConfigChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001598:	f000 fa2c 	bl	80019f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	4807      	ldr	r0, [pc, #28]	; (80015e0 <MX_TIM15_Init+0x11c>)
 80015c4:	f00c fc82 	bl	800decc <HAL_TIMEx_ConfigBreakDeadTime>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80015ce:	f000 fa11 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80015d2:	4803      	ldr	r0, [pc, #12]	; (80015e0 <MX_TIM15_Init+0x11c>)
 80015d4:	f004 fdc4 	bl	8006160 <HAL_TIM_MspPostInit>

}
 80015d8:	bf00      	nop
 80015da:	3760      	adds	r7, #96	; 0x60
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	2400052c 	.word	0x2400052c
 80015e4:	40014000 	.word	0x40014000

080015e8 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015fa:	463b      	mov	r3, r7
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
 8001608:	615a      	str	r2, [r3, #20]
 800160a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800160c:	4b21      	ldr	r3, [pc, #132]	; (8001694 <MX_TIM23_Init+0xac>)
 800160e:	4a22      	ldr	r2, [pc, #136]	; (8001698 <MX_TIM23_Init+0xb0>)
 8001610:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 63;
 8001612:	4b20      	ldr	r3, [pc, #128]	; (8001694 <MX_TIM23_Init+0xac>)
 8001614:	223f      	movs	r2, #63	; 0x3f
 8001616:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <MX_TIM23_Init+0xac>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 19999;
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <MX_TIM23_Init+0xac>)
 8001620:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001624:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <MX_TIM23_Init+0xac>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <MX_TIM23_Init+0xac>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 8001632:	4818      	ldr	r0, [pc, #96]	; (8001694 <MX_TIM23_Init+0xac>)
 8001634:	f00b f80a 	bl	800c64c <HAL_TIM_PWM_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM23_Init+0x5a>
  {
    Error_Handler();
 800163e:	f000 f9d9 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800164a:	f107 031c 	add.w	r3, r7, #28
 800164e:	4619      	mov	r1, r3
 8001650:	4810      	ldr	r0, [pc, #64]	; (8001694 <MX_TIM23_Init+0xac>)
 8001652:	f00c fb9f 	bl	800dd94 <HAL_TIMEx_MasterConfigSynchronization>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM23_Init+0x78>
  {
    Error_Handler();
 800165c:	f000 f9ca 	bl	80019f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001660:	2360      	movs	r3, #96	; 0x60
 8001662:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001670:	463b      	mov	r3, r7
 8001672:	2200      	movs	r2, #0
 8001674:	4619      	mov	r1, r3
 8001676:	4807      	ldr	r0, [pc, #28]	; (8001694 <MX_TIM23_Init+0xac>)
 8001678:	f00b fd18 	bl	800d0ac <HAL_TIM_PWM_ConfigChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM23_Init+0x9e>
  {
    Error_Handler();
 8001682:	f000 f9b7 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 8001686:	4803      	ldr	r0, [pc, #12]	; (8001694 <MX_TIM23_Init+0xac>)
 8001688:	f004 fd6a 	bl	8006160 <HAL_TIM_MspPostInit>

}
 800168c:	bf00      	nop
 800168e:	3728      	adds	r7, #40	; 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	24000578 	.word	0x24000578
 8001698:	4000e000 	.word	0x4000e000

0800169c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016a0:	4b22      	ldr	r3, [pc, #136]	; (800172c <MX_USART1_UART_Init+0x90>)
 80016a2:	4a23      	ldr	r2, [pc, #140]	; (8001730 <MX_USART1_UART_Init+0x94>)
 80016a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016a6:	4b21      	ldr	r3, [pc, #132]	; (800172c <MX_USART1_UART_Init+0x90>)
 80016a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ae:	4b1f      	ldr	r3, [pc, #124]	; (800172c <MX_USART1_UART_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016b4:	4b1d      	ldr	r3, [pc, #116]	; (800172c <MX_USART1_UART_Init+0x90>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <MX_USART1_UART_Init+0x90>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016c0:	4b1a      	ldr	r3, [pc, #104]	; (800172c <MX_USART1_UART_Init+0x90>)
 80016c2:	220c      	movs	r2, #12
 80016c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <MX_USART1_UART_Init+0x90>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016cc:	4b17      	ldr	r3, [pc, #92]	; (800172c <MX_USART1_UART_Init+0x90>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d2:	4b16      	ldr	r3, [pc, #88]	; (800172c <MX_USART1_UART_Init+0x90>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <MX_USART1_UART_Init+0x90>)
 80016da:	2200      	movs	r2, #0
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <MX_USART1_UART_Init+0x90>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016e4:	4811      	ldr	r0, [pc, #68]	; (800172c <MX_USART1_UART_Init+0x90>)
 80016e6:	f00c fcaf 	bl	800e048 <HAL_UART_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016f0:	f000 f980 	bl	80019f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016f4:	2100      	movs	r1, #0
 80016f6:	480d      	ldr	r0, [pc, #52]	; (800172c <MX_USART1_UART_Init+0x90>)
 80016f8:	f00e fcf6 	bl	80100e8 <HAL_UARTEx_SetTxFifoThreshold>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001702:	f000 f977 	bl	80019f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001706:	2100      	movs	r1, #0
 8001708:	4808      	ldr	r0, [pc, #32]	; (800172c <MX_USART1_UART_Init+0x90>)
 800170a:	f00e fd2b 	bl	8010164 <HAL_UARTEx_SetRxFifoThreshold>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001714:	f000 f96e 	bl	80019f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001718:	4804      	ldr	r0, [pc, #16]	; (800172c <MX_USART1_UART_Init+0x90>)
 800171a:	f00e fcac 	bl	8010076 <HAL_UARTEx_DisableFifoMode>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001724:	f000 f966 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	240005c4 	.word	0x240005c4
 8001730:	40011000 	.word	0x40011000

08001734 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_DMA_Init+0x4c>)
 800173c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001740:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <MX_DMA_Init+0x4c>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <MX_DMA_Init+0x4c>)
 800174c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001758:	2200      	movs	r2, #0
 800175a:	2100      	movs	r1, #0
 800175c:	200b      	movs	r0, #11
 800175e:	f005 fbbe 	bl	8006ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001762:	200b      	movs	r0, #11
 8001764:	f005 fbd5 	bl	8006f12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	200c      	movs	r0, #12
 800176e:	f005 fbb6 	bl	8006ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001772:	200c      	movs	r0, #12
 8001774:	f005 fbcd 	bl	8006f12 <HAL_NVIC_EnableIRQ>

}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	58024400 	.word	0x58024400

08001784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08e      	sub	sp, #56	; 0x38
 8001788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800179a:	4b8e      	ldr	r3, [pc, #568]	; (80019d4 <MX_GPIO_Init+0x250>)
 800179c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a0:	4a8c      	ldr	r2, [pc, #560]	; (80019d4 <MX_GPIO_Init+0x250>)
 80017a2:	f043 0310 	orr.w	r3, r3, #16
 80017a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017aa:	4b8a      	ldr	r3, [pc, #552]	; (80019d4 <MX_GPIO_Init+0x250>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	623b      	str	r3, [r7, #32]
 80017b6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b8:	4b86      	ldr	r3, [pc, #536]	; (80019d4 <MX_GPIO_Init+0x250>)
 80017ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017be:	4a85      	ldr	r2, [pc, #532]	; (80019d4 <MX_GPIO_Init+0x250>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017c8:	4b82      	ldr	r3, [pc, #520]	; (80019d4 <MX_GPIO_Init+0x250>)
 80017ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	61fb      	str	r3, [r7, #28]
 80017d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017d6:	4b7f      	ldr	r3, [pc, #508]	; (80019d4 <MX_GPIO_Init+0x250>)
 80017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017dc:	4a7d      	ldr	r2, [pc, #500]	; (80019d4 <MX_GPIO_Init+0x250>)
 80017de:	f043 0320 	orr.w	r3, r3, #32
 80017e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017e6:	4b7b      	ldr	r3, [pc, #492]	; (80019d4 <MX_GPIO_Init+0x250>)
 80017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ec:	f003 0320 	and.w	r3, r3, #32
 80017f0:	61bb      	str	r3, [r7, #24]
 80017f2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017f4:	4b77      	ldr	r3, [pc, #476]	; (80019d4 <MX_GPIO_Init+0x250>)
 80017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017fa:	4a76      	ldr	r2, [pc, #472]	; (80019d4 <MX_GPIO_Init+0x250>)
 80017fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001800:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001804:	4b73      	ldr	r3, [pc, #460]	; (80019d4 <MX_GPIO_Init+0x250>)
 8001806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4b70      	ldr	r3, [pc, #448]	; (80019d4 <MX_GPIO_Init+0x250>)
 8001814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001818:	4a6e      	ldr	r2, [pc, #440]	; (80019d4 <MX_GPIO_Init+0x250>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001822:	4b6c      	ldr	r3, [pc, #432]	; (80019d4 <MX_GPIO_Init+0x250>)
 8001824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001830:	4b68      	ldr	r3, [pc, #416]	; (80019d4 <MX_GPIO_Init+0x250>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001836:	4a67      	ldr	r2, [pc, #412]	; (80019d4 <MX_GPIO_Init+0x250>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001840:	4b64      	ldr	r3, [pc, #400]	; (80019d4 <MX_GPIO_Init+0x250>)
 8001842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800184e:	4b61      	ldr	r3, [pc, #388]	; (80019d4 <MX_GPIO_Init+0x250>)
 8001850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001854:	4a5f      	ldr	r2, [pc, #380]	; (80019d4 <MX_GPIO_Init+0x250>)
 8001856:	f043 0308 	orr.w	r3, r3, #8
 800185a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800185e:	4b5d      	ldr	r3, [pc, #372]	; (80019d4 <MX_GPIO_Init+0x250>)
 8001860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800186c:	4b59      	ldr	r3, [pc, #356]	; (80019d4 <MX_GPIO_Init+0x250>)
 800186e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001872:	4a58      	ldr	r2, [pc, #352]	; (80019d4 <MX_GPIO_Init+0x250>)
 8001874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800187c:	4b55      	ldr	r3, [pc, #340]	; (80019d4 <MX_GPIO_Init+0x250>)
 800187e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8001890:	4851      	ldr	r0, [pc, #324]	; (80019d8 <MX_GPIO_Init+0x254>)
 8001892:	f008 fb53 	bl	8009f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	f242 0130 	movw	r1, #8240	; 0x2030
 800189c:	484f      	ldr	r0, [pc, #316]	; (80019dc <MX_GPIO_Init+0x258>)
 800189e:	f008 fb4d 	bl	8009f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
 80018a8:	484d      	ldr	r0, [pc, #308]	; (80019e0 <MX_GPIO_Init+0x25c>)
 80018aa:	f008 fb47 	bl	8009f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	21f0      	movs	r1, #240	; 0xf0
 80018b2:	484c      	ldr	r0, [pc, #304]	; (80019e4 <MX_GPIO_Init+0x260>)
 80018b4:	f008 fb42 	bl	8009f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6
 80018b8:	2200      	movs	r2, #0
 80018ba:	f44f 515f 	mov.w	r1, #14272	; 0x37c0
 80018be:	484a      	ldr	r0, [pc, #296]	; (80019e8 <MX_GPIO_Init+0x264>)
 80018c0:	f008 fb3c 	bl	8009f3c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 80018ca:	4848      	ldr	r0, [pc, #288]	; (80019ec <MX_GPIO_Init+0x268>)
 80018cc:	f008 fb36 	bl	8009f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8;
 80018d0:	f44f 738e 	mov.w	r3, #284	; 0x11c
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e6:	4619      	mov	r1, r3
 80018e8:	483b      	ldr	r0, [pc, #236]	; (80019d8 <MX_GPIO_Init+0x254>)
 80018ea:	f008 f967 	bl	8009bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5;
 80018ee:	f242 0330 	movw	r3, #8240	; 0x2030
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f4:	2301      	movs	r3, #1
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001904:	4619      	mov	r1, r3
 8001906:	4835      	ldr	r0, [pc, #212]	; (80019dc <MX_GPIO_Init+0x258>)
 8001908:	f008 f958 	bl	8009bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800190c:	2308      	movs	r3, #8
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001910:	2300      	movs	r3, #0
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191c:	4619      	mov	r1, r3
 800191e:	4830      	ldr	r0, [pc, #192]	; (80019e0 <MX_GPIO_Init+0x25c>)
 8001920:	f008 f94c 	bl	8009bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF9 PF11 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15;
 8001924:	f44f 430b 	mov.w	r3, #35584	; 0x8b00
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192a:	2301      	movs	r3, #1
 800192c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193a:	4619      	mov	r1, r3
 800193c:	4828      	ldr	r0, [pc, #160]	; (80019e0 <MX_GPIO_Init+0x25c>)
 800193e:	f008 f93d 	bl	8009bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001942:	2303      	movs	r3, #3
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001946:	2300      	movs	r3, #0
 8001948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001952:	4619      	mov	r1, r3
 8001954:	4821      	ldr	r0, [pc, #132]	; (80019dc <MX_GPIO_Init+0x258>)
 8001956:	f008 f931 	bl	8009bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800195a:	23f0      	movs	r3, #240	; 0xf0
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196e:	4619      	mov	r1, r3
 8001970:	481c      	ldr	r0, [pc, #112]	; (80019e4 <MX_GPIO_Init+0x260>)
 8001972:	f008 f923 	bl	8009bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6
 8001976:	f44f 535f 	mov.w	r3, #14272	; 0x37c0
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197c:	2301      	movs	r3, #1
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198c:	4619      	mov	r1, r3
 800198e:	4816      	ldr	r0, [pc, #88]	; (80019e8 <MX_GPIO_Init+0x264>)
 8001990:	f008 f914 	bl	8009bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 8001994:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199a:	2301      	movs	r3, #1
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019aa:	4619      	mov	r1, r3
 80019ac:	480f      	ldr	r0, [pc, #60]	; (80019ec <MX_GPIO_Init+0x268>)
 80019ae:	f008 f905 	bl	8009bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG4 PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80019b2:	2378      	movs	r3, #120	; 0x78
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c2:	4619      	mov	r1, r3
 80019c4:	480a      	ldr	r0, [pc, #40]	; (80019f0 <MX_GPIO_Init+0x26c>)
 80019c6:	f008 f8f9 	bl	8009bbc <HAL_GPIO_Init>

}
 80019ca:	bf00      	nop
 80019cc:	3738      	adds	r7, #56	; 0x38
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	58024400 	.word	0x58024400
 80019d8:	58021000 	.word	0x58021000
 80019dc:	58020800 	.word	0x58020800
 80019e0:	58021400 	.word	0x58021400
 80019e4:	58020000 	.word	0x58020000
 80019e8:	58020400 	.word	0x58020400
 80019ec:	58020c00 	.word	0x58020c00
 80019f0:	58021800 	.word	0x58021800

080019f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f8:	b672      	cpsid	i
}
 80019fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019fc:	e7fe      	b.n	80019fc <Error_Handler+0x8>
	...

08001a00 <main_function>:
#include "debug.h"
#include "ros_main.h"
#include "stm_main.h"


void main_function(){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	ROS::setup();
 8001a04:	f002 f9a2 	bl	8003d4c <_ZN3ROS5setupEv>
	STM::setup();
 8001a08:	f004 fda2 	bl	8006550 <_ZN3STM5setupEv>

	while(1){
		if(debug_mode) debug_loop();
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <main_function+0x20>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <main_function+0x1a>
 8001a14:	f7ff f96c 	bl	8000cf0 <_Z10debug_loopv>
 8001a18:	e7f8      	b.n	8001a0c <main_function+0xc>
		else ROS::loop();
 8001a1a:	f002 f9bf 	bl	8003d9c <_ZN3ROS4loopEv>
		if(debug_mode) debug_loop();
 8001a1e:	e7f5      	b.n	8001a0c <main_function+0xc>
 8001a20:	24000260 	.word	0x24000260

08001a24 <_ZN8CAR_INFOC1Ev>:

typedef struct{
	double Vx=0;
	double Vy=0;
	double Omega=0;
} CAR_INFO;
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	e9c1 2300 	strd	r2, r3, [r1]
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	0000      	movs	r0, r0
	...

08001a68 <_ZN7MecanumC1Ev>:
#include "mecanum.h"
#include "dc_motor.h"

Mecanum mecanum;

Mecanum::Mecanum(void){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ffd6 	bl	8001a24 <_ZN8CAR_INFOC1Ev>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3318      	adds	r3, #24
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ffd1 	bl	8001a24 <_ZN8CAR_INFOC1Ev>
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <_ZN7MecanumC1Ev+0x60>)
 8001a8a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	a309      	add	r3, pc, #36	; (adr r3, 8001ab8 <_ZN7MecanumC1Ev+0x50>)
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	a308      	add	r3, pc, #32	; (adr r3, 8001ac0 <_ZN7MecanumC1Ev+0x58>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	DC_motor_init();
 8001aa6:	f7fe ffa5 	bl	80009f4 <_Z13DC_motor_initv>
}
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	cccccccd 	.word	0xcccccccd
 8001abc:	4020cccc 	.word	0x4020cccc
 8001ac0:	39581062 	.word	0x39581062
 8001ac4:	400d48b4 	.word	0x400d48b4
 8001ac8:	40270000 	.word	0x40270000

08001acc <_ZN7Mecanum3runEv>:

// calculate wheel (-> PID) -> calculate car -> pub
void Mecanum::run(void){
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	tf2_wheel_speed();
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f807 	bl	8001ae8 <_ZN7Mecanum15tf2_wheel_speedEv>
	tf2_car_speed();
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f89a 	bl	8001c14 <_ZN7Mecanum13tf2_car_speedEv>
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_ZN7Mecanum15tf2_wheel_speedEv>:


// alter wheel speed
void Mecanum::tf2_wheel_speed(void){
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	fl.rps_goal = -(CAR_Goal.Vy + CAR_Goal.Vx - CAR_Goal.Omega*(a+b) )/radius;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	ed93 6b02 	vldr	d6, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	ed93 7b00 	vldr	d7, [r3]
 8001afc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	ed93 5b04 	vldr	d5, [r3, #16]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001b12:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001b16:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b1e:	eeb1 5b47 	vneg.f64	d5, d7
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8001b28:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b2c:	4b35      	ldr	r3, [pc, #212]	; (8001c04 <_ZN7Mecanum15tf2_wheel_speedEv+0x11c>)
 8001b2e:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	fr.rps_goal = -(CAR_Goal.Vy - CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	ed93 6b02 	vldr	d6, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	ed93 7b00 	vldr	d7, [r3]
 8001b3e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	ed93 5b04 	vldr	d5, [r3, #16]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001b54:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001b58:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b60:	eeb1 5b47 	vneg.f64	d5, d7
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8001b6a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b6e:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <_ZN7Mecanum15tf2_wheel_speedEv+0x120>)
 8001b70:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	bl.rps_goal = -(CAR_Goal.Vy - CAR_Goal.Vx - CAR_Goal.Omega*(a+b) )/radius;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	ed93 6b02 	vldr	d6, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	ed93 7b00 	vldr	d7, [r3]
 8001b80:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	ed93 5b04 	vldr	d5, [r3, #16]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001b96:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001b9a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b9e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ba2:	eeb1 5b47 	vneg.f64	d5, d7
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8001bac:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001bb0:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <_ZN7Mecanum15tf2_wheel_speedEv+0x124>)
 8001bb2:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	br.rps_goal = -(CAR_Goal.Vy + CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	ed93 6b02 	vldr	d6, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	ed93 7b00 	vldr	d7, [r3]
 8001bc2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	ed93 5b04 	vldr	d5, [r3, #16]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001bd8:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001bdc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001be0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001be4:	eeb1 5b47 	vneg.f64	d5, d7
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8001bee:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001bf2:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <_ZN7Mecanum15tf2_wheel_speedEv+0x128>)
 8001bf4:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	24000110 	.word	0x24000110
 8001c08:	240000a0 	.word	0x240000a0
 8001c0c:	240001f0 	.word	0x240001f0
 8001c10:	24000180 	.word	0x24000180

08001c14 <_ZN7Mecanum13tf2_car_speedEv>:


// give current car speed
void Mecanum::tf2_car_speed(void){
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	CAR_Now.Vy = -(0.25)*radius*(fl.rps_now + fr.rps_now + bl.rps_now + br.rps_now);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001c22:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 8001c26:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c2a:	4b33      	ldr	r3, [pc, #204]	; (8001cf8 <_ZN7Mecanum13tf2_car_speedEv+0xe4>)
 8001c2c:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001c30:	4b32      	ldr	r3, [pc, #200]	; (8001cfc <_ZN7Mecanum13tf2_car_speedEv+0xe8>)
 8001c32:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001c36:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001c3a:	4b31      	ldr	r3, [pc, #196]	; (8001d00 <_ZN7Mecanum13tf2_car_speedEv+0xec>)
 8001c3c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001c40:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001c44:	4b2f      	ldr	r3, [pc, #188]	; (8001d04 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 8001c46:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001c4a:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001c4e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	ed83 7b08 	vstr	d7, [r3, #32]
	CAR_Now.Vx = -(0.25)*radius*(fl.rps_now - fr.rps_now - bl.rps_now + br.rps_now);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001c5e:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 8001c62:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c66:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <_ZN7Mecanum13tf2_car_speedEv+0xe4>)
 8001c68:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001c6c:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <_ZN7Mecanum13tf2_car_speedEv+0xe8>)
 8001c6e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001c72:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001c76:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <_ZN7Mecanum13tf2_car_speedEv+0xec>)
 8001c78:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001c7c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001c80:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 8001c82:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001c86:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001c8a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	ed83 7b06 	vstr	d7, [r3, #24]
	CAR_Now.Omega = -(0.25)*radius*(1/(a+b))*(-fl.rps_now + fr.rps_now - bl.rps_now + br.rps_now);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001c9a:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 8001c9e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001cae:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001cb2:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8001cb6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001cba:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <_ZN7Mecanum13tf2_car_speedEv+0xe8>)
 8001cc0:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <_ZN7Mecanum13tf2_car_speedEv+0xe4>)
 8001cc6:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001cca:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <_ZN7Mecanum13tf2_car_speedEv+0xec>)
 8001cd0:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001cd4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 8001cda:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001cde:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001ce2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	24000110 	.word	0x24000110
 8001cfc:	240000a0 	.word	0x240000a0
 8001d00:	240001f0 	.word	0x240001f0
 8001d04:	24000180 	.word	0x24000180

08001d08 <_Z41__static_initialization_and_destruction_0ii>:
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d107      	bne.n	8001d28 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d102      	bne.n	8001d28 <_Z41__static_initialization_and_destruction_0ii+0x20>
Mecanum mecanum;
 8001d22:	4803      	ldr	r0, [pc, #12]	; (8001d30 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001d24:	f7ff fea0 	bl	8001a68 <_ZN7MecanumC1Ev>
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	24000748 	.word	0x24000748

08001d34 <_GLOBAL__sub_I_mecanum>:
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f7ff ffe3 	bl	8001d08 <_Z41__static_initialization_and_destruction_0ii>
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <_ZN7MYRESET7receiveEv>:
	int state=0;
}

int apple =0, banana=0, cookie=0;

void MYRESET::receive(void){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0

	apple = HAL_GPIO_ReadPin(FIRST_PART_PORT, FIRST_PART_PIN);
 8001d48:	2108      	movs	r1, #8
 8001d4a:	4825      	ldr	r0, [pc, #148]	; (8001de0 <_ZN7MYRESET7receiveEv+0x9c>)
 8001d4c:	f008 f8de 	bl	8009f0c <HAL_GPIO_ReadPin>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <_ZN7MYRESET7receiveEv+0xa0>)
 8001d56:	601a      	str	r2, [r3, #0]
	banana = apple;
 8001d58:	4b22      	ldr	r3, [pc, #136]	; (8001de4 <_ZN7MYRESET7receiveEv+0xa0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a22      	ldr	r2, [pc, #136]	; (8001de8 <_ZN7MYRESET7receiveEv+0xa4>)
 8001d5e:	6013      	str	r3, [r2, #0]
	if(banana!=apple)cookie++;
 8001d60:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <_ZN7MYRESET7receiveEv+0xa4>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <_ZN7MYRESET7receiveEv+0xa0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d004      	beq.n	8001d76 <_ZN7MYRESET7receiveEv+0x32>
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <_ZN7MYRESET7receiveEv+0xa8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	4a1e      	ldr	r2, [pc, #120]	; (8001dec <_ZN7MYRESET7receiveEv+0xa8>)
 8001d74:	6013      	str	r3, [r2, #0]

	/* first part*/
	if (HAL_GPIO_ReadPin(THIRD_PART_PORT, THIRD_PART_PIN) == 0)MYRESET::state=3;
 8001d76:	2102      	movs	r1, #2
 8001d78:	481d      	ldr	r0, [pc, #116]	; (8001df0 <_ZN7MYRESET7receiveEv+0xac>)
 8001d7a:	f008 f8c7 	bl	8009f0c <HAL_GPIO_ReadPin>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bf0c      	ite	eq
 8001d84:	2301      	moveq	r3, #1
 8001d86:	2300      	movne	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <_ZN7MYRESET7receiveEv+0x52>
 8001d8e:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <_ZN7MYRESET7receiveEv+0xb0>)
 8001d90:	2203      	movs	r2, #3
 8001d92:	601a      	str	r2, [r3, #0]

	/* third part*/
	else if (HAL_GPIO_ReadPin(FIRST_PART_PORT, FIRST_PART_PIN) == 0) MYRESET::state=1;

	else MYRESET::state=0;
}
 8001d94:	e022      	b.n	8001ddc <_ZN7MYRESET7receiveEv+0x98>
	else if (HAL_GPIO_ReadPin(SECOND_PART_PORT, SECOND_PART_PIN) == 0) MYRESET::state=2;
 8001d96:	2101      	movs	r1, #1
 8001d98:	4815      	ldr	r0, [pc, #84]	; (8001df0 <_ZN7MYRESET7receiveEv+0xac>)
 8001d9a:	f008 f8b7 	bl	8009f0c <HAL_GPIO_ReadPin>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	bf0c      	ite	eq
 8001da4:	2301      	moveq	r3, #1
 8001da6:	2300      	movne	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <_ZN7MYRESET7receiveEv+0x72>
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <_ZN7MYRESET7receiveEv+0xb0>)
 8001db0:	2202      	movs	r2, #2
 8001db2:	601a      	str	r2, [r3, #0]
}
 8001db4:	e012      	b.n	8001ddc <_ZN7MYRESET7receiveEv+0x98>
	else if (HAL_GPIO_ReadPin(FIRST_PART_PORT, FIRST_PART_PIN) == 0) MYRESET::state=1;
 8001db6:	2108      	movs	r1, #8
 8001db8:	4809      	ldr	r0, [pc, #36]	; (8001de0 <_ZN7MYRESET7receiveEv+0x9c>)
 8001dba:	f008 f8a7 	bl	8009f0c <HAL_GPIO_ReadPin>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2301      	moveq	r3, #1
 8001dc6:	2300      	movne	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <_ZN7MYRESET7receiveEv+0x92>
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <_ZN7MYRESET7receiveEv+0xb0>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
}
 8001dd4:	e002      	b.n	8001ddc <_ZN7MYRESET7receiveEv+0x98>
	else MYRESET::state=0;
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <_ZN7MYRESET7receiveEv+0xb0>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	58021400 	.word	0x58021400
 8001de4:	240007ac 	.word	0x240007ac
 8001de8:	240007b0 	.word	0x240007b0
 8001dec:	240007b4 	.word	0x240007b4
 8001df0:	58020800 	.word	0x58020800
 8001df4:	240007a8 	.word	0x240007a8

08001df8 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <_ZN3ros3MsgC1Ev+0x1c>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	08011460 	.word	0x08011460

08001e3c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
      data()
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ffe8 	bl	8001e1c <_ZN3ros3MsgC1Ev>
 8001e4c:	4a06      	ldr	r2, [pc, #24]	; (8001e68 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3304      	adds	r3, #4
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ffce 	bl	8001df8 <_ZN3ros4TimeC1Ev>
    {
    }
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	08011448 	.word	0x08011448

08001e6c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6859      	ldr	r1, [r3, #4]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	b2ca      	uxtb	r2, r1
 8001e86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	0a19      	lsrs	r1, r3, #8
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	3301      	adds	r3, #1
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	4413      	add	r3, r2
 8001e96:	b2ca      	uxtb	r2, r1
 8001e98:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	0c19      	lsrs	r1, r3, #16
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	b2ca      	uxtb	r2, r1
 8001eaa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	0e19      	lsrs	r1, r3, #24
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	3303      	adds	r3, #3
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	4413      	add	r3, r2
 8001eba:	b2ca      	uxtb	r2, r1
 8001ebc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6899      	ldr	r1, [r3, #8]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	4413      	add	r3, r2
 8001ece:	b2ca      	uxtb	r2, r1
 8001ed0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	0a19      	lsrs	r1, r3, #8
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3301      	adds	r3, #1
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	b2ca      	uxtb	r2, r1
 8001ee2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	0c19      	lsrs	r1, r3, #16
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	3302      	adds	r3, #2
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	b2ca      	uxtb	r2, r1
 8001ef4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	0e19      	lsrs	r1, r3, #24
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	3303      	adds	r3, #3
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	b2ca      	uxtb	r2, r1
 8001f06:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	60fb      	str	r3, [r7, #12]
      return offset;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
    }
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	6839      	ldr	r1, [r7, #0]
 8001f42:	440b      	add	r3, r1
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	021b      	lsls	r3, r3, #8
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	3302      	adds	r3, #2
 8001f56:	6839      	ldr	r1, [r7, #0]
 8001f58:	440b      	add	r3, r1
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	041b      	lsls	r3, r3, #16
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	3303      	adds	r3, #3
 8001f6c:	6839      	ldr	r1, [r7, #0]
 8001f6e:	440b      	add	r3, r1
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	061b      	lsls	r3, r3, #24
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	4413      	add	r3, r2
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	3301      	adds	r3, #1
 8001f96:	6839      	ldr	r1, [r7, #0]
 8001f98:	440b      	add	r3, r1
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	021b      	lsls	r3, r3, #8
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	3302      	adds	r3, #2
 8001fac:	6839      	ldr	r1, [r7, #0]
 8001fae:	440b      	add	r3, r1
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	041b      	lsls	r3, r3, #16
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3303      	adds	r3, #3
 8001fc2:	6839      	ldr	r1, [r7, #0]
 8001fc4:	440b      	add	r3, r1
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	061b      	lsls	r3, r3, #24
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	60fb      	str	r3, [r7, #12]
     return offset;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
    }
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	08011160 	.word	0x08011160

08002000 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	4b03      	ldr	r3, [pc, #12]	; (8002018 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	08011170 	.word	0x08011170

0800201c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fef8 	bl	8001e1c <_ZN3ros3MsgC1Ev>
 800202c:	4a0b      	ldr	r2, [pc, #44]	; (800205c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	809a      	strh	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a09      	ldr	r2, [pc, #36]	; (8002060 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a07      	ldr	r2, [pc, #28]	; (8002060 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002042:	60da      	str	r2, [r3, #12]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a06      	ldr	r2, [pc, #24]	; (8002060 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002048:	611a      	str	r2, [r3, #16]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	615a      	str	r2, [r3, #20]
    {
    }
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	08011430 	.word	0x08011430
 8002060:	08011194 	.word	0x08011194

08002064 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	8899      	ldrh	r1, [r3, #4]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	4413      	add	r3, r2
 800207c:	b2ca      	uxtb	r2, r1
 800207e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	889b      	ldrh	r3, [r3, #4]
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	b299      	uxth	r1, r3
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	3301      	adds	r3, #1
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	4413      	add	r3, r2
 8002090:	b2ca      	uxtb	r2, r1
 8002092:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	3302      	adds	r3, #2
 8002098:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe f936 	bl	8000310 <strlen>
 80020a4:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	69b9      	ldr	r1, [r7, #24]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f001 fea2 	bl	8003df8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	3304      	adds	r3, #4
 80020b8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	18d0      	adds	r0, r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4619      	mov	r1, r3
 80020c8:	f00e fea4 	bl	8010e14 <memcpy>
      offset += length_topic_name;
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	4413      	add	r3, r2
 80020d2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe f919 	bl	8000310 <strlen>
 80020de:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	4413      	add	r3, r2
 80020e6:	6979      	ldr	r1, [r7, #20]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f001 fe85 	bl	8003df8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3304      	adds	r3, #4
 80020f2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	18d0      	adds	r0, r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4619      	mov	r1, r3
 8002102:	f00e fe87 	bl	8010e14 <memcpy>
      offset += length_message_type;
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	4413      	add	r3, r2
 800210c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe f8fc 	bl	8000310 <strlen>
 8002118:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	4413      	add	r3, r2
 8002120:	6939      	ldr	r1, [r7, #16]
 8002122:	4618      	mov	r0, r3
 8002124:	f001 fe68 	bl	8003df8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	3304      	adds	r3, #4
 800212c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	18d0      	adds	r0, r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4619      	mov	r1, r3
 800213c:	f00e fe6a 	bl	8010e14 <memcpy>
      offset += length_md5sum;
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800214e:	68f9      	ldr	r1, [r7, #12]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	4413      	add	r3, r2
 8002156:	b2ca      	uxtb	r2, r1
 8002158:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	0a19      	lsrs	r1, r3, #8
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3301      	adds	r3, #1
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	4413      	add	r3, r2
 8002166:	b2ca      	uxtb	r2, r1
 8002168:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	0c19      	lsrs	r1, r3, #16
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3302      	adds	r3, #2
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	4413      	add	r3, r2
 8002176:	b2ca      	uxtb	r2, r1
 8002178:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	0e19      	lsrs	r1, r3, #24
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3303      	adds	r3, #3
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	4413      	add	r3, r2
 8002186:	b2ca      	uxtb	r2, r1
 8002188:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3304      	adds	r3, #4
 800218e:	61fb      	str	r3, [r7, #28]
      return offset;
 8002190:	69fb      	ldr	r3, [r7, #28]
    }
 8002192:	4618      	mov	r0, r3
 8002194:	3720      	adds	r7, #32
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800219a:	b580      	push	{r7, lr}
 800219c:	b08a      	sub	sp, #40	; 0x28
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	4413      	add	r3, r2
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	889b      	ldrh	r3, [r3, #4]
 80021ba:	b21a      	sxth	r2, r3
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	3301      	adds	r3, #1
 80021c0:	6839      	ldr	r1, [r7, #0]
 80021c2:	440b      	add	r3, r1
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	b21b      	sxth	r3, r3
 80021ca:	4313      	orrs	r3, r2
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	3302      	adds	r3, #2
 80021d8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	441a      	add	r2, r3
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	4611      	mov	r1, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f001 fe24 	bl	8003e34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	3304      	adds	r3, #4
 80021f0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	4413      	add	r3, r2
 80021fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021fe:	429a      	cmp	r2, r3
 8002200:	d20c      	bcs.n	800221c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	441a      	add	r2, r3
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	3b01      	subs	r3, #1
 800220c:	6839      	ldr	r1, [r7, #0]
 800220e:	440b      	add	r3, r1
 8002210:	7812      	ldrb	r2, [r2, #0]
 8002212:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	3301      	adds	r3, #1
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
 800221a:	e7ec      	b.n	80021f6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	4413      	add	r3, r2
 8002222:	3b01      	subs	r3, #1
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	4413      	add	r3, r2
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	3b01      	subs	r3, #1
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	441a      	add	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	4413      	add	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	441a      	add	r2, r3
 8002246:	f107 0310 	add.w	r3, r7, #16
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f001 fdf1 	bl	8003e34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	3304      	adds	r3, #4
 8002256:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	623b      	str	r3, [r7, #32]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4413      	add	r3, r2
 8002262:	6a3a      	ldr	r2, [r7, #32]
 8002264:	429a      	cmp	r2, r3
 8002266:	d20c      	bcs.n	8002282 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	441a      	add	r2, r3
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	3b01      	subs	r3, #1
 8002272:	6839      	ldr	r1, [r7, #0]
 8002274:	440b      	add	r3, r1
 8002276:	7812      	ldrb	r2, [r2, #0]
 8002278:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	3301      	adds	r3, #1
 800227e:	623b      	str	r3, [r7, #32]
 8002280:	e7ec      	b.n	800225c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4413      	add	r3, r2
 8002288:	3b01      	subs	r3, #1
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	4413      	add	r3, r2
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	3b01      	subs	r3, #1
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	441a      	add	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4413      	add	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	441a      	add	r2, r3
 80022ac:	f107 030c 	add.w	r3, r7, #12
 80022b0:	4611      	mov	r1, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f001 fdbe 	bl	8003e34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	3304      	adds	r3, #4
 80022bc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4413      	add	r3, r2
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d20c      	bcs.n	80022e8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	441a      	add	r2, r3
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	6839      	ldr	r1, [r7, #0]
 80022da:	440b      	add	r3, r1
 80022dc:	7812      	ldrb	r2, [r2, #0]
 80022de:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	3301      	adds	r3, #1
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	e7ec      	b.n	80022c2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4413      	add	r3, r2
 80022ee:	3b01      	subs	r3, #1
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	441a      	add	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4413      	add	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	6839      	ldr	r1, [r7, #0]
 8002316:	440a      	add	r2, r1
 8002318:	7812      	ldrb	r2, [r2, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	3301      	adds	r3, #1
 8002324:	6839      	ldr	r1, [r7, #0]
 8002326:	440b      	add	r3, r1
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	021b      	lsls	r3, r3, #8
 800232c:	4313      	orrs	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	3302      	adds	r3, #2
 8002336:	6839      	ldr	r1, [r7, #0]
 8002338:	440b      	add	r3, r1
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	041b      	lsls	r3, r3, #16
 800233e:	4313      	orrs	r3, r2
 8002340:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	3303      	adds	r3, #3
 8002348:	6839      	ldr	r1, [r7, #0]
 800234a:	440b      	add	r3, r1
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	061b      	lsls	r3, r3, #24
 8002350:	4313      	orrs	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	3304      	adds	r3, #4
 800235e:	61bb      	str	r3, [r7, #24]
     return offset;
 8002360:	69bb      	ldr	r3, [r7, #24]
    }
 8002362:	4618      	mov	r0, r3
 8002364:	3728      	adds	r7, #40	; 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	08011198 	.word	0x08011198

08002388 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	080111b4 	.word	0x080111b4

080023a4 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fd34 	bl	8001e1c <_ZN3ros3MsgC1Ev>
 80023b4:	4a06      	ldr	r2, [pc, #24]	; (80023d0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	711a      	strb	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80023c4:	609a      	str	r2, [r3, #8]
    {
    }
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	08011418 	.word	0x08011418
 80023d4:	08011194 	.word	0x08011194

080023d8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	7912      	ldrb	r2, [r2, #4]
 80023f0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3301      	adds	r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fd ff87 	bl	8000310 <strlen>
 8002402:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	4413      	add	r3, r2
 800240a:	68b9      	ldr	r1, [r7, #8]
 800240c:	4618      	mov	r0, r3
 800240e:	f001 fcf3 	bl	8003df8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	3304      	adds	r3, #4
 8002416:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	18d0      	adds	r0, r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	4619      	mov	r1, r3
 8002426:	f00e fcf5 	bl	8010e14 <memcpy>
      offset += length_msg;
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	4413      	add	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
      return offset;
 8002432:	68fb      	ldr	r3, [r7, #12]
    }
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	4413      	add	r3, r2
 8002450:	781a      	ldrb	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	3301      	adds	r3, #1
 800245a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	441a      	add	r2, r3
 8002462:	f107 030c 	add.w	r3, r7, #12
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f001 fce3 	bl	8003e34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	3304      	adds	r3, #4
 8002472:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4413      	add	r3, r2
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	429a      	cmp	r2, r3
 8002482:	d20c      	bcs.n	800249e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	441a      	add	r2, r3
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	3b01      	subs	r3, #1
 800248e:	6839      	ldr	r1, [r7, #0]
 8002490:	440b      	add	r3, r1
 8002492:	7812      	ldrb	r2, [r2, #0]
 8002494:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3301      	adds	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	e7ec      	b.n	8002478 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	3b01      	subs	r3, #1
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	4413      	add	r3, r2
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	441a      	add	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4413      	add	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
     return offset;
 80024c2:	693b      	ldr	r3, [r7, #16]
    }
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	080111d8 	.word	0x080111d8

080024e8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	080111ec 	.word	0x080111ec

08002504 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fc84 	bl	8001e1c <_ZN3ros3MsgC1Ev>
 8002514:	4a0c      	ldr	r2, [pc, #48]	; (8002548 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	619a      	str	r2, [r3, #24]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	61da      	str	r2, [r3, #28]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	08011400 	.word	0x08011400

0800254c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	; 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6859      	ldr	r1, [r3, #4]
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	4413      	add	r3, r2
 8002564:	b2ca      	uxtb	r2, r1
 8002566:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	0a19      	lsrs	r1, r3, #8
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	3301      	adds	r3, #1
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	4413      	add	r3, r2
 8002576:	b2ca      	uxtb	r2, r1
 8002578:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	0c19      	lsrs	r1, r3, #16
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	3302      	adds	r3, #2
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	4413      	add	r3, r2
 8002588:	b2ca      	uxtb	r2, r1
 800258a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	0e19      	lsrs	r1, r3, #24
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	3303      	adds	r3, #3
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	4413      	add	r3, r2
 800259a:	b2ca      	uxtb	r2, r1
 800259c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	3304      	adds	r3, #4
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80025a4:	2300      	movs	r3, #0
 80025a6:	623b      	str	r3, [r7, #32]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	6a3a      	ldr	r2, [r7, #32]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d22b      	bcs.n	800260a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80025c0:	6939      	ldr	r1, [r7, #16]
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	b2ca      	uxtb	r2, r1
 80025ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	0a19      	lsrs	r1, r3, #8
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	3301      	adds	r3, #1
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	b2ca      	uxtb	r2, r1
 80025da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	0c19      	lsrs	r1, r3, #16
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	3302      	adds	r3, #2
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	b2ca      	uxtb	r2, r1
 80025ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	0e19      	lsrs	r1, r3, #24
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	3303      	adds	r3, #3
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	4413      	add	r3, r2
 80025f8:	b2ca      	uxtb	r2, r1
 80025fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	3304      	adds	r3, #4
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	3301      	adds	r3, #1
 8002606:	623b      	str	r3, [r7, #32]
 8002608:	e7ce      	b.n	80025a8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6919      	ldr	r1, [r3, #16]
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	4413      	add	r3, r2
 8002614:	b2ca      	uxtb	r2, r1
 8002616:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	0a19      	lsrs	r1, r3, #8
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	3301      	adds	r3, #1
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	4413      	add	r3, r2
 8002626:	b2ca      	uxtb	r2, r1
 8002628:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	0c19      	lsrs	r1, r3, #16
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	3302      	adds	r3, #2
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	4413      	add	r3, r2
 8002638:	b2ca      	uxtb	r2, r1
 800263a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	0e19      	lsrs	r1, r3, #24
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	3303      	adds	r3, #3
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	4413      	add	r3, r2
 800264a:	b2ca      	uxtb	r2, r1
 800264c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	3304      	adds	r3, #4
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002654:	2300      	movs	r3, #0
 8002656:	61fb      	str	r3, [r7, #28]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	429a      	cmp	r2, r3
 8002660:	d22b      	bcs.n	80026ba <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699a      	ldr	r2, [r3, #24]
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002670:	68f9      	ldr	r1, [r7, #12]
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	4413      	add	r3, r2
 8002678:	b2ca      	uxtb	r2, r1
 800267a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	0a19      	lsrs	r1, r3, #8
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	3301      	adds	r3, #1
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	4413      	add	r3, r2
 8002688:	b2ca      	uxtb	r2, r1
 800268a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	0c19      	lsrs	r1, r3, #16
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	3302      	adds	r3, #2
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	4413      	add	r3, r2
 8002698:	b2ca      	uxtb	r2, r1
 800269a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	0e19      	lsrs	r1, r3, #24
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	3303      	adds	r3, #3
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	4413      	add	r3, r2
 80026a8:	b2ca      	uxtb	r2, r1
 80026aa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	3304      	adds	r3, #4
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	e7ce      	b.n	8002658 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69d9      	ldr	r1, [r3, #28]
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	4413      	add	r3, r2
 80026c4:	b2ca      	uxtb	r2, r1
 80026c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	0a19      	lsrs	r1, r3, #8
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	3301      	adds	r3, #1
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	4413      	add	r3, r2
 80026d6:	b2ca      	uxtb	r2, r1
 80026d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	0c19      	lsrs	r1, r3, #16
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	3302      	adds	r3, #2
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	4413      	add	r3, r2
 80026e8:	b2ca      	uxtb	r2, r1
 80026ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	0e19      	lsrs	r1, r3, #24
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	3303      	adds	r3, #3
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	4413      	add	r3, r2
 80026fa:	b2ca      	uxtb	r2, r1
 80026fc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	3304      	adds	r3, #4
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002704:	2300      	movs	r3, #0
 8002706:	61bb      	str	r3, [r7, #24]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	429a      	cmp	r2, r3
 8002710:	d228      	bcs.n	8002764 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f7fd fdf6 	bl	8000310 <strlen>
 8002724:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	4413      	add	r3, r2
 800272c:	6979      	ldr	r1, [r7, #20]
 800272e:	4618      	mov	r0, r3
 8002730:	f001 fb62 	bl	8003df8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	3304      	adds	r3, #4
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	18d0      	adds	r0, r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4619      	mov	r1, r3
 8002750:	f00e fb60 	bl	8010e14 <memcpy>
      offset += length_stringsi;
 8002754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	4413      	add	r3, r2
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	3301      	adds	r3, #1
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	e7d1      	b.n	8002708 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002766:	4618      	mov	r0, r3
 8002768:	3728      	adds	r7, #40	; 0x28
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800276e:	b580      	push	{r7, lr}
 8002770:	b08e      	sub	sp, #56	; 0x38
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800277c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	4413      	add	r3, r2
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002788:	3301      	adds	r3, #1
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	4413      	add	r3, r2
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	021b      	lsls	r3, r3, #8
 8002792:	6a3a      	ldr	r2, [r7, #32]
 8002794:	4313      	orrs	r3, r2
 8002796:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279a:	3302      	adds	r3, #2
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	4413      	add	r3, r2
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	041b      	lsls	r3, r3, #16
 80027a4:	6a3a      	ldr	r2, [r7, #32]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80027aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ac:	3303      	adds	r3, #3
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	4413      	add	r3, r2
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	061b      	lsls	r3, r3, #24
 80027b6:	6a3a      	ldr	r2, [r7, #32]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80027bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027be:	3304      	adds	r3, #4
 80027c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	6a3a      	ldr	r2, [r7, #32]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d90a      	bls.n	80027e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4619      	mov	r1, r3
 80027d6:	4610      	mov	r0, r2
 80027d8:	f00e fb32 	bl	8010e40 <realloc>
 80027dc:	4602      	mov	r2, r0
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a3a      	ldr	r2, [r7, #32]
 80027e6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80027e8:	2300      	movs	r3, #0
 80027ea:	633b      	str	r3, [r7, #48]	; 0x30
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d236      	bcs.n	8002864 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027fe:	6839      	ldr	r1, [r7, #0]
 8002800:	440a      	add	r2, r1
 8002802:	7812      	ldrb	r2, [r2, #0]
 8002804:	4313      	orrs	r3, r2
 8002806:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280c:	3301      	adds	r3, #1
 800280e:	6839      	ldr	r1, [r7, #0]
 8002810:	440b      	add	r3, r1
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	021b      	lsls	r3, r3, #8
 8002816:	4313      	orrs	r3, r2
 8002818:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281e:	3302      	adds	r3, #2
 8002820:	6839      	ldr	r1, [r7, #0]
 8002822:	440b      	add	r3, r1
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	041b      	lsls	r3, r3, #16
 8002828:	4313      	orrs	r3, r2
 800282a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002830:	3303      	adds	r3, #3
 8002832:	6839      	ldr	r1, [r7, #0]
 8002834:	440b      	add	r3, r1
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	061b      	lsls	r3, r3, #24
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002846:	3304      	adds	r3, #4
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	3208      	adds	r2, #8
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800285c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285e:	3301      	adds	r3, #1
 8002860:	633b      	str	r3, [r7, #48]	; 0x30
 8002862:	e7c3      	b.n	80027ec <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	4413      	add	r3, r2
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800286e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002870:	3301      	adds	r3, #1
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	4413      	add	r3, r2
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	4313      	orrs	r3, r2
 800287e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002882:	3302      	adds	r3, #2
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	4413      	add	r3, r2
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	041b      	lsls	r3, r3, #16
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	4313      	orrs	r3, r2
 8002890:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002894:	3303      	adds	r3, #3
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	4413      	add	r3, r2
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	061b      	lsls	r3, r3, #24
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80028a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a6:	3304      	adds	r3, #4
 80028a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d90a      	bls.n	80028ca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699a      	ldr	r2, [r3, #24]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4619      	mov	r1, r3
 80028be:	4610      	mov	r0, r2
 80028c0:	f00e fabe 	bl	8010e40 <realloc>
 80028c4:	4602      	mov	r2, r0
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80028d0:	2300      	movs	r3, #0
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028da:	429a      	cmp	r2, r3
 80028dc:	d236      	bcs.n	800294c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028e6:	6839      	ldr	r1, [r7, #0]
 80028e8:	440a      	add	r2, r1
 80028ea:	7812      	ldrb	r2, [r2, #0]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f4:	3301      	adds	r3, #1
 80028f6:	6839      	ldr	r1, [r7, #0]
 80028f8:	440b      	add	r3, r1
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002906:	3302      	adds	r3, #2
 8002908:	6839      	ldr	r1, [r7, #0]
 800290a:	440b      	add	r3, r1
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	041b      	lsls	r3, r3, #16
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002918:	3303      	adds	r3, #3
 800291a:	6839      	ldr	r1, [r7, #0]
 800291c:	440b      	add	r3, r1
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	061b      	lsls	r3, r3, #24
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800292c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292e:	3304      	adds	r3, #4
 8002930:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	3214      	adds	r2, #20
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002946:	3301      	adds	r3, #1
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800294a:	e7c3      	b.n	80028d4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800294c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	4413      	add	r3, r2
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002958:	3301      	adds	r3, #1
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	4413      	add	r3, r2
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800296a:	3302      	adds	r3, #2
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	4413      	add	r3, r2
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	041b      	lsls	r3, r3, #16
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800297a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800297c:	3303      	adds	r3, #3
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	4413      	add	r3, r2
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	061b      	lsls	r3, r3, #24
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800298c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800298e:	3304      	adds	r3, #4
 8002990:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	429a      	cmp	r2, r3
 800299a:	d90a      	bls.n	80029b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4619      	mov	r1, r3
 80029a6:	4610      	mov	r0, r2
 80029a8:	f00e fa4a 	bl	8010e40 <realloc>
 80029ac:	4602      	mov	r2, r0
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80029b8:	2300      	movs	r3, #0
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d23f      	bcs.n	8002a46 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80029c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	441a      	add	r2, r3
 80029cc:	f107 030c 	add.w	r3, r7, #12
 80029d0:	4611      	mov	r1, r2
 80029d2:	4618      	mov	r0, r3
 80029d4:	f001 fa2e 	bl	8003e34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80029d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029da:	3304      	adds	r3, #4
 80029dc:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80029de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
 80029e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4413      	add	r3, r2
 80029e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d20c      	bcs.n	8002a08 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	441a      	add	r2, r3
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	3b01      	subs	r3, #1
 80029f8:	6839      	ldr	r1, [r7, #0]
 80029fa:	440b      	add	r3, r1
 80029fc:	7812      	ldrb	r2, [r2, #0]
 80029fe:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	3301      	adds	r3, #1
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
 8002a06:	e7ec      	b.n	80029e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002a08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	4413      	add	r3, r2
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	441a      	add	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002a24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4413      	add	r3, r2
 8002a2a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	3220      	adds	r2, #32
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a40:	3301      	adds	r3, #1
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a44:	e7ba      	b.n	80029bc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3738      	adds	r7, #56	; 0x38
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	0801133c 	.word	0x0801133c

08002a6c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	4b03      	ldr	r3, [pc, #12]	; (8002a84 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	08011210 	.word	0x08011210

08002a88 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	611a      	str	r2, [r3, #16]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68d8      	ldr	r0, [r3, #12]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6891      	ldr	r1, [r2, #8]
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	4798      	blx	r3
 8002ad4:	4603      	mov	r3, r0
  };
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
  }
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a42      	ldr	r2, [pc, #264]	; (8002c14 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d068      	beq.n	8002be0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a40      	ldr	r2, [pc, #256]	; (8002c18 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d061      	beq.n	8002be0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a3d      	ldr	r2, [pc, #244]	; (8002c1c <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d05a      	beq.n	8002be0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a3b      	ldr	r2, [pc, #236]	; (8002c20 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d053      	beq.n	8002be0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a38      	ldr	r2, [pc, #224]	; (8002c24 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d04c      	beq.n	8002be0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a36      	ldr	r2, [pc, #216]	; (8002c28 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d045      	beq.n	8002be0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a33      	ldr	r2, [pc, #204]	; (8002c2c <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d03e      	beq.n	8002be0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a31      	ldr	r2, [pc, #196]	; (8002c30 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d037      	beq.n	8002be0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a2e      	ldr	r2, [pc, #184]	; (8002c34 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d030      	beq.n	8002be0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a2c      	ldr	r2, [pc, #176]	; (8002c38 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d029      	beq.n	8002be0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a29      	ldr	r2, [pc, #164]	; (8002c3c <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d022      	beq.n	8002be0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a27      	ldr	r2, [pc, #156]	; (8002c40 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d01b      	beq.n	8002be0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a24      	ldr	r2, [pc, #144]	; (8002c44 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d014      	beq.n	8002be0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a22      	ldr	r2, [pc, #136]	; (8002c48 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d00d      	beq.n	8002be0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1f      	ldr	r2, [pc, #124]	; (8002c4c <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d006      	beq.n	8002be0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a1d      	ldr	r2, [pc, #116]	; (8002c50 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d109      	bne.n	8002bf4 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002bee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bf2:	e008      	b.n	8002c06 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002c02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40020010 	.word	0x40020010
 8002c18:	40020028 	.word	0x40020028
 8002c1c:	40020040 	.word	0x40020040
 8002c20:	40020058 	.word	0x40020058
 8002c24:	40020070 	.word	0x40020070
 8002c28:	40020088 	.word	0x40020088
 8002c2c:	400200a0 	.word	0x400200a0
 8002c30:	400200b8 	.word	0x400200b8
 8002c34:	40020410 	.word	0x40020410
 8002c38:	40020428 	.word	0x40020428
 8002c3c:	40020440 	.word	0x40020440
 8002c40:	40020458 	.word	0x40020458
 8002c44:	40020470 	.word	0x40020470
 8002c48:	40020488 	.word	0x40020488
 8002c4c:	400204a0 	.word	0x400204a0
 8002c50:	400204b8 	.word	0x400204b8

08002c54 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <_ZN13STM32HardwareC1Ev+0x34>)
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
    }
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	240005c4 	.word	0x240005c4

08002c8c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f804 	bl	8002ca2 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f00b faa8 	bl	800e20c <HAL_UART_Receive_DMA>
    }
 8002cbc:	bf00      	nop
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002cc4:	b590      	push	{r4, r7, lr}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd0:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff ff0d 	bl	8002af8 <_ZN13STM32Hardware10getRdmaIndEv>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	429c      	cmp	r4, r3
 8002ce2:	bf14      	ite	ne
 8002ce4:	2301      	movne	r3, #1
 8002ce6:	2300      	moveq	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d012      	beq.n	8002d14 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002cf4:	1c59      	adds	r1, r3, #1
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	4413      	add	r3, r2
 8002d00:	791b      	ldrb	r3, [r3, #4]
 8002d02:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002d0a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      }
      return c;
 8002d14:	68fb      	ldr	r3, [r7, #12]
    }
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd90      	pop	{r4, r7, pc}
	...

08002d20 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d108      	bne.n	8002d46 <_ZN13STM32Hardware5flushEv+0x26>
 8002d34:	4b27      	ldr	r3, [pc, #156]	; (8002dd4 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	f083 0301 	eor.w	r3, r3, #1
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <_ZN13STM32Hardware5flushEv+0x26>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <_ZN13STM32Hardware5flushEv+0x28>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d03f      	beq.n	8002dcc <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002d4c:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d031      	beq.n	8002dc6 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d20a      	bcs.n	8002d88 <_ZN13STM32Hardware5flushEv+0x68>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	e006      	b.n	8002d96 <_ZN13STM32Hardware5flushEv+0x76>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002da2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	4413      	add	r3, r2
 8002daa:	89fa      	ldrh	r2, [r7, #14]
 8002dac:	4619      	mov	r1, r3
 8002dae:	f00b f99b 	bl	800e0e8 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8002db8:	89fb      	ldrh	r3, [r7, #14]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
        }
        mutex = false;
 8002dc6:	4b03      	ldr	r3, [pc, #12]	; (8002dd4 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
      }
    }
 8002dcc:	bf00      	nop
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	240007b8 	.word	0x240007b8

08002dd8 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
      int n = length;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dee:	bfa8      	it	ge
 8002df0:	f44f 6380 	movge.w	r3, #1024	; 0x400
 8002df4:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002dfc:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	4293      	cmp	r3, r2
 8002e04:	bf28      	it	cs
 8002e06:	4613      	movcs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002e10:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4413      	add	r3, r2
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f00d fff9 	bl	8010e14 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

      if(n != n_tail){
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d00b      	beq.n	8002e56 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	18d1      	adds	r1, r2, r3
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	461a      	mov	r2, r3
 8002e52:	f00d ffdf 	bl	8010e14 <memcpy>
      }

      flush();
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f7ff ff62 	bl	8002d20 <_ZN13STM32Hardware5flushEv>
    }
 8002e5c:	bf00      	nop
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	f003 ff2c 	bl	8006cc8 <HAL_GetTick>
 8002e70:	4603      	mov	r3, r0
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fe ffc8 	bl	8001e1c <_ZN3ros3MsgC1Ev>
 8002e8c:	4a0e      	ldr	r2, [pc, #56]	; (8002ec8 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	f04f 0300 	mov.w	r3, #0
 8002eaa:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	080113bc 	.word	0x080113bc

08002ecc <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002ecc:	b480      	push	{r7}
 8002ece:	b08b      	sub	sp, #44	; 0x2c
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ee0:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002ee4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ee8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eea:	6838      	ldr	r0, [r7, #0]
 8002eec:	4401      	add	r1, r0
 8002eee:	b2d3      	uxtb	r3, r2
 8002ef0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002ef2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	0a02      	lsrs	r2, r0, #8
 8002f00:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002f04:	0a0b      	lsrs	r3, r1, #8
 8002f06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f08:	3101      	adds	r1, #1
 8002f0a:	6838      	ldr	r0, [r7, #0]
 8002f0c:	4401      	add	r1, r0
 8002f0e:	b2d3      	uxtb	r3, r2
 8002f10:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002f12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	0c02      	lsrs	r2, r0, #16
 8002f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002f24:	0c0b      	lsrs	r3, r1, #16
 8002f26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f28:	3102      	adds	r1, #2
 8002f2a:	6838      	ldr	r0, [r7, #0]
 8002f2c:	4401      	add	r1, r0
 8002f2e:	b2d3      	uxtb	r3, r2
 8002f30:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002f32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	0e02      	lsrs	r2, r0, #24
 8002f40:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f44:	0e0b      	lsrs	r3, r1, #24
 8002f46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f48:	3103      	adds	r1, #3
 8002f4a:	6838      	ldr	r0, [r7, #0]
 8002f4c:	4401      	add	r1, r0
 8002f4e:	b2d3      	uxtb	r3, r2
 8002f50:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002f52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	000a      	movs	r2, r1
 8002f60:	2300      	movs	r3, #0
 8002f62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f64:	3104      	adds	r1, #4
 8002f66:	6838      	ldr	r0, [r7, #0]
 8002f68:	4401      	add	r1, r0
 8002f6a:	b2d3      	uxtb	r3, r2
 8002f6c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002f6e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	0a0a      	lsrs	r2, r1, #8
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f80:	3105      	adds	r1, #5
 8002f82:	6838      	ldr	r0, [r7, #0]
 8002f84:	4401      	add	r1, r0
 8002f86:	b2d3      	uxtb	r3, r2
 8002f88:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002f8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	0c0a      	lsrs	r2, r1, #16
 8002f98:	2300      	movs	r3, #0
 8002f9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f9c:	3106      	adds	r1, #6
 8002f9e:	6838      	ldr	r0, [r7, #0]
 8002fa0:	4401      	add	r1, r0
 8002fa2:	b2d3      	uxtb	r3, r2
 8002fa4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002fa6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	0e0a      	lsrs	r2, r1, #24
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fb8:	3107      	adds	r1, #7
 8002fba:	6838      	ldr	r0, [r7, #0]
 8002fbc:	4401      	add	r1, r0
 8002fbe:	b2d3      	uxtb	r3, r2
 8002fc0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	3308      	adds	r3, #8
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002fce:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002fd2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002fd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fd8:	6838      	ldr	r0, [r7, #0]
 8002fda:	4401      	add	r1, r0
 8002fdc:	b2d3      	uxtb	r3, r2
 8002fde:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002fe0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	0a02      	lsrs	r2, r0, #8
 8002fee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002ff2:	0a0b      	lsrs	r3, r1, #8
 8002ff4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ff6:	3101      	adds	r1, #1
 8002ff8:	6838      	ldr	r0, [r7, #0]
 8002ffa:	4401      	add	r1, r0
 8002ffc:	b2d3      	uxtb	r3, r2
 8002ffe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003000:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	0c02      	lsrs	r2, r0, #16
 800300e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003012:	0c0b      	lsrs	r3, r1, #16
 8003014:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003016:	3102      	adds	r1, #2
 8003018:	6838      	ldr	r0, [r7, #0]
 800301a:	4401      	add	r1, r0
 800301c:	b2d3      	uxtb	r3, r2
 800301e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003020:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	0e02      	lsrs	r2, r0, #24
 800302e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003032:	0e0b      	lsrs	r3, r1, #24
 8003034:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003036:	3103      	adds	r1, #3
 8003038:	6838      	ldr	r0, [r7, #0]
 800303a:	4401      	add	r1, r0
 800303c:	b2d3      	uxtb	r3, r2
 800303e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003040:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	000a      	movs	r2, r1
 800304e:	2300      	movs	r3, #0
 8003050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003052:	3104      	adds	r1, #4
 8003054:	6838      	ldr	r0, [r7, #0]
 8003056:	4401      	add	r1, r0
 8003058:	b2d3      	uxtb	r3, r2
 800305a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800305c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	0a0a      	lsrs	r2, r1, #8
 800306a:	2300      	movs	r3, #0
 800306c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800306e:	3105      	adds	r1, #5
 8003070:	6838      	ldr	r0, [r7, #0]
 8003072:	4401      	add	r1, r0
 8003074:	b2d3      	uxtb	r3, r2
 8003076:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003078:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	0c0a      	lsrs	r2, r1, #16
 8003086:	2300      	movs	r3, #0
 8003088:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800308a:	3106      	adds	r1, #6
 800308c:	6838      	ldr	r0, [r7, #0]
 800308e:	4401      	add	r1, r0
 8003090:	b2d3      	uxtb	r3, r2
 8003092:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003094:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	0e0a      	lsrs	r2, r1, #24
 80030a2:	2300      	movs	r3, #0
 80030a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030a6:	3107      	adds	r1, #7
 80030a8:	6838      	ldr	r0, [r7, #0]
 80030aa:	4401      	add	r1, r0
 80030ac:	b2d3      	uxtb	r3, r2
 80030ae:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	3308      	adds	r3, #8
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80030bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80030c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030c6:	6838      	ldr	r0, [r7, #0]
 80030c8:	4401      	add	r1, r0
 80030ca:	b2d3      	uxtb	r3, r2
 80030cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80030ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	0a02      	lsrs	r2, r0, #8
 80030dc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80030e0:	0a0b      	lsrs	r3, r1, #8
 80030e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030e4:	3101      	adds	r1, #1
 80030e6:	6838      	ldr	r0, [r7, #0]
 80030e8:	4401      	add	r1, r0
 80030ea:	b2d3      	uxtb	r3, r2
 80030ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80030ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	0c02      	lsrs	r2, r0, #16
 80030fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003100:	0c0b      	lsrs	r3, r1, #16
 8003102:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003104:	3102      	adds	r1, #2
 8003106:	6838      	ldr	r0, [r7, #0]
 8003108:	4401      	add	r1, r0
 800310a:	b2d3      	uxtb	r3, r2
 800310c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800310e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	0e02      	lsrs	r2, r0, #24
 800311c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003120:	0e0b      	lsrs	r3, r1, #24
 8003122:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003124:	3103      	adds	r1, #3
 8003126:	6838      	ldr	r0, [r7, #0]
 8003128:	4401      	add	r1, r0
 800312a:	b2d3      	uxtb	r3, r2
 800312c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800312e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	000a      	movs	r2, r1
 800313c:	2300      	movs	r3, #0
 800313e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003140:	3104      	adds	r1, #4
 8003142:	6838      	ldr	r0, [r7, #0]
 8003144:	4401      	add	r1, r0
 8003146:	b2d3      	uxtb	r3, r2
 8003148:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800314a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	0a0a      	lsrs	r2, r1, #8
 8003158:	2300      	movs	r3, #0
 800315a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800315c:	3105      	adds	r1, #5
 800315e:	6838      	ldr	r0, [r7, #0]
 8003160:	4401      	add	r1, r0
 8003162:	b2d3      	uxtb	r3, r2
 8003164:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003166:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	0c0a      	lsrs	r2, r1, #16
 8003174:	2300      	movs	r3, #0
 8003176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003178:	3106      	adds	r1, #6
 800317a:	6838      	ldr	r0, [r7, #0]
 800317c:	4401      	add	r1, r0
 800317e:	b2d3      	uxtb	r3, r2
 8003180:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	0e0a      	lsrs	r2, r1, #24
 8003190:	2300      	movs	r3, #0
 8003192:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003194:	3107      	adds	r1, #7
 8003196:	6838      	ldr	r0, [r7, #0]
 8003198:	4401      	add	r1, r0
 800319a:	b2d3      	uxtb	r3, r2
 800319c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	3308      	adds	r3, #8
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80031a6:	4618      	mov	r0, r3
 80031a8:	372c      	adds	r7, #44	; 0x2c
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80031b2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80031b6:	b0eb      	sub	sp, #428	; 0x1ac
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80031be:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80031d4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80031d8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80031dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031e0:	4413      	add	r3, r2
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2200      	movs	r2, #0
 80031e8:	461c      	mov	r4, r3
 80031ea:	4615      	mov	r5, r2
 80031ec:	ea40 0804 	orr.w	r8, r0, r4
 80031f0:	ea41 0905 	orr.w	r9, r1, r5
 80031f4:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80031f8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80031fc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003206:	4413      	add	r3, r2
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2200      	movs	r2, #0
 800320e:	469a      	mov	sl, r3
 8003210:	4693      	mov	fp, r2
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800321e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003222:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003226:	ea40 0402 	orr.w	r4, r0, r2
 800322a:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800322e:	430b      	orrs	r3, r1
 8003230:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003234:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003238:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800323c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003240:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003244:	1c9a      	adds	r2, r3, #2
 8003246:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800324a:	4413      	add	r3, r2
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2200      	movs	r2, #0
 8003252:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003256:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8003266:	464c      	mov	r4, r9
 8003268:	0423      	lsls	r3, r4, #16
 800326a:	4644      	mov	r4, r8
 800326c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003270:	4644      	mov	r4, r8
 8003272:	0422      	lsls	r2, r4, #16
 8003274:	ea40 0402 	orr.w	r4, r0, r2
 8003278:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 800327c:	430b      	orrs	r3, r1
 800327e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003282:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8003286:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800328a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800328e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003292:	1cda      	adds	r2, r3, #3
 8003294:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003298:	4413      	add	r3, r2
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2200      	movs	r2, #0
 80032a0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80032a4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80032a8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80032ac:	4623      	mov	r3, r4
 80032ae:	0a1b      	lsrs	r3, r3, #8
 80032b0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80032b4:	4623      	mov	r3, r4
 80032b6:	061b      	lsls	r3, r3, #24
 80032b8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80032bc:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80032c0:	4623      	mov	r3, r4
 80032c2:	4303      	orrs	r3, r0
 80032c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80032c8:	462b      	mov	r3, r5
 80032ca:	430b      	orrs	r3, r1
 80032cc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80032d0:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80032d4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80032d8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80032dc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032e0:	1d1a      	adds	r2, r3, #4
 80032e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032e6:	4413      	add	r3, r2
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2200      	movs	r2, #0
 80032ee:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80032f2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8003302:	0023      	movs	r3, r4
 8003304:	2200      	movs	r2, #0
 8003306:	ea40 0402 	orr.w	r4, r0, r2
 800330a:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800330e:	430b      	orrs	r3, r1
 8003310:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003314:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003318:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800331c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003320:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003324:	1d5a      	adds	r2, r3, #5
 8003326:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800332a:	4413      	add	r3, r2
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2200      	movs	r2, #0
 8003332:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003336:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8003346:	0223      	lsls	r3, r4, #8
 8003348:	2200      	movs	r2, #0
 800334a:	ea40 0402 	orr.w	r4, r0, r2
 800334e:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8003352:	430b      	orrs	r3, r1
 8003354:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003358:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800335c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003360:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003364:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003368:	1d9a      	adds	r2, r3, #6
 800336a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800336e:	4413      	add	r3, r2
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2200      	movs	r2, #0
 8003376:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800337a:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 800338a:	0423      	lsls	r3, r4, #16
 800338c:	2200      	movs	r2, #0
 800338e:	ea40 0402 	orr.w	r4, r0, r2
 8003392:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8003396:	430b      	orrs	r3, r1
 8003398:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800339c:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80033a0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80033a4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80033a8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033ac:	1dda      	adds	r2, r3, #7
 80033ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033b2:	4413      	add	r3, r2
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2200      	movs	r2, #0
 80033ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80033be:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80033ce:	0623      	lsls	r3, r4, #24
 80033d0:	2200      	movs	r2, #0
 80033d2:	ea40 0402 	orr.w	r4, r0, r2
 80033d6:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80033da:	430b      	orrs	r3, r1
 80033dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80033e0:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80033e4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80033e8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80033ec:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80033f0:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80033f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033f8:	3308      	adds	r3, #8
 80033fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800340a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800340e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003412:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003416:	4413      	add	r3, r2
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2200      	movs	r2, #0
 800341e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003422:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003426:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800342a:	4623      	mov	r3, r4
 800342c:	4303      	orrs	r3, r0
 800342e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003432:	462b      	mov	r3, r5
 8003434:	430b      	orrs	r3, r1
 8003436:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800343a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800343e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003442:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003446:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003450:	4413      	add	r3, r2
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2200      	movs	r2, #0
 8003458:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800345c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800346c:	464c      	mov	r4, r9
 800346e:	0223      	lsls	r3, r4, #8
 8003470:	4644      	mov	r4, r8
 8003472:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003476:	4644      	mov	r4, r8
 8003478:	0222      	lsls	r2, r4, #8
 800347a:	ea40 0402 	orr.w	r4, r0, r2
 800347e:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003482:	430b      	orrs	r3, r1
 8003484:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003488:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800348c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003490:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003494:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003498:	1c9a      	adds	r2, r3, #2
 800349a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800349e:	4413      	add	r3, r2
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2200      	movs	r2, #0
 80034a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80034ba:	464c      	mov	r4, r9
 80034bc:	0423      	lsls	r3, r4, #16
 80034be:	4644      	mov	r4, r8
 80034c0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80034c4:	4644      	mov	r4, r8
 80034c6:	0422      	lsls	r2, r4, #16
 80034c8:	ea40 0402 	orr.w	r4, r0, r2
 80034cc:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80034d0:	430b      	orrs	r3, r1
 80034d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034d6:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80034da:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80034de:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80034e2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034e6:	1cda      	adds	r2, r3, #3
 80034e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80034ec:	4413      	add	r3, r2
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2200      	movs	r2, #0
 80034f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034f8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034fc:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003500:	4623      	mov	r3, r4
 8003502:	0a1b      	lsrs	r3, r3, #8
 8003504:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003508:	4623      	mov	r3, r4
 800350a:	061b      	lsls	r3, r3, #24
 800350c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003510:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003514:	4623      	mov	r3, r4
 8003516:	4303      	orrs	r3, r0
 8003518:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800351c:	462b      	mov	r3, r5
 800351e:	430b      	orrs	r3, r1
 8003520:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003524:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003528:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800352c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003530:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003534:	1d1a      	adds	r2, r3, #4
 8003536:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800353a:	4413      	add	r3, r2
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2200      	movs	r2, #0
 8003542:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003546:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003556:	0023      	movs	r3, r4
 8003558:	2200      	movs	r2, #0
 800355a:	ea40 0402 	orr.w	r4, r0, r2
 800355e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003562:	430b      	orrs	r3, r1
 8003564:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003568:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800356c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003570:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003574:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003578:	1d5a      	adds	r2, r3, #5
 800357a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800357e:	4413      	add	r3, r2
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2200      	movs	r2, #0
 8003586:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800358a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	f04f 0300 	mov.w	r3, #0
 8003596:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800359a:	0223      	lsls	r3, r4, #8
 800359c:	2200      	movs	r2, #0
 800359e:	ea40 0402 	orr.w	r4, r0, r2
 80035a2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80035a6:	430b      	orrs	r3, r1
 80035a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035ac:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80035b0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80035b4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80035b8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80035bc:	1d9a      	adds	r2, r3, #6
 80035be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80035c2:	4413      	add	r3, r2
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2200      	movs	r2, #0
 80035ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80035de:	0423      	lsls	r3, r4, #16
 80035e0:	2200      	movs	r2, #0
 80035e2:	ea40 0402 	orr.w	r4, r0, r2
 80035e6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80035ea:	430b      	orrs	r3, r1
 80035ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035f0:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80035f4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80035f8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80035fc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003600:	1dda      	adds	r2, r3, #7
 8003602:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003606:	4413      	add	r3, r2
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2200      	movs	r2, #0
 800360e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003612:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003622:	0623      	lsls	r3, r4, #24
 8003624:	2200      	movs	r2, #0
 8003626:	ea40 0402 	orr.w	r4, r0, r2
 800362a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800362e:	430b      	orrs	r3, r1
 8003630:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003634:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003638:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 800363c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003640:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003644:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003648:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800364c:	3308      	adds	r3, #8
 800364e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800365e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003662:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003666:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800366a:	4413      	add	r3, r2
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2200      	movs	r2, #0
 8003672:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003676:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800367a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800367e:	4623      	mov	r3, r4
 8003680:	4303      	orrs	r3, r0
 8003682:	67bb      	str	r3, [r7, #120]	; 0x78
 8003684:	462b      	mov	r3, r5
 8003686:	430b      	orrs	r3, r1
 8003688:	67fb      	str	r3, [r7, #124]	; 0x7c
 800368a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800368e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003692:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003696:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036a0:	4413      	add	r3, r2
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2200      	movs	r2, #0
 80036a8:	673b      	str	r3, [r7, #112]	; 0x70
 80036aa:	677a      	str	r2, [r7, #116]	; 0x74
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036b8:	464c      	mov	r4, r9
 80036ba:	0223      	lsls	r3, r4, #8
 80036bc:	4644      	mov	r4, r8
 80036be:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80036c2:	4644      	mov	r4, r8
 80036c4:	0222      	lsls	r2, r4, #8
 80036c6:	ea40 0402 	orr.w	r4, r0, r2
 80036ca:	66bc      	str	r4, [r7, #104]	; 0x68
 80036cc:	430b      	orrs	r3, r1
 80036ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036d0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80036d4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80036d8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80036dc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80036e0:	1c9a      	adds	r2, r3, #2
 80036e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036e6:	4413      	add	r3, r2
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2200      	movs	r2, #0
 80036ee:	663b      	str	r3, [r7, #96]	; 0x60
 80036f0:	667a      	str	r2, [r7, #100]	; 0x64
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80036fe:	464c      	mov	r4, r9
 8003700:	0423      	lsls	r3, r4, #16
 8003702:	4644      	mov	r4, r8
 8003704:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003708:	4644      	mov	r4, r8
 800370a:	0422      	lsls	r2, r4, #16
 800370c:	ea40 0402 	orr.w	r4, r0, r2
 8003710:	65bc      	str	r4, [r7, #88]	; 0x58
 8003712:	430b      	orrs	r3, r1
 8003714:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003716:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800371a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800371e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003722:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003726:	1cda      	adds	r2, r3, #3
 8003728:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800372c:	4413      	add	r3, r2
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2200      	movs	r2, #0
 8003734:	653b      	str	r3, [r7, #80]	; 0x50
 8003736:	657a      	str	r2, [r7, #84]	; 0x54
 8003738:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800373c:	4623      	mov	r3, r4
 800373e:	0a1b      	lsrs	r3, r3, #8
 8003740:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003742:	4623      	mov	r3, r4
 8003744:	061b      	lsls	r3, r3, #24
 8003746:	64bb      	str	r3, [r7, #72]	; 0x48
 8003748:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800374c:	4623      	mov	r3, r4
 800374e:	4303      	orrs	r3, r0
 8003750:	643b      	str	r3, [r7, #64]	; 0x40
 8003752:	462b      	mov	r3, r5
 8003754:	430b      	orrs	r3, r1
 8003756:	647b      	str	r3, [r7, #68]	; 0x44
 8003758:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800375c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003760:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003764:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003768:	1d1a      	adds	r2, r3, #4
 800376a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800376e:	4413      	add	r3, r2
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2200      	movs	r2, #0
 8003776:	63bb      	str	r3, [r7, #56]	; 0x38
 8003778:	63fa      	str	r2, [r7, #60]	; 0x3c
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003784:	0023      	movs	r3, r4
 8003786:	2200      	movs	r2, #0
 8003788:	ea40 0402 	orr.w	r4, r0, r2
 800378c:	633c      	str	r4, [r7, #48]	; 0x30
 800378e:	430b      	orrs	r3, r1
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
 8003792:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003796:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800379a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800379e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037a2:	1d5a      	adds	r2, r3, #5
 80037a4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037a8:	4413      	add	r3, r2
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2200      	movs	r2, #0
 80037b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80037be:	0223      	lsls	r3, r4, #8
 80037c0:	2200      	movs	r2, #0
 80037c2:	ea40 0402 	orr.w	r4, r0, r2
 80037c6:	623c      	str	r4, [r7, #32]
 80037c8:	430b      	orrs	r3, r1
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
 80037cc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80037d0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80037d4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80037d8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037dc:	3306      	adds	r3, #6
 80037de:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80037e2:	4413      	add	r3, r2
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2200      	movs	r2, #0
 80037ea:	61bb      	str	r3, [r7, #24]
 80037ec:	61fa      	str	r2, [r7, #28]
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	69bc      	ldr	r4, [r7, #24]
 80037f8:	0423      	lsls	r3, r4, #16
 80037fa:	2200      	movs	r2, #0
 80037fc:	ea40 0402 	orr.w	r4, r0, r2
 8003800:	613c      	str	r4, [r7, #16]
 8003802:	430b      	orrs	r3, r1
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800380a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800380e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003812:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003816:	3307      	adds	r3, #7
 8003818:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800381c:	4413      	add	r3, r2
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2200      	movs	r2, #0
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	60fa      	str	r2, [r7, #12]
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	68bc      	ldr	r4, [r7, #8]
 8003832:	0623      	lsls	r3, r4, #24
 8003834:	2200      	movs	r2, #0
 8003836:	ea40 0402 	orr.w	r4, r0, r2
 800383a:	603c      	str	r4, [r7, #0]
 800383c:	430b      	orrs	r3, r1
 800383e:	607b      	str	r3, [r7, #4]
 8003840:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003844:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003848:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800384c:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003850:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003854:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003858:	3308      	adds	r3, #8
 800385a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 800385e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003862:	4618      	mov	r0, r3
 8003864:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003868:	46bd      	mov	sp, r7
 800386a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800386e:	4770      	bx	lr

08003870 <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	4b03      	ldr	r3, [pc, #12]	; (8003888 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	08011234 	.word	0x08011234

0800388c <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	4b03      	ldr	r3, [pc, #12]	; (80038a4 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8003896:	4618      	mov	r0, r3
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	08011248 	.word	0x08011248

080038a8 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
      data(0)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe fab2 	bl	8001e1c <_ZN3ros3MsgC1Ev>
 80038b8:	4a07      	ldr	r2, [pc, #28]	; (80038d8 <_ZN8std_msgs5Int64C1Ev+0x30>)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	080113a4 	.word	0x080113a4

080038dc <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80038f0:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80038f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038f8:	6979      	ldr	r1, [r7, #20]
 80038fa:	6838      	ldr	r0, [r7, #0]
 80038fc:	4401      	add	r1, r0
 80038fe:	b2d3      	uxtb	r3, r2
 8003900:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8003902:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	0a02      	lsrs	r2, r0, #8
 8003910:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003914:	0a0b      	lsrs	r3, r1, #8
 8003916:	6979      	ldr	r1, [r7, #20]
 8003918:	3101      	adds	r1, #1
 800391a:	6838      	ldr	r0, [r7, #0]
 800391c:	4401      	add	r1, r0
 800391e:	b2d3      	uxtb	r3, r2
 8003920:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8003922:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	0c02      	lsrs	r2, r0, #16
 8003930:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003934:	0c0b      	lsrs	r3, r1, #16
 8003936:	6979      	ldr	r1, [r7, #20]
 8003938:	3102      	adds	r1, #2
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	4401      	add	r1, r0
 800393e:	b2d3      	uxtb	r3, r2
 8003940:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8003942:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	f04f 0300 	mov.w	r3, #0
 800394e:	0e02      	lsrs	r2, r0, #24
 8003950:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003954:	0e0b      	lsrs	r3, r1, #24
 8003956:	6979      	ldr	r1, [r7, #20]
 8003958:	3103      	adds	r1, #3
 800395a:	6838      	ldr	r0, [r7, #0]
 800395c:	4401      	add	r1, r0
 800395e:	b2d3      	uxtb	r3, r2
 8003960:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 8003962:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	000a      	movs	r2, r1
 8003970:	2300      	movs	r3, #0
 8003972:	6979      	ldr	r1, [r7, #20]
 8003974:	3104      	adds	r1, #4
 8003976:	6838      	ldr	r0, [r7, #0]
 8003978:	4401      	add	r1, r0
 800397a:	b2d3      	uxtb	r3, r2
 800397c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 800397e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	0a0a      	lsrs	r2, r1, #8
 800398c:	2300      	movs	r3, #0
 800398e:	6979      	ldr	r1, [r7, #20]
 8003990:	3105      	adds	r1, #5
 8003992:	6838      	ldr	r0, [r7, #0]
 8003994:	4401      	add	r1, r0
 8003996:	b2d3      	uxtb	r3, r2
 8003998:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 800399a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	0c0a      	lsrs	r2, r1, #16
 80039a8:	2300      	movs	r3, #0
 80039aa:	6979      	ldr	r1, [r7, #20]
 80039ac:	3106      	adds	r1, #6
 80039ae:	6838      	ldr	r0, [r7, #0]
 80039b0:	4401      	add	r1, r0
 80039b2:	b2d3      	uxtb	r3, r2
 80039b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 80039b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	f04f 0300 	mov.w	r3, #0
 80039c2:	0e0a      	lsrs	r2, r1, #24
 80039c4:	2300      	movs	r3, #0
 80039c6:	6979      	ldr	r1, [r7, #20]
 80039c8:	3107      	adds	r1, #7
 80039ca:	6838      	ldr	r0, [r7, #0]
 80039cc:	4401      	add	r1, r0
 80039ce:	b2d3      	uxtb	r3, r2
 80039d0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	3308      	adds	r3, #8
 80039d6:	617b      	str	r3, [r7, #20]
      return offset;
 80039d8:	697b      	ldr	r3, [r7, #20]
    }
 80039da:	4618      	mov	r0, r3
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80039e6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80039ea:	b0a3      	sub	sp, #140	; 0x8c
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6778      	str	r0, [r7, #116]	; 0x74
 80039f0:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 80039f2:	2300      	movs	r3, #0
 80039f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003a04:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003a08:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003a0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a0e:	4413      	add	r3, r2
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2200      	movs	r2, #0
 8003a16:	461c      	mov	r4, r3
 8003a18:	4615      	mov	r5, r2
 8003a1a:	ea40 0804 	orr.w	r8, r0, r4
 8003a1e:	ea41 0905 	orr.w	r9, r1, r5
 8003a22:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a26:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a32:	4413      	add	r3, r2
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2200      	movs	r2, #0
 8003a3a:	469a      	mov	sl, r3
 8003a3c:	4693      	mov	fp, r2
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003a4a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003a4e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003a52:	ea40 0402 	orr.w	r4, r0, r2
 8003a56:	66bc      	str	r4, [r7, #104]	; 0x68
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a5c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003a60:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a64:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003a68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a6c:	1c9a      	adds	r2, r3, #2
 8003a6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a70:	4413      	add	r3, r2
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2200      	movs	r2, #0
 8003a78:	663b      	str	r3, [r7, #96]	; 0x60
 8003a7a:	667a      	str	r2, [r7, #100]	; 0x64
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a88:	464c      	mov	r4, r9
 8003a8a:	0423      	lsls	r3, r4, #16
 8003a8c:	4644      	mov	r4, r8
 8003a8e:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003a92:	4644      	mov	r4, r8
 8003a94:	0422      	lsls	r2, r4, #16
 8003a96:	ea40 0402 	orr.w	r4, r0, r2
 8003a9a:	65bc      	str	r4, [r7, #88]	; 0x58
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aa0:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003aa4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003aa8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003aac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ab0:	1cda      	adds	r2, r3, #3
 8003ab2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ab4:	4413      	add	r3, r2
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2200      	movs	r2, #0
 8003abc:	653b      	str	r3, [r7, #80]	; 0x50
 8003abe:	657a      	str	r2, [r7, #84]	; 0x54
 8003ac0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003ac4:	4623      	mov	r3, r4
 8003ac6:	0a1b      	lsrs	r3, r3, #8
 8003ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aca:	4623      	mov	r3, r4
 8003acc:	061b      	lsls	r3, r3, #24
 8003ace:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ad0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003ad4:	4623      	mov	r3, r4
 8003ad6:	4303      	orrs	r3, r0
 8003ad8:	643b      	str	r3, [r7, #64]	; 0x40
 8003ada:	462b      	mov	r3, r5
 8003adc:	430b      	orrs	r3, r1
 8003ade:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003ae4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003ae8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003aec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003af0:	1d1a      	adds	r2, r3, #4
 8003af2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003af4:	4413      	add	r3, r2
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2200      	movs	r2, #0
 8003afc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003afe:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003b0a:	0023      	movs	r3, r4
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	ea40 0402 	orr.w	r4, r0, r2
 8003b12:	633c      	str	r4, [r7, #48]	; 0x30
 8003b14:	430b      	orrs	r3, r1
 8003b16:	637b      	str	r3, [r7, #52]	; 0x34
 8003b18:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003b1c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003b20:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003b24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b28:	1d5a      	adds	r2, r3, #5
 8003b2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b2c:	4413      	add	r3, r2
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2200      	movs	r2, #0
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003b42:	0223      	lsls	r3, r4, #8
 8003b44:	2200      	movs	r2, #0
 8003b46:	ea40 0402 	orr.w	r4, r0, r2
 8003b4a:	623c      	str	r4, [r7, #32]
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b50:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003b54:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003b58:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003b5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b60:	3306      	adds	r3, #6
 8003b62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003b64:	4413      	add	r3, r2
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	61fa      	str	r2, [r7, #28]
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	69bc      	ldr	r4, [r7, #24]
 8003b7a:	0423      	lsls	r3, r4, #16
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	ea40 0402 	orr.w	r4, r0, r2
 8003b82:	613c      	str	r4, [r7, #16]
 8003b84:	430b      	orrs	r3, r1
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003b8c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003b90:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003b94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b98:	3307      	adds	r3, #7
 8003b9a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003b9c:	4413      	add	r3, r2
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	60fa      	str	r2, [r7, #12]
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	68bc      	ldr	r4, [r7, #8]
 8003bb2:	0623      	lsls	r3, r4, #24
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	ea40 0402 	orr.w	r4, r0, r2
 8003bba:	603c      	str	r4, [r7, #0]
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	607b      	str	r3, [r7, #4]
 8003bc0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003bc4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8003bc8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003bcc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003bce:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8003bd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bd6:	3308      	adds	r3, #8
 8003bd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 8003bdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 8003be0:	4618      	mov	r0, r3
 8003be2:	378c      	adds	r7, #140	; 0x8c
 8003be4:	46bd      	mov	sp, r7
 8003be6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003bea:	4770      	bx	lr

08003bec <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	4b03      	ldr	r3, [pc, #12]	; (8003c04 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	0801126c 	.word	0x0801126c

08003c08 <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	4b03      	ldr	r3, [pc, #12]	; (8003c20 <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 8003c12:	4618      	mov	r0, r3
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	0801127c 	.word	0x0801127c

08003c24 <_ZN3ROS9pub_resetEv>:
ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
ros::Publisher reset_pub("reset_fromSTM", &reset);
ros::Publisher micro_pub("microswitch_fromSTM", &microswitch);

/** RESET **/
void ROS::pub_reset(void){
 8003c24:	b5b0      	push	{r4, r5, r7, lr}
 8003c26:	af00      	add	r7, sp, #0
	MYRESET::receive();
 8003c28:	f7fe f88c 	bl	8001d44 <_ZN7MYRESET7receiveEv>
	reset.data = MYRESET::state;
 8003c2c:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <_ZN3ROS9pub_resetEv+0x24>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	17da      	asrs	r2, r3, #31
 8003c32:	461c      	mov	r4, r3
 8003c34:	4615      	mov	r5, r2
 8003c36:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <_ZN3ROS9pub_resetEv+0x28>)
 8003c38:	e9c3 4502 	strd	r4, r5, [r3, #8]
	reset_pub.publish(&reset);
 8003c3c:	4903      	ldr	r1, [pc, #12]	; (8003c4c <_ZN3ROS9pub_resetEv+0x28>)
 8003c3e:	4804      	ldr	r0, [pc, #16]	; (8003c50 <_ZN3ROS9pub_resetEv+0x2c>)
 8003c40:	f7fe ff39 	bl	8002ab6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8003c44:	bf00      	nop
 8003c46:	bdb0      	pop	{r4, r5, r7, pc}
 8003c48:	240007a8 	.word	0x240007a8
 8003c4c:	24001948 	.word	0x24001948
 8003c50:	24001a04 	.word	0x24001a04

08003c54 <_ZN3ROS14relay_callbackERKN8std_msgs5Int64E>:


/** SCARA **/
void ROS::relay_callback(const std_msgs::Int64 &msgs){
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	sc.relay = msgs.data;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003c62:	4610      	mov	r0, r2
 8003c64:	4619      	mov	r1, r3
 8003c66:	f7fc fce9 	bl	800063c <__aeabi_l2d>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4905      	ldr	r1, [pc, #20]	; (8003c84 <_ZN3ROS14relay_callbackERKN8std_msgs5Int64E+0x30>)
 8003c70:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
	sc.run();
 8003c74:	4803      	ldr	r0, [pc, #12]	; (8003c84 <_ZN3ROS14relay_callbackERKN8std_msgs5Int64E+0x30>)
 8003c76:	f001 f979 	bl	8004f6c <_ZN5SCARA3runEv>
}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	24001a30 	.word	0x24001a30

08003c88 <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE>:


/** INTAKE **/
void ROS::intake_callback(const geometry_msgs::Point &msgs){
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
	INTAKE::tilt = msgs.x;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003c96:	490a      	ldr	r1, [pc, #40]	; (8003cc0 <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE+0x38>)
 8003c98:	e9c1 2300 	strd	r2, r3, [r1]
	INTAKE::stretch = msgs.y;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003ca2:	4908      	ldr	r1, [pc, #32]	; (8003cc4 <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003ca4:	e9c1 2300 	strd	r2, r3, [r1]
	INTAKE::suck = msgs.z;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003cae:	4906      	ldr	r1, [pc, #24]	; (8003cc8 <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE+0x40>)
 8003cb0:	e9c1 2300 	strd	r2, r3, [r1]
	INTAKE::run();
 8003cb4:	f7fd f832 	bl	8000d1c <_ZN6INTAKE3runEv>
}
 8003cb8:	bf00      	nop
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	24000268 	.word	0x24000268
 8003cc4:	24000270 	.word	0x24000270
 8003cc8:	24000278 	.word	0x24000278

08003ccc <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE>:
}



/** CHASSIS -- mecanum **/
void ROS::mecanum_callback(const geometry_msgs::Point &msgs){
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
	mecanum.CAR_Goal.Vx = msgs.x;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003cda:	490b      	ldr	r1, [pc, #44]	; (8003d08 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003cdc:	e9c1 2300 	strd	r2, r3, [r1]
	mecanum.CAR_Goal.Vy = msgs.y;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003ce6:	4908      	ldr	r1, [pc, #32]	; (8003d08 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003ce8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	mecanum.CAR_Goal.Omega = msgs.z;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003cf2:	4905      	ldr	r1, [pc, #20]	; (8003d08 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003cf4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	mecanum.run();
 8003cf8:	4803      	ldr	r0, [pc, #12]	; (8003d08 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003cfa:	f7fd fee7 	bl	8001acc <_ZN7Mecanum3runEv>
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	24000748 	.word	0x24000748

08003d0c <_ZN3ROS11pub_car_velEv>:

void ROS::pub_car_vel(void){
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
	car_speed.x = mecanum.CAR_Now.Vx;
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <_ZN3ROS11pub_car_velEv+0x34>)
 8003d12:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003d16:	490b      	ldr	r1, [pc, #44]	; (8003d44 <_ZN3ROS11pub_car_velEv+0x38>)
 8003d18:	e9c1 2302 	strd	r2, r3, [r1, #8]
 	car_speed.y = mecanum.CAR_Now.Vy;
 8003d1c:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <_ZN3ROS11pub_car_velEv+0x34>)
 8003d1e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d22:	4908      	ldr	r1, [pc, #32]	; (8003d44 <_ZN3ROS11pub_car_velEv+0x38>)
 8003d24:	e9c1 2304 	strd	r2, r3, [r1, #16]
 	car_speed.z = mecanum.CAR_Now.Omega;
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <_ZN3ROS11pub_car_velEv+0x34>)
 8003d2a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003d2e:	4905      	ldr	r1, [pc, #20]	; (8003d44 <_ZN3ROS11pub_car_velEv+0x38>)
 8003d30:	e9c1 2306 	strd	r2, r3, [r1, #24]
 	mecanum_pub.publish(&car_speed);
 8003d34:	4903      	ldr	r1, [pc, #12]	; (8003d44 <_ZN3ROS11pub_car_velEv+0x38>)
 8003d36:	4804      	ldr	r0, [pc, #16]	; (8003d48 <_ZN3ROS11pub_car_velEv+0x3c>)
 8003d38:	f7fe febd 	bl	8002ab6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8003d3c:	bf00      	nop
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	24000748 	.word	0x24000748
 8003d44:	24001918 	.word	0x24001918
 8003d48:	240019f0 	.word	0x240019f0

08003d4c <_ZN3ROS5setupEv>:


/** ROS setup and loop **/
void ROS::setup(void){
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
	nh.initNode();
 8003d50:	480c      	ldr	r0, [pc, #48]	; (8003d84 <_ZN3ROS5setupEv+0x38>)
 8003d52:	f000 f993 	bl	800407c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>

    nh.advertise(mecanum_pub);
 8003d56:	490c      	ldr	r1, [pc, #48]	; (8003d88 <_ZN3ROS5setupEv+0x3c>)
 8003d58:	480a      	ldr	r0, [pc, #40]	; (8003d84 <_ZN3ROS5setupEv+0x38>)
 8003d5a:	f000 f9b8 	bl	80040ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
    nh.advertise(reset_pub);
 8003d5e:	490b      	ldr	r1, [pc, #44]	; (8003d8c <_ZN3ROS5setupEv+0x40>)
 8003d60:	4808      	ldr	r0, [pc, #32]	; (8003d84 <_ZN3ROS5setupEv+0x38>)
 8003d62:	f000 f9b4 	bl	80040ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
    nh.subscribe(mecanum_sub);
 8003d66:	490a      	ldr	r1, [pc, #40]	; (8003d90 <_ZN3ROS5setupEv+0x44>)
 8003d68:	4806      	ldr	r0, [pc, #24]	; (8003d84 <_ZN3ROS5setupEv+0x38>)
 8003d6a:	f000 f9e0 	bl	800412e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>
    nh.subscribe(intake_sub);
 8003d6e:	4909      	ldr	r1, [pc, #36]	; (8003d94 <_ZN3ROS5setupEv+0x48>)
 8003d70:	4804      	ldr	r0, [pc, #16]	; (8003d84 <_ZN3ROS5setupEv+0x38>)
 8003d72:	f000 f9dc 	bl	800412e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>
    nh.subscribe(relay_sub);
 8003d76:	4908      	ldr	r1, [pc, #32]	; (8003d98 <_ZN3ROS5setupEv+0x4c>)
 8003d78:	4802      	ldr	r0, [pc, #8]	; (8003d84 <_ZN3ROS5setupEv+0x38>)
 8003d7a:	f000 fa03 	bl	8004184 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>
}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	240007bc 	.word	0x240007bc
 8003d88:	240019f0 	.word	0x240019f0
 8003d8c:	24001a04 	.word	0x24001a04
 8003d90:	24001958 	.word	0x24001958
 8003d94:	24001990 	.word	0x24001990
 8003d98:	240019c8 	.word	0x240019c8

08003d9c <_ZN3ROS4loopEv>:

void ROS::loop(void){
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8003da0:	4802      	ldr	r0, [pc, #8]	; (8003dac <_ZN3ROS4loopEv+0x10>)
 8003da2:	f000 fa1a 	bl	80041da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>

}
 8003da6:	bf00      	nop
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	240007bc 	.word	0x240007bc

08003db0 <HAL_UART_TxCpltCallback>:


/* UART Communication */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003db8:	4805      	ldr	r0, [pc, #20]	; (8003dd0 <HAL_UART_TxCpltCallback+0x20>)
 8003dba:	f000 fc7f 	bl	80046bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fe ffad 	bl	8002d20 <_ZN13STM32Hardware5flushEv>
}
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	240007bc 	.word	0x240007bc

08003dd4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003ddc:	4805      	ldr	r0, [pc, #20]	; (8003df4 <HAL_UART_RxCpltCallback+0x20>)
 8003dde:	f000 fc6d 	bl	80046bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8003de2:	4603      	mov	r3, r0
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fe ff5c 	bl	8002ca2 <_ZN13STM32Hardware10reset_rbufEv>
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	240007bc 	.word	0x240007bc

08003df8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d80d      	bhi.n	8003e28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	fa22 f103 	lsr.w	r1, r2, r3
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	b2ca      	uxtb	r2, r1
 8003e1e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	3301      	adds	r3, #1
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	e7ee      	b.n	8003e06 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003e28:	bf00      	nop
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d811      	bhi.n	8003e72 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6839      	ldr	r1, [r7, #0]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	440a      	add	r2, r1
 8003e58:	7812      	ldrb	r2, [r2, #0]
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	00d2      	lsls	r2, r2, #3
 8003e60:	fa01 f202 	lsl.w	r2, r1, r2
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	e7ea      	b.n	8003e48 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003e72:	bf00      	nop
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	4a04      	ldr	r2, [pc, #16]	; (8003e9c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	080113ec 	.word	0x080113ec

08003ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff ffe8 	bl	8003e80 <_ZN3ros15NodeHandleBase_C1Ev>
 8003eb0:	4a45      	ldr	r2, [pc, #276]	; (8003fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x128>)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fe feca 	bl	8002c54 <_ZN13STM32HardwareC1Ev>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	f241 1314 	movw	r3, #4372	; 0x1114
 8003ed2:	4413      	add	r3, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fe fb15 	bl	8002504 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b18      	cmp	r3, #24
 8003ee2:	d80b      	bhi.n	8003efc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5c>
      publishers[i] = 0;
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	e7f0      	b.n	8003ede <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003efc:	2300      	movs	r3, #0
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	2b18      	cmp	r3, #24
 8003f04:	d80a      	bhi.n	8003f1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7c>
      subscribers[i] = 0;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003f0e:	2100      	movs	r1, #0
 8003f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	3301      	adds	r3, #1
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	e7f1      	b.n	8003f00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f26:	d20a      	bcs.n	8003f3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9e>
      message_in[i] = 0;
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8003f32:	2200      	movs	r2, #0
 8003f34:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	e7f0      	b.n	8003f20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f48:	d20a      	bcs.n	8003f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xc0>
      message_out[i] = 0;
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8003f54:	2200      	movs	r2, #0
 8003f56:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	e7f0      	b.n	8003f42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xa2>

    req_param_resp.ints_length = 0;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f66:	461a      	mov	r2, r3
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
    req_param_resp.ints = NULL;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f74:	461a      	mov	r2, r3
 8003f76:	2300      	movs	r3, #0
 8003f78:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    req_param_resp.floats_length = 0;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f82:	461a      	mov	r2, r3
 8003f84:	2300      	movs	r3, #0
 8003f86:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    req_param_resp.floats = NULL;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f90:	461a      	mov	r2, r3
 8003f92:	2300      	movs	r3, #0
 8003f94:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
    req_param_resp.ints_length = 0;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
    req_param_resp.ints = NULL;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fac:	461a      	mov	r2, r3
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    spin_timeout_ = 0;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  }
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	08011390 	.word	0x08011390

08003fcc <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	4a04      	ldr	r2, [pc, #16]	; (8003fe8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	080113d4 	.word	0x080113d4

08003fec <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
 8003ff8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff ffe5 	bl	8003fcc <_ZN3ros11Subscriber_C1Ev>
 8004002:	4a0b      	ldr	r2, [pc, #44]	; (8004030 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3310      	adds	r3, #16
 800400c:	4618      	mov	r0, r3
 800400e:	f7fe ff35 	bl	8002e7c <_ZN13geometry_msgs5PointC1Ev>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	609a      	str	r2, [r3, #8]
  };
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	08011378 	.word	0x08011378

08004034 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff ffc1 	bl	8003fcc <_ZN3ros11Subscriber_C1Ev>
 800404a:	4a0b      	ldr	r2, [pc, #44]	; (8004078 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei+0x44>)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3310      	adds	r3, #16
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff fc27 	bl	80038a8 <_ZN8std_msgs5Int64C1Ev>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	621a      	str	r2, [r3, #32]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	625a      	str	r2, [r3, #36]	; 0x24
    topic_ = topic_name;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	609a      	str	r2, [r3, #8]
  };
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	08011360 	.word	0x08011360

0800407c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3304      	adds	r3, #4
 8004088:	4618      	mov	r0, r3
 800408a:	f7fe fdff 	bl	8002c8c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004094:	461a      	mov	r2, r3
 8004096:	2300      	movs	r3, #0
 8004098:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
    bytes_ = 0;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a2:	461a      	mov	r2, r3
 80040a4:	2300      	movs	r3, #0
 80040a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    index_ = 0;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b0:	461a      	mov	r2, r3
 80040b2:	2300      	movs	r3, #0
 80040b4:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    topic_ = 0;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040be:	461a      	mov	r2, r3
 80040c0:	2300      	movs	r3, #0
 80040c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  };
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80040ce:	b480      	push	{r7}
 80040d0:	b085      	sub	sp, #20
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b18      	cmp	r3, #24
 80040e0:	dc1e      	bgt.n	8004120 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d111      	bne.n	8004118 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	60da      	str	r2, [r3, #12]
        return true;
 8004114:	2301      	movs	r3, #1
 8004116:	e004      	b.n	8004122 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3301      	adds	r3, #1
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	e7dd      	b.n	80040dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8004120:	2300      	movs	r3, #0
  }
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800412e:	b480      	push	{r7}
 8004130:	b085      	sub	sp, #20
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004138:	2300      	movs	r3, #0
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b18      	cmp	r3, #24
 8004140:	dc19      	bgt.n	8004176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800414a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10d      	bne.n	800416e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004152:	6839      	ldr	r1, [r7, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800415c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	605a      	str	r2, [r3, #4]
        return true;
 800416a:	2301      	movs	r3, #1
 800416c:	e004      	b.n	8004178 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3301      	adds	r3, #1
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	e7e2      	b.n	800413c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0xe>
      }
    }
    return false;
 8004176:	2300      	movs	r3, #0
  }
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b18      	cmp	r3, #24
 8004196:	dc19      	bgt.n	80041cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80041a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10d      	bne.n	80041c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80041a8:	6839      	ldr	r1, [r7, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80041b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	605a      	str	r2, [r3, #4]
        return true;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e004      	b.n	80041ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	3301      	adds	r3, #1
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	e7e2      	b.n	8004192 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0xe>
    return false;
 80041cc:	2300      	movs	r3, #0
  }
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3304      	adds	r3, #4
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fe fe3c 	bl	8002e64 <_ZN13STM32Hardware4timeEv>
 80041ec:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004200:	4293      	cmp	r3, r2
 8004202:	d905      	bls.n	8004210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x36>
      configured_ = false;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    if (mode_ != MODE_FIRST_FF)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004216:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00e      	beq.n	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004224:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	429a      	cmp	r2, r3
 800422c:	d906      	bls.n	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004234:	461a      	mov	r2, r3
 8004236:	2300      	movs	r3, #0
 8004238:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
      if (spin_timeout_ > 0)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8004242:	2b00      	cmp	r3, #0
 8004244:	d014      	beq.n	8004270 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3304      	adds	r3, #4
 800424a:	4618      	mov	r0, r3
 800424c:	f7fe fe0a 	bl	8002e64 <_ZN13STM32Hardware4timeEv>
 8004250:	4602      	mov	r2, r0
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	1ad2      	subs	r2, r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 800425c:	429a      	cmp	r2, r3
 800425e:	bf8c      	ite	hi
 8004260:	2301      	movhi	r3, #1
 8004262:	2300      	movls	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
          return SPIN_TIMEOUT;
 800426a:	f06f 0301 	mvn.w	r3, #1
 800426e:	e221      	b.n	80046b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      int data = hardware_.read();
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3304      	adds	r3, #4
 8004274:	4618      	mov	r0, r3
 8004276:	f7fe fd25 	bl	8002cc4 <_ZN13STM32Hardware4readEv>
 800427a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	f2c0 81fa 	blt.w	8004678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x49e>
      checksum_ += data;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	4413      	add	r3, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004298:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80042a6:	2b07      	cmp	r3, #7
 80042a8:	d12b      	bne.n	8004302 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x128>
        message_in[index_++] = data;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80042bc:	f8c1 20f8 	str.w	r2, [r1, #248]	; 0xf8
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	b2d1      	uxtb	r1, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	4413      	add	r3, r2
 80042c8:	460a      	mov	r2, r1
 80042ca:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
        bytes_--;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042d8:	3b01      	subs	r3, #1
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1a4      	bne.n	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f8:	461a      	mov	r2, r3
 80042fa:	2308      	movs	r3, #8
 80042fc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004300:	e79c      	b.n	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004308:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800430c:	2b00      	cmp	r3, #0
 800430e:	d130      	bne.n	8004372 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x198>
        if (data == 0xff)
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2bff      	cmp	r3, #255	; 0xff
 8004314:	d112      	bne.n	800433c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800431c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004320:	3301      	adds	r3, #1
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004328:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3314      	adds	r3, #20
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004336:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800433a:	e77f      	b.n	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3304      	adds	r3, #4
 8004340:	4618      	mov	r0, r3
 8004342:	f7fe fd8f 	bl	8002e64 <_ZN13STM32Hardware4timeEv>
 8004346:	4602      	mov	r2, r0
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004350:	4293      	cmp	r3, r2
 8004352:	bf8c      	ite	hi
 8004354:	2301      	movhi	r3, #1
 8004356:	2300      	movls	r3, #0
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	f43f af6e 	beq.w	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          configured_ = false;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
          return SPIN_TIMEOUT;
 800436c:	f06f 0301 	mvn.w	r3, #1
 8004370:	e1a0      	b.n	80046b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004378:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800437c:	2b01      	cmp	r3, #1
 800437e:	d121      	bne.n	80043c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1ea>
        if (data == PROTOCOL_VER)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2bfe      	cmp	r3, #254	; 0xfe
 8004384:	d10b      	bne.n	800439e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1c4>
          mode_++;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800438c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004390:	3301      	adds	r3, #1
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004398:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800439c:	e74e      	b.n	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a4:	461a      	mov	r2, r3
 80043a6:	2300      	movs	r3, #0
 80043a8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          if (configured_ == false)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b2:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f47f af40 	bne.w	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f989 	bl	80046d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 80043c2:	e73b      	b.n	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d120      	bne.n	8004414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23a>
        bytes_ = data;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d8:	461a      	mov	r2, r3
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        index_ = 0;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043e6:	461a      	mov	r2, r3
 80043e8:	2300      	movs	r3, #0
 80043ea:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_++;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80043f8:	3301      	adds	r3, #1
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004400:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte for calculating size checksum */
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800440a:	461a      	mov	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8004412:	e713      	b.n	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800441a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800441e:	2b03      	cmp	r3, #3
 8004420:	d118      	bne.n	8004454 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x27a>
        bytes_ += data << 8;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004428:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	021b      	lsls	r3, r3, #8
 8004430:	4413      	add	r3, r2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004438:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        mode_++;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004442:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004446:	3301      	adds	r3, #1
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800444e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004452:	e6f3      	b.n	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800445a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800445e:	2b04      	cmp	r3, #4
 8004460:	d11f      	bne.n	80044a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2c8>
        if ((checksum_ % 256) == 255)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004468:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800446c:	425a      	negs	r2, r3
 800446e:	b2db      	uxtb	r3, r3
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	bf58      	it	pl
 8004474:	4253      	negpl	r3, r2
 8004476:	2bff      	cmp	r3, #255	; 0xff
 8004478:	d10b      	bne.n	8004492 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2b8>
          mode_++;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004480:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004484:	3301      	adds	r3, #1
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800448c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004490:	e6d4      	b.n	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004498:	461a      	mov	r2, r3
 800449a:	2300      	movs	r3, #0
 800449c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80044a0:	e6cc      	b.n	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044a8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80044ac:	2b05      	cmp	r3, #5
 80044ae:	d119      	bne.n	80044e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30a>
        topic_ = data;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b6:	461a      	mov	r2, r3
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_++;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80044c8:	3301      	adds	r3, #1
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044d0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte included in checksum */
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044da:	461a      	mov	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 80044e2:	e6ab      	b.n	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80044ee:	2b06      	cmp	r3, #6
 80044f0:	d123      	bne.n	800453a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x360>
        topic_ += data << 8;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	021b      	lsls	r3, r3, #8
 8004500:	4413      	add	r3, r2
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004508:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_ = MODE_MESSAGE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004512:	461a      	mov	r2, r3
 8004514:	2307      	movs	r3, #7
 8004516:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if (bytes_ == 0)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004524:	2b00      	cmp	r3, #0
 8004526:	f47f ae89 	bne.w	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004530:	461a      	mov	r2, r3
 8004532:	2308      	movs	r3, #8
 8004534:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004538:	e680      	b.n	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004540:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004544:	2b08      	cmp	r3, #8
 8004546:	f47f ae79 	bne.w	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004550:	461a      	mov	r2, r3
 8004552:	2300      	movs	r3, #0
 8004554:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if ((checksum_ % 256) == 255)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800455e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004562:	425a      	negs	r2, r3
 8004564:	b2db      	uxtb	r3, r3
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	bf58      	it	pl
 800456a:	4253      	negpl	r3, r2
 800456c:	2bff      	cmp	r3, #255	; 0xff
 800456e:	f47f ae65 	bne.w	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004578:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d116      	bne.n	80045ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3d4>
            requestSyncTime();
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f8a7 	bl	80046d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f8c2 	bl	8004710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004592:	461a      	mov	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
            last_sync_receive_time = c_time;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a0:	461a      	mov	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            return SPIN_ERR;
 80045a8:	f04f 33ff 	mov.w	r3, #4294967295
 80045ac:	e082      	b.n	80046b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
          else if (topic_ == TopicInfo::ID_TIME)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045b8:	2b0a      	cmp	r3, #10
 80045ba:	d107      	bne.n	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3f2>
            syncTime(message_in);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80045c2:	4619      	mov	r1, r3
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f985 	bl	80048d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 80045ca:	e637      	b.n	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045d6:	2b06      	cmp	r3, #6
 80045d8:	d111      	bne.n	80045fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x424>
            req_param_resp.deserialize(message_in);
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	f241 1314 	movw	r3, #4372	; 0x1114
 80045e0:	4413      	add	r3, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	f602 0224 	addw	r2, r2, #2084	; 0x824
 80045e8:	4611      	mov	r1, r2
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fe f8bf 	bl	800276e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 80045fc:	e61e      	b.n	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004604:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004608:	2b0b      	cmp	r3, #11
 800460a:	d106      	bne.n	800461a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x440>
            configured_ = false;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8004618:	e610      	b.n	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004620:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004624:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800462e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004632:	2b00      	cmp	r3, #0
 8004634:	f43f ae02 	beq.w	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800463e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004642:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800464c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004656:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800465a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	f602 0224 	addw	r2, r2, #2084	; 0x824
 8004672:	4611      	mov	r1, r2
 8004674:	4798      	blx	r3
    while (true)
 8004676:	e5e1      	b.n	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        break;
 8004678:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004680:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8004684:	2b00      	cmp	r3, #0
 8004686:	d014      	beq.n	80046b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800468e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800469a:	4293      	cmp	r3, r2
 800469c:	d909      	bls.n	80046b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
      requestSyncTime();
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f818 	bl	80046d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046aa:	461a      	mov	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    return SPIN_OK;
 80046b2:	2300      	movs	r3, #0
  }
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:
  Hardware* getHardware()
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
    return &hardware_;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3304      	adds	r3, #4
  }
 80046c8:	4618      	mov	r0, r3
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80046dc:	f107 030c 	add.w	r3, r7, #12
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7fd fbab 	bl	8001e3c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f107 020c 	add.w	r2, r7, #12
 80046f0:	210a      	movs	r1, #10
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	4798      	blx	r3
    rt_time = hardware_.time();
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	3304      	adds	r3, #4
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fe fbb2 	bl	8002e64 <_ZN13STM32Hardware4timeEv>
 8004700:	4602      	mov	r2, r0
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  }
 8004708:	bf00      	nop
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004710:	b590      	push	{r4, r7, lr}
 8004712:	b08b      	sub	sp, #44	; 0x2c
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004718:	f107 030c 	add.w	r3, r7, #12
 800471c:	4618      	mov	r0, r3
 800471e:	f7fd fc7d 	bl	800201c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004722:	2300      	movs	r3, #0
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	2b18      	cmp	r3, #24
 800472a:	dc63      	bgt.n	80047f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d056      	beq.n	80047ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	b29b      	uxth	r3, r3
 8004750:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	6859      	ldr	r1, [r3, #4]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3308      	adds	r3, #8
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4608      	mov	r0, r1
 800478c:	4798      	blx	r3
 800478e:	4603      	mov	r3, r0
 8004790:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	6859      	ldr	r1, [r3, #4]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	330c      	adds	r3, #12
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4608      	mov	r0, r1
 80047ba:	4798      	blx	r3
 80047bc:	4603      	mov	r3, r0
 80047be:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80047c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047c4:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681c      	ldr	r4, [r3, #0]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fe f97f 	bl	8002ade <_ZN3ros9Publisher15getEndpointTypeEv>
 80047e0:	4601      	mov	r1, r0
 80047e2:	f107 030c 	add.w	r3, r7, #12
 80047e6:	461a      	mov	r2, r3
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	3301      	adds	r3, #1
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
 80047f2:	e798      	b.n	8004726 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80047f4:	2300      	movs	r3, #0
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	2b18      	cmp	r3, #24
 80047fc:	dc5f      	bgt.n	80048be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004802:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d053      	beq.n	80048b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004812:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	b29b      	uxth	r3, r3
 800481e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004824:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004834:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004838:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004840:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3308      	adds	r3, #8
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4608      	mov	r0, r1
 8004850:	4798      	blx	r3
 8004852:	4603      	mov	r3, r0
 8004854:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800485a:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800485e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004866:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800486a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	330c      	adds	r3, #12
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4608      	mov	r0, r1
 8004876:	4798      	blx	r3
 8004878:	4603      	mov	r3, r0
 800487a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800487c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004880:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681c      	ldr	r4, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488c:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004890:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004898:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800489c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3304      	adds	r3, #4
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4608      	mov	r0, r1
 80048a8:	4798      	blx	r3
 80048aa:	4601      	mov	r1, r0
 80048ac:	f107 030c 	add.w	r3, r7, #12
 80048b0:	461a      	mov	r2, r3
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	3301      	adds	r3, #1
 80048ba:	627b      	str	r3, [r7, #36]	; 0x24
 80048bc:	e79c      	b.n	80047f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  }
 80048ca:	bf00      	nop
 80048cc:	372c      	adds	r7, #44	; 0x2c
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd90      	pop	{r4, r7, pc}
	...

080048d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80048de:	f107 0308 	add.w	r3, r7, #8
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fd faaa 	bl	8001e3c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3304      	adds	r3, #4
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fe fab9 	bl	8002e64 <_ZN13STM32Hardware4timeEv>
 80048f2:	4602      	mov	r2, r0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80048fe:	f107 0308 	add.w	r3, r7, #8
 8004902:	6839      	ldr	r1, [r7, #0]
 8004904:	4618      	mov	r0, r3
 8004906:	f7fd fb09 	bl	8001f1c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	4916      	ldr	r1, [pc, #88]	; (8004968 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8004910:	fba1 1303 	umull	r1, r3, r1, r3
 8004914:	099b      	lsrs	r3, r3, #6
 8004916:	4413      	add	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800491a:	6939      	ldr	r1, [r7, #16]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4b12      	ldr	r3, [pc, #72]	; (8004968 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8004920:	fba3 0302 	umull	r0, r3, r3, r2
 8004924:	099b      	lsrs	r3, r3, #6
 8004926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800492a:	fb00 f303 	mul.w	r3, r0, r3
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	4a0e      	ldr	r2, [pc, #56]	; (800496c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 8004932:	fb02 f303 	mul.w	r3, r2, r3
 8004936:	440b      	add	r3, r1
 8004938:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800493a:	f107 0308 	add.w	r3, r7, #8
 800493e:	3304      	adds	r3, #4
 8004940:	4619      	mov	r1, r3
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f8aa 	bl	8004a9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3304      	adds	r3, #4
 800494c:	4618      	mov	r0, r3
 800494e:	f7fe fa89 	bl	8002e64 <_ZN13STM32Hardware4timeEv>
 8004952:	4602      	mov	r2, r0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800495a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
 800495e:	bf00      	nop
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	10624dd3 	.word	0x10624dd3
 800496c:	000f4240 	.word	0x000f4240

08004970 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b63      	cmp	r3, #99	; 0x63
 8004980:	dd0b      	ble.n	800499a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004988:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800498c:	f083 0301 	eor.w	r3, r3, #1
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004996:	2300      	movs	r3, #0
 8004998:	e079      	b.n	8004a8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	f602 4224 	addw	r2, r2, #3108	; 0xc24
 80049a6:	3207      	adds	r2, #7
 80049a8:	4611      	mov	r1, r2
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	4798      	blx	r3
 80049ae:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	22ff      	movs	r2, #255	; 0xff
 80049b4:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24
    message_out[1] = PROTOCOL_VER;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	22fe      	movs	r2, #254	; 0xfe
 80049bc:	f883 2c25 	strb.w	r2, [r3, #3109]	; 0xc25
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f883 2c26 	strb.w	r2, [r3, #3110]	; 0xc26
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	0a1b      	lsrs	r3, r3, #8
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f883 2c27 	strb.w	r2, [r3, #3111]	; 0xc27
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 2c26 	ldrb.w	r2, [r3, #3110]	; 0xc26
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 3c27 	ldrb.w	r3, [r3, #3111]	; 0xc27
 80049e6:	4413      	add	r3, r2
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	43db      	mvns	r3, r3
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f883 2c29 	strb.w	r2, [r3, #3113]	; 0xc29
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	b21b      	sxth	r3, r3
 8004a02:	121b      	asrs	r3, r3, #8
 8004a04:	b21b      	sxth	r3, r3
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f883 2c2a 	strb.w	r2, [r3, #3114]	; 0xc2a

    /* calculate checksum */
    int chk = 0;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004a12:	2305      	movs	r3, #5
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	3306      	adds	r3, #6
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	dc0d      	bgt.n	8004a3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xcc>
      chk += message_out[i];
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	4413      	add	r3, r2
 8004a26:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4413      	add	r3, r2
 8004a32:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	3301      	adds	r3, #1
 8004a38:	61bb      	str	r3, [r7, #24]
 8004a3a:	e7ec      	b.n	8004a16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa6>
    l += 7;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	3307      	adds	r3, #7
 8004a40:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	425a      	negs	r2, r3
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	bf58      	it	pl
 8004a4c:	4253      	negpl	r3, r2
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	1c59      	adds	r1, r3, #1
 8004a54:	6179      	str	r1, [r7, #20]
 8004a56:	43d2      	mvns	r2, r2
 8004a58:	b2d1      	uxtb	r1, r2
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	460a      	mov	r2, r1
 8004a60:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24

    if (l <= OUTPUT_SIZE)
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a6a:	dc0a      	bgt.n	8004a82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x112>
    {
      hardware_.write(message_out, l);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	1d18      	adds	r0, r3, #4
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4619      	mov	r1, r3
 8004a7a:	f7fe f9ad 	bl	8002dd8 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	e005      	b.n	8004a8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004a82:	4905      	ldr	r1, [pc, #20]	; (8004a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x128>)
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 f849 	bl	8004b1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8004a8a:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3720      	adds	r7, #32
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	080112a0 	.word	0x080112a0

08004a9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fe f9da 	bl	8002e64 <_ZN13STM32Hardware4timeEv>
 8004ab0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4915      	ldr	r1, [pc, #84]	; (8004b10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8004aba:	fba1 1303 	umull	r1, r3, r1, r3
 8004abe:	099b      	lsrs	r3, r3, #6
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	1e5a      	subs	r2, r3, #1
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	6859      	ldr	r1, [r3, #4]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8004ad2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ad6:	099b      	lsrs	r3, r3, #6
 8004ad8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004adc:	fb00 f303 	mul.w	r3, r0, r3
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	4a0c      	ldr	r2, [pc, #48]	; (8004b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 8004ae4:	fb02 f303 	mul.w	r3, r2, r3
 8004ae8:	1aca      	subs	r2, r1, r3
 8004aea:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 8004aec:	4413      	add	r3, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	f8c2 381c 	str.w	r3, [r2, #2076]	; 0x81c
    normalizeSecNSec(sec_offset, nsec_offset);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8004b00:	4619      	mov	r1, r3
 8004b02:	4610      	mov	r0, r2
 8004b04:	f7fb ff4a 	bl	800099c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	10624dd3 	.word	0x10624dd3
 8004b14:	000f4240 	.word	0x000f4240
 8004b18:	3b9aca00 	.word	0x3b9aca00

08004b1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	2103      	movs	r1, #3
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f804 	bl	8004b38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8004b30:	bf00      	nop
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b088      	sub	sp, #32
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	460b      	mov	r3, r1
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004b46:	f107 0314 	add.w	r3, r7, #20
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fd fc2a 	bl	80023a4 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004b50:	7afb      	ldrb	r3, [r7, #11]
 8004b52:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f107 0214 	add.w	r2, r7, #20
 8004b62:	2107      	movs	r1, #7
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	4798      	blx	r3
  }
 8004b68:	bf00      	nop
 8004b6a:	3720      	adds	r7, #32
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <_Z41__static_initialization_and_destruction_0ii>:
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d137      	bne.n	8004bf0 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d132      	bne.n	8004bf0 <_Z41__static_initialization_and_destruction_0ii+0x80>
ros::NodeHandle nh;
 8004b8a:	481b      	ldr	r0, [pc, #108]	; (8004bf8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004b8c:	f7ff f988 	bl	8003ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
geometry_msgs::Point microswitch;
 8004b90:	481a      	ldr	r0, [pc, #104]	; (8004bfc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004b92:	f7fe f973 	bl	8002e7c <_ZN13geometry_msgs5PointC1Ev>
geometry_msgs::Point car_speed;
 8004b96:	481a      	ldr	r0, [pc, #104]	; (8004c00 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004b98:	f7fe f970 	bl	8002e7c <_ZN13geometry_msgs5PointC1Ev>
std_msgs::Int64 relay;
 8004b9c:	4819      	ldr	r0, [pc, #100]	; (8004c04 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004b9e:	f7fe fe83 	bl	80038a8 <_ZN8std_msgs5Int64C1Ev>
std_msgs::Int64 reset;
 8004ba2:	4819      	ldr	r0, [pc, #100]	; (8004c08 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004ba4:	f7fe fe80 	bl	80038a8 <_ZN8std_msgs5Int64C1Ev>
ros::Subscriber<geometry_msgs::Point> mecanum_sub("mecanum_toSTM", ROS::mecanum_callback);
 8004ba8:	2301      	movs	r3, #1
 8004baa:	4a18      	ldr	r2, [pc, #96]	; (8004c0c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004bac:	4918      	ldr	r1, [pc, #96]	; (8004c10 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004bae:	4819      	ldr	r0, [pc, #100]	; (8004c14 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8004bb0:	f7ff fa1c 	bl	8003fec <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<geometry_msgs::Point> intake_sub("intake_toSTM", ROS::intake_callback);
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	4a18      	ldr	r2, [pc, #96]	; (8004c18 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8004bb8:	4918      	ldr	r1, [pc, #96]	; (8004c1c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8004bba:	4819      	ldr	r0, [pc, #100]	; (8004c20 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8004bbc:	f7ff fa16 	bl	8003fec <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int64> relay_sub("relay_toSTM", ROS::relay_callback);
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	4a18      	ldr	r2, [pc, #96]	; (8004c24 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8004bc4:	4918      	ldr	r1, [pc, #96]	; (8004c28 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8004bc6:	4819      	ldr	r0, [pc, #100]	; (8004c2c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8004bc8:	f7ff fa34 	bl	8004034 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>
ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
 8004bcc:	2300      	movs	r3, #0
 8004bce:	4a0c      	ldr	r2, [pc, #48]	; (8004c00 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004bd0:	4917      	ldr	r1, [pc, #92]	; (8004c30 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8004bd2:	4818      	ldr	r0, [pc, #96]	; (8004c34 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8004bd4:	f7fd ff58 	bl	8002a88 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher reset_pub("reset_fromSTM", &reset);
 8004bd8:	2300      	movs	r3, #0
 8004bda:	4a0b      	ldr	r2, [pc, #44]	; (8004c08 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004bdc:	4916      	ldr	r1, [pc, #88]	; (8004c38 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8004bde:	4817      	ldr	r0, [pc, #92]	; (8004c3c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8004be0:	f7fd ff52 	bl	8002a88 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher micro_pub("microswitch_fromSTM", &microswitch);
 8004be4:	2300      	movs	r3, #0
 8004be6:	4a05      	ldr	r2, [pc, #20]	; (8004bfc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004be8:	4915      	ldr	r1, [pc, #84]	; (8004c40 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8004bea:	4816      	ldr	r0, [pc, #88]	; (8004c44 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8004bec:	f7fd ff4c 	bl	8002a88 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004bf0:	bf00      	nop
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	240007bc 	.word	0x240007bc
 8004bfc:	240018f8 	.word	0x240018f8
 8004c00:	24001918 	.word	0x24001918
 8004c04:	24001938 	.word	0x24001938
 8004c08:	24001948 	.word	0x24001948
 8004c0c:	08003ccd 	.word	0x08003ccd
 8004c10:	080112dc 	.word	0x080112dc
 8004c14:	24001958 	.word	0x24001958
 8004c18:	08003c89 	.word	0x08003c89
 8004c1c:	080112ec 	.word	0x080112ec
 8004c20:	24001990 	.word	0x24001990
 8004c24:	08003c55 	.word	0x08003c55
 8004c28:	080112fc 	.word	0x080112fc
 8004c2c:	240019c8 	.word	0x240019c8
 8004c30:	08011308 	.word	0x08011308
 8004c34:	240019f0 	.word	0x240019f0
 8004c38:	08011318 	.word	0x08011318
 8004c3c:	24001a04 	.word	0x24001a04
 8004c40:	08011328 	.word	0x08011328
 8004c44:	24001a18 	.word	0x24001a18

08004c48 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3310      	adds	r3, #16
 8004c56:	6839      	ldr	r1, [r7, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fe fec4 	bl	80039e6 <_ZN8std_msgs5Int6411deserializeEPh>
    this->cb_(msg);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	3210      	adds	r2, #16
 8004c66:	4610      	mov	r0, r2
 8004c68:	4798      	blx	r3
  }
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
 8004c7e:	4618      	mov	r0, r3
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <_ZN3ros10SubscriberIN8std_msgs5Int64EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b082      	sub	sp, #8
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3310      	adds	r3, #16
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fe ffa8 	bl	8003bec <_ZN8std_msgs5Int647getTypeEv>
 8004c9c:	4603      	mov	r3, r0
  }
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b082      	sub	sp, #8
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3310      	adds	r3, #16
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fe ffa8 	bl	8003c08 <_ZN8std_msgs5Int646getMD5Ev>
 8004cb8:	4603      	mov	r3, r0
  }
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b082      	sub	sp, #8
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3310      	adds	r3, #16
 8004cd0:	6839      	ldr	r1, [r7, #0]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fe fa6d 	bl	80031b2 <_ZN13geometry_msgs5Point11deserializeEPh>
    this->cb_(msg);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	3210      	adds	r2, #16
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	4798      	blx	r3
  }
 8004ce4:	bf00      	nop
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3310      	adds	r3, #16
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fe fdad 	bl	8003870 <_ZN13geometry_msgs5Point7getTypeEv>
 8004d16:	4603      	mov	r3, r0
  }
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3310      	adds	r3, #16
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fe fdad 	bl	800388c <_ZN13geometry_msgs5Point6getMD5Ev>
 8004d32:	4603      	mov	r3, r0
  }
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
    return configured_;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d4a:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
  };
 8004d4e:	4618      	mov	r0, r3
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <_GLOBAL__sub_I_nh>:
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004d62:	2001      	movs	r0, #1
 8004d64:	f7ff ff04 	bl	8004b70 <_Z41__static_initialization_and_destruction_0ii>
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	0000      	movs	r0, r0
 8004d6c:	0000      	movs	r0, r0
	...

08004d70 <_ZN5SCARAC1Ev>:
#define AIR_PORT GPIOA
#define AIR_PIN GPIO_PIN_5

extern TIM_HandleTypeDef htim23;

struct SCARA{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6879      	ldr	r1, [r7, #4]
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	e9c1 2300 	strd	r2, r3, [r1]
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	4b4e      	ldr	r3, [pc, #312]	; (8004ec8 <_ZN5SCARAC1Ev+0x158>)
 8004d8e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	a346      	add	r3, pc, #280	; (adr r3, 8004eb0 <_ZN5SCARAC1Ev+0x140>)
 8004d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	a340      	add	r3, pc, #256	; (adr r3, 8004eb0 <_ZN5SCARAC1Ev+0x140>)
 8004db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	639a      	str	r2, [r3, #56]	; 0x38
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	4b41      	ldr	r3, [pc, #260]	; (8004ecc <_ZN5SCARAC1Ev+0x15c>)
 8004dc6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	4b3b      	ldr	r3, [pc, #236]	; (8004ecc <_ZN5SCARAC1Ev+0x15c>)
 8004de0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	659a      	str	r2, [r3, #88]	; 0x58
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004e06:	6879      	ldr	r1, [r7, #4]
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	679a      	str	r2, [r3, #120]	; 0x78
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	67da      	str	r2, [r3, #124]	; 0x7c
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	a325      	add	r3, pc, #148	; (adr r3, 8004eb8 <_ZN5SCARAC1Ev+0x148>)
 8004e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e28:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	a324      	add	r3, pc, #144	; (adr r3, 8004ec0 <_ZN5SCARAC1Ev+0x150>)
 8004e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e34:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	a321      	add	r3, pc, #132	; (adr r3, 8004ec0 <_ZN5SCARAC1Ev+0x150>)
 8004e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e40:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	4b10      	ldr	r3, [pc, #64]	; (8004ec8 <_ZN5SCARAC1Ev+0x158>)
 8004e88:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	f3af 8000 	nop.w
 8004eb0:	00000000 	.word	0x00000000
 8004eb4:	4070e000 	.word	0x4070e000
 8004eb8:	00000000 	.word	0x00000000
 8004ebc:	40622000 	.word	0x40622000
 8004ec0:	00000000 	.word	0x00000000
 8004ec4:	40a00400 	.word	0x40a00400
 8004ec8:	c0490000 	.word	0xc0490000
 8004ecc:	c0668000 	.word	0xc0668000

08004ed0 <_ZN5SCARA7trinaryEdP12GPIO_TypeDeftS1_t>:
#include "scara.h"

SCARA sc;

void SCARA::trinary(double function, GPIO_TypeDef* a_port,
		uint16_t a_pin, GPIO_TypeDef* b_port, uint16_t b_pin){ \
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6178      	str	r0, [r7, #20]
 8004ed8:	ed87 0b02 	vstr	d0, [r7, #8]
 8004edc:	6139      	str	r1, [r7, #16]
 8004ede:	603b      	str	r3, [r7, #0]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	80fb      	strh	r3, [r7, #6]
	if (function == 1) {
 8004ee4:	ed97 7b02 	vldr	d7, [r7, #8]
 8004ee8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004eec:	eeb4 7b46 	vcmp.f64	d7, d6
 8004ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef4:	d10c      	bne.n	8004f10 <_ZN5SCARA7trinaryEdP12GPIO_TypeDeftS1_t+0x40>
		HAL_GPIO_WritePin(a_port, a_pin, GPIO_PIN_RESET);
 8004ef6:	88fb      	ldrh	r3, [r7, #6]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	4619      	mov	r1, r3
 8004efc:	6938      	ldr	r0, [r7, #16]
 8004efe:	f005 f81d 	bl	8009f3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_port, b_pin, GPIO_PIN_SET);
 8004f02:	8c3b      	ldrh	r3, [r7, #32]
 8004f04:	2201      	movs	r2, #1
 8004f06:	4619      	mov	r1, r3
 8004f08:	6838      	ldr	r0, [r7, #0]
 8004f0a:	f005 f817 	bl	8009f3c <HAL_GPIO_WritePin>
	}
	else if (function == -1) {
		HAL_GPIO_WritePin(a_port, a_pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(b_port, b_pin, GPIO_PIN_RESET);
	}
}
 8004f0e:	e028      	b.n	8004f62 <_ZN5SCARA7trinaryEdP12GPIO_TypeDeftS1_t+0x92>
	else if (function == 0) {
 8004f10:	ed97 7b02 	vldr	d7, [r7, #8]
 8004f14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f1c:	d10c      	bne.n	8004f38 <_ZN5SCARA7trinaryEdP12GPIO_TypeDeftS1_t+0x68>
		HAL_GPIO_WritePin(a_port, a_pin, GPIO_PIN_RESET);
 8004f1e:	88fb      	ldrh	r3, [r7, #6]
 8004f20:	2200      	movs	r2, #0
 8004f22:	4619      	mov	r1, r3
 8004f24:	6938      	ldr	r0, [r7, #16]
 8004f26:	f005 f809 	bl	8009f3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_port, b_pin, GPIO_PIN_RESET);
 8004f2a:	8c3b      	ldrh	r3, [r7, #32]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	4619      	mov	r1, r3
 8004f30:	6838      	ldr	r0, [r7, #0]
 8004f32:	f005 f803 	bl	8009f3c <HAL_GPIO_WritePin>
}
 8004f36:	e014      	b.n	8004f62 <_ZN5SCARA7trinaryEdP12GPIO_TypeDeftS1_t+0x92>
	else if (function == -1) {
 8004f38:	ed97 7b02 	vldr	d7, [r7, #8]
 8004f3c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8004f40:	eeb4 7b46 	vcmp.f64	d7, d6
 8004f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f48:	d10b      	bne.n	8004f62 <_ZN5SCARA7trinaryEdP12GPIO_TypeDeftS1_t+0x92>
		HAL_GPIO_WritePin(a_port, a_pin, GPIO_PIN_SET);
 8004f4a:	88fb      	ldrh	r3, [r7, #6]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	4619      	mov	r1, r3
 8004f50:	6938      	ldr	r0, [r7, #16]
 8004f52:	f004 fff3 	bl	8009f3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_port, b_pin, GPIO_PIN_RESET);
 8004f56:	8c3b      	ldrh	r3, [r7, #32]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	6838      	ldr	r0, [r7, #0]
 8004f5e:	f004 ffed 	bl	8009f3c <HAL_GPIO_WritePin>
}
 8004f62:	bf00      	nop
 8004f64:	3718      	adds	r7, #24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <_ZN5SCARA3runEv>:


void SCARA::run(){
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	6078      	str	r0, [r7, #4]
	/* relay */
	sc.trinary(relay, VALVE_PORT, VALVE_PIN, AIR_PORT, AIR_PIN);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	ed93 7b32 	vldr	d7, [r3, #200]	; 0xc8
 8004f7a:	2320      	movs	r3, #32
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <_ZN5SCARA3runEv+0x30>)
 8004f80:	2210      	movs	r2, #16
 8004f82:	4906      	ldr	r1, [pc, #24]	; (8004f9c <_ZN5SCARA3runEv+0x30>)
 8004f84:	eeb0 0b47 	vmov.f64	d0, d7
 8004f88:	4805      	ldr	r0, [pc, #20]	; (8004fa0 <_ZN5SCARA3runEv+0x34>)
 8004f8a:	f7ff ffa1 	bl	8004ed0 <_ZN5SCARA7trinaryEdP12GPIO_TypeDeftS1_t>

	/* arm */
	sc.seize();
 8004f8e:	4804      	ldr	r0, [pc, #16]	; (8004fa0 <_ZN5SCARA3runEv+0x34>)
 8004f90:	f000 f80a 	bl	8004fa8 <_ZN5SCARA5seizeEv>
}
 8004f94:	bf00      	nop
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	58020000 	.word	0x58020000
 8004fa0:	24001a30 	.word	0x24001a30
 8004fa4:	00000000 	.word	0x00000000

08004fa8 <_ZN5SCARA5seizeEv>:

void SCARA::seize(){
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
	//'update' is used by ST
	if (update == 1){
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d115      	bne.n	8004fe6 <_ZN5SCARA5seizeEv+0x3e>
		x = ST_test_x;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	e9c1 2300 	strd	r2, r3, [r1]
		y = ST_test_y;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	e9c1 2302 	strd	r2, r3, [r1, #8]
		flag = ST_test_flag;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		update = 0;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	}

	phi = count_phi(x,y);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	ed93 7b00 	vldr	d7, [r3]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	ed93 6b02 	vldr	d6, [r3, #8]
 8004ff2:	eeb0 1b46 	vmov.f64	d1, d6
 8004ff6:	eeb0 0b47 	vmov.f64	d0, d7
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fdf4 	bl	8005be8 <_ZN5SCARA9count_phiEdd>
 8005000:	eeb0 7b40 	vmov.f64	d7, d0
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	ed83 7b04 	vstr	d7, [r3, #16]
	at = count_atan2(x,y);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	ed93 7b00 	vldr	d7, [r3]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	ed93 6b02 	vldr	d6, [r3, #8]
 8005016:	eeb0 1b46 	vmov.f64	d1, d6
 800501a:	eeb0 0b47 	vmov.f64	d0, d7
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fca6 	bl	8005970 <_ZN5SCARA11count_atan2Edd>
 8005024:	eeb0 7b40 	vmov.f64	d7, d0
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	ed83 7b06 	vstr	d7, [r3, #24]
	if (count_atan2(x,y) < 0)at += 360;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	ed93 7b00 	vldr	d7, [r3]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	ed93 6b02 	vldr	d6, [r3, #8]
 800503a:	eeb0 1b46 	vmov.f64	d1, d6
 800503e:	eeb0 0b47 	vmov.f64	d0, d7
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fc94 	bl	8005970 <_ZN5SCARA11count_atan2Edd>
 8005048:	eeb0 7b40 	vmov.f64	d7, d0
 800504c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005054:	bf4c      	ite	mi
 8005056:	2301      	movmi	r3, #1
 8005058:	2300      	movpl	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d009      	beq.n	8005074 <_ZN5SCARA5seizeEv+0xcc>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	ed93 7b06 	vldr	d7, [r3, #24]
 8005066:	ed9f 6b9e 	vldr	d6, [pc, #632]	; 80052e0 <_ZN5SCARA5seizeEv+0x338>
 800506a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	ed83 7b06 	vstr	d7, [r3, #24]
	if (at + phi <= 250){
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	ed93 6b06 	vldr	d6, [r3, #24]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	ed93 7b04 	vldr	d7, [r3, #16]
 8005080:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005084:	ed9f 6b98 	vldr	d6, [pc, #608]	; 80052e8 <_ZN5SCARA5seizeEv+0x340>
 8005088:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800508c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005090:	d81f      	bhi.n	80050d2 <_ZN5SCARA5seizeEv+0x12a>
		angle_goal_1 = at + phi;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	ed93 6b06 	vldr	d6, [r3, #24]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	ed93 7b04 	vldr	d7, [r3, #16]
 800509e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	ed83 7b08 	vstr	d7, [r3, #32]
		angle_goal_2 = -count_theta2(x,y);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	ed93 7b00 	vldr	d7, [r3]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	ed93 6b02 	vldr	d6, [r3, #8]
 80050b4:	eeb0 1b46 	vmov.f64	d1, d6
 80050b8:	eeb0 0b47 	vmov.f64	d0, d7
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fd37 	bl	8005b30 <_ZN5SCARA12count_theta2Edd>
 80050c2:	eeb0 7b40 	vmov.f64	d7, d0
 80050c6:	eeb1 7b47 	vneg.f64	d7, d7
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
 80050d0:	e02b      	b.n	800512a <_ZN5SCARA5seizeEv+0x182>
	}
	else if(at + phi > 250){
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	ed93 6b06 	vldr	d6, [r3, #24]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	ed93 7b04 	vldr	d7, [r3, #16]
 80050de:	ee36 7b07 	vadd.f64	d7, d6, d7
 80050e2:	ed9f 6b81 	vldr	d6, [pc, #516]	; 80052e8 <_ZN5SCARA5seizeEv+0x340>
 80050e6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80050ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ee:	dd1c      	ble.n	800512a <_ZN5SCARA5seizeEv+0x182>
		angle_goal_1 = at - phi;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	ed93 6b06 	vldr	d6, [r3, #24]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	ed93 7b04 	vldr	d7, [r3, #16]
 80050fc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	ed83 7b08 	vstr	d7, [r3, #32]
		angle_goal_2 = count_theta2(x,y);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	ed93 7b00 	vldr	d7, [r3]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	ed93 6b02 	vldr	d6, [r3, #8]
 8005112:	eeb0 1b46 	vmov.f64	d1, d6
 8005116:	eeb0 0b47 	vmov.f64	d0, d7
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fd08 	bl	8005b30 <_ZN5SCARA12count_theta2Edd>
 8005120:	eeb0 7b40 	vmov.f64	d7, d0
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	}

	 if (air_pressure == 1)HAL_GPIO_WritePin(AIR_PORT, AIR_PIN, GPIO_PIN_RESET);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005130:	2b01      	cmp	r3, #1
 8005132:	d105      	bne.n	8005140 <_ZN5SCARA5seizeEv+0x198>
 8005134:	2200      	movs	r2, #0
 8005136:	2120      	movs	r1, #32
 8005138:	4873      	ldr	r0, [pc, #460]	; (8005308 <_ZN5SCARA5seizeEv+0x360>)
 800513a:	f004 feff 	bl	8009f3c <HAL_GPIO_WritePin>
 800513e:	e009      	b.n	8005154 <_ZN5SCARA5seizeEv+0x1ac>
	 else if (air_pressure == 0)HAL_GPIO_WritePin(AIR_PORT, AIR_PIN, GPIO_PIN_SET);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d104      	bne.n	8005154 <_ZN5SCARA5seizeEv+0x1ac>
 800514a:	2201      	movs	r2, #1
 800514c:	2120      	movs	r1, #32
 800514e:	486e      	ldr	r0, [pc, #440]	; (8005308 <_ZN5SCARA5seizeEv+0x360>)
 8005150:	f004 fef4 	bl	8009f3c <HAL_GPIO_WritePin>

	 if (valve_switch == 1)HAL_GPIO_WritePin(VALVE_PORT, VALVE_PIN, GPIO_PIN_RESET);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800515a:	2b01      	cmp	r3, #1
 800515c:	d105      	bne.n	800516a <_ZN5SCARA5seizeEv+0x1c2>
 800515e:	2200      	movs	r2, #0
 8005160:	2110      	movs	r1, #16
 8005162:	4869      	ldr	r0, [pc, #420]	; (8005308 <_ZN5SCARA5seizeEv+0x360>)
 8005164:	f004 feea 	bl	8009f3c <HAL_GPIO_WritePin>
 8005168:	e009      	b.n	800517e <_ZN5SCARA5seizeEv+0x1d6>
	 else if (valve_switch == 0)HAL_GPIO_WritePin(VALVE_PORT, VALVE_PIN, GPIO_PIN_SET);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005170:	2b00      	cmp	r3, #0
 8005172:	d104      	bne.n	800517e <_ZN5SCARA5seizeEv+0x1d6>
 8005174:	2201      	movs	r2, #1
 8005176:	2110      	movs	r1, #16
 8005178:	4863      	ldr	r0, [pc, #396]	; (8005308 <_ZN5SCARA5seizeEv+0x360>)
 800517a:	f004 fedf 	bl	8009f3c <HAL_GPIO_WritePin>

	 pulse_goal = 600 + 10 * servo_angle;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 8005184:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005188:	ee27 7b06 	vmul.f64	d7, d7, d6
 800518c:	ed9f 6b58 	vldr	d6, [pc, #352]	; 80052f0 <_ZN5SCARA5seizeEv+0x348>
 8005190:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
	 if (servo_angle == 145)__HAL_TIM_SET_COMPARE(&htim23, TIM_CHANNEL_1, pulse_now);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 80051a0:	ed9f 6b55 	vldr	d6, [pc, #340]	; 80052f8 <_ZN5SCARA5seizeEv+0x350>
 80051a4:	eeb4 7b46 	vcmp.f64	d7, d6
 80051a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ac:	d109      	bne.n	80051c2 <_ZN5SCARA5seizeEv+0x21a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80051b4:	4b55      	ldr	r3, [pc, #340]	; (800530c <_ZN5SCARA5seizeEv+0x364>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80051bc:	ee17 2a90 	vmov	r2, s15
 80051c0:	635a      	str	r2, [r3, #52]	; 0x34
	 if (pulse_now != pulse_goal){
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	ed93 6b22 	vldr	d6, [r3, #136]	; 0x88
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80051ce:	eeb4 6b47 	vcmp.f64	d6, d7
 80051d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d6:	d050      	beq.n	800527a <_ZN5SCARA5seizeEv+0x2d2>
	  while (pulse_now < pulse_goal){
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	ed93 6b22 	vldr	d6, [r3, #136]	; 0x88
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80051e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80051e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ec:	d400      	bmi.n	80051f0 <_ZN5SCARA5seizeEv+0x248>
 80051ee:	e017      	b.n	8005220 <_ZN5SCARA5seizeEv+0x278>
	   pulse_now ++;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80051f6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80051fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
	   HAL_Delay(0.3);
 8005204:	2000      	movs	r0, #0
 8005206:	f001 fd6b 	bl	8006ce0 <HAL_Delay>
	   __HAL_TIM_SET_COMPARE(&htim23, TIM_CHANNEL_1, pulse_now);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8005210:	4b3e      	ldr	r3, [pc, #248]	; (800530c <_ZN5SCARA5seizeEv+0x364>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005218:	ee17 2a90 	vmov	r2, s15
 800521c:	635a      	str	r2, [r3, #52]	; 0x34
	  while (pulse_now < pulse_goal){
 800521e:	e7db      	b.n	80051d8 <_ZN5SCARA5seizeEv+0x230>
	  }
	  while (pulse_now > pulse_goal){
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	ed93 6b22 	vldr	d6, [r3, #136]	; 0x88
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 800522c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005234:	dd17      	ble.n	8005266 <_ZN5SCARA5seizeEv+0x2be>
	   pulse_now --;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 800523c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005240:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
	   HAL_Delay(0.3);
 800524a:	2000      	movs	r0, #0
 800524c:	f001 fd48 	bl	8006ce0 <HAL_Delay>
	   __HAL_TIM_SET_COMPARE(&htim23, TIM_CHANNEL_1, pulse_now);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8005256:	4b2d      	ldr	r3, [pc, #180]	; (800530c <_ZN5SCARA5seizeEv+0x364>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800525e:	ee17 2a90 	vmov	r2, s15
 8005262:	635a      	str	r2, [r3, #52]	; 0x34
	  while (pulse_now > pulse_goal){
 8005264:	e7dc      	b.n	8005220 <_ZN5SCARA5seizeEv+0x278>
	  }
	  input_check = 1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	  pulse_now = pulse_goal;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	 }


	 if (angle_goal_1 != angle_now_1) {
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	ed93 6b08 	vldr	d6, [r3, #32]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8005286:	eeb4 6b47 	vcmp.f64	d6, d7
 800528a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800528e:	f000 8088 	beq.w	80053a2 <_ZN5SCARA5seizeEv+0x3fa>

	  step_1 = (double)(angle_goal_1 - angle_now_1)*4 *8 / 0.9;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	ed93 6b08 	vldr	d6, [r3, #32]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800529e:	ee36 7b47 	vsub.f64	d7, d6, d7
 80052a2:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80052a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80052aa:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 80052ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80052b2:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8005300 <_ZN5SCARA5seizeEv+0x358>
 80052b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	  if (step_1 >= 0) {
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80052c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80052ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ce:	db21      	blt.n	8005314 <_ZN5SCARA5seizeEv+0x36c>
	   HAL_GPIO_WritePin(DIR_PORT_1, DIR_PIN_1, GPIO_PIN_SET);
 80052d0:	2201      	movs	r2, #1
 80052d2:	2120      	movs	r1, #32
 80052d4:	480e      	ldr	r0, [pc, #56]	; (8005310 <_ZN5SCARA5seizeEv+0x368>)
 80052d6:	f004 fe31 	bl	8009f3c <HAL_GPIO_WritePin>
 80052da:	e030      	b.n	800533e <_ZN5SCARA5seizeEv+0x396>
 80052dc:	f3af 8000 	nop.w
 80052e0:	00000000 	.word	0x00000000
 80052e4:	40768000 	.word	0x40768000
 80052e8:	00000000 	.word	0x00000000
 80052ec:	406f4000 	.word	0x406f4000
 80052f0:	00000000 	.word	0x00000000
 80052f4:	4082c000 	.word	0x4082c000
 80052f8:	00000000 	.word	0x00000000
 80052fc:	40622000 	.word	0x40622000
 8005300:	cccccccd 	.word	0xcccccccd
 8005304:	3feccccc 	.word	0x3feccccc
 8005308:	58020000 	.word	0x58020000
 800530c:	24000578 	.word	0x24000578
 8005310:	58020800 	.word	0x58020800
	  }else if (step_1 < 0) {
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800531a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800531e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005322:	d50c      	bpl.n	800533e <_ZN5SCARA5seizeEv+0x396>
	   step_1 = -step_1;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800532a:	eeb1 7b47 	vneg.f64	d7, d7
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	   HAL_GPIO_WritePin(DIR_PORT_1, DIR_PIN_1, GPIO_PIN_RESET);
 8005334:	2200      	movs	r2, #0
 8005336:	2120      	movs	r1, #32
 8005338:	4899      	ldr	r0, [pc, #612]	; (80055a0 <_ZN5SCARA5seizeEv+0x5f8>)
 800533a:	f004 fdff 	bl	8009f3c <HAL_GPIO_WritePin>
	  }
	  if (state == 1)step_1 *= 1.02; //undetermined
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8005344:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005348:	eeb4 7b46 	vcmp.f64	d7, d6
 800534c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005350:	d109      	bne.n	8005366 <_ZN5SCARA5seizeEv+0x3be>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8005358:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8005570 <_ZN5SCARA5seizeEv+0x5c8>
 800535c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	  if (state == 2)step_1 *= 1.05; //undetermined
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 800536c:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8005370:	eeb4 7b46 	vcmp.f64	d7, d6
 8005374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005378:	d109      	bne.n	800538e <_ZN5SCARA5seizeEv+0x3e6>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8005380:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8005578 <_ZN5SCARA5seizeEv+0x5d0>
 8005384:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	  input_check = 1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	  angle_now_1 = angle_goal_1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 }

	 if (angle_goal_2 != angle_now_2) {
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80053ae:	eeb4 6b47 	vcmp.f64	d6, d7
 80053b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b6:	f000 80a7 	beq.w	8005508 <_ZN5SCARA5seizeEv+0x560>

	  step_2 = (angle_goal_2 - angle_now_2)*8 / 0.9;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80053c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80053ca:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 80053ce:	ee27 6b06 	vmul.f64	d6, d7, d6
 80053d2:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8005580 <_ZN5SCARA5seizeEv+0x5d8>
 80053d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

	  if (angle_now_2 >= 180 && angle_goal_2 < 180){
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80053e6:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8005588 <_ZN5SCARA5seizeEv+0x5e0>
 80053ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80053ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f2:	db14      	blt.n	800541e <_ZN5SCARA5seizeEv+0x476>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80053fa:	ed9f 6b63 	vldr	d6, [pc, #396]	; 8005588 <_ZN5SCARA5seizeEv+0x5e0>
 80053fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005406:	d50a      	bpl.n	800541e <_ZN5SCARA5seizeEv+0x476>
	   step_2 += 3200;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 800540e:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8005590 <_ZN5SCARA5seizeEv+0x5e8>
 8005412:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
 800541c:	e01d      	b.n	800545a <_ZN5SCARA5seizeEv+0x4b2>
	  }else if (angle_now_2 < 180 && angle_goal_2 >= 180){
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8005424:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8005588 <_ZN5SCARA5seizeEv+0x5e0>
 8005428:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800542c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005430:	d513      	bpl.n	800545a <_ZN5SCARA5seizeEv+0x4b2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8005438:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8005588 <_ZN5SCARA5seizeEv+0x5e0>
 800543c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005444:	db09      	blt.n	800545a <_ZN5SCARA5seizeEv+0x4b2>
	   step_2 -= 3200;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 800544c:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8005590 <_ZN5SCARA5seizeEv+0x5e8>
 8005450:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	  }

	  if (step_2 >= 0) {
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8005460:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005468:	db06      	blt.n	8005478 <_ZN5SCARA5seizeEv+0x4d0>
	   HAL_GPIO_WritePin(DIR_PORT_2, DIR_PIN_2, GPIO_PIN_SET);
 800546a:	2201      	movs	r2, #1
 800546c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005470:	484c      	ldr	r0, [pc, #304]	; (80055a4 <_ZN5SCARA5seizeEv+0x5fc>)
 8005472:	f004 fd63 	bl	8009f3c <HAL_GPIO_WritePin>
 8005476:	e015      	b.n	80054a4 <_ZN5SCARA5seizeEv+0x4fc>
	  }else if (step_2 < 0) {
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 800547e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005486:	d50d      	bpl.n	80054a4 <_ZN5SCARA5seizeEv+0x4fc>
	   step_2 = -step_2;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 800548e:	eeb1 7b47 	vneg.f64	d7, d7
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	   HAL_GPIO_WritePin(DIR_PORT_2, DIR_PIN_2, GPIO_PIN_RESET);
 8005498:	2200      	movs	r2, #0
 800549a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800549e:	4841      	ldr	r0, [pc, #260]	; (80055a4 <_ZN5SCARA5seizeEv+0x5fc>)
 80054a0:	f004 fd4c 	bl	8009f3c <HAL_GPIO_WritePin>
	  }
	  if (state == 1)step_2 *= 1.02; //undetermined
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 80054aa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80054ae:	eeb4 7b46 	vcmp.f64	d7, d6
 80054b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b6:	d109      	bne.n	80054cc <_ZN5SCARA5seizeEv+0x524>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80054be:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8005570 <_ZN5SCARA5seizeEv+0x5c8>
 80054c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	  if (state == 2)step_2 *= 1.05; //undetermined
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 80054d2:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80054d6:	eeb4 7b46 	vcmp.f64	d7, d6
 80054da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054de:	d109      	bne.n	80054f4 <_ZN5SCARA5seizeEv+0x54c>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80054e6:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8005578 <_ZN5SCARA5seizeEv+0x5d0>
 80054ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	  input_check = 1;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	  angle_now_2 = angle_goal_2;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8005502:	6879      	ldr	r1, [r7, #4]
 8005504:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 }

	 if (high_goal != high_now) {
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8005514:	eeb4 6b47 	vcmp.f64	d6, d7
 8005518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551c:	d064      	beq.n	80055e8 <_ZN5SCARA5seizeEv+0x640>

	  step_3 = (high_goal - high_now)*200 *8 / 6;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800552a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800552e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8005598 <_ZN5SCARA5seizeEv+0x5f0>
 8005532:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005536:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 800553a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800553e:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005542:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68

	  if (step_3 >= 0) {
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8005552:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555a:	db25      	blt.n	80055a8 <_ZN5SCARA5seizeEv+0x600>
	   HAL_GPIO_WritePin(DIR_PORT_3, DIR_PIN_3, GPIO_PIN_SET);
 800555c:	2201      	movs	r2, #1
 800555e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005562:	4810      	ldr	r0, [pc, #64]	; (80055a4 <_ZN5SCARA5seizeEv+0x5fc>)
 8005564:	f004 fcea 	bl	8009f3c <HAL_GPIO_WritePin>
 8005568:	e034      	b.n	80055d4 <_ZN5SCARA5seizeEv+0x62c>
 800556a:	bf00      	nop
 800556c:	f3af 8000 	nop.w
 8005570:	851eb852 	.word	0x851eb852
 8005574:	3ff051eb 	.word	0x3ff051eb
 8005578:	cccccccd 	.word	0xcccccccd
 800557c:	3ff0cccc 	.word	0x3ff0cccc
 8005580:	cccccccd 	.word	0xcccccccd
 8005584:	3feccccc 	.word	0x3feccccc
 8005588:	00000000 	.word	0x00000000
 800558c:	40668000 	.word	0x40668000
 8005590:	00000000 	.word	0x00000000
 8005594:	40a90000 	.word	0x40a90000
 8005598:	00000000 	.word	0x00000000
 800559c:	40690000 	.word	0x40690000
 80055a0:	58020800 	.word	0x58020800
 80055a4:	58021400 	.word	0x58021400
	  }else if (step_3 < 0) {
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80055ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80055b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b6:	d50d      	bpl.n	80055d4 <_ZN5SCARA5seizeEv+0x62c>
	   step_3 = -step_3;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80055be:	eeb1 7b47 	vneg.f64	d7, d7
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	   HAL_GPIO_WritePin(DIR_PORT_3, DIR_PIN_3, GPIO_PIN_RESET);
 80055c8:	2200      	movs	r2, #0
 80055ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055ce:	48ac      	ldr	r0, [pc, #688]	; (8005880 <_ZN5SCARA5seizeEv+0x8d8>)
 80055d0:	f004 fcb4 	bl	8009f3c <HAL_GPIO_WritePin>
	  }
	  input_check = 1;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	  high_now = high_goal;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80055e2:	6879      	ldr	r1, [r7, #4]
 80055e4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	 }

	 if (step_1 < 1 && step_1 > 0)step_1 = 1;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80055ee:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80055f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80055f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055fa:	d50d      	bpl.n	8005618 <_ZN5SCARA5seizeEv+0x670>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8005602:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560a:	dd05      	ble.n	8005618 <_ZN5SCARA5seizeEv+0x670>
 800560c:	6879      	ldr	r1, [r7, #4]
 800560e:	f04f 0200 	mov.w	r2, #0
 8005612:	4b9c      	ldr	r3, [pc, #624]	; (8005884 <_ZN5SCARA5seizeEv+0x8dc>)
 8005614:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 if (step_2 < 1 && step_2 > 0)step_2 = 1;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 800561e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005622:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800562a:	d50d      	bpl.n	8005648 <_ZN5SCARA5seizeEv+0x6a0>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8005632:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800563a:	dd05      	ble.n	8005648 <_ZN5SCARA5seizeEv+0x6a0>
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	f04f 0200 	mov.w	r2, #0
 8005642:	4b90      	ldr	r3, [pc, #576]	; (8005884 <_ZN5SCARA5seizeEv+0x8dc>)
 8005644:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 if (step_3 < 1 && step_3 > 0)step_3 = 1;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800564e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005652:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800565a:	d50d      	bpl.n	8005678 <_ZN5SCARA5seizeEv+0x6d0>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8005662:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800566a:	dd05      	ble.n	8005678 <_ZN5SCARA5seizeEv+0x6d0>
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	f04f 0200 	mov.w	r2, #0
 8005672:	4b84      	ldr	r3, [pc, #528]	; (8005884 <_ZN5SCARA5seizeEv+0x8dc>)
 8005674:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68


	 if (x == 0 && y == -50 && flag == 1){
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	ed93 7b00 	vldr	d7, [r3]
 800567e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005686:	d135      	bne.n	80056f4 <_ZN5SCARA5seizeEv+0x74c>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	ed93 7b02 	vldr	d7, [r3, #8]
 800568e:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8005860 <_ZN5SCARA5seizeEv+0x8b8>
 8005692:	eeb4 7b46 	vcmp.f64	d7, d6
 8005696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800569a:	d12b      	bne.n	80056f4 <_ZN5SCARA5seizeEv+0x74c>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d126      	bne.n	80056f4 <_ZN5SCARA5seizeEv+0x74c>
	  step_1 = 120;
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	4b76      	ldr	r3, [pc, #472]	; (8005888 <_ZN5SCARA5seizeEv+0x8e0>)
 80056ae:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	  HAL_GPIO_WritePin(DIR_PORT_1, DIR_PIN_1, GPIO_PIN_SET);
 80056b2:	2201      	movs	r2, #1
 80056b4:	2120      	movs	r1, #32
 80056b6:	4875      	ldr	r0, [pc, #468]	; (800588c <_ZN5SCARA5seizeEv+0x8e4>)
 80056b8:	f004 fc40 	bl	8009f3c <HAL_GPIO_WritePin>
	  step_2 = 30;
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	f04f 0200 	mov.w	r2, #0
 80056c2:	4b73      	ldr	r3, [pc, #460]	; (8005890 <_ZN5SCARA5seizeEv+0x8e8>)
 80056c4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	  HAL_GPIO_WritePin(DIR_PORT_2, DIR_PIN_2, GPIO_PIN_RESET);
 80056c8:	2200      	movs	r2, #0
 80056ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056ce:	486c      	ldr	r0, [pc, #432]	; (8005880 <_ZN5SCARA5seizeEv+0x8d8>)
 80056d0:	f004 fc34 	bl	8009f3c <HAL_GPIO_WritePin>
	  step_3 = 2000;
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	f04f 0200 	mov.w	r2, #0
 80056da:	4b6e      	ldr	r3, [pc, #440]	; (8005894 <_ZN5SCARA5seizeEv+0x8ec>)
 80056dc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	  HAL_GPIO_WritePin(DIR_PORT_3, DIR_PIN_3, GPIO_PIN_SET);
 80056e0:	2201      	movs	r2, #1
 80056e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056e6:	4866      	ldr	r0, [pc, #408]	; (8005880 <_ZN5SCARA5seizeEv+0x8d8>)
 80056e8:	f004 fc28 	bl	8009f3c <HAL_GPIO_WritePin>
	  flag = 5;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2205      	movs	r2, #5
 80056f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	 }
	 if (valve_switch == 1){
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d107      	bne.n	800570e <_ZN5SCARA5seizeEv+0x766>
	  HAL_Delay(2000);
 80056fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005702:	f001 faed 	bl	8006ce0 <HAL_Delay>
	  valve_switch = 0;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	 }


	 if (step_1 == 0 && step_2 == 0 && step_3 == 0 && input_check == 1){
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8005714:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800571c:	f040 8101 	bne.w	8005922 <_ZN5SCARA5seizeEv+0x97a>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8005726:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800572a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800572e:	f040 80f8 	bne.w	8005922 <_ZN5SCARA5seizeEv+0x97a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8005738:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800573c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005740:	f040 80ef 	bne.w	8005922 <_ZN5SCARA5seizeEv+0x97a>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800574a:	2b01      	cmp	r3, #1
 800574c:	f040 80e9 	bne.w	8005922 <_ZN5SCARA5seizeEv+0x97a>

	  if (flag == 2){
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005756:	2b02      	cmp	r3, #2
 8005758:	d104      	bne.n	8005764 <_ZN5SCARA5seizeEv+0x7bc>
	   flag = 5;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2205      	movs	r2, #5
 800575e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8005762:	e0da      	b.n	800591a <_ZN5SCARA5seizeEv+0x972>
	  }
	  else if (flag == 3){
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800576a:	2b03      	cmp	r3, #3
 800576c:	f040 80ad 	bne.w	80058ca <_ZN5SCARA5seizeEv+0x922>
	   air_pressure = 1, valve_switch = 0;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	   if (high_state == 0){
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005784:	2b00      	cmp	r3, #0
 8005786:	d147      	bne.n	8005818 <_ZN5SCARA5seizeEv+0x870>
	    if (state == 0)servo_angle = 20,state++;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 800578e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005796:	d110      	bne.n	80057ba <_ZN5SCARA5seizeEv+0x812>
 8005798:	6879      	ldr	r1, [r7, #4]
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	4b3e      	ldr	r3, [pc, #248]	; (8005898 <_ZN5SCARA5seizeEv+0x8f0>)
 80057a0:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 80057aa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80057ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
 80057b8:	e02a      	b.n	8005810 <_ZN5SCARA5seizeEv+0x868>
	    else if (state == 1)servo_angle = 270, state++;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 80057c0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80057c4:	eeb4 7b46 	vcmp.f64	d7, d6
 80057c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057cc:	d110      	bne.n	80057f0 <_ZN5SCARA5seizeEv+0x848>
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	a325      	add	r3, pc, #148	; (adr r3, 8005868 <_ZN5SCARA5seizeEv+0x8c0>)
 80057d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d6:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 80057e0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80057e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
 80057ee:	e00f      	b.n	8005810 <_ZN5SCARA5seizeEv+0x868>
	    else if (state == 2)servo_angle = 145;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 80057f6:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80057fa:	eeb4 7b46 	vcmp.f64	d7, d6
 80057fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005802:	d105      	bne.n	8005810 <_ZN5SCARA5seizeEv+0x868>
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	a31a      	add	r3, pc, #104	; (adr r3, 8005870 <_ZN5SCARA5seizeEv+0x8c8>)
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	    high_state = 1;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	67da      	str	r2, [r3, #124]	; 0x7c
 8005816:	e080      	b.n	800591a <_ZN5SCARA5seizeEv+0x972>
	   }
	   else if (high_state == 1){
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800581c:	2b01      	cmp	r3, #1
 800581e:	d109      	bne.n	8005834 <_ZN5SCARA5seizeEv+0x88c>
	    high_goal = -89;
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	a315      	add	r3, pc, #84	; (adr r3, 8005878 <_ZN5SCARA5seizeEv+0x8d0>)
 8005824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005828:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	    high_state = 2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	67da      	str	r2, [r3, #124]	; 0x7c
 8005832:	e072      	b.n	800591a <_ZN5SCARA5seizeEv+0x972>
	   }
	   else if (high_state == 2){
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005838:	2b02      	cmp	r3, #2
 800583a:	d12f      	bne.n	800589c <_ZN5SCARA5seizeEv+0x8f4>
	    HAL_Delay(2000);
 800583c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005840:	f001 fa4e 	bl	8006ce0 <HAL_Delay>
	    high_goal = 0;
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	f04f 0300 	mov.w	r3, #0
 800584e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	    high_state = 3;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2203      	movs	r2, #3
 8005856:	67da      	str	r2, [r3, #124]	; 0x7c
 8005858:	e05f      	b.n	800591a <_ZN5SCARA5seizeEv+0x972>
 800585a:	bf00      	nop
 800585c:	f3af 8000 	nop.w
 8005860:	00000000 	.word	0x00000000
 8005864:	c0490000 	.word	0xc0490000
 8005868:	00000000 	.word	0x00000000
 800586c:	4070e000 	.word	0x4070e000
 8005870:	00000000 	.word	0x00000000
 8005874:	40622000 	.word	0x40622000
 8005878:	00000000 	.word	0x00000000
 800587c:	c0564000 	.word	0xc0564000
 8005880:	58021400 	.word	0x58021400
 8005884:	3ff00000 	.word	0x3ff00000
 8005888:	405e0000 	.word	0x405e0000
 800588c:	58020800 	.word	0x58020800
 8005890:	403e0000 	.word	0x403e0000
 8005894:	409f4000 	.word	0x409f4000
 8005898:	40340000 	.word	0x40340000
	   }
	 else if(high_state == 3 && pulse_now == pulse_goal){
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058a0:	2b03      	cmp	r3, #3
 80058a2:	d13a      	bne.n	800591a <_ZN5SCARA5seizeEv+0x972>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	ed93 6b22 	vldr	d6, [r3, #136]	; 0x88
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80058b0:	eeb4 6b47 	vcmp.f64	d6, d7
 80058b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b8:	d12f      	bne.n	800591a <_ZN5SCARA5seizeEv+0x972>
	    high_state = 0;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	67da      	str	r2, [r3, #124]	; 0x7c
	    flag = 5;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2205      	movs	r2, #5
 80058c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80058c8:	e027      	b.n	800591a <_ZN5SCARA5seizeEv+0x972>
	   }
	  }
	 else if (step_1 == 0 && step_2 == 0 && flag == 4){
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80058d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80058d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058d8:	d11f      	bne.n	800591a <_ZN5SCARA5seizeEv+0x972>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80058e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80058e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e8:	d117      	bne.n	800591a <_ZN5SCARA5seizeEv+0x972>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80058f0:	2b04      	cmp	r3, #4
 80058f2:	d112      	bne.n	800591a <_ZN5SCARA5seizeEv+0x972>
	   air_pressure = 0;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	   valve_switch = 1;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	   state = 0;
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	f04f 0200 	mov.w	r2, #0
 800590a:	f04f 0300 	mov.w	r3, #0
 800590e:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	   flag = 5;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2205      	movs	r2, #5
 8005916:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	  }
	  input_check = 0;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	 }


	 if (step_1 == 0 && step_2 == 0 && step_3 == 0 && flag == 5){
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8005928:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800592c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005930:	d118      	bne.n	8005964 <_ZN5SCARA5seizeEv+0x9bc>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8005938:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800593c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005940:	d110      	bne.n	8005964 <_ZN5SCARA5seizeEv+0x9bc>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8005948:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800594c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005950:	d108      	bne.n	8005964 <_ZN5SCARA5seizeEv+0x9bc>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005958:	2b05      	cmp	r3, #5
 800595a:	d103      	bne.n	8005964 <_ZN5SCARA5seizeEv+0x9bc>
		 flag = 0;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	 }
}
 8005964:	bf00      	nop
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	0000      	movs	r0, r0
	...

08005970 <_ZN5SCARA11count_atan2Edd>:

double SCARA::count_atan2(double x, double y)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08a      	sub	sp, #40	; 0x28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6178      	str	r0, [r7, #20]
 8005978:	ed87 0b02 	vstr	d0, [r7, #8]
 800597c:	ed87 1b00 	vstr	d1, [r7]
 double atan2;
 double temp = y/x;
 8005980:	ed97 5b00 	vldr	d5, [r7]
 8005984:	ed97 6b02 	vldr	d6, [r7, #8]
 8005988:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800598c:	ed87 7b06 	vstr	d7, [r7, #24]
 if(x > 0){
 8005990:	ed97 7b02 	vldr	d7, [r7, #8]
 8005994:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800599c:	dd10      	ble.n	80059c0 <_ZN5SCARA11count_atan2Edd+0x50>
   atan2 = (atan(temp)*180)/PI;
 800599e:	ed97 0b06 	vldr	d0, [r7, #24]
 80059a2:	f00a ff09 	bl	80107b8 <atan>
 80059a6:	eeb0 7b40 	vmov.f64	d7, d0
 80059aa:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8005ab0 <_ZN5SCARA11count_atan2Edd+0x140>
 80059ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80059b2:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8005ab8 <_ZN5SCARA11count_atan2Edd+0x148>
 80059b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80059ba:	ed87 7b08 	vstr	d7, [r7, #32]
 80059be:	e06c      	b.n	8005a9a <_ZN5SCARA11count_atan2Edd+0x12a>
 }
    else if(y >= 0 && x < 0){
 80059c0:	ed97 7b00 	vldr	d7, [r7]
 80059c4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80059c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059cc:	db1b      	blt.n	8005a06 <_ZN5SCARA11count_atan2Edd+0x96>
 80059ce:	ed97 7b02 	vldr	d7, [r7, #8]
 80059d2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80059d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059da:	d514      	bpl.n	8005a06 <_ZN5SCARA11count_atan2Edd+0x96>
        atan2 = (atan(temp)*180)/PI + 180;
 80059dc:	ed97 0b06 	vldr	d0, [r7, #24]
 80059e0:	f00a feea 	bl	80107b8 <atan>
 80059e4:	eeb0 7b40 	vmov.f64	d7, d0
 80059e8:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8005ab0 <_ZN5SCARA11count_atan2Edd+0x140>
 80059ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80059f0:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8005ab8 <_ZN5SCARA11count_atan2Edd+0x148>
 80059f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80059f8:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8005ab0 <_ZN5SCARA11count_atan2Edd+0x140>
 80059fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005a00:	ed87 7b08 	vstr	d7, [r7, #32]
 8005a04:	e049      	b.n	8005a9a <_ZN5SCARA11count_atan2Edd+0x12a>
    }
    else if(y < 0 && x < 0){
 8005a06:	ed97 7b00 	vldr	d7, [r7]
 8005a0a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a12:	d51b      	bpl.n	8005a4c <_ZN5SCARA11count_atan2Edd+0xdc>
 8005a14:	ed97 7b02 	vldr	d7, [r7, #8]
 8005a18:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a20:	d514      	bpl.n	8005a4c <_ZN5SCARA11count_atan2Edd+0xdc>
        atan2 = (atan(temp)*180/PI - 180);
 8005a22:	ed97 0b06 	vldr	d0, [r7, #24]
 8005a26:	f00a fec7 	bl	80107b8 <atan>
 8005a2a:	eeb0 7b40 	vmov.f64	d7, d0
 8005a2e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8005ab0 <_ZN5SCARA11count_atan2Edd+0x140>
 8005a32:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005a36:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8005ab8 <_ZN5SCARA11count_atan2Edd+0x148>
 8005a3a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005a3e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8005ab0 <_ZN5SCARA11count_atan2Edd+0x140>
 8005a42:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005a46:	ed87 7b08 	vstr	d7, [r7, #32]
 8005a4a:	e026      	b.n	8005a9a <_ZN5SCARA11count_atan2Edd+0x12a>
    }
    else if(y > 0 && x == 0){
 8005a4c:	ed97 7b00 	vldr	d7, [r7]
 8005a50:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a58:	dd0c      	ble.n	8005a74 <_ZN5SCARA11count_atan2Edd+0x104>
 8005a5a:	ed97 7b02 	vldr	d7, [r7, #8]
 8005a5e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a66:	d105      	bne.n	8005a74 <_ZN5SCARA11count_atan2Edd+0x104>
        atan2 = 180/2;
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	4b14      	ldr	r3, [pc, #80]	; (8005ac0 <_ZN5SCARA11count_atan2Edd+0x150>)
 8005a6e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005a72:	e012      	b.n	8005a9a <_ZN5SCARA11count_atan2Edd+0x12a>
    }
    else if(y < 0 && x == 0){
 8005a74:	ed97 7b00 	vldr	d7, [r7]
 8005a78:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a80:	d50b      	bpl.n	8005a9a <_ZN5SCARA11count_atan2Edd+0x12a>
 8005a82:	ed97 7b02 	vldr	d7, [r7, #8]
 8005a86:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a8e:	d104      	bne.n	8005a9a <_ZN5SCARA11count_atan2Edd+0x12a>
        atan2 = -180/2;
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	4b0b      	ldr	r3, [pc, #44]	; (8005ac4 <_ZN5SCARA11count_atan2Edd+0x154>)
 8005a96:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
 return atan2;
 8005a9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a9e:	ec43 2b17 	vmov	d7, r2, r3
}
 8005aa2:	eeb0 0b47 	vmov.f64	d0, d7
 8005aa6:	3728      	adds	r7, #40	; 0x28
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	f3af 8000 	nop.w
 8005ab0:	00000000 	.word	0x00000000
 8005ab4:	40668000 	.word	0x40668000
 8005ab8:	54442d18 	.word	0x54442d18
 8005abc:	400921fb 	.word	0x400921fb
 8005ac0:	40568000 	.word	0x40568000
 8005ac4:	c0568000 	.word	0xc0568000

08005ac8 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	ed87 0b02 	vstr	d0, [r7, #8]
 8005ad2:	6078      	str	r0, [r7, #4]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005ade:	eeb0 1b47 	vmov.f64	d1, d7
 8005ae2:	ed97 0b02 	vldr	d0, [r7, #8]
 8005ae6:	f00a fc13 	bl	8010310 <pow>
 8005aea:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8005aee:	eeb0 0b47 	vmov.f64	d0, d7
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
      return pow(__type(__x), __type(__y));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	ee07 3a90 	vmov	s15, r3
 8005b08:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	ee06 3a90 	vmov	s13, r3
 8005b12:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005b16:	eeb0 1b46 	vmov.f64	d1, d6
 8005b1a:	eeb0 0b47 	vmov.f64	d0, d7
 8005b1e:	f00a fbf7 	bl	8010310 <pow>
 8005b22:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8005b26:	eeb0 0b47 	vmov.f64	d0, d7
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <_ZN5SCARA12count_theta2Edd>:

double SCARA::count_theta2(double x, double y)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	ed2d 8b02 	vpush	{d8}
 8005b36:	b08a      	sub	sp, #40	; 0x28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6178      	str	r0, [r7, #20]
 8005b3c:	ed87 0b02 	vstr	d0, [r7, #8]
 8005b40:	ed87 1b00 	vstr	d1, [r7]
 double theta2;
 double temp;
 temp = (double)(pow(x,2) + pow(y,2) - pow(length1,2) - pow(length2,2));
 8005b44:	2002      	movs	r0, #2
 8005b46:	ed97 0b02 	vldr	d0, [r7, #8]
 8005b4a:	f7ff ffbd 	bl	8005ac8 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005b4e:	eeb0 8b40 	vmov.f64	d8, d0
 8005b52:	2002      	movs	r0, #2
 8005b54:	ed97 0b00 	vldr	d0, [r7]
 8005b58:	f7ff ffb6 	bl	8005ac8 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005b5c:	eeb0 7b40 	vmov.f64	d7, d0
 8005b60:	ee38 8b07 	vadd.f64	d8, d8, d7
 8005b64:	2102      	movs	r1, #2
 8005b66:	20be      	movs	r0, #190	; 0xbe
 8005b68:	f7ff ffc6 	bl	8005af8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005b6c:	eeb0 7b40 	vmov.f64	d7, d0
 8005b70:	ee38 8b47 	vsub.f64	d8, d8, d7
 8005b74:	2102      	movs	r1, #2
 8005b76:	208c      	movs	r0, #140	; 0x8c
 8005b78:	f7ff ffbe 	bl	8005af8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005b7c:	eeb0 7b40 	vmov.f64	d7, d0
 8005b80:	ee38 7b47 	vsub.f64	d7, d8, d7
 8005b84:	ed87 7b08 	vstr	d7, [r7, #32]
 temp /= (double)(2*length1*length2);
 8005b88:	ed97 6b08 	vldr	d6, [r7, #32]
 8005b8c:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8005bd0 <_ZN5SCARA12count_theta2Edd+0xa0>
 8005b90:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005b94:	ed87 7b08 	vstr	d7, [r7, #32]
 theta2 = (acos(temp)*180)/PI;
 8005b98:	ed97 0b08 	vldr	d0, [r7, #32]
 8005b9c:	f00a ff10 	bl	80109c0 <acos>
 8005ba0:	eeb0 7b40 	vmov.f64	d7, d0
 8005ba4:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8005bd8 <_ZN5SCARA12count_theta2Edd+0xa8>
 8005ba8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005bac:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8005be0 <_ZN5SCARA12count_theta2Edd+0xb0>
 8005bb0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005bb4:	ed87 7b06 	vstr	d7, [r7, #24]
 return theta2;
 8005bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bbc:	ec43 2b17 	vmov	d7, r2, r3
}
 8005bc0:	eeb0 0b47 	vmov.f64	d0, d7
 8005bc4:	3728      	adds	r7, #40	; 0x28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	ecbd 8b02 	vpop	{d8}
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	00000000 	.word	0x00000000
 8005bd4:	40e9fa00 	.word	0x40e9fa00
 8005bd8:	00000000 	.word	0x00000000
 8005bdc:	40668000 	.word	0x40668000
 8005be0:	54442d18 	.word	0x54442d18
 8005be4:	400921fb 	.word	0x400921fb

08005be8 <_ZN5SCARA9count_phiEdd>:

double SCARA::count_phi(double x, double y)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	ed2d 8b02 	vpush	{d8}
 8005bee:	b08a      	sub	sp, #40	; 0x28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6178      	str	r0, [r7, #20]
 8005bf4:	ed87 0b02 	vstr	d0, [r7, #8]
 8005bf8:	ed87 1b00 	vstr	d1, [r7]
 double phi;
 double temp = pow(length2,2) - pow(length1,2) - pow(x,2) - pow(y,2);
 8005bfc:	2102      	movs	r1, #2
 8005bfe:	208c      	movs	r0, #140	; 0x8c
 8005c00:	f7ff ff7a 	bl	8005af8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005c04:	eeb0 8b40 	vmov.f64	d8, d0
 8005c08:	2102      	movs	r1, #2
 8005c0a:	20be      	movs	r0, #190	; 0xbe
 8005c0c:	f7ff ff74 	bl	8005af8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005c10:	eeb0 7b40 	vmov.f64	d7, d0
 8005c14:	ee38 8b47 	vsub.f64	d8, d8, d7
 8005c18:	2002      	movs	r0, #2
 8005c1a:	ed97 0b02 	vldr	d0, [r7, #8]
 8005c1e:	f7ff ff53 	bl	8005ac8 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005c22:	eeb0 7b40 	vmov.f64	d7, d0
 8005c26:	ee38 8b47 	vsub.f64	d8, d8, d7
 8005c2a:	2002      	movs	r0, #2
 8005c2c:	ed97 0b00 	vldr	d0, [r7]
 8005c30:	f7ff ff4a 	bl	8005ac8 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005c34:	eeb0 7b40 	vmov.f64	d7, d0
 8005c38:	ee38 7b47 	vsub.f64	d7, d8, d7
 8005c3c:	ed87 7b08 	vstr	d7, [r7, #32]
 temp /= (double)(-2*length1*sqrt(pow(x,2)+pow(y,2)));
 8005c40:	2002      	movs	r0, #2
 8005c42:	ed97 0b02 	vldr	d0, [r7, #8]
 8005c46:	f7ff ff3f 	bl	8005ac8 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005c4a:	eeb0 8b40 	vmov.f64	d8, d0
 8005c4e:	2002      	movs	r0, #2
 8005c50:	ed97 0b00 	vldr	d0, [r7]
 8005c54:	f7ff ff38 	bl	8005ac8 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005c58:	eeb0 7b40 	vmov.f64	d7, d0
 8005c5c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005c60:	eeb0 0b47 	vmov.f64	d0, d7
 8005c64:	f00a fed8 	bl	8010a18 <sqrt>
 8005c68:	eeb0 7b40 	vmov.f64	d7, d0
 8005c6c:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8005cb8 <_ZN5SCARA9count_phiEdd+0xd0>
 8005c70:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005c74:	ed97 5b08 	vldr	d5, [r7, #32]
 8005c78:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005c7c:	ed87 7b08 	vstr	d7, [r7, #32]
 phi = (acos(temp)*180)/PI;
 8005c80:	ed97 0b08 	vldr	d0, [r7, #32]
 8005c84:	f00a fe9c 	bl	80109c0 <acos>
 8005c88:	eeb0 7b40 	vmov.f64	d7, d0
 8005c8c:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8005cc0 <_ZN5SCARA9count_phiEdd+0xd8>
 8005c90:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005c94:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8005cc8 <_ZN5SCARA9count_phiEdd+0xe0>
 8005c98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005c9c:	ed87 7b06 	vstr	d7, [r7, #24]
 return phi;
 8005ca0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ca4:	ec43 2b17 	vmov	d7, r2, r3
}
 8005ca8:	eeb0 0b47 	vmov.f64	d0, d7
 8005cac:	3728      	adds	r7, #40	; 0x28
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	ecbd 8b02 	vpop	{d8}
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	00000000 	.word	0x00000000
 8005cbc:	c077c000 	.word	0xc077c000
 8005cc0:	00000000 	.word	0x00000000
 8005cc4:	40668000 	.word	0x40668000
 8005cc8:	54442d18 	.word	0x54442d18
 8005ccc:	400921fb 	.word	0x400921fb

08005cd0 <_Z41__static_initialization_and_destruction_0ii>:
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d107      	bne.n	8005cf0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d102      	bne.n	8005cf0 <_Z41__static_initialization_and_destruction_0ii+0x20>
SCARA sc;
 8005cea:	4803      	ldr	r0, [pc, #12]	; (8005cf8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8005cec:	f7ff f840 	bl	8004d70 <_ZN5SCARAC1Ev>
}
 8005cf0:	bf00      	nop
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	24001a30 	.word	0x24001a30

08005cfc <_GLOBAL__sub_I_sc>:
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005d04:	2001      	movs	r0, #1
 8005d06:	f7ff ffe3 	bl	8005cd0 <_Z41__static_initialization_and_destruction_0ii>
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d12:	4b0d      	ldr	r3, [pc, #52]	; (8005d48 <HAL_MspInit+0x3c>)
 8005d14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d18:	4a0b      	ldr	r2, [pc, #44]	; (8005d48 <HAL_MspInit+0x3c>)
 8005d1a:	f043 0302 	orr.w	r3, r3, #2
 8005d1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005d22:	4b09      	ldr	r3, [pc, #36]	; (8005d48 <HAL_MspInit+0x3c>)
 8005d24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	607b      	str	r3, [r7, #4]
 8005d2e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8005d30:	2200      	movs	r2, #0
 8005d32:	2100      	movs	r1, #0
 8005d34:	2005      	movs	r0, #5
 8005d36:	f001 f8d2 	bl	8006ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005d3a:	2005      	movs	r0, #5
 8005d3c:	f001 f8e9 	bl	8006f12 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d40:	bf00      	nop
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	58024400 	.word	0x58024400

08005d4c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b090      	sub	sp, #64	; 0x40
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	605a      	str	r2, [r3, #4]
 8005d5e:	609a      	str	r2, [r3, #8]
 8005d60:	60da      	str	r2, [r3, #12]
 8005d62:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d6c:	d14e      	bne.n	8005e0c <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005d6e:	4b77      	ldr	r3, [pc, #476]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005d70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d74:	4a75      	ldr	r2, [pc, #468]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005d76:	f043 0301 	orr.w	r3, r3, #1
 8005d7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005d7e:	4b73      	ldr	r3, [pc, #460]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005d80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d8c:	4b6f      	ldr	r3, [pc, #444]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d92:	4a6e      	ldr	r2, [pc, #440]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005d94:	f043 0301 	orr.w	r3, r3, #1
 8005d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005d9c:	4b6b      	ldr	r3, [pc, #428]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005daa:	4b68      	ldr	r3, [pc, #416]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005db0:	4a66      	ldr	r2, [pc, #408]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005db2:	f043 0302 	orr.w	r3, r3, #2
 8005db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005dba:	4b64      	ldr	r3, [pc, #400]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	623b      	str	r3, [r7, #32]
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005dc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dce:	2302      	movs	r3, #2
 8005dd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005de2:	4619      	mov	r1, r3
 8005de4:	485a      	ldr	r0, [pc, #360]	; (8005f50 <HAL_TIM_Encoder_MspInit+0x204>)
 8005de6:	f003 fee9 	bl	8009bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005dea:	2308      	movs	r3, #8
 8005dec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dee:	2302      	movs	r3, #2
 8005df0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df2:	2300      	movs	r3, #0
 8005df4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005df6:	2300      	movs	r3, #0
 8005df8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e02:	4619      	mov	r1, r3
 8005e04:	4853      	ldr	r0, [pc, #332]	; (8005f54 <HAL_TIM_Encoder_MspInit+0x208>)
 8005e06:	f003 fed9 	bl	8009bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8005e0a:	e09b      	b.n	8005f44 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a51      	ldr	r2, [pc, #324]	; (8005f58 <HAL_TIM_Encoder_MspInit+0x20c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d12e      	bne.n	8005e74 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005e16:	4b4d      	ldr	r3, [pc, #308]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005e18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e1c:	4a4b      	ldr	r2, [pc, #300]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005e1e:	f043 0302 	orr.w	r3, r3, #2
 8005e22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e26:	4b49      	ldr	r3, [pc, #292]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005e28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	61fb      	str	r3, [r7, #28]
 8005e32:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e34:	4b45      	ldr	r3, [pc, #276]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e3a:	4a44      	ldr	r2, [pc, #272]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005e3c:	f043 0302 	orr.w	r3, r3, #2
 8005e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005e44:	4b41      	ldr	r3, [pc, #260]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	61bb      	str	r3, [r7, #24]
 8005e50:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005e52:	2330      	movs	r3, #48	; 0x30
 8005e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e56:	2302      	movs	r3, #2
 8005e58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005e62:	2302      	movs	r3, #2
 8005e64:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	4839      	ldr	r0, [pc, #228]	; (8005f54 <HAL_TIM_Encoder_MspInit+0x208>)
 8005e6e:	f003 fea5 	bl	8009bbc <HAL_GPIO_Init>
}
 8005e72:	e067      	b.n	8005f44 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a38      	ldr	r2, [pc, #224]	; (8005f5c <HAL_TIM_Encoder_MspInit+0x210>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d12f      	bne.n	8005ede <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005e7e:	4b33      	ldr	r3, [pc, #204]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e84:	4a31      	ldr	r2, [pc, #196]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005e86:	f043 0304 	orr.w	r3, r3, #4
 8005e8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e8e:	4b2f      	ldr	r3, [pc, #188]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	617b      	str	r3, [r7, #20]
 8005e9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e9c:	4b2b      	ldr	r3, [pc, #172]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ea2:	4a2a      	ldr	r2, [pc, #168]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005ea4:	f043 0308 	orr.w	r3, r3, #8
 8005ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005eac:	4b27      	ldr	r3, [pc, #156]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	613b      	str	r3, [r7, #16]
 8005eb8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005eba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005ecc:	2302      	movs	r3, #2
 8005ece:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4822      	ldr	r0, [pc, #136]	; (8005f60 <HAL_TIM_Encoder_MspInit+0x214>)
 8005ed8:	f003 fe70 	bl	8009bbc <HAL_GPIO_Init>
}
 8005edc:	e032      	b.n	8005f44 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a20      	ldr	r2, [pc, #128]	; (8005f64 <HAL_TIM_Encoder_MspInit+0x218>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d12d      	bne.n	8005f44 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005ee8:	4b18      	ldr	r3, [pc, #96]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005eea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005eee:	4a17      	ldr	r2, [pc, #92]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005ef0:	f043 0308 	orr.w	r3, r3, #8
 8005ef4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005ef8:	4b14      	ldr	r3, [pc, #80]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005efa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f06:	4b11      	ldr	r3, [pc, #68]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f0c:	4a0f      	ldr	r2, [pc, #60]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005f0e:	f043 0301 	orr.w	r3, r3, #1
 8005f12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005f16:	4b0d      	ldr	r3, [pc, #52]	; (8005f4c <HAL_TIM_Encoder_MspInit+0x200>)
 8005f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	60bb      	str	r3, [r7, #8]
 8005f22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005f24:	2303      	movs	r3, #3
 8005f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f28:	2302      	movs	r3, #2
 8005f2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f30:	2300      	movs	r3, #0
 8005f32:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005f34:	2302      	movs	r3, #2
 8005f36:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4804      	ldr	r0, [pc, #16]	; (8005f50 <HAL_TIM_Encoder_MspInit+0x204>)
 8005f40:	f003 fe3c 	bl	8009bbc <HAL_GPIO_Init>
}
 8005f44:	bf00      	nop
 8005f46:	3740      	adds	r7, #64	; 0x40
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	58024400 	.word	0x58024400
 8005f50:	58020000 	.word	0x58020000
 8005f54:	58020400 	.word	0x58020400
 8005f58:	40000400 	.word	0x40000400
 8005f5c:	40000800 	.word	0x40000800
 8005f60:	58020c00 	.word	0x58020c00
 8005f64:	40000c00 	.word	0x40000c00

08005f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a42      	ldr	r2, [pc, #264]	; (8006080 <HAL_TIM_Base_MspInit+0x118>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d117      	bne.n	8005faa <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005f7a:	4b42      	ldr	r3, [pc, #264]	; (8006084 <HAL_TIM_Base_MspInit+0x11c>)
 8005f7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f80:	4a40      	ldr	r2, [pc, #256]	; (8006084 <HAL_TIM_Base_MspInit+0x11c>)
 8005f82:	f043 0320 	orr.w	r3, r3, #32
 8005f86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005f8a:	4b3e      	ldr	r3, [pc, #248]	; (8006084 <HAL_TIM_Base_MspInit+0x11c>)
 8005f8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f90:	f003 0320 	and.w	r3, r3, #32
 8005f94:	617b      	str	r3, [r7, #20]
 8005f96:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	2037      	movs	r0, #55	; 0x37
 8005f9e:	f000 ff9e 	bl	8006ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005fa2:	2037      	movs	r0, #55	; 0x37
 8005fa4:	f000 ffb5 	bl	8006f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8005fa8:	e065      	b.n	8006076 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM8)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a36      	ldr	r2, [pc, #216]	; (8006088 <HAL_TIM_Base_MspInit+0x120>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d127      	bne.n	8006004 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005fb4:	4b33      	ldr	r3, [pc, #204]	; (8006084 <HAL_TIM_Base_MspInit+0x11c>)
 8005fb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fba:	4a32      	ldr	r2, [pc, #200]	; (8006084 <HAL_TIM_Base_MspInit+0x11c>)
 8005fbc:	f043 0302 	orr.w	r3, r3, #2
 8005fc0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005fc4:	4b2f      	ldr	r3, [pc, #188]	; (8006084 <HAL_TIM_Base_MspInit+0x11c>)
 8005fc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	613b      	str	r3, [r7, #16]
 8005fd0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	202b      	movs	r0, #43	; 0x2b
 8005fd8:	f000 ff81 	bl	8006ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005fdc:	202b      	movs	r0, #43	; 0x2b
 8005fde:	f000 ff98 	bl	8006f12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	202c      	movs	r0, #44	; 0x2c
 8005fe8:	f000 ff79 	bl	8006ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005fec:	202c      	movs	r0, #44	; 0x2c
 8005fee:	f000 ff90 	bl	8006f12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	202d      	movs	r0, #45	; 0x2d
 8005ff8:	f000 ff71 	bl	8006ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005ffc:	202d      	movs	r0, #45	; 0x2d
 8005ffe:	f000 ff88 	bl	8006f12 <HAL_NVIC_EnableIRQ>
}
 8006002:	e038      	b.n	8006076 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM13)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a20      	ldr	r2, [pc, #128]	; (800608c <HAL_TIM_Base_MspInit+0x124>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d117      	bne.n	800603e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800600e:	4b1d      	ldr	r3, [pc, #116]	; (8006084 <HAL_TIM_Base_MspInit+0x11c>)
 8006010:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006014:	4a1b      	ldr	r2, [pc, #108]	; (8006084 <HAL_TIM_Base_MspInit+0x11c>)
 8006016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800601a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800601e:	4b19      	ldr	r3, [pc, #100]	; (8006084 <HAL_TIM_Base_MspInit+0x11c>)
 8006020:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800602c:	2200      	movs	r2, #0
 800602e:	2100      	movs	r1, #0
 8006030:	202c      	movs	r0, #44	; 0x2c
 8006032:	f000 ff54 	bl	8006ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006036:	202c      	movs	r0, #44	; 0x2c
 8006038:	f000 ff6b 	bl	8006f12 <HAL_NVIC_EnableIRQ>
}
 800603c:	e01b      	b.n	8006076 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM14)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a13      	ldr	r2, [pc, #76]	; (8006090 <HAL_TIM_Base_MspInit+0x128>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d116      	bne.n	8006076 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006048:	4b0e      	ldr	r3, [pc, #56]	; (8006084 <HAL_TIM_Base_MspInit+0x11c>)
 800604a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800604e:	4a0d      	ldr	r2, [pc, #52]	; (8006084 <HAL_TIM_Base_MspInit+0x11c>)
 8006050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006054:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006058:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <HAL_TIM_Base_MspInit+0x11c>)
 800605a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800605e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006062:	60bb      	str	r3, [r7, #8]
 8006064:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8006066:	2200      	movs	r2, #0
 8006068:	2100      	movs	r1, #0
 800606a:	202d      	movs	r0, #45	; 0x2d
 800606c:	f000 ff37 	bl	8006ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8006070:	202d      	movs	r0, #45	; 0x2d
 8006072:	f000 ff4e 	bl	8006f12 <HAL_NVIC_EnableIRQ>
}
 8006076:	bf00      	nop
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	40001400 	.word	0x40001400
 8006084:	58024400 	.word	0x58024400
 8006088:	40010400 	.word	0x40010400
 800608c:	40001c00 	.word	0x40001c00
 8006090:	40002000 	.word	0x40002000

08006094 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a2b      	ldr	r2, [pc, #172]	; (8006150 <HAL_TIM_PWM_MspInit+0xbc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d117      	bne.n	80060d6 <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80060a6:	4b2b      	ldr	r3, [pc, #172]	; (8006154 <HAL_TIM_PWM_MspInit+0xc0>)
 80060a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060ac:	4a29      	ldr	r2, [pc, #164]	; (8006154 <HAL_TIM_PWM_MspInit+0xc0>)
 80060ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80060b6:	4b27      	ldr	r3, [pc, #156]	; (8006154 <HAL_TIM_PWM_MspInit+0xc0>)
 80060b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	697b      	ldr	r3, [r7, #20]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80060c4:	2200      	movs	r2, #0
 80060c6:	2100      	movs	r1, #0
 80060c8:	202b      	movs	r0, #43	; 0x2b
 80060ca:	f000 ff08 	bl	8006ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80060ce:	202b      	movs	r0, #43	; 0x2b
 80060d0:	f000 ff1f 	bl	8006f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 80060d4:	e038      	b.n	8006148 <HAL_TIM_PWM_MspInit+0xb4>
  else if(htim_pwm->Instance==TIM15)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a1f      	ldr	r2, [pc, #124]	; (8006158 <HAL_TIM_PWM_MspInit+0xc4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d117      	bne.n	8006110 <HAL_TIM_PWM_MspInit+0x7c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80060e0:	4b1c      	ldr	r3, [pc, #112]	; (8006154 <HAL_TIM_PWM_MspInit+0xc0>)
 80060e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060e6:	4a1b      	ldr	r2, [pc, #108]	; (8006154 <HAL_TIM_PWM_MspInit+0xc0>)
 80060e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80060f0:	4b18      	ldr	r3, [pc, #96]	; (8006154 <HAL_TIM_PWM_MspInit+0xc0>)
 80060f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060fa:	613b      	str	r3, [r7, #16]
 80060fc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80060fe:	2200      	movs	r2, #0
 8006100:	2100      	movs	r1, #0
 8006102:	2074      	movs	r0, #116	; 0x74
 8006104:	f000 feeb 	bl	8006ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8006108:	2074      	movs	r0, #116	; 0x74
 800610a:	f000 ff02 	bl	8006f12 <HAL_NVIC_EnableIRQ>
}
 800610e:	e01b      	b.n	8006148 <HAL_TIM_PWM_MspInit+0xb4>
  else if(htim_pwm->Instance==TIM23)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a11      	ldr	r2, [pc, #68]	; (800615c <HAL_TIM_PWM_MspInit+0xc8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d116      	bne.n	8006148 <HAL_TIM_PWM_MspInit+0xb4>
    __HAL_RCC_TIM23_CLK_ENABLE();
 800611a:	4b0e      	ldr	r3, [pc, #56]	; (8006154 <HAL_TIM_PWM_MspInit+0xc0>)
 800611c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006120:	4a0c      	ldr	r2, [pc, #48]	; (8006154 <HAL_TIM_PWM_MspInit+0xc0>)
 8006122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006126:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800612a:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <HAL_TIM_PWM_MspInit+0xc0>)
 800612c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006134:	60fb      	str	r3, [r7, #12]
 8006136:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8006138:	2200      	movs	r2, #0
 800613a:	2100      	movs	r1, #0
 800613c:	20a1      	movs	r0, #161	; 0xa1
 800613e:	f000 fece 	bl	8006ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8006142:	20a1      	movs	r0, #161	; 0xa1
 8006144:	f000 fee5 	bl	8006f12 <HAL_NVIC_EnableIRQ>
}
 8006148:	bf00      	nop
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	40001800 	.word	0x40001800
 8006154:	58024400 	.word	0x58024400
 8006158:	40014000 	.word	0x40014000
 800615c:	4000e000 	.word	0x4000e000

08006160 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08a      	sub	sp, #40	; 0x28
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006168:	f107 0314 	add.w	r3, r7, #20
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	605a      	str	r2, [r3, #4]
 8006172:	609a      	str	r2, [r3, #8]
 8006174:	60da      	str	r2, [r3, #12]
 8006176:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a38      	ldr	r2, [pc, #224]	; (8006260 <HAL_TIM_MspPostInit+0x100>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d120      	bne.n	80061c4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006182:	4b38      	ldr	r3, [pc, #224]	; (8006264 <HAL_TIM_MspPostInit+0x104>)
 8006184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006188:	4a36      	ldr	r2, [pc, #216]	; (8006264 <HAL_TIM_MspPostInit+0x104>)
 800618a:	f043 0302 	orr.w	r3, r3, #2
 800618e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006192:	4b34      	ldr	r3, [pc, #208]	; (8006264 <HAL_TIM_MspPostInit+0x104>)
 8006194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	613b      	str	r3, [r7, #16]
 800619e:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80061a0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80061a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061a6:	2302      	movs	r3, #2
 80061a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061aa:	2300      	movs	r3, #0
 80061ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061ae:	2300      	movs	r3, #0
 80061b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80061b2:	2302      	movs	r3, #2
 80061b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061b6:	f107 0314 	add.w	r3, r7, #20
 80061ba:	4619      	mov	r1, r3
 80061bc:	482a      	ldr	r0, [pc, #168]	; (8006268 <HAL_TIM_MspPostInit+0x108>)
 80061be:	f003 fcfd 	bl	8009bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspPostInit 1 */

  /* USER CODE END TIM23_MspPostInit 1 */
  }

}
 80061c2:	e048      	b.n	8006256 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM15)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a28      	ldr	r2, [pc, #160]	; (800626c <HAL_TIM_MspPostInit+0x10c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d11f      	bne.n	800620e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80061ce:	4b25      	ldr	r3, [pc, #148]	; (8006264 <HAL_TIM_MspPostInit+0x104>)
 80061d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061d4:	4a23      	ldr	r2, [pc, #140]	; (8006264 <HAL_TIM_MspPostInit+0x104>)
 80061d6:	f043 0310 	orr.w	r3, r3, #16
 80061da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80061de:	4b21      	ldr	r3, [pc, #132]	; (8006264 <HAL_TIM_MspPostInit+0x104>)
 80061e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061e4:	f003 0310 	and.w	r3, r3, #16
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80061ec:	2360      	movs	r3, #96	; 0x60
 80061ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061f0:	2302      	movs	r3, #2
 80061f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061f4:	2300      	movs	r3, #0
 80061f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061f8:	2300      	movs	r3, #0
 80061fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80061fc:	2304      	movs	r3, #4
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006200:	f107 0314 	add.w	r3, r7, #20
 8006204:	4619      	mov	r1, r3
 8006206:	481a      	ldr	r0, [pc, #104]	; (8006270 <HAL_TIM_MspPostInit+0x110>)
 8006208:	f003 fcd8 	bl	8009bbc <HAL_GPIO_Init>
}
 800620c:	e023      	b.n	8006256 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM23)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a18      	ldr	r2, [pc, #96]	; (8006274 <HAL_TIM_MspPostInit+0x114>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d11e      	bne.n	8006256 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006218:	4b12      	ldr	r3, [pc, #72]	; (8006264 <HAL_TIM_MspPostInit+0x104>)
 800621a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800621e:	4a11      	ldr	r2, [pc, #68]	; (8006264 <HAL_TIM_MspPostInit+0x104>)
 8006220:	f043 0320 	orr.w	r3, r3, #32
 8006224:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006228:	4b0e      	ldr	r3, [pc, #56]	; (8006264 <HAL_TIM_MspPostInit+0x104>)
 800622a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800622e:	f003 0320 	and.w	r3, r3, #32
 8006232:	60bb      	str	r3, [r7, #8]
 8006234:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006236:	2301      	movs	r3, #1
 8006238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800623a:	2302      	movs	r3, #2
 800623c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800623e:	2300      	movs	r3, #0
 8006240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006242:	2300      	movs	r3, #0
 8006244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8006246:	230d      	movs	r3, #13
 8006248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800624a:	f107 0314 	add.w	r3, r7, #20
 800624e:	4619      	mov	r1, r3
 8006250:	4809      	ldr	r0, [pc, #36]	; (8006278 <HAL_TIM_MspPostInit+0x118>)
 8006252:	f003 fcb3 	bl	8009bbc <HAL_GPIO_Init>
}
 8006256:	bf00      	nop
 8006258:	3728      	adds	r7, #40	; 0x28
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	40001800 	.word	0x40001800
 8006264:	58024400 	.word	0x58024400
 8006268:	58020400 	.word	0x58020400
 800626c:	40014000 	.word	0x40014000
 8006270:	58021000 	.word	0x58021000
 8006274:	4000e000 	.word	0x4000e000
 8006278:	58021400 	.word	0x58021400

0800627c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b0b6      	sub	sp, #216	; 0xd8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006284:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006288:	2200      	movs	r2, #0
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	605a      	str	r2, [r3, #4]
 800628e:	609a      	str	r2, [r3, #8]
 8006290:	60da      	str	r2, [r3, #12]
 8006292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006294:	f107 0310 	add.w	r3, r7, #16
 8006298:	22b4      	movs	r2, #180	; 0xb4
 800629a:	2100      	movs	r1, #0
 800629c:	4618      	mov	r0, r3
 800629e:	f00a fdc7 	bl	8010e30 <memset>
  if(huart->Instance==USART1)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a57      	ldr	r2, [pc, #348]	; (8006404 <HAL_UART_MspInit+0x188>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	f040 80a7 	bne.w	80063fc <HAL_UART_MspInit+0x180>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80062ae:	2301      	movs	r3, #1
 80062b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80062b2:	2300      	movs	r3, #0
 80062b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062b8:	f107 0310 	add.w	r3, r7, #16
 80062bc:	4618      	mov	r0, r3
 80062be:	f004 fdcb 	bl	800ae58 <HAL_RCCEx_PeriphCLKConfig>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80062c8:	f7fb fb94 	bl	80019f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80062cc:	4b4e      	ldr	r3, [pc, #312]	; (8006408 <HAL_UART_MspInit+0x18c>)
 80062ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062d2:	4a4d      	ldr	r2, [pc, #308]	; (8006408 <HAL_UART_MspInit+0x18c>)
 80062d4:	f043 0310 	orr.w	r3, r3, #16
 80062d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80062dc:	4b4a      	ldr	r3, [pc, #296]	; (8006408 <HAL_UART_MspInit+0x18c>)
 80062de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062e2:	f003 0310 	and.w	r3, r3, #16
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062ea:	4b47      	ldr	r3, [pc, #284]	; (8006408 <HAL_UART_MspInit+0x18c>)
 80062ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062f0:	4a45      	ldr	r2, [pc, #276]	; (8006408 <HAL_UART_MspInit+0x18c>)
 80062f2:	f043 0301 	orr.w	r3, r3, #1
 80062f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80062fa:	4b43      	ldr	r3, [pc, #268]	; (8006408 <HAL_UART_MspInit+0x18c>)
 80062fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	60bb      	str	r3, [r7, #8]
 8006306:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006308:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800630c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006310:	2302      	movs	r3, #2
 8006312:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006316:	2300      	movs	r3, #0
 8006318:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800631c:	2300      	movs	r3, #0
 800631e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006322:	2307      	movs	r3, #7
 8006324:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006328:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800632c:	4619      	mov	r1, r3
 800632e:	4837      	ldr	r0, [pc, #220]	; (800640c <HAL_UART_MspInit+0x190>)
 8006330:	f003 fc44 	bl	8009bbc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8006334:	4b36      	ldr	r3, [pc, #216]	; (8006410 <HAL_UART_MspInit+0x194>)
 8006336:	4a37      	ldr	r2, [pc, #220]	; (8006414 <HAL_UART_MspInit+0x198>)
 8006338:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800633a:	4b35      	ldr	r3, [pc, #212]	; (8006410 <HAL_UART_MspInit+0x194>)
 800633c:	2229      	movs	r2, #41	; 0x29
 800633e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006340:	4b33      	ldr	r3, [pc, #204]	; (8006410 <HAL_UART_MspInit+0x194>)
 8006342:	2200      	movs	r2, #0
 8006344:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006346:	4b32      	ldr	r3, [pc, #200]	; (8006410 <HAL_UART_MspInit+0x194>)
 8006348:	2200      	movs	r2, #0
 800634a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800634c:	4b30      	ldr	r3, [pc, #192]	; (8006410 <HAL_UART_MspInit+0x194>)
 800634e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006352:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006354:	4b2e      	ldr	r3, [pc, #184]	; (8006410 <HAL_UART_MspInit+0x194>)
 8006356:	2200      	movs	r2, #0
 8006358:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800635a:	4b2d      	ldr	r3, [pc, #180]	; (8006410 <HAL_UART_MspInit+0x194>)
 800635c:	2200      	movs	r2, #0
 800635e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006360:	4b2b      	ldr	r3, [pc, #172]	; (8006410 <HAL_UART_MspInit+0x194>)
 8006362:	2200      	movs	r2, #0
 8006364:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006366:	4b2a      	ldr	r3, [pc, #168]	; (8006410 <HAL_UART_MspInit+0x194>)
 8006368:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800636c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800636e:	4b28      	ldr	r3, [pc, #160]	; (8006410 <HAL_UART_MspInit+0x194>)
 8006370:	2200      	movs	r2, #0
 8006372:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006374:	4826      	ldr	r0, [pc, #152]	; (8006410 <HAL_UART_MspInit+0x194>)
 8006376:	f000 fde7 	bl	8006f48 <HAL_DMA_Init>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8006380:	f7fb fb38 	bl	80019f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a22      	ldr	r2, [pc, #136]	; (8006410 <HAL_UART_MspInit+0x194>)
 8006388:	67da      	str	r2, [r3, #124]	; 0x7c
 800638a:	4a21      	ldr	r2, [pc, #132]	; (8006410 <HAL_UART_MspInit+0x194>)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8006390:	4b21      	ldr	r3, [pc, #132]	; (8006418 <HAL_UART_MspInit+0x19c>)
 8006392:	4a22      	ldr	r2, [pc, #136]	; (800641c <HAL_UART_MspInit+0x1a0>)
 8006394:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8006396:	4b20      	ldr	r3, [pc, #128]	; (8006418 <HAL_UART_MspInit+0x19c>)
 8006398:	222a      	movs	r2, #42	; 0x2a
 800639a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800639c:	4b1e      	ldr	r3, [pc, #120]	; (8006418 <HAL_UART_MspInit+0x19c>)
 800639e:	2240      	movs	r2, #64	; 0x40
 80063a0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80063a2:	4b1d      	ldr	r3, [pc, #116]	; (8006418 <HAL_UART_MspInit+0x19c>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80063a8:	4b1b      	ldr	r3, [pc, #108]	; (8006418 <HAL_UART_MspInit+0x19c>)
 80063aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063ae:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80063b0:	4b19      	ldr	r3, [pc, #100]	; (8006418 <HAL_UART_MspInit+0x19c>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80063b6:	4b18      	ldr	r3, [pc, #96]	; (8006418 <HAL_UART_MspInit+0x19c>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80063bc:	4b16      	ldr	r3, [pc, #88]	; (8006418 <HAL_UART_MspInit+0x19c>)
 80063be:	2200      	movs	r2, #0
 80063c0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80063c2:	4b15      	ldr	r3, [pc, #84]	; (8006418 <HAL_UART_MspInit+0x19c>)
 80063c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80063c8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80063ca:	4b13      	ldr	r3, [pc, #76]	; (8006418 <HAL_UART_MspInit+0x19c>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80063d0:	4811      	ldr	r0, [pc, #68]	; (8006418 <HAL_UART_MspInit+0x19c>)
 80063d2:	f000 fdb9 	bl	8006f48 <HAL_DMA_Init>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 80063dc:	f7fb fb0a 	bl	80019f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a0d      	ldr	r2, [pc, #52]	; (8006418 <HAL_UART_MspInit+0x19c>)
 80063e4:	679a      	str	r2, [r3, #120]	; 0x78
 80063e6:	4a0c      	ldr	r2, [pc, #48]	; (8006418 <HAL_UART_MspInit+0x19c>)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80063ec:	2200      	movs	r2, #0
 80063ee:	2100      	movs	r1, #0
 80063f0:	2025      	movs	r0, #37	; 0x25
 80063f2:	f000 fd74 	bl	8006ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80063f6:	2025      	movs	r0, #37	; 0x25
 80063f8:	f000 fd8b 	bl	8006f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80063fc:	bf00      	nop
 80063fe:	37d8      	adds	r7, #216	; 0xd8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	40011000 	.word	0x40011000
 8006408:	58024400 	.word	0x58024400
 800640c:	58020000 	.word	0x58020000
 8006410:	24000654 	.word	0x24000654
 8006414:	40020010 	.word	0x40020010
 8006418:	240006cc 	.word	0x240006cc
 800641c:	40020028 	.word	0x40020028

08006420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006424:	e7fe      	b.n	8006424 <NMI_Handler+0x4>

08006426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006426:	b480      	push	{r7}
 8006428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800642a:	e7fe      	b.n	800642a <HardFault_Handler+0x4>

0800642c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006430:	e7fe      	b.n	8006430 <MemManage_Handler+0x4>

08006432 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006432:	b480      	push	{r7}
 8006434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006436:	e7fe      	b.n	8006436 <BusFault_Handler+0x4>

08006438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800643c:	e7fe      	b.n	800643c <UsageFault_Handler+0x4>

0800643e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800643e:	b480      	push	{r7}
 8006440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006442:	bf00      	nop
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800644c:	b480      	push	{r7}
 800644e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006450:	bf00      	nop
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800645a:	b480      	push	{r7}
 800645c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800645e:	bf00      	nop
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800646c:	f000 fc18 	bl	8006ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006470:	bf00      	nop
 8006472:	bd80      	pop	{r7, pc}

08006474 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8006474:	b480      	push	{r7}
 8006476:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8006478:	bf00      	nop
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
	...

08006484 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006488:	4802      	ldr	r0, [pc, #8]	; (8006494 <DMA1_Stream0_IRQHandler+0x10>)
 800648a:	f002 f885 	bl	8008598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800648e:	bf00      	nop
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	24000654 	.word	0x24000654

08006498 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800649c:	4802      	ldr	r0, [pc, #8]	; (80064a8 <DMA1_Stream1_IRQHandler+0x10>)
 800649e:	f002 f87b 	bl	8008598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80064a2:	bf00      	nop
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	240006cc 	.word	0x240006cc

080064ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80064b0:	4802      	ldr	r0, [pc, #8]	; (80064bc <USART1_IRQHandler+0x10>)
 80064b2:	f007 ff01 	bl	800e2b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80064b6:	bf00      	nop
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	240005c4 	.word	0x240005c4

080064c0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80064c4:	4803      	ldr	r0, [pc, #12]	; (80064d4 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80064c6:	f006 fcd1 	bl	800ce6c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80064ca:	4803      	ldr	r0, [pc, #12]	; (80064d8 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80064cc:	f006 fcce 	bl	800ce6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80064d0:	bf00      	nop
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	240003fc 	.word	0x240003fc
 80064d8:	24000448 	.word	0x24000448

080064dc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80064e0:	4803      	ldr	r0, [pc, #12]	; (80064f0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80064e2:	f006 fcc3 	bl	800ce6c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80064e6:	4803      	ldr	r0, [pc, #12]	; (80064f4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80064e8:	f006 fcc0 	bl	800ce6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80064ec:	bf00      	nop
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	240003fc 	.word	0x240003fc
 80064f4:	24000494 	.word	0x24000494

080064f8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80064fc:	4803      	ldr	r0, [pc, #12]	; (800650c <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 80064fe:	f006 fcb5 	bl	800ce6c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8006502:	4803      	ldr	r0, [pc, #12]	; (8006510 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8006504:	f006 fcb2 	bl	800ce6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8006508:	bf00      	nop
 800650a:	bd80      	pop	{r7, pc}
 800650c:	240003fc 	.word	0x240003fc
 8006510:	240004e0 	.word	0x240004e0

08006514 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006518:	4802      	ldr	r0, [pc, #8]	; (8006524 <TIM7_IRQHandler+0x10>)
 800651a:	f006 fca7 	bl	800ce6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800651e:	bf00      	nop
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	240003b0 	.word	0x240003b0

08006528 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800652c:	4802      	ldr	r0, [pc, #8]	; (8006538 <TIM15_IRQHandler+0x10>)
 800652e:	f006 fc9d 	bl	800ce6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8006532:	bf00      	nop
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	2400052c 	.word	0x2400052c

0800653c <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8006540:	4802      	ldr	r0, [pc, #8]	; (800654c <TIM23_IRQHandler+0x10>)
 8006542:	f006 fc93 	bl	800ce6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8006546:	bf00      	nop
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	24000578 	.word	0x24000578

08006550 <_ZN3STM5setupEv>:
#include "stm_main.h"
#include "dc_motor.h"
#include "mecanum.h"

void STM::setup(void){
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
	DC_motor_init();
 8006554:	f7fa fa4e 	bl	80009f4 <_Z13DC_motor_initv>
}
 8006558:	bf00      	nop
 800655a:	bd80      	pop	{r7, pc}

0800655c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800655c:	b480      	push	{r7}
 800655e:	af00      	add	r7, sp, #0
	return 1;
 8006560:	2301      	movs	r3, #1
}
 8006562:	4618      	mov	r0, r3
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <_kill>:

int _kill(int pid, int sig)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006576:	f00a fc23 	bl	8010dc0 <__errno>
 800657a:	4603      	mov	r3, r0
 800657c:	2216      	movs	r2, #22
 800657e:	601a      	str	r2, [r3, #0]
	return -1;
 8006580:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006584:	4618      	mov	r0, r3
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <_exit>:

void _exit (int status)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006594:	f04f 31ff 	mov.w	r1, #4294967295
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7ff ffe7 	bl	800656c <_kill>
	while (1) {}		/* Make sure we hang here */
 800659e:	e7fe      	b.n	800659e <_exit+0x12>

080065a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80065a8:	4a14      	ldr	r2, [pc, #80]	; (80065fc <_sbrk+0x5c>)
 80065aa:	4b15      	ldr	r3, [pc, #84]	; (8006600 <_sbrk+0x60>)
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80065b4:	4b13      	ldr	r3, [pc, #76]	; (8006604 <_sbrk+0x64>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d102      	bne.n	80065c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80065bc:	4b11      	ldr	r3, [pc, #68]	; (8006604 <_sbrk+0x64>)
 80065be:	4a12      	ldr	r2, [pc, #72]	; (8006608 <_sbrk+0x68>)
 80065c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80065c2:	4b10      	ldr	r3, [pc, #64]	; (8006604 <_sbrk+0x64>)
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4413      	add	r3, r2
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d207      	bcs.n	80065e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80065d0:	f00a fbf6 	bl	8010dc0 <__errno>
 80065d4:	4603      	mov	r3, r0
 80065d6:	220c      	movs	r2, #12
 80065d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80065da:	f04f 33ff 	mov.w	r3, #4294967295
 80065de:	e009      	b.n	80065f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80065e0:	4b08      	ldr	r3, [pc, #32]	; (8006604 <_sbrk+0x64>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80065e6:	4b07      	ldr	r3, [pc, #28]	; (8006604 <_sbrk+0x64>)
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4413      	add	r3, r2
 80065ee:	4a05      	ldr	r2, [pc, #20]	; (8006604 <_sbrk+0x64>)
 80065f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80065f2:	68fb      	ldr	r3, [r7, #12]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	24050000 	.word	0x24050000
 8006600:	00000400 	.word	0x00000400
 8006604:	24001b00 	.word	0x24001b00
 8006608:	24001b20 	.word	0x24001b20

0800660c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800660c:	b480      	push	{r7}
 800660e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006610:	4b32      	ldr	r3, [pc, #200]	; (80066dc <SystemInit+0xd0>)
 8006612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006616:	4a31      	ldr	r2, [pc, #196]	; (80066dc <SystemInit+0xd0>)
 8006618:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800661c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006620:	4b2f      	ldr	r3, [pc, #188]	; (80066e0 <SystemInit+0xd4>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 030f 	and.w	r3, r3, #15
 8006628:	2b06      	cmp	r3, #6
 800662a:	d807      	bhi.n	800663c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800662c:	4b2c      	ldr	r3, [pc, #176]	; (80066e0 <SystemInit+0xd4>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f023 030f 	bic.w	r3, r3, #15
 8006634:	4a2a      	ldr	r2, [pc, #168]	; (80066e0 <SystemInit+0xd4>)
 8006636:	f043 0307 	orr.w	r3, r3, #7
 800663a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800663c:	4b29      	ldr	r3, [pc, #164]	; (80066e4 <SystemInit+0xd8>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a28      	ldr	r2, [pc, #160]	; (80066e4 <SystemInit+0xd8>)
 8006642:	f043 0301 	orr.w	r3, r3, #1
 8006646:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006648:	4b26      	ldr	r3, [pc, #152]	; (80066e4 <SystemInit+0xd8>)
 800664a:	2200      	movs	r2, #0
 800664c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800664e:	4b25      	ldr	r3, [pc, #148]	; (80066e4 <SystemInit+0xd8>)
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	4924      	ldr	r1, [pc, #144]	; (80066e4 <SystemInit+0xd8>)
 8006654:	4b24      	ldr	r3, [pc, #144]	; (80066e8 <SystemInit+0xdc>)
 8006656:	4013      	ands	r3, r2
 8006658:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800665a:	4b21      	ldr	r3, [pc, #132]	; (80066e0 <SystemInit+0xd4>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0308 	and.w	r3, r3, #8
 8006662:	2b00      	cmp	r3, #0
 8006664:	d007      	beq.n	8006676 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006666:	4b1e      	ldr	r3, [pc, #120]	; (80066e0 <SystemInit+0xd4>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f023 030f 	bic.w	r3, r3, #15
 800666e:	4a1c      	ldr	r2, [pc, #112]	; (80066e0 <SystemInit+0xd4>)
 8006670:	f043 0307 	orr.w	r3, r3, #7
 8006674:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006676:	4b1b      	ldr	r3, [pc, #108]	; (80066e4 <SystemInit+0xd8>)
 8006678:	2200      	movs	r2, #0
 800667a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800667c:	4b19      	ldr	r3, [pc, #100]	; (80066e4 <SystemInit+0xd8>)
 800667e:	2200      	movs	r2, #0
 8006680:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8006682:	4b18      	ldr	r3, [pc, #96]	; (80066e4 <SystemInit+0xd8>)
 8006684:	2200      	movs	r2, #0
 8006686:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8006688:	4b16      	ldr	r3, [pc, #88]	; (80066e4 <SystemInit+0xd8>)
 800668a:	4a18      	ldr	r2, [pc, #96]	; (80066ec <SystemInit+0xe0>)
 800668c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800668e:	4b15      	ldr	r3, [pc, #84]	; (80066e4 <SystemInit+0xd8>)
 8006690:	4a17      	ldr	r2, [pc, #92]	; (80066f0 <SystemInit+0xe4>)
 8006692:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006694:	4b13      	ldr	r3, [pc, #76]	; (80066e4 <SystemInit+0xd8>)
 8006696:	4a17      	ldr	r2, [pc, #92]	; (80066f4 <SystemInit+0xe8>)
 8006698:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800669a:	4b12      	ldr	r3, [pc, #72]	; (80066e4 <SystemInit+0xd8>)
 800669c:	2200      	movs	r2, #0
 800669e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80066a0:	4b10      	ldr	r3, [pc, #64]	; (80066e4 <SystemInit+0xd8>)
 80066a2:	4a14      	ldr	r2, [pc, #80]	; (80066f4 <SystemInit+0xe8>)
 80066a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80066a6:	4b0f      	ldr	r3, [pc, #60]	; (80066e4 <SystemInit+0xd8>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80066ac:	4b0d      	ldr	r3, [pc, #52]	; (80066e4 <SystemInit+0xd8>)
 80066ae:	4a11      	ldr	r2, [pc, #68]	; (80066f4 <SystemInit+0xe8>)
 80066b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80066b2:	4b0c      	ldr	r3, [pc, #48]	; (80066e4 <SystemInit+0xd8>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80066b8:	4b0a      	ldr	r3, [pc, #40]	; (80066e4 <SystemInit+0xd8>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a09      	ldr	r2, [pc, #36]	; (80066e4 <SystemInit+0xd8>)
 80066be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80066c4:	4b07      	ldr	r3, [pc, #28]	; (80066e4 <SystemInit+0xd8>)
 80066c6:	2200      	movs	r2, #0
 80066c8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80066ca:	4b0b      	ldr	r3, [pc, #44]	; (80066f8 <SystemInit+0xec>)
 80066cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80066d0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80066d2:	bf00      	nop
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	e000ed00 	.word	0xe000ed00
 80066e0:	52002000 	.word	0x52002000
 80066e4:	58024400 	.word	0x58024400
 80066e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80066ec:	02020200 	.word	0x02020200
 80066f0:	01ff0000 	.word	0x01ff0000
 80066f4:	01010280 	.word	0x01010280
 80066f8:	52004000 	.word	0x52004000

080066fc <HAL_TIM_PeriodElapsedCallback>:
#include "reset.h"
#include "scara.h"
#include "microswitch.h"

int axx=0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
	/** SCARA **/
	if (htim->Instance == TIM7) {
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a84      	ldr	r2, [pc, #528]	; (800691c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d12a      	bne.n	8006764 <HAL_TIM_PeriodElapsedCallback+0x68>
		/*stepper 2*/
		if (sc.temp_2 == 1) {
 800670e:	4b84      	ldr	r3, [pc, #528]	; (8006920 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8006710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006712:	2b01      	cmp	r3, #1
 8006714:	d109      	bne.n	800672a <HAL_TIM_PeriodElapsedCallback+0x2e>
			HAL_GPIO_WritePin(STEP_PORT_2, STEP_PIN_2, GPIO_PIN_SET);
 8006716:	2201      	movs	r2, #1
 8006718:	f44f 7180 	mov.w	r1, #256	; 0x100
 800671c:	4881      	ldr	r0, [pc, #516]	; (8006924 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800671e:	f003 fc0d 	bl	8009f3c <HAL_GPIO_WritePin>
			sc.temp_2 = 0;
 8006722:	4b7f      	ldr	r3, [pc, #508]	; (8006920 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8006724:	2200      	movs	r2, #0
 8006726:	659a      	str	r2, [r3, #88]	; 0x58
 8006728:	e01c      	b.n	8006764 <HAL_TIM_PeriodElapsedCallback+0x68>
		}
		else if (sc.step_2 >= 1) {
 800672a:	4b7d      	ldr	r3, [pc, #500]	; (8006920 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800672c:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8006730:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006734:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800673c:	db12      	blt.n	8006764 <HAL_TIM_PeriodElapsedCallback+0x68>
			HAL_GPIO_WritePin(STEP_PORT_2, STEP_PIN_2, GPIO_PIN_RESET);
 800673e:	2200      	movs	r2, #0
 8006740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006744:	4877      	ldr	r0, [pc, #476]	; (8006924 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8006746:	f003 fbf9 	bl	8009f3c <HAL_GPIO_WritePin>
			sc.temp_2 = 1;
 800674a:	4b75      	ldr	r3, [pc, #468]	; (8006920 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800674c:	2201      	movs	r2, #1
 800674e:	659a      	str	r2, [r3, #88]	; 0x58
			sc.step_2 = sc.step_2 - 1;
 8006750:	4b73      	ldr	r3, [pc, #460]	; (8006920 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8006752:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8006756:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800675a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800675e:	4b70      	ldr	r3, [pc, #448]	; (8006920 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8006760:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
		}
	}

	if (htim->Instance == TIM8) {
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a6f      	ldr	r2, [pc, #444]	; (8006928 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d12a      	bne.n	80067c4 <HAL_TIM_PeriodElapsedCallback+0xc8>
	  /*stepper 1*/
		if (sc.temp_1 == 1) {
 800676e:	4b6c      	ldr	r3, [pc, #432]	; (8006920 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8006770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006772:	2b01      	cmp	r3, #1
 8006774:	d109      	bne.n	800678a <HAL_TIM_PeriodElapsedCallback+0x8e>
			HAL_GPIO_WritePin(STEP_PORT_1, STEP_PIN_1, GPIO_PIN_SET);
 8006776:	2201      	movs	r2, #1
 8006778:	f44f 7100 	mov.w	r1, #512	; 0x200
 800677c:	4869      	ldr	r0, [pc, #420]	; (8006924 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800677e:	f003 fbdd 	bl	8009f3c <HAL_GPIO_WritePin>
			sc.temp_1 = 0;
 8006782:	4b67      	ldr	r3, [pc, #412]	; (8006920 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8006784:	2200      	movs	r2, #0
 8006786:	639a      	str	r2, [r3, #56]	; 0x38
 8006788:	e01c      	b.n	80067c4 <HAL_TIM_PeriodElapsedCallback+0xc8>
		}
		else if (sc.step_1 >= 1) {
 800678a:	4b65      	ldr	r3, [pc, #404]	; (8006920 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800678c:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8006790:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006794:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800679c:	db12      	blt.n	80067c4 <HAL_TIM_PeriodElapsedCallback+0xc8>
			HAL_GPIO_WritePin(STEP_PORT_1, STEP_PIN_1, GPIO_PIN_RESET);
 800679e:	2200      	movs	r2, #0
 80067a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067a4:	485f      	ldr	r0, [pc, #380]	; (8006924 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80067a6:	f003 fbc9 	bl	8009f3c <HAL_GPIO_WritePin>
			sc.temp_1 = 1;
 80067aa:	4b5d      	ldr	r3, [pc, #372]	; (8006920 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80067ac:	2201      	movs	r2, #1
 80067ae:	639a      	str	r2, [r3, #56]	; 0x38
			sc.step_1 = sc.step_1 - 1;
 80067b0:	4b5b      	ldr	r3, [pc, #364]	; (8006920 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80067b2:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80067b6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80067ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 80067be:	4b58      	ldr	r3, [pc, #352]	; (8006920 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80067c0:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
		}
	}

	if (htim->Instance == TIM14) {
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a58      	ldr	r2, [pc, #352]	; (800692c <HAL_TIM_PeriodElapsedCallback+0x230>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d12a      	bne.n	8006824 <HAL_TIM_PeriodElapsedCallback+0x128>
		/*stepper 3*/
		if (sc.temp_3 == 1) {
 80067ce:	4b54      	ldr	r3, [pc, #336]	; (8006920 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80067d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d109      	bne.n	80067ea <HAL_TIM_PeriodElapsedCallback+0xee>
			HAL_GPIO_WritePin(STEP_PORT_3, STEP_PIN_3, GPIO_PIN_SET);
 80067d6:	2201      	movs	r2, #1
 80067d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067dc:	4854      	ldr	r0, [pc, #336]	; (8006930 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80067de:	f003 fbad 	bl	8009f3c <HAL_GPIO_WritePin>
			sc.temp_3 = 0;
 80067e2:	4b4f      	ldr	r3, [pc, #316]	; (8006920 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	679a      	str	r2, [r3, #120]	; 0x78
 80067e8:	e01c      	b.n	8006824 <HAL_TIM_PeriodElapsedCallback+0x128>
		}
		else if (sc.step_3 >= 1) {
 80067ea:	4b4d      	ldr	r3, [pc, #308]	; (8006920 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80067ec:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80067f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80067f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80067f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067fc:	db12      	blt.n	8006824 <HAL_TIM_PeriodElapsedCallback+0x128>
			HAL_GPIO_WritePin(STEP_PORT_3, STEP_PIN_3, GPIO_PIN_RESET);
 80067fe:	2200      	movs	r2, #0
 8006800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006804:	484a      	ldr	r0, [pc, #296]	; (8006930 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8006806:	f003 fb99 	bl	8009f3c <HAL_GPIO_WritePin>
			sc.temp_3 = 1;
 800680a:	4b45      	ldr	r3, [pc, #276]	; (8006920 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800680c:	2201      	movs	r2, #1
 800680e:	679a      	str	r2, [r3, #120]	; 0x78
			sc.step_3 = sc.step_3 - 1;
 8006810:	4b43      	ldr	r3, [pc, #268]	; (8006920 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8006812:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006816:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800681a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800681e:	4b40      	ldr	r3, [pc, #256]	; (8006920 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8006820:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
		}
	}
	/**  **/


	if (htim->Instance == TIM13) {
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a42      	ldr	r2, [pc, #264]	; (8006934 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d11e      	bne.n	800686c <HAL_TIM_PeriodElapsedCallback+0x170>
	/* ROS publish */
		static int ms=0;
		if(ms%10==0){
 800682e:	4b42      	ldr	r3, [pc, #264]	; (8006938 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006830:	6819      	ldr	r1, [r3, #0]
 8006832:	4b42      	ldr	r3, [pc, #264]	; (800693c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006834:	fb83 2301 	smull	r2, r3, r3, r1
 8006838:	109a      	asrs	r2, r3, #2
 800683a:	17cb      	asrs	r3, r1, #31
 800683c:	1ad2      	subs	r2, r2, r3
 800683e:	4613      	mov	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	1aca      	subs	r2, r1, r3
 8006848:	2a00      	cmp	r2, #0
 800684a:	d103      	bne.n	8006854 <HAL_TIM_PeriodElapsedCallback+0x158>
			ROS::pub_car_vel();
 800684c:	f7fd fa5e 	bl	8003d0c <_ZN3ROS11pub_car_velEv>
			ROS::pub_reset();
 8006850:	f7fd f9e8 	bl	8003c24 <_ZN3ROS9pub_resetEv>
		}
		ms++;
 8006854:	4b38      	ldr	r3, [pc, #224]	; (8006938 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3301      	adds	r3, #1
 800685a:	4a37      	ldr	r2, [pc, #220]	; (8006938 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800685c:	6013      	str	r3, [r2, #0]

	/* PID Control */
		motor_standard();
 800685e:	f000 f87d 	bl	800695c <_Z14motor_standardv>
		axx++;
 8006862:	4b37      	ldr	r3, [pc, #220]	; (8006940 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3301      	adds	r3, #1
 8006868:	4a35      	ldr	r2, [pc, #212]	; (8006940 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800686a:	6013      	str	r3, [r2, #0]
	}


	/** Intake **/
	if (htim->Instance == TIM24){
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a34      	ldr	r2, [pc, #208]	; (8006944 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d14d      	bne.n	8006912 <HAL_TIM_PeriodElapsedCallback+0x216>
		/* microswitch */
		if (HAL_GPIO_ReadPin(TOUCH_A_PORT, TOUCH_A_PIN) == 0) {
 8006876:	2140      	movs	r1, #64	; 0x40
 8006878:	4833      	ldr	r0, [pc, #204]	; (8006948 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800687a:	f003 fb47 	bl	8009f0c <HAL_GPIO_ReadPin>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	bf0c      	ite	eq
 8006884:	2301      	moveq	r3, #1
 8006886:	2300      	movne	r3, #0
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d006      	beq.n	800689c <HAL_TIM_PeriodElapsedCallback+0x1a0>
			MICROSWITCH::touch_a = 1;
 800688e:	492f      	ldr	r1, [pc, #188]	; (800694c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8006890:	f04f 0200 	mov.w	r2, #0
 8006894:	4b2e      	ldr	r3, [pc, #184]	; (8006950 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006896:	e9c1 2300 	strd	r2, r3, [r1]
 800689a:	e006      	b.n	80068aa <HAL_TIM_PeriodElapsedCallback+0x1ae>
		} else MICROSWITCH::touch_a = 0;
 800689c:	492b      	ldr	r1, [pc, #172]	; (800694c <HAL_TIM_PeriodElapsedCallback+0x250>)
 800689e:	f04f 0200 	mov.w	r2, #0
 80068a2:	f04f 0300 	mov.w	r3, #0
 80068a6:	e9c1 2300 	strd	r2, r3, [r1]

		if (HAL_GPIO_ReadPin(TOUCH_B_PORT, TOUCH_B_PIN) == 0) {
 80068aa:	2120      	movs	r1, #32
 80068ac:	4826      	ldr	r0, [pc, #152]	; (8006948 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80068ae:	f003 fb2d 	bl	8009f0c <HAL_GPIO_ReadPin>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	bf0c      	ite	eq
 80068b8:	2301      	moveq	r3, #1
 80068ba:	2300      	movne	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d006      	beq.n	80068d0 <HAL_TIM_PeriodElapsedCallback+0x1d4>
			MICROSWITCH::touch_b = 1;
 80068c2:	4924      	ldr	r1, [pc, #144]	; (8006954 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80068c4:	f04f 0200 	mov.w	r2, #0
 80068c8:	4b21      	ldr	r3, [pc, #132]	; (8006950 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80068ca:	e9c1 2300 	strd	r2, r3, [r1]
 80068ce:	e006      	b.n	80068de <HAL_TIM_PeriodElapsedCallback+0x1e2>
		} else MICROSWITCH::touch_b = 0;
 80068d0:	4920      	ldr	r1, [pc, #128]	; (8006954 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80068d2:	f04f 0200 	mov.w	r2, #0
 80068d6:	f04f 0300 	mov.w	r3, #0
 80068da:	e9c1 2300 	strd	r2, r3, [r1]

		if (HAL_GPIO_ReadPin(TOUCH_C_PORT, TOUCH_C_PIN) == 0) {
 80068de:	2110      	movs	r1, #16
 80068e0:	4819      	ldr	r0, [pc, #100]	; (8006948 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80068e2:	f003 fb13 	bl	8009f0c <HAL_GPIO_ReadPin>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	bf0c      	ite	eq
 80068ec:	2301      	moveq	r3, #1
 80068ee:	2300      	movne	r3, #0
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d006      	beq.n	8006904 <HAL_TIM_PeriodElapsedCallback+0x208>
			MICROSWITCH::touch_c = 1;
 80068f6:	4918      	ldr	r1, [pc, #96]	; (8006958 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80068f8:	f04f 0200 	mov.w	r2, #0
 80068fc:	4b14      	ldr	r3, [pc, #80]	; (8006950 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80068fe:	e9c1 2300 	strd	r2, r3, [r1]
		} else MICROSWITCH::touch_c = 0;
	}
}
 8006902:	e006      	b.n	8006912 <HAL_TIM_PeriodElapsedCallback+0x216>
		} else MICROSWITCH::touch_c = 0;
 8006904:	4914      	ldr	r1, [pc, #80]	; (8006958 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8006906:	f04f 0200 	mov.w	r2, #0
 800690a:	f04f 0300 	mov.w	r3, #0
 800690e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8006912:	bf00      	nop
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	40001400 	.word	0x40001400
 8006920:	24001a30 	.word	0x24001a30
 8006924:	58021400 	.word	0x58021400
 8006928:	40010400 	.word	0x40010400
 800692c:	40002000 	.word	0x40002000
 8006930:	58020400 	.word	0x58020400
 8006934:	40001c00 	.word	0x40001c00
 8006938:	24001b08 	.word	0x24001b08
 800693c:	66666667 	.word	0x66666667
 8006940:	24001b04 	.word	0x24001b04
 8006944:	4000e400 	.word	0x4000e400
 8006948:	58021800 	.word	0x58021800
 800694c:	24000790 	.word	0x24000790
 8006950:	3ff00000 	.word	0x3ff00000
 8006954:	24000798 	.word	0x24000798
 8006958:	240007a0 	.word	0x240007a0

0800695c <_Z14motor_standardv>:


void motor_standard(void){
 800695c:	b580      	push	{r7, lr}
 800695e:	af00      	add	r7, sp, #0
	/*enc 1*/
		fr.CountNow = __HAL_TIM_GetCounter(&htim2);
 8006960:	4b73      	ldr	r3, [pc, #460]	; (8006b30 <_Z14motor_standardv+0x1d4>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	b21a      	sxth	r2, r3
 8006968:	4b72      	ldr	r3, [pc, #456]	; (8006b34 <_Z14motor_standardv+0x1d8>)
 800696a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		fr.PIDControl();
 800696e:	4871      	ldr	r0, [pc, #452]	; (8006b34 <_Z14motor_standardv+0x1d8>)
 8006970:	f7fa f8d3 	bl	8000b1a <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim2,0);
 8006974:	4b6e      	ldr	r3, [pc, #440]	; (8006b30 <_Z14motor_standardv+0x1d4>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2200      	movs	r2, #0
 800697a:	625a      	str	r2, [r3, #36]	; 0x24

		if (fr.PWM < 0) {
 800697c:	4b6d      	ldr	r3, [pc, #436]	; (8006b34 <_Z14motor_standardv+0x1d8>)
 800697e:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006982:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800698a:	d50c      	bpl.n	80069a6 <_Z14motor_standardv+0x4a>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_SET);
 800698c:	2201      	movs	r2, #1
 800698e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006992:	4869      	ldr	r0, [pc, #420]	; (8006b38 <_Z14motor_standardv+0x1dc>)
 8006994:	f003 fad2 	bl	8009f3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_RESET);
 8006998:	2200      	movs	r2, #0
 800699a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800699e:	4866      	ldr	r0, [pc, #408]	; (8006b38 <_Z14motor_standardv+0x1dc>)
 80069a0:	f003 facc 	bl	8009f3c <HAL_GPIO_WritePin>
 80069a4:	e00b      	b.n	80069be <_Z14motor_standardv+0x62>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_RESET);
 80069a6:	2200      	movs	r2, #0
 80069a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80069ac:	4862      	ldr	r0, [pc, #392]	; (8006b38 <_Z14motor_standardv+0x1dc>)
 80069ae:	f003 fac5 	bl	8009f3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_SET);
 80069b2:	2201      	movs	r2, #1
 80069b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069b8:	485f      	ldr	r0, [pc, #380]	; (8006b38 <_Z14motor_standardv+0x1dc>)
 80069ba:	f003 fabf 	bl	8009f3c <HAL_GPIO_WritePin>
		}

		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, fabs(fr.PWM));
 80069be:	4b5d      	ldr	r3, [pc, #372]	; (8006b34 <_Z14motor_standardv+0x1d8>)
 80069c0:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80069c4:	eeb0 7bc7 	vabs.f64	d7, d7
 80069c8:	4b5c      	ldr	r3, [pc, #368]	; (8006b3c <_Z14motor_standardv+0x1e0>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80069d0:	ee17 2a90 	vmov	r2, s15
 80069d4:	639a      	str	r2, [r3, #56]	; 0x38

	/*enc 2*/
		fl.CountNow = __HAL_TIM_GetCounter(&htim5);
 80069d6:	4b5a      	ldr	r3, [pc, #360]	; (8006b40 <_Z14motor_standardv+0x1e4>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	b21a      	sxth	r2, r3
 80069de:	4b59      	ldr	r3, [pc, #356]	; (8006b44 <_Z14motor_standardv+0x1e8>)
 80069e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		fl.PIDControl();
 80069e4:	4857      	ldr	r0, [pc, #348]	; (8006b44 <_Z14motor_standardv+0x1e8>)
 80069e6:	f7fa f898 	bl	8000b1a <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim5,0);
 80069ea:	4b55      	ldr	r3, [pc, #340]	; (8006b40 <_Z14motor_standardv+0x1e4>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2200      	movs	r2, #0
 80069f0:	625a      	str	r2, [r3, #36]	; 0x24

		if (fl.PWM > 0) {
 80069f2:	4b54      	ldr	r3, [pc, #336]	; (8006b44 <_Z14motor_standardv+0x1e8>)
 80069f4:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80069f8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80069fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a00:	dd0c      	ble.n	8006a1c <_Z14motor_standardv+0xc0>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_SET);
 8006a02:	2201      	movs	r2, #1
 8006a04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a08:	484f      	ldr	r0, [pc, #316]	; (8006b48 <_Z14motor_standardv+0x1ec>)
 8006a0a:	f003 fa97 	bl	8009f3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_RESET);
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a14:	484c      	ldr	r0, [pc, #304]	; (8006b48 <_Z14motor_standardv+0x1ec>)
 8006a16:	f003 fa91 	bl	8009f3c <HAL_GPIO_WritePin>
 8006a1a:	e00b      	b.n	8006a34 <_Z14motor_standardv+0xd8>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_RESET);
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a22:	4849      	ldr	r0, [pc, #292]	; (8006b48 <_Z14motor_standardv+0x1ec>)
 8006a24:	f003 fa8a 	bl	8009f3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_SET);
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a2e:	4846      	ldr	r0, [pc, #280]	; (8006b48 <_Z14motor_standardv+0x1ec>)
 8006a30:	f003 fa84 	bl	8009f3c <HAL_GPIO_WritePin>
		}

		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, fabs(fl.PWM));
 8006a34:	4b43      	ldr	r3, [pc, #268]	; (8006b44 <_Z14motor_standardv+0x1e8>)
 8006a36:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006a3a:	eeb0 7bc7 	vabs.f64	d7, d7
 8006a3e:	4b3f      	ldr	r3, [pc, #252]	; (8006b3c <_Z14motor_standardv+0x1e0>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006a46:	ee17 2a90 	vmov	r2, s15
 8006a4a:	635a      	str	r2, [r3, #52]	; 0x34

	/*enc 3*/
		br.CountNow = __HAL_TIM_GetCounter(&htim3);
 8006a4c:	4b3f      	ldr	r3, [pc, #252]	; (8006b4c <_Z14motor_standardv+0x1f0>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	b21a      	sxth	r2, r3
 8006a54:	4b3e      	ldr	r3, [pc, #248]	; (8006b50 <_Z14motor_standardv+0x1f4>)
 8006a56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		br.PIDControl();
 8006a5a:	483d      	ldr	r0, [pc, #244]	; (8006b50 <_Z14motor_standardv+0x1f4>)
 8006a5c:	f7fa f85d 	bl	8000b1a <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim3,0);
 8006a60:	4b3a      	ldr	r3, [pc, #232]	; (8006b4c <_Z14motor_standardv+0x1f0>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2200      	movs	r2, #0
 8006a66:	625a      	str	r2, [r3, #36]	; 0x24

		if (br.PWM > 0) {
 8006a68:	4b39      	ldr	r3, [pc, #228]	; (8006b50 <_Z14motor_standardv+0x1f4>)
 8006a6a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006a6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a76:	dd0a      	ble.n	8006a8e <_Z14motor_standardv+0x132>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_SET);
 8006a78:	2201      	movs	r2, #1
 8006a7a:	2104      	movs	r1, #4
 8006a7c:	4835      	ldr	r0, [pc, #212]	; (8006b54 <_Z14motor_standardv+0x1f8>)
 8006a7e:	f003 fa5d 	bl	8009f3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_RESET);
 8006a82:	2200      	movs	r2, #0
 8006a84:	2108      	movs	r1, #8
 8006a86:	4833      	ldr	r0, [pc, #204]	; (8006b54 <_Z14motor_standardv+0x1f8>)
 8006a88:	f003 fa58 	bl	8009f3c <HAL_GPIO_WritePin>
 8006a8c:	e009      	b.n	8006aa2 <_Z14motor_standardv+0x146>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_RESET);
 8006a8e:	2200      	movs	r2, #0
 8006a90:	2104      	movs	r1, #4
 8006a92:	4830      	ldr	r0, [pc, #192]	; (8006b54 <_Z14motor_standardv+0x1f8>)
 8006a94:	f003 fa52 	bl	8009f3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_SET);
 8006a98:	2201      	movs	r2, #1
 8006a9a:	2108      	movs	r1, #8
 8006a9c:	482d      	ldr	r0, [pc, #180]	; (8006b54 <_Z14motor_standardv+0x1f8>)
 8006a9e:	f003 fa4d 	bl	8009f3c <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, fabs(br.PWM));
 8006aa2:	4b2b      	ldr	r3, [pc, #172]	; (8006b50 <_Z14motor_standardv+0x1f4>)
 8006aa4:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006aa8:	eeb0 7bc7 	vabs.f64	d7, d7
 8006aac:	4b2a      	ldr	r3, [pc, #168]	; (8006b58 <_Z14motor_standardv+0x1fc>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006ab4:	ee17 2a90 	vmov	r2, s15
 8006ab8:	635a      	str	r2, [r3, #52]	; 0x34

	/*enc 4*/
		bl.CountNow = __HAL_TIM_GetCounter(&htim4);
 8006aba:	4b28      	ldr	r3, [pc, #160]	; (8006b5c <_Z14motor_standardv+0x200>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	b21a      	sxth	r2, r3
 8006ac2:	4b27      	ldr	r3, [pc, #156]	; (8006b60 <_Z14motor_standardv+0x204>)
 8006ac4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		bl.PIDControl();
 8006ac8:	4825      	ldr	r0, [pc, #148]	; (8006b60 <_Z14motor_standardv+0x204>)
 8006aca:	f7fa f826 	bl	8000b1a <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim4,0);
 8006ace:	4b23      	ldr	r3, [pc, #140]	; (8006b5c <_Z14motor_standardv+0x200>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	625a      	str	r2, [r3, #36]	; 0x24

		if (bl.PWM < 0) {
 8006ad6:	4b22      	ldr	r3, [pc, #136]	; (8006b60 <_Z14motor_standardv+0x204>)
 8006ad8:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006adc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae4:	d50b      	bpl.n	8006afe <_Z14motor_standardv+0x1a2>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_SET);
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	2110      	movs	r1, #16
 8006aea:	481a      	ldr	r0, [pc, #104]	; (8006b54 <_Z14motor_standardv+0x1f8>)
 8006aec:	f003 fa26 	bl	8009f3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_RESET);
 8006af0:	2200      	movs	r2, #0
 8006af2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006af6:	481b      	ldr	r0, [pc, #108]	; (8006b64 <_Z14motor_standardv+0x208>)
 8006af8:	f003 fa20 	bl	8009f3c <HAL_GPIO_WritePin>
 8006afc:	e00a      	b.n	8006b14 <_Z14motor_standardv+0x1b8>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_RESET);
 8006afe:	2200      	movs	r2, #0
 8006b00:	2110      	movs	r1, #16
 8006b02:	4814      	ldr	r0, [pc, #80]	; (8006b54 <_Z14motor_standardv+0x1f8>)
 8006b04:	f003 fa1a 	bl	8009f3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_SET);
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b0e:	4815      	ldr	r0, [pc, #84]	; (8006b64 <_Z14motor_standardv+0x208>)
 8006b10:	f003 fa14 	bl	8009f3c <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, fabs(bl.PWM));
 8006b14:	4b12      	ldr	r3, [pc, #72]	; (8006b60 <_Z14motor_standardv+0x204>)
 8006b16:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006b1a:	eeb0 7bc7 	vabs.f64	d7, d7
 8006b1e:	4b0e      	ldr	r3, [pc, #56]	; (8006b58 <_Z14motor_standardv+0x1fc>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006b26:	ee17 2a90 	vmov	r2, s15
 8006b2a:	639a      	str	r2, [r3, #56]	; 0x38

}
 8006b2c:	bf00      	nop
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	24000280 	.word	0x24000280
 8006b34:	240000a0 	.word	0x240000a0
 8006b38:	58020c00 	.word	0x58020c00
 8006b3c:	24000448 	.word	0x24000448
 8006b40:	24000364 	.word	0x24000364
 8006b44:	24000110 	.word	0x24000110
 8006b48:	58020400 	.word	0x58020400
 8006b4c:	240002cc 	.word	0x240002cc
 8006b50:	24000180 	.word	0x24000180
 8006b54:	58021000 	.word	0x58021000
 8006b58:	2400052c 	.word	0x2400052c
 8006b5c:	24000318 	.word	0x24000318
 8006b60:	240001f0 	.word	0x240001f0
 8006b64:	58020800 	.word	0x58020800

08006b68 <Reset_Handler>:
 8006b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ba0 <LoopFillZerobss+0xe>
 8006b6c:	f7ff fd4e 	bl	800660c <SystemInit>
 8006b70:	480c      	ldr	r0, [pc, #48]	; (8006ba4 <LoopFillZerobss+0x12>)
 8006b72:	490d      	ldr	r1, [pc, #52]	; (8006ba8 <LoopFillZerobss+0x16>)
 8006b74:	4a0d      	ldr	r2, [pc, #52]	; (8006bac <LoopFillZerobss+0x1a>)
 8006b76:	2300      	movs	r3, #0
 8006b78:	e002      	b.n	8006b80 <LoopCopyDataInit>

08006b7a <CopyDataInit>:
 8006b7a:	58d4      	ldr	r4, [r2, r3]
 8006b7c:	50c4      	str	r4, [r0, r3]
 8006b7e:	3304      	adds	r3, #4

08006b80 <LoopCopyDataInit>:
 8006b80:	18c4      	adds	r4, r0, r3
 8006b82:	428c      	cmp	r4, r1
 8006b84:	d3f9      	bcc.n	8006b7a <CopyDataInit>
 8006b86:	4a0a      	ldr	r2, [pc, #40]	; (8006bb0 <LoopFillZerobss+0x1e>)
 8006b88:	4c0a      	ldr	r4, [pc, #40]	; (8006bb4 <LoopFillZerobss+0x22>)
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	e001      	b.n	8006b92 <LoopFillZerobss>

08006b8e <FillZerobss>:
 8006b8e:	6013      	str	r3, [r2, #0]
 8006b90:	3204      	adds	r2, #4

08006b92 <LoopFillZerobss>:
 8006b92:	42a2      	cmp	r2, r4
 8006b94:	d3fb      	bcc.n	8006b8e <FillZerobss>
 8006b96:	f00a f919 	bl	8010dcc <__libc_init_array>
 8006b9a:	f7fa f987 	bl	8000eac <main>
 8006b9e:	4770      	bx	lr
 8006ba0:	24050000 	.word	0x24050000
 8006ba4:	24000000 	.word	0x24000000
 8006ba8:	2400007c 	.word	0x2400007c
 8006bac:	08012dd0 	.word	0x08012dd0
 8006bb0:	24000080 	.word	0x24000080
 8006bb4:	24001b20 	.word	0x24001b20

08006bb8 <ADC3_IRQHandler>:
 8006bb8:	e7fe      	b.n	8006bb8 <ADC3_IRQHandler>
	...

08006bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006bc2:	2003      	movs	r0, #3
 8006bc4:	f000 f980 	bl	8006ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006bc8:	f003 ff70 	bl	800aaac <HAL_RCC_GetSysClockFreq>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	4b15      	ldr	r3, [pc, #84]	; (8006c24 <HAL_Init+0x68>)
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	0a1b      	lsrs	r3, r3, #8
 8006bd4:	f003 030f 	and.w	r3, r3, #15
 8006bd8:	4913      	ldr	r1, [pc, #76]	; (8006c28 <HAL_Init+0x6c>)
 8006bda:	5ccb      	ldrb	r3, [r1, r3]
 8006bdc:	f003 031f 	and.w	r3, r3, #31
 8006be0:	fa22 f303 	lsr.w	r3, r2, r3
 8006be4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006be6:	4b0f      	ldr	r3, [pc, #60]	; (8006c24 <HAL_Init+0x68>)
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	f003 030f 	and.w	r3, r3, #15
 8006bee:	4a0e      	ldr	r2, [pc, #56]	; (8006c28 <HAL_Init+0x6c>)
 8006bf0:	5cd3      	ldrb	r3, [r2, r3]
 8006bf2:	f003 031f 	and.w	r3, r3, #31
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bfc:	4a0b      	ldr	r2, [pc, #44]	; (8006c2c <HAL_Init+0x70>)
 8006bfe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c00:	4a0b      	ldr	r2, [pc, #44]	; (8006c30 <HAL_Init+0x74>)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006c06:	200f      	movs	r0, #15
 8006c08:	f000 f814 	bl	8006c34 <HAL_InitTick>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e002      	b.n	8006c1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006c16:	f7ff f879 	bl	8005d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	58024400 	.word	0x58024400
 8006c28:	08011470 	.word	0x08011470
 8006c2c:	24000008 	.word	0x24000008
 8006c30:	24000004 	.word	0x24000004

08006c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006c3c:	4b15      	ldr	r3, [pc, #84]	; (8006c94 <HAL_InitTick+0x60>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d101      	bne.n	8006c48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e021      	b.n	8006c8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006c48:	4b13      	ldr	r3, [pc, #76]	; (8006c98 <HAL_InitTick+0x64>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	4b11      	ldr	r3, [pc, #68]	; (8006c94 <HAL_InitTick+0x60>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	4619      	mov	r1, r3
 8006c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 f965 	bl	8006f2e <HAL_SYSTICK_Config>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e00e      	b.n	8006c8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b0f      	cmp	r3, #15
 8006c72:	d80a      	bhi.n	8006c8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c74:	2200      	movs	r2, #0
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	f04f 30ff 	mov.w	r0, #4294967295
 8006c7c:	f000 f92f 	bl	8006ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006c80:	4a06      	ldr	r2, [pc, #24]	; (8006c9c <HAL_InitTick+0x68>)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	e000      	b.n	8006c8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	24000010 	.word	0x24000010
 8006c98:	24000004 	.word	0x24000004
 8006c9c:	2400000c 	.word	0x2400000c

08006ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006ca4:	4b06      	ldr	r3, [pc, #24]	; (8006cc0 <HAL_IncTick+0x20>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	4b06      	ldr	r3, [pc, #24]	; (8006cc4 <HAL_IncTick+0x24>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4413      	add	r3, r2
 8006cb0:	4a04      	ldr	r2, [pc, #16]	; (8006cc4 <HAL_IncTick+0x24>)
 8006cb2:	6013      	str	r3, [r2, #0]
}
 8006cb4:	bf00      	nop
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	24000010 	.word	0x24000010
 8006cc4:	24001b0c 	.word	0x24001b0c

08006cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	af00      	add	r7, sp, #0
  return uwTick;
 8006ccc:	4b03      	ldr	r3, [pc, #12]	; (8006cdc <HAL_GetTick+0x14>)
 8006cce:	681b      	ldr	r3, [r3, #0]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	24001b0c 	.word	0x24001b0c

08006ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ce8:	f7ff ffee 	bl	8006cc8 <HAL_GetTick>
 8006cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf8:	d005      	beq.n	8006d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006cfa:	4b0a      	ldr	r3, [pc, #40]	; (8006d24 <HAL_Delay+0x44>)
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4413      	add	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006d06:	bf00      	nop
 8006d08:	f7ff ffde 	bl	8006cc8 <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d8f7      	bhi.n	8006d08 <HAL_Delay+0x28>
  {
  }
}
 8006d18:	bf00      	nop
 8006d1a:	bf00      	nop
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	24000010 	.word	0x24000010

08006d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d38:	4b0b      	ldr	r3, [pc, #44]	; (8006d68 <__NVIC_SetPriorityGrouping+0x40>)
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d44:	4013      	ands	r3, r2
 8006d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006d50:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <__NVIC_SetPriorityGrouping+0x44>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d56:	4a04      	ldr	r2, [pc, #16]	; (8006d68 <__NVIC_SetPriorityGrouping+0x40>)
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	60d3      	str	r3, [r2, #12]
}
 8006d5c:	bf00      	nop
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	e000ed00 	.word	0xe000ed00
 8006d6c:	05fa0000 	.word	0x05fa0000

08006d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d70:	b480      	push	{r7}
 8006d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d74:	4b04      	ldr	r3, [pc, #16]	; (8006d88 <__NVIC_GetPriorityGrouping+0x18>)
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	0a1b      	lsrs	r3, r3, #8
 8006d7a:	f003 0307 	and.w	r3, r3, #7
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	e000ed00 	.word	0xe000ed00

08006d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	4603      	mov	r3, r0
 8006d94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006d96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	db0b      	blt.n	8006db6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d9e:	88fb      	ldrh	r3, [r7, #6]
 8006da0:	f003 021f 	and.w	r2, r3, #31
 8006da4:	4907      	ldr	r1, [pc, #28]	; (8006dc4 <__NVIC_EnableIRQ+0x38>)
 8006da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006daa:	095b      	lsrs	r3, r3, #5
 8006dac:	2001      	movs	r0, #1
 8006dae:	fa00 f202 	lsl.w	r2, r0, r2
 8006db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006db6:	bf00      	nop
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	e000e100 	.word	0xe000e100

08006dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	4603      	mov	r3, r0
 8006dd0:	6039      	str	r1, [r7, #0]
 8006dd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006dd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	db0a      	blt.n	8006df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	490c      	ldr	r1, [pc, #48]	; (8006e14 <__NVIC_SetPriority+0x4c>)
 8006de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006de6:	0112      	lsls	r2, r2, #4
 8006de8:	b2d2      	uxtb	r2, r2
 8006dea:	440b      	add	r3, r1
 8006dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006df0:	e00a      	b.n	8006e08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	4908      	ldr	r1, [pc, #32]	; (8006e18 <__NVIC_SetPriority+0x50>)
 8006df8:	88fb      	ldrh	r3, [r7, #6]
 8006dfa:	f003 030f 	and.w	r3, r3, #15
 8006dfe:	3b04      	subs	r3, #4
 8006e00:	0112      	lsls	r2, r2, #4
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	440b      	add	r3, r1
 8006e06:	761a      	strb	r2, [r3, #24]
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	e000e100 	.word	0xe000e100
 8006e18:	e000ed00 	.word	0xe000ed00

08006e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b089      	sub	sp, #36	; 0x24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f003 0307 	and.w	r3, r3, #7
 8006e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	f1c3 0307 	rsb	r3, r3, #7
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	bf28      	it	cs
 8006e3a:	2304      	movcs	r3, #4
 8006e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	3304      	adds	r3, #4
 8006e42:	2b06      	cmp	r3, #6
 8006e44:	d902      	bls.n	8006e4c <NVIC_EncodePriority+0x30>
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	3b03      	subs	r3, #3
 8006e4a:	e000      	b.n	8006e4e <NVIC_EncodePriority+0x32>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e50:	f04f 32ff 	mov.w	r2, #4294967295
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5a:	43da      	mvns	r2, r3
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	401a      	ands	r2, r3
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e64:	f04f 31ff 	mov.w	r1, #4294967295
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e6e:	43d9      	mvns	r1, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e74:	4313      	orrs	r3, r2
         );
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3724      	adds	r7, #36	; 0x24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
	...

08006e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e94:	d301      	bcc.n	8006e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e96:	2301      	movs	r3, #1
 8006e98:	e00f      	b.n	8006eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e9a:	4a0a      	ldr	r2, [pc, #40]	; (8006ec4 <SysTick_Config+0x40>)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ea2:	210f      	movs	r1, #15
 8006ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea8:	f7ff ff8e 	bl	8006dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006eac:	4b05      	ldr	r3, [pc, #20]	; (8006ec4 <SysTick_Config+0x40>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006eb2:	4b04      	ldr	r3, [pc, #16]	; (8006ec4 <SysTick_Config+0x40>)
 8006eb4:	2207      	movs	r2, #7
 8006eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	e000e010 	.word	0xe000e010

08006ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7ff ff29 	bl	8006d28 <__NVIC_SetPriorityGrouping>
}
 8006ed6:	bf00      	nop
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b086      	sub	sp, #24
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	60b9      	str	r1, [r7, #8]
 8006ee8:	607a      	str	r2, [r7, #4]
 8006eea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006eec:	f7ff ff40 	bl	8006d70 <__NVIC_GetPriorityGrouping>
 8006ef0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	68b9      	ldr	r1, [r7, #8]
 8006ef6:	6978      	ldr	r0, [r7, #20]
 8006ef8:	f7ff ff90 	bl	8006e1c <NVIC_EncodePriority>
 8006efc:	4602      	mov	r2, r0
 8006efe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f02:	4611      	mov	r1, r2
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7ff ff5f 	bl	8006dc8 <__NVIC_SetPriority>
}
 8006f0a:	bf00      	nop
 8006f0c:	3718      	adds	r7, #24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b082      	sub	sp, #8
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	4603      	mov	r3, r0
 8006f1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7ff ff33 	bl	8006d8c <__NVIC_EnableIRQ>
}
 8006f26:	bf00      	nop
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b082      	sub	sp, #8
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7ff ffa4 	bl	8006e84 <SysTick_Config>
 8006f3c:	4603      	mov	r3, r0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
	...

08006f48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006f50:	f7ff feba 	bl	8006cc8 <HAL_GetTick>
 8006f54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e314      	b.n	800758a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a66      	ldr	r2, [pc, #408]	; (8007100 <HAL_DMA_Init+0x1b8>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d04a      	beq.n	8007000 <HAL_DMA_Init+0xb8>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a65      	ldr	r2, [pc, #404]	; (8007104 <HAL_DMA_Init+0x1bc>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d045      	beq.n	8007000 <HAL_DMA_Init+0xb8>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a63      	ldr	r2, [pc, #396]	; (8007108 <HAL_DMA_Init+0x1c0>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d040      	beq.n	8007000 <HAL_DMA_Init+0xb8>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a62      	ldr	r2, [pc, #392]	; (800710c <HAL_DMA_Init+0x1c4>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d03b      	beq.n	8007000 <HAL_DMA_Init+0xb8>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a60      	ldr	r2, [pc, #384]	; (8007110 <HAL_DMA_Init+0x1c8>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d036      	beq.n	8007000 <HAL_DMA_Init+0xb8>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a5f      	ldr	r2, [pc, #380]	; (8007114 <HAL_DMA_Init+0x1cc>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d031      	beq.n	8007000 <HAL_DMA_Init+0xb8>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a5d      	ldr	r2, [pc, #372]	; (8007118 <HAL_DMA_Init+0x1d0>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d02c      	beq.n	8007000 <HAL_DMA_Init+0xb8>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a5c      	ldr	r2, [pc, #368]	; (800711c <HAL_DMA_Init+0x1d4>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d027      	beq.n	8007000 <HAL_DMA_Init+0xb8>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a5a      	ldr	r2, [pc, #360]	; (8007120 <HAL_DMA_Init+0x1d8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d022      	beq.n	8007000 <HAL_DMA_Init+0xb8>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a59      	ldr	r2, [pc, #356]	; (8007124 <HAL_DMA_Init+0x1dc>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d01d      	beq.n	8007000 <HAL_DMA_Init+0xb8>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a57      	ldr	r2, [pc, #348]	; (8007128 <HAL_DMA_Init+0x1e0>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d018      	beq.n	8007000 <HAL_DMA_Init+0xb8>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a56      	ldr	r2, [pc, #344]	; (800712c <HAL_DMA_Init+0x1e4>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d013      	beq.n	8007000 <HAL_DMA_Init+0xb8>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a54      	ldr	r2, [pc, #336]	; (8007130 <HAL_DMA_Init+0x1e8>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d00e      	beq.n	8007000 <HAL_DMA_Init+0xb8>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a53      	ldr	r2, [pc, #332]	; (8007134 <HAL_DMA_Init+0x1ec>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d009      	beq.n	8007000 <HAL_DMA_Init+0xb8>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a51      	ldr	r2, [pc, #324]	; (8007138 <HAL_DMA_Init+0x1f0>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d004      	beq.n	8007000 <HAL_DMA_Init+0xb8>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a50      	ldr	r2, [pc, #320]	; (800713c <HAL_DMA_Init+0x1f4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d101      	bne.n	8007004 <HAL_DMA_Init+0xbc>
 8007000:	2301      	movs	r3, #1
 8007002:	e000      	b.n	8007006 <HAL_DMA_Init+0xbe>
 8007004:	2300      	movs	r3, #0
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 813c 	beq.w	8007284 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2202      	movs	r2, #2
 8007010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a37      	ldr	r2, [pc, #220]	; (8007100 <HAL_DMA_Init+0x1b8>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d04a      	beq.n	80070bc <HAL_DMA_Init+0x174>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a36      	ldr	r2, [pc, #216]	; (8007104 <HAL_DMA_Init+0x1bc>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d045      	beq.n	80070bc <HAL_DMA_Init+0x174>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a34      	ldr	r2, [pc, #208]	; (8007108 <HAL_DMA_Init+0x1c0>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d040      	beq.n	80070bc <HAL_DMA_Init+0x174>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a33      	ldr	r2, [pc, #204]	; (800710c <HAL_DMA_Init+0x1c4>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d03b      	beq.n	80070bc <HAL_DMA_Init+0x174>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a31      	ldr	r2, [pc, #196]	; (8007110 <HAL_DMA_Init+0x1c8>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d036      	beq.n	80070bc <HAL_DMA_Init+0x174>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a30      	ldr	r2, [pc, #192]	; (8007114 <HAL_DMA_Init+0x1cc>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d031      	beq.n	80070bc <HAL_DMA_Init+0x174>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a2e      	ldr	r2, [pc, #184]	; (8007118 <HAL_DMA_Init+0x1d0>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d02c      	beq.n	80070bc <HAL_DMA_Init+0x174>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a2d      	ldr	r2, [pc, #180]	; (800711c <HAL_DMA_Init+0x1d4>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d027      	beq.n	80070bc <HAL_DMA_Init+0x174>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a2b      	ldr	r2, [pc, #172]	; (8007120 <HAL_DMA_Init+0x1d8>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d022      	beq.n	80070bc <HAL_DMA_Init+0x174>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a2a      	ldr	r2, [pc, #168]	; (8007124 <HAL_DMA_Init+0x1dc>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d01d      	beq.n	80070bc <HAL_DMA_Init+0x174>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a28      	ldr	r2, [pc, #160]	; (8007128 <HAL_DMA_Init+0x1e0>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d018      	beq.n	80070bc <HAL_DMA_Init+0x174>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a27      	ldr	r2, [pc, #156]	; (800712c <HAL_DMA_Init+0x1e4>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d013      	beq.n	80070bc <HAL_DMA_Init+0x174>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a25      	ldr	r2, [pc, #148]	; (8007130 <HAL_DMA_Init+0x1e8>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00e      	beq.n	80070bc <HAL_DMA_Init+0x174>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a24      	ldr	r2, [pc, #144]	; (8007134 <HAL_DMA_Init+0x1ec>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d009      	beq.n	80070bc <HAL_DMA_Init+0x174>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a22      	ldr	r2, [pc, #136]	; (8007138 <HAL_DMA_Init+0x1f0>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d004      	beq.n	80070bc <HAL_DMA_Init+0x174>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a21      	ldr	r2, [pc, #132]	; (800713c <HAL_DMA_Init+0x1f4>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d108      	bne.n	80070ce <HAL_DMA_Init+0x186>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f022 0201 	bic.w	r2, r2, #1
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	e007      	b.n	80070de <HAL_DMA_Init+0x196>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 0201 	bic.w	r2, r2, #1
 80070dc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80070de:	e02f      	b.n	8007140 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80070e0:	f7ff fdf2 	bl	8006cc8 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	2b05      	cmp	r3, #5
 80070ec:	d928      	bls.n	8007140 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2220      	movs	r2, #32
 80070f2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2203      	movs	r2, #3
 80070f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e244      	b.n	800758a <HAL_DMA_Init+0x642>
 8007100:	40020010 	.word	0x40020010
 8007104:	40020028 	.word	0x40020028
 8007108:	40020040 	.word	0x40020040
 800710c:	40020058 	.word	0x40020058
 8007110:	40020070 	.word	0x40020070
 8007114:	40020088 	.word	0x40020088
 8007118:	400200a0 	.word	0x400200a0
 800711c:	400200b8 	.word	0x400200b8
 8007120:	40020410 	.word	0x40020410
 8007124:	40020428 	.word	0x40020428
 8007128:	40020440 	.word	0x40020440
 800712c:	40020458 	.word	0x40020458
 8007130:	40020470 	.word	0x40020470
 8007134:	40020488 	.word	0x40020488
 8007138:	400204a0 	.word	0x400204a0
 800713c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1c8      	bne.n	80070e0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	4b84      	ldr	r3, [pc, #528]	; (800736c <HAL_DMA_Init+0x424>)
 800715a:	4013      	ands	r3, r2
 800715c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007166:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007172:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800717e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	4313      	orrs	r3, r2
 800718a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007190:	2b04      	cmp	r3, #4
 8007192:	d107      	bne.n	80071a4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719c:	4313      	orrs	r3, r2
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	2b28      	cmp	r3, #40	; 0x28
 80071aa:	d903      	bls.n	80071b4 <HAL_DMA_Init+0x26c>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	2b2e      	cmp	r3, #46	; 0x2e
 80071b2:	d91f      	bls.n	80071f4 <HAL_DMA_Init+0x2ac>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	2b3e      	cmp	r3, #62	; 0x3e
 80071ba:	d903      	bls.n	80071c4 <HAL_DMA_Init+0x27c>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	2b42      	cmp	r3, #66	; 0x42
 80071c2:	d917      	bls.n	80071f4 <HAL_DMA_Init+0x2ac>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	2b46      	cmp	r3, #70	; 0x46
 80071ca:	d903      	bls.n	80071d4 <HAL_DMA_Init+0x28c>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	2b48      	cmp	r3, #72	; 0x48
 80071d2:	d90f      	bls.n	80071f4 <HAL_DMA_Init+0x2ac>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	2b4e      	cmp	r3, #78	; 0x4e
 80071da:	d903      	bls.n	80071e4 <HAL_DMA_Init+0x29c>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	2b52      	cmp	r3, #82	; 0x52
 80071e2:	d907      	bls.n	80071f4 <HAL_DMA_Init+0x2ac>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	2b73      	cmp	r3, #115	; 0x73
 80071ea:	d905      	bls.n	80071f8 <HAL_DMA_Init+0x2b0>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	2b77      	cmp	r3, #119	; 0x77
 80071f2:	d801      	bhi.n	80071f8 <HAL_DMA_Init+0x2b0>
 80071f4:	2301      	movs	r3, #1
 80071f6:	e000      	b.n	80071fa <HAL_DMA_Init+0x2b2>
 80071f8:	2300      	movs	r3, #0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d003      	beq.n	8007206 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007204:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f023 0307 	bic.w	r3, r3, #7
 800721c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	4313      	orrs	r3, r2
 8007226:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	2b04      	cmp	r3, #4
 800722e:	d117      	bne.n	8007260 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	4313      	orrs	r3, r2
 8007238:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00e      	beq.n	8007260 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f002 fb30 	bl	80098a8 <DMA_CheckFifoParam>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d008      	beq.n	8007260 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2240      	movs	r2, #64	; 0x40
 8007252:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e194      	b.n	800758a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f002 fa6b 	bl	8009744 <DMA_CalcBaseAndBitshift>
 800726e:	4603      	mov	r3, r0
 8007270:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007276:	f003 031f 	and.w	r3, r3, #31
 800727a:	223f      	movs	r2, #63	; 0x3f
 800727c:	409a      	lsls	r2, r3
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	609a      	str	r2, [r3, #8]
 8007282:	e0ca      	b.n	800741a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a39      	ldr	r2, [pc, #228]	; (8007370 <HAL_DMA_Init+0x428>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d022      	beq.n	80072d4 <HAL_DMA_Init+0x38c>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a38      	ldr	r2, [pc, #224]	; (8007374 <HAL_DMA_Init+0x42c>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d01d      	beq.n	80072d4 <HAL_DMA_Init+0x38c>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a36      	ldr	r2, [pc, #216]	; (8007378 <HAL_DMA_Init+0x430>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d018      	beq.n	80072d4 <HAL_DMA_Init+0x38c>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a35      	ldr	r2, [pc, #212]	; (800737c <HAL_DMA_Init+0x434>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d013      	beq.n	80072d4 <HAL_DMA_Init+0x38c>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a33      	ldr	r2, [pc, #204]	; (8007380 <HAL_DMA_Init+0x438>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d00e      	beq.n	80072d4 <HAL_DMA_Init+0x38c>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a32      	ldr	r2, [pc, #200]	; (8007384 <HAL_DMA_Init+0x43c>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d009      	beq.n	80072d4 <HAL_DMA_Init+0x38c>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a30      	ldr	r2, [pc, #192]	; (8007388 <HAL_DMA_Init+0x440>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d004      	beq.n	80072d4 <HAL_DMA_Init+0x38c>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a2f      	ldr	r2, [pc, #188]	; (800738c <HAL_DMA_Init+0x444>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d101      	bne.n	80072d8 <HAL_DMA_Init+0x390>
 80072d4:	2301      	movs	r3, #1
 80072d6:	e000      	b.n	80072da <HAL_DMA_Init+0x392>
 80072d8:	2300      	movs	r3, #0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 8094 	beq.w	8007408 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a22      	ldr	r2, [pc, #136]	; (8007370 <HAL_DMA_Init+0x428>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d021      	beq.n	800732e <HAL_DMA_Init+0x3e6>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a21      	ldr	r2, [pc, #132]	; (8007374 <HAL_DMA_Init+0x42c>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d01c      	beq.n	800732e <HAL_DMA_Init+0x3e6>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a1f      	ldr	r2, [pc, #124]	; (8007378 <HAL_DMA_Init+0x430>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d017      	beq.n	800732e <HAL_DMA_Init+0x3e6>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a1e      	ldr	r2, [pc, #120]	; (800737c <HAL_DMA_Init+0x434>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d012      	beq.n	800732e <HAL_DMA_Init+0x3e6>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a1c      	ldr	r2, [pc, #112]	; (8007380 <HAL_DMA_Init+0x438>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d00d      	beq.n	800732e <HAL_DMA_Init+0x3e6>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a1b      	ldr	r2, [pc, #108]	; (8007384 <HAL_DMA_Init+0x43c>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d008      	beq.n	800732e <HAL_DMA_Init+0x3e6>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a19      	ldr	r2, [pc, #100]	; (8007388 <HAL_DMA_Init+0x440>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d003      	beq.n	800732e <HAL_DMA_Init+0x3e6>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a18      	ldr	r2, [pc, #96]	; (800738c <HAL_DMA_Init+0x444>)
 800732c:	4293      	cmp	r3, r2
 800732e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	4b11      	ldr	r3, [pc, #68]	; (8007390 <HAL_DMA_Init+0x448>)
 800734c:	4013      	ands	r3, r2
 800734e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	2b40      	cmp	r3, #64	; 0x40
 8007356:	d01d      	beq.n	8007394 <HAL_DMA_Init+0x44c>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	2b80      	cmp	r3, #128	; 0x80
 800735e:	d102      	bne.n	8007366 <HAL_DMA_Init+0x41e>
 8007360:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007364:	e017      	b.n	8007396 <HAL_DMA_Init+0x44e>
 8007366:	2300      	movs	r3, #0
 8007368:	e015      	b.n	8007396 <HAL_DMA_Init+0x44e>
 800736a:	bf00      	nop
 800736c:	fe10803f 	.word	0xfe10803f
 8007370:	58025408 	.word	0x58025408
 8007374:	5802541c 	.word	0x5802541c
 8007378:	58025430 	.word	0x58025430
 800737c:	58025444 	.word	0x58025444
 8007380:	58025458 	.word	0x58025458
 8007384:	5802546c 	.word	0x5802546c
 8007388:	58025480 	.word	0x58025480
 800738c:	58025494 	.word	0x58025494
 8007390:	fffe000f 	.word	0xfffe000f
 8007394:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	68d2      	ldr	r2, [r2, #12]
 800739a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800739c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80073a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80073ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80073b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80073bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80073c4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	461a      	mov	r2, r3
 80073da:	4b6e      	ldr	r3, [pc, #440]	; (8007594 <HAL_DMA_Init+0x64c>)
 80073dc:	4413      	add	r3, r2
 80073de:	4a6e      	ldr	r2, [pc, #440]	; (8007598 <HAL_DMA_Init+0x650>)
 80073e0:	fba2 2303 	umull	r2, r3, r2, r3
 80073e4:	091b      	lsrs	r3, r3, #4
 80073e6:	009a      	lsls	r2, r3, #2
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f002 f9a9 	bl	8009744 <DMA_CalcBaseAndBitshift>
 80073f2:	4603      	mov	r3, r0
 80073f4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073fa:	f003 031f 	and.w	r3, r3, #31
 80073fe:	2201      	movs	r2, #1
 8007400:	409a      	lsls	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	605a      	str	r2, [r3, #4]
 8007406:	e008      	b.n	800741a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2240      	movs	r2, #64	; 0x40
 800740c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2203      	movs	r2, #3
 8007412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e0b7      	b.n	800758a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a5f      	ldr	r2, [pc, #380]	; (800759c <HAL_DMA_Init+0x654>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d072      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a5d      	ldr	r2, [pc, #372]	; (80075a0 <HAL_DMA_Init+0x658>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d06d      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a5c      	ldr	r2, [pc, #368]	; (80075a4 <HAL_DMA_Init+0x65c>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d068      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a5a      	ldr	r2, [pc, #360]	; (80075a8 <HAL_DMA_Init+0x660>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d063      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a59      	ldr	r2, [pc, #356]	; (80075ac <HAL_DMA_Init+0x664>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d05e      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a57      	ldr	r2, [pc, #348]	; (80075b0 <HAL_DMA_Init+0x668>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d059      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a56      	ldr	r2, [pc, #344]	; (80075b4 <HAL_DMA_Init+0x66c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d054      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a54      	ldr	r2, [pc, #336]	; (80075b8 <HAL_DMA_Init+0x670>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d04f      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a53      	ldr	r2, [pc, #332]	; (80075bc <HAL_DMA_Init+0x674>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d04a      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a51      	ldr	r2, [pc, #324]	; (80075c0 <HAL_DMA_Init+0x678>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d045      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a50      	ldr	r2, [pc, #320]	; (80075c4 <HAL_DMA_Init+0x67c>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d040      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a4e      	ldr	r2, [pc, #312]	; (80075c8 <HAL_DMA_Init+0x680>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d03b      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a4d      	ldr	r2, [pc, #308]	; (80075cc <HAL_DMA_Init+0x684>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d036      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a4b      	ldr	r2, [pc, #300]	; (80075d0 <HAL_DMA_Init+0x688>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d031      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a4a      	ldr	r2, [pc, #296]	; (80075d4 <HAL_DMA_Init+0x68c>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d02c      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a48      	ldr	r2, [pc, #288]	; (80075d8 <HAL_DMA_Init+0x690>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d027      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a47      	ldr	r2, [pc, #284]	; (80075dc <HAL_DMA_Init+0x694>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d022      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a45      	ldr	r2, [pc, #276]	; (80075e0 <HAL_DMA_Init+0x698>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d01d      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a44      	ldr	r2, [pc, #272]	; (80075e4 <HAL_DMA_Init+0x69c>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d018      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a42      	ldr	r2, [pc, #264]	; (80075e8 <HAL_DMA_Init+0x6a0>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d013      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a41      	ldr	r2, [pc, #260]	; (80075ec <HAL_DMA_Init+0x6a4>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d00e      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a3f      	ldr	r2, [pc, #252]	; (80075f0 <HAL_DMA_Init+0x6a8>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d009      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a3e      	ldr	r2, [pc, #248]	; (80075f4 <HAL_DMA_Init+0x6ac>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d004      	beq.n	800750a <HAL_DMA_Init+0x5c2>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a3c      	ldr	r2, [pc, #240]	; (80075f8 <HAL_DMA_Init+0x6b0>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d101      	bne.n	800750e <HAL_DMA_Init+0x5c6>
 800750a:	2301      	movs	r3, #1
 800750c:	e000      	b.n	8007510 <HAL_DMA_Init+0x5c8>
 800750e:	2300      	movs	r3, #0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d032      	beq.n	800757a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f002 fa43 	bl	80099a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	2b80      	cmp	r3, #128	; 0x80
 8007520:	d102      	bne.n	8007528 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007530:	b2d2      	uxtb	r2, r2
 8007532:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800753c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d010      	beq.n	8007568 <HAL_DMA_Init+0x620>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	2b08      	cmp	r3, #8
 800754c:	d80c      	bhi.n	8007568 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f002 fac0 	bl	8009ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007558:	2200      	movs	r2, #0
 800755a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007564:	605a      	str	r2, [r3, #4]
 8007566:	e008      	b.n	800757a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	a7fdabf8 	.word	0xa7fdabf8
 8007598:	cccccccd 	.word	0xcccccccd
 800759c:	40020010 	.word	0x40020010
 80075a0:	40020028 	.word	0x40020028
 80075a4:	40020040 	.word	0x40020040
 80075a8:	40020058 	.word	0x40020058
 80075ac:	40020070 	.word	0x40020070
 80075b0:	40020088 	.word	0x40020088
 80075b4:	400200a0 	.word	0x400200a0
 80075b8:	400200b8 	.word	0x400200b8
 80075bc:	40020410 	.word	0x40020410
 80075c0:	40020428 	.word	0x40020428
 80075c4:	40020440 	.word	0x40020440
 80075c8:	40020458 	.word	0x40020458
 80075cc:	40020470 	.word	0x40020470
 80075d0:	40020488 	.word	0x40020488
 80075d4:	400204a0 	.word	0x400204a0
 80075d8:	400204b8 	.word	0x400204b8
 80075dc:	58025408 	.word	0x58025408
 80075e0:	5802541c 	.word	0x5802541c
 80075e4:	58025430 	.word	0x58025430
 80075e8:	58025444 	.word	0x58025444
 80075ec:	58025458 	.word	0x58025458
 80075f0:	5802546c 	.word	0x5802546c
 80075f4:	58025480 	.word	0x58025480
 80075f8:	58025494 	.word	0x58025494

080075fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
 8007608:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e226      	b.n	8007a66 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800761e:	2b01      	cmp	r3, #1
 8007620:	d101      	bne.n	8007626 <HAL_DMA_Start_IT+0x2a>
 8007622:	2302      	movs	r3, #2
 8007624:	e21f      	b.n	8007a66 <HAL_DMA_Start_IT+0x46a>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b01      	cmp	r3, #1
 8007638:	f040 820a 	bne.w	8007a50 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2202      	movs	r2, #2
 8007640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a68      	ldr	r2, [pc, #416]	; (80077f0 <HAL_DMA_Start_IT+0x1f4>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d04a      	beq.n	80076ea <HAL_DMA_Start_IT+0xee>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a66      	ldr	r2, [pc, #408]	; (80077f4 <HAL_DMA_Start_IT+0x1f8>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d045      	beq.n	80076ea <HAL_DMA_Start_IT+0xee>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a65      	ldr	r2, [pc, #404]	; (80077f8 <HAL_DMA_Start_IT+0x1fc>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d040      	beq.n	80076ea <HAL_DMA_Start_IT+0xee>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a63      	ldr	r2, [pc, #396]	; (80077fc <HAL_DMA_Start_IT+0x200>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d03b      	beq.n	80076ea <HAL_DMA_Start_IT+0xee>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a62      	ldr	r2, [pc, #392]	; (8007800 <HAL_DMA_Start_IT+0x204>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d036      	beq.n	80076ea <HAL_DMA_Start_IT+0xee>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a60      	ldr	r2, [pc, #384]	; (8007804 <HAL_DMA_Start_IT+0x208>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d031      	beq.n	80076ea <HAL_DMA_Start_IT+0xee>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a5f      	ldr	r2, [pc, #380]	; (8007808 <HAL_DMA_Start_IT+0x20c>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d02c      	beq.n	80076ea <HAL_DMA_Start_IT+0xee>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a5d      	ldr	r2, [pc, #372]	; (800780c <HAL_DMA_Start_IT+0x210>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d027      	beq.n	80076ea <HAL_DMA_Start_IT+0xee>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a5c      	ldr	r2, [pc, #368]	; (8007810 <HAL_DMA_Start_IT+0x214>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d022      	beq.n	80076ea <HAL_DMA_Start_IT+0xee>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a5a      	ldr	r2, [pc, #360]	; (8007814 <HAL_DMA_Start_IT+0x218>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d01d      	beq.n	80076ea <HAL_DMA_Start_IT+0xee>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a59      	ldr	r2, [pc, #356]	; (8007818 <HAL_DMA_Start_IT+0x21c>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d018      	beq.n	80076ea <HAL_DMA_Start_IT+0xee>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a57      	ldr	r2, [pc, #348]	; (800781c <HAL_DMA_Start_IT+0x220>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d013      	beq.n	80076ea <HAL_DMA_Start_IT+0xee>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a56      	ldr	r2, [pc, #344]	; (8007820 <HAL_DMA_Start_IT+0x224>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d00e      	beq.n	80076ea <HAL_DMA_Start_IT+0xee>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a54      	ldr	r2, [pc, #336]	; (8007824 <HAL_DMA_Start_IT+0x228>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d009      	beq.n	80076ea <HAL_DMA_Start_IT+0xee>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a53      	ldr	r2, [pc, #332]	; (8007828 <HAL_DMA_Start_IT+0x22c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d004      	beq.n	80076ea <HAL_DMA_Start_IT+0xee>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a51      	ldr	r2, [pc, #324]	; (800782c <HAL_DMA_Start_IT+0x230>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d108      	bne.n	80076fc <HAL_DMA_Start_IT+0x100>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0201 	bic.w	r2, r2, #1
 80076f8:	601a      	str	r2, [r3, #0]
 80076fa:	e007      	b.n	800770c <HAL_DMA_Start_IT+0x110>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 0201 	bic.w	r2, r2, #1
 800770a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	68b9      	ldr	r1, [r7, #8]
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f001 fe6a 	bl	80093ec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a34      	ldr	r2, [pc, #208]	; (80077f0 <HAL_DMA_Start_IT+0x1f4>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d04a      	beq.n	80077b8 <HAL_DMA_Start_IT+0x1bc>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a33      	ldr	r2, [pc, #204]	; (80077f4 <HAL_DMA_Start_IT+0x1f8>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d045      	beq.n	80077b8 <HAL_DMA_Start_IT+0x1bc>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a31      	ldr	r2, [pc, #196]	; (80077f8 <HAL_DMA_Start_IT+0x1fc>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d040      	beq.n	80077b8 <HAL_DMA_Start_IT+0x1bc>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a30      	ldr	r2, [pc, #192]	; (80077fc <HAL_DMA_Start_IT+0x200>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d03b      	beq.n	80077b8 <HAL_DMA_Start_IT+0x1bc>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a2e      	ldr	r2, [pc, #184]	; (8007800 <HAL_DMA_Start_IT+0x204>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d036      	beq.n	80077b8 <HAL_DMA_Start_IT+0x1bc>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a2d      	ldr	r2, [pc, #180]	; (8007804 <HAL_DMA_Start_IT+0x208>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d031      	beq.n	80077b8 <HAL_DMA_Start_IT+0x1bc>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a2b      	ldr	r2, [pc, #172]	; (8007808 <HAL_DMA_Start_IT+0x20c>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d02c      	beq.n	80077b8 <HAL_DMA_Start_IT+0x1bc>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a2a      	ldr	r2, [pc, #168]	; (800780c <HAL_DMA_Start_IT+0x210>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d027      	beq.n	80077b8 <HAL_DMA_Start_IT+0x1bc>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a28      	ldr	r2, [pc, #160]	; (8007810 <HAL_DMA_Start_IT+0x214>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d022      	beq.n	80077b8 <HAL_DMA_Start_IT+0x1bc>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a27      	ldr	r2, [pc, #156]	; (8007814 <HAL_DMA_Start_IT+0x218>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d01d      	beq.n	80077b8 <HAL_DMA_Start_IT+0x1bc>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a25      	ldr	r2, [pc, #148]	; (8007818 <HAL_DMA_Start_IT+0x21c>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d018      	beq.n	80077b8 <HAL_DMA_Start_IT+0x1bc>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a24      	ldr	r2, [pc, #144]	; (800781c <HAL_DMA_Start_IT+0x220>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d013      	beq.n	80077b8 <HAL_DMA_Start_IT+0x1bc>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a22      	ldr	r2, [pc, #136]	; (8007820 <HAL_DMA_Start_IT+0x224>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d00e      	beq.n	80077b8 <HAL_DMA_Start_IT+0x1bc>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a21      	ldr	r2, [pc, #132]	; (8007824 <HAL_DMA_Start_IT+0x228>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d009      	beq.n	80077b8 <HAL_DMA_Start_IT+0x1bc>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a1f      	ldr	r2, [pc, #124]	; (8007828 <HAL_DMA_Start_IT+0x22c>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d004      	beq.n	80077b8 <HAL_DMA_Start_IT+0x1bc>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a1e      	ldr	r2, [pc, #120]	; (800782c <HAL_DMA_Start_IT+0x230>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d101      	bne.n	80077bc <HAL_DMA_Start_IT+0x1c0>
 80077b8:	2301      	movs	r3, #1
 80077ba:	e000      	b.n	80077be <HAL_DMA_Start_IT+0x1c2>
 80077bc:	2300      	movs	r3, #0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d036      	beq.n	8007830 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f023 021e 	bic.w	r2, r3, #30
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f042 0216 	orr.w	r2, r2, #22
 80077d4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d03e      	beq.n	800785c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f042 0208 	orr.w	r2, r2, #8
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	e035      	b.n	800785c <HAL_DMA_Start_IT+0x260>
 80077f0:	40020010 	.word	0x40020010
 80077f4:	40020028 	.word	0x40020028
 80077f8:	40020040 	.word	0x40020040
 80077fc:	40020058 	.word	0x40020058
 8007800:	40020070 	.word	0x40020070
 8007804:	40020088 	.word	0x40020088
 8007808:	400200a0 	.word	0x400200a0
 800780c:	400200b8 	.word	0x400200b8
 8007810:	40020410 	.word	0x40020410
 8007814:	40020428 	.word	0x40020428
 8007818:	40020440 	.word	0x40020440
 800781c:	40020458 	.word	0x40020458
 8007820:	40020470 	.word	0x40020470
 8007824:	40020488 	.word	0x40020488
 8007828:	400204a0 	.word	0x400204a0
 800782c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f023 020e 	bic.w	r2, r3, #14
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f042 020a 	orr.w	r2, r2, #10
 8007842:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007848:	2b00      	cmp	r3, #0
 800784a:	d007      	beq.n	800785c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f042 0204 	orr.w	r2, r2, #4
 800785a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a83      	ldr	r2, [pc, #524]	; (8007a70 <HAL_DMA_Start_IT+0x474>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d072      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a82      	ldr	r2, [pc, #520]	; (8007a74 <HAL_DMA_Start_IT+0x478>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d06d      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a80      	ldr	r2, [pc, #512]	; (8007a78 <HAL_DMA_Start_IT+0x47c>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d068      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a7f      	ldr	r2, [pc, #508]	; (8007a7c <HAL_DMA_Start_IT+0x480>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d063      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a7d      	ldr	r2, [pc, #500]	; (8007a80 <HAL_DMA_Start_IT+0x484>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d05e      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a7c      	ldr	r2, [pc, #496]	; (8007a84 <HAL_DMA_Start_IT+0x488>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d059      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a7a      	ldr	r2, [pc, #488]	; (8007a88 <HAL_DMA_Start_IT+0x48c>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d054      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a79      	ldr	r2, [pc, #484]	; (8007a8c <HAL_DMA_Start_IT+0x490>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d04f      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a77      	ldr	r2, [pc, #476]	; (8007a90 <HAL_DMA_Start_IT+0x494>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d04a      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a76      	ldr	r2, [pc, #472]	; (8007a94 <HAL_DMA_Start_IT+0x498>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d045      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a74      	ldr	r2, [pc, #464]	; (8007a98 <HAL_DMA_Start_IT+0x49c>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d040      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a73      	ldr	r2, [pc, #460]	; (8007a9c <HAL_DMA_Start_IT+0x4a0>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d03b      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a71      	ldr	r2, [pc, #452]	; (8007aa0 <HAL_DMA_Start_IT+0x4a4>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d036      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a70      	ldr	r2, [pc, #448]	; (8007aa4 <HAL_DMA_Start_IT+0x4a8>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d031      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a6e      	ldr	r2, [pc, #440]	; (8007aa8 <HAL_DMA_Start_IT+0x4ac>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d02c      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a6d      	ldr	r2, [pc, #436]	; (8007aac <HAL_DMA_Start_IT+0x4b0>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d027      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a6b      	ldr	r2, [pc, #428]	; (8007ab0 <HAL_DMA_Start_IT+0x4b4>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d022      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a6a      	ldr	r2, [pc, #424]	; (8007ab4 <HAL_DMA_Start_IT+0x4b8>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d01d      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a68      	ldr	r2, [pc, #416]	; (8007ab8 <HAL_DMA_Start_IT+0x4bc>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d018      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a67      	ldr	r2, [pc, #412]	; (8007abc <HAL_DMA_Start_IT+0x4c0>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d013      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a65      	ldr	r2, [pc, #404]	; (8007ac0 <HAL_DMA_Start_IT+0x4c4>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d00e      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a64      	ldr	r2, [pc, #400]	; (8007ac4 <HAL_DMA_Start_IT+0x4c8>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d009      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a62      	ldr	r2, [pc, #392]	; (8007ac8 <HAL_DMA_Start_IT+0x4cc>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d004      	beq.n	800794c <HAL_DMA_Start_IT+0x350>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a61      	ldr	r2, [pc, #388]	; (8007acc <HAL_DMA_Start_IT+0x4d0>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d101      	bne.n	8007950 <HAL_DMA_Start_IT+0x354>
 800794c:	2301      	movs	r3, #1
 800794e:	e000      	b.n	8007952 <HAL_DMA_Start_IT+0x356>
 8007950:	2300      	movs	r3, #0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d01a      	beq.n	800798c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d007      	beq.n	8007974 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800796e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007972:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007978:	2b00      	cmp	r3, #0
 800797a:	d007      	beq.n	800798c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800798a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a37      	ldr	r2, [pc, #220]	; (8007a70 <HAL_DMA_Start_IT+0x474>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d04a      	beq.n	8007a2c <HAL_DMA_Start_IT+0x430>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a36      	ldr	r2, [pc, #216]	; (8007a74 <HAL_DMA_Start_IT+0x478>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d045      	beq.n	8007a2c <HAL_DMA_Start_IT+0x430>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a34      	ldr	r2, [pc, #208]	; (8007a78 <HAL_DMA_Start_IT+0x47c>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d040      	beq.n	8007a2c <HAL_DMA_Start_IT+0x430>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a33      	ldr	r2, [pc, #204]	; (8007a7c <HAL_DMA_Start_IT+0x480>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d03b      	beq.n	8007a2c <HAL_DMA_Start_IT+0x430>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a31      	ldr	r2, [pc, #196]	; (8007a80 <HAL_DMA_Start_IT+0x484>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d036      	beq.n	8007a2c <HAL_DMA_Start_IT+0x430>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a30      	ldr	r2, [pc, #192]	; (8007a84 <HAL_DMA_Start_IT+0x488>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d031      	beq.n	8007a2c <HAL_DMA_Start_IT+0x430>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a2e      	ldr	r2, [pc, #184]	; (8007a88 <HAL_DMA_Start_IT+0x48c>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d02c      	beq.n	8007a2c <HAL_DMA_Start_IT+0x430>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a2d      	ldr	r2, [pc, #180]	; (8007a8c <HAL_DMA_Start_IT+0x490>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d027      	beq.n	8007a2c <HAL_DMA_Start_IT+0x430>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a2b      	ldr	r2, [pc, #172]	; (8007a90 <HAL_DMA_Start_IT+0x494>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d022      	beq.n	8007a2c <HAL_DMA_Start_IT+0x430>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a2a      	ldr	r2, [pc, #168]	; (8007a94 <HAL_DMA_Start_IT+0x498>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d01d      	beq.n	8007a2c <HAL_DMA_Start_IT+0x430>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a28      	ldr	r2, [pc, #160]	; (8007a98 <HAL_DMA_Start_IT+0x49c>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d018      	beq.n	8007a2c <HAL_DMA_Start_IT+0x430>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a27      	ldr	r2, [pc, #156]	; (8007a9c <HAL_DMA_Start_IT+0x4a0>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d013      	beq.n	8007a2c <HAL_DMA_Start_IT+0x430>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a25      	ldr	r2, [pc, #148]	; (8007aa0 <HAL_DMA_Start_IT+0x4a4>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d00e      	beq.n	8007a2c <HAL_DMA_Start_IT+0x430>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a24      	ldr	r2, [pc, #144]	; (8007aa4 <HAL_DMA_Start_IT+0x4a8>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d009      	beq.n	8007a2c <HAL_DMA_Start_IT+0x430>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a22      	ldr	r2, [pc, #136]	; (8007aa8 <HAL_DMA_Start_IT+0x4ac>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d004      	beq.n	8007a2c <HAL_DMA_Start_IT+0x430>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a21      	ldr	r2, [pc, #132]	; (8007aac <HAL_DMA_Start_IT+0x4b0>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d108      	bne.n	8007a3e <HAL_DMA_Start_IT+0x442>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f042 0201 	orr.w	r2, r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	e012      	b.n	8007a64 <HAL_DMA_Start_IT+0x468>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f042 0201 	orr.w	r2, r2, #1
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	e009      	b.n	8007a64 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a56:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	40020010 	.word	0x40020010
 8007a74:	40020028 	.word	0x40020028
 8007a78:	40020040 	.word	0x40020040
 8007a7c:	40020058 	.word	0x40020058
 8007a80:	40020070 	.word	0x40020070
 8007a84:	40020088 	.word	0x40020088
 8007a88:	400200a0 	.word	0x400200a0
 8007a8c:	400200b8 	.word	0x400200b8
 8007a90:	40020410 	.word	0x40020410
 8007a94:	40020428 	.word	0x40020428
 8007a98:	40020440 	.word	0x40020440
 8007a9c:	40020458 	.word	0x40020458
 8007aa0:	40020470 	.word	0x40020470
 8007aa4:	40020488 	.word	0x40020488
 8007aa8:	400204a0 	.word	0x400204a0
 8007aac:	400204b8 	.word	0x400204b8
 8007ab0:	58025408 	.word	0x58025408
 8007ab4:	5802541c 	.word	0x5802541c
 8007ab8:	58025430 	.word	0x58025430
 8007abc:	58025444 	.word	0x58025444
 8007ac0:	58025458 	.word	0x58025458
 8007ac4:	5802546c 	.word	0x5802546c
 8007ac8:	58025480 	.word	0x58025480
 8007acc:	58025494 	.word	0x58025494

08007ad0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007ad8:	f7ff f8f6 	bl	8006cc8 <HAL_GetTick>
 8007adc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e2dc      	b.n	80080a2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d008      	beq.n	8007b06 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2280      	movs	r2, #128	; 0x80
 8007af8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e2cd      	b.n	80080a2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a76      	ldr	r2, [pc, #472]	; (8007ce4 <HAL_DMA_Abort+0x214>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d04a      	beq.n	8007ba6 <HAL_DMA_Abort+0xd6>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a74      	ldr	r2, [pc, #464]	; (8007ce8 <HAL_DMA_Abort+0x218>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d045      	beq.n	8007ba6 <HAL_DMA_Abort+0xd6>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a73      	ldr	r2, [pc, #460]	; (8007cec <HAL_DMA_Abort+0x21c>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d040      	beq.n	8007ba6 <HAL_DMA_Abort+0xd6>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a71      	ldr	r2, [pc, #452]	; (8007cf0 <HAL_DMA_Abort+0x220>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d03b      	beq.n	8007ba6 <HAL_DMA_Abort+0xd6>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a70      	ldr	r2, [pc, #448]	; (8007cf4 <HAL_DMA_Abort+0x224>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d036      	beq.n	8007ba6 <HAL_DMA_Abort+0xd6>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a6e      	ldr	r2, [pc, #440]	; (8007cf8 <HAL_DMA_Abort+0x228>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d031      	beq.n	8007ba6 <HAL_DMA_Abort+0xd6>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a6d      	ldr	r2, [pc, #436]	; (8007cfc <HAL_DMA_Abort+0x22c>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d02c      	beq.n	8007ba6 <HAL_DMA_Abort+0xd6>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a6b      	ldr	r2, [pc, #428]	; (8007d00 <HAL_DMA_Abort+0x230>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d027      	beq.n	8007ba6 <HAL_DMA_Abort+0xd6>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a6a      	ldr	r2, [pc, #424]	; (8007d04 <HAL_DMA_Abort+0x234>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d022      	beq.n	8007ba6 <HAL_DMA_Abort+0xd6>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a68      	ldr	r2, [pc, #416]	; (8007d08 <HAL_DMA_Abort+0x238>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d01d      	beq.n	8007ba6 <HAL_DMA_Abort+0xd6>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a67      	ldr	r2, [pc, #412]	; (8007d0c <HAL_DMA_Abort+0x23c>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d018      	beq.n	8007ba6 <HAL_DMA_Abort+0xd6>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a65      	ldr	r2, [pc, #404]	; (8007d10 <HAL_DMA_Abort+0x240>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d013      	beq.n	8007ba6 <HAL_DMA_Abort+0xd6>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a64      	ldr	r2, [pc, #400]	; (8007d14 <HAL_DMA_Abort+0x244>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d00e      	beq.n	8007ba6 <HAL_DMA_Abort+0xd6>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a62      	ldr	r2, [pc, #392]	; (8007d18 <HAL_DMA_Abort+0x248>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d009      	beq.n	8007ba6 <HAL_DMA_Abort+0xd6>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a61      	ldr	r2, [pc, #388]	; (8007d1c <HAL_DMA_Abort+0x24c>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d004      	beq.n	8007ba6 <HAL_DMA_Abort+0xd6>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a5f      	ldr	r2, [pc, #380]	; (8007d20 <HAL_DMA_Abort+0x250>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d101      	bne.n	8007baa <HAL_DMA_Abort+0xda>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e000      	b.n	8007bac <HAL_DMA_Abort+0xdc>
 8007baa:	2300      	movs	r3, #0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d013      	beq.n	8007bd8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 021e 	bic.w	r2, r2, #30
 8007bbe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	695a      	ldr	r2, [r3, #20]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bce:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	617b      	str	r3, [r7, #20]
 8007bd6:	e00a      	b.n	8007bee <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f022 020e 	bic.w	r2, r2, #14
 8007be6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a3c      	ldr	r2, [pc, #240]	; (8007ce4 <HAL_DMA_Abort+0x214>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d072      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a3a      	ldr	r2, [pc, #232]	; (8007ce8 <HAL_DMA_Abort+0x218>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d06d      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a39      	ldr	r2, [pc, #228]	; (8007cec <HAL_DMA_Abort+0x21c>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d068      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a37      	ldr	r2, [pc, #220]	; (8007cf0 <HAL_DMA_Abort+0x220>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d063      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a36      	ldr	r2, [pc, #216]	; (8007cf4 <HAL_DMA_Abort+0x224>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d05e      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a34      	ldr	r2, [pc, #208]	; (8007cf8 <HAL_DMA_Abort+0x228>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d059      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a33      	ldr	r2, [pc, #204]	; (8007cfc <HAL_DMA_Abort+0x22c>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d054      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a31      	ldr	r2, [pc, #196]	; (8007d00 <HAL_DMA_Abort+0x230>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d04f      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a30      	ldr	r2, [pc, #192]	; (8007d04 <HAL_DMA_Abort+0x234>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d04a      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a2e      	ldr	r2, [pc, #184]	; (8007d08 <HAL_DMA_Abort+0x238>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d045      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a2d      	ldr	r2, [pc, #180]	; (8007d0c <HAL_DMA_Abort+0x23c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d040      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a2b      	ldr	r2, [pc, #172]	; (8007d10 <HAL_DMA_Abort+0x240>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d03b      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a2a      	ldr	r2, [pc, #168]	; (8007d14 <HAL_DMA_Abort+0x244>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d036      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a28      	ldr	r2, [pc, #160]	; (8007d18 <HAL_DMA_Abort+0x248>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d031      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a27      	ldr	r2, [pc, #156]	; (8007d1c <HAL_DMA_Abort+0x24c>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d02c      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a25      	ldr	r2, [pc, #148]	; (8007d20 <HAL_DMA_Abort+0x250>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d027      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a24      	ldr	r2, [pc, #144]	; (8007d24 <HAL_DMA_Abort+0x254>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d022      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a22      	ldr	r2, [pc, #136]	; (8007d28 <HAL_DMA_Abort+0x258>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d01d      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a21      	ldr	r2, [pc, #132]	; (8007d2c <HAL_DMA_Abort+0x25c>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d018      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a1f      	ldr	r2, [pc, #124]	; (8007d30 <HAL_DMA_Abort+0x260>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d013      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a1e      	ldr	r2, [pc, #120]	; (8007d34 <HAL_DMA_Abort+0x264>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d00e      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a1c      	ldr	r2, [pc, #112]	; (8007d38 <HAL_DMA_Abort+0x268>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d009      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a1b      	ldr	r2, [pc, #108]	; (8007d3c <HAL_DMA_Abort+0x26c>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d004      	beq.n	8007cde <HAL_DMA_Abort+0x20e>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a19      	ldr	r2, [pc, #100]	; (8007d40 <HAL_DMA_Abort+0x270>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d132      	bne.n	8007d44 <HAL_DMA_Abort+0x274>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e031      	b.n	8007d46 <HAL_DMA_Abort+0x276>
 8007ce2:	bf00      	nop
 8007ce4:	40020010 	.word	0x40020010
 8007ce8:	40020028 	.word	0x40020028
 8007cec:	40020040 	.word	0x40020040
 8007cf0:	40020058 	.word	0x40020058
 8007cf4:	40020070 	.word	0x40020070
 8007cf8:	40020088 	.word	0x40020088
 8007cfc:	400200a0 	.word	0x400200a0
 8007d00:	400200b8 	.word	0x400200b8
 8007d04:	40020410 	.word	0x40020410
 8007d08:	40020428 	.word	0x40020428
 8007d0c:	40020440 	.word	0x40020440
 8007d10:	40020458 	.word	0x40020458
 8007d14:	40020470 	.word	0x40020470
 8007d18:	40020488 	.word	0x40020488
 8007d1c:	400204a0 	.word	0x400204a0
 8007d20:	400204b8 	.word	0x400204b8
 8007d24:	58025408 	.word	0x58025408
 8007d28:	5802541c 	.word	0x5802541c
 8007d2c:	58025430 	.word	0x58025430
 8007d30:	58025444 	.word	0x58025444
 8007d34:	58025458 	.word	0x58025458
 8007d38:	5802546c 	.word	0x5802546c
 8007d3c:	58025480 	.word	0x58025480
 8007d40:	58025494 	.word	0x58025494
 8007d44:	2300      	movs	r3, #0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d007      	beq.n	8007d5a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d58:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a6d      	ldr	r2, [pc, #436]	; (8007f14 <HAL_DMA_Abort+0x444>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d04a      	beq.n	8007dfa <HAL_DMA_Abort+0x32a>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a6b      	ldr	r2, [pc, #428]	; (8007f18 <HAL_DMA_Abort+0x448>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d045      	beq.n	8007dfa <HAL_DMA_Abort+0x32a>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a6a      	ldr	r2, [pc, #424]	; (8007f1c <HAL_DMA_Abort+0x44c>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d040      	beq.n	8007dfa <HAL_DMA_Abort+0x32a>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a68      	ldr	r2, [pc, #416]	; (8007f20 <HAL_DMA_Abort+0x450>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d03b      	beq.n	8007dfa <HAL_DMA_Abort+0x32a>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a67      	ldr	r2, [pc, #412]	; (8007f24 <HAL_DMA_Abort+0x454>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d036      	beq.n	8007dfa <HAL_DMA_Abort+0x32a>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a65      	ldr	r2, [pc, #404]	; (8007f28 <HAL_DMA_Abort+0x458>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d031      	beq.n	8007dfa <HAL_DMA_Abort+0x32a>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a64      	ldr	r2, [pc, #400]	; (8007f2c <HAL_DMA_Abort+0x45c>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d02c      	beq.n	8007dfa <HAL_DMA_Abort+0x32a>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a62      	ldr	r2, [pc, #392]	; (8007f30 <HAL_DMA_Abort+0x460>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d027      	beq.n	8007dfa <HAL_DMA_Abort+0x32a>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a61      	ldr	r2, [pc, #388]	; (8007f34 <HAL_DMA_Abort+0x464>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d022      	beq.n	8007dfa <HAL_DMA_Abort+0x32a>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a5f      	ldr	r2, [pc, #380]	; (8007f38 <HAL_DMA_Abort+0x468>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d01d      	beq.n	8007dfa <HAL_DMA_Abort+0x32a>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a5e      	ldr	r2, [pc, #376]	; (8007f3c <HAL_DMA_Abort+0x46c>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d018      	beq.n	8007dfa <HAL_DMA_Abort+0x32a>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a5c      	ldr	r2, [pc, #368]	; (8007f40 <HAL_DMA_Abort+0x470>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d013      	beq.n	8007dfa <HAL_DMA_Abort+0x32a>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a5b      	ldr	r2, [pc, #364]	; (8007f44 <HAL_DMA_Abort+0x474>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d00e      	beq.n	8007dfa <HAL_DMA_Abort+0x32a>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a59      	ldr	r2, [pc, #356]	; (8007f48 <HAL_DMA_Abort+0x478>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d009      	beq.n	8007dfa <HAL_DMA_Abort+0x32a>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a58      	ldr	r2, [pc, #352]	; (8007f4c <HAL_DMA_Abort+0x47c>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d004      	beq.n	8007dfa <HAL_DMA_Abort+0x32a>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a56      	ldr	r2, [pc, #344]	; (8007f50 <HAL_DMA_Abort+0x480>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d108      	bne.n	8007e0c <HAL_DMA_Abort+0x33c>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 0201 	bic.w	r2, r2, #1
 8007e08:	601a      	str	r2, [r3, #0]
 8007e0a:	e007      	b.n	8007e1c <HAL_DMA_Abort+0x34c>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f022 0201 	bic.w	r2, r2, #1
 8007e1a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007e1c:	e013      	b.n	8007e46 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e1e:	f7fe ff53 	bl	8006cc8 <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	2b05      	cmp	r3, #5
 8007e2a:	d90c      	bls.n	8007e46 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2220      	movs	r2, #32
 8007e30:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2203      	movs	r2, #3
 8007e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e12d      	b.n	80080a2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1e5      	bne.n	8007e1e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a2f      	ldr	r2, [pc, #188]	; (8007f14 <HAL_DMA_Abort+0x444>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d04a      	beq.n	8007ef2 <HAL_DMA_Abort+0x422>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a2d      	ldr	r2, [pc, #180]	; (8007f18 <HAL_DMA_Abort+0x448>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d045      	beq.n	8007ef2 <HAL_DMA_Abort+0x422>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a2c      	ldr	r2, [pc, #176]	; (8007f1c <HAL_DMA_Abort+0x44c>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d040      	beq.n	8007ef2 <HAL_DMA_Abort+0x422>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a2a      	ldr	r2, [pc, #168]	; (8007f20 <HAL_DMA_Abort+0x450>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d03b      	beq.n	8007ef2 <HAL_DMA_Abort+0x422>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a29      	ldr	r2, [pc, #164]	; (8007f24 <HAL_DMA_Abort+0x454>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d036      	beq.n	8007ef2 <HAL_DMA_Abort+0x422>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a27      	ldr	r2, [pc, #156]	; (8007f28 <HAL_DMA_Abort+0x458>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d031      	beq.n	8007ef2 <HAL_DMA_Abort+0x422>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a26      	ldr	r2, [pc, #152]	; (8007f2c <HAL_DMA_Abort+0x45c>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d02c      	beq.n	8007ef2 <HAL_DMA_Abort+0x422>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a24      	ldr	r2, [pc, #144]	; (8007f30 <HAL_DMA_Abort+0x460>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d027      	beq.n	8007ef2 <HAL_DMA_Abort+0x422>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a23      	ldr	r2, [pc, #140]	; (8007f34 <HAL_DMA_Abort+0x464>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d022      	beq.n	8007ef2 <HAL_DMA_Abort+0x422>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a21      	ldr	r2, [pc, #132]	; (8007f38 <HAL_DMA_Abort+0x468>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d01d      	beq.n	8007ef2 <HAL_DMA_Abort+0x422>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a20      	ldr	r2, [pc, #128]	; (8007f3c <HAL_DMA_Abort+0x46c>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d018      	beq.n	8007ef2 <HAL_DMA_Abort+0x422>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a1e      	ldr	r2, [pc, #120]	; (8007f40 <HAL_DMA_Abort+0x470>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d013      	beq.n	8007ef2 <HAL_DMA_Abort+0x422>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a1d      	ldr	r2, [pc, #116]	; (8007f44 <HAL_DMA_Abort+0x474>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d00e      	beq.n	8007ef2 <HAL_DMA_Abort+0x422>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a1b      	ldr	r2, [pc, #108]	; (8007f48 <HAL_DMA_Abort+0x478>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d009      	beq.n	8007ef2 <HAL_DMA_Abort+0x422>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a1a      	ldr	r2, [pc, #104]	; (8007f4c <HAL_DMA_Abort+0x47c>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d004      	beq.n	8007ef2 <HAL_DMA_Abort+0x422>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a18      	ldr	r2, [pc, #96]	; (8007f50 <HAL_DMA_Abort+0x480>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d101      	bne.n	8007ef6 <HAL_DMA_Abort+0x426>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e000      	b.n	8007ef8 <HAL_DMA_Abort+0x428>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d02b      	beq.n	8007f54 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f00:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f06:	f003 031f 	and.w	r3, r3, #31
 8007f0a:	223f      	movs	r2, #63	; 0x3f
 8007f0c:	409a      	lsls	r2, r3
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	609a      	str	r2, [r3, #8]
 8007f12:	e02a      	b.n	8007f6a <HAL_DMA_Abort+0x49a>
 8007f14:	40020010 	.word	0x40020010
 8007f18:	40020028 	.word	0x40020028
 8007f1c:	40020040 	.word	0x40020040
 8007f20:	40020058 	.word	0x40020058
 8007f24:	40020070 	.word	0x40020070
 8007f28:	40020088 	.word	0x40020088
 8007f2c:	400200a0 	.word	0x400200a0
 8007f30:	400200b8 	.word	0x400200b8
 8007f34:	40020410 	.word	0x40020410
 8007f38:	40020428 	.word	0x40020428
 8007f3c:	40020440 	.word	0x40020440
 8007f40:	40020458 	.word	0x40020458
 8007f44:	40020470 	.word	0x40020470
 8007f48:	40020488 	.word	0x40020488
 8007f4c:	400204a0 	.word	0x400204a0
 8007f50:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f58:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f5e:	f003 031f 	and.w	r3, r3, #31
 8007f62:	2201      	movs	r2, #1
 8007f64:	409a      	lsls	r2, r3
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a4f      	ldr	r2, [pc, #316]	; (80080ac <HAL_DMA_Abort+0x5dc>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d072      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a4d      	ldr	r2, [pc, #308]	; (80080b0 <HAL_DMA_Abort+0x5e0>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d06d      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a4c      	ldr	r2, [pc, #304]	; (80080b4 <HAL_DMA_Abort+0x5e4>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d068      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a4a      	ldr	r2, [pc, #296]	; (80080b8 <HAL_DMA_Abort+0x5e8>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d063      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a49      	ldr	r2, [pc, #292]	; (80080bc <HAL_DMA_Abort+0x5ec>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d05e      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a47      	ldr	r2, [pc, #284]	; (80080c0 <HAL_DMA_Abort+0x5f0>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d059      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a46      	ldr	r2, [pc, #280]	; (80080c4 <HAL_DMA_Abort+0x5f4>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d054      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a44      	ldr	r2, [pc, #272]	; (80080c8 <HAL_DMA_Abort+0x5f8>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d04f      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a43      	ldr	r2, [pc, #268]	; (80080cc <HAL_DMA_Abort+0x5fc>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d04a      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a41      	ldr	r2, [pc, #260]	; (80080d0 <HAL_DMA_Abort+0x600>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d045      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a40      	ldr	r2, [pc, #256]	; (80080d4 <HAL_DMA_Abort+0x604>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d040      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a3e      	ldr	r2, [pc, #248]	; (80080d8 <HAL_DMA_Abort+0x608>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d03b      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a3d      	ldr	r2, [pc, #244]	; (80080dc <HAL_DMA_Abort+0x60c>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d036      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a3b      	ldr	r2, [pc, #236]	; (80080e0 <HAL_DMA_Abort+0x610>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d031      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a3a      	ldr	r2, [pc, #232]	; (80080e4 <HAL_DMA_Abort+0x614>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d02c      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a38      	ldr	r2, [pc, #224]	; (80080e8 <HAL_DMA_Abort+0x618>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d027      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a37      	ldr	r2, [pc, #220]	; (80080ec <HAL_DMA_Abort+0x61c>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d022      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a35      	ldr	r2, [pc, #212]	; (80080f0 <HAL_DMA_Abort+0x620>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d01d      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a34      	ldr	r2, [pc, #208]	; (80080f4 <HAL_DMA_Abort+0x624>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d018      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a32      	ldr	r2, [pc, #200]	; (80080f8 <HAL_DMA_Abort+0x628>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d013      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a31      	ldr	r2, [pc, #196]	; (80080fc <HAL_DMA_Abort+0x62c>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d00e      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a2f      	ldr	r2, [pc, #188]	; (8008100 <HAL_DMA_Abort+0x630>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d009      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a2e      	ldr	r2, [pc, #184]	; (8008104 <HAL_DMA_Abort+0x634>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d004      	beq.n	800805a <HAL_DMA_Abort+0x58a>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a2c      	ldr	r2, [pc, #176]	; (8008108 <HAL_DMA_Abort+0x638>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d101      	bne.n	800805e <HAL_DMA_Abort+0x58e>
 800805a:	2301      	movs	r3, #1
 800805c:	e000      	b.n	8008060 <HAL_DMA_Abort+0x590>
 800805e:	2300      	movs	r3, #0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d015      	beq.n	8008090 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800806c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00c      	beq.n	8008090 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008080:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008084:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800808e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3718      	adds	r7, #24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	40020010 	.word	0x40020010
 80080b0:	40020028 	.word	0x40020028
 80080b4:	40020040 	.word	0x40020040
 80080b8:	40020058 	.word	0x40020058
 80080bc:	40020070 	.word	0x40020070
 80080c0:	40020088 	.word	0x40020088
 80080c4:	400200a0 	.word	0x400200a0
 80080c8:	400200b8 	.word	0x400200b8
 80080cc:	40020410 	.word	0x40020410
 80080d0:	40020428 	.word	0x40020428
 80080d4:	40020440 	.word	0x40020440
 80080d8:	40020458 	.word	0x40020458
 80080dc:	40020470 	.word	0x40020470
 80080e0:	40020488 	.word	0x40020488
 80080e4:	400204a0 	.word	0x400204a0
 80080e8:	400204b8 	.word	0x400204b8
 80080ec:	58025408 	.word	0x58025408
 80080f0:	5802541c 	.word	0x5802541c
 80080f4:	58025430 	.word	0x58025430
 80080f8:	58025444 	.word	0x58025444
 80080fc:	58025458 	.word	0x58025458
 8008100:	5802546c 	.word	0x5802546c
 8008104:	58025480 	.word	0x58025480
 8008108:	58025494 	.word	0x58025494

0800810c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d101      	bne.n	800811e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e237      	b.n	800858e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b02      	cmp	r3, #2
 8008128:	d004      	beq.n	8008134 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2280      	movs	r2, #128	; 0x80
 800812e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e22c      	b.n	800858e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a5c      	ldr	r2, [pc, #368]	; (80082ac <HAL_DMA_Abort_IT+0x1a0>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d04a      	beq.n	80081d4 <HAL_DMA_Abort_IT+0xc8>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a5b      	ldr	r2, [pc, #364]	; (80082b0 <HAL_DMA_Abort_IT+0x1a4>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d045      	beq.n	80081d4 <HAL_DMA_Abort_IT+0xc8>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a59      	ldr	r2, [pc, #356]	; (80082b4 <HAL_DMA_Abort_IT+0x1a8>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d040      	beq.n	80081d4 <HAL_DMA_Abort_IT+0xc8>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a58      	ldr	r2, [pc, #352]	; (80082b8 <HAL_DMA_Abort_IT+0x1ac>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d03b      	beq.n	80081d4 <HAL_DMA_Abort_IT+0xc8>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a56      	ldr	r2, [pc, #344]	; (80082bc <HAL_DMA_Abort_IT+0x1b0>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d036      	beq.n	80081d4 <HAL_DMA_Abort_IT+0xc8>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a55      	ldr	r2, [pc, #340]	; (80082c0 <HAL_DMA_Abort_IT+0x1b4>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d031      	beq.n	80081d4 <HAL_DMA_Abort_IT+0xc8>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a53      	ldr	r2, [pc, #332]	; (80082c4 <HAL_DMA_Abort_IT+0x1b8>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d02c      	beq.n	80081d4 <HAL_DMA_Abort_IT+0xc8>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a52      	ldr	r2, [pc, #328]	; (80082c8 <HAL_DMA_Abort_IT+0x1bc>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d027      	beq.n	80081d4 <HAL_DMA_Abort_IT+0xc8>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a50      	ldr	r2, [pc, #320]	; (80082cc <HAL_DMA_Abort_IT+0x1c0>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d022      	beq.n	80081d4 <HAL_DMA_Abort_IT+0xc8>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a4f      	ldr	r2, [pc, #316]	; (80082d0 <HAL_DMA_Abort_IT+0x1c4>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d01d      	beq.n	80081d4 <HAL_DMA_Abort_IT+0xc8>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a4d      	ldr	r2, [pc, #308]	; (80082d4 <HAL_DMA_Abort_IT+0x1c8>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d018      	beq.n	80081d4 <HAL_DMA_Abort_IT+0xc8>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a4c      	ldr	r2, [pc, #304]	; (80082d8 <HAL_DMA_Abort_IT+0x1cc>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d013      	beq.n	80081d4 <HAL_DMA_Abort_IT+0xc8>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a4a      	ldr	r2, [pc, #296]	; (80082dc <HAL_DMA_Abort_IT+0x1d0>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d00e      	beq.n	80081d4 <HAL_DMA_Abort_IT+0xc8>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a49      	ldr	r2, [pc, #292]	; (80082e0 <HAL_DMA_Abort_IT+0x1d4>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d009      	beq.n	80081d4 <HAL_DMA_Abort_IT+0xc8>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a47      	ldr	r2, [pc, #284]	; (80082e4 <HAL_DMA_Abort_IT+0x1d8>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d004      	beq.n	80081d4 <HAL_DMA_Abort_IT+0xc8>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a46      	ldr	r2, [pc, #280]	; (80082e8 <HAL_DMA_Abort_IT+0x1dc>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d101      	bne.n	80081d8 <HAL_DMA_Abort_IT+0xcc>
 80081d4:	2301      	movs	r3, #1
 80081d6:	e000      	b.n	80081da <HAL_DMA_Abort_IT+0xce>
 80081d8:	2300      	movs	r3, #0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 8086 	beq.w	80082ec <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2204      	movs	r2, #4
 80081e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a2f      	ldr	r2, [pc, #188]	; (80082ac <HAL_DMA_Abort_IT+0x1a0>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d04a      	beq.n	8008288 <HAL_DMA_Abort_IT+0x17c>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a2e      	ldr	r2, [pc, #184]	; (80082b0 <HAL_DMA_Abort_IT+0x1a4>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d045      	beq.n	8008288 <HAL_DMA_Abort_IT+0x17c>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a2c      	ldr	r2, [pc, #176]	; (80082b4 <HAL_DMA_Abort_IT+0x1a8>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d040      	beq.n	8008288 <HAL_DMA_Abort_IT+0x17c>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a2b      	ldr	r2, [pc, #172]	; (80082b8 <HAL_DMA_Abort_IT+0x1ac>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d03b      	beq.n	8008288 <HAL_DMA_Abort_IT+0x17c>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a29      	ldr	r2, [pc, #164]	; (80082bc <HAL_DMA_Abort_IT+0x1b0>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d036      	beq.n	8008288 <HAL_DMA_Abort_IT+0x17c>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a28      	ldr	r2, [pc, #160]	; (80082c0 <HAL_DMA_Abort_IT+0x1b4>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d031      	beq.n	8008288 <HAL_DMA_Abort_IT+0x17c>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a26      	ldr	r2, [pc, #152]	; (80082c4 <HAL_DMA_Abort_IT+0x1b8>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d02c      	beq.n	8008288 <HAL_DMA_Abort_IT+0x17c>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a25      	ldr	r2, [pc, #148]	; (80082c8 <HAL_DMA_Abort_IT+0x1bc>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d027      	beq.n	8008288 <HAL_DMA_Abort_IT+0x17c>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a23      	ldr	r2, [pc, #140]	; (80082cc <HAL_DMA_Abort_IT+0x1c0>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d022      	beq.n	8008288 <HAL_DMA_Abort_IT+0x17c>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a22      	ldr	r2, [pc, #136]	; (80082d0 <HAL_DMA_Abort_IT+0x1c4>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d01d      	beq.n	8008288 <HAL_DMA_Abort_IT+0x17c>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a20      	ldr	r2, [pc, #128]	; (80082d4 <HAL_DMA_Abort_IT+0x1c8>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d018      	beq.n	8008288 <HAL_DMA_Abort_IT+0x17c>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a1f      	ldr	r2, [pc, #124]	; (80082d8 <HAL_DMA_Abort_IT+0x1cc>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d013      	beq.n	8008288 <HAL_DMA_Abort_IT+0x17c>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a1d      	ldr	r2, [pc, #116]	; (80082dc <HAL_DMA_Abort_IT+0x1d0>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d00e      	beq.n	8008288 <HAL_DMA_Abort_IT+0x17c>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a1c      	ldr	r2, [pc, #112]	; (80082e0 <HAL_DMA_Abort_IT+0x1d4>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d009      	beq.n	8008288 <HAL_DMA_Abort_IT+0x17c>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a1a      	ldr	r2, [pc, #104]	; (80082e4 <HAL_DMA_Abort_IT+0x1d8>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d004      	beq.n	8008288 <HAL_DMA_Abort_IT+0x17c>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a19      	ldr	r2, [pc, #100]	; (80082e8 <HAL_DMA_Abort_IT+0x1dc>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d108      	bne.n	800829a <HAL_DMA_Abort_IT+0x18e>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f022 0201 	bic.w	r2, r2, #1
 8008296:	601a      	str	r2, [r3, #0]
 8008298:	e178      	b.n	800858c <HAL_DMA_Abort_IT+0x480>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f022 0201 	bic.w	r2, r2, #1
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	e16f      	b.n	800858c <HAL_DMA_Abort_IT+0x480>
 80082ac:	40020010 	.word	0x40020010
 80082b0:	40020028 	.word	0x40020028
 80082b4:	40020040 	.word	0x40020040
 80082b8:	40020058 	.word	0x40020058
 80082bc:	40020070 	.word	0x40020070
 80082c0:	40020088 	.word	0x40020088
 80082c4:	400200a0 	.word	0x400200a0
 80082c8:	400200b8 	.word	0x400200b8
 80082cc:	40020410 	.word	0x40020410
 80082d0:	40020428 	.word	0x40020428
 80082d4:	40020440 	.word	0x40020440
 80082d8:	40020458 	.word	0x40020458
 80082dc:	40020470 	.word	0x40020470
 80082e0:	40020488 	.word	0x40020488
 80082e4:	400204a0 	.word	0x400204a0
 80082e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f022 020e 	bic.w	r2, r2, #14
 80082fa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a6c      	ldr	r2, [pc, #432]	; (80084b4 <HAL_DMA_Abort_IT+0x3a8>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d04a      	beq.n	800839c <HAL_DMA_Abort_IT+0x290>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a6b      	ldr	r2, [pc, #428]	; (80084b8 <HAL_DMA_Abort_IT+0x3ac>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d045      	beq.n	800839c <HAL_DMA_Abort_IT+0x290>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a69      	ldr	r2, [pc, #420]	; (80084bc <HAL_DMA_Abort_IT+0x3b0>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d040      	beq.n	800839c <HAL_DMA_Abort_IT+0x290>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a68      	ldr	r2, [pc, #416]	; (80084c0 <HAL_DMA_Abort_IT+0x3b4>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d03b      	beq.n	800839c <HAL_DMA_Abort_IT+0x290>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a66      	ldr	r2, [pc, #408]	; (80084c4 <HAL_DMA_Abort_IT+0x3b8>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d036      	beq.n	800839c <HAL_DMA_Abort_IT+0x290>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a65      	ldr	r2, [pc, #404]	; (80084c8 <HAL_DMA_Abort_IT+0x3bc>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d031      	beq.n	800839c <HAL_DMA_Abort_IT+0x290>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a63      	ldr	r2, [pc, #396]	; (80084cc <HAL_DMA_Abort_IT+0x3c0>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d02c      	beq.n	800839c <HAL_DMA_Abort_IT+0x290>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a62      	ldr	r2, [pc, #392]	; (80084d0 <HAL_DMA_Abort_IT+0x3c4>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d027      	beq.n	800839c <HAL_DMA_Abort_IT+0x290>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a60      	ldr	r2, [pc, #384]	; (80084d4 <HAL_DMA_Abort_IT+0x3c8>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d022      	beq.n	800839c <HAL_DMA_Abort_IT+0x290>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a5f      	ldr	r2, [pc, #380]	; (80084d8 <HAL_DMA_Abort_IT+0x3cc>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d01d      	beq.n	800839c <HAL_DMA_Abort_IT+0x290>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a5d      	ldr	r2, [pc, #372]	; (80084dc <HAL_DMA_Abort_IT+0x3d0>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d018      	beq.n	800839c <HAL_DMA_Abort_IT+0x290>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a5c      	ldr	r2, [pc, #368]	; (80084e0 <HAL_DMA_Abort_IT+0x3d4>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d013      	beq.n	800839c <HAL_DMA_Abort_IT+0x290>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a5a      	ldr	r2, [pc, #360]	; (80084e4 <HAL_DMA_Abort_IT+0x3d8>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d00e      	beq.n	800839c <HAL_DMA_Abort_IT+0x290>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a59      	ldr	r2, [pc, #356]	; (80084e8 <HAL_DMA_Abort_IT+0x3dc>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d009      	beq.n	800839c <HAL_DMA_Abort_IT+0x290>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a57      	ldr	r2, [pc, #348]	; (80084ec <HAL_DMA_Abort_IT+0x3e0>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d004      	beq.n	800839c <HAL_DMA_Abort_IT+0x290>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a56      	ldr	r2, [pc, #344]	; (80084f0 <HAL_DMA_Abort_IT+0x3e4>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d108      	bne.n	80083ae <HAL_DMA_Abort_IT+0x2a2>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f022 0201 	bic.w	r2, r2, #1
 80083aa:	601a      	str	r2, [r3, #0]
 80083ac:	e007      	b.n	80083be <HAL_DMA_Abort_IT+0x2b2>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f022 0201 	bic.w	r2, r2, #1
 80083bc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a3c      	ldr	r2, [pc, #240]	; (80084b4 <HAL_DMA_Abort_IT+0x3a8>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d072      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a3a      	ldr	r2, [pc, #232]	; (80084b8 <HAL_DMA_Abort_IT+0x3ac>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d06d      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a39      	ldr	r2, [pc, #228]	; (80084bc <HAL_DMA_Abort_IT+0x3b0>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d068      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a37      	ldr	r2, [pc, #220]	; (80084c0 <HAL_DMA_Abort_IT+0x3b4>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d063      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a36      	ldr	r2, [pc, #216]	; (80084c4 <HAL_DMA_Abort_IT+0x3b8>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d05e      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a34      	ldr	r2, [pc, #208]	; (80084c8 <HAL_DMA_Abort_IT+0x3bc>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d059      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a33      	ldr	r2, [pc, #204]	; (80084cc <HAL_DMA_Abort_IT+0x3c0>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d054      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a31      	ldr	r2, [pc, #196]	; (80084d0 <HAL_DMA_Abort_IT+0x3c4>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d04f      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a30      	ldr	r2, [pc, #192]	; (80084d4 <HAL_DMA_Abort_IT+0x3c8>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d04a      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a2e      	ldr	r2, [pc, #184]	; (80084d8 <HAL_DMA_Abort_IT+0x3cc>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d045      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a2d      	ldr	r2, [pc, #180]	; (80084dc <HAL_DMA_Abort_IT+0x3d0>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d040      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a2b      	ldr	r2, [pc, #172]	; (80084e0 <HAL_DMA_Abort_IT+0x3d4>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d03b      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a2a      	ldr	r2, [pc, #168]	; (80084e4 <HAL_DMA_Abort_IT+0x3d8>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d036      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a28      	ldr	r2, [pc, #160]	; (80084e8 <HAL_DMA_Abort_IT+0x3dc>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d031      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a27      	ldr	r2, [pc, #156]	; (80084ec <HAL_DMA_Abort_IT+0x3e0>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d02c      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a25      	ldr	r2, [pc, #148]	; (80084f0 <HAL_DMA_Abort_IT+0x3e4>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d027      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a24      	ldr	r2, [pc, #144]	; (80084f4 <HAL_DMA_Abort_IT+0x3e8>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d022      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a22      	ldr	r2, [pc, #136]	; (80084f8 <HAL_DMA_Abort_IT+0x3ec>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d01d      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a21      	ldr	r2, [pc, #132]	; (80084fc <HAL_DMA_Abort_IT+0x3f0>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d018      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a1f      	ldr	r2, [pc, #124]	; (8008500 <HAL_DMA_Abort_IT+0x3f4>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d013      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a1e      	ldr	r2, [pc, #120]	; (8008504 <HAL_DMA_Abort_IT+0x3f8>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d00e      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a1c      	ldr	r2, [pc, #112]	; (8008508 <HAL_DMA_Abort_IT+0x3fc>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d009      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a1b      	ldr	r2, [pc, #108]	; (800850c <HAL_DMA_Abort_IT+0x400>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d004      	beq.n	80084ae <HAL_DMA_Abort_IT+0x3a2>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a19      	ldr	r2, [pc, #100]	; (8008510 <HAL_DMA_Abort_IT+0x404>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d132      	bne.n	8008514 <HAL_DMA_Abort_IT+0x408>
 80084ae:	2301      	movs	r3, #1
 80084b0:	e031      	b.n	8008516 <HAL_DMA_Abort_IT+0x40a>
 80084b2:	bf00      	nop
 80084b4:	40020010 	.word	0x40020010
 80084b8:	40020028 	.word	0x40020028
 80084bc:	40020040 	.word	0x40020040
 80084c0:	40020058 	.word	0x40020058
 80084c4:	40020070 	.word	0x40020070
 80084c8:	40020088 	.word	0x40020088
 80084cc:	400200a0 	.word	0x400200a0
 80084d0:	400200b8 	.word	0x400200b8
 80084d4:	40020410 	.word	0x40020410
 80084d8:	40020428 	.word	0x40020428
 80084dc:	40020440 	.word	0x40020440
 80084e0:	40020458 	.word	0x40020458
 80084e4:	40020470 	.word	0x40020470
 80084e8:	40020488 	.word	0x40020488
 80084ec:	400204a0 	.word	0x400204a0
 80084f0:	400204b8 	.word	0x400204b8
 80084f4:	58025408 	.word	0x58025408
 80084f8:	5802541c 	.word	0x5802541c
 80084fc:	58025430 	.word	0x58025430
 8008500:	58025444 	.word	0x58025444
 8008504:	58025458 	.word	0x58025458
 8008508:	5802546c 	.word	0x5802546c
 800850c:	58025480 	.word	0x58025480
 8008510:	58025494 	.word	0x58025494
 8008514:	2300      	movs	r3, #0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d028      	beq.n	800856c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008524:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008528:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800852e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008534:	f003 031f 	and.w	r3, r3, #31
 8008538:	2201      	movs	r2, #1
 800853a:	409a      	lsls	r2, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008548:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00c      	beq.n	800856c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800855c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008560:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800856a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008580:	2b00      	cmp	r3, #0
 8008582:	d003      	beq.n	800858c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop

08008598 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b08a      	sub	sp, #40	; 0x28
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80085a0:	2300      	movs	r3, #0
 80085a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80085a4:	4b67      	ldr	r3, [pc, #412]	; (8008744 <HAL_DMA_IRQHandler+0x1ac>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a67      	ldr	r2, [pc, #412]	; (8008748 <HAL_DMA_IRQHandler+0x1b0>)
 80085aa:	fba2 2303 	umull	r2, r3, r2, r3
 80085ae:	0a9b      	lsrs	r3, r3, #10
 80085b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a5f      	ldr	r2, [pc, #380]	; (800874c <HAL_DMA_IRQHandler+0x1b4>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d04a      	beq.n	800866a <HAL_DMA_IRQHandler+0xd2>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a5d      	ldr	r2, [pc, #372]	; (8008750 <HAL_DMA_IRQHandler+0x1b8>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d045      	beq.n	800866a <HAL_DMA_IRQHandler+0xd2>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a5c      	ldr	r2, [pc, #368]	; (8008754 <HAL_DMA_IRQHandler+0x1bc>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d040      	beq.n	800866a <HAL_DMA_IRQHandler+0xd2>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a5a      	ldr	r2, [pc, #360]	; (8008758 <HAL_DMA_IRQHandler+0x1c0>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d03b      	beq.n	800866a <HAL_DMA_IRQHandler+0xd2>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a59      	ldr	r2, [pc, #356]	; (800875c <HAL_DMA_IRQHandler+0x1c4>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d036      	beq.n	800866a <HAL_DMA_IRQHandler+0xd2>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a57      	ldr	r2, [pc, #348]	; (8008760 <HAL_DMA_IRQHandler+0x1c8>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d031      	beq.n	800866a <HAL_DMA_IRQHandler+0xd2>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a56      	ldr	r2, [pc, #344]	; (8008764 <HAL_DMA_IRQHandler+0x1cc>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d02c      	beq.n	800866a <HAL_DMA_IRQHandler+0xd2>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a54      	ldr	r2, [pc, #336]	; (8008768 <HAL_DMA_IRQHandler+0x1d0>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d027      	beq.n	800866a <HAL_DMA_IRQHandler+0xd2>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a53      	ldr	r2, [pc, #332]	; (800876c <HAL_DMA_IRQHandler+0x1d4>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d022      	beq.n	800866a <HAL_DMA_IRQHandler+0xd2>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a51      	ldr	r2, [pc, #324]	; (8008770 <HAL_DMA_IRQHandler+0x1d8>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d01d      	beq.n	800866a <HAL_DMA_IRQHandler+0xd2>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a50      	ldr	r2, [pc, #320]	; (8008774 <HAL_DMA_IRQHandler+0x1dc>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d018      	beq.n	800866a <HAL_DMA_IRQHandler+0xd2>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a4e      	ldr	r2, [pc, #312]	; (8008778 <HAL_DMA_IRQHandler+0x1e0>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d013      	beq.n	800866a <HAL_DMA_IRQHandler+0xd2>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a4d      	ldr	r2, [pc, #308]	; (800877c <HAL_DMA_IRQHandler+0x1e4>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d00e      	beq.n	800866a <HAL_DMA_IRQHandler+0xd2>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a4b      	ldr	r2, [pc, #300]	; (8008780 <HAL_DMA_IRQHandler+0x1e8>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d009      	beq.n	800866a <HAL_DMA_IRQHandler+0xd2>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a4a      	ldr	r2, [pc, #296]	; (8008784 <HAL_DMA_IRQHandler+0x1ec>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d004      	beq.n	800866a <HAL_DMA_IRQHandler+0xd2>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a48      	ldr	r2, [pc, #288]	; (8008788 <HAL_DMA_IRQHandler+0x1f0>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d101      	bne.n	800866e <HAL_DMA_IRQHandler+0xd6>
 800866a:	2301      	movs	r3, #1
 800866c:	e000      	b.n	8008670 <HAL_DMA_IRQHandler+0xd8>
 800866e:	2300      	movs	r3, #0
 8008670:	2b00      	cmp	r3, #0
 8008672:	f000 842b 	beq.w	8008ecc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800867a:	f003 031f 	and.w	r3, r3, #31
 800867e:	2208      	movs	r2, #8
 8008680:	409a      	lsls	r2, r3
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	4013      	ands	r3, r2
 8008686:	2b00      	cmp	r3, #0
 8008688:	f000 80a2 	beq.w	80087d0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a2e      	ldr	r2, [pc, #184]	; (800874c <HAL_DMA_IRQHandler+0x1b4>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d04a      	beq.n	800872c <HAL_DMA_IRQHandler+0x194>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a2d      	ldr	r2, [pc, #180]	; (8008750 <HAL_DMA_IRQHandler+0x1b8>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d045      	beq.n	800872c <HAL_DMA_IRQHandler+0x194>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a2b      	ldr	r2, [pc, #172]	; (8008754 <HAL_DMA_IRQHandler+0x1bc>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d040      	beq.n	800872c <HAL_DMA_IRQHandler+0x194>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a2a      	ldr	r2, [pc, #168]	; (8008758 <HAL_DMA_IRQHandler+0x1c0>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d03b      	beq.n	800872c <HAL_DMA_IRQHandler+0x194>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a28      	ldr	r2, [pc, #160]	; (800875c <HAL_DMA_IRQHandler+0x1c4>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d036      	beq.n	800872c <HAL_DMA_IRQHandler+0x194>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a27      	ldr	r2, [pc, #156]	; (8008760 <HAL_DMA_IRQHandler+0x1c8>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d031      	beq.n	800872c <HAL_DMA_IRQHandler+0x194>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a25      	ldr	r2, [pc, #148]	; (8008764 <HAL_DMA_IRQHandler+0x1cc>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d02c      	beq.n	800872c <HAL_DMA_IRQHandler+0x194>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a24      	ldr	r2, [pc, #144]	; (8008768 <HAL_DMA_IRQHandler+0x1d0>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d027      	beq.n	800872c <HAL_DMA_IRQHandler+0x194>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a22      	ldr	r2, [pc, #136]	; (800876c <HAL_DMA_IRQHandler+0x1d4>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d022      	beq.n	800872c <HAL_DMA_IRQHandler+0x194>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a21      	ldr	r2, [pc, #132]	; (8008770 <HAL_DMA_IRQHandler+0x1d8>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d01d      	beq.n	800872c <HAL_DMA_IRQHandler+0x194>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a1f      	ldr	r2, [pc, #124]	; (8008774 <HAL_DMA_IRQHandler+0x1dc>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d018      	beq.n	800872c <HAL_DMA_IRQHandler+0x194>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a1e      	ldr	r2, [pc, #120]	; (8008778 <HAL_DMA_IRQHandler+0x1e0>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d013      	beq.n	800872c <HAL_DMA_IRQHandler+0x194>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a1c      	ldr	r2, [pc, #112]	; (800877c <HAL_DMA_IRQHandler+0x1e4>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d00e      	beq.n	800872c <HAL_DMA_IRQHandler+0x194>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a1b      	ldr	r2, [pc, #108]	; (8008780 <HAL_DMA_IRQHandler+0x1e8>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d009      	beq.n	800872c <HAL_DMA_IRQHandler+0x194>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a19      	ldr	r2, [pc, #100]	; (8008784 <HAL_DMA_IRQHandler+0x1ec>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d004      	beq.n	800872c <HAL_DMA_IRQHandler+0x194>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a18      	ldr	r2, [pc, #96]	; (8008788 <HAL_DMA_IRQHandler+0x1f0>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d12f      	bne.n	800878c <HAL_DMA_IRQHandler+0x1f4>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0304 	and.w	r3, r3, #4
 8008736:	2b00      	cmp	r3, #0
 8008738:	bf14      	ite	ne
 800873a:	2301      	movne	r3, #1
 800873c:	2300      	moveq	r3, #0
 800873e:	b2db      	uxtb	r3, r3
 8008740:	e02e      	b.n	80087a0 <HAL_DMA_IRQHandler+0x208>
 8008742:	bf00      	nop
 8008744:	24000004 	.word	0x24000004
 8008748:	1b4e81b5 	.word	0x1b4e81b5
 800874c:	40020010 	.word	0x40020010
 8008750:	40020028 	.word	0x40020028
 8008754:	40020040 	.word	0x40020040
 8008758:	40020058 	.word	0x40020058
 800875c:	40020070 	.word	0x40020070
 8008760:	40020088 	.word	0x40020088
 8008764:	400200a0 	.word	0x400200a0
 8008768:	400200b8 	.word	0x400200b8
 800876c:	40020410 	.word	0x40020410
 8008770:	40020428 	.word	0x40020428
 8008774:	40020440 	.word	0x40020440
 8008778:	40020458 	.word	0x40020458
 800877c:	40020470 	.word	0x40020470
 8008780:	40020488 	.word	0x40020488
 8008784:	400204a0 	.word	0x400204a0
 8008788:	400204b8 	.word	0x400204b8
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 0308 	and.w	r3, r3, #8
 8008796:	2b00      	cmp	r3, #0
 8008798:	bf14      	ite	ne
 800879a:	2301      	movne	r3, #1
 800879c:	2300      	moveq	r3, #0
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d015      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f022 0204 	bic.w	r2, r2, #4
 80087b2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087b8:	f003 031f 	and.w	r3, r3, #31
 80087bc:	2208      	movs	r2, #8
 80087be:	409a      	lsls	r2, r3
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c8:	f043 0201 	orr.w	r2, r3, #1
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087d4:	f003 031f 	and.w	r3, r3, #31
 80087d8:	69ba      	ldr	r2, [r7, #24]
 80087da:	fa22 f303 	lsr.w	r3, r2, r3
 80087de:	f003 0301 	and.w	r3, r3, #1
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d06e      	beq.n	80088c4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a69      	ldr	r2, [pc, #420]	; (8008990 <HAL_DMA_IRQHandler+0x3f8>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d04a      	beq.n	8008886 <HAL_DMA_IRQHandler+0x2ee>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a67      	ldr	r2, [pc, #412]	; (8008994 <HAL_DMA_IRQHandler+0x3fc>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d045      	beq.n	8008886 <HAL_DMA_IRQHandler+0x2ee>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a66      	ldr	r2, [pc, #408]	; (8008998 <HAL_DMA_IRQHandler+0x400>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d040      	beq.n	8008886 <HAL_DMA_IRQHandler+0x2ee>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a64      	ldr	r2, [pc, #400]	; (800899c <HAL_DMA_IRQHandler+0x404>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d03b      	beq.n	8008886 <HAL_DMA_IRQHandler+0x2ee>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a63      	ldr	r2, [pc, #396]	; (80089a0 <HAL_DMA_IRQHandler+0x408>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d036      	beq.n	8008886 <HAL_DMA_IRQHandler+0x2ee>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a61      	ldr	r2, [pc, #388]	; (80089a4 <HAL_DMA_IRQHandler+0x40c>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d031      	beq.n	8008886 <HAL_DMA_IRQHandler+0x2ee>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a60      	ldr	r2, [pc, #384]	; (80089a8 <HAL_DMA_IRQHandler+0x410>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d02c      	beq.n	8008886 <HAL_DMA_IRQHandler+0x2ee>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a5e      	ldr	r2, [pc, #376]	; (80089ac <HAL_DMA_IRQHandler+0x414>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d027      	beq.n	8008886 <HAL_DMA_IRQHandler+0x2ee>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a5d      	ldr	r2, [pc, #372]	; (80089b0 <HAL_DMA_IRQHandler+0x418>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d022      	beq.n	8008886 <HAL_DMA_IRQHandler+0x2ee>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a5b      	ldr	r2, [pc, #364]	; (80089b4 <HAL_DMA_IRQHandler+0x41c>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d01d      	beq.n	8008886 <HAL_DMA_IRQHandler+0x2ee>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a5a      	ldr	r2, [pc, #360]	; (80089b8 <HAL_DMA_IRQHandler+0x420>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d018      	beq.n	8008886 <HAL_DMA_IRQHandler+0x2ee>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a58      	ldr	r2, [pc, #352]	; (80089bc <HAL_DMA_IRQHandler+0x424>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d013      	beq.n	8008886 <HAL_DMA_IRQHandler+0x2ee>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a57      	ldr	r2, [pc, #348]	; (80089c0 <HAL_DMA_IRQHandler+0x428>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d00e      	beq.n	8008886 <HAL_DMA_IRQHandler+0x2ee>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a55      	ldr	r2, [pc, #340]	; (80089c4 <HAL_DMA_IRQHandler+0x42c>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d009      	beq.n	8008886 <HAL_DMA_IRQHandler+0x2ee>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a54      	ldr	r2, [pc, #336]	; (80089c8 <HAL_DMA_IRQHandler+0x430>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d004      	beq.n	8008886 <HAL_DMA_IRQHandler+0x2ee>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a52      	ldr	r2, [pc, #328]	; (80089cc <HAL_DMA_IRQHandler+0x434>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d10a      	bne.n	800889c <HAL_DMA_IRQHandler+0x304>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	695b      	ldr	r3, [r3, #20]
 800888c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008890:	2b00      	cmp	r3, #0
 8008892:	bf14      	ite	ne
 8008894:	2301      	movne	r3, #1
 8008896:	2300      	moveq	r3, #0
 8008898:	b2db      	uxtb	r3, r3
 800889a:	e003      	b.n	80088a4 <HAL_DMA_IRQHandler+0x30c>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2300      	movs	r3, #0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00d      	beq.n	80088c4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ac:	f003 031f 	and.w	r3, r3, #31
 80088b0:	2201      	movs	r2, #1
 80088b2:	409a      	lsls	r2, r3
 80088b4:	6a3b      	ldr	r3, [r7, #32]
 80088b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088bc:	f043 0202 	orr.w	r2, r3, #2
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088c8:	f003 031f 	and.w	r3, r3, #31
 80088cc:	2204      	movs	r2, #4
 80088ce:	409a      	lsls	r2, r3
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	4013      	ands	r3, r2
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f000 808f 	beq.w	80089f8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a2c      	ldr	r2, [pc, #176]	; (8008990 <HAL_DMA_IRQHandler+0x3f8>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d04a      	beq.n	800897a <HAL_DMA_IRQHandler+0x3e2>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a2a      	ldr	r2, [pc, #168]	; (8008994 <HAL_DMA_IRQHandler+0x3fc>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d045      	beq.n	800897a <HAL_DMA_IRQHandler+0x3e2>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a29      	ldr	r2, [pc, #164]	; (8008998 <HAL_DMA_IRQHandler+0x400>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d040      	beq.n	800897a <HAL_DMA_IRQHandler+0x3e2>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a27      	ldr	r2, [pc, #156]	; (800899c <HAL_DMA_IRQHandler+0x404>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d03b      	beq.n	800897a <HAL_DMA_IRQHandler+0x3e2>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a26      	ldr	r2, [pc, #152]	; (80089a0 <HAL_DMA_IRQHandler+0x408>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d036      	beq.n	800897a <HAL_DMA_IRQHandler+0x3e2>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a24      	ldr	r2, [pc, #144]	; (80089a4 <HAL_DMA_IRQHandler+0x40c>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d031      	beq.n	800897a <HAL_DMA_IRQHandler+0x3e2>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a23      	ldr	r2, [pc, #140]	; (80089a8 <HAL_DMA_IRQHandler+0x410>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d02c      	beq.n	800897a <HAL_DMA_IRQHandler+0x3e2>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a21      	ldr	r2, [pc, #132]	; (80089ac <HAL_DMA_IRQHandler+0x414>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d027      	beq.n	800897a <HAL_DMA_IRQHandler+0x3e2>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a20      	ldr	r2, [pc, #128]	; (80089b0 <HAL_DMA_IRQHandler+0x418>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d022      	beq.n	800897a <HAL_DMA_IRQHandler+0x3e2>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a1e      	ldr	r2, [pc, #120]	; (80089b4 <HAL_DMA_IRQHandler+0x41c>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d01d      	beq.n	800897a <HAL_DMA_IRQHandler+0x3e2>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a1d      	ldr	r2, [pc, #116]	; (80089b8 <HAL_DMA_IRQHandler+0x420>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d018      	beq.n	800897a <HAL_DMA_IRQHandler+0x3e2>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a1b      	ldr	r2, [pc, #108]	; (80089bc <HAL_DMA_IRQHandler+0x424>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d013      	beq.n	800897a <HAL_DMA_IRQHandler+0x3e2>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a1a      	ldr	r2, [pc, #104]	; (80089c0 <HAL_DMA_IRQHandler+0x428>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d00e      	beq.n	800897a <HAL_DMA_IRQHandler+0x3e2>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a18      	ldr	r2, [pc, #96]	; (80089c4 <HAL_DMA_IRQHandler+0x42c>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d009      	beq.n	800897a <HAL_DMA_IRQHandler+0x3e2>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a17      	ldr	r2, [pc, #92]	; (80089c8 <HAL_DMA_IRQHandler+0x430>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d004      	beq.n	800897a <HAL_DMA_IRQHandler+0x3e2>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a15      	ldr	r2, [pc, #84]	; (80089cc <HAL_DMA_IRQHandler+0x434>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d12a      	bne.n	80089d0 <HAL_DMA_IRQHandler+0x438>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0302 	and.w	r3, r3, #2
 8008984:	2b00      	cmp	r3, #0
 8008986:	bf14      	ite	ne
 8008988:	2301      	movne	r3, #1
 800898a:	2300      	moveq	r3, #0
 800898c:	b2db      	uxtb	r3, r3
 800898e:	e023      	b.n	80089d8 <HAL_DMA_IRQHandler+0x440>
 8008990:	40020010 	.word	0x40020010
 8008994:	40020028 	.word	0x40020028
 8008998:	40020040 	.word	0x40020040
 800899c:	40020058 	.word	0x40020058
 80089a0:	40020070 	.word	0x40020070
 80089a4:	40020088 	.word	0x40020088
 80089a8:	400200a0 	.word	0x400200a0
 80089ac:	400200b8 	.word	0x400200b8
 80089b0:	40020410 	.word	0x40020410
 80089b4:	40020428 	.word	0x40020428
 80089b8:	40020440 	.word	0x40020440
 80089bc:	40020458 	.word	0x40020458
 80089c0:	40020470 	.word	0x40020470
 80089c4:	40020488 	.word	0x40020488
 80089c8:	400204a0 	.word	0x400204a0
 80089cc:	400204b8 	.word	0x400204b8
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2300      	movs	r3, #0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00d      	beq.n	80089f8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089e0:	f003 031f 	and.w	r3, r3, #31
 80089e4:	2204      	movs	r2, #4
 80089e6:	409a      	lsls	r2, r3
 80089e8:	6a3b      	ldr	r3, [r7, #32]
 80089ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f0:	f043 0204 	orr.w	r2, r3, #4
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089fc:	f003 031f 	and.w	r3, r3, #31
 8008a00:	2210      	movs	r2, #16
 8008a02:	409a      	lsls	r2, r3
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	4013      	ands	r3, r2
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f000 80a6 	beq.w	8008b5a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a85      	ldr	r2, [pc, #532]	; (8008c28 <HAL_DMA_IRQHandler+0x690>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d04a      	beq.n	8008aae <HAL_DMA_IRQHandler+0x516>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a83      	ldr	r2, [pc, #524]	; (8008c2c <HAL_DMA_IRQHandler+0x694>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d045      	beq.n	8008aae <HAL_DMA_IRQHandler+0x516>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a82      	ldr	r2, [pc, #520]	; (8008c30 <HAL_DMA_IRQHandler+0x698>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d040      	beq.n	8008aae <HAL_DMA_IRQHandler+0x516>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a80      	ldr	r2, [pc, #512]	; (8008c34 <HAL_DMA_IRQHandler+0x69c>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d03b      	beq.n	8008aae <HAL_DMA_IRQHandler+0x516>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a7f      	ldr	r2, [pc, #508]	; (8008c38 <HAL_DMA_IRQHandler+0x6a0>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d036      	beq.n	8008aae <HAL_DMA_IRQHandler+0x516>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a7d      	ldr	r2, [pc, #500]	; (8008c3c <HAL_DMA_IRQHandler+0x6a4>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d031      	beq.n	8008aae <HAL_DMA_IRQHandler+0x516>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a7c      	ldr	r2, [pc, #496]	; (8008c40 <HAL_DMA_IRQHandler+0x6a8>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d02c      	beq.n	8008aae <HAL_DMA_IRQHandler+0x516>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a7a      	ldr	r2, [pc, #488]	; (8008c44 <HAL_DMA_IRQHandler+0x6ac>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d027      	beq.n	8008aae <HAL_DMA_IRQHandler+0x516>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a79      	ldr	r2, [pc, #484]	; (8008c48 <HAL_DMA_IRQHandler+0x6b0>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d022      	beq.n	8008aae <HAL_DMA_IRQHandler+0x516>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a77      	ldr	r2, [pc, #476]	; (8008c4c <HAL_DMA_IRQHandler+0x6b4>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d01d      	beq.n	8008aae <HAL_DMA_IRQHandler+0x516>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a76      	ldr	r2, [pc, #472]	; (8008c50 <HAL_DMA_IRQHandler+0x6b8>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d018      	beq.n	8008aae <HAL_DMA_IRQHandler+0x516>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a74      	ldr	r2, [pc, #464]	; (8008c54 <HAL_DMA_IRQHandler+0x6bc>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d013      	beq.n	8008aae <HAL_DMA_IRQHandler+0x516>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a73      	ldr	r2, [pc, #460]	; (8008c58 <HAL_DMA_IRQHandler+0x6c0>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d00e      	beq.n	8008aae <HAL_DMA_IRQHandler+0x516>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a71      	ldr	r2, [pc, #452]	; (8008c5c <HAL_DMA_IRQHandler+0x6c4>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d009      	beq.n	8008aae <HAL_DMA_IRQHandler+0x516>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a70      	ldr	r2, [pc, #448]	; (8008c60 <HAL_DMA_IRQHandler+0x6c8>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d004      	beq.n	8008aae <HAL_DMA_IRQHandler+0x516>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a6e      	ldr	r2, [pc, #440]	; (8008c64 <HAL_DMA_IRQHandler+0x6cc>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d10a      	bne.n	8008ac4 <HAL_DMA_IRQHandler+0x52c>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0308 	and.w	r3, r3, #8
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	bf14      	ite	ne
 8008abc:	2301      	movne	r3, #1
 8008abe:	2300      	moveq	r3, #0
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	e009      	b.n	8008ad8 <HAL_DMA_IRQHandler+0x540>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 0304 	and.w	r3, r3, #4
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	bf14      	ite	ne
 8008ad2:	2301      	movne	r3, #1
 8008ad4:	2300      	moveq	r3, #0
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d03e      	beq.n	8008b5a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ae0:	f003 031f 	and.w	r3, r3, #31
 8008ae4:	2210      	movs	r2, #16
 8008ae6:	409a      	lsls	r2, r3
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d018      	beq.n	8008b2c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d108      	bne.n	8008b1a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d024      	beq.n	8008b5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	4798      	blx	r3
 8008b18:	e01f      	b.n	8008b5a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d01b      	beq.n	8008b5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	4798      	blx	r3
 8008b2a:	e016      	b.n	8008b5a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d107      	bne.n	8008b4a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f022 0208 	bic.w	r2, r2, #8
 8008b48:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d003      	beq.n	8008b5a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b5e:	f003 031f 	and.w	r3, r3, #31
 8008b62:	2220      	movs	r2, #32
 8008b64:	409a      	lsls	r2, r3
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	4013      	ands	r3, r2
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 8110 	beq.w	8008d90 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a2c      	ldr	r2, [pc, #176]	; (8008c28 <HAL_DMA_IRQHandler+0x690>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d04a      	beq.n	8008c10 <HAL_DMA_IRQHandler+0x678>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a2b      	ldr	r2, [pc, #172]	; (8008c2c <HAL_DMA_IRQHandler+0x694>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d045      	beq.n	8008c10 <HAL_DMA_IRQHandler+0x678>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a29      	ldr	r2, [pc, #164]	; (8008c30 <HAL_DMA_IRQHandler+0x698>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d040      	beq.n	8008c10 <HAL_DMA_IRQHandler+0x678>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a28      	ldr	r2, [pc, #160]	; (8008c34 <HAL_DMA_IRQHandler+0x69c>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d03b      	beq.n	8008c10 <HAL_DMA_IRQHandler+0x678>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a26      	ldr	r2, [pc, #152]	; (8008c38 <HAL_DMA_IRQHandler+0x6a0>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d036      	beq.n	8008c10 <HAL_DMA_IRQHandler+0x678>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a25      	ldr	r2, [pc, #148]	; (8008c3c <HAL_DMA_IRQHandler+0x6a4>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d031      	beq.n	8008c10 <HAL_DMA_IRQHandler+0x678>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a23      	ldr	r2, [pc, #140]	; (8008c40 <HAL_DMA_IRQHandler+0x6a8>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d02c      	beq.n	8008c10 <HAL_DMA_IRQHandler+0x678>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a22      	ldr	r2, [pc, #136]	; (8008c44 <HAL_DMA_IRQHandler+0x6ac>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d027      	beq.n	8008c10 <HAL_DMA_IRQHandler+0x678>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a20      	ldr	r2, [pc, #128]	; (8008c48 <HAL_DMA_IRQHandler+0x6b0>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d022      	beq.n	8008c10 <HAL_DMA_IRQHandler+0x678>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a1f      	ldr	r2, [pc, #124]	; (8008c4c <HAL_DMA_IRQHandler+0x6b4>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d01d      	beq.n	8008c10 <HAL_DMA_IRQHandler+0x678>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a1d      	ldr	r2, [pc, #116]	; (8008c50 <HAL_DMA_IRQHandler+0x6b8>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d018      	beq.n	8008c10 <HAL_DMA_IRQHandler+0x678>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a1c      	ldr	r2, [pc, #112]	; (8008c54 <HAL_DMA_IRQHandler+0x6bc>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d013      	beq.n	8008c10 <HAL_DMA_IRQHandler+0x678>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a1a      	ldr	r2, [pc, #104]	; (8008c58 <HAL_DMA_IRQHandler+0x6c0>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d00e      	beq.n	8008c10 <HAL_DMA_IRQHandler+0x678>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a19      	ldr	r2, [pc, #100]	; (8008c5c <HAL_DMA_IRQHandler+0x6c4>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d009      	beq.n	8008c10 <HAL_DMA_IRQHandler+0x678>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a17      	ldr	r2, [pc, #92]	; (8008c60 <HAL_DMA_IRQHandler+0x6c8>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d004      	beq.n	8008c10 <HAL_DMA_IRQHandler+0x678>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a16      	ldr	r2, [pc, #88]	; (8008c64 <HAL_DMA_IRQHandler+0x6cc>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d12b      	bne.n	8008c68 <HAL_DMA_IRQHandler+0x6d0>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 0310 	and.w	r3, r3, #16
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	bf14      	ite	ne
 8008c1e:	2301      	movne	r3, #1
 8008c20:	2300      	moveq	r3, #0
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	e02a      	b.n	8008c7c <HAL_DMA_IRQHandler+0x6e4>
 8008c26:	bf00      	nop
 8008c28:	40020010 	.word	0x40020010
 8008c2c:	40020028 	.word	0x40020028
 8008c30:	40020040 	.word	0x40020040
 8008c34:	40020058 	.word	0x40020058
 8008c38:	40020070 	.word	0x40020070
 8008c3c:	40020088 	.word	0x40020088
 8008c40:	400200a0 	.word	0x400200a0
 8008c44:	400200b8 	.word	0x400200b8
 8008c48:	40020410 	.word	0x40020410
 8008c4c:	40020428 	.word	0x40020428
 8008c50:	40020440 	.word	0x40020440
 8008c54:	40020458 	.word	0x40020458
 8008c58:	40020470 	.word	0x40020470
 8008c5c:	40020488 	.word	0x40020488
 8008c60:	400204a0 	.word	0x400204a0
 8008c64:	400204b8 	.word	0x400204b8
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0302 	and.w	r3, r3, #2
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	bf14      	ite	ne
 8008c76:	2301      	movne	r3, #1
 8008c78:	2300      	moveq	r3, #0
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 8087 	beq.w	8008d90 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c86:	f003 031f 	and.w	r3, r3, #31
 8008c8a:	2220      	movs	r2, #32
 8008c8c:	409a      	lsls	r2, r3
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	2b04      	cmp	r3, #4
 8008c9c:	d139      	bne.n	8008d12 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f022 0216 	bic.w	r2, r2, #22
 8008cac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	695a      	ldr	r2, [r3, #20]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cbc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d103      	bne.n	8008cce <HAL_DMA_IRQHandler+0x736>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d007      	beq.n	8008cde <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f022 0208 	bic.w	r2, r2, #8
 8008cdc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ce2:	f003 031f 	and.w	r3, r3, #31
 8008ce6:	223f      	movs	r2, #63	; 0x3f
 8008ce8:	409a      	lsls	r2, r3
 8008cea:	6a3b      	ldr	r3, [r7, #32]
 8008cec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f000 834a 	beq.w	800939c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	4798      	blx	r3
          }
          return;
 8008d10:	e344      	b.n	800939c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d018      	beq.n	8008d52 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d108      	bne.n	8008d40 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d02c      	beq.n	8008d90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	4798      	blx	r3
 8008d3e:	e027      	b.n	8008d90 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d023      	beq.n	8008d90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	4798      	blx	r3
 8008d50:	e01e      	b.n	8008d90 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10f      	bne.n	8008d80 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f022 0210 	bic.w	r2, r2, #16
 8008d6e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d003      	beq.n	8008d90 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f000 8306 	beq.w	80093a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d9e:	f003 0301 	and.w	r3, r3, #1
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f000 8088 	beq.w	8008eb8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2204      	movs	r2, #4
 8008dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a7a      	ldr	r2, [pc, #488]	; (8008fa0 <HAL_DMA_IRQHandler+0xa08>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d04a      	beq.n	8008e50 <HAL_DMA_IRQHandler+0x8b8>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a79      	ldr	r2, [pc, #484]	; (8008fa4 <HAL_DMA_IRQHandler+0xa0c>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d045      	beq.n	8008e50 <HAL_DMA_IRQHandler+0x8b8>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a77      	ldr	r2, [pc, #476]	; (8008fa8 <HAL_DMA_IRQHandler+0xa10>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d040      	beq.n	8008e50 <HAL_DMA_IRQHandler+0x8b8>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a76      	ldr	r2, [pc, #472]	; (8008fac <HAL_DMA_IRQHandler+0xa14>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d03b      	beq.n	8008e50 <HAL_DMA_IRQHandler+0x8b8>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a74      	ldr	r2, [pc, #464]	; (8008fb0 <HAL_DMA_IRQHandler+0xa18>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d036      	beq.n	8008e50 <HAL_DMA_IRQHandler+0x8b8>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a73      	ldr	r2, [pc, #460]	; (8008fb4 <HAL_DMA_IRQHandler+0xa1c>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d031      	beq.n	8008e50 <HAL_DMA_IRQHandler+0x8b8>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a71      	ldr	r2, [pc, #452]	; (8008fb8 <HAL_DMA_IRQHandler+0xa20>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d02c      	beq.n	8008e50 <HAL_DMA_IRQHandler+0x8b8>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a70      	ldr	r2, [pc, #448]	; (8008fbc <HAL_DMA_IRQHandler+0xa24>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d027      	beq.n	8008e50 <HAL_DMA_IRQHandler+0x8b8>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a6e      	ldr	r2, [pc, #440]	; (8008fc0 <HAL_DMA_IRQHandler+0xa28>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d022      	beq.n	8008e50 <HAL_DMA_IRQHandler+0x8b8>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a6d      	ldr	r2, [pc, #436]	; (8008fc4 <HAL_DMA_IRQHandler+0xa2c>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d01d      	beq.n	8008e50 <HAL_DMA_IRQHandler+0x8b8>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a6b      	ldr	r2, [pc, #428]	; (8008fc8 <HAL_DMA_IRQHandler+0xa30>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d018      	beq.n	8008e50 <HAL_DMA_IRQHandler+0x8b8>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a6a      	ldr	r2, [pc, #424]	; (8008fcc <HAL_DMA_IRQHandler+0xa34>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d013      	beq.n	8008e50 <HAL_DMA_IRQHandler+0x8b8>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a68      	ldr	r2, [pc, #416]	; (8008fd0 <HAL_DMA_IRQHandler+0xa38>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d00e      	beq.n	8008e50 <HAL_DMA_IRQHandler+0x8b8>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a67      	ldr	r2, [pc, #412]	; (8008fd4 <HAL_DMA_IRQHandler+0xa3c>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d009      	beq.n	8008e50 <HAL_DMA_IRQHandler+0x8b8>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a65      	ldr	r2, [pc, #404]	; (8008fd8 <HAL_DMA_IRQHandler+0xa40>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d004      	beq.n	8008e50 <HAL_DMA_IRQHandler+0x8b8>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a64      	ldr	r2, [pc, #400]	; (8008fdc <HAL_DMA_IRQHandler+0xa44>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d108      	bne.n	8008e62 <HAL_DMA_IRQHandler+0x8ca>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f022 0201 	bic.w	r2, r2, #1
 8008e5e:	601a      	str	r2, [r3, #0]
 8008e60:	e007      	b.n	8008e72 <HAL_DMA_IRQHandler+0x8da>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f022 0201 	bic.w	r2, r2, #1
 8008e70:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	3301      	adds	r3, #1
 8008e76:	60fb      	str	r3, [r7, #12]
 8008e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d307      	bcc.n	8008e8e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0301 	and.w	r3, r3, #1
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1f2      	bne.n	8008e72 <HAL_DMA_IRQHandler+0x8da>
 8008e8c:	e000      	b.n	8008e90 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008e8e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 0301 	and.w	r3, r3, #1
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d004      	beq.n	8008ea8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2203      	movs	r2, #3
 8008ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008ea6:	e003      	b.n	8008eb0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f000 8272 	beq.w	80093a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	4798      	blx	r3
 8008eca:	e26c      	b.n	80093a6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a43      	ldr	r2, [pc, #268]	; (8008fe0 <HAL_DMA_IRQHandler+0xa48>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d022      	beq.n	8008f1c <HAL_DMA_IRQHandler+0x984>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a42      	ldr	r2, [pc, #264]	; (8008fe4 <HAL_DMA_IRQHandler+0xa4c>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d01d      	beq.n	8008f1c <HAL_DMA_IRQHandler+0x984>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a40      	ldr	r2, [pc, #256]	; (8008fe8 <HAL_DMA_IRQHandler+0xa50>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d018      	beq.n	8008f1c <HAL_DMA_IRQHandler+0x984>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a3f      	ldr	r2, [pc, #252]	; (8008fec <HAL_DMA_IRQHandler+0xa54>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d013      	beq.n	8008f1c <HAL_DMA_IRQHandler+0x984>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a3d      	ldr	r2, [pc, #244]	; (8008ff0 <HAL_DMA_IRQHandler+0xa58>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d00e      	beq.n	8008f1c <HAL_DMA_IRQHandler+0x984>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a3c      	ldr	r2, [pc, #240]	; (8008ff4 <HAL_DMA_IRQHandler+0xa5c>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d009      	beq.n	8008f1c <HAL_DMA_IRQHandler+0x984>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a3a      	ldr	r2, [pc, #232]	; (8008ff8 <HAL_DMA_IRQHandler+0xa60>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d004      	beq.n	8008f1c <HAL_DMA_IRQHandler+0x984>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a39      	ldr	r2, [pc, #228]	; (8008ffc <HAL_DMA_IRQHandler+0xa64>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d101      	bne.n	8008f20 <HAL_DMA_IRQHandler+0x988>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e000      	b.n	8008f22 <HAL_DMA_IRQHandler+0x98a>
 8008f20:	2300      	movs	r3, #0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f000 823f 	beq.w	80093a6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f34:	f003 031f 	and.w	r3, r3, #31
 8008f38:	2204      	movs	r2, #4
 8008f3a:	409a      	lsls	r2, r3
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	4013      	ands	r3, r2
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 80cd 	beq.w	80090e0 <HAL_DMA_IRQHandler+0xb48>
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	f003 0304 	and.w	r3, r3, #4
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f000 80c7 	beq.w	80090e0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f56:	f003 031f 	and.w	r3, r3, #31
 8008f5a:	2204      	movs	r2, #4
 8008f5c:	409a      	lsls	r2, r3
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d049      	beq.n	8009000 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d109      	bne.n	8008f8a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 8210 	beq.w	80093a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f88:	e20a      	b.n	80093a0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f000 8206 	beq.w	80093a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f9c:	e200      	b.n	80093a0 <HAL_DMA_IRQHandler+0xe08>
 8008f9e:	bf00      	nop
 8008fa0:	40020010 	.word	0x40020010
 8008fa4:	40020028 	.word	0x40020028
 8008fa8:	40020040 	.word	0x40020040
 8008fac:	40020058 	.word	0x40020058
 8008fb0:	40020070 	.word	0x40020070
 8008fb4:	40020088 	.word	0x40020088
 8008fb8:	400200a0 	.word	0x400200a0
 8008fbc:	400200b8 	.word	0x400200b8
 8008fc0:	40020410 	.word	0x40020410
 8008fc4:	40020428 	.word	0x40020428
 8008fc8:	40020440 	.word	0x40020440
 8008fcc:	40020458 	.word	0x40020458
 8008fd0:	40020470 	.word	0x40020470
 8008fd4:	40020488 	.word	0x40020488
 8008fd8:	400204a0 	.word	0x400204a0
 8008fdc:	400204b8 	.word	0x400204b8
 8008fe0:	58025408 	.word	0x58025408
 8008fe4:	5802541c 	.word	0x5802541c
 8008fe8:	58025430 	.word	0x58025430
 8008fec:	58025444 	.word	0x58025444
 8008ff0:	58025458 	.word	0x58025458
 8008ff4:	5802546c 	.word	0x5802546c
 8008ff8:	58025480 	.word	0x58025480
 8008ffc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	f003 0320 	and.w	r3, r3, #32
 8009006:	2b00      	cmp	r3, #0
 8009008:	d160      	bne.n	80090cc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a7f      	ldr	r2, [pc, #508]	; (800920c <HAL_DMA_IRQHandler+0xc74>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d04a      	beq.n	80090aa <HAL_DMA_IRQHandler+0xb12>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a7d      	ldr	r2, [pc, #500]	; (8009210 <HAL_DMA_IRQHandler+0xc78>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d045      	beq.n	80090aa <HAL_DMA_IRQHandler+0xb12>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a7c      	ldr	r2, [pc, #496]	; (8009214 <HAL_DMA_IRQHandler+0xc7c>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d040      	beq.n	80090aa <HAL_DMA_IRQHandler+0xb12>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a7a      	ldr	r2, [pc, #488]	; (8009218 <HAL_DMA_IRQHandler+0xc80>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d03b      	beq.n	80090aa <HAL_DMA_IRQHandler+0xb12>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a79      	ldr	r2, [pc, #484]	; (800921c <HAL_DMA_IRQHandler+0xc84>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d036      	beq.n	80090aa <HAL_DMA_IRQHandler+0xb12>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a77      	ldr	r2, [pc, #476]	; (8009220 <HAL_DMA_IRQHandler+0xc88>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d031      	beq.n	80090aa <HAL_DMA_IRQHandler+0xb12>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a76      	ldr	r2, [pc, #472]	; (8009224 <HAL_DMA_IRQHandler+0xc8c>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d02c      	beq.n	80090aa <HAL_DMA_IRQHandler+0xb12>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a74      	ldr	r2, [pc, #464]	; (8009228 <HAL_DMA_IRQHandler+0xc90>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d027      	beq.n	80090aa <HAL_DMA_IRQHandler+0xb12>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a73      	ldr	r2, [pc, #460]	; (800922c <HAL_DMA_IRQHandler+0xc94>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d022      	beq.n	80090aa <HAL_DMA_IRQHandler+0xb12>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a71      	ldr	r2, [pc, #452]	; (8009230 <HAL_DMA_IRQHandler+0xc98>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d01d      	beq.n	80090aa <HAL_DMA_IRQHandler+0xb12>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a70      	ldr	r2, [pc, #448]	; (8009234 <HAL_DMA_IRQHandler+0xc9c>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d018      	beq.n	80090aa <HAL_DMA_IRQHandler+0xb12>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a6e      	ldr	r2, [pc, #440]	; (8009238 <HAL_DMA_IRQHandler+0xca0>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d013      	beq.n	80090aa <HAL_DMA_IRQHandler+0xb12>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a6d      	ldr	r2, [pc, #436]	; (800923c <HAL_DMA_IRQHandler+0xca4>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d00e      	beq.n	80090aa <HAL_DMA_IRQHandler+0xb12>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a6b      	ldr	r2, [pc, #428]	; (8009240 <HAL_DMA_IRQHandler+0xca8>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d009      	beq.n	80090aa <HAL_DMA_IRQHandler+0xb12>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a6a      	ldr	r2, [pc, #424]	; (8009244 <HAL_DMA_IRQHandler+0xcac>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d004      	beq.n	80090aa <HAL_DMA_IRQHandler+0xb12>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a68      	ldr	r2, [pc, #416]	; (8009248 <HAL_DMA_IRQHandler+0xcb0>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d108      	bne.n	80090bc <HAL_DMA_IRQHandler+0xb24>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f022 0208 	bic.w	r2, r2, #8
 80090b8:	601a      	str	r2, [r3, #0]
 80090ba:	e007      	b.n	80090cc <HAL_DMA_IRQHandler+0xb34>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f022 0204 	bic.w	r2, r2, #4
 80090ca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f000 8165 	beq.w	80093a0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80090de:	e15f      	b.n	80093a0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090e4:	f003 031f 	and.w	r3, r3, #31
 80090e8:	2202      	movs	r2, #2
 80090ea:	409a      	lsls	r2, r3
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	4013      	ands	r3, r2
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f000 80c5 	beq.w	8009280 <HAL_DMA_IRQHandler+0xce8>
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	f003 0302 	and.w	r3, r3, #2
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 80bf 	beq.w	8009280 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009106:	f003 031f 	and.w	r3, r3, #31
 800910a:	2202      	movs	r2, #2
 800910c:	409a      	lsls	r2, r3
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009118:	2b00      	cmp	r3, #0
 800911a:	d018      	beq.n	800914e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009122:	2b00      	cmp	r3, #0
 8009124:	d109      	bne.n	800913a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800912a:	2b00      	cmp	r3, #0
 800912c:	f000 813a 	beq.w	80093a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009138:	e134      	b.n	80093a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800913e:	2b00      	cmp	r3, #0
 8009140:	f000 8130 	beq.w	80093a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800914c:	e12a      	b.n	80093a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	f003 0320 	and.w	r3, r3, #32
 8009154:	2b00      	cmp	r3, #0
 8009156:	f040 8089 	bne.w	800926c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a2b      	ldr	r2, [pc, #172]	; (800920c <HAL_DMA_IRQHandler+0xc74>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d04a      	beq.n	80091fa <HAL_DMA_IRQHandler+0xc62>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a29      	ldr	r2, [pc, #164]	; (8009210 <HAL_DMA_IRQHandler+0xc78>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d045      	beq.n	80091fa <HAL_DMA_IRQHandler+0xc62>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a28      	ldr	r2, [pc, #160]	; (8009214 <HAL_DMA_IRQHandler+0xc7c>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d040      	beq.n	80091fa <HAL_DMA_IRQHandler+0xc62>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a26      	ldr	r2, [pc, #152]	; (8009218 <HAL_DMA_IRQHandler+0xc80>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d03b      	beq.n	80091fa <HAL_DMA_IRQHandler+0xc62>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a25      	ldr	r2, [pc, #148]	; (800921c <HAL_DMA_IRQHandler+0xc84>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d036      	beq.n	80091fa <HAL_DMA_IRQHandler+0xc62>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a23      	ldr	r2, [pc, #140]	; (8009220 <HAL_DMA_IRQHandler+0xc88>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d031      	beq.n	80091fa <HAL_DMA_IRQHandler+0xc62>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a22      	ldr	r2, [pc, #136]	; (8009224 <HAL_DMA_IRQHandler+0xc8c>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d02c      	beq.n	80091fa <HAL_DMA_IRQHandler+0xc62>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a20      	ldr	r2, [pc, #128]	; (8009228 <HAL_DMA_IRQHandler+0xc90>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d027      	beq.n	80091fa <HAL_DMA_IRQHandler+0xc62>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a1f      	ldr	r2, [pc, #124]	; (800922c <HAL_DMA_IRQHandler+0xc94>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d022      	beq.n	80091fa <HAL_DMA_IRQHandler+0xc62>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a1d      	ldr	r2, [pc, #116]	; (8009230 <HAL_DMA_IRQHandler+0xc98>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d01d      	beq.n	80091fa <HAL_DMA_IRQHandler+0xc62>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a1c      	ldr	r2, [pc, #112]	; (8009234 <HAL_DMA_IRQHandler+0xc9c>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d018      	beq.n	80091fa <HAL_DMA_IRQHandler+0xc62>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a1a      	ldr	r2, [pc, #104]	; (8009238 <HAL_DMA_IRQHandler+0xca0>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d013      	beq.n	80091fa <HAL_DMA_IRQHandler+0xc62>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a19      	ldr	r2, [pc, #100]	; (800923c <HAL_DMA_IRQHandler+0xca4>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d00e      	beq.n	80091fa <HAL_DMA_IRQHandler+0xc62>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a17      	ldr	r2, [pc, #92]	; (8009240 <HAL_DMA_IRQHandler+0xca8>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d009      	beq.n	80091fa <HAL_DMA_IRQHandler+0xc62>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a16      	ldr	r2, [pc, #88]	; (8009244 <HAL_DMA_IRQHandler+0xcac>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d004      	beq.n	80091fa <HAL_DMA_IRQHandler+0xc62>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a14      	ldr	r2, [pc, #80]	; (8009248 <HAL_DMA_IRQHandler+0xcb0>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d128      	bne.n	800924c <HAL_DMA_IRQHandler+0xcb4>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f022 0214 	bic.w	r2, r2, #20
 8009208:	601a      	str	r2, [r3, #0]
 800920a:	e027      	b.n	800925c <HAL_DMA_IRQHandler+0xcc4>
 800920c:	40020010 	.word	0x40020010
 8009210:	40020028 	.word	0x40020028
 8009214:	40020040 	.word	0x40020040
 8009218:	40020058 	.word	0x40020058
 800921c:	40020070 	.word	0x40020070
 8009220:	40020088 	.word	0x40020088
 8009224:	400200a0 	.word	0x400200a0
 8009228:	400200b8 	.word	0x400200b8
 800922c:	40020410 	.word	0x40020410
 8009230:	40020428 	.word	0x40020428
 8009234:	40020440 	.word	0x40020440
 8009238:	40020458 	.word	0x40020458
 800923c:	40020470 	.word	0x40020470
 8009240:	40020488 	.word	0x40020488
 8009244:	400204a0 	.word	0x400204a0
 8009248:	400204b8 	.word	0x400204b8
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f022 020a 	bic.w	r2, r2, #10
 800925a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009270:	2b00      	cmp	r3, #0
 8009272:	f000 8097 	beq.w	80093a4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800927e:	e091      	b.n	80093a4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009284:	f003 031f 	and.w	r3, r3, #31
 8009288:	2208      	movs	r2, #8
 800928a:	409a      	lsls	r2, r3
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	4013      	ands	r3, r2
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 8088 	beq.w	80093a6 <HAL_DMA_IRQHandler+0xe0e>
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	f003 0308 	and.w	r3, r3, #8
 800929c:	2b00      	cmp	r3, #0
 800929e:	f000 8082 	beq.w	80093a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a41      	ldr	r2, [pc, #260]	; (80093ac <HAL_DMA_IRQHandler+0xe14>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d04a      	beq.n	8009342 <HAL_DMA_IRQHandler+0xdaa>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a3f      	ldr	r2, [pc, #252]	; (80093b0 <HAL_DMA_IRQHandler+0xe18>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d045      	beq.n	8009342 <HAL_DMA_IRQHandler+0xdaa>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a3e      	ldr	r2, [pc, #248]	; (80093b4 <HAL_DMA_IRQHandler+0xe1c>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d040      	beq.n	8009342 <HAL_DMA_IRQHandler+0xdaa>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a3c      	ldr	r2, [pc, #240]	; (80093b8 <HAL_DMA_IRQHandler+0xe20>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d03b      	beq.n	8009342 <HAL_DMA_IRQHandler+0xdaa>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a3b      	ldr	r2, [pc, #236]	; (80093bc <HAL_DMA_IRQHandler+0xe24>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d036      	beq.n	8009342 <HAL_DMA_IRQHandler+0xdaa>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a39      	ldr	r2, [pc, #228]	; (80093c0 <HAL_DMA_IRQHandler+0xe28>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d031      	beq.n	8009342 <HAL_DMA_IRQHandler+0xdaa>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a38      	ldr	r2, [pc, #224]	; (80093c4 <HAL_DMA_IRQHandler+0xe2c>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d02c      	beq.n	8009342 <HAL_DMA_IRQHandler+0xdaa>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a36      	ldr	r2, [pc, #216]	; (80093c8 <HAL_DMA_IRQHandler+0xe30>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d027      	beq.n	8009342 <HAL_DMA_IRQHandler+0xdaa>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a35      	ldr	r2, [pc, #212]	; (80093cc <HAL_DMA_IRQHandler+0xe34>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d022      	beq.n	8009342 <HAL_DMA_IRQHandler+0xdaa>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a33      	ldr	r2, [pc, #204]	; (80093d0 <HAL_DMA_IRQHandler+0xe38>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d01d      	beq.n	8009342 <HAL_DMA_IRQHandler+0xdaa>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a32      	ldr	r2, [pc, #200]	; (80093d4 <HAL_DMA_IRQHandler+0xe3c>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d018      	beq.n	8009342 <HAL_DMA_IRQHandler+0xdaa>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a30      	ldr	r2, [pc, #192]	; (80093d8 <HAL_DMA_IRQHandler+0xe40>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d013      	beq.n	8009342 <HAL_DMA_IRQHandler+0xdaa>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a2f      	ldr	r2, [pc, #188]	; (80093dc <HAL_DMA_IRQHandler+0xe44>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d00e      	beq.n	8009342 <HAL_DMA_IRQHandler+0xdaa>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a2d      	ldr	r2, [pc, #180]	; (80093e0 <HAL_DMA_IRQHandler+0xe48>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d009      	beq.n	8009342 <HAL_DMA_IRQHandler+0xdaa>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a2c      	ldr	r2, [pc, #176]	; (80093e4 <HAL_DMA_IRQHandler+0xe4c>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d004      	beq.n	8009342 <HAL_DMA_IRQHandler+0xdaa>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a2a      	ldr	r2, [pc, #168]	; (80093e8 <HAL_DMA_IRQHandler+0xe50>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d108      	bne.n	8009354 <HAL_DMA_IRQHandler+0xdbc>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f022 021c 	bic.w	r2, r2, #28
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	e007      	b.n	8009364 <HAL_DMA_IRQHandler+0xdcc>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f022 020e 	bic.w	r2, r2, #14
 8009362:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009368:	f003 031f 	and.w	r3, r3, #31
 800936c:	2201      	movs	r2, #1
 800936e:	409a      	lsls	r2, r3
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800938e:	2b00      	cmp	r3, #0
 8009390:	d009      	beq.n	80093a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	4798      	blx	r3
 800939a:	e004      	b.n	80093a6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800939c:	bf00      	nop
 800939e:	e002      	b.n	80093a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093a0:	bf00      	nop
 80093a2:	e000      	b.n	80093a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093a4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80093a6:	3728      	adds	r7, #40	; 0x28
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	40020010 	.word	0x40020010
 80093b0:	40020028 	.word	0x40020028
 80093b4:	40020040 	.word	0x40020040
 80093b8:	40020058 	.word	0x40020058
 80093bc:	40020070 	.word	0x40020070
 80093c0:	40020088 	.word	0x40020088
 80093c4:	400200a0 	.word	0x400200a0
 80093c8:	400200b8 	.word	0x400200b8
 80093cc:	40020410 	.word	0x40020410
 80093d0:	40020428 	.word	0x40020428
 80093d4:	40020440 	.word	0x40020440
 80093d8:	40020458 	.word	0x40020458
 80093dc:	40020470 	.word	0x40020470
 80093e0:	40020488 	.word	0x40020488
 80093e4:	400204a0 	.word	0x400204a0
 80093e8:	400204b8 	.word	0x400204b8

080093ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b087      	sub	sp, #28
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
 80093f8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093fe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009404:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a7f      	ldr	r2, [pc, #508]	; (8009608 <DMA_SetConfig+0x21c>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d072      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a7d      	ldr	r2, [pc, #500]	; (800960c <DMA_SetConfig+0x220>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d06d      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a7c      	ldr	r2, [pc, #496]	; (8009610 <DMA_SetConfig+0x224>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d068      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a7a      	ldr	r2, [pc, #488]	; (8009614 <DMA_SetConfig+0x228>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d063      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a79      	ldr	r2, [pc, #484]	; (8009618 <DMA_SetConfig+0x22c>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d05e      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a77      	ldr	r2, [pc, #476]	; (800961c <DMA_SetConfig+0x230>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d059      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a76      	ldr	r2, [pc, #472]	; (8009620 <DMA_SetConfig+0x234>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d054      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a74      	ldr	r2, [pc, #464]	; (8009624 <DMA_SetConfig+0x238>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d04f      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a73      	ldr	r2, [pc, #460]	; (8009628 <DMA_SetConfig+0x23c>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d04a      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a71      	ldr	r2, [pc, #452]	; (800962c <DMA_SetConfig+0x240>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d045      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a70      	ldr	r2, [pc, #448]	; (8009630 <DMA_SetConfig+0x244>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d040      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a6e      	ldr	r2, [pc, #440]	; (8009634 <DMA_SetConfig+0x248>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d03b      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a6d      	ldr	r2, [pc, #436]	; (8009638 <DMA_SetConfig+0x24c>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d036      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a6b      	ldr	r2, [pc, #428]	; (800963c <DMA_SetConfig+0x250>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d031      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a6a      	ldr	r2, [pc, #424]	; (8009640 <DMA_SetConfig+0x254>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d02c      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a68      	ldr	r2, [pc, #416]	; (8009644 <DMA_SetConfig+0x258>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d027      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a67      	ldr	r2, [pc, #412]	; (8009648 <DMA_SetConfig+0x25c>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d022      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a65      	ldr	r2, [pc, #404]	; (800964c <DMA_SetConfig+0x260>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d01d      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a64      	ldr	r2, [pc, #400]	; (8009650 <DMA_SetConfig+0x264>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d018      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a62      	ldr	r2, [pc, #392]	; (8009654 <DMA_SetConfig+0x268>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d013      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a61      	ldr	r2, [pc, #388]	; (8009658 <DMA_SetConfig+0x26c>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d00e      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a5f      	ldr	r2, [pc, #380]	; (800965c <DMA_SetConfig+0x270>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d009      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a5e      	ldr	r2, [pc, #376]	; (8009660 <DMA_SetConfig+0x274>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d004      	beq.n	80094f6 <DMA_SetConfig+0x10a>
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a5c      	ldr	r2, [pc, #368]	; (8009664 <DMA_SetConfig+0x278>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d101      	bne.n	80094fa <DMA_SetConfig+0x10e>
 80094f6:	2301      	movs	r3, #1
 80094f8:	e000      	b.n	80094fc <DMA_SetConfig+0x110>
 80094fa:	2300      	movs	r3, #0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00d      	beq.n	800951c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009508:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800950e:	2b00      	cmp	r3, #0
 8009510:	d004      	beq.n	800951c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800951a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a39      	ldr	r2, [pc, #228]	; (8009608 <DMA_SetConfig+0x21c>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d04a      	beq.n	80095bc <DMA_SetConfig+0x1d0>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a38      	ldr	r2, [pc, #224]	; (800960c <DMA_SetConfig+0x220>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d045      	beq.n	80095bc <DMA_SetConfig+0x1d0>
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a36      	ldr	r2, [pc, #216]	; (8009610 <DMA_SetConfig+0x224>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d040      	beq.n	80095bc <DMA_SetConfig+0x1d0>
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a35      	ldr	r2, [pc, #212]	; (8009614 <DMA_SetConfig+0x228>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d03b      	beq.n	80095bc <DMA_SetConfig+0x1d0>
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a33      	ldr	r2, [pc, #204]	; (8009618 <DMA_SetConfig+0x22c>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d036      	beq.n	80095bc <DMA_SetConfig+0x1d0>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a32      	ldr	r2, [pc, #200]	; (800961c <DMA_SetConfig+0x230>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d031      	beq.n	80095bc <DMA_SetConfig+0x1d0>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a30      	ldr	r2, [pc, #192]	; (8009620 <DMA_SetConfig+0x234>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d02c      	beq.n	80095bc <DMA_SetConfig+0x1d0>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a2f      	ldr	r2, [pc, #188]	; (8009624 <DMA_SetConfig+0x238>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d027      	beq.n	80095bc <DMA_SetConfig+0x1d0>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a2d      	ldr	r2, [pc, #180]	; (8009628 <DMA_SetConfig+0x23c>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d022      	beq.n	80095bc <DMA_SetConfig+0x1d0>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a2c      	ldr	r2, [pc, #176]	; (800962c <DMA_SetConfig+0x240>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d01d      	beq.n	80095bc <DMA_SetConfig+0x1d0>
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a2a      	ldr	r2, [pc, #168]	; (8009630 <DMA_SetConfig+0x244>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d018      	beq.n	80095bc <DMA_SetConfig+0x1d0>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a29      	ldr	r2, [pc, #164]	; (8009634 <DMA_SetConfig+0x248>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d013      	beq.n	80095bc <DMA_SetConfig+0x1d0>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a27      	ldr	r2, [pc, #156]	; (8009638 <DMA_SetConfig+0x24c>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d00e      	beq.n	80095bc <DMA_SetConfig+0x1d0>
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a26      	ldr	r2, [pc, #152]	; (800963c <DMA_SetConfig+0x250>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d009      	beq.n	80095bc <DMA_SetConfig+0x1d0>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a24      	ldr	r2, [pc, #144]	; (8009640 <DMA_SetConfig+0x254>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d004      	beq.n	80095bc <DMA_SetConfig+0x1d0>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a23      	ldr	r2, [pc, #140]	; (8009644 <DMA_SetConfig+0x258>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d101      	bne.n	80095c0 <DMA_SetConfig+0x1d4>
 80095bc:	2301      	movs	r3, #1
 80095be:	e000      	b.n	80095c2 <DMA_SetConfig+0x1d6>
 80095c0:	2300      	movs	r3, #0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d059      	beq.n	800967a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095ca:	f003 031f 	and.w	r3, r3, #31
 80095ce:	223f      	movs	r2, #63	; 0x3f
 80095d0:	409a      	lsls	r2, r3
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80095e4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	683a      	ldr	r2, [r7, #0]
 80095ec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	2b40      	cmp	r3, #64	; 0x40
 80095f4:	d138      	bne.n	8009668 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009606:	e086      	b.n	8009716 <DMA_SetConfig+0x32a>
 8009608:	40020010 	.word	0x40020010
 800960c:	40020028 	.word	0x40020028
 8009610:	40020040 	.word	0x40020040
 8009614:	40020058 	.word	0x40020058
 8009618:	40020070 	.word	0x40020070
 800961c:	40020088 	.word	0x40020088
 8009620:	400200a0 	.word	0x400200a0
 8009624:	400200b8 	.word	0x400200b8
 8009628:	40020410 	.word	0x40020410
 800962c:	40020428 	.word	0x40020428
 8009630:	40020440 	.word	0x40020440
 8009634:	40020458 	.word	0x40020458
 8009638:	40020470 	.word	0x40020470
 800963c:	40020488 	.word	0x40020488
 8009640:	400204a0 	.word	0x400204a0
 8009644:	400204b8 	.word	0x400204b8
 8009648:	58025408 	.word	0x58025408
 800964c:	5802541c 	.word	0x5802541c
 8009650:	58025430 	.word	0x58025430
 8009654:	58025444 	.word	0x58025444
 8009658:	58025458 	.word	0x58025458
 800965c:	5802546c 	.word	0x5802546c
 8009660:	58025480 	.word	0x58025480
 8009664:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	60da      	str	r2, [r3, #12]
}
 8009678:	e04d      	b.n	8009716 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a29      	ldr	r2, [pc, #164]	; (8009724 <DMA_SetConfig+0x338>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d022      	beq.n	80096ca <DMA_SetConfig+0x2de>
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a27      	ldr	r2, [pc, #156]	; (8009728 <DMA_SetConfig+0x33c>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d01d      	beq.n	80096ca <DMA_SetConfig+0x2de>
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a26      	ldr	r2, [pc, #152]	; (800972c <DMA_SetConfig+0x340>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d018      	beq.n	80096ca <DMA_SetConfig+0x2de>
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a24      	ldr	r2, [pc, #144]	; (8009730 <DMA_SetConfig+0x344>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d013      	beq.n	80096ca <DMA_SetConfig+0x2de>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a23      	ldr	r2, [pc, #140]	; (8009734 <DMA_SetConfig+0x348>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d00e      	beq.n	80096ca <DMA_SetConfig+0x2de>
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a21      	ldr	r2, [pc, #132]	; (8009738 <DMA_SetConfig+0x34c>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d009      	beq.n	80096ca <DMA_SetConfig+0x2de>
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a20      	ldr	r2, [pc, #128]	; (800973c <DMA_SetConfig+0x350>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d004      	beq.n	80096ca <DMA_SetConfig+0x2de>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a1e      	ldr	r2, [pc, #120]	; (8009740 <DMA_SetConfig+0x354>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d101      	bne.n	80096ce <DMA_SetConfig+0x2e2>
 80096ca:	2301      	movs	r3, #1
 80096cc:	e000      	b.n	80096d0 <DMA_SetConfig+0x2e4>
 80096ce:	2300      	movs	r3, #0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d020      	beq.n	8009716 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096d8:	f003 031f 	and.w	r3, r3, #31
 80096dc:	2201      	movs	r2, #1
 80096de:	409a      	lsls	r2, r3
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	683a      	ldr	r2, [r7, #0]
 80096ea:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	2b40      	cmp	r3, #64	; 0x40
 80096f2:	d108      	bne.n	8009706 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	60da      	str	r2, [r3, #12]
}
 8009704:	e007      	b.n	8009716 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	60da      	str	r2, [r3, #12]
}
 8009716:	bf00      	nop
 8009718:	371c      	adds	r7, #28
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	58025408 	.word	0x58025408
 8009728:	5802541c 	.word	0x5802541c
 800972c:	58025430 	.word	0x58025430
 8009730:	58025444 	.word	0x58025444
 8009734:	58025458 	.word	0x58025458
 8009738:	5802546c 	.word	0x5802546c
 800973c:	58025480 	.word	0x58025480
 8009740:	58025494 	.word	0x58025494

08009744 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009744:	b480      	push	{r7}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a42      	ldr	r2, [pc, #264]	; (800985c <DMA_CalcBaseAndBitshift+0x118>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d04a      	beq.n	80097ec <DMA_CalcBaseAndBitshift+0xa8>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a41      	ldr	r2, [pc, #260]	; (8009860 <DMA_CalcBaseAndBitshift+0x11c>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d045      	beq.n	80097ec <DMA_CalcBaseAndBitshift+0xa8>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a3f      	ldr	r2, [pc, #252]	; (8009864 <DMA_CalcBaseAndBitshift+0x120>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d040      	beq.n	80097ec <DMA_CalcBaseAndBitshift+0xa8>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a3e      	ldr	r2, [pc, #248]	; (8009868 <DMA_CalcBaseAndBitshift+0x124>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d03b      	beq.n	80097ec <DMA_CalcBaseAndBitshift+0xa8>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a3c      	ldr	r2, [pc, #240]	; (800986c <DMA_CalcBaseAndBitshift+0x128>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d036      	beq.n	80097ec <DMA_CalcBaseAndBitshift+0xa8>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a3b      	ldr	r2, [pc, #236]	; (8009870 <DMA_CalcBaseAndBitshift+0x12c>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d031      	beq.n	80097ec <DMA_CalcBaseAndBitshift+0xa8>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a39      	ldr	r2, [pc, #228]	; (8009874 <DMA_CalcBaseAndBitshift+0x130>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d02c      	beq.n	80097ec <DMA_CalcBaseAndBitshift+0xa8>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a38      	ldr	r2, [pc, #224]	; (8009878 <DMA_CalcBaseAndBitshift+0x134>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d027      	beq.n	80097ec <DMA_CalcBaseAndBitshift+0xa8>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a36      	ldr	r2, [pc, #216]	; (800987c <DMA_CalcBaseAndBitshift+0x138>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d022      	beq.n	80097ec <DMA_CalcBaseAndBitshift+0xa8>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a35      	ldr	r2, [pc, #212]	; (8009880 <DMA_CalcBaseAndBitshift+0x13c>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d01d      	beq.n	80097ec <DMA_CalcBaseAndBitshift+0xa8>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a33      	ldr	r2, [pc, #204]	; (8009884 <DMA_CalcBaseAndBitshift+0x140>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d018      	beq.n	80097ec <DMA_CalcBaseAndBitshift+0xa8>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a32      	ldr	r2, [pc, #200]	; (8009888 <DMA_CalcBaseAndBitshift+0x144>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d013      	beq.n	80097ec <DMA_CalcBaseAndBitshift+0xa8>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a30      	ldr	r2, [pc, #192]	; (800988c <DMA_CalcBaseAndBitshift+0x148>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d00e      	beq.n	80097ec <DMA_CalcBaseAndBitshift+0xa8>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a2f      	ldr	r2, [pc, #188]	; (8009890 <DMA_CalcBaseAndBitshift+0x14c>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d009      	beq.n	80097ec <DMA_CalcBaseAndBitshift+0xa8>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a2d      	ldr	r2, [pc, #180]	; (8009894 <DMA_CalcBaseAndBitshift+0x150>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d004      	beq.n	80097ec <DMA_CalcBaseAndBitshift+0xa8>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a2c      	ldr	r2, [pc, #176]	; (8009898 <DMA_CalcBaseAndBitshift+0x154>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d101      	bne.n	80097f0 <DMA_CalcBaseAndBitshift+0xac>
 80097ec:	2301      	movs	r3, #1
 80097ee:	e000      	b.n	80097f2 <DMA_CalcBaseAndBitshift+0xae>
 80097f0:	2300      	movs	r3, #0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d024      	beq.n	8009840 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	3b10      	subs	r3, #16
 80097fe:	4a27      	ldr	r2, [pc, #156]	; (800989c <DMA_CalcBaseAndBitshift+0x158>)
 8009800:	fba2 2303 	umull	r2, r3, r2, r3
 8009804:	091b      	lsrs	r3, r3, #4
 8009806:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f003 0307 	and.w	r3, r3, #7
 800980e:	4a24      	ldr	r2, [pc, #144]	; (80098a0 <DMA_CalcBaseAndBitshift+0x15c>)
 8009810:	5cd3      	ldrb	r3, [r2, r3]
 8009812:	461a      	mov	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2b03      	cmp	r3, #3
 800981c:	d908      	bls.n	8009830 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	461a      	mov	r2, r3
 8009824:	4b1f      	ldr	r3, [pc, #124]	; (80098a4 <DMA_CalcBaseAndBitshift+0x160>)
 8009826:	4013      	ands	r3, r2
 8009828:	1d1a      	adds	r2, r3, #4
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	659a      	str	r2, [r3, #88]	; 0x58
 800982e:	e00d      	b.n	800984c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	461a      	mov	r2, r3
 8009836:	4b1b      	ldr	r3, [pc, #108]	; (80098a4 <DMA_CalcBaseAndBitshift+0x160>)
 8009838:	4013      	ands	r3, r2
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	6593      	str	r3, [r2, #88]	; 0x58
 800983e:	e005      	b.n	800984c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009850:	4618      	mov	r0, r3
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	40020010 	.word	0x40020010
 8009860:	40020028 	.word	0x40020028
 8009864:	40020040 	.word	0x40020040
 8009868:	40020058 	.word	0x40020058
 800986c:	40020070 	.word	0x40020070
 8009870:	40020088 	.word	0x40020088
 8009874:	400200a0 	.word	0x400200a0
 8009878:	400200b8 	.word	0x400200b8
 800987c:	40020410 	.word	0x40020410
 8009880:	40020428 	.word	0x40020428
 8009884:	40020440 	.word	0x40020440
 8009888:	40020458 	.word	0x40020458
 800988c:	40020470 	.word	0x40020470
 8009890:	40020488 	.word	0x40020488
 8009894:	400204a0 	.word	0x400204a0
 8009898:	400204b8 	.word	0x400204b8
 800989c:	aaaaaaab 	.word	0xaaaaaaab
 80098a0:	08011480 	.word	0x08011480
 80098a4:	fffffc00 	.word	0xfffffc00

080098a8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	699b      	ldr	r3, [r3, #24]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d120      	bne.n	80098fe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c0:	2b03      	cmp	r3, #3
 80098c2:	d858      	bhi.n	8009976 <DMA_CheckFifoParam+0xce>
 80098c4:	a201      	add	r2, pc, #4	; (adr r2, 80098cc <DMA_CheckFifoParam+0x24>)
 80098c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ca:	bf00      	nop
 80098cc:	080098dd 	.word	0x080098dd
 80098d0:	080098ef 	.word	0x080098ef
 80098d4:	080098dd 	.word	0x080098dd
 80098d8:	08009977 	.word	0x08009977
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d048      	beq.n	800997a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80098ec:	e045      	b.n	800997a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80098f6:	d142      	bne.n	800997e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80098fc:	e03f      	b.n	800997e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	699b      	ldr	r3, [r3, #24]
 8009902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009906:	d123      	bne.n	8009950 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800990c:	2b03      	cmp	r3, #3
 800990e:	d838      	bhi.n	8009982 <DMA_CheckFifoParam+0xda>
 8009910:	a201      	add	r2, pc, #4	; (adr r2, 8009918 <DMA_CheckFifoParam+0x70>)
 8009912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009916:	bf00      	nop
 8009918:	08009929 	.word	0x08009929
 800991c:	0800992f 	.word	0x0800992f
 8009920:	08009929 	.word	0x08009929
 8009924:	08009941 	.word	0x08009941
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	73fb      	strb	r3, [r7, #15]
        break;
 800992c:	e030      	b.n	8009990 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009936:	2b00      	cmp	r3, #0
 8009938:	d025      	beq.n	8009986 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800993e:	e022      	b.n	8009986 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009944:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009948:	d11f      	bne.n	800998a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800994e:	e01c      	b.n	800998a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009954:	2b02      	cmp	r3, #2
 8009956:	d902      	bls.n	800995e <DMA_CheckFifoParam+0xb6>
 8009958:	2b03      	cmp	r3, #3
 800995a:	d003      	beq.n	8009964 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800995c:	e018      	b.n	8009990 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	73fb      	strb	r3, [r7, #15]
        break;
 8009962:	e015      	b.n	8009990 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00e      	beq.n	800998e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009970:	2301      	movs	r3, #1
 8009972:	73fb      	strb	r3, [r7, #15]
    break;
 8009974:	e00b      	b.n	800998e <DMA_CheckFifoParam+0xe6>
        break;
 8009976:	bf00      	nop
 8009978:	e00a      	b.n	8009990 <DMA_CheckFifoParam+0xe8>
        break;
 800997a:	bf00      	nop
 800997c:	e008      	b.n	8009990 <DMA_CheckFifoParam+0xe8>
        break;
 800997e:	bf00      	nop
 8009980:	e006      	b.n	8009990 <DMA_CheckFifoParam+0xe8>
        break;
 8009982:	bf00      	nop
 8009984:	e004      	b.n	8009990 <DMA_CheckFifoParam+0xe8>
        break;
 8009986:	bf00      	nop
 8009988:	e002      	b.n	8009990 <DMA_CheckFifoParam+0xe8>
        break;
 800998a:	bf00      	nop
 800998c:	e000      	b.n	8009990 <DMA_CheckFifoParam+0xe8>
    break;
 800998e:	bf00      	nop
    }
  }

  return status;
 8009990:	7bfb      	ldrb	r3, [r7, #15]
}
 8009992:	4618      	mov	r0, r3
 8009994:	3714      	adds	r7, #20
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop

080099a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a38      	ldr	r2, [pc, #224]	; (8009a94 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d022      	beq.n	80099fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a36      	ldr	r2, [pc, #216]	; (8009a98 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d01d      	beq.n	80099fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a35      	ldr	r2, [pc, #212]	; (8009a9c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d018      	beq.n	80099fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a33      	ldr	r2, [pc, #204]	; (8009aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d013      	beq.n	80099fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a32      	ldr	r2, [pc, #200]	; (8009aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d00e      	beq.n	80099fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a30      	ldr	r2, [pc, #192]	; (8009aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d009      	beq.n	80099fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a2f      	ldr	r2, [pc, #188]	; (8009aac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d004      	beq.n	80099fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a2d      	ldr	r2, [pc, #180]	; (8009ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d101      	bne.n	8009a02 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80099fe:	2301      	movs	r3, #1
 8009a00:	e000      	b.n	8009a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009a02:	2300      	movs	r3, #0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d01a      	beq.n	8009a3e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	3b08      	subs	r3, #8
 8009a10:	4a28      	ldr	r2, [pc, #160]	; (8009ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009a12:	fba2 2303 	umull	r2, r3, r2, r3
 8009a16:	091b      	lsrs	r3, r3, #4
 8009a18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	4b26      	ldr	r3, [pc, #152]	; (8009ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009a1e:	4413      	add	r3, r2
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	461a      	mov	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4a24      	ldr	r2, [pc, #144]	; (8009abc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009a2c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f003 031f 	and.w	r3, r3, #31
 8009a34:	2201      	movs	r2, #1
 8009a36:	409a      	lsls	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009a3c:	e024      	b.n	8009a88 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	3b10      	subs	r3, #16
 8009a46:	4a1e      	ldr	r2, [pc, #120]	; (8009ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009a48:	fba2 2303 	umull	r2, r3, r2, r3
 8009a4c:	091b      	lsrs	r3, r3, #4
 8009a4e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	4a1c      	ldr	r2, [pc, #112]	; (8009ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d806      	bhi.n	8009a66 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	4a1b      	ldr	r2, [pc, #108]	; (8009ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d902      	bls.n	8009a66 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	3308      	adds	r3, #8
 8009a64:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	4b18      	ldr	r3, [pc, #96]	; (8009acc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009a6a:	4413      	add	r3, r2
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	461a      	mov	r2, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4a16      	ldr	r2, [pc, #88]	; (8009ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009a78:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f003 031f 	and.w	r3, r3, #31
 8009a80:	2201      	movs	r2, #1
 8009a82:	409a      	lsls	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009a88:	bf00      	nop
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	58025408 	.word	0x58025408
 8009a98:	5802541c 	.word	0x5802541c
 8009a9c:	58025430 	.word	0x58025430
 8009aa0:	58025444 	.word	0x58025444
 8009aa4:	58025458 	.word	0x58025458
 8009aa8:	5802546c 	.word	0x5802546c
 8009aac:	58025480 	.word	0x58025480
 8009ab0:	58025494 	.word	0x58025494
 8009ab4:	cccccccd 	.word	0xcccccccd
 8009ab8:	16009600 	.word	0x16009600
 8009abc:	58025880 	.word	0x58025880
 8009ac0:	aaaaaaab 	.word	0xaaaaaaab
 8009ac4:	400204b8 	.word	0x400204b8
 8009ac8:	4002040f 	.word	0x4002040f
 8009acc:	10008200 	.word	0x10008200
 8009ad0:	40020880 	.word	0x40020880

08009ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d04a      	beq.n	8009b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2b08      	cmp	r3, #8
 8009aee:	d847      	bhi.n	8009b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a25      	ldr	r2, [pc, #148]	; (8009b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d022      	beq.n	8009b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a24      	ldr	r2, [pc, #144]	; (8009b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d01d      	beq.n	8009b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a22      	ldr	r2, [pc, #136]	; (8009b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d018      	beq.n	8009b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a21      	ldr	r2, [pc, #132]	; (8009b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d013      	beq.n	8009b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a1f      	ldr	r2, [pc, #124]	; (8009b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d00e      	beq.n	8009b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a1e      	ldr	r2, [pc, #120]	; (8009ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d009      	beq.n	8009b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a1c      	ldr	r2, [pc, #112]	; (8009ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d004      	beq.n	8009b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a1b      	ldr	r2, [pc, #108]	; (8009ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d101      	bne.n	8009b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009b40:	2301      	movs	r3, #1
 8009b42:	e000      	b.n	8009b46 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009b44:	2300      	movs	r3, #0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00a      	beq.n	8009b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	4b17      	ldr	r3, [pc, #92]	; (8009bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009b4e:	4413      	add	r3, r2
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	461a      	mov	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a15      	ldr	r2, [pc, #84]	; (8009bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009b5c:	671a      	str	r2, [r3, #112]	; 0x70
 8009b5e:	e009      	b.n	8009b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009b60:	68fa      	ldr	r2, [r7, #12]
 8009b62:	4b14      	ldr	r3, [pc, #80]	; (8009bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009b64:	4413      	add	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	461a      	mov	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a11      	ldr	r2, [pc, #68]	; (8009bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009b72:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	3b01      	subs	r3, #1
 8009b78:	2201      	movs	r2, #1
 8009b7a:	409a      	lsls	r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009b80:	bf00      	nop
 8009b82:	3714      	adds	r7, #20
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr
 8009b8c:	58025408 	.word	0x58025408
 8009b90:	5802541c 	.word	0x5802541c
 8009b94:	58025430 	.word	0x58025430
 8009b98:	58025444 	.word	0x58025444
 8009b9c:	58025458 	.word	0x58025458
 8009ba0:	5802546c 	.word	0x5802546c
 8009ba4:	58025480 	.word	0x58025480
 8009ba8:	58025494 	.word	0x58025494
 8009bac:	1600963f 	.word	0x1600963f
 8009bb0:	58025940 	.word	0x58025940
 8009bb4:	1000823f 	.word	0x1000823f
 8009bb8:	40020940 	.word	0x40020940

08009bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b089      	sub	sp, #36	; 0x24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009bca:	4b86      	ldr	r3, [pc, #536]	; (8009de4 <HAL_GPIO_Init+0x228>)
 8009bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009bce:	e18c      	b.n	8009eea <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bdc:	4013      	ands	r3, r2
 8009bde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f000 817e 	beq.w	8009ee4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	f003 0303 	and.w	r3, r3, #3
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d005      	beq.n	8009c00 <HAL_GPIO_Init+0x44>
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	f003 0303 	and.w	r3, r3, #3
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d130      	bne.n	8009c62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	005b      	lsls	r3, r3, #1
 8009c0a:	2203      	movs	r2, #3
 8009c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c10:	43db      	mvns	r3, r3
 8009c12:	69ba      	ldr	r2, [r7, #24]
 8009c14:	4013      	ands	r3, r2
 8009c16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	68da      	ldr	r2, [r3, #12]
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	005b      	lsls	r3, r3, #1
 8009c20:	fa02 f303 	lsl.w	r3, r2, r3
 8009c24:	69ba      	ldr	r2, [r7, #24]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	69ba      	ldr	r2, [r7, #24]
 8009c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009c36:	2201      	movs	r2, #1
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c3e:	43db      	mvns	r3, r3
 8009c40:	69ba      	ldr	r2, [r7, #24]
 8009c42:	4013      	ands	r3, r2
 8009c44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	091b      	lsrs	r3, r3, #4
 8009c4c:	f003 0201 	and.w	r2, r3, #1
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	fa02 f303 	lsl.w	r3, r2, r3
 8009c56:	69ba      	ldr	r2, [r7, #24]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	69ba      	ldr	r2, [r7, #24]
 8009c60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	f003 0303 	and.w	r3, r3, #3
 8009c6a:	2b03      	cmp	r3, #3
 8009c6c:	d017      	beq.n	8009c9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	005b      	lsls	r3, r3, #1
 8009c78:	2203      	movs	r2, #3
 8009c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c7e:	43db      	mvns	r3, r3
 8009c80:	69ba      	ldr	r2, [r7, #24]
 8009c82:	4013      	ands	r3, r2
 8009c84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	689a      	ldr	r2, [r3, #8]
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	005b      	lsls	r3, r3, #1
 8009c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c92:	69ba      	ldr	r2, [r7, #24]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	69ba      	ldr	r2, [r7, #24]
 8009c9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	f003 0303 	and.w	r3, r3, #3
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d123      	bne.n	8009cf2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	08da      	lsrs	r2, r3, #3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	3208      	adds	r2, #8
 8009cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	f003 0307 	and.w	r3, r3, #7
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	220f      	movs	r2, #15
 8009cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009cc6:	43db      	mvns	r3, r3
 8009cc8:	69ba      	ldr	r2, [r7, #24]
 8009cca:	4013      	ands	r3, r2
 8009ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	691a      	ldr	r2, [r3, #16]
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	f003 0307 	and.w	r3, r3, #7
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	fa02 f303 	lsl.w	r3, r2, r3
 8009cde:	69ba      	ldr	r2, [r7, #24]
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	08da      	lsrs	r2, r3, #3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	3208      	adds	r2, #8
 8009cec:	69b9      	ldr	r1, [r7, #24]
 8009cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	005b      	lsls	r3, r3, #1
 8009cfc:	2203      	movs	r2, #3
 8009cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8009d02:	43db      	mvns	r3, r3
 8009d04:	69ba      	ldr	r2, [r7, #24]
 8009d06:	4013      	ands	r3, r2
 8009d08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	f003 0203 	and.w	r2, r3, #3
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	005b      	lsls	r3, r3, #1
 8009d16:	fa02 f303 	lsl.w	r3, r2, r3
 8009d1a:	69ba      	ldr	r2, [r7, #24]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	69ba      	ldr	r2, [r7, #24]
 8009d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f000 80d8 	beq.w	8009ee4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d34:	4b2c      	ldr	r3, [pc, #176]	; (8009de8 <HAL_GPIO_Init+0x22c>)
 8009d36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009d3a:	4a2b      	ldr	r2, [pc, #172]	; (8009de8 <HAL_GPIO_Init+0x22c>)
 8009d3c:	f043 0302 	orr.w	r3, r3, #2
 8009d40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009d44:	4b28      	ldr	r3, [pc, #160]	; (8009de8 <HAL_GPIO_Init+0x22c>)
 8009d46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009d4a:	f003 0302 	and.w	r3, r3, #2
 8009d4e:	60fb      	str	r3, [r7, #12]
 8009d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009d52:	4a26      	ldr	r2, [pc, #152]	; (8009dec <HAL_GPIO_Init+0x230>)
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	089b      	lsrs	r3, r3, #2
 8009d58:	3302      	adds	r3, #2
 8009d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	f003 0303 	and.w	r3, r3, #3
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	220f      	movs	r2, #15
 8009d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d6e:	43db      	mvns	r3, r3
 8009d70:	69ba      	ldr	r2, [r7, #24]
 8009d72:	4013      	ands	r3, r2
 8009d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a1d      	ldr	r2, [pc, #116]	; (8009df0 <HAL_GPIO_Init+0x234>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d04a      	beq.n	8009e14 <HAL_GPIO_Init+0x258>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a1c      	ldr	r2, [pc, #112]	; (8009df4 <HAL_GPIO_Init+0x238>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d02b      	beq.n	8009dde <HAL_GPIO_Init+0x222>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a1b      	ldr	r2, [pc, #108]	; (8009df8 <HAL_GPIO_Init+0x23c>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d025      	beq.n	8009dda <HAL_GPIO_Init+0x21e>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a1a      	ldr	r2, [pc, #104]	; (8009dfc <HAL_GPIO_Init+0x240>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d01f      	beq.n	8009dd6 <HAL_GPIO_Init+0x21a>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a19      	ldr	r2, [pc, #100]	; (8009e00 <HAL_GPIO_Init+0x244>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d019      	beq.n	8009dd2 <HAL_GPIO_Init+0x216>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a18      	ldr	r2, [pc, #96]	; (8009e04 <HAL_GPIO_Init+0x248>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d013      	beq.n	8009dce <HAL_GPIO_Init+0x212>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4a17      	ldr	r2, [pc, #92]	; (8009e08 <HAL_GPIO_Init+0x24c>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d00d      	beq.n	8009dca <HAL_GPIO_Init+0x20e>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a16      	ldr	r2, [pc, #88]	; (8009e0c <HAL_GPIO_Init+0x250>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d007      	beq.n	8009dc6 <HAL_GPIO_Init+0x20a>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a15      	ldr	r2, [pc, #84]	; (8009e10 <HAL_GPIO_Init+0x254>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d101      	bne.n	8009dc2 <HAL_GPIO_Init+0x206>
 8009dbe:	2309      	movs	r3, #9
 8009dc0:	e029      	b.n	8009e16 <HAL_GPIO_Init+0x25a>
 8009dc2:	230a      	movs	r3, #10
 8009dc4:	e027      	b.n	8009e16 <HAL_GPIO_Init+0x25a>
 8009dc6:	2307      	movs	r3, #7
 8009dc8:	e025      	b.n	8009e16 <HAL_GPIO_Init+0x25a>
 8009dca:	2306      	movs	r3, #6
 8009dcc:	e023      	b.n	8009e16 <HAL_GPIO_Init+0x25a>
 8009dce:	2305      	movs	r3, #5
 8009dd0:	e021      	b.n	8009e16 <HAL_GPIO_Init+0x25a>
 8009dd2:	2304      	movs	r3, #4
 8009dd4:	e01f      	b.n	8009e16 <HAL_GPIO_Init+0x25a>
 8009dd6:	2303      	movs	r3, #3
 8009dd8:	e01d      	b.n	8009e16 <HAL_GPIO_Init+0x25a>
 8009dda:	2302      	movs	r3, #2
 8009ddc:	e01b      	b.n	8009e16 <HAL_GPIO_Init+0x25a>
 8009dde:	2301      	movs	r3, #1
 8009de0:	e019      	b.n	8009e16 <HAL_GPIO_Init+0x25a>
 8009de2:	bf00      	nop
 8009de4:	58000080 	.word	0x58000080
 8009de8:	58024400 	.word	0x58024400
 8009dec:	58000400 	.word	0x58000400
 8009df0:	58020000 	.word	0x58020000
 8009df4:	58020400 	.word	0x58020400
 8009df8:	58020800 	.word	0x58020800
 8009dfc:	58020c00 	.word	0x58020c00
 8009e00:	58021000 	.word	0x58021000
 8009e04:	58021400 	.word	0x58021400
 8009e08:	58021800 	.word	0x58021800
 8009e0c:	58021c00 	.word	0x58021c00
 8009e10:	58022400 	.word	0x58022400
 8009e14:	2300      	movs	r3, #0
 8009e16:	69fa      	ldr	r2, [r7, #28]
 8009e18:	f002 0203 	and.w	r2, r2, #3
 8009e1c:	0092      	lsls	r2, r2, #2
 8009e1e:	4093      	lsls	r3, r2
 8009e20:	69ba      	ldr	r2, [r7, #24]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009e26:	4938      	ldr	r1, [pc, #224]	; (8009f08 <HAL_GPIO_Init+0x34c>)
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	089b      	lsrs	r3, r3, #2
 8009e2c:	3302      	adds	r3, #2
 8009e2e:	69ba      	ldr	r2, [r7, #24]
 8009e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	43db      	mvns	r3, r3
 8009e40:	69ba      	ldr	r2, [r7, #24]
 8009e42:	4013      	ands	r3, r2
 8009e44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d003      	beq.n	8009e5a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8009e52:	69ba      	ldr	r2, [r7, #24]
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	4313      	orrs	r3, r2
 8009e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009e5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	43db      	mvns	r3, r3
 8009e6e:	69ba      	ldr	r2, [r7, #24]
 8009e70:	4013      	ands	r3, r2
 8009e72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d003      	beq.n	8009e88 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8009e80:	69ba      	ldr	r2, [r7, #24]
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009e88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	43db      	mvns	r3, r3
 8009e9a:	69ba      	ldr	r2, [r7, #24]
 8009e9c:	4013      	ands	r3, r2
 8009e9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d003      	beq.n	8009eb4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009eac:	69ba      	ldr	r2, [r7, #24]
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	69ba      	ldr	r2, [r7, #24]
 8009eb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	43db      	mvns	r3, r3
 8009ec4:	69ba      	ldr	r2, [r7, #24]
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d003      	beq.n	8009ede <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8009ed6:	69ba      	ldr	r2, [r7, #24]
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	69ba      	ldr	r2, [r7, #24]
 8009ee2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f47f ae6b 	bne.w	8009bd0 <HAL_GPIO_Init+0x14>
  }
}
 8009efa:	bf00      	nop
 8009efc:	bf00      	nop
 8009efe:	3724      	adds	r7, #36	; 0x24
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr
 8009f08:	58000400 	.word	0x58000400

08009f0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	460b      	mov	r3, r1
 8009f16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	691a      	ldr	r2, [r3, #16]
 8009f1c:	887b      	ldrh	r3, [r7, #2]
 8009f1e:	4013      	ands	r3, r2
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d002      	beq.n	8009f2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009f24:	2301      	movs	r3, #1
 8009f26:	73fb      	strb	r3, [r7, #15]
 8009f28:	e001      	b.n	8009f2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3714      	adds	r7, #20
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	460b      	mov	r3, r1
 8009f46:	807b      	strh	r3, [r7, #2]
 8009f48:	4613      	mov	r3, r2
 8009f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009f4c:	787b      	ldrb	r3, [r7, #1]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d003      	beq.n	8009f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009f52:	887a      	ldrh	r2, [r7, #2]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009f58:	e003      	b.n	8009f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009f5a:	887b      	ldrh	r3, [r7, #2]
 8009f5c:	041a      	lsls	r2, r3, #16
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	619a      	str	r2, [r3, #24]
}
 8009f62:	bf00      	nop
 8009f64:	370c      	adds	r7, #12
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
	...

08009f70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009f78:	4b19      	ldr	r3, [pc, #100]	; (8009fe0 <HAL_PWREx_ConfigSupply+0x70>)
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	f003 0304 	and.w	r3, r3, #4
 8009f80:	2b04      	cmp	r3, #4
 8009f82:	d00a      	beq.n	8009f9a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009f84:	4b16      	ldr	r3, [pc, #88]	; (8009fe0 <HAL_PWREx_ConfigSupply+0x70>)
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	f003 0307 	and.w	r3, r3, #7
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d001      	beq.n	8009f96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	e01f      	b.n	8009fd6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	e01d      	b.n	8009fd6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009f9a:	4b11      	ldr	r3, [pc, #68]	; (8009fe0 <HAL_PWREx_ConfigSupply+0x70>)
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	f023 0207 	bic.w	r2, r3, #7
 8009fa2:	490f      	ldr	r1, [pc, #60]	; (8009fe0 <HAL_PWREx_ConfigSupply+0x70>)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009faa:	f7fc fe8d 	bl	8006cc8 <HAL_GetTick>
 8009fae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009fb0:	e009      	b.n	8009fc6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009fb2:	f7fc fe89 	bl	8006cc8 <HAL_GetTick>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	1ad3      	subs	r3, r2, r3
 8009fbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009fc0:	d901      	bls.n	8009fc6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e007      	b.n	8009fd6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009fc6:	4b06      	ldr	r3, [pc, #24]	; (8009fe0 <HAL_PWREx_ConfigSupply+0x70>)
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fd2:	d1ee      	bne.n	8009fb2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	58024800 	.word	0x58024800

08009fe4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b08c      	sub	sp, #48	; 0x30
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d101      	bne.n	8009ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	e39d      	b.n	800a732 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f003 0301 	and.w	r3, r3, #1
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f000 8087 	beq.w	800a112 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a004:	4b88      	ldr	r3, [pc, #544]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a00c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a00e:	4b86      	ldr	r3, [pc, #536]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a012:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a016:	2b10      	cmp	r3, #16
 800a018:	d007      	beq.n	800a02a <HAL_RCC_OscConfig+0x46>
 800a01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a01c:	2b18      	cmp	r3, #24
 800a01e:	d110      	bne.n	800a042 <HAL_RCC_OscConfig+0x5e>
 800a020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a022:	f003 0303 	and.w	r3, r3, #3
 800a026:	2b02      	cmp	r3, #2
 800a028:	d10b      	bne.n	800a042 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a02a:	4b7f      	ldr	r3, [pc, #508]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a032:	2b00      	cmp	r3, #0
 800a034:	d06c      	beq.n	800a110 <HAL_RCC_OscConfig+0x12c>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d168      	bne.n	800a110 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	e377      	b.n	800a732 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a04a:	d106      	bne.n	800a05a <HAL_RCC_OscConfig+0x76>
 800a04c:	4b76      	ldr	r3, [pc, #472]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a75      	ldr	r2, [pc, #468]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a056:	6013      	str	r3, [r2, #0]
 800a058:	e02e      	b.n	800a0b8 <HAL_RCC_OscConfig+0xd4>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d10c      	bne.n	800a07c <HAL_RCC_OscConfig+0x98>
 800a062:	4b71      	ldr	r3, [pc, #452]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a70      	ldr	r2, [pc, #448]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a06c:	6013      	str	r3, [r2, #0]
 800a06e:	4b6e      	ldr	r3, [pc, #440]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a6d      	ldr	r2, [pc, #436]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a078:	6013      	str	r3, [r2, #0]
 800a07a:	e01d      	b.n	800a0b8 <HAL_RCC_OscConfig+0xd4>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a084:	d10c      	bne.n	800a0a0 <HAL_RCC_OscConfig+0xbc>
 800a086:	4b68      	ldr	r3, [pc, #416]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a67      	ldr	r2, [pc, #412]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a08c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a090:	6013      	str	r3, [r2, #0]
 800a092:	4b65      	ldr	r3, [pc, #404]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a64      	ldr	r2, [pc, #400]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a09c:	6013      	str	r3, [r2, #0]
 800a09e:	e00b      	b.n	800a0b8 <HAL_RCC_OscConfig+0xd4>
 800a0a0:	4b61      	ldr	r3, [pc, #388]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a60      	ldr	r2, [pc, #384]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a0a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0aa:	6013      	str	r3, [r2, #0]
 800a0ac:	4b5e      	ldr	r3, [pc, #376]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a5d      	ldr	r2, [pc, #372]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a0b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a0b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d013      	beq.n	800a0e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0c0:	f7fc fe02 	bl	8006cc8 <HAL_GetTick>
 800a0c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0c6:	e008      	b.n	800a0da <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a0c8:	f7fc fdfe 	bl	8006cc8 <HAL_GetTick>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	2b64      	cmp	r3, #100	; 0x64
 800a0d4:	d901      	bls.n	800a0da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	e32b      	b.n	800a732 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0da:	4b53      	ldr	r3, [pc, #332]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d0f0      	beq.n	800a0c8 <HAL_RCC_OscConfig+0xe4>
 800a0e6:	e014      	b.n	800a112 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0e8:	f7fc fdee 	bl	8006cc8 <HAL_GetTick>
 800a0ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a0ee:	e008      	b.n	800a102 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a0f0:	f7fc fdea 	bl	8006cc8 <HAL_GetTick>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f8:	1ad3      	subs	r3, r2, r3
 800a0fa:	2b64      	cmp	r3, #100	; 0x64
 800a0fc:	d901      	bls.n	800a102 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a0fe:	2303      	movs	r3, #3
 800a100:	e317      	b.n	800a732 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a102:	4b49      	ldr	r3, [pc, #292]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d1f0      	bne.n	800a0f0 <HAL_RCC_OscConfig+0x10c>
 800a10e:	e000      	b.n	800a112 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f003 0302 	and.w	r3, r3, #2
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f000 808c 	beq.w	800a238 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a120:	4b41      	ldr	r3, [pc, #260]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a128:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a12a:	4b3f      	ldr	r3, [pc, #252]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a12c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a130:	6a3b      	ldr	r3, [r7, #32]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d007      	beq.n	800a146 <HAL_RCC_OscConfig+0x162>
 800a136:	6a3b      	ldr	r3, [r7, #32]
 800a138:	2b18      	cmp	r3, #24
 800a13a:	d137      	bne.n	800a1ac <HAL_RCC_OscConfig+0x1c8>
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	f003 0303 	and.w	r3, r3, #3
 800a142:	2b00      	cmp	r3, #0
 800a144:	d132      	bne.n	800a1ac <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a146:	4b38      	ldr	r3, [pc, #224]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0304 	and.w	r3, r3, #4
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d005      	beq.n	800a15e <HAL_RCC_OscConfig+0x17a>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d101      	bne.n	800a15e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	e2e9      	b.n	800a732 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a15e:	4b32      	ldr	r3, [pc, #200]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f023 0219 	bic.w	r2, r3, #25
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	492f      	ldr	r1, [pc, #188]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a16c:	4313      	orrs	r3, r2
 800a16e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a170:	f7fc fdaa 	bl	8006cc8 <HAL_GetTick>
 800a174:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a176:	e008      	b.n	800a18a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a178:	f7fc fda6 	bl	8006cc8 <HAL_GetTick>
 800a17c:	4602      	mov	r2, r0
 800a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	2b02      	cmp	r3, #2
 800a184:	d901      	bls.n	800a18a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800a186:	2303      	movs	r3, #3
 800a188:	e2d3      	b.n	800a732 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a18a:	4b27      	ldr	r3, [pc, #156]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f003 0304 	and.w	r3, r3, #4
 800a192:	2b00      	cmp	r3, #0
 800a194:	d0f0      	beq.n	800a178 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a196:	4b24      	ldr	r3, [pc, #144]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	061b      	lsls	r3, r3, #24
 800a1a4:	4920      	ldr	r1, [pc, #128]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1aa:	e045      	b.n	800a238 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d026      	beq.n	800a202 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a1b4:	4b1c      	ldr	r3, [pc, #112]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f023 0219 	bic.w	r2, r3, #25
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	4919      	ldr	r1, [pc, #100]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1c6:	f7fc fd7f 	bl	8006cc8 <HAL_GetTick>
 800a1ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1cc:	e008      	b.n	800a1e0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a1ce:	f7fc fd7b 	bl	8006cc8 <HAL_GetTick>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	1ad3      	subs	r3, r2, r3
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d901      	bls.n	800a1e0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a1dc:	2303      	movs	r3, #3
 800a1de:	e2a8      	b.n	800a732 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1e0:	4b11      	ldr	r3, [pc, #68]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 0304 	and.w	r3, r3, #4
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d0f0      	beq.n	800a1ce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1ec:	4b0e      	ldr	r3, [pc, #56]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	061b      	lsls	r3, r3, #24
 800a1fa:	490b      	ldr	r1, [pc, #44]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	604b      	str	r3, [r1, #4]
 800a200:	e01a      	b.n	800a238 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a202:	4b09      	ldr	r3, [pc, #36]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a08      	ldr	r2, [pc, #32]	; (800a228 <HAL_RCC_OscConfig+0x244>)
 800a208:	f023 0301 	bic.w	r3, r3, #1
 800a20c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a20e:	f7fc fd5b 	bl	8006cc8 <HAL_GetTick>
 800a212:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a214:	e00a      	b.n	800a22c <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a216:	f7fc fd57 	bl	8006cc8 <HAL_GetTick>
 800a21a:	4602      	mov	r2, r0
 800a21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21e:	1ad3      	subs	r3, r2, r3
 800a220:	2b02      	cmp	r3, #2
 800a222:	d903      	bls.n	800a22c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a224:	2303      	movs	r3, #3
 800a226:	e284      	b.n	800a732 <HAL_RCC_OscConfig+0x74e>
 800a228:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a22c:	4b96      	ldr	r3, [pc, #600]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f003 0304 	and.w	r3, r3, #4
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1ee      	bne.n	800a216 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f003 0310 	and.w	r3, r3, #16
 800a240:	2b00      	cmp	r3, #0
 800a242:	d06a      	beq.n	800a31a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a244:	4b90      	ldr	r3, [pc, #576]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a24c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a24e:	4b8e      	ldr	r3, [pc, #568]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a252:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	2b08      	cmp	r3, #8
 800a258:	d007      	beq.n	800a26a <HAL_RCC_OscConfig+0x286>
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	2b18      	cmp	r3, #24
 800a25e:	d11b      	bne.n	800a298 <HAL_RCC_OscConfig+0x2b4>
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	f003 0303 	and.w	r3, r3, #3
 800a266:	2b01      	cmp	r3, #1
 800a268:	d116      	bne.n	800a298 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a26a:	4b87      	ldr	r3, [pc, #540]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a272:	2b00      	cmp	r3, #0
 800a274:	d005      	beq.n	800a282 <HAL_RCC_OscConfig+0x29e>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	69db      	ldr	r3, [r3, #28]
 800a27a:	2b80      	cmp	r3, #128	; 0x80
 800a27c:	d001      	beq.n	800a282 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e257      	b.n	800a732 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a282:	4b81      	ldr	r3, [pc, #516]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a1b      	ldr	r3, [r3, #32]
 800a28e:	061b      	lsls	r3, r3, #24
 800a290:	497d      	ldr	r1, [pc, #500]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a292:	4313      	orrs	r3, r2
 800a294:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a296:	e040      	b.n	800a31a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	69db      	ldr	r3, [r3, #28]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d023      	beq.n	800a2e8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a2a0:	4b79      	ldr	r3, [pc, #484]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a78      	ldr	r2, [pc, #480]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a2a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2ac:	f7fc fd0c 	bl	8006cc8 <HAL_GetTick>
 800a2b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a2b2:	e008      	b.n	800a2c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a2b4:	f7fc fd08 	bl	8006cc8 <HAL_GetTick>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2bc:	1ad3      	subs	r3, r2, r3
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d901      	bls.n	800a2c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a2c2:	2303      	movs	r3, #3
 800a2c4:	e235      	b.n	800a732 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a2c6:	4b70      	ldr	r3, [pc, #448]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d0f0      	beq.n	800a2b4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2d2:	4b6d      	ldr	r3, [pc, #436]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a1b      	ldr	r3, [r3, #32]
 800a2de:	061b      	lsls	r3, r3, #24
 800a2e0:	4969      	ldr	r1, [pc, #420]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	60cb      	str	r3, [r1, #12]
 800a2e6:	e018      	b.n	800a31a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a2e8:	4b67      	ldr	r3, [pc, #412]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a66      	ldr	r2, [pc, #408]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a2ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2f4:	f7fc fce8 	bl	8006cc8 <HAL_GetTick>
 800a2f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a2fa:	e008      	b.n	800a30e <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a2fc:	f7fc fce4 	bl	8006cc8 <HAL_GetTick>
 800a300:	4602      	mov	r2, r0
 800a302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a304:	1ad3      	subs	r3, r2, r3
 800a306:	2b02      	cmp	r3, #2
 800a308:	d901      	bls.n	800a30e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a30a:	2303      	movs	r3, #3
 800a30c:	e211      	b.n	800a732 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a30e:	4b5e      	ldr	r3, [pc, #376]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1f0      	bne.n	800a2fc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f003 0308 	and.w	r3, r3, #8
 800a322:	2b00      	cmp	r3, #0
 800a324:	d036      	beq.n	800a394 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	695b      	ldr	r3, [r3, #20]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d019      	beq.n	800a362 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a32e:	4b56      	ldr	r3, [pc, #344]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a332:	4a55      	ldr	r2, [pc, #340]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a334:	f043 0301 	orr.w	r3, r3, #1
 800a338:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a33a:	f7fc fcc5 	bl	8006cc8 <HAL_GetTick>
 800a33e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a340:	e008      	b.n	800a354 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a342:	f7fc fcc1 	bl	8006cc8 <HAL_GetTick>
 800a346:	4602      	mov	r2, r0
 800a348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	d901      	bls.n	800a354 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a350:	2303      	movs	r3, #3
 800a352:	e1ee      	b.n	800a732 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a354:	4b4c      	ldr	r3, [pc, #304]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a358:	f003 0302 	and.w	r3, r3, #2
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d0f0      	beq.n	800a342 <HAL_RCC_OscConfig+0x35e>
 800a360:	e018      	b.n	800a394 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a362:	4b49      	ldr	r3, [pc, #292]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a366:	4a48      	ldr	r2, [pc, #288]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a368:	f023 0301 	bic.w	r3, r3, #1
 800a36c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a36e:	f7fc fcab 	bl	8006cc8 <HAL_GetTick>
 800a372:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a374:	e008      	b.n	800a388 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a376:	f7fc fca7 	bl	8006cc8 <HAL_GetTick>
 800a37a:	4602      	mov	r2, r0
 800a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37e:	1ad3      	subs	r3, r2, r3
 800a380:	2b02      	cmp	r3, #2
 800a382:	d901      	bls.n	800a388 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a384:	2303      	movs	r3, #3
 800a386:	e1d4      	b.n	800a732 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a388:	4b3f      	ldr	r3, [pc, #252]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a38a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a38c:	f003 0302 	and.w	r3, r3, #2
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1f0      	bne.n	800a376 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 0320 	and.w	r3, r3, #32
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d036      	beq.n	800a40e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d019      	beq.n	800a3dc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a3a8:	4b37      	ldr	r3, [pc, #220]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a36      	ldr	r2, [pc, #216]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a3ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a3b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a3b4:	f7fc fc88 	bl	8006cc8 <HAL_GetTick>
 800a3b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a3ba:	e008      	b.n	800a3ce <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a3bc:	f7fc fc84 	bl	8006cc8 <HAL_GetTick>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c4:	1ad3      	subs	r3, r2, r3
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	d901      	bls.n	800a3ce <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800a3ca:	2303      	movs	r3, #3
 800a3cc:	e1b1      	b.n	800a732 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a3ce:	4b2e      	ldr	r3, [pc, #184]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d0f0      	beq.n	800a3bc <HAL_RCC_OscConfig+0x3d8>
 800a3da:	e018      	b.n	800a40e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a3dc:	4b2a      	ldr	r3, [pc, #168]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a29      	ldr	r2, [pc, #164]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a3e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a3e8:	f7fc fc6e 	bl	8006cc8 <HAL_GetTick>
 800a3ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a3ee:	e008      	b.n	800a402 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a3f0:	f7fc fc6a 	bl	8006cc8 <HAL_GetTick>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d901      	bls.n	800a402 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a3fe:	2303      	movs	r3, #3
 800a400:	e197      	b.n	800a732 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a402:	4b21      	ldr	r3, [pc, #132]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d1f0      	bne.n	800a3f0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f003 0304 	and.w	r3, r3, #4
 800a416:	2b00      	cmp	r3, #0
 800a418:	f000 8086 	beq.w	800a528 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a41c:	4b1b      	ldr	r3, [pc, #108]	; (800a48c <HAL_RCC_OscConfig+0x4a8>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a1a      	ldr	r2, [pc, #104]	; (800a48c <HAL_RCC_OscConfig+0x4a8>)
 800a422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a426:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a428:	f7fc fc4e 	bl	8006cc8 <HAL_GetTick>
 800a42c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a42e:	e008      	b.n	800a442 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a430:	f7fc fc4a 	bl	8006cc8 <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	2b64      	cmp	r3, #100	; 0x64
 800a43c:	d901      	bls.n	800a442 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a43e:	2303      	movs	r3, #3
 800a440:	e177      	b.n	800a732 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a442:	4b12      	ldr	r3, [pc, #72]	; (800a48c <HAL_RCC_OscConfig+0x4a8>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d0f0      	beq.n	800a430 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	2b01      	cmp	r3, #1
 800a454:	d106      	bne.n	800a464 <HAL_RCC_OscConfig+0x480>
 800a456:	4b0c      	ldr	r3, [pc, #48]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a45a:	4a0b      	ldr	r2, [pc, #44]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a45c:	f043 0301 	orr.w	r3, r3, #1
 800a460:	6713      	str	r3, [r2, #112]	; 0x70
 800a462:	e032      	b.n	800a4ca <HAL_RCC_OscConfig+0x4e6>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d111      	bne.n	800a490 <HAL_RCC_OscConfig+0x4ac>
 800a46c:	4b06      	ldr	r3, [pc, #24]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a46e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a470:	4a05      	ldr	r2, [pc, #20]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a472:	f023 0301 	bic.w	r3, r3, #1
 800a476:	6713      	str	r3, [r2, #112]	; 0x70
 800a478:	4b03      	ldr	r3, [pc, #12]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a47a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a47c:	4a02      	ldr	r2, [pc, #8]	; (800a488 <HAL_RCC_OscConfig+0x4a4>)
 800a47e:	f023 0304 	bic.w	r3, r3, #4
 800a482:	6713      	str	r3, [r2, #112]	; 0x70
 800a484:	e021      	b.n	800a4ca <HAL_RCC_OscConfig+0x4e6>
 800a486:	bf00      	nop
 800a488:	58024400 	.word	0x58024400
 800a48c:	58024800 	.word	0x58024800
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	2b05      	cmp	r3, #5
 800a496:	d10c      	bne.n	800a4b2 <HAL_RCC_OscConfig+0x4ce>
 800a498:	4b83      	ldr	r3, [pc, #524]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a49a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a49c:	4a82      	ldr	r2, [pc, #520]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a49e:	f043 0304 	orr.w	r3, r3, #4
 800a4a2:	6713      	str	r3, [r2, #112]	; 0x70
 800a4a4:	4b80      	ldr	r3, [pc, #512]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a4a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a8:	4a7f      	ldr	r2, [pc, #508]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a4aa:	f043 0301 	orr.w	r3, r3, #1
 800a4ae:	6713      	str	r3, [r2, #112]	; 0x70
 800a4b0:	e00b      	b.n	800a4ca <HAL_RCC_OscConfig+0x4e6>
 800a4b2:	4b7d      	ldr	r3, [pc, #500]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a4b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4b6:	4a7c      	ldr	r2, [pc, #496]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a4b8:	f023 0301 	bic.w	r3, r3, #1
 800a4bc:	6713      	str	r3, [r2, #112]	; 0x70
 800a4be:	4b7a      	ldr	r3, [pc, #488]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a4c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4c2:	4a79      	ldr	r2, [pc, #484]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a4c4:	f023 0304 	bic.w	r3, r3, #4
 800a4c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d015      	beq.n	800a4fe <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4d2:	f7fc fbf9 	bl	8006cc8 <HAL_GetTick>
 800a4d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4d8:	e00a      	b.n	800a4f0 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a4da:	f7fc fbf5 	bl	8006cc8 <HAL_GetTick>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d901      	bls.n	800a4f0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	e120      	b.n	800a732 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4f0:	4b6d      	ldr	r3, [pc, #436]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a4f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f4:	f003 0302 	and.w	r3, r3, #2
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d0ee      	beq.n	800a4da <HAL_RCC_OscConfig+0x4f6>
 800a4fc:	e014      	b.n	800a528 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4fe:	f7fc fbe3 	bl	8006cc8 <HAL_GetTick>
 800a502:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a504:	e00a      	b.n	800a51c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a506:	f7fc fbdf 	bl	8006cc8 <HAL_GetTick>
 800a50a:	4602      	mov	r2, r0
 800a50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50e:	1ad3      	subs	r3, r2, r3
 800a510:	f241 3288 	movw	r2, #5000	; 0x1388
 800a514:	4293      	cmp	r3, r2
 800a516:	d901      	bls.n	800a51c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a518:	2303      	movs	r3, #3
 800a51a:	e10a      	b.n	800a732 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a51c:	4b62      	ldr	r3, [pc, #392]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a51e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a520:	f003 0302 	and.w	r3, r3, #2
 800a524:	2b00      	cmp	r3, #0
 800a526:	d1ee      	bne.n	800a506 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f000 80ff 	beq.w	800a730 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a532:	4b5d      	ldr	r3, [pc, #372]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a53a:	2b18      	cmp	r3, #24
 800a53c:	f000 80ba 	beq.w	800a6b4 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a544:	2b02      	cmp	r3, #2
 800a546:	f040 8095 	bne.w	800a674 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a54a:	4b57      	ldr	r3, [pc, #348]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a56      	ldr	r2, [pc, #344]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a550:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a556:	f7fc fbb7 	bl	8006cc8 <HAL_GetTick>
 800a55a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a55c:	e008      	b.n	800a570 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a55e:	f7fc fbb3 	bl	8006cc8 <HAL_GetTick>
 800a562:	4602      	mov	r2, r0
 800a564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a566:	1ad3      	subs	r3, r2, r3
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d901      	bls.n	800a570 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a56c:	2303      	movs	r3, #3
 800a56e:	e0e0      	b.n	800a732 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a570:	4b4d      	ldr	r3, [pc, #308]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d1f0      	bne.n	800a55e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a57c:	4b4a      	ldr	r3, [pc, #296]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a57e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a580:	4b4a      	ldr	r3, [pc, #296]	; (800a6ac <HAL_RCC_OscConfig+0x6c8>)
 800a582:	4013      	ands	r3, r2
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a58c:	0112      	lsls	r2, r2, #4
 800a58e:	430a      	orrs	r2, r1
 800a590:	4945      	ldr	r1, [pc, #276]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a592:	4313      	orrs	r3, r2
 800a594:	628b      	str	r3, [r1, #40]	; 0x28
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a59a:	3b01      	subs	r3, #1
 800a59c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	025b      	lsls	r3, r3, #9
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	431a      	orrs	r2, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	041b      	lsls	r3, r3, #16
 800a5b4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a5b8:	431a      	orrs	r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	061b      	lsls	r3, r3, #24
 800a5c2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a5c6:	4938      	ldr	r1, [pc, #224]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a5cc:	4b36      	ldr	r3, [pc, #216]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d0:	4a35      	ldr	r2, [pc, #212]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a5d2:	f023 0301 	bic.w	r3, r3, #1
 800a5d6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a5d8:	4b33      	ldr	r3, [pc, #204]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a5da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5dc:	4b34      	ldr	r3, [pc, #208]	; (800a6b0 <HAL_RCC_OscConfig+0x6cc>)
 800a5de:	4013      	ands	r3, r2
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a5e4:	00d2      	lsls	r2, r2, #3
 800a5e6:	4930      	ldr	r1, [pc, #192]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a5ec:	4b2e      	ldr	r3, [pc, #184]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f0:	f023 020c 	bic.w	r2, r3, #12
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f8:	492b      	ldr	r1, [pc, #172]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a5fe:	4b2a      	ldr	r3, [pc, #168]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a602:	f023 0202 	bic.w	r2, r3, #2
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a60a:	4927      	ldr	r1, [pc, #156]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a60c:	4313      	orrs	r3, r2
 800a60e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a610:	4b25      	ldr	r3, [pc, #148]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a614:	4a24      	ldr	r2, [pc, #144]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a61a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a61c:	4b22      	ldr	r3, [pc, #136]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a620:	4a21      	ldr	r2, [pc, #132]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a626:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a628:	4b1f      	ldr	r3, [pc, #124]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62c:	4a1e      	ldr	r2, [pc, #120]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a62e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a632:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a634:	4b1c      	ldr	r3, [pc, #112]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a638:	4a1b      	ldr	r2, [pc, #108]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a63a:	f043 0301 	orr.w	r3, r3, #1
 800a63e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a640:	4b19      	ldr	r3, [pc, #100]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a18      	ldr	r2, [pc, #96]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a64a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a64c:	f7fc fb3c 	bl	8006cc8 <HAL_GetTick>
 800a650:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a652:	e008      	b.n	800a666 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a654:	f7fc fb38 	bl	8006cc8 <HAL_GetTick>
 800a658:	4602      	mov	r2, r0
 800a65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d901      	bls.n	800a666 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a662:	2303      	movs	r3, #3
 800a664:	e065      	b.n	800a732 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a666:	4b10      	ldr	r3, [pc, #64]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d0f0      	beq.n	800a654 <HAL_RCC_OscConfig+0x670>
 800a672:	e05d      	b.n	800a730 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a674:	4b0c      	ldr	r3, [pc, #48]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a0b      	ldr	r2, [pc, #44]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a67a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a67e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a680:	f7fc fb22 	bl	8006cc8 <HAL_GetTick>
 800a684:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a686:	e008      	b.n	800a69a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a688:	f7fc fb1e 	bl	8006cc8 <HAL_GetTick>
 800a68c:	4602      	mov	r2, r0
 800a68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	2b02      	cmp	r3, #2
 800a694:	d901      	bls.n	800a69a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a696:	2303      	movs	r3, #3
 800a698:	e04b      	b.n	800a732 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a69a:	4b03      	ldr	r3, [pc, #12]	; (800a6a8 <HAL_RCC_OscConfig+0x6c4>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1f0      	bne.n	800a688 <HAL_RCC_OscConfig+0x6a4>
 800a6a6:	e043      	b.n	800a730 <HAL_RCC_OscConfig+0x74c>
 800a6a8:	58024400 	.word	0x58024400
 800a6ac:	fffffc0c 	.word	0xfffffc0c
 800a6b0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a6b4:	4b21      	ldr	r3, [pc, #132]	; (800a73c <HAL_RCC_OscConfig+0x758>)
 800a6b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a6ba:	4b20      	ldr	r3, [pc, #128]	; (800a73c <HAL_RCC_OscConfig+0x758>)
 800a6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6be:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d031      	beq.n	800a72c <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	f003 0203 	and.w	r2, r3, #3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d12a      	bne.n	800a72c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	091b      	lsrs	r3, r3, #4
 800a6da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d122      	bne.n	800a72c <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d11a      	bne.n	800a72c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	0a5b      	lsrs	r3, r3, #9
 800a6fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a702:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a704:	429a      	cmp	r2, r3
 800a706:	d111      	bne.n	800a72c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	0c1b      	lsrs	r3, r3, #16
 800a70c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a714:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a716:	429a      	cmp	r2, r3
 800a718:	d108      	bne.n	800a72c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	0e1b      	lsrs	r3, r3, #24
 800a71e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a726:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a728:	429a      	cmp	r2, r3
 800a72a:	d001      	beq.n	800a730 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	e000      	b.n	800a732 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3730      	adds	r7, #48	; 0x30
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	58024400 	.word	0x58024400

0800a740 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d101      	bne.n	800a754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a750:	2301      	movs	r3, #1
 800a752:	e19c      	b.n	800aa8e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a754:	4b8a      	ldr	r3, [pc, #552]	; (800a980 <HAL_RCC_ClockConfig+0x240>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f003 030f 	and.w	r3, r3, #15
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d910      	bls.n	800a784 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a762:	4b87      	ldr	r3, [pc, #540]	; (800a980 <HAL_RCC_ClockConfig+0x240>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f023 020f 	bic.w	r2, r3, #15
 800a76a:	4985      	ldr	r1, [pc, #532]	; (800a980 <HAL_RCC_ClockConfig+0x240>)
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	4313      	orrs	r3, r2
 800a770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a772:	4b83      	ldr	r3, [pc, #524]	; (800a980 <HAL_RCC_ClockConfig+0x240>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f003 030f 	and.w	r3, r3, #15
 800a77a:	683a      	ldr	r2, [r7, #0]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d001      	beq.n	800a784 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	e184      	b.n	800aa8e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f003 0304 	and.w	r3, r3, #4
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d010      	beq.n	800a7b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	691a      	ldr	r2, [r3, #16]
 800a794:	4b7b      	ldr	r3, [pc, #492]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d908      	bls.n	800a7b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a7a0:	4b78      	ldr	r3, [pc, #480]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a7a2:	699b      	ldr	r3, [r3, #24]
 800a7a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	691b      	ldr	r3, [r3, #16]
 800a7ac:	4975      	ldr	r1, [pc, #468]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 0308 	and.w	r3, r3, #8
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d010      	beq.n	800a7e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	695a      	ldr	r2, [r3, #20]
 800a7c2:	4b70      	ldr	r3, [pc, #448]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a7c4:	69db      	ldr	r3, [r3, #28]
 800a7c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d908      	bls.n	800a7e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a7ce:	4b6d      	ldr	r3, [pc, #436]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a7d0:	69db      	ldr	r3, [r3, #28]
 800a7d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	695b      	ldr	r3, [r3, #20]
 800a7da:	496a      	ldr	r1, [pc, #424]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f003 0310 	and.w	r3, r3, #16
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d010      	beq.n	800a80e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	699a      	ldr	r2, [r3, #24]
 800a7f0:	4b64      	ldr	r3, [pc, #400]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a7f2:	69db      	ldr	r3, [r3, #28]
 800a7f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d908      	bls.n	800a80e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a7fc:	4b61      	ldr	r3, [pc, #388]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a7fe:	69db      	ldr	r3, [r3, #28]
 800a800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	699b      	ldr	r3, [r3, #24]
 800a808:	495e      	ldr	r1, [pc, #376]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a80a:	4313      	orrs	r3, r2
 800a80c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 0320 	and.w	r3, r3, #32
 800a816:	2b00      	cmp	r3, #0
 800a818:	d010      	beq.n	800a83c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	69da      	ldr	r2, [r3, #28]
 800a81e:	4b59      	ldr	r3, [pc, #356]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a820:	6a1b      	ldr	r3, [r3, #32]
 800a822:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a826:	429a      	cmp	r2, r3
 800a828:	d908      	bls.n	800a83c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a82a:	4b56      	ldr	r3, [pc, #344]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a82c:	6a1b      	ldr	r3, [r3, #32]
 800a82e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	69db      	ldr	r3, [r3, #28]
 800a836:	4953      	ldr	r1, [pc, #332]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a838:	4313      	orrs	r3, r2
 800a83a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f003 0302 	and.w	r3, r3, #2
 800a844:	2b00      	cmp	r3, #0
 800a846:	d010      	beq.n	800a86a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	68da      	ldr	r2, [r3, #12]
 800a84c:	4b4d      	ldr	r3, [pc, #308]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	f003 030f 	and.w	r3, r3, #15
 800a854:	429a      	cmp	r2, r3
 800a856:	d908      	bls.n	800a86a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a858:	4b4a      	ldr	r3, [pc, #296]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	f023 020f 	bic.w	r2, r3, #15
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	4947      	ldr	r1, [pc, #284]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a866:	4313      	orrs	r3, r2
 800a868:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 0301 	and.w	r3, r3, #1
 800a872:	2b00      	cmp	r3, #0
 800a874:	d055      	beq.n	800a922 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a876:	4b43      	ldr	r3, [pc, #268]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a878:	699b      	ldr	r3, [r3, #24]
 800a87a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	4940      	ldr	r1, [pc, #256]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a884:	4313      	orrs	r3, r2
 800a886:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	d107      	bne.n	800a8a0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a890:	4b3c      	ldr	r3, [pc, #240]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d121      	bne.n	800a8e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	e0f6      	b.n	800aa8e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	2b03      	cmp	r3, #3
 800a8a6:	d107      	bne.n	800a8b8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a8a8:	4b36      	ldr	r3, [pc, #216]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d115      	bne.n	800a8e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e0ea      	b.n	800aa8e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d107      	bne.n	800a8d0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a8c0:	4b30      	ldr	r3, [pc, #192]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d109      	bne.n	800a8e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e0de      	b.n	800aa8e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8d0:	4b2c      	ldr	r3, [pc, #176]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 0304 	and.w	r3, r3, #4
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d101      	bne.n	800a8e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e0d6      	b.n	800aa8e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a8e0:	4b28      	ldr	r3, [pc, #160]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	f023 0207 	bic.w	r2, r3, #7
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	4925      	ldr	r1, [pc, #148]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8f2:	f7fc f9e9 	bl	8006cc8 <HAL_GetTick>
 800a8f6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a8f8:	e00a      	b.n	800a910 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a8fa:	f7fc f9e5 	bl	8006cc8 <HAL_GetTick>
 800a8fe:	4602      	mov	r2, r0
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	1ad3      	subs	r3, r2, r3
 800a904:	f241 3288 	movw	r2, #5000	; 0x1388
 800a908:	4293      	cmp	r3, r2
 800a90a:	d901      	bls.n	800a910 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a90c:	2303      	movs	r3, #3
 800a90e:	e0be      	b.n	800aa8e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a910:	4b1c      	ldr	r3, [pc, #112]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a912:	691b      	ldr	r3, [r3, #16]
 800a914:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	00db      	lsls	r3, r3, #3
 800a91e:	429a      	cmp	r2, r3
 800a920:	d1eb      	bne.n	800a8fa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f003 0302 	and.w	r3, r3, #2
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d010      	beq.n	800a950 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	68da      	ldr	r2, [r3, #12]
 800a932:	4b14      	ldr	r3, [pc, #80]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a934:	699b      	ldr	r3, [r3, #24]
 800a936:	f003 030f 	and.w	r3, r3, #15
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d208      	bcs.n	800a950 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a93e:	4b11      	ldr	r3, [pc, #68]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a940:	699b      	ldr	r3, [r3, #24]
 800a942:	f023 020f 	bic.w	r2, r3, #15
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	490e      	ldr	r1, [pc, #56]	; (800a984 <HAL_RCC_ClockConfig+0x244>)
 800a94c:	4313      	orrs	r3, r2
 800a94e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a950:	4b0b      	ldr	r3, [pc, #44]	; (800a980 <HAL_RCC_ClockConfig+0x240>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f003 030f 	and.w	r3, r3, #15
 800a958:	683a      	ldr	r2, [r7, #0]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d214      	bcs.n	800a988 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a95e:	4b08      	ldr	r3, [pc, #32]	; (800a980 <HAL_RCC_ClockConfig+0x240>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f023 020f 	bic.w	r2, r3, #15
 800a966:	4906      	ldr	r1, [pc, #24]	; (800a980 <HAL_RCC_ClockConfig+0x240>)
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	4313      	orrs	r3, r2
 800a96c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a96e:	4b04      	ldr	r3, [pc, #16]	; (800a980 <HAL_RCC_ClockConfig+0x240>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f003 030f 	and.w	r3, r3, #15
 800a976:	683a      	ldr	r2, [r7, #0]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d005      	beq.n	800a988 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a97c:	2301      	movs	r3, #1
 800a97e:	e086      	b.n	800aa8e <HAL_RCC_ClockConfig+0x34e>
 800a980:	52002000 	.word	0x52002000
 800a984:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f003 0304 	and.w	r3, r3, #4
 800a990:	2b00      	cmp	r3, #0
 800a992:	d010      	beq.n	800a9b6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	691a      	ldr	r2, [r3, #16]
 800a998:	4b3f      	ldr	r3, [pc, #252]	; (800aa98 <HAL_RCC_ClockConfig+0x358>)
 800a99a:	699b      	ldr	r3, [r3, #24]
 800a99c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d208      	bcs.n	800a9b6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a9a4:	4b3c      	ldr	r3, [pc, #240]	; (800aa98 <HAL_RCC_ClockConfig+0x358>)
 800a9a6:	699b      	ldr	r3, [r3, #24]
 800a9a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	4939      	ldr	r1, [pc, #228]	; (800aa98 <HAL_RCC_ClockConfig+0x358>)
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f003 0308 	and.w	r3, r3, #8
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d010      	beq.n	800a9e4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	695a      	ldr	r2, [r3, #20]
 800a9c6:	4b34      	ldr	r3, [pc, #208]	; (800aa98 <HAL_RCC_ClockConfig+0x358>)
 800a9c8:	69db      	ldr	r3, [r3, #28]
 800a9ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d208      	bcs.n	800a9e4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a9d2:	4b31      	ldr	r3, [pc, #196]	; (800aa98 <HAL_RCC_ClockConfig+0x358>)
 800a9d4:	69db      	ldr	r3, [r3, #28]
 800a9d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	695b      	ldr	r3, [r3, #20]
 800a9de:	492e      	ldr	r1, [pc, #184]	; (800aa98 <HAL_RCC_ClockConfig+0x358>)
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f003 0310 	and.w	r3, r3, #16
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d010      	beq.n	800aa12 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	699a      	ldr	r2, [r3, #24]
 800a9f4:	4b28      	ldr	r3, [pc, #160]	; (800aa98 <HAL_RCC_ClockConfig+0x358>)
 800a9f6:	69db      	ldr	r3, [r3, #28]
 800a9f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d208      	bcs.n	800aa12 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aa00:	4b25      	ldr	r3, [pc, #148]	; (800aa98 <HAL_RCC_ClockConfig+0x358>)
 800aa02:	69db      	ldr	r3, [r3, #28]
 800aa04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	699b      	ldr	r3, [r3, #24]
 800aa0c:	4922      	ldr	r1, [pc, #136]	; (800aa98 <HAL_RCC_ClockConfig+0x358>)
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f003 0320 	and.w	r3, r3, #32
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d010      	beq.n	800aa40 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	69da      	ldr	r2, [r3, #28]
 800aa22:	4b1d      	ldr	r3, [pc, #116]	; (800aa98 <HAL_RCC_ClockConfig+0x358>)
 800aa24:	6a1b      	ldr	r3, [r3, #32]
 800aa26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d208      	bcs.n	800aa40 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800aa2e:	4b1a      	ldr	r3, [pc, #104]	; (800aa98 <HAL_RCC_ClockConfig+0x358>)
 800aa30:	6a1b      	ldr	r3, [r3, #32]
 800aa32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	69db      	ldr	r3, [r3, #28]
 800aa3a:	4917      	ldr	r1, [pc, #92]	; (800aa98 <HAL_RCC_ClockConfig+0x358>)
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa40:	f000 f834 	bl	800aaac <HAL_RCC_GetSysClockFreq>
 800aa44:	4602      	mov	r2, r0
 800aa46:	4b14      	ldr	r3, [pc, #80]	; (800aa98 <HAL_RCC_ClockConfig+0x358>)
 800aa48:	699b      	ldr	r3, [r3, #24]
 800aa4a:	0a1b      	lsrs	r3, r3, #8
 800aa4c:	f003 030f 	and.w	r3, r3, #15
 800aa50:	4912      	ldr	r1, [pc, #72]	; (800aa9c <HAL_RCC_ClockConfig+0x35c>)
 800aa52:	5ccb      	ldrb	r3, [r1, r3]
 800aa54:	f003 031f 	and.w	r3, r3, #31
 800aa58:	fa22 f303 	lsr.w	r3, r2, r3
 800aa5c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa5e:	4b0e      	ldr	r3, [pc, #56]	; (800aa98 <HAL_RCC_ClockConfig+0x358>)
 800aa60:	699b      	ldr	r3, [r3, #24]
 800aa62:	f003 030f 	and.w	r3, r3, #15
 800aa66:	4a0d      	ldr	r2, [pc, #52]	; (800aa9c <HAL_RCC_ClockConfig+0x35c>)
 800aa68:	5cd3      	ldrb	r3, [r2, r3]
 800aa6a:	f003 031f 	and.w	r3, r3, #31
 800aa6e:	693a      	ldr	r2, [r7, #16]
 800aa70:	fa22 f303 	lsr.w	r3, r2, r3
 800aa74:	4a0a      	ldr	r2, [pc, #40]	; (800aaa0 <HAL_RCC_ClockConfig+0x360>)
 800aa76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aa78:	4a0a      	ldr	r2, [pc, #40]	; (800aaa4 <HAL_RCC_ClockConfig+0x364>)
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800aa7e:	4b0a      	ldr	r3, [pc, #40]	; (800aaa8 <HAL_RCC_ClockConfig+0x368>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7fc f8d6 	bl	8006c34 <HAL_InitTick>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800aa8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3718      	adds	r7, #24
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	58024400 	.word	0x58024400
 800aa9c:	08011470 	.word	0x08011470
 800aaa0:	24000008 	.word	0x24000008
 800aaa4:	24000004 	.word	0x24000004
 800aaa8:	2400000c 	.word	0x2400000c

0800aaac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b089      	sub	sp, #36	; 0x24
 800aab0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aab2:	4bb3      	ldr	r3, [pc, #716]	; (800ad80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aab4:	691b      	ldr	r3, [r3, #16]
 800aab6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aaba:	2b18      	cmp	r3, #24
 800aabc:	f200 8155 	bhi.w	800ad6a <HAL_RCC_GetSysClockFreq+0x2be>
 800aac0:	a201      	add	r2, pc, #4	; (adr r2, 800aac8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800aac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac6:	bf00      	nop
 800aac8:	0800ab2d 	.word	0x0800ab2d
 800aacc:	0800ad6b 	.word	0x0800ad6b
 800aad0:	0800ad6b 	.word	0x0800ad6b
 800aad4:	0800ad6b 	.word	0x0800ad6b
 800aad8:	0800ad6b 	.word	0x0800ad6b
 800aadc:	0800ad6b 	.word	0x0800ad6b
 800aae0:	0800ad6b 	.word	0x0800ad6b
 800aae4:	0800ad6b 	.word	0x0800ad6b
 800aae8:	0800ab53 	.word	0x0800ab53
 800aaec:	0800ad6b 	.word	0x0800ad6b
 800aaf0:	0800ad6b 	.word	0x0800ad6b
 800aaf4:	0800ad6b 	.word	0x0800ad6b
 800aaf8:	0800ad6b 	.word	0x0800ad6b
 800aafc:	0800ad6b 	.word	0x0800ad6b
 800ab00:	0800ad6b 	.word	0x0800ad6b
 800ab04:	0800ad6b 	.word	0x0800ad6b
 800ab08:	0800ab59 	.word	0x0800ab59
 800ab0c:	0800ad6b 	.word	0x0800ad6b
 800ab10:	0800ad6b 	.word	0x0800ad6b
 800ab14:	0800ad6b 	.word	0x0800ad6b
 800ab18:	0800ad6b 	.word	0x0800ad6b
 800ab1c:	0800ad6b 	.word	0x0800ad6b
 800ab20:	0800ad6b 	.word	0x0800ad6b
 800ab24:	0800ad6b 	.word	0x0800ad6b
 800ab28:	0800ab5f 	.word	0x0800ab5f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab2c:	4b94      	ldr	r3, [pc, #592]	; (800ad80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f003 0320 	and.w	r3, r3, #32
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d009      	beq.n	800ab4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab38:	4b91      	ldr	r3, [pc, #580]	; (800ad80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	08db      	lsrs	r3, r3, #3
 800ab3e:	f003 0303 	and.w	r3, r3, #3
 800ab42:	4a90      	ldr	r2, [pc, #576]	; (800ad84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ab44:	fa22 f303 	lsr.w	r3, r2, r3
 800ab48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800ab4a:	e111      	b.n	800ad70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ab4c:	4b8d      	ldr	r3, [pc, #564]	; (800ad84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ab4e:	61bb      	str	r3, [r7, #24]
    break;
 800ab50:	e10e      	b.n	800ad70 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800ab52:	4b8d      	ldr	r3, [pc, #564]	; (800ad88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ab54:	61bb      	str	r3, [r7, #24]
    break;
 800ab56:	e10b      	b.n	800ad70 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800ab58:	4b8c      	ldr	r3, [pc, #560]	; (800ad8c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ab5a:	61bb      	str	r3, [r7, #24]
    break;
 800ab5c:	e108      	b.n	800ad70 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab5e:	4b88      	ldr	r3, [pc, #544]	; (800ad80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab62:	f003 0303 	and.w	r3, r3, #3
 800ab66:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800ab68:	4b85      	ldr	r3, [pc, #532]	; (800ad80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab6c:	091b      	lsrs	r3, r3, #4
 800ab6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab72:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ab74:	4b82      	ldr	r3, [pc, #520]	; (800ad80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab78:	f003 0301 	and.w	r3, r3, #1
 800ab7c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ab7e:	4b80      	ldr	r3, [pc, #512]	; (800ad80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab82:	08db      	lsrs	r3, r3, #3
 800ab84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	fb02 f303 	mul.w	r3, r2, r3
 800ab8e:	ee07 3a90 	vmov	s15, r3
 800ab92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab96:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f000 80e1 	beq.w	800ad64 <HAL_RCC_GetSysClockFreq+0x2b8>
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	f000 8083 	beq.w	800acb0 <HAL_RCC_GetSysClockFreq+0x204>
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	2b02      	cmp	r3, #2
 800abae:	f200 80a1 	bhi.w	800acf4 <HAL_RCC_GetSysClockFreq+0x248>
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d003      	beq.n	800abc0 <HAL_RCC_GetSysClockFreq+0x114>
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d056      	beq.n	800ac6c <HAL_RCC_GetSysClockFreq+0x1c0>
 800abbe:	e099      	b.n	800acf4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abc0:	4b6f      	ldr	r3, [pc, #444]	; (800ad80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f003 0320 	and.w	r3, r3, #32
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d02d      	beq.n	800ac28 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800abcc:	4b6c      	ldr	r3, [pc, #432]	; (800ad80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	08db      	lsrs	r3, r3, #3
 800abd2:	f003 0303 	and.w	r3, r3, #3
 800abd6:	4a6b      	ldr	r2, [pc, #428]	; (800ad84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800abd8:	fa22 f303 	lsr.w	r3, r2, r3
 800abdc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	ee07 3a90 	vmov	s15, r3
 800abe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	ee07 3a90 	vmov	s15, r3
 800abee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abf6:	4b62      	ldr	r3, [pc, #392]	; (800ad80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abfe:	ee07 3a90 	vmov	s15, r3
 800ac02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac06:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac0a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ad90 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800ac26:	e087      	b.n	800ad38 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	ee07 3a90 	vmov	s15, r3
 800ac2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac32:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ad94 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ac36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac3a:	4b51      	ldr	r3, [pc, #324]	; (800ad80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac42:	ee07 3a90 	vmov	s15, r3
 800ac46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac4a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac4e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ad90 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac6a:	e065      	b.n	800ad38 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	ee07 3a90 	vmov	s15, r3
 800ac72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac76:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ad98 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ac7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac7e:	4b40      	ldr	r3, [pc, #256]	; (800ad80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac86:	ee07 3a90 	vmov	s15, r3
 800ac8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac8e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac92:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ad90 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acae:	e043      	b.n	800ad38 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	ee07 3a90 	vmov	s15, r3
 800acb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acba:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ad9c <HAL_RCC_GetSysClockFreq+0x2f0>
 800acbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acc2:	4b2f      	ldr	r3, [pc, #188]	; (800ad80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acca:	ee07 3a90 	vmov	s15, r3
 800acce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acd2:	ed97 6a02 	vldr	s12, [r7, #8]
 800acd6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ad90 <HAL_RCC_GetSysClockFreq+0x2e4>
 800acda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ace2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ace6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acf2:	e021      	b.n	800ad38 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	ee07 3a90 	vmov	s15, r3
 800acfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acfe:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ad98 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ad02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad06:	4b1e      	ldr	r3, [pc, #120]	; (800ad80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad0e:	ee07 3a90 	vmov	s15, r3
 800ad12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad16:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad1a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ad90 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad36:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800ad38:	4b11      	ldr	r3, [pc, #68]	; (800ad80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad3c:	0a5b      	lsrs	r3, r3, #9
 800ad3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad42:	3301      	adds	r3, #1
 800ad44:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	ee07 3a90 	vmov	s15, r3
 800ad4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ad50:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad5c:	ee17 3a90 	vmov	r3, s15
 800ad60:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800ad62:	e005      	b.n	800ad70 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800ad64:	2300      	movs	r3, #0
 800ad66:	61bb      	str	r3, [r7, #24]
    break;
 800ad68:	e002      	b.n	800ad70 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800ad6a:	4b07      	ldr	r3, [pc, #28]	; (800ad88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ad6c:	61bb      	str	r3, [r7, #24]
    break;
 800ad6e:	bf00      	nop
  }

  return sysclockfreq;
 800ad70:	69bb      	ldr	r3, [r7, #24]
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3724      	adds	r7, #36	; 0x24
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr
 800ad7e:	bf00      	nop
 800ad80:	58024400 	.word	0x58024400
 800ad84:	03d09000 	.word	0x03d09000
 800ad88:	003d0900 	.word	0x003d0900
 800ad8c:	007a1200 	.word	0x007a1200
 800ad90:	46000000 	.word	0x46000000
 800ad94:	4c742400 	.word	0x4c742400
 800ad98:	4a742400 	.word	0x4a742400
 800ad9c:	4af42400 	.word	0x4af42400

0800ada0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ada6:	f7ff fe81 	bl	800aaac <HAL_RCC_GetSysClockFreq>
 800adaa:	4602      	mov	r2, r0
 800adac:	4b10      	ldr	r3, [pc, #64]	; (800adf0 <HAL_RCC_GetHCLKFreq+0x50>)
 800adae:	699b      	ldr	r3, [r3, #24]
 800adb0:	0a1b      	lsrs	r3, r3, #8
 800adb2:	f003 030f 	and.w	r3, r3, #15
 800adb6:	490f      	ldr	r1, [pc, #60]	; (800adf4 <HAL_RCC_GetHCLKFreq+0x54>)
 800adb8:	5ccb      	ldrb	r3, [r1, r3]
 800adba:	f003 031f 	and.w	r3, r3, #31
 800adbe:	fa22 f303 	lsr.w	r3, r2, r3
 800adc2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800adc4:	4b0a      	ldr	r3, [pc, #40]	; (800adf0 <HAL_RCC_GetHCLKFreq+0x50>)
 800adc6:	699b      	ldr	r3, [r3, #24]
 800adc8:	f003 030f 	and.w	r3, r3, #15
 800adcc:	4a09      	ldr	r2, [pc, #36]	; (800adf4 <HAL_RCC_GetHCLKFreq+0x54>)
 800adce:	5cd3      	ldrb	r3, [r2, r3]
 800add0:	f003 031f 	and.w	r3, r3, #31
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	fa22 f303 	lsr.w	r3, r2, r3
 800adda:	4a07      	ldr	r2, [pc, #28]	; (800adf8 <HAL_RCC_GetHCLKFreq+0x58>)
 800addc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800adde:	4a07      	ldr	r2, [pc, #28]	; (800adfc <HAL_RCC_GetHCLKFreq+0x5c>)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ade4:	4b04      	ldr	r3, [pc, #16]	; (800adf8 <HAL_RCC_GetHCLKFreq+0x58>)
 800ade6:	681b      	ldr	r3, [r3, #0]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3708      	adds	r7, #8
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	58024400 	.word	0x58024400
 800adf4:	08011470 	.word	0x08011470
 800adf8:	24000008 	.word	0x24000008
 800adfc:	24000004 	.word	0x24000004

0800ae00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ae04:	f7ff ffcc 	bl	800ada0 <HAL_RCC_GetHCLKFreq>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	4b06      	ldr	r3, [pc, #24]	; (800ae24 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae0c:	69db      	ldr	r3, [r3, #28]
 800ae0e:	091b      	lsrs	r3, r3, #4
 800ae10:	f003 0307 	and.w	r3, r3, #7
 800ae14:	4904      	ldr	r1, [pc, #16]	; (800ae28 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ae16:	5ccb      	ldrb	r3, [r1, r3]
 800ae18:	f003 031f 	and.w	r3, r3, #31
 800ae1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	58024400 	.word	0x58024400
 800ae28:	08011470 	.word	0x08011470

0800ae2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ae30:	f7ff ffb6 	bl	800ada0 <HAL_RCC_GetHCLKFreq>
 800ae34:	4602      	mov	r2, r0
 800ae36:	4b06      	ldr	r3, [pc, #24]	; (800ae50 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ae38:	69db      	ldr	r3, [r3, #28]
 800ae3a:	0a1b      	lsrs	r3, r3, #8
 800ae3c:	f003 0307 	and.w	r3, r3, #7
 800ae40:	4904      	ldr	r1, [pc, #16]	; (800ae54 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ae42:	5ccb      	ldrb	r3, [r1, r3]
 800ae44:	f003 031f 	and.w	r3, r3, #31
 800ae48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	58024400 	.word	0x58024400
 800ae54:	08011470 	.word	0x08011470

0800ae58 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b086      	sub	sp, #24
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ae60:	2300      	movs	r3, #0
 800ae62:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ae64:	2300      	movs	r3, #0
 800ae66:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d03f      	beq.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae7c:	d02a      	beq.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ae7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae82:	d824      	bhi.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ae84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae88:	d018      	beq.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ae8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae8e:	d81e      	bhi.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d003      	beq.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ae94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae98:	d007      	beq.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x52>
 800ae9a:	e018      	b.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae9c:	4ba4      	ldr	r3, [pc, #656]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ae9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea0:	4aa3      	ldr	r2, [pc, #652]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800aea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aea6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800aea8:	e015      	b.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	3304      	adds	r3, #4
 800aeae:	2102      	movs	r1, #2
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f001 f989 	bl	800c1c8 <RCCEx_PLL2_Config>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800aeba:	e00c      	b.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	3324      	adds	r3, #36	; 0x24
 800aec0:	2102      	movs	r1, #2
 800aec2:	4618      	mov	r0, r3
 800aec4:	f001 fa32 	bl	800c32c <RCCEx_PLL3_Config>
 800aec8:	4603      	mov	r3, r0
 800aeca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800aecc:	e003      	b.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	75fb      	strb	r3, [r7, #23]
      break;
 800aed2:	e000      	b.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800aed4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aed6:	7dfb      	ldrb	r3, [r7, #23]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d109      	bne.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aedc:	4b94      	ldr	r3, [pc, #592]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800aede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aee0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aee8:	4991      	ldr	r1, [pc, #580]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800aeea:	4313      	orrs	r3, r2
 800aeec:	650b      	str	r3, [r1, #80]	; 0x50
 800aeee:	e001      	b.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aef0:	7dfb      	ldrb	r3, [r7, #23]
 800aef2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d03d      	beq.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af04:	2b04      	cmp	r3, #4
 800af06:	d826      	bhi.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800af08:	a201      	add	r2, pc, #4	; (adr r2, 800af10 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800af0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af0e:	bf00      	nop
 800af10:	0800af25 	.word	0x0800af25
 800af14:	0800af33 	.word	0x0800af33
 800af18:	0800af45 	.word	0x0800af45
 800af1c:	0800af5d 	.word	0x0800af5d
 800af20:	0800af5d 	.word	0x0800af5d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af24:	4b82      	ldr	r3, [pc, #520]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800af26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af28:	4a81      	ldr	r2, [pc, #516]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800af2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af30:	e015      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	3304      	adds	r3, #4
 800af36:	2100      	movs	r1, #0
 800af38:	4618      	mov	r0, r3
 800af3a:	f001 f945 	bl	800c1c8 <RCCEx_PLL2_Config>
 800af3e:	4603      	mov	r3, r0
 800af40:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af42:	e00c      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	3324      	adds	r3, #36	; 0x24
 800af48:	2100      	movs	r1, #0
 800af4a:	4618      	mov	r0, r3
 800af4c:	f001 f9ee 	bl	800c32c <RCCEx_PLL3_Config>
 800af50:	4603      	mov	r3, r0
 800af52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af54:	e003      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af56:	2301      	movs	r3, #1
 800af58:	75fb      	strb	r3, [r7, #23]
      break;
 800af5a:	e000      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800af5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af5e:	7dfb      	ldrb	r3, [r7, #23]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d109      	bne.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800af64:	4b72      	ldr	r3, [pc, #456]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800af66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af68:	f023 0207 	bic.w	r2, r3, #7
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af70:	496f      	ldr	r1, [pc, #444]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800af72:	4313      	orrs	r3, r2
 800af74:	650b      	str	r3, [r1, #80]	; 0x50
 800af76:	e001      	b.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af78:	7dfb      	ldrb	r3, [r7, #23]
 800af7a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af84:	2b00      	cmp	r3, #0
 800af86:	d051      	beq.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800af8e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800af92:	d036      	beq.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800af94:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800af98:	d830      	bhi.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800af9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af9e:	d032      	beq.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800afa0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800afa4:	d82a      	bhi.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800afa6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800afaa:	d02e      	beq.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800afac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800afb0:	d824      	bhi.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800afb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800afb6:	d018      	beq.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x192>
 800afb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800afbc:	d81e      	bhi.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d003      	beq.n	800afca <HAL_RCCEx_PeriphCLKConfig+0x172>
 800afc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afc6:	d007      	beq.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800afc8:	e018      	b.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afca:	4b59      	ldr	r3, [pc, #356]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800afcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afce:	4a58      	ldr	r2, [pc, #352]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800afd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800afd6:	e019      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	3304      	adds	r3, #4
 800afdc:	2100      	movs	r1, #0
 800afde:	4618      	mov	r0, r3
 800afe0:	f001 f8f2 	bl	800c1c8 <RCCEx_PLL2_Config>
 800afe4:	4603      	mov	r3, r0
 800afe6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800afe8:	e010      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	3324      	adds	r3, #36	; 0x24
 800afee:	2100      	movs	r1, #0
 800aff0:	4618      	mov	r0, r3
 800aff2:	f001 f99b 	bl	800c32c <RCCEx_PLL3_Config>
 800aff6:	4603      	mov	r3, r0
 800aff8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800affa:	e007      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	75fb      	strb	r3, [r7, #23]
      break;
 800b000:	e004      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800b002:	bf00      	nop
 800b004:	e002      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800b006:	bf00      	nop
 800b008:	e000      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800b00a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b00c:	7dfb      	ldrb	r3, [r7, #23]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10a      	bne.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b012:	4b47      	ldr	r3, [pc, #284]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b016:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b020:	4943      	ldr	r1, [pc, #268]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b022:	4313      	orrs	r3, r2
 800b024:	658b      	str	r3, [r1, #88]	; 0x58
 800b026:	e001      	b.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b028:	7dfb      	ldrb	r3, [r7, #23]
 800b02a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b034:	2b00      	cmp	r3, #0
 800b036:	d051      	beq.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b03e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b042:	d036      	beq.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800b044:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b048:	d830      	bhi.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 800b04a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b04e:	d032      	beq.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800b050:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b054:	d82a      	bhi.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 800b056:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b05a:	d02e      	beq.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x262>
 800b05c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b060:	d824      	bhi.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 800b062:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b066:	d018      	beq.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x242>
 800b068:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b06c:	d81e      	bhi.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d003      	beq.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x222>
 800b072:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b076:	d007      	beq.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b078:	e018      	b.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b07a:	4b2d      	ldr	r3, [pc, #180]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b07e:	4a2c      	ldr	r2, [pc, #176]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b084:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b086:	e019      	b.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	3304      	adds	r3, #4
 800b08c:	2100      	movs	r1, #0
 800b08e:	4618      	mov	r0, r3
 800b090:	f001 f89a 	bl	800c1c8 <RCCEx_PLL2_Config>
 800b094:	4603      	mov	r3, r0
 800b096:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b098:	e010      	b.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	3324      	adds	r3, #36	; 0x24
 800b09e:	2100      	movs	r1, #0
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f001 f943 	bl	800c32c <RCCEx_PLL3_Config>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b0aa:	e007      	b.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	75fb      	strb	r3, [r7, #23]
      break;
 800b0b0:	e004      	b.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800b0b2:	bf00      	nop
 800b0b4:	e002      	b.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800b0b6:	bf00      	nop
 800b0b8:	e000      	b.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800b0ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0bc:	7dfb      	ldrb	r3, [r7, #23]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d10a      	bne.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b0c2:	4b1b      	ldr	r3, [pc, #108]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b0c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0c6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b0d0:	4917      	ldr	r1, [pc, #92]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	658b      	str	r3, [r1, #88]	; 0x58
 800b0d6:	e001      	b.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0d8:	7dfb      	ldrb	r3, [r7, #23]
 800b0da:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d035      	beq.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0ec:	2b30      	cmp	r3, #48	; 0x30
 800b0ee:	d01c      	beq.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b0f0:	2b30      	cmp	r3, #48	; 0x30
 800b0f2:	d817      	bhi.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800b0f4:	2b20      	cmp	r3, #32
 800b0f6:	d00c      	beq.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800b0f8:	2b20      	cmp	r3, #32
 800b0fa:	d813      	bhi.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d019      	beq.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800b100:	2b10      	cmp	r3, #16
 800b102:	d10f      	bne.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b104:	4b0a      	ldr	r3, [pc, #40]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b108:	4a09      	ldr	r2, [pc, #36]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800b10a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b10e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800b110:	e011      	b.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	3304      	adds	r3, #4
 800b116:	2102      	movs	r1, #2
 800b118:	4618      	mov	r0, r3
 800b11a:	f001 f855 	bl	800c1c8 <RCCEx_PLL2_Config>
 800b11e:	4603      	mov	r3, r0
 800b120:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800b122:	e008      	b.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b124:	2301      	movs	r3, #1
 800b126:	75fb      	strb	r3, [r7, #23]
      break;
 800b128:	e005      	b.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800b12a:	bf00      	nop
 800b12c:	e003      	b.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b12e:	bf00      	nop
 800b130:	58024400 	.word	0x58024400
      break;
 800b134:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b136:	7dfb      	ldrb	r3, [r7, #23]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d109      	bne.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b13c:	4ba3      	ldr	r3, [pc, #652]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b13e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b140:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b148:	49a0      	ldr	r1, [pc, #640]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b14a:	4313      	orrs	r3, r2
 800b14c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b14e:	e001      	b.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b150:	7dfb      	ldrb	r3, [r7, #23]
 800b152:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d047      	beq.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b168:	d030      	beq.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x374>
 800b16a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b16e:	d82a      	bhi.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b170:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b174:	d02c      	beq.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800b176:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b17a:	d824      	bhi.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b17c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b180:	d018      	beq.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b186:	d81e      	bhi.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d003      	beq.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b18c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b190:	d007      	beq.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b192:	e018      	b.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b194:	4b8d      	ldr	r3, [pc, #564]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b198:	4a8c      	ldr	r2, [pc, #560]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b19a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b19e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b1a0:	e017      	b.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	3304      	adds	r3, #4
 800b1a6:	2100      	movs	r1, #0
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f001 f80d 	bl	800c1c8 <RCCEx_PLL2_Config>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b1b2:	e00e      	b.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	3324      	adds	r3, #36	; 0x24
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f001 f8b6 	bl	800c32c <RCCEx_PLL3_Config>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b1c4:	e005      	b.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	75fb      	strb	r3, [r7, #23]
      break;
 800b1ca:	e002      	b.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800b1cc:	bf00      	nop
 800b1ce:	e000      	b.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800b1d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1d2:	7dfb      	ldrb	r3, [r7, #23]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d109      	bne.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b1d8:	4b7c      	ldr	r3, [pc, #496]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b1da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1e4:	4979      	ldr	r1, [pc, #484]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	650b      	str	r3, [r1, #80]	; 0x50
 800b1ea:	e001      	b.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1ec:	7dfb      	ldrb	r3, [r7, #23]
 800b1ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d049      	beq.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b204:	d02e      	beq.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800b206:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b20a:	d828      	bhi.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800b20c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b210:	d02a      	beq.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b212:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b216:	d822      	bhi.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800b218:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b21c:	d026      	beq.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800b21e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b222:	d81c      	bhi.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800b224:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b228:	d010      	beq.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b22a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b22e:	d816      	bhi.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800b230:	2b00      	cmp	r3, #0
 800b232:	d01d      	beq.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800b234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b238:	d111      	bne.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	3304      	adds	r3, #4
 800b23e:	2101      	movs	r1, #1
 800b240:	4618      	mov	r0, r3
 800b242:	f000 ffc1 	bl	800c1c8 <RCCEx_PLL2_Config>
 800b246:	4603      	mov	r3, r0
 800b248:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b24a:	e012      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	3324      	adds	r3, #36	; 0x24
 800b250:	2101      	movs	r1, #1
 800b252:	4618      	mov	r0, r3
 800b254:	f001 f86a 	bl	800c32c <RCCEx_PLL3_Config>
 800b258:	4603      	mov	r3, r0
 800b25a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b25c:	e009      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	75fb      	strb	r3, [r7, #23]
      break;
 800b262:	e006      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800b264:	bf00      	nop
 800b266:	e004      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800b268:	bf00      	nop
 800b26a:	e002      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800b26c:	bf00      	nop
 800b26e:	e000      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800b270:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b272:	7dfb      	ldrb	r3, [r7, #23]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d109      	bne.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b278:	4b54      	ldr	r3, [pc, #336]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b27a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b27c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b284:	4951      	ldr	r1, [pc, #324]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b286:	4313      	orrs	r3, r2
 800b288:	650b      	str	r3, [r1, #80]	; 0x50
 800b28a:	e001      	b.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b28c:	7dfb      	ldrb	r3, [r7, #23]
 800b28e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d04b      	beq.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b2a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2a6:	d02e      	beq.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800b2a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2ac:	d828      	bhi.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b2ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2b2:	d02a      	beq.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800b2b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2b8:	d822      	bhi.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b2ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2be:	d026      	beq.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800b2c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2c4:	d81c      	bhi.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b2c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2ca:	d010      	beq.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0x496>
 800b2cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2d0:	d816      	bhi.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d01d      	beq.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800b2d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2da:	d111      	bne.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	3304      	adds	r3, #4
 800b2e0:	2101      	movs	r1, #1
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f000 ff70 	bl	800c1c8 <RCCEx_PLL2_Config>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b2ec:	e012      	b.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	3324      	adds	r3, #36	; 0x24
 800b2f2:	2101      	movs	r1, #1
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f001 f819 	bl	800c32c <RCCEx_PLL3_Config>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b2fe:	e009      	b.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b300:	2301      	movs	r3, #1
 800b302:	75fb      	strb	r3, [r7, #23]
      break;
 800b304:	e006      	b.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800b306:	bf00      	nop
 800b308:	e004      	b.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800b30a:	bf00      	nop
 800b30c:	e002      	b.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800b30e:	bf00      	nop
 800b310:	e000      	b.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800b312:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b314:	7dfb      	ldrb	r3, [r7, #23]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d10a      	bne.n	800b330 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b31a:	4b2c      	ldr	r3, [pc, #176]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b31c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b31e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b328:	4928      	ldr	r1, [pc, #160]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b32a:	4313      	orrs	r3, r2
 800b32c:	658b      	str	r3, [r1, #88]	; 0x58
 800b32e:	e001      	b.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b330:	7dfb      	ldrb	r3, [r7, #23]
 800b332:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d02f      	beq.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b348:	d00e      	beq.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800b34a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b34e:	d814      	bhi.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x522>
 800b350:	2b00      	cmp	r3, #0
 800b352:	d015      	beq.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800b354:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b358:	d10f      	bne.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b35a:	4b1c      	ldr	r3, [pc, #112]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b35e:	4a1b      	ldr	r2, [pc, #108]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b364:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b366:	e00c      	b.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	3304      	adds	r3, #4
 800b36c:	2101      	movs	r1, #1
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 ff2a 	bl	800c1c8 <RCCEx_PLL2_Config>
 800b374:	4603      	mov	r3, r0
 800b376:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b378:	e003      	b.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b37a:	2301      	movs	r3, #1
 800b37c:	75fb      	strb	r3, [r7, #23]
      break;
 800b37e:	e000      	b.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800b380:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b382:	7dfb      	ldrb	r3, [r7, #23]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d109      	bne.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b388:	4b10      	ldr	r3, [pc, #64]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b38a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b38c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b394:	490d      	ldr	r1, [pc, #52]	; (800b3cc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b396:	4313      	orrs	r3, r2
 800b398:	650b      	str	r3, [r1, #80]	; 0x50
 800b39a:	e001      	b.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b39c:	7dfb      	ldrb	r3, [r7, #23]
 800b39e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d034      	beq.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3b0:	2b03      	cmp	r3, #3
 800b3b2:	d81d      	bhi.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800b3b4:	a201      	add	r2, pc, #4	; (adr r2, 800b3bc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800b3b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ba:	bf00      	nop
 800b3bc:	0800b3f7 	.word	0x0800b3f7
 800b3c0:	0800b3d1 	.word	0x0800b3d1
 800b3c4:	0800b3df 	.word	0x0800b3df
 800b3c8:	0800b3f7 	.word	0x0800b3f7
 800b3cc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3d0:	4bb1      	ldr	r3, [pc, #708]	; (800b698 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d4:	4ab0      	ldr	r2, [pc, #704]	; (800b698 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b3d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b3dc:	e00c      	b.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	3304      	adds	r3, #4
 800b3e2:	2102      	movs	r1, #2
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f000 feef 	bl	800c1c8 <RCCEx_PLL2_Config>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b3ee:	e003      	b.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	75fb      	strb	r3, [r7, #23]
      break;
 800b3f4:	e000      	b.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800b3f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3f8:	7dfb      	ldrb	r3, [r7, #23]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d109      	bne.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b3fe:	4ba6      	ldr	r3, [pc, #664]	; (800b698 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b402:	f023 0203 	bic.w	r2, r3, #3
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b40a:	49a3      	ldr	r1, [pc, #652]	; (800b698 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b40c:	4313      	orrs	r3, r2
 800b40e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b410:	e001      	b.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b412:	7dfb      	ldrb	r3, [r7, #23]
 800b414:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b41e:	2b00      	cmp	r3, #0
 800b420:	f000 8086 	beq.w	800b530 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b424:	4b9d      	ldr	r3, [pc, #628]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a9c      	ldr	r2, [pc, #624]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800b42a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b42e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b430:	f7fb fc4a 	bl	8006cc8 <HAL_GetTick>
 800b434:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b436:	e009      	b.n	800b44c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b438:	f7fb fc46 	bl	8006cc8 <HAL_GetTick>
 800b43c:	4602      	mov	r2, r0
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	1ad3      	subs	r3, r2, r3
 800b442:	2b64      	cmp	r3, #100	; 0x64
 800b444:	d902      	bls.n	800b44c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800b446:	2303      	movs	r3, #3
 800b448:	75fb      	strb	r3, [r7, #23]
        break;
 800b44a:	e005      	b.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b44c:	4b93      	ldr	r3, [pc, #588]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b454:	2b00      	cmp	r3, #0
 800b456:	d0ef      	beq.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800b458:	7dfb      	ldrb	r3, [r7, #23]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d166      	bne.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b45e:	4b8e      	ldr	r3, [pc, #568]	; (800b698 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b460:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b468:	4053      	eors	r3, r2
 800b46a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d013      	beq.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b472:	4b89      	ldr	r3, [pc, #548]	; (800b698 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b47a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b47c:	4b86      	ldr	r3, [pc, #536]	; (800b698 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b47e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b480:	4a85      	ldr	r2, [pc, #532]	; (800b698 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b486:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b488:	4b83      	ldr	r3, [pc, #524]	; (800b698 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b48a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b48c:	4a82      	ldr	r2, [pc, #520]	; (800b698 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b48e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b492:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b494:	4a80      	ldr	r2, [pc, #512]	; (800b698 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b4a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4a4:	d115      	bne.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4a6:	f7fb fc0f 	bl	8006cc8 <HAL_GetTick>
 800b4aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b4ac:	e00b      	b.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4ae:	f7fb fc0b 	bl	8006cc8 <HAL_GetTick>
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	1ad3      	subs	r3, r2, r3
 800b4b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d902      	bls.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800b4c0:	2303      	movs	r3, #3
 800b4c2:	75fb      	strb	r3, [r7, #23]
            break;
 800b4c4:	e005      	b.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b4c6:	4b74      	ldr	r3, [pc, #464]	; (800b698 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b4c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4ca:	f003 0302 	and.w	r3, r3, #2
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d0ed      	beq.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800b4d2:	7dfb      	ldrb	r3, [r7, #23]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d126      	bne.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b4de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4e6:	d10d      	bne.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800b4e8:	4b6b      	ldr	r3, [pc, #428]	; (800b698 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b4ea:	691b      	ldr	r3, [r3, #16]
 800b4ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b4f6:	0919      	lsrs	r1, r3, #4
 800b4f8:	4b69      	ldr	r3, [pc, #420]	; (800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b4fa:	400b      	ands	r3, r1
 800b4fc:	4966      	ldr	r1, [pc, #408]	; (800b698 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b4fe:	4313      	orrs	r3, r2
 800b500:	610b      	str	r3, [r1, #16]
 800b502:	e005      	b.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800b504:	4b64      	ldr	r3, [pc, #400]	; (800b698 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b506:	691b      	ldr	r3, [r3, #16]
 800b508:	4a63      	ldr	r2, [pc, #396]	; (800b698 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b50a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b50e:	6113      	str	r3, [r2, #16]
 800b510:	4b61      	ldr	r3, [pc, #388]	; (800b698 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b512:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b51a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b51e:	495e      	ldr	r1, [pc, #376]	; (800b698 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b520:	4313      	orrs	r3, r2
 800b522:	670b      	str	r3, [r1, #112]	; 0x70
 800b524:	e004      	b.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b526:	7dfb      	ldrb	r3, [r7, #23]
 800b528:	75bb      	strb	r3, [r7, #22]
 800b52a:	e001      	b.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b52c:	7dfb      	ldrb	r3, [r7, #23]
 800b52e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f003 0301 	and.w	r3, r3, #1
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d07e      	beq.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b540:	2b28      	cmp	r3, #40	; 0x28
 800b542:	d867      	bhi.n	800b614 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800b544:	a201      	add	r2, pc, #4	; (adr r2, 800b54c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800b546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b54a:	bf00      	nop
 800b54c:	0800b61b 	.word	0x0800b61b
 800b550:	0800b615 	.word	0x0800b615
 800b554:	0800b615 	.word	0x0800b615
 800b558:	0800b615 	.word	0x0800b615
 800b55c:	0800b615 	.word	0x0800b615
 800b560:	0800b615 	.word	0x0800b615
 800b564:	0800b615 	.word	0x0800b615
 800b568:	0800b615 	.word	0x0800b615
 800b56c:	0800b5f1 	.word	0x0800b5f1
 800b570:	0800b615 	.word	0x0800b615
 800b574:	0800b615 	.word	0x0800b615
 800b578:	0800b615 	.word	0x0800b615
 800b57c:	0800b615 	.word	0x0800b615
 800b580:	0800b615 	.word	0x0800b615
 800b584:	0800b615 	.word	0x0800b615
 800b588:	0800b615 	.word	0x0800b615
 800b58c:	0800b603 	.word	0x0800b603
 800b590:	0800b615 	.word	0x0800b615
 800b594:	0800b615 	.word	0x0800b615
 800b598:	0800b615 	.word	0x0800b615
 800b59c:	0800b615 	.word	0x0800b615
 800b5a0:	0800b615 	.word	0x0800b615
 800b5a4:	0800b615 	.word	0x0800b615
 800b5a8:	0800b615 	.word	0x0800b615
 800b5ac:	0800b61b 	.word	0x0800b61b
 800b5b0:	0800b615 	.word	0x0800b615
 800b5b4:	0800b615 	.word	0x0800b615
 800b5b8:	0800b615 	.word	0x0800b615
 800b5bc:	0800b615 	.word	0x0800b615
 800b5c0:	0800b615 	.word	0x0800b615
 800b5c4:	0800b615 	.word	0x0800b615
 800b5c8:	0800b615 	.word	0x0800b615
 800b5cc:	0800b61b 	.word	0x0800b61b
 800b5d0:	0800b615 	.word	0x0800b615
 800b5d4:	0800b615 	.word	0x0800b615
 800b5d8:	0800b615 	.word	0x0800b615
 800b5dc:	0800b615 	.word	0x0800b615
 800b5e0:	0800b615 	.word	0x0800b615
 800b5e4:	0800b615 	.word	0x0800b615
 800b5e8:	0800b615 	.word	0x0800b615
 800b5ec:	0800b61b 	.word	0x0800b61b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	3304      	adds	r3, #4
 800b5f4:	2101      	movs	r1, #1
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f000 fde6 	bl	800c1c8 <RCCEx_PLL2_Config>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b600:	e00c      	b.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	3324      	adds	r3, #36	; 0x24
 800b606:	2101      	movs	r1, #1
 800b608:	4618      	mov	r0, r3
 800b60a:	f000 fe8f 	bl	800c32c <RCCEx_PLL3_Config>
 800b60e:	4603      	mov	r3, r0
 800b610:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b612:	e003      	b.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b614:	2301      	movs	r3, #1
 800b616:	75fb      	strb	r3, [r7, #23]
      break;
 800b618:	e000      	b.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800b61a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b61c:	7dfb      	ldrb	r3, [r7, #23]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d109      	bne.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b622:	4b1d      	ldr	r3, [pc, #116]	; (800b698 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b626:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b62e:	491a      	ldr	r1, [pc, #104]	; (800b698 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b630:	4313      	orrs	r3, r2
 800b632:	654b      	str	r3, [r1, #84]	; 0x54
 800b634:	e001      	b.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b636:	7dfb      	ldrb	r3, [r7, #23]
 800b638:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f003 0302 	and.w	r3, r3, #2
 800b642:	2b00      	cmp	r3, #0
 800b644:	d03e      	beq.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b64a:	2b05      	cmp	r3, #5
 800b64c:	d820      	bhi.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800b64e:	a201      	add	r2, pc, #4	; (adr r2, 800b654 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800b650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b654:	0800b6a5 	.word	0x0800b6a5
 800b658:	0800b66d 	.word	0x0800b66d
 800b65c:	0800b67f 	.word	0x0800b67f
 800b660:	0800b6a5 	.word	0x0800b6a5
 800b664:	0800b6a5 	.word	0x0800b6a5
 800b668:	0800b6a5 	.word	0x0800b6a5
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	3304      	adds	r3, #4
 800b670:	2101      	movs	r1, #1
 800b672:	4618      	mov	r0, r3
 800b674:	f000 fda8 	bl	800c1c8 <RCCEx_PLL2_Config>
 800b678:	4603      	mov	r3, r0
 800b67a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b67c:	e013      	b.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	3324      	adds	r3, #36	; 0x24
 800b682:	2101      	movs	r1, #1
 800b684:	4618      	mov	r0, r3
 800b686:	f000 fe51 	bl	800c32c <RCCEx_PLL3_Config>
 800b68a:	4603      	mov	r3, r0
 800b68c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b68e:	e00a      	b.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b690:	2301      	movs	r3, #1
 800b692:	75fb      	strb	r3, [r7, #23]
      break;
 800b694:	e007      	b.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800b696:	bf00      	nop
 800b698:	58024400 	.word	0x58024400
 800b69c:	58024800 	.word	0x58024800
 800b6a0:	00ffffcf 	.word	0x00ffffcf
      break;
 800b6a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6a6:	7dfb      	ldrb	r3, [r7, #23]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d109      	bne.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b6ac:	4b9f      	ldr	r3, [pc, #636]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b6ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6b0:	f023 0207 	bic.w	r2, r3, #7
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6b8:	499c      	ldr	r1, [pc, #624]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	654b      	str	r3, [r1, #84]	; 0x54
 800b6be:	e001      	b.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6c0:	7dfb      	ldrb	r3, [r7, #23]
 800b6c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f003 0304 	and.w	r3, r3, #4
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d039      	beq.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6d6:	2b05      	cmp	r3, #5
 800b6d8:	d820      	bhi.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800b6da:	a201      	add	r2, pc, #4	; (adr r2, 800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e0:	0800b723 	.word	0x0800b723
 800b6e4:	0800b6f9 	.word	0x0800b6f9
 800b6e8:	0800b70b 	.word	0x0800b70b
 800b6ec:	0800b723 	.word	0x0800b723
 800b6f0:	0800b723 	.word	0x0800b723
 800b6f4:	0800b723 	.word	0x0800b723
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	3304      	adds	r3, #4
 800b6fc:	2101      	movs	r1, #1
 800b6fe:	4618      	mov	r0, r3
 800b700:	f000 fd62 	bl	800c1c8 <RCCEx_PLL2_Config>
 800b704:	4603      	mov	r3, r0
 800b706:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b708:	e00c      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	3324      	adds	r3, #36	; 0x24
 800b70e:	2101      	movs	r1, #1
 800b710:	4618      	mov	r0, r3
 800b712:	f000 fe0b 	bl	800c32c <RCCEx_PLL3_Config>
 800b716:	4603      	mov	r3, r0
 800b718:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b71a:	e003      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b71c:	2301      	movs	r3, #1
 800b71e:	75fb      	strb	r3, [r7, #23]
      break;
 800b720:	e000      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800b722:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b724:	7dfb      	ldrb	r3, [r7, #23]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d10a      	bne.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b72a:	4b80      	ldr	r3, [pc, #512]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b72c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b72e:	f023 0207 	bic.w	r2, r3, #7
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b738:	497c      	ldr	r1, [pc, #496]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b73a:	4313      	orrs	r3, r2
 800b73c:	658b      	str	r3, [r1, #88]	; 0x58
 800b73e:	e001      	b.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b740:	7dfb      	ldrb	r3, [r7, #23]
 800b742:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f003 0320 	and.w	r3, r3, #32
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d04b      	beq.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b756:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b75a:	d02e      	beq.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x962>
 800b75c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b760:	d828      	bhi.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800b762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b766:	d02a      	beq.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x966>
 800b768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b76c:	d822      	bhi.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800b76e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b772:	d026      	beq.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800b774:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b778:	d81c      	bhi.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800b77a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b77e:	d010      	beq.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800b780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b784:	d816      	bhi.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800b786:	2b00      	cmp	r3, #0
 800b788:	d01d      	beq.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800b78a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b78e:	d111      	bne.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	3304      	adds	r3, #4
 800b794:	2100      	movs	r1, #0
 800b796:	4618      	mov	r0, r3
 800b798:	f000 fd16 	bl	800c1c8 <RCCEx_PLL2_Config>
 800b79c:	4603      	mov	r3, r0
 800b79e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b7a0:	e012      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	3324      	adds	r3, #36	; 0x24
 800b7a6:	2102      	movs	r1, #2
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f000 fdbf 	bl	800c32c <RCCEx_PLL3_Config>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b7b2:	e009      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	75fb      	strb	r3, [r7, #23]
      break;
 800b7b8:	e006      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800b7ba:	bf00      	nop
 800b7bc:	e004      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800b7be:	bf00      	nop
 800b7c0:	e002      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800b7c2:	bf00      	nop
 800b7c4:	e000      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800b7c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7c8:	7dfb      	ldrb	r3, [r7, #23]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d10a      	bne.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b7ce:	4b57      	ldr	r3, [pc, #348]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7d2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7dc:	4953      	ldr	r1, [pc, #332]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	654b      	str	r3, [r1, #84]	; 0x54
 800b7e2:	e001      	b.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e4:	7dfb      	ldrb	r3, [r7, #23]
 800b7e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d04b      	beq.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b7fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b7fe:	d02e      	beq.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800b800:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b804:	d828      	bhi.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800b806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b80a:	d02a      	beq.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800b80c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b810:	d822      	bhi.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800b812:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b816:	d026      	beq.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800b818:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b81c:	d81c      	bhi.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800b81e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b822:	d010      	beq.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800b824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b828:	d816      	bhi.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d01d      	beq.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800b82e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b832:	d111      	bne.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	3304      	adds	r3, #4
 800b838:	2100      	movs	r1, #0
 800b83a:	4618      	mov	r0, r3
 800b83c:	f000 fcc4 	bl	800c1c8 <RCCEx_PLL2_Config>
 800b840:	4603      	mov	r3, r0
 800b842:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b844:	e012      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	3324      	adds	r3, #36	; 0x24
 800b84a:	2102      	movs	r1, #2
 800b84c:	4618      	mov	r0, r3
 800b84e:	f000 fd6d 	bl	800c32c <RCCEx_PLL3_Config>
 800b852:	4603      	mov	r3, r0
 800b854:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b856:	e009      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b858:	2301      	movs	r3, #1
 800b85a:	75fb      	strb	r3, [r7, #23]
      break;
 800b85c:	e006      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800b85e:	bf00      	nop
 800b860:	e004      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800b862:	bf00      	nop
 800b864:	e002      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800b866:	bf00      	nop
 800b868:	e000      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800b86a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b86c:	7dfb      	ldrb	r3, [r7, #23]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d10a      	bne.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b872:	4b2e      	ldr	r3, [pc, #184]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b876:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b880:	492a      	ldr	r1, [pc, #168]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b882:	4313      	orrs	r3, r2
 800b884:	658b      	str	r3, [r1, #88]	; 0x58
 800b886:	e001      	b.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b888:	7dfb      	ldrb	r3, [r7, #23]
 800b88a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b894:	2b00      	cmp	r3, #0
 800b896:	d04d      	beq.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b89e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b8a2:	d02e      	beq.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800b8a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b8a8:	d828      	bhi.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800b8aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8ae:	d02a      	beq.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800b8b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8b4:	d822      	bhi.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800b8b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b8ba:	d026      	beq.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800b8bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b8c0:	d81c      	bhi.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800b8c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8c6:	d010      	beq.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800b8c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8cc:	d816      	bhi.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d01d      	beq.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800b8d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8d6:	d111      	bne.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	3304      	adds	r3, #4
 800b8dc:	2100      	movs	r1, #0
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f000 fc72 	bl	800c1c8 <RCCEx_PLL2_Config>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b8e8:	e012      	b.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	3324      	adds	r3, #36	; 0x24
 800b8ee:	2102      	movs	r1, #2
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f000 fd1b 	bl	800c32c <RCCEx_PLL3_Config>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b8fa:	e009      	b.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	75fb      	strb	r3, [r7, #23]
      break;
 800b900:	e006      	b.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800b902:	bf00      	nop
 800b904:	e004      	b.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800b906:	bf00      	nop
 800b908:	e002      	b.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800b90a:	bf00      	nop
 800b90c:	e000      	b.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800b90e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b910:	7dfb      	ldrb	r3, [r7, #23]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d10c      	bne.n	800b930 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b916:	4b05      	ldr	r3, [pc, #20]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b91a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b924:	4901      	ldr	r1, [pc, #4]	; (800b92c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b926:	4313      	orrs	r3, r2
 800b928:	658b      	str	r3, [r1, #88]	; 0x58
 800b92a:	e003      	b.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800b92c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b930:	7dfb      	ldrb	r3, [r7, #23]
 800b932:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f003 0308 	and.w	r3, r3, #8
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d018      	beq.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b948:	d10a      	bne.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	3324      	adds	r3, #36	; 0x24
 800b94e:	2102      	movs	r1, #2
 800b950:	4618      	mov	r0, r3
 800b952:	f000 fceb 	bl	800c32c <RCCEx_PLL3_Config>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d001      	beq.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800b95c:	2301      	movs	r3, #1
 800b95e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b960:	4b8a      	ldr	r3, [pc, #552]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b964:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b96c:	4987      	ldr	r1, [pc, #540]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b96e:	4313      	orrs	r3, r2
 800b970:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f003 0310 	and.w	r3, r3, #16
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d01a      	beq.n	800b9b4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b988:	d10a      	bne.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	3324      	adds	r3, #36	; 0x24
 800b98e:	2102      	movs	r1, #2
 800b990:	4618      	mov	r0, r3
 800b992:	f000 fccb 	bl	800c32c <RCCEx_PLL3_Config>
 800b996:	4603      	mov	r3, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d001      	beq.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800b99c:	2301      	movs	r3, #1
 800b99e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b9a0:	4b7a      	ldr	r3, [pc, #488]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b9a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9ae:	4977      	ldr	r1, [pc, #476]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d034      	beq.n	800ba2a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b9c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9ca:	d01d      	beq.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800b9cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9d0:	d817      	bhi.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d003      	beq.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800b9d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9da:	d009      	beq.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b9dc:	e011      	b.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	3304      	adds	r3, #4
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f000 fbef 	bl	800c1c8 <RCCEx_PLL2_Config>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b9ee:	e00c      	b.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	3324      	adds	r3, #36	; 0x24
 800b9f4:	2102      	movs	r1, #2
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f000 fc98 	bl	800c32c <RCCEx_PLL3_Config>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ba00:	e003      	b.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba02:	2301      	movs	r3, #1
 800ba04:	75fb      	strb	r3, [r7, #23]
      break;
 800ba06:	e000      	b.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800ba08:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba0a:	7dfb      	ldrb	r3, [r7, #23]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d10a      	bne.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ba10:	4b5e      	ldr	r3, [pc, #376]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ba12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba1e:	495b      	ldr	r1, [pc, #364]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ba20:	4313      	orrs	r3, r2
 800ba22:	658b      	str	r3, [r1, #88]	; 0x58
 800ba24:	e001      	b.n	800ba2a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
 800ba28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d033      	beq.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ba40:	d01c      	beq.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800ba42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ba46:	d816      	bhi.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ba48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba4c:	d003      	beq.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800ba4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba52:	d007      	beq.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800ba54:	e00f      	b.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba56:	4b4d      	ldr	r3, [pc, #308]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ba58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5a:	4a4c      	ldr	r2, [pc, #304]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ba5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800ba62:	e00c      	b.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	3324      	adds	r3, #36	; 0x24
 800ba68:	2101      	movs	r1, #1
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f000 fc5e 	bl	800c32c <RCCEx_PLL3_Config>
 800ba70:	4603      	mov	r3, r0
 800ba72:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800ba74:	e003      	b.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba76:	2301      	movs	r3, #1
 800ba78:	75fb      	strb	r3, [r7, #23]
      break;
 800ba7a:	e000      	b.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800ba7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba7e:	7dfb      	ldrb	r3, [r7, #23]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d10a      	bne.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ba84:	4b41      	ldr	r3, [pc, #260]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ba86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba92:	493e      	ldr	r1, [pc, #248]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ba94:	4313      	orrs	r3, r2
 800ba96:	654b      	str	r3, [r1, #84]	; 0x54
 800ba98:	e001      	b.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba9a:	7dfb      	ldrb	r3, [r7, #23]
 800ba9c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d029      	beq.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d003      	beq.n	800baba <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800bab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bab6:	d007      	beq.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800bab8:	e00f      	b.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baba:	4b34      	ldr	r3, [pc, #208]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800babc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800babe:	4a33      	ldr	r2, [pc, #204]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800bac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bac4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bac6:	e00b      	b.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	3304      	adds	r3, #4
 800bacc:	2102      	movs	r1, #2
 800bace:	4618      	mov	r0, r3
 800bad0:	f000 fb7a 	bl	800c1c8 <RCCEx_PLL2_Config>
 800bad4:	4603      	mov	r3, r0
 800bad6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bad8:	e002      	b.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800bada:	2301      	movs	r3, #1
 800badc:	75fb      	strb	r3, [r7, #23]
      break;
 800bade:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bae0:	7dfb      	ldrb	r3, [r7, #23]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d109      	bne.n	800bafa <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bae6:	4b29      	ldr	r3, [pc, #164]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800bae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baf2:	4926      	ldr	r1, [pc, #152]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800baf4:	4313      	orrs	r3, r2
 800baf6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800baf8:	e001      	b.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bafa:	7dfb      	ldrb	r3, [r7, #23]
 800bafc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d00a      	beq.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	3324      	adds	r3, #36	; 0x24
 800bb0e:	2102      	movs	r1, #2
 800bb10:	4618      	mov	r0, r3
 800bb12:	f000 fc0b 	bl	800c32c <RCCEx_PLL3_Config>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d001      	beq.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d033      	beq.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb34:	d017      	beq.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800bb36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb3a:	d811      	bhi.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bb3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb40:	d013      	beq.n	800bb6a <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800bb42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb46:	d80b      	bhi.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d010      	beq.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800bb4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb50:	d106      	bne.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb52:	4b0e      	ldr	r3, [pc, #56]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800bb54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb56:	4a0d      	ldr	r2, [pc, #52]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800bb58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800bb5e:	e007      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	75fb      	strb	r3, [r7, #23]
      break;
 800bb64:	e004      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800bb66:	bf00      	nop
 800bb68:	e002      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800bb6a:	bf00      	nop
 800bb6c:	e000      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800bb6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb70:	7dfb      	ldrb	r3, [r7, #23]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d10c      	bne.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bb76:	4b05      	ldr	r3, [pc, #20]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800bb78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb82:	4902      	ldr	r1, [pc, #8]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800bb84:	4313      	orrs	r3, r2
 800bb86:	654b      	str	r3, [r1, #84]	; 0x54
 800bb88:	e004      	b.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800bb8a:	bf00      	nop
 800bb8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb90:	7dfb      	ldrb	r3, [r7, #23]
 800bb92:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d008      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bba0:	4b29      	ldr	r3, [pc, #164]	; (800bc48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bba4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbac:	4926      	ldr	r1, [pc, #152]	; (800bc48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d008      	beq.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bbbe:	4b22      	ldr	r3, [pc, #136]	; (800bc48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bbc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbc2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbca:	491f      	ldr	r1, [pc, #124]	; (800bc48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d00d      	beq.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bbdc:	4b1a      	ldr	r3, [pc, #104]	; (800bc48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bbde:	691b      	ldr	r3, [r3, #16]
 800bbe0:	4a19      	ldr	r2, [pc, #100]	; (800bc48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bbe2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bbe6:	6113      	str	r3, [r2, #16]
 800bbe8:	4b17      	ldr	r3, [pc, #92]	; (800bc48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bbea:	691a      	ldr	r2, [r3, #16]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bbf2:	4915      	ldr	r1, [pc, #84]	; (800bc48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	da08      	bge.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bc00:	4b11      	ldr	r3, [pc, #68]	; (800bc48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bc02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc04:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc0c:	490e      	ldr	r1, [pc, #56]	; (800bc48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d009      	beq.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bc1e:	4b0a      	ldr	r3, [pc, #40]	; (800bc48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bc20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc2c:	4906      	ldr	r1, [pc, #24]	; (800bc48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800bc32:	7dbb      	ldrb	r3, [r7, #22]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d101      	bne.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	e000      	b.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800bc3c:	2301      	movs	r3, #1
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3718      	adds	r7, #24
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	58024400 	.word	0x58024400

0800bc4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bc50:	f7ff f8a6 	bl	800ada0 <HAL_RCC_GetHCLKFreq>
 800bc54:	4602      	mov	r2, r0
 800bc56:	4b06      	ldr	r3, [pc, #24]	; (800bc70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bc58:	6a1b      	ldr	r3, [r3, #32]
 800bc5a:	091b      	lsrs	r3, r3, #4
 800bc5c:	f003 0307 	and.w	r3, r3, #7
 800bc60:	4904      	ldr	r1, [pc, #16]	; (800bc74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bc62:	5ccb      	ldrb	r3, [r1, r3]
 800bc64:	f003 031f 	and.w	r3, r3, #31
 800bc68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	58024400 	.word	0x58024400
 800bc74:	08011470 	.word	0x08011470

0800bc78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b089      	sub	sp, #36	; 0x24
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc80:	4ba1      	ldr	r3, [pc, #644]	; (800bf08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc84:	f003 0303 	and.w	r3, r3, #3
 800bc88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800bc8a:	4b9f      	ldr	r3, [pc, #636]	; (800bf08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc8e:	0b1b      	lsrs	r3, r3, #12
 800bc90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bc96:	4b9c      	ldr	r3, [pc, #624]	; (800bf08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc9a:	091b      	lsrs	r3, r3, #4
 800bc9c:	f003 0301 	and.w	r3, r3, #1
 800bca0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800bca2:	4b99      	ldr	r3, [pc, #612]	; (800bf08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bca6:	08db      	lsrs	r3, r3, #3
 800bca8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bcac:	693a      	ldr	r2, [r7, #16]
 800bcae:	fb02 f303 	mul.w	r3, r2, r3
 800bcb2:	ee07 3a90 	vmov	s15, r3
 800bcb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	f000 8111 	beq.w	800bee8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bcc6:	69bb      	ldr	r3, [r7, #24]
 800bcc8:	2b02      	cmp	r3, #2
 800bcca:	f000 8083 	beq.w	800bdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bcce:	69bb      	ldr	r3, [r7, #24]
 800bcd0:	2b02      	cmp	r3, #2
 800bcd2:	f200 80a1 	bhi.w	800be18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d003      	beq.n	800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d056      	beq.n	800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bce2:	e099      	b.n	800be18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bce4:	4b88      	ldr	r3, [pc, #544]	; (800bf08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f003 0320 	and.w	r3, r3, #32
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d02d      	beq.n	800bd4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bcf0:	4b85      	ldr	r3, [pc, #532]	; (800bf08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	08db      	lsrs	r3, r3, #3
 800bcf6:	f003 0303 	and.w	r3, r3, #3
 800bcfa:	4a84      	ldr	r2, [pc, #528]	; (800bf0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bcfc:	fa22 f303 	lsr.w	r3, r2, r3
 800bd00:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	ee07 3a90 	vmov	s15, r3
 800bd08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	ee07 3a90 	vmov	s15, r3
 800bd12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd1a:	4b7b      	ldr	r3, [pc, #492]	; (800bf08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd22:	ee07 3a90 	vmov	s15, r3
 800bd26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bf10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd46:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bd4a:	e087      	b.n	800be5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	ee07 3a90 	vmov	s15, r3
 800bd52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bf14 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bd5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd5e:	4b6a      	ldr	r3, [pc, #424]	; (800bf08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd66:	ee07 3a90 	vmov	s15, r3
 800bd6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd72:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bf10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd8e:	e065      	b.n	800be5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	ee07 3a90 	vmov	s15, r3
 800bd96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bf18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bda2:	4b59      	ldr	r3, [pc, #356]	; (800bf08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdaa:	ee07 3a90 	vmov	s15, r3
 800bdae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdb6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bf10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bdba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdd2:	e043      	b.n	800be5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	ee07 3a90 	vmov	s15, r3
 800bdda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdde:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bf1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bde2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bde6:	4b48      	ldr	r3, [pc, #288]	; (800bf08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdee:	ee07 3a90 	vmov	s15, r3
 800bdf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdfa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bf10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bdfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be16:	e021      	b.n	800be5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	ee07 3a90 	vmov	s15, r3
 800be1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bf18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800be26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be2a:	4b37      	ldr	r3, [pc, #220]	; (800bf08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be32:	ee07 3a90 	vmov	s15, r3
 800be36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bf10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800be5c:	4b2a      	ldr	r3, [pc, #168]	; (800bf08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be60:	0a5b      	lsrs	r3, r3, #9
 800be62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be66:	ee07 3a90 	vmov	s15, r3
 800be6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be72:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be76:	edd7 6a07 	vldr	s13, [r7, #28]
 800be7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be82:	ee17 2a90 	vmov	r2, s15
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800be8a:	4b1f      	ldr	r3, [pc, #124]	; (800bf08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be8e:	0c1b      	lsrs	r3, r3, #16
 800be90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be94:	ee07 3a90 	vmov	s15, r3
 800be98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bea0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bea4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800beb0:	ee17 2a90 	vmov	r2, s15
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800beb8:	4b13      	ldr	r3, [pc, #76]	; (800bf08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800beba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bebc:	0e1b      	lsrs	r3, r3, #24
 800bebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bec2:	ee07 3a90 	vmov	s15, r3
 800bec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bece:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bed2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bede:	ee17 2a90 	vmov	r2, s15
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bee6:	e008      	b.n	800befa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	609a      	str	r2, [r3, #8]
}
 800befa:	bf00      	nop
 800befc:	3724      	adds	r7, #36	; 0x24
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	58024400 	.word	0x58024400
 800bf0c:	03d09000 	.word	0x03d09000
 800bf10:	46000000 	.word	0x46000000
 800bf14:	4c742400 	.word	0x4c742400
 800bf18:	4a742400 	.word	0x4a742400
 800bf1c:	4af42400 	.word	0x4af42400

0800bf20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b089      	sub	sp, #36	; 0x24
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bf28:	4ba1      	ldr	r3, [pc, #644]	; (800c1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf2c:	f003 0303 	and.w	r3, r3, #3
 800bf30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800bf32:	4b9f      	ldr	r3, [pc, #636]	; (800c1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf36:	0d1b      	lsrs	r3, r3, #20
 800bf38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bf3e:	4b9c      	ldr	r3, [pc, #624]	; (800c1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf42:	0a1b      	lsrs	r3, r3, #8
 800bf44:	f003 0301 	and.w	r3, r3, #1
 800bf48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bf4a:	4b99      	ldr	r3, [pc, #612]	; (800c1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf4e:	08db      	lsrs	r3, r3, #3
 800bf50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf54:	693a      	ldr	r2, [r7, #16]
 800bf56:	fb02 f303 	mul.w	r3, r2, r3
 800bf5a:	ee07 3a90 	vmov	s15, r3
 800bf5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f000 8111 	beq.w	800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	2b02      	cmp	r3, #2
 800bf72:	f000 8083 	beq.w	800c07c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	2b02      	cmp	r3, #2
 800bf7a:	f200 80a1 	bhi.w	800c0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d003      	beq.n	800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	2b01      	cmp	r3, #1
 800bf88:	d056      	beq.n	800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bf8a:	e099      	b.n	800c0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf8c:	4b88      	ldr	r3, [pc, #544]	; (800c1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f003 0320 	and.w	r3, r3, #32
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d02d      	beq.n	800bff4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bf98:	4b85      	ldr	r3, [pc, #532]	; (800c1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	08db      	lsrs	r3, r3, #3
 800bf9e:	f003 0303 	and.w	r3, r3, #3
 800bfa2:	4a84      	ldr	r2, [pc, #528]	; (800c1b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bfa4:	fa22 f303 	lsr.w	r3, r2, r3
 800bfa8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	ee07 3a90 	vmov	s15, r3
 800bfb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	ee07 3a90 	vmov	s15, r3
 800bfba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfc2:	4b7b      	ldr	r3, [pc, #492]	; (800c1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfca:	ee07 3a90 	vmov	s15, r3
 800bfce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfd6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bff2:	e087      	b.n	800c104 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	ee07 3a90 	vmov	s15, r3
 800bffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bffe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c1bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c006:	4b6a      	ldr	r3, [pc, #424]	; (800c1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c00a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c00e:	ee07 3a90 	vmov	s15, r3
 800c012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c016:	ed97 6a03 	vldr	s12, [r7, #12]
 800c01a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c01e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c02a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c02e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c032:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c036:	e065      	b.n	800c104 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	ee07 3a90 	vmov	s15, r3
 800c03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c042:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c1c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c04a:	4b59      	ldr	r3, [pc, #356]	; (800c1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c04e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c052:	ee07 3a90 	vmov	s15, r3
 800c056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c05a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c05e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c06a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c06e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c072:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c076:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c07a:	e043      	b.n	800c104 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	ee07 3a90 	vmov	s15, r3
 800c082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c086:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c08a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c08e:	4b48      	ldr	r3, [pc, #288]	; (800c1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c096:	ee07 3a90 	vmov	s15, r3
 800c09a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c09e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c0a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c0be:	e021      	b.n	800c104 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	ee07 3a90 	vmov	s15, r3
 800c0c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c1c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c0ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0d2:	4b37      	ldr	r3, [pc, #220]	; (800c1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0da:	ee07 3a90 	vmov	s15, r3
 800c0de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c0ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c102:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c104:	4b2a      	ldr	r3, [pc, #168]	; (800c1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c108:	0a5b      	lsrs	r3, r3, #9
 800c10a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c10e:	ee07 3a90 	vmov	s15, r3
 800c112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c116:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c11a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c11e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c12a:	ee17 2a90 	vmov	r2, s15
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c132:	4b1f      	ldr	r3, [pc, #124]	; (800c1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c136:	0c1b      	lsrs	r3, r3, #16
 800c138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c13c:	ee07 3a90 	vmov	s15, r3
 800c140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c144:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c148:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c14c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c158:	ee17 2a90 	vmov	r2, s15
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c160:	4b13      	ldr	r3, [pc, #76]	; (800c1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c164:	0e1b      	lsrs	r3, r3, #24
 800c166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c16a:	ee07 3a90 	vmov	s15, r3
 800c16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c172:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c176:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c17a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c17e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c186:	ee17 2a90 	vmov	r2, s15
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c18e:	e008      	b.n	800c1a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2200      	movs	r2, #0
 800c194:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	609a      	str	r2, [r3, #8]
}
 800c1a2:	bf00      	nop
 800c1a4:	3724      	adds	r7, #36	; 0x24
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	58024400 	.word	0x58024400
 800c1b4:	03d09000 	.word	0x03d09000
 800c1b8:	46000000 	.word	0x46000000
 800c1bc:	4c742400 	.word	0x4c742400
 800c1c0:	4a742400 	.word	0x4a742400
 800c1c4:	4af42400 	.word	0x4af42400

0800c1c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c1d6:	4b53      	ldr	r3, [pc, #332]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c1d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1da:	f003 0303 	and.w	r3, r3, #3
 800c1de:	2b03      	cmp	r3, #3
 800c1e0:	d101      	bne.n	800c1e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e099      	b.n	800c31a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c1e6:	4b4f      	ldr	r3, [pc, #316]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a4e      	ldr	r2, [pc, #312]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c1ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c1f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1f2:	f7fa fd69 	bl	8006cc8 <HAL_GetTick>
 800c1f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1f8:	e008      	b.n	800c20c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c1fa:	f7fa fd65 	bl	8006cc8 <HAL_GetTick>
 800c1fe:	4602      	mov	r2, r0
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	1ad3      	subs	r3, r2, r3
 800c204:	2b02      	cmp	r3, #2
 800c206:	d901      	bls.n	800c20c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c208:	2303      	movs	r3, #3
 800c20a:	e086      	b.n	800c31a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c20c:	4b45      	ldr	r3, [pc, #276]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c214:	2b00      	cmp	r3, #0
 800c216:	d1f0      	bne.n	800c1fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c218:	4b42      	ldr	r3, [pc, #264]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c21c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	031b      	lsls	r3, r3, #12
 800c226:	493f      	ldr	r1, [pc, #252]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c228:	4313      	orrs	r3, r2
 800c22a:	628b      	str	r3, [r1, #40]	; 0x28
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	3b01      	subs	r3, #1
 800c232:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	689b      	ldr	r3, [r3, #8]
 800c23a:	3b01      	subs	r3, #1
 800c23c:	025b      	lsls	r3, r3, #9
 800c23e:	b29b      	uxth	r3, r3
 800c240:	431a      	orrs	r2, r3
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	68db      	ldr	r3, [r3, #12]
 800c246:	3b01      	subs	r3, #1
 800c248:	041b      	lsls	r3, r3, #16
 800c24a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c24e:	431a      	orrs	r2, r3
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	691b      	ldr	r3, [r3, #16]
 800c254:	3b01      	subs	r3, #1
 800c256:	061b      	lsls	r3, r3, #24
 800c258:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c25c:	4931      	ldr	r1, [pc, #196]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c25e:	4313      	orrs	r3, r2
 800c260:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c262:	4b30      	ldr	r3, [pc, #192]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c266:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	695b      	ldr	r3, [r3, #20]
 800c26e:	492d      	ldr	r1, [pc, #180]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c270:	4313      	orrs	r3, r2
 800c272:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c274:	4b2b      	ldr	r3, [pc, #172]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c278:	f023 0220 	bic.w	r2, r3, #32
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	699b      	ldr	r3, [r3, #24]
 800c280:	4928      	ldr	r1, [pc, #160]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c282:	4313      	orrs	r3, r2
 800c284:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c286:	4b27      	ldr	r3, [pc, #156]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c28a:	4a26      	ldr	r2, [pc, #152]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c28c:	f023 0310 	bic.w	r3, r3, #16
 800c290:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c292:	4b24      	ldr	r3, [pc, #144]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c294:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c296:	4b24      	ldr	r3, [pc, #144]	; (800c328 <RCCEx_PLL2_Config+0x160>)
 800c298:	4013      	ands	r3, r2
 800c29a:	687a      	ldr	r2, [r7, #4]
 800c29c:	69d2      	ldr	r2, [r2, #28]
 800c29e:	00d2      	lsls	r2, r2, #3
 800c2a0:	4920      	ldr	r1, [pc, #128]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c2a6:	4b1f      	ldr	r3, [pc, #124]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2aa:	4a1e      	ldr	r2, [pc, #120]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c2ac:	f043 0310 	orr.w	r3, r3, #16
 800c2b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d106      	bne.n	800c2c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c2b8:	4b1a      	ldr	r3, [pc, #104]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2bc:	4a19      	ldr	r2, [pc, #100]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c2be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c2c4:	e00f      	b.n	800c2e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d106      	bne.n	800c2da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c2cc:	4b15      	ldr	r3, [pc, #84]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d0:	4a14      	ldr	r2, [pc, #80]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c2d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c2d8:	e005      	b.n	800c2e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c2da:	4b12      	ldr	r3, [pc, #72]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2de:	4a11      	ldr	r2, [pc, #68]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c2e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c2e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c2e6:	4b0f      	ldr	r3, [pc, #60]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a0e      	ldr	r2, [pc, #56]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c2ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c2f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2f2:	f7fa fce9 	bl	8006cc8 <HAL_GetTick>
 800c2f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c2f8:	e008      	b.n	800c30c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c2fa:	f7fa fce5 	bl	8006cc8 <HAL_GetTick>
 800c2fe:	4602      	mov	r2, r0
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	1ad3      	subs	r3, r2, r3
 800c304:	2b02      	cmp	r3, #2
 800c306:	d901      	bls.n	800c30c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c308:	2303      	movs	r3, #3
 800c30a:	e006      	b.n	800c31a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c30c:	4b05      	ldr	r3, [pc, #20]	; (800c324 <RCCEx_PLL2_Config+0x15c>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c314:	2b00      	cmp	r3, #0
 800c316:	d0f0      	beq.n	800c2fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c318:	7bfb      	ldrb	r3, [r7, #15]
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3710      	adds	r7, #16
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	58024400 	.word	0x58024400
 800c328:	ffff0007 	.word	0xffff0007

0800c32c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b084      	sub	sp, #16
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c336:	2300      	movs	r3, #0
 800c338:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c33a:	4b53      	ldr	r3, [pc, #332]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c33c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c33e:	f003 0303 	and.w	r3, r3, #3
 800c342:	2b03      	cmp	r3, #3
 800c344:	d101      	bne.n	800c34a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c346:	2301      	movs	r3, #1
 800c348:	e099      	b.n	800c47e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c34a:	4b4f      	ldr	r3, [pc, #316]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a4e      	ldr	r2, [pc, #312]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c354:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c356:	f7fa fcb7 	bl	8006cc8 <HAL_GetTick>
 800c35a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c35c:	e008      	b.n	800c370 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c35e:	f7fa fcb3 	bl	8006cc8 <HAL_GetTick>
 800c362:	4602      	mov	r2, r0
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	1ad3      	subs	r3, r2, r3
 800c368:	2b02      	cmp	r3, #2
 800c36a:	d901      	bls.n	800c370 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c36c:	2303      	movs	r3, #3
 800c36e:	e086      	b.n	800c47e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c370:	4b45      	ldr	r3, [pc, #276]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1f0      	bne.n	800c35e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c37c:	4b42      	ldr	r3, [pc, #264]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c37e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c380:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	051b      	lsls	r3, r3, #20
 800c38a:	493f      	ldr	r1, [pc, #252]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c38c:	4313      	orrs	r3, r2
 800c38e:	628b      	str	r3, [r1, #40]	; 0x28
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	3b01      	subs	r3, #1
 800c396:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	689b      	ldr	r3, [r3, #8]
 800c39e:	3b01      	subs	r3, #1
 800c3a0:	025b      	lsls	r3, r3, #9
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	431a      	orrs	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	041b      	lsls	r3, r3, #16
 800c3ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c3b2:	431a      	orrs	r2, r3
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	691b      	ldr	r3, [r3, #16]
 800c3b8:	3b01      	subs	r3, #1
 800c3ba:	061b      	lsls	r3, r3, #24
 800c3bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c3c0:	4931      	ldr	r1, [pc, #196]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c3c6:	4b30      	ldr	r3, [pc, #192]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	695b      	ldr	r3, [r3, #20]
 800c3d2:	492d      	ldr	r1, [pc, #180]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c3d8:	4b2b      	ldr	r3, [pc, #172]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	699b      	ldr	r3, [r3, #24]
 800c3e4:	4928      	ldr	r1, [pc, #160]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c3ea:	4b27      	ldr	r3, [pc, #156]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ee:	4a26      	ldr	r2, [pc, #152]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c3f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c3f6:	4b24      	ldr	r3, [pc, #144]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c3f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3fa:	4b24      	ldr	r3, [pc, #144]	; (800c48c <RCCEx_PLL3_Config+0x160>)
 800c3fc:	4013      	ands	r3, r2
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	69d2      	ldr	r2, [r2, #28]
 800c402:	00d2      	lsls	r2, r2, #3
 800c404:	4920      	ldr	r1, [pc, #128]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c406:	4313      	orrs	r3, r2
 800c408:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c40a:	4b1f      	ldr	r3, [pc, #124]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c40e:	4a1e      	ldr	r2, [pc, #120]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c414:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d106      	bne.n	800c42a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c41c:	4b1a      	ldr	r3, [pc, #104]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c420:	4a19      	ldr	r2, [pc, #100]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c422:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c426:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c428:	e00f      	b.n	800c44a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d106      	bne.n	800c43e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c430:	4b15      	ldr	r3, [pc, #84]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c434:	4a14      	ldr	r2, [pc, #80]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c436:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c43a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c43c:	e005      	b.n	800c44a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c43e:	4b12      	ldr	r3, [pc, #72]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c442:	4a11      	ldr	r2, [pc, #68]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c444:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c448:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c44a:	4b0f      	ldr	r3, [pc, #60]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4a0e      	ldr	r2, [pc, #56]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c456:	f7fa fc37 	bl	8006cc8 <HAL_GetTick>
 800c45a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c45c:	e008      	b.n	800c470 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c45e:	f7fa fc33 	bl	8006cc8 <HAL_GetTick>
 800c462:	4602      	mov	r2, r0
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	1ad3      	subs	r3, r2, r3
 800c468:	2b02      	cmp	r3, #2
 800c46a:	d901      	bls.n	800c470 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c46c:	2303      	movs	r3, #3
 800c46e:	e006      	b.n	800c47e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c470:	4b05      	ldr	r3, [pc, #20]	; (800c488 <RCCEx_PLL3_Config+0x15c>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d0f0      	beq.n	800c45e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c47c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3710      	adds	r7, #16
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	58024400 	.word	0x58024400
 800c48c:	ffff0007 	.word	0xffff0007

0800c490 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b082      	sub	sp, #8
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d101      	bne.n	800c4a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e049      	b.n	800c536 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4a8:	b2db      	uxtb	r3, r3
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d106      	bne.n	800c4bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f7f9 fd56 	bl	8005f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2202      	movs	r2, #2
 800c4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	3304      	adds	r3, #4
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	4610      	mov	r0, r2
 800c4d0:	f001 f820 	bl	800d514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2201      	movs	r2, #1
 800c4e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2201      	movs	r2, #1
 800c500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2201      	movs	r2, #1
 800c508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2201      	movs	r2, #1
 800c510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2201      	movs	r2, #1
 800c518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2201      	movs	r2, #1
 800c520:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2201      	movs	r2, #1
 800c528:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2201      	movs	r2, #1
 800c530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3708      	adds	r7, #8
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
	...

0800c540 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c540:	b480      	push	{r7}
 800c542:	b085      	sub	sp, #20
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c54e:	b2db      	uxtb	r3, r3
 800c550:	2b01      	cmp	r3, #1
 800c552:	d001      	beq.n	800c558 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c554:	2301      	movs	r3, #1
 800c556:	e05e      	b.n	800c616 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2202      	movs	r2, #2
 800c55c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	68da      	ldr	r2, [r3, #12]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f042 0201 	orr.w	r2, r2, #1
 800c56e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a2b      	ldr	r2, [pc, #172]	; (800c624 <HAL_TIM_Base_Start_IT+0xe4>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d02c      	beq.n	800c5d4 <HAL_TIM_Base_Start_IT+0x94>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c582:	d027      	beq.n	800c5d4 <HAL_TIM_Base_Start_IT+0x94>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a27      	ldr	r2, [pc, #156]	; (800c628 <HAL_TIM_Base_Start_IT+0xe8>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d022      	beq.n	800c5d4 <HAL_TIM_Base_Start_IT+0x94>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4a26      	ldr	r2, [pc, #152]	; (800c62c <HAL_TIM_Base_Start_IT+0xec>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d01d      	beq.n	800c5d4 <HAL_TIM_Base_Start_IT+0x94>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a24      	ldr	r2, [pc, #144]	; (800c630 <HAL_TIM_Base_Start_IT+0xf0>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d018      	beq.n	800c5d4 <HAL_TIM_Base_Start_IT+0x94>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4a23      	ldr	r2, [pc, #140]	; (800c634 <HAL_TIM_Base_Start_IT+0xf4>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d013      	beq.n	800c5d4 <HAL_TIM_Base_Start_IT+0x94>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a21      	ldr	r2, [pc, #132]	; (800c638 <HAL_TIM_Base_Start_IT+0xf8>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d00e      	beq.n	800c5d4 <HAL_TIM_Base_Start_IT+0x94>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a20      	ldr	r2, [pc, #128]	; (800c63c <HAL_TIM_Base_Start_IT+0xfc>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d009      	beq.n	800c5d4 <HAL_TIM_Base_Start_IT+0x94>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4a1e      	ldr	r2, [pc, #120]	; (800c640 <HAL_TIM_Base_Start_IT+0x100>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d004      	beq.n	800c5d4 <HAL_TIM_Base_Start_IT+0x94>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4a1d      	ldr	r2, [pc, #116]	; (800c644 <HAL_TIM_Base_Start_IT+0x104>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d115      	bne.n	800c600 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	689a      	ldr	r2, [r3, #8]
 800c5da:	4b1b      	ldr	r3, [pc, #108]	; (800c648 <HAL_TIM_Base_Start_IT+0x108>)
 800c5dc:	4013      	ands	r3, r2
 800c5de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2b06      	cmp	r3, #6
 800c5e4:	d015      	beq.n	800c612 <HAL_TIM_Base_Start_IT+0xd2>
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5ec:	d011      	beq.n	800c612 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	681a      	ldr	r2, [r3, #0]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f042 0201 	orr.w	r2, r2, #1
 800c5fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5fe:	e008      	b.n	800c612 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	681a      	ldr	r2, [r3, #0]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f042 0201 	orr.w	r2, r2, #1
 800c60e:	601a      	str	r2, [r3, #0]
 800c610:	e000      	b.n	800c614 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c612:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c614:	2300      	movs	r3, #0
}
 800c616:	4618      	mov	r0, r3
 800c618:	3714      	adds	r7, #20
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr
 800c622:	bf00      	nop
 800c624:	40010000 	.word	0x40010000
 800c628:	40000400 	.word	0x40000400
 800c62c:	40000800 	.word	0x40000800
 800c630:	40000c00 	.word	0x40000c00
 800c634:	40010400 	.word	0x40010400
 800c638:	40001800 	.word	0x40001800
 800c63c:	40014000 	.word	0x40014000
 800c640:	4000e000 	.word	0x4000e000
 800c644:	4000e400 	.word	0x4000e400
 800c648:	00010007 	.word	0x00010007

0800c64c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d101      	bne.n	800c65e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c65a:	2301      	movs	r3, #1
 800c65c:	e049      	b.n	800c6f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c664:	b2db      	uxtb	r3, r3
 800c666:	2b00      	cmp	r3, #0
 800c668:	d106      	bne.n	800c678 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2200      	movs	r2, #0
 800c66e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f7f9 fd0e 	bl	8006094 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2202      	movs	r2, #2
 800c67c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681a      	ldr	r2, [r3, #0]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	3304      	adds	r3, #4
 800c688:	4619      	mov	r1, r3
 800c68a:	4610      	mov	r0, r2
 800c68c:	f000 ff42 	bl	800d514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2201      	movs	r2, #1
 800c694:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c6f0:	2300      	movs	r3, #0
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
	...

0800c6fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d109      	bne.n	800c720 <HAL_TIM_PWM_Start+0x24>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c712:	b2db      	uxtb	r3, r3
 800c714:	2b01      	cmp	r3, #1
 800c716:	bf14      	ite	ne
 800c718:	2301      	movne	r3, #1
 800c71a:	2300      	moveq	r3, #0
 800c71c:	b2db      	uxtb	r3, r3
 800c71e:	e03c      	b.n	800c79a <HAL_TIM_PWM_Start+0x9e>
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	2b04      	cmp	r3, #4
 800c724:	d109      	bne.n	800c73a <HAL_TIM_PWM_Start+0x3e>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c72c:	b2db      	uxtb	r3, r3
 800c72e:	2b01      	cmp	r3, #1
 800c730:	bf14      	ite	ne
 800c732:	2301      	movne	r3, #1
 800c734:	2300      	moveq	r3, #0
 800c736:	b2db      	uxtb	r3, r3
 800c738:	e02f      	b.n	800c79a <HAL_TIM_PWM_Start+0x9e>
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	2b08      	cmp	r3, #8
 800c73e:	d109      	bne.n	800c754 <HAL_TIM_PWM_Start+0x58>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c746:	b2db      	uxtb	r3, r3
 800c748:	2b01      	cmp	r3, #1
 800c74a:	bf14      	ite	ne
 800c74c:	2301      	movne	r3, #1
 800c74e:	2300      	moveq	r3, #0
 800c750:	b2db      	uxtb	r3, r3
 800c752:	e022      	b.n	800c79a <HAL_TIM_PWM_Start+0x9e>
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	2b0c      	cmp	r3, #12
 800c758:	d109      	bne.n	800c76e <HAL_TIM_PWM_Start+0x72>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c760:	b2db      	uxtb	r3, r3
 800c762:	2b01      	cmp	r3, #1
 800c764:	bf14      	ite	ne
 800c766:	2301      	movne	r3, #1
 800c768:	2300      	moveq	r3, #0
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	e015      	b.n	800c79a <HAL_TIM_PWM_Start+0x9e>
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	2b10      	cmp	r3, #16
 800c772:	d109      	bne.n	800c788 <HAL_TIM_PWM_Start+0x8c>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	bf14      	ite	ne
 800c780:	2301      	movne	r3, #1
 800c782:	2300      	moveq	r3, #0
 800c784:	b2db      	uxtb	r3, r3
 800c786:	e008      	b.n	800c79a <HAL_TIM_PWM_Start+0x9e>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	2b01      	cmp	r3, #1
 800c792:	bf14      	ite	ne
 800c794:	2301      	movne	r3, #1
 800c796:	2300      	moveq	r3, #0
 800c798:	b2db      	uxtb	r3, r3
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d001      	beq.n	800c7a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	e0ab      	b.n	800c8fa <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d104      	bne.n	800c7b2 <HAL_TIM_PWM_Start+0xb6>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2202      	movs	r2, #2
 800c7ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c7b0:	e023      	b.n	800c7fa <HAL_TIM_PWM_Start+0xfe>
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	2b04      	cmp	r3, #4
 800c7b6:	d104      	bne.n	800c7c2 <HAL_TIM_PWM_Start+0xc6>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2202      	movs	r2, #2
 800c7bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c7c0:	e01b      	b.n	800c7fa <HAL_TIM_PWM_Start+0xfe>
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	2b08      	cmp	r3, #8
 800c7c6:	d104      	bne.n	800c7d2 <HAL_TIM_PWM_Start+0xd6>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2202      	movs	r2, #2
 800c7cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c7d0:	e013      	b.n	800c7fa <HAL_TIM_PWM_Start+0xfe>
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	2b0c      	cmp	r3, #12
 800c7d6:	d104      	bne.n	800c7e2 <HAL_TIM_PWM_Start+0xe6>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2202      	movs	r2, #2
 800c7dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c7e0:	e00b      	b.n	800c7fa <HAL_TIM_PWM_Start+0xfe>
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	2b10      	cmp	r3, #16
 800c7e6:	d104      	bne.n	800c7f2 <HAL_TIM_PWM_Start+0xf6>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2202      	movs	r2, #2
 800c7ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c7f0:	e003      	b.n	800c7fa <HAL_TIM_PWM_Start+0xfe>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2202      	movs	r2, #2
 800c7f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2201      	movs	r2, #1
 800c800:	6839      	ldr	r1, [r7, #0]
 800c802:	4618      	mov	r0, r3
 800c804:	f001 faa0 	bl	800dd48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a3d      	ldr	r2, [pc, #244]	; (800c904 <HAL_TIM_PWM_Start+0x208>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d013      	beq.n	800c83a <HAL_TIM_PWM_Start+0x13e>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a3c      	ldr	r2, [pc, #240]	; (800c908 <HAL_TIM_PWM_Start+0x20c>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d00e      	beq.n	800c83a <HAL_TIM_PWM_Start+0x13e>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a3a      	ldr	r2, [pc, #232]	; (800c90c <HAL_TIM_PWM_Start+0x210>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d009      	beq.n	800c83a <HAL_TIM_PWM_Start+0x13e>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4a39      	ldr	r2, [pc, #228]	; (800c910 <HAL_TIM_PWM_Start+0x214>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d004      	beq.n	800c83a <HAL_TIM_PWM_Start+0x13e>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4a37      	ldr	r2, [pc, #220]	; (800c914 <HAL_TIM_PWM_Start+0x218>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d101      	bne.n	800c83e <HAL_TIM_PWM_Start+0x142>
 800c83a:	2301      	movs	r3, #1
 800c83c:	e000      	b.n	800c840 <HAL_TIM_PWM_Start+0x144>
 800c83e:	2300      	movs	r3, #0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d007      	beq.n	800c854 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c852:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4a2a      	ldr	r2, [pc, #168]	; (800c904 <HAL_TIM_PWM_Start+0x208>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d02c      	beq.n	800c8b8 <HAL_TIM_PWM_Start+0x1bc>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c866:	d027      	beq.n	800c8b8 <HAL_TIM_PWM_Start+0x1bc>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a2a      	ldr	r2, [pc, #168]	; (800c918 <HAL_TIM_PWM_Start+0x21c>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d022      	beq.n	800c8b8 <HAL_TIM_PWM_Start+0x1bc>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4a29      	ldr	r2, [pc, #164]	; (800c91c <HAL_TIM_PWM_Start+0x220>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d01d      	beq.n	800c8b8 <HAL_TIM_PWM_Start+0x1bc>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a27      	ldr	r2, [pc, #156]	; (800c920 <HAL_TIM_PWM_Start+0x224>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d018      	beq.n	800c8b8 <HAL_TIM_PWM_Start+0x1bc>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a1f      	ldr	r2, [pc, #124]	; (800c908 <HAL_TIM_PWM_Start+0x20c>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d013      	beq.n	800c8b8 <HAL_TIM_PWM_Start+0x1bc>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4a23      	ldr	r2, [pc, #140]	; (800c924 <HAL_TIM_PWM_Start+0x228>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d00e      	beq.n	800c8b8 <HAL_TIM_PWM_Start+0x1bc>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4a1b      	ldr	r2, [pc, #108]	; (800c90c <HAL_TIM_PWM_Start+0x210>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d009      	beq.n	800c8b8 <HAL_TIM_PWM_Start+0x1bc>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4a1f      	ldr	r2, [pc, #124]	; (800c928 <HAL_TIM_PWM_Start+0x22c>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d004      	beq.n	800c8b8 <HAL_TIM_PWM_Start+0x1bc>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4a1e      	ldr	r2, [pc, #120]	; (800c92c <HAL_TIM_PWM_Start+0x230>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d115      	bne.n	800c8e4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	689a      	ldr	r2, [r3, #8]
 800c8be:	4b1c      	ldr	r3, [pc, #112]	; (800c930 <HAL_TIM_PWM_Start+0x234>)
 800c8c0:	4013      	ands	r3, r2
 800c8c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2b06      	cmp	r3, #6
 800c8c8:	d015      	beq.n	800c8f6 <HAL_TIM_PWM_Start+0x1fa>
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8d0:	d011      	beq.n	800c8f6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f042 0201 	orr.w	r2, r2, #1
 800c8e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8e2:	e008      	b.n	800c8f6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	681a      	ldr	r2, [r3, #0]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f042 0201 	orr.w	r2, r2, #1
 800c8f2:	601a      	str	r2, [r3, #0]
 800c8f4:	e000      	b.n	800c8f8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c8f8:	2300      	movs	r3, #0
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3710      	adds	r7, #16
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	40010000 	.word	0x40010000
 800c908:	40010400 	.word	0x40010400
 800c90c:	40014000 	.word	0x40014000
 800c910:	40014400 	.word	0x40014400
 800c914:	40014800 	.word	0x40014800
 800c918:	40000400 	.word	0x40000400
 800c91c:	40000800 	.word	0x40000800
 800c920:	40000c00 	.word	0x40000c00
 800c924:	40001800 	.word	0x40001800
 800c928:	4000e000 	.word	0x4000e000
 800c92c:	4000e400 	.word	0x4000e400
 800c930:	00010007 	.word	0x00010007

0800c934 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c93e:	2300      	movs	r3, #0
 800c940:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d109      	bne.n	800c95c <HAL_TIM_PWM_Start_IT+0x28>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	2b01      	cmp	r3, #1
 800c952:	bf14      	ite	ne
 800c954:	2301      	movne	r3, #1
 800c956:	2300      	moveq	r3, #0
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	e03c      	b.n	800c9d6 <HAL_TIM_PWM_Start_IT+0xa2>
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	2b04      	cmp	r3, #4
 800c960:	d109      	bne.n	800c976 <HAL_TIM_PWM_Start_IT+0x42>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	bf14      	ite	ne
 800c96e:	2301      	movne	r3, #1
 800c970:	2300      	moveq	r3, #0
 800c972:	b2db      	uxtb	r3, r3
 800c974:	e02f      	b.n	800c9d6 <HAL_TIM_PWM_Start_IT+0xa2>
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	2b08      	cmp	r3, #8
 800c97a:	d109      	bne.n	800c990 <HAL_TIM_PWM_Start_IT+0x5c>
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c982:	b2db      	uxtb	r3, r3
 800c984:	2b01      	cmp	r3, #1
 800c986:	bf14      	ite	ne
 800c988:	2301      	movne	r3, #1
 800c98a:	2300      	moveq	r3, #0
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	e022      	b.n	800c9d6 <HAL_TIM_PWM_Start_IT+0xa2>
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	2b0c      	cmp	r3, #12
 800c994:	d109      	bne.n	800c9aa <HAL_TIM_PWM_Start_IT+0x76>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	2b01      	cmp	r3, #1
 800c9a0:	bf14      	ite	ne
 800c9a2:	2301      	movne	r3, #1
 800c9a4:	2300      	moveq	r3, #0
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	e015      	b.n	800c9d6 <HAL_TIM_PWM_Start_IT+0xa2>
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	2b10      	cmp	r3, #16
 800c9ae:	d109      	bne.n	800c9c4 <HAL_TIM_PWM_Start_IT+0x90>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	bf14      	ite	ne
 800c9bc:	2301      	movne	r3, #1
 800c9be:	2300      	moveq	r3, #0
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	e008      	b.n	800c9d6 <HAL_TIM_PWM_Start_IT+0xa2>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	bf14      	ite	ne
 800c9d0:	2301      	movne	r3, #1
 800c9d2:	2300      	moveq	r3, #0
 800c9d4:	b2db      	uxtb	r3, r3
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d001      	beq.n	800c9de <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c9da:	2301      	movs	r3, #1
 800c9dc:	e0f6      	b.n	800cbcc <HAL_TIM_PWM_Start_IT+0x298>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d104      	bne.n	800c9ee <HAL_TIM_PWM_Start_IT+0xba>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2202      	movs	r2, #2
 800c9e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c9ec:	e023      	b.n	800ca36 <HAL_TIM_PWM_Start_IT+0x102>
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	2b04      	cmp	r3, #4
 800c9f2:	d104      	bne.n	800c9fe <HAL_TIM_PWM_Start_IT+0xca>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2202      	movs	r2, #2
 800c9f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c9fc:	e01b      	b.n	800ca36 <HAL_TIM_PWM_Start_IT+0x102>
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	2b08      	cmp	r3, #8
 800ca02:	d104      	bne.n	800ca0e <HAL_TIM_PWM_Start_IT+0xda>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2202      	movs	r2, #2
 800ca08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca0c:	e013      	b.n	800ca36 <HAL_TIM_PWM_Start_IT+0x102>
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	2b0c      	cmp	r3, #12
 800ca12:	d104      	bne.n	800ca1e <HAL_TIM_PWM_Start_IT+0xea>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2202      	movs	r2, #2
 800ca18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ca1c:	e00b      	b.n	800ca36 <HAL_TIM_PWM_Start_IT+0x102>
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	2b10      	cmp	r3, #16
 800ca22:	d104      	bne.n	800ca2e <HAL_TIM_PWM_Start_IT+0xfa>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2202      	movs	r2, #2
 800ca28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca2c:	e003      	b.n	800ca36 <HAL_TIM_PWM_Start_IT+0x102>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2202      	movs	r2, #2
 800ca32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	2b0c      	cmp	r3, #12
 800ca3a:	d841      	bhi.n	800cac0 <HAL_TIM_PWM_Start_IT+0x18c>
 800ca3c:	a201      	add	r2, pc, #4	; (adr r2, 800ca44 <HAL_TIM_PWM_Start_IT+0x110>)
 800ca3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca42:	bf00      	nop
 800ca44:	0800ca79 	.word	0x0800ca79
 800ca48:	0800cac1 	.word	0x0800cac1
 800ca4c:	0800cac1 	.word	0x0800cac1
 800ca50:	0800cac1 	.word	0x0800cac1
 800ca54:	0800ca8b 	.word	0x0800ca8b
 800ca58:	0800cac1 	.word	0x0800cac1
 800ca5c:	0800cac1 	.word	0x0800cac1
 800ca60:	0800cac1 	.word	0x0800cac1
 800ca64:	0800ca9d 	.word	0x0800ca9d
 800ca68:	0800cac1 	.word	0x0800cac1
 800ca6c:	0800cac1 	.word	0x0800cac1
 800ca70:	0800cac1 	.word	0x0800cac1
 800ca74:	0800caaf 	.word	0x0800caaf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	68da      	ldr	r2, [r3, #12]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f042 0202 	orr.w	r2, r2, #2
 800ca86:	60da      	str	r2, [r3, #12]
      break;
 800ca88:	e01d      	b.n	800cac6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	68da      	ldr	r2, [r3, #12]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f042 0204 	orr.w	r2, r2, #4
 800ca98:	60da      	str	r2, [r3, #12]
      break;
 800ca9a:	e014      	b.n	800cac6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	68da      	ldr	r2, [r3, #12]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f042 0208 	orr.w	r2, r2, #8
 800caaa:	60da      	str	r2, [r3, #12]
      break;
 800caac:	e00b      	b.n	800cac6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	68da      	ldr	r2, [r3, #12]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f042 0210 	orr.w	r2, r2, #16
 800cabc:	60da      	str	r2, [r3, #12]
      break;
 800cabe:	e002      	b.n	800cac6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800cac0:	2301      	movs	r3, #1
 800cac2:	73fb      	strb	r3, [r7, #15]
      break;
 800cac4:	bf00      	nop
  }

  if (status == HAL_OK)
 800cac6:	7bfb      	ldrb	r3, [r7, #15]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d17e      	bne.n	800cbca <HAL_TIM_PWM_Start_IT+0x296>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2201      	movs	r2, #1
 800cad2:	6839      	ldr	r1, [r7, #0]
 800cad4:	4618      	mov	r0, r3
 800cad6:	f001 f937 	bl	800dd48 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a3d      	ldr	r2, [pc, #244]	; (800cbd4 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d013      	beq.n	800cb0c <HAL_TIM_PWM_Start_IT+0x1d8>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a3b      	ldr	r2, [pc, #236]	; (800cbd8 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d00e      	beq.n	800cb0c <HAL_TIM_PWM_Start_IT+0x1d8>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a3a      	ldr	r2, [pc, #232]	; (800cbdc <HAL_TIM_PWM_Start_IT+0x2a8>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d009      	beq.n	800cb0c <HAL_TIM_PWM_Start_IT+0x1d8>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a38      	ldr	r2, [pc, #224]	; (800cbe0 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d004      	beq.n	800cb0c <HAL_TIM_PWM_Start_IT+0x1d8>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4a37      	ldr	r2, [pc, #220]	; (800cbe4 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d101      	bne.n	800cb10 <HAL_TIM_PWM_Start_IT+0x1dc>
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	e000      	b.n	800cb12 <HAL_TIM_PWM_Start_IT+0x1de>
 800cb10:	2300      	movs	r3, #0
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d007      	beq.n	800cb26 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4a2a      	ldr	r2, [pc, #168]	; (800cbd4 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d02c      	beq.n	800cb8a <HAL_TIM_PWM_Start_IT+0x256>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb38:	d027      	beq.n	800cb8a <HAL_TIM_PWM_Start_IT+0x256>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4a2a      	ldr	r2, [pc, #168]	; (800cbe8 <HAL_TIM_PWM_Start_IT+0x2b4>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d022      	beq.n	800cb8a <HAL_TIM_PWM_Start_IT+0x256>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4a28      	ldr	r2, [pc, #160]	; (800cbec <HAL_TIM_PWM_Start_IT+0x2b8>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d01d      	beq.n	800cb8a <HAL_TIM_PWM_Start_IT+0x256>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	4a27      	ldr	r2, [pc, #156]	; (800cbf0 <HAL_TIM_PWM_Start_IT+0x2bc>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d018      	beq.n	800cb8a <HAL_TIM_PWM_Start_IT+0x256>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	4a1e      	ldr	r2, [pc, #120]	; (800cbd8 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d013      	beq.n	800cb8a <HAL_TIM_PWM_Start_IT+0x256>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	4a23      	ldr	r2, [pc, #140]	; (800cbf4 <HAL_TIM_PWM_Start_IT+0x2c0>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d00e      	beq.n	800cb8a <HAL_TIM_PWM_Start_IT+0x256>
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4a1a      	ldr	r2, [pc, #104]	; (800cbdc <HAL_TIM_PWM_Start_IT+0x2a8>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d009      	beq.n	800cb8a <HAL_TIM_PWM_Start_IT+0x256>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4a1f      	ldr	r2, [pc, #124]	; (800cbf8 <HAL_TIM_PWM_Start_IT+0x2c4>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d004      	beq.n	800cb8a <HAL_TIM_PWM_Start_IT+0x256>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4a1d      	ldr	r2, [pc, #116]	; (800cbfc <HAL_TIM_PWM_Start_IT+0x2c8>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d115      	bne.n	800cbb6 <HAL_TIM_PWM_Start_IT+0x282>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	689a      	ldr	r2, [r3, #8]
 800cb90:	4b1b      	ldr	r3, [pc, #108]	; (800cc00 <HAL_TIM_PWM_Start_IT+0x2cc>)
 800cb92:	4013      	ands	r3, r2
 800cb94:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	2b06      	cmp	r3, #6
 800cb9a:	d015      	beq.n	800cbc8 <HAL_TIM_PWM_Start_IT+0x294>
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cba2:	d011      	beq.n	800cbc8 <HAL_TIM_PWM_Start_IT+0x294>
      {
        __HAL_TIM_ENABLE(htim);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f042 0201 	orr.w	r2, r2, #1
 800cbb2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbb4:	e008      	b.n	800cbc8 <HAL_TIM_PWM_Start_IT+0x294>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f042 0201 	orr.w	r2, r2, #1
 800cbc4:	601a      	str	r2, [r3, #0]
 800cbc6:	e000      	b.n	800cbca <HAL_TIM_PWM_Start_IT+0x296>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbc8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800cbca:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	40010000 	.word	0x40010000
 800cbd8:	40010400 	.word	0x40010400
 800cbdc:	40014000 	.word	0x40014000
 800cbe0:	40014400 	.word	0x40014400
 800cbe4:	40014800 	.word	0x40014800
 800cbe8:	40000400 	.word	0x40000400
 800cbec:	40000800 	.word	0x40000800
 800cbf0:	40000c00 	.word	0x40000c00
 800cbf4:	40001800 	.word	0x40001800
 800cbf8:	4000e000 	.word	0x4000e000
 800cbfc:	4000e400 	.word	0x4000e400
 800cc00:	00010007 	.word	0x00010007

0800cc04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b086      	sub	sp, #24
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d101      	bne.n	800cc18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800cc14:	2301      	movs	r3, #1
 800cc16:	e08f      	b.n	800cd38 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d106      	bne.n	800cc32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2200      	movs	r2, #0
 800cc28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f7f9 f88d 	bl	8005d4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2202      	movs	r2, #2
 800cc36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	6899      	ldr	r1, [r3, #8]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	4b3e      	ldr	r3, [pc, #248]	; (800cd40 <HAL_TIM_Encoder_Init+0x13c>)
 800cc46:	400b      	ands	r3, r1
 800cc48:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	3304      	adds	r3, #4
 800cc52:	4619      	mov	r1, r3
 800cc54:	4610      	mov	r0, r2
 800cc56:	f000 fc5d 	bl	800d514 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	689b      	ldr	r3, [r3, #8]
 800cc60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	699b      	ldr	r3, [r3, #24]
 800cc68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	6a1b      	ldr	r3, [r3, #32]
 800cc70:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	697a      	ldr	r2, [r7, #20]
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800cc7c:	693a      	ldr	r2, [r7, #16]
 800cc7e:	4b31      	ldr	r3, [pc, #196]	; (800cd44 <HAL_TIM_Encoder_Init+0x140>)
 800cc80:	4013      	ands	r3, r2
 800cc82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	689a      	ldr	r2, [r3, #8]
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	699b      	ldr	r3, [r3, #24]
 800cc8c:	021b      	lsls	r3, r3, #8
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	693a      	ldr	r2, [r7, #16]
 800cc92:	4313      	orrs	r3, r2
 800cc94:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800cc96:	693a      	ldr	r2, [r7, #16]
 800cc98:	4b2b      	ldr	r3, [pc, #172]	; (800cd48 <HAL_TIM_Encoder_Init+0x144>)
 800cc9a:	4013      	ands	r3, r2
 800cc9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800cc9e:	693a      	ldr	r2, [r7, #16]
 800cca0:	4b2a      	ldr	r3, [pc, #168]	; (800cd4c <HAL_TIM_Encoder_Init+0x148>)
 800cca2:	4013      	ands	r3, r2
 800cca4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	68da      	ldr	r2, [r3, #12]
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	69db      	ldr	r3, [r3, #28]
 800ccae:	021b      	lsls	r3, r3, #8
 800ccb0:	4313      	orrs	r3, r2
 800ccb2:	693a      	ldr	r2, [r7, #16]
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	691b      	ldr	r3, [r3, #16]
 800ccbc:	011a      	lsls	r2, r3, #4
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	6a1b      	ldr	r3, [r3, #32]
 800ccc2:	031b      	lsls	r3, r3, #12
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	693a      	ldr	r2, [r7, #16]
 800ccc8:	4313      	orrs	r3, r2
 800ccca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ccd2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ccda:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	685a      	ldr	r2, [r3, #4]
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	695b      	ldr	r3, [r3, #20]
 800cce4:	011b      	lsls	r3, r3, #4
 800cce6:	4313      	orrs	r3, r2
 800cce8:	68fa      	ldr	r2, [r7, #12]
 800ccea:	4313      	orrs	r3, r2
 800ccec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	697a      	ldr	r2, [r7, #20]
 800ccf4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	693a      	ldr	r2, [r7, #16]
 800ccfc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	68fa      	ldr	r2, [r7, #12]
 800cd04:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2201      	movs	r2, #1
 800cd0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2201      	movs	r2, #1
 800cd12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2201      	movs	r2, #1
 800cd1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2201      	movs	r2, #1
 800cd22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2201      	movs	r2, #1
 800cd2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2201      	movs	r2, #1
 800cd32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cd36:	2300      	movs	r3, #0
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3718      	adds	r7, #24
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}
 800cd40:	fffebff8 	.word	0xfffebff8
 800cd44:	fffffcfc 	.word	0xfffffcfc
 800cd48:	fffff3f3 	.word	0xfffff3f3
 800cd4c:	ffff0f0f 	.word	0xffff0f0f

0800cd50 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cd60:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cd68:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd70:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd78:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d110      	bne.n	800cda2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cd80:	7bfb      	ldrb	r3, [r7, #15]
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d102      	bne.n	800cd8c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800cd86:	7b7b      	ldrb	r3, [r7, #13]
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d001      	beq.n	800cd90 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	e069      	b.n	800ce64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2202      	movs	r2, #2
 800cd94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2202      	movs	r2, #2
 800cd9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cda0:	e031      	b.n	800ce06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	2b04      	cmp	r3, #4
 800cda6:	d110      	bne.n	800cdca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cda8:	7bbb      	ldrb	r3, [r7, #14]
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	d102      	bne.n	800cdb4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cdae:	7b3b      	ldrb	r3, [r7, #12]
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d001      	beq.n	800cdb8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	e055      	b.n	800ce64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2202      	movs	r2, #2
 800cdbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2202      	movs	r2, #2
 800cdc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cdc8:	e01d      	b.n	800ce06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cdca:	7bfb      	ldrb	r3, [r7, #15]
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d108      	bne.n	800cde2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cdd0:	7bbb      	ldrb	r3, [r7, #14]
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d105      	bne.n	800cde2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cdd6:	7b7b      	ldrb	r3, [r7, #13]
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d102      	bne.n	800cde2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cddc:	7b3b      	ldrb	r3, [r7, #12]
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d001      	beq.n	800cde6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800cde2:	2301      	movs	r3, #1
 800cde4:	e03e      	b.n	800ce64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2202      	movs	r2, #2
 800cdea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2202      	movs	r2, #2
 800cdf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2202      	movs	r2, #2
 800cdfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2202      	movs	r2, #2
 800ce02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d003      	beq.n	800ce14 <HAL_TIM_Encoder_Start+0xc4>
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	2b04      	cmp	r3, #4
 800ce10:	d008      	beq.n	800ce24 <HAL_TIM_Encoder_Start+0xd4>
 800ce12:	e00f      	b.n	800ce34 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2201      	movs	r2, #1
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f000 ff93 	bl	800dd48 <TIM_CCxChannelCmd>
      break;
 800ce22:	e016      	b.n	800ce52 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	2201      	movs	r2, #1
 800ce2a:	2104      	movs	r1, #4
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f000 ff8b 	bl	800dd48 <TIM_CCxChannelCmd>
      break;
 800ce32:	e00e      	b.n	800ce52 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	2201      	movs	r2, #1
 800ce3a:	2100      	movs	r1, #0
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f000 ff83 	bl	800dd48 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	2201      	movs	r2, #1
 800ce48:	2104      	movs	r1, #4
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f000 ff7c 	bl	800dd48 <TIM_CCxChannelCmd>
      break;
 800ce50:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f042 0201 	orr.w	r2, r2, #1
 800ce60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3710      	adds	r7, #16
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	691b      	ldr	r3, [r3, #16]
 800ce7a:	f003 0302 	and.w	r3, r3, #2
 800ce7e:	2b02      	cmp	r3, #2
 800ce80:	d122      	bne.n	800cec8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	f003 0302 	and.w	r3, r3, #2
 800ce8c:	2b02      	cmp	r3, #2
 800ce8e:	d11b      	bne.n	800cec8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f06f 0202 	mvn.w	r2, #2
 800ce98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	699b      	ldr	r3, [r3, #24]
 800cea6:	f003 0303 	and.w	r3, r3, #3
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d003      	beq.n	800ceb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f000 fb12 	bl	800d4d8 <HAL_TIM_IC_CaptureCallback>
 800ceb4:	e005      	b.n	800cec2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 fb04 	bl	800d4c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f000 fb15 	bl	800d4ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2200      	movs	r2, #0
 800cec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	691b      	ldr	r3, [r3, #16]
 800cece:	f003 0304 	and.w	r3, r3, #4
 800ced2:	2b04      	cmp	r3, #4
 800ced4:	d122      	bne.n	800cf1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	68db      	ldr	r3, [r3, #12]
 800cedc:	f003 0304 	and.w	r3, r3, #4
 800cee0:	2b04      	cmp	r3, #4
 800cee2:	d11b      	bne.n	800cf1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f06f 0204 	mvn.w	r2, #4
 800ceec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2202      	movs	r2, #2
 800cef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	699b      	ldr	r3, [r3, #24]
 800cefa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d003      	beq.n	800cf0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f000 fae8 	bl	800d4d8 <HAL_TIM_IC_CaptureCallback>
 800cf08:	e005      	b.n	800cf16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 fada 	bl	800d4c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f000 faeb 	bl	800d4ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	691b      	ldr	r3, [r3, #16]
 800cf22:	f003 0308 	and.w	r3, r3, #8
 800cf26:	2b08      	cmp	r3, #8
 800cf28:	d122      	bne.n	800cf70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	f003 0308 	and.w	r3, r3, #8
 800cf34:	2b08      	cmp	r3, #8
 800cf36:	d11b      	bne.n	800cf70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f06f 0208 	mvn.w	r2, #8
 800cf40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2204      	movs	r2, #4
 800cf46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	69db      	ldr	r3, [r3, #28]
 800cf4e:	f003 0303 	and.w	r3, r3, #3
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d003      	beq.n	800cf5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f000 fabe 	bl	800d4d8 <HAL_TIM_IC_CaptureCallback>
 800cf5c:	e005      	b.n	800cf6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f000 fab0 	bl	800d4c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 fac1 	bl	800d4ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	691b      	ldr	r3, [r3, #16]
 800cf76:	f003 0310 	and.w	r3, r3, #16
 800cf7a:	2b10      	cmp	r3, #16
 800cf7c:	d122      	bne.n	800cfc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	f003 0310 	and.w	r3, r3, #16
 800cf88:	2b10      	cmp	r3, #16
 800cf8a:	d11b      	bne.n	800cfc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f06f 0210 	mvn.w	r2, #16
 800cf94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2208      	movs	r2, #8
 800cf9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	69db      	ldr	r3, [r3, #28]
 800cfa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d003      	beq.n	800cfb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 fa94 	bl	800d4d8 <HAL_TIM_IC_CaptureCallback>
 800cfb0:	e005      	b.n	800cfbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 fa86 	bl	800d4c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 fa97 	bl	800d4ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	691b      	ldr	r3, [r3, #16]
 800cfca:	f003 0301 	and.w	r3, r3, #1
 800cfce:	2b01      	cmp	r3, #1
 800cfd0:	d10e      	bne.n	800cff0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	68db      	ldr	r3, [r3, #12]
 800cfd8:	f003 0301 	and.w	r3, r3, #1
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d107      	bne.n	800cff0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f06f 0201 	mvn.w	r2, #1
 800cfe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f7f9 fb86 	bl	80066fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	691b      	ldr	r3, [r3, #16]
 800cff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cffa:	2b80      	cmp	r3, #128	; 0x80
 800cffc:	d10e      	bne.n	800d01c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	68db      	ldr	r3, [r3, #12]
 800d004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d008:	2b80      	cmp	r3, #128	; 0x80
 800d00a:	d107      	bne.n	800d01c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f001 f802 	bl	800e020 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	691b      	ldr	r3, [r3, #16]
 800d022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d02a:	d10e      	bne.n	800d04a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	68db      	ldr	r3, [r3, #12]
 800d032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d036:	2b80      	cmp	r3, #128	; 0x80
 800d038:	d107      	bne.n	800d04a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 fff5 	bl	800e034 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	691b      	ldr	r3, [r3, #16]
 800d050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d054:	2b40      	cmp	r3, #64	; 0x40
 800d056:	d10e      	bne.n	800d076 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	68db      	ldr	r3, [r3, #12]
 800d05e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d062:	2b40      	cmp	r3, #64	; 0x40
 800d064:	d107      	bne.n	800d076 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d06e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f000 fa45 	bl	800d500 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	691b      	ldr	r3, [r3, #16]
 800d07c:	f003 0320 	and.w	r3, r3, #32
 800d080:	2b20      	cmp	r3, #32
 800d082:	d10e      	bne.n	800d0a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	68db      	ldr	r3, [r3, #12]
 800d08a:	f003 0320 	and.w	r3, r3, #32
 800d08e:	2b20      	cmp	r3, #32
 800d090:	d107      	bne.n	800d0a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f06f 0220 	mvn.w	r2, #32
 800d09a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f000 ffb5 	bl	800e00c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d0a2:	bf00      	nop
 800d0a4:	3708      	adds	r7, #8
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
	...

0800d0ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b086      	sub	sp, #24
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	60f8      	str	r0, [r7, #12]
 800d0b4:	60b9      	str	r1, [r7, #8]
 800d0b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d101      	bne.n	800d0ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d0c6:	2302      	movs	r3, #2
 800d0c8:	e0ff      	b.n	800d2ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2b14      	cmp	r3, #20
 800d0d6:	f200 80f0 	bhi.w	800d2ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d0da:	a201      	add	r2, pc, #4	; (adr r2, 800d0e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0e0:	0800d135 	.word	0x0800d135
 800d0e4:	0800d2bb 	.word	0x0800d2bb
 800d0e8:	0800d2bb 	.word	0x0800d2bb
 800d0ec:	0800d2bb 	.word	0x0800d2bb
 800d0f0:	0800d175 	.word	0x0800d175
 800d0f4:	0800d2bb 	.word	0x0800d2bb
 800d0f8:	0800d2bb 	.word	0x0800d2bb
 800d0fc:	0800d2bb 	.word	0x0800d2bb
 800d100:	0800d1b7 	.word	0x0800d1b7
 800d104:	0800d2bb 	.word	0x0800d2bb
 800d108:	0800d2bb 	.word	0x0800d2bb
 800d10c:	0800d2bb 	.word	0x0800d2bb
 800d110:	0800d1f7 	.word	0x0800d1f7
 800d114:	0800d2bb 	.word	0x0800d2bb
 800d118:	0800d2bb 	.word	0x0800d2bb
 800d11c:	0800d2bb 	.word	0x0800d2bb
 800d120:	0800d239 	.word	0x0800d239
 800d124:	0800d2bb 	.word	0x0800d2bb
 800d128:	0800d2bb 	.word	0x0800d2bb
 800d12c:	0800d2bb 	.word	0x0800d2bb
 800d130:	0800d279 	.word	0x0800d279
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	68b9      	ldr	r1, [r7, #8]
 800d13a:	4618      	mov	r0, r3
 800d13c:	f000 fa90 	bl	800d660 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	699a      	ldr	r2, [r3, #24]
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f042 0208 	orr.w	r2, r2, #8
 800d14e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	699a      	ldr	r2, [r3, #24]
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f022 0204 	bic.w	r2, r2, #4
 800d15e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	6999      	ldr	r1, [r3, #24]
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	691a      	ldr	r2, [r3, #16]
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	430a      	orrs	r2, r1
 800d170:	619a      	str	r2, [r3, #24]
      break;
 800d172:	e0a5      	b.n	800d2c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	68b9      	ldr	r1, [r7, #8]
 800d17a:	4618      	mov	r0, r3
 800d17c:	f000 fb00 	bl	800d780 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	699a      	ldr	r2, [r3, #24]
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d18e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	699a      	ldr	r2, [r3, #24]
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d19e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	6999      	ldr	r1, [r3, #24]
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	691b      	ldr	r3, [r3, #16]
 800d1aa:	021a      	lsls	r2, r3, #8
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	430a      	orrs	r2, r1
 800d1b2:	619a      	str	r2, [r3, #24]
      break;
 800d1b4:	e084      	b.n	800d2c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	68b9      	ldr	r1, [r7, #8]
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f000 fb69 	bl	800d894 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	69da      	ldr	r2, [r3, #28]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f042 0208 	orr.w	r2, r2, #8
 800d1d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	69da      	ldr	r2, [r3, #28]
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f022 0204 	bic.w	r2, r2, #4
 800d1e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	69d9      	ldr	r1, [r3, #28]
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	691a      	ldr	r2, [r3, #16]
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	430a      	orrs	r2, r1
 800d1f2:	61da      	str	r2, [r3, #28]
      break;
 800d1f4:	e064      	b.n	800d2c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	68b9      	ldr	r1, [r7, #8]
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f000 fbd1 	bl	800d9a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	69da      	ldr	r2, [r3, #28]
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	69da      	ldr	r2, [r3, #28]
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	69d9      	ldr	r1, [r3, #28]
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	691b      	ldr	r3, [r3, #16]
 800d22c:	021a      	lsls	r2, r3, #8
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	430a      	orrs	r2, r1
 800d234:	61da      	str	r2, [r3, #28]
      break;
 800d236:	e043      	b.n	800d2c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	68b9      	ldr	r1, [r7, #8]
 800d23e:	4618      	mov	r0, r3
 800d240:	f000 fc1a 	bl	800da78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f042 0208 	orr.w	r2, r2, #8
 800d252:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f022 0204 	bic.w	r2, r2, #4
 800d262:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	691a      	ldr	r2, [r3, #16]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	430a      	orrs	r2, r1
 800d274:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d276:	e023      	b.n	800d2c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	68b9      	ldr	r1, [r7, #8]
 800d27e:	4618      	mov	r0, r3
 800d280:	f000 fc5e 	bl	800db40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d292:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d2a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	691b      	ldr	r3, [r3, #16]
 800d2ae:	021a      	lsls	r2, r3, #8
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	430a      	orrs	r2, r1
 800d2b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d2b8:	e002      	b.n	800d2c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	75fb      	strb	r3, [r7, #23]
      break;
 800d2be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d2c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3718      	adds	r7, #24
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop

0800d2d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	d101      	bne.n	800d2f0 <HAL_TIM_ConfigClockSource+0x1c>
 800d2ec:	2302      	movs	r3, #2
 800d2ee:	e0dc      	b.n	800d4aa <HAL_TIM_ConfigClockSource+0x1d6>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2202      	movs	r2, #2
 800d2fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	689b      	ldr	r3, [r3, #8]
 800d306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d308:	68ba      	ldr	r2, [r7, #8]
 800d30a:	4b6a      	ldr	r3, [pc, #424]	; (800d4b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d30c:	4013      	ands	r3, r2
 800d30e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d316:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	68ba      	ldr	r2, [r7, #8]
 800d31e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4a64      	ldr	r2, [pc, #400]	; (800d4b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d326:	4293      	cmp	r3, r2
 800d328:	f000 80a9 	beq.w	800d47e <HAL_TIM_ConfigClockSource+0x1aa>
 800d32c:	4a62      	ldr	r2, [pc, #392]	; (800d4b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	f200 80ae 	bhi.w	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d334:	4a61      	ldr	r2, [pc, #388]	; (800d4bc <HAL_TIM_ConfigClockSource+0x1e8>)
 800d336:	4293      	cmp	r3, r2
 800d338:	f000 80a1 	beq.w	800d47e <HAL_TIM_ConfigClockSource+0x1aa>
 800d33c:	4a5f      	ldr	r2, [pc, #380]	; (800d4bc <HAL_TIM_ConfigClockSource+0x1e8>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	f200 80a6 	bhi.w	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d344:	4a5e      	ldr	r2, [pc, #376]	; (800d4c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d346:	4293      	cmp	r3, r2
 800d348:	f000 8099 	beq.w	800d47e <HAL_TIM_ConfigClockSource+0x1aa>
 800d34c:	4a5c      	ldr	r2, [pc, #368]	; (800d4c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	f200 809e 	bhi.w	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d354:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d358:	f000 8091 	beq.w	800d47e <HAL_TIM_ConfigClockSource+0x1aa>
 800d35c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d360:	f200 8096 	bhi.w	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d364:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d368:	f000 8089 	beq.w	800d47e <HAL_TIM_ConfigClockSource+0x1aa>
 800d36c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d370:	f200 808e 	bhi.w	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d378:	d03e      	beq.n	800d3f8 <HAL_TIM_ConfigClockSource+0x124>
 800d37a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d37e:	f200 8087 	bhi.w	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d386:	f000 8086 	beq.w	800d496 <HAL_TIM_ConfigClockSource+0x1c2>
 800d38a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d38e:	d87f      	bhi.n	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d390:	2b70      	cmp	r3, #112	; 0x70
 800d392:	d01a      	beq.n	800d3ca <HAL_TIM_ConfigClockSource+0xf6>
 800d394:	2b70      	cmp	r3, #112	; 0x70
 800d396:	d87b      	bhi.n	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d398:	2b60      	cmp	r3, #96	; 0x60
 800d39a:	d050      	beq.n	800d43e <HAL_TIM_ConfigClockSource+0x16a>
 800d39c:	2b60      	cmp	r3, #96	; 0x60
 800d39e:	d877      	bhi.n	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3a0:	2b50      	cmp	r3, #80	; 0x50
 800d3a2:	d03c      	beq.n	800d41e <HAL_TIM_ConfigClockSource+0x14a>
 800d3a4:	2b50      	cmp	r3, #80	; 0x50
 800d3a6:	d873      	bhi.n	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3a8:	2b40      	cmp	r3, #64	; 0x40
 800d3aa:	d058      	beq.n	800d45e <HAL_TIM_ConfigClockSource+0x18a>
 800d3ac:	2b40      	cmp	r3, #64	; 0x40
 800d3ae:	d86f      	bhi.n	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3b0:	2b30      	cmp	r3, #48	; 0x30
 800d3b2:	d064      	beq.n	800d47e <HAL_TIM_ConfigClockSource+0x1aa>
 800d3b4:	2b30      	cmp	r3, #48	; 0x30
 800d3b6:	d86b      	bhi.n	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3b8:	2b20      	cmp	r3, #32
 800d3ba:	d060      	beq.n	800d47e <HAL_TIM_ConfigClockSource+0x1aa>
 800d3bc:	2b20      	cmp	r3, #32
 800d3be:	d867      	bhi.n	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d05c      	beq.n	800d47e <HAL_TIM_ConfigClockSource+0x1aa>
 800d3c4:	2b10      	cmp	r3, #16
 800d3c6:	d05a      	beq.n	800d47e <HAL_TIM_ConfigClockSource+0x1aa>
 800d3c8:	e062      	b.n	800d490 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6818      	ldr	r0, [r3, #0]
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	6899      	ldr	r1, [r3, #8]
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	685a      	ldr	r2, [r3, #4]
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	68db      	ldr	r3, [r3, #12]
 800d3da:	f000 fc95 	bl	800dd08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	689b      	ldr	r3, [r3, #8]
 800d3e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d3ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	68ba      	ldr	r2, [r7, #8]
 800d3f4:	609a      	str	r2, [r3, #8]
      break;
 800d3f6:	e04f      	b.n	800d498 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6818      	ldr	r0, [r3, #0]
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	6899      	ldr	r1, [r3, #8]
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	685a      	ldr	r2, [r3, #4]
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	68db      	ldr	r3, [r3, #12]
 800d408:	f000 fc7e 	bl	800dd08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	689a      	ldr	r2, [r3, #8]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d41a:	609a      	str	r2, [r3, #8]
      break;
 800d41c:	e03c      	b.n	800d498 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6818      	ldr	r0, [r3, #0]
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	6859      	ldr	r1, [r3, #4]
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	68db      	ldr	r3, [r3, #12]
 800d42a:	461a      	mov	r2, r3
 800d42c:	f000 fbee 	bl	800dc0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	2150      	movs	r1, #80	; 0x50
 800d436:	4618      	mov	r0, r3
 800d438:	f000 fc48 	bl	800dccc <TIM_ITRx_SetConfig>
      break;
 800d43c:	e02c      	b.n	800d498 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6818      	ldr	r0, [r3, #0]
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	6859      	ldr	r1, [r3, #4]
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	461a      	mov	r2, r3
 800d44c:	f000 fc0d 	bl	800dc6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	2160      	movs	r1, #96	; 0x60
 800d456:	4618      	mov	r0, r3
 800d458:	f000 fc38 	bl	800dccc <TIM_ITRx_SetConfig>
      break;
 800d45c:	e01c      	b.n	800d498 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6818      	ldr	r0, [r3, #0]
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	6859      	ldr	r1, [r3, #4]
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	68db      	ldr	r3, [r3, #12]
 800d46a:	461a      	mov	r2, r3
 800d46c:	f000 fbce 	bl	800dc0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	2140      	movs	r1, #64	; 0x40
 800d476:	4618      	mov	r0, r3
 800d478:	f000 fc28 	bl	800dccc <TIM_ITRx_SetConfig>
      break;
 800d47c:	e00c      	b.n	800d498 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4619      	mov	r1, r3
 800d488:	4610      	mov	r0, r2
 800d48a:	f000 fc1f 	bl	800dccc <TIM_ITRx_SetConfig>
      break;
 800d48e:	e003      	b.n	800d498 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d490:	2301      	movs	r3, #1
 800d492:	73fb      	strb	r3, [r7, #15]
      break;
 800d494:	e000      	b.n	800d498 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2201      	movs	r2, #1
 800d49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3710      	adds	r7, #16
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	ffceff88 	.word	0xffceff88
 800d4b8:	00100040 	.word	0x00100040
 800d4bc:	00100030 	.word	0x00100030
 800d4c0:	00100020 	.word	0x00100020

0800d4c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d4cc:	bf00      	nop
 800d4ce:	370c      	adds	r7, #12
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr

0800d4d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b083      	sub	sp, #12
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d4e0:	bf00      	nop
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr

0800d4ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b083      	sub	sp, #12
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d4f4:	bf00      	nop
 800d4f6:	370c      	adds	r7, #12
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d500:	b480      	push	{r7}
 800d502:	b083      	sub	sp, #12
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d508:	bf00      	nop
 800d50a:	370c      	adds	r7, #12
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr

0800d514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d514:	b480      	push	{r7}
 800d516:	b085      	sub	sp, #20
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	4a44      	ldr	r2, [pc, #272]	; (800d638 <TIM_Base_SetConfig+0x124>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d013      	beq.n	800d554 <TIM_Base_SetConfig+0x40>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d532:	d00f      	beq.n	800d554 <TIM_Base_SetConfig+0x40>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	4a41      	ldr	r2, [pc, #260]	; (800d63c <TIM_Base_SetConfig+0x128>)
 800d538:	4293      	cmp	r3, r2
 800d53a:	d00b      	beq.n	800d554 <TIM_Base_SetConfig+0x40>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	4a40      	ldr	r2, [pc, #256]	; (800d640 <TIM_Base_SetConfig+0x12c>)
 800d540:	4293      	cmp	r3, r2
 800d542:	d007      	beq.n	800d554 <TIM_Base_SetConfig+0x40>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	4a3f      	ldr	r2, [pc, #252]	; (800d644 <TIM_Base_SetConfig+0x130>)
 800d548:	4293      	cmp	r3, r2
 800d54a:	d003      	beq.n	800d554 <TIM_Base_SetConfig+0x40>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	4a3e      	ldr	r2, [pc, #248]	; (800d648 <TIM_Base_SetConfig+0x134>)
 800d550:	4293      	cmp	r3, r2
 800d552:	d108      	bne.n	800d566 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d55a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	68fa      	ldr	r2, [r7, #12]
 800d562:	4313      	orrs	r3, r2
 800d564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	4a33      	ldr	r2, [pc, #204]	; (800d638 <TIM_Base_SetConfig+0x124>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d027      	beq.n	800d5be <TIM_Base_SetConfig+0xaa>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d574:	d023      	beq.n	800d5be <TIM_Base_SetConfig+0xaa>
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	4a30      	ldr	r2, [pc, #192]	; (800d63c <TIM_Base_SetConfig+0x128>)
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d01f      	beq.n	800d5be <TIM_Base_SetConfig+0xaa>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	4a2f      	ldr	r2, [pc, #188]	; (800d640 <TIM_Base_SetConfig+0x12c>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d01b      	beq.n	800d5be <TIM_Base_SetConfig+0xaa>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	4a2e      	ldr	r2, [pc, #184]	; (800d644 <TIM_Base_SetConfig+0x130>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d017      	beq.n	800d5be <TIM_Base_SetConfig+0xaa>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	4a2d      	ldr	r2, [pc, #180]	; (800d648 <TIM_Base_SetConfig+0x134>)
 800d592:	4293      	cmp	r3, r2
 800d594:	d013      	beq.n	800d5be <TIM_Base_SetConfig+0xaa>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	4a2c      	ldr	r2, [pc, #176]	; (800d64c <TIM_Base_SetConfig+0x138>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d00f      	beq.n	800d5be <TIM_Base_SetConfig+0xaa>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	4a2b      	ldr	r2, [pc, #172]	; (800d650 <TIM_Base_SetConfig+0x13c>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d00b      	beq.n	800d5be <TIM_Base_SetConfig+0xaa>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	4a2a      	ldr	r2, [pc, #168]	; (800d654 <TIM_Base_SetConfig+0x140>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d007      	beq.n	800d5be <TIM_Base_SetConfig+0xaa>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	4a29      	ldr	r2, [pc, #164]	; (800d658 <TIM_Base_SetConfig+0x144>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d003      	beq.n	800d5be <TIM_Base_SetConfig+0xaa>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	4a28      	ldr	r2, [pc, #160]	; (800d65c <TIM_Base_SetConfig+0x148>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d108      	bne.n	800d5d0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d5c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	68fa      	ldr	r2, [r7, #12]
 800d5cc:	4313      	orrs	r3, r2
 800d5ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	695b      	ldr	r3, [r3, #20]
 800d5da:	4313      	orrs	r3, r2
 800d5dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	68fa      	ldr	r2, [r7, #12]
 800d5e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	689a      	ldr	r2, [r3, #8]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	4a10      	ldr	r2, [pc, #64]	; (800d638 <TIM_Base_SetConfig+0x124>)
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d00f      	beq.n	800d61c <TIM_Base_SetConfig+0x108>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	4a12      	ldr	r2, [pc, #72]	; (800d648 <TIM_Base_SetConfig+0x134>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d00b      	beq.n	800d61c <TIM_Base_SetConfig+0x108>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	4a11      	ldr	r2, [pc, #68]	; (800d64c <TIM_Base_SetConfig+0x138>)
 800d608:	4293      	cmp	r3, r2
 800d60a:	d007      	beq.n	800d61c <TIM_Base_SetConfig+0x108>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	4a10      	ldr	r2, [pc, #64]	; (800d650 <TIM_Base_SetConfig+0x13c>)
 800d610:	4293      	cmp	r3, r2
 800d612:	d003      	beq.n	800d61c <TIM_Base_SetConfig+0x108>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	4a0f      	ldr	r2, [pc, #60]	; (800d654 <TIM_Base_SetConfig+0x140>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d103      	bne.n	800d624 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	691a      	ldr	r2, [r3, #16]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2201      	movs	r2, #1
 800d628:	615a      	str	r2, [r3, #20]
}
 800d62a:	bf00      	nop
 800d62c:	3714      	adds	r7, #20
 800d62e:	46bd      	mov	sp, r7
 800d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d634:	4770      	bx	lr
 800d636:	bf00      	nop
 800d638:	40010000 	.word	0x40010000
 800d63c:	40000400 	.word	0x40000400
 800d640:	40000800 	.word	0x40000800
 800d644:	40000c00 	.word	0x40000c00
 800d648:	40010400 	.word	0x40010400
 800d64c:	40014000 	.word	0x40014000
 800d650:	40014400 	.word	0x40014400
 800d654:	40014800 	.word	0x40014800
 800d658:	4000e000 	.word	0x4000e000
 800d65c:	4000e400 	.word	0x4000e400

0800d660 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d660:	b480      	push	{r7}
 800d662:	b087      	sub	sp, #28
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6a1b      	ldr	r3, [r3, #32]
 800d66e:	f023 0201 	bic.w	r2, r3, #1
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6a1b      	ldr	r3, [r3, #32]
 800d67a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	685b      	ldr	r3, [r3, #4]
 800d680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	699b      	ldr	r3, [r3, #24]
 800d686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d688:	68fa      	ldr	r2, [r7, #12]
 800d68a:	4b37      	ldr	r3, [pc, #220]	; (800d768 <TIM_OC1_SetConfig+0x108>)
 800d68c:	4013      	ands	r3, r2
 800d68e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f023 0303 	bic.w	r3, r3, #3
 800d696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	68fa      	ldr	r2, [r7, #12]
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	f023 0302 	bic.w	r3, r3, #2
 800d6a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	689b      	ldr	r3, [r3, #8]
 800d6ae:	697a      	ldr	r2, [r7, #20]
 800d6b0:	4313      	orrs	r3, r2
 800d6b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	4a2d      	ldr	r2, [pc, #180]	; (800d76c <TIM_OC1_SetConfig+0x10c>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d00f      	beq.n	800d6dc <TIM_OC1_SetConfig+0x7c>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	4a2c      	ldr	r2, [pc, #176]	; (800d770 <TIM_OC1_SetConfig+0x110>)
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d00b      	beq.n	800d6dc <TIM_OC1_SetConfig+0x7c>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	4a2b      	ldr	r2, [pc, #172]	; (800d774 <TIM_OC1_SetConfig+0x114>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d007      	beq.n	800d6dc <TIM_OC1_SetConfig+0x7c>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	4a2a      	ldr	r2, [pc, #168]	; (800d778 <TIM_OC1_SetConfig+0x118>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d003      	beq.n	800d6dc <TIM_OC1_SetConfig+0x7c>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	4a29      	ldr	r2, [pc, #164]	; (800d77c <TIM_OC1_SetConfig+0x11c>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d10c      	bne.n	800d6f6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	f023 0308 	bic.w	r3, r3, #8
 800d6e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	68db      	ldr	r3, [r3, #12]
 800d6e8:	697a      	ldr	r2, [r7, #20]
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	f023 0304 	bic.w	r3, r3, #4
 800d6f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	4a1c      	ldr	r2, [pc, #112]	; (800d76c <TIM_OC1_SetConfig+0x10c>)
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d00f      	beq.n	800d71e <TIM_OC1_SetConfig+0xbe>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	4a1b      	ldr	r2, [pc, #108]	; (800d770 <TIM_OC1_SetConfig+0x110>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d00b      	beq.n	800d71e <TIM_OC1_SetConfig+0xbe>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	4a1a      	ldr	r2, [pc, #104]	; (800d774 <TIM_OC1_SetConfig+0x114>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d007      	beq.n	800d71e <TIM_OC1_SetConfig+0xbe>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	4a19      	ldr	r2, [pc, #100]	; (800d778 <TIM_OC1_SetConfig+0x118>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d003      	beq.n	800d71e <TIM_OC1_SetConfig+0xbe>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	4a18      	ldr	r2, [pc, #96]	; (800d77c <TIM_OC1_SetConfig+0x11c>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d111      	bne.n	800d742 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d72c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	695b      	ldr	r3, [r3, #20]
 800d732:	693a      	ldr	r2, [r7, #16]
 800d734:	4313      	orrs	r3, r2
 800d736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	699b      	ldr	r3, [r3, #24]
 800d73c:	693a      	ldr	r2, [r7, #16]
 800d73e:	4313      	orrs	r3, r2
 800d740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	693a      	ldr	r2, [r7, #16]
 800d746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	68fa      	ldr	r2, [r7, #12]
 800d74c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	685a      	ldr	r2, [r3, #4]
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	697a      	ldr	r2, [r7, #20]
 800d75a:	621a      	str	r2, [r3, #32]
}
 800d75c:	bf00      	nop
 800d75e:	371c      	adds	r7, #28
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr
 800d768:	fffeff8f 	.word	0xfffeff8f
 800d76c:	40010000 	.word	0x40010000
 800d770:	40010400 	.word	0x40010400
 800d774:	40014000 	.word	0x40014000
 800d778:	40014400 	.word	0x40014400
 800d77c:	40014800 	.word	0x40014800

0800d780 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d780:	b480      	push	{r7}
 800d782:	b087      	sub	sp, #28
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6a1b      	ldr	r3, [r3, #32]
 800d78e:	f023 0210 	bic.w	r2, r3, #16
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6a1b      	ldr	r3, [r3, #32]
 800d79a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	699b      	ldr	r3, [r3, #24]
 800d7a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d7a8:	68fa      	ldr	r2, [r7, #12]
 800d7aa:	4b34      	ldr	r3, [pc, #208]	; (800d87c <TIM_OC2_SetConfig+0xfc>)
 800d7ac:	4013      	ands	r3, r2
 800d7ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d7b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	021b      	lsls	r3, r3, #8
 800d7be:	68fa      	ldr	r2, [r7, #12]
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	f023 0320 	bic.w	r3, r3, #32
 800d7ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	689b      	ldr	r3, [r3, #8]
 800d7d0:	011b      	lsls	r3, r3, #4
 800d7d2:	697a      	ldr	r2, [r7, #20]
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	4a29      	ldr	r2, [pc, #164]	; (800d880 <TIM_OC2_SetConfig+0x100>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d003      	beq.n	800d7e8 <TIM_OC2_SetConfig+0x68>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	4a28      	ldr	r2, [pc, #160]	; (800d884 <TIM_OC2_SetConfig+0x104>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d10d      	bne.n	800d804 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d7ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	011b      	lsls	r3, r3, #4
 800d7f6:	697a      	ldr	r2, [r7, #20]
 800d7f8:	4313      	orrs	r3, r2
 800d7fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d802:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	4a1e      	ldr	r2, [pc, #120]	; (800d880 <TIM_OC2_SetConfig+0x100>)
 800d808:	4293      	cmp	r3, r2
 800d80a:	d00f      	beq.n	800d82c <TIM_OC2_SetConfig+0xac>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	4a1d      	ldr	r2, [pc, #116]	; (800d884 <TIM_OC2_SetConfig+0x104>)
 800d810:	4293      	cmp	r3, r2
 800d812:	d00b      	beq.n	800d82c <TIM_OC2_SetConfig+0xac>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	4a1c      	ldr	r2, [pc, #112]	; (800d888 <TIM_OC2_SetConfig+0x108>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d007      	beq.n	800d82c <TIM_OC2_SetConfig+0xac>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	4a1b      	ldr	r2, [pc, #108]	; (800d88c <TIM_OC2_SetConfig+0x10c>)
 800d820:	4293      	cmp	r3, r2
 800d822:	d003      	beq.n	800d82c <TIM_OC2_SetConfig+0xac>
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	4a1a      	ldr	r2, [pc, #104]	; (800d890 <TIM_OC2_SetConfig+0x110>)
 800d828:	4293      	cmp	r3, r2
 800d82a:	d113      	bne.n	800d854 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d832:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d83a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	695b      	ldr	r3, [r3, #20]
 800d840:	009b      	lsls	r3, r3, #2
 800d842:	693a      	ldr	r2, [r7, #16]
 800d844:	4313      	orrs	r3, r2
 800d846:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	699b      	ldr	r3, [r3, #24]
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	693a      	ldr	r2, [r7, #16]
 800d850:	4313      	orrs	r3, r2
 800d852:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	693a      	ldr	r2, [r7, #16]
 800d858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	68fa      	ldr	r2, [r7, #12]
 800d85e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	685a      	ldr	r2, [r3, #4]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	697a      	ldr	r2, [r7, #20]
 800d86c:	621a      	str	r2, [r3, #32]
}
 800d86e:	bf00      	nop
 800d870:	371c      	adds	r7, #28
 800d872:	46bd      	mov	sp, r7
 800d874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d878:	4770      	bx	lr
 800d87a:	bf00      	nop
 800d87c:	feff8fff 	.word	0xfeff8fff
 800d880:	40010000 	.word	0x40010000
 800d884:	40010400 	.word	0x40010400
 800d888:	40014000 	.word	0x40014000
 800d88c:	40014400 	.word	0x40014400
 800d890:	40014800 	.word	0x40014800

0800d894 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d894:	b480      	push	{r7}
 800d896:	b087      	sub	sp, #28
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6a1b      	ldr	r3, [r3, #32]
 800d8a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6a1b      	ldr	r3, [r3, #32]
 800d8ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	685b      	ldr	r3, [r3, #4]
 800d8b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	69db      	ldr	r3, [r3, #28]
 800d8ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d8bc:	68fa      	ldr	r2, [r7, #12]
 800d8be:	4b33      	ldr	r3, [pc, #204]	; (800d98c <TIM_OC3_SetConfig+0xf8>)
 800d8c0:	4013      	ands	r3, r2
 800d8c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f023 0303 	bic.w	r3, r3, #3
 800d8ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	68fa      	ldr	r2, [r7, #12]
 800d8d2:	4313      	orrs	r3, r2
 800d8d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d8dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	689b      	ldr	r3, [r3, #8]
 800d8e2:	021b      	lsls	r3, r3, #8
 800d8e4:	697a      	ldr	r2, [r7, #20]
 800d8e6:	4313      	orrs	r3, r2
 800d8e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	4a28      	ldr	r2, [pc, #160]	; (800d990 <TIM_OC3_SetConfig+0xfc>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d003      	beq.n	800d8fa <TIM_OC3_SetConfig+0x66>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	4a27      	ldr	r2, [pc, #156]	; (800d994 <TIM_OC3_SetConfig+0x100>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d10d      	bne.n	800d916 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d900:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	68db      	ldr	r3, [r3, #12]
 800d906:	021b      	lsls	r3, r3, #8
 800d908:	697a      	ldr	r2, [r7, #20]
 800d90a:	4313      	orrs	r3, r2
 800d90c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	4a1d      	ldr	r2, [pc, #116]	; (800d990 <TIM_OC3_SetConfig+0xfc>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d00f      	beq.n	800d93e <TIM_OC3_SetConfig+0xaa>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	4a1c      	ldr	r2, [pc, #112]	; (800d994 <TIM_OC3_SetConfig+0x100>)
 800d922:	4293      	cmp	r3, r2
 800d924:	d00b      	beq.n	800d93e <TIM_OC3_SetConfig+0xaa>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	4a1b      	ldr	r2, [pc, #108]	; (800d998 <TIM_OC3_SetConfig+0x104>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d007      	beq.n	800d93e <TIM_OC3_SetConfig+0xaa>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	4a1a      	ldr	r2, [pc, #104]	; (800d99c <TIM_OC3_SetConfig+0x108>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d003      	beq.n	800d93e <TIM_OC3_SetConfig+0xaa>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	4a19      	ldr	r2, [pc, #100]	; (800d9a0 <TIM_OC3_SetConfig+0x10c>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d113      	bne.n	800d966 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d94c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	695b      	ldr	r3, [r3, #20]
 800d952:	011b      	lsls	r3, r3, #4
 800d954:	693a      	ldr	r2, [r7, #16]
 800d956:	4313      	orrs	r3, r2
 800d958:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	699b      	ldr	r3, [r3, #24]
 800d95e:	011b      	lsls	r3, r3, #4
 800d960:	693a      	ldr	r2, [r7, #16]
 800d962:	4313      	orrs	r3, r2
 800d964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	693a      	ldr	r2, [r7, #16]
 800d96a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	68fa      	ldr	r2, [r7, #12]
 800d970:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	685a      	ldr	r2, [r3, #4]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	697a      	ldr	r2, [r7, #20]
 800d97e:	621a      	str	r2, [r3, #32]
}
 800d980:	bf00      	nop
 800d982:	371c      	adds	r7, #28
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr
 800d98c:	fffeff8f 	.word	0xfffeff8f
 800d990:	40010000 	.word	0x40010000
 800d994:	40010400 	.word	0x40010400
 800d998:	40014000 	.word	0x40014000
 800d99c:	40014400 	.word	0x40014400
 800d9a0:	40014800 	.word	0x40014800

0800d9a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b087      	sub	sp, #28
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6a1b      	ldr	r3, [r3, #32]
 800d9b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6a1b      	ldr	r3, [r3, #32]
 800d9be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	685b      	ldr	r3, [r3, #4]
 800d9c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	69db      	ldr	r3, [r3, #28]
 800d9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d9cc:	68fa      	ldr	r2, [r7, #12]
 800d9ce:	4b24      	ldr	r3, [pc, #144]	; (800da60 <TIM_OC4_SetConfig+0xbc>)
 800d9d0:	4013      	ands	r3, r2
 800d9d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d9da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	021b      	lsls	r3, r3, #8
 800d9e2:	68fa      	ldr	r2, [r7, #12]
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d9ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	689b      	ldr	r3, [r3, #8]
 800d9f4:	031b      	lsls	r3, r3, #12
 800d9f6:	693a      	ldr	r2, [r7, #16]
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	4a19      	ldr	r2, [pc, #100]	; (800da64 <TIM_OC4_SetConfig+0xc0>)
 800da00:	4293      	cmp	r3, r2
 800da02:	d00f      	beq.n	800da24 <TIM_OC4_SetConfig+0x80>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	4a18      	ldr	r2, [pc, #96]	; (800da68 <TIM_OC4_SetConfig+0xc4>)
 800da08:	4293      	cmp	r3, r2
 800da0a:	d00b      	beq.n	800da24 <TIM_OC4_SetConfig+0x80>
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	4a17      	ldr	r2, [pc, #92]	; (800da6c <TIM_OC4_SetConfig+0xc8>)
 800da10:	4293      	cmp	r3, r2
 800da12:	d007      	beq.n	800da24 <TIM_OC4_SetConfig+0x80>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	4a16      	ldr	r2, [pc, #88]	; (800da70 <TIM_OC4_SetConfig+0xcc>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	d003      	beq.n	800da24 <TIM_OC4_SetConfig+0x80>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	4a15      	ldr	r2, [pc, #84]	; (800da74 <TIM_OC4_SetConfig+0xd0>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d109      	bne.n	800da38 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800da2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	695b      	ldr	r3, [r3, #20]
 800da30:	019b      	lsls	r3, r3, #6
 800da32:	697a      	ldr	r2, [r7, #20]
 800da34:	4313      	orrs	r3, r2
 800da36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	697a      	ldr	r2, [r7, #20]
 800da3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	68fa      	ldr	r2, [r7, #12]
 800da42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	685a      	ldr	r2, [r3, #4]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	693a      	ldr	r2, [r7, #16]
 800da50:	621a      	str	r2, [r3, #32]
}
 800da52:	bf00      	nop
 800da54:	371c      	adds	r7, #28
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop
 800da60:	feff8fff 	.word	0xfeff8fff
 800da64:	40010000 	.word	0x40010000
 800da68:	40010400 	.word	0x40010400
 800da6c:	40014000 	.word	0x40014000
 800da70:	40014400 	.word	0x40014400
 800da74:	40014800 	.word	0x40014800

0800da78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800da78:	b480      	push	{r7}
 800da7a:	b087      	sub	sp, #28
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6a1b      	ldr	r3, [r3, #32]
 800da86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6a1b      	ldr	r3, [r3, #32]
 800da92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	685b      	ldr	r3, [r3, #4]
 800da98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800daa0:	68fa      	ldr	r2, [r7, #12]
 800daa2:	4b21      	ldr	r3, [pc, #132]	; (800db28 <TIM_OC5_SetConfig+0xb0>)
 800daa4:	4013      	ands	r3, r2
 800daa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	68fa      	ldr	r2, [r7, #12]
 800daae:	4313      	orrs	r3, r2
 800dab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dab8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	689b      	ldr	r3, [r3, #8]
 800dabe:	041b      	lsls	r3, r3, #16
 800dac0:	693a      	ldr	r2, [r7, #16]
 800dac2:	4313      	orrs	r3, r2
 800dac4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	4a18      	ldr	r2, [pc, #96]	; (800db2c <TIM_OC5_SetConfig+0xb4>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d00f      	beq.n	800daee <TIM_OC5_SetConfig+0x76>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	4a17      	ldr	r2, [pc, #92]	; (800db30 <TIM_OC5_SetConfig+0xb8>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d00b      	beq.n	800daee <TIM_OC5_SetConfig+0x76>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	4a16      	ldr	r2, [pc, #88]	; (800db34 <TIM_OC5_SetConfig+0xbc>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d007      	beq.n	800daee <TIM_OC5_SetConfig+0x76>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	4a15      	ldr	r2, [pc, #84]	; (800db38 <TIM_OC5_SetConfig+0xc0>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d003      	beq.n	800daee <TIM_OC5_SetConfig+0x76>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	4a14      	ldr	r2, [pc, #80]	; (800db3c <TIM_OC5_SetConfig+0xc4>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d109      	bne.n	800db02 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800daf4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	695b      	ldr	r3, [r3, #20]
 800dafa:	021b      	lsls	r3, r3, #8
 800dafc:	697a      	ldr	r2, [r7, #20]
 800dafe:	4313      	orrs	r3, r2
 800db00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	697a      	ldr	r2, [r7, #20]
 800db06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	68fa      	ldr	r2, [r7, #12]
 800db0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	685a      	ldr	r2, [r3, #4]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	693a      	ldr	r2, [r7, #16]
 800db1a:	621a      	str	r2, [r3, #32]
}
 800db1c:	bf00      	nop
 800db1e:	371c      	adds	r7, #28
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr
 800db28:	fffeff8f 	.word	0xfffeff8f
 800db2c:	40010000 	.word	0x40010000
 800db30:	40010400 	.word	0x40010400
 800db34:	40014000 	.word	0x40014000
 800db38:	40014400 	.word	0x40014400
 800db3c:	40014800 	.word	0x40014800

0800db40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800db40:	b480      	push	{r7}
 800db42:	b087      	sub	sp, #28
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6a1b      	ldr	r3, [r3, #32]
 800db4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6a1b      	ldr	r3, [r3, #32]
 800db5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	4b22      	ldr	r3, [pc, #136]	; (800dbf4 <TIM_OC6_SetConfig+0xb4>)
 800db6c:	4013      	ands	r3, r2
 800db6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	021b      	lsls	r3, r3, #8
 800db76:	68fa      	ldr	r2, [r7, #12]
 800db78:	4313      	orrs	r3, r2
 800db7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800db82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	689b      	ldr	r3, [r3, #8]
 800db88:	051b      	lsls	r3, r3, #20
 800db8a:	693a      	ldr	r2, [r7, #16]
 800db8c:	4313      	orrs	r3, r2
 800db8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	4a19      	ldr	r2, [pc, #100]	; (800dbf8 <TIM_OC6_SetConfig+0xb8>)
 800db94:	4293      	cmp	r3, r2
 800db96:	d00f      	beq.n	800dbb8 <TIM_OC6_SetConfig+0x78>
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	4a18      	ldr	r2, [pc, #96]	; (800dbfc <TIM_OC6_SetConfig+0xbc>)
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d00b      	beq.n	800dbb8 <TIM_OC6_SetConfig+0x78>
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	4a17      	ldr	r2, [pc, #92]	; (800dc00 <TIM_OC6_SetConfig+0xc0>)
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d007      	beq.n	800dbb8 <TIM_OC6_SetConfig+0x78>
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	4a16      	ldr	r2, [pc, #88]	; (800dc04 <TIM_OC6_SetConfig+0xc4>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d003      	beq.n	800dbb8 <TIM_OC6_SetConfig+0x78>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	4a15      	ldr	r2, [pc, #84]	; (800dc08 <TIM_OC6_SetConfig+0xc8>)
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d109      	bne.n	800dbcc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dbbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	695b      	ldr	r3, [r3, #20]
 800dbc4:	029b      	lsls	r3, r3, #10
 800dbc6:	697a      	ldr	r2, [r7, #20]
 800dbc8:	4313      	orrs	r3, r2
 800dbca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	697a      	ldr	r2, [r7, #20]
 800dbd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	68fa      	ldr	r2, [r7, #12]
 800dbd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	685a      	ldr	r2, [r3, #4]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	693a      	ldr	r2, [r7, #16]
 800dbe4:	621a      	str	r2, [r3, #32]
}
 800dbe6:	bf00      	nop
 800dbe8:	371c      	adds	r7, #28
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr
 800dbf2:	bf00      	nop
 800dbf4:	feff8fff 	.word	0xfeff8fff
 800dbf8:	40010000 	.word	0x40010000
 800dbfc:	40010400 	.word	0x40010400
 800dc00:	40014000 	.word	0x40014000
 800dc04:	40014400 	.word	0x40014400
 800dc08:	40014800 	.word	0x40014800

0800dc0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b087      	sub	sp, #28
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	60f8      	str	r0, [r7, #12]
 800dc14:	60b9      	str	r1, [r7, #8]
 800dc16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	6a1b      	ldr	r3, [r3, #32]
 800dc1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	6a1b      	ldr	r3, [r3, #32]
 800dc22:	f023 0201 	bic.w	r2, r3, #1
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	699b      	ldr	r3, [r3, #24]
 800dc2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dc36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	011b      	lsls	r3, r3, #4
 800dc3c:	693a      	ldr	r2, [r7, #16]
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	f023 030a 	bic.w	r3, r3, #10
 800dc48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dc4a:	697a      	ldr	r2, [r7, #20]
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	693a      	ldr	r2, [r7, #16]
 800dc56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	697a      	ldr	r2, [r7, #20]
 800dc5c:	621a      	str	r2, [r3, #32]
}
 800dc5e:	bf00      	nop
 800dc60:	371c      	adds	r7, #28
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr

0800dc6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc6a:	b480      	push	{r7}
 800dc6c:	b087      	sub	sp, #28
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	60f8      	str	r0, [r7, #12]
 800dc72:	60b9      	str	r1, [r7, #8]
 800dc74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	6a1b      	ldr	r3, [r3, #32]
 800dc7a:	f023 0210 	bic.w	r2, r3, #16
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	699b      	ldr	r3, [r3, #24]
 800dc86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	6a1b      	ldr	r3, [r3, #32]
 800dc8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dc94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	031b      	lsls	r3, r3, #12
 800dc9a:	697a      	ldr	r2, [r7, #20]
 800dc9c:	4313      	orrs	r3, r2
 800dc9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dca6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	011b      	lsls	r3, r3, #4
 800dcac:	693a      	ldr	r2, [r7, #16]
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	697a      	ldr	r2, [r7, #20]
 800dcb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	693a      	ldr	r2, [r7, #16]
 800dcbc:	621a      	str	r2, [r3, #32]
}
 800dcbe:	bf00      	nop
 800dcc0:	371c      	adds	r7, #28
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc8:	4770      	bx	lr
	...

0800dccc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b085      	sub	sp, #20
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dcdc:	68fa      	ldr	r2, [r7, #12]
 800dcde:	4b09      	ldr	r3, [pc, #36]	; (800dd04 <TIM_ITRx_SetConfig+0x38>)
 800dce0:	4013      	ands	r3, r2
 800dce2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dce4:	683a      	ldr	r2, [r7, #0]
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	4313      	orrs	r3, r2
 800dcea:	f043 0307 	orr.w	r3, r3, #7
 800dcee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	68fa      	ldr	r2, [r7, #12]
 800dcf4:	609a      	str	r2, [r3, #8]
}
 800dcf6:	bf00      	nop
 800dcf8:	3714      	adds	r7, #20
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	ffcfff8f 	.word	0xffcfff8f

0800dd08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b087      	sub	sp, #28
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	60f8      	str	r0, [r7, #12]
 800dd10:	60b9      	str	r1, [r7, #8]
 800dd12:	607a      	str	r2, [r7, #4]
 800dd14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	689b      	ldr	r3, [r3, #8]
 800dd1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dd22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	021a      	lsls	r2, r3, #8
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	431a      	orrs	r2, r3
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	697a      	ldr	r2, [r7, #20]
 800dd32:	4313      	orrs	r3, r2
 800dd34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	697a      	ldr	r2, [r7, #20]
 800dd3a:	609a      	str	r2, [r3, #8]
}
 800dd3c:	bf00      	nop
 800dd3e:	371c      	adds	r7, #28
 800dd40:	46bd      	mov	sp, r7
 800dd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd46:	4770      	bx	lr

0800dd48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dd48:	b480      	push	{r7}
 800dd4a:	b087      	sub	sp, #28
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	f003 031f 	and.w	r3, r3, #31
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	fa02 f303 	lsl.w	r3, r2, r3
 800dd60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	6a1a      	ldr	r2, [r3, #32]
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	43db      	mvns	r3, r3
 800dd6a:	401a      	ands	r2, r3
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	6a1a      	ldr	r2, [r3, #32]
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	f003 031f 	and.w	r3, r3, #31
 800dd7a:	6879      	ldr	r1, [r7, #4]
 800dd7c:	fa01 f303 	lsl.w	r3, r1, r3
 800dd80:	431a      	orrs	r2, r3
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	621a      	str	r2, [r3, #32]
}
 800dd86:	bf00      	nop
 800dd88:	371c      	adds	r7, #28
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr
	...

0800dd94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b085      	sub	sp, #20
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d101      	bne.n	800ddac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dda8:	2302      	movs	r3, #2
 800ddaa:	e077      	b.n	800de9c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2201      	movs	r2, #1
 800ddb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2202      	movs	r2, #2
 800ddb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	685b      	ldr	r3, [r3, #4]
 800ddc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	689b      	ldr	r3, [r3, #8]
 800ddca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	4a35      	ldr	r2, [pc, #212]	; (800dea8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ddd2:	4293      	cmp	r3, r2
 800ddd4:	d004      	beq.n	800dde0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	4a34      	ldr	r2, [pc, #208]	; (800deac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dddc:	4293      	cmp	r3, r2
 800ddde:	d108      	bne.n	800ddf2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dde6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	685b      	ldr	r3, [r3, #4]
 800ddec:	68fa      	ldr	r2, [r7, #12]
 800ddee:	4313      	orrs	r3, r2
 800ddf0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddf8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	68fa      	ldr	r2, [r7, #12]
 800de00:	4313      	orrs	r3, r2
 800de02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	68fa      	ldr	r2, [r7, #12]
 800de0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	4a25      	ldr	r2, [pc, #148]	; (800dea8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d02c      	beq.n	800de70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de1e:	d027      	beq.n	800de70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	4a22      	ldr	r2, [pc, #136]	; (800deb0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d022      	beq.n	800de70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	4a21      	ldr	r2, [pc, #132]	; (800deb4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800de30:	4293      	cmp	r3, r2
 800de32:	d01d      	beq.n	800de70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	4a1f      	ldr	r2, [pc, #124]	; (800deb8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d018      	beq.n	800de70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	4a1a      	ldr	r2, [pc, #104]	; (800deac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d013      	beq.n	800de70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	4a1b      	ldr	r2, [pc, #108]	; (800debc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	d00e      	beq.n	800de70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	4a1a      	ldr	r2, [pc, #104]	; (800dec0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800de58:	4293      	cmp	r3, r2
 800de5a:	d009      	beq.n	800de70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4a18      	ldr	r2, [pc, #96]	; (800dec4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d004      	beq.n	800de70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	4a17      	ldr	r2, [pc, #92]	; (800dec8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d10c      	bne.n	800de8a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	689b      	ldr	r3, [r3, #8]
 800de7c:	68ba      	ldr	r2, [r7, #8]
 800de7e:	4313      	orrs	r3, r2
 800de80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	68ba      	ldr	r2, [r7, #8]
 800de88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2201      	movs	r2, #1
 800de8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2200      	movs	r2, #0
 800de96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800de9a:	2300      	movs	r3, #0
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3714      	adds	r7, #20
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr
 800dea8:	40010000 	.word	0x40010000
 800deac:	40010400 	.word	0x40010400
 800deb0:	40000400 	.word	0x40000400
 800deb4:	40000800 	.word	0x40000800
 800deb8:	40000c00 	.word	0x40000c00
 800debc:	40001800 	.word	0x40001800
 800dec0:	40014000 	.word	0x40014000
 800dec4:	4000e000 	.word	0x4000e000
 800dec8:	4000e400 	.word	0x4000e400

0800decc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800decc:	b480      	push	{r7}
 800dece:	b085      	sub	sp, #20
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ded6:	2300      	movs	r3, #0
 800ded8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	d101      	bne.n	800dee8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dee4:	2302      	movs	r3, #2
 800dee6:	e087      	b.n	800dff8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2201      	movs	r2, #1
 800deec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	4313      	orrs	r3, r2
 800defc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	4313      	orrs	r3, r2
 800df0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	685b      	ldr	r3, [r3, #4]
 800df16:	4313      	orrs	r3, r2
 800df18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4313      	orrs	r3, r2
 800df26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	691b      	ldr	r3, [r3, #16]
 800df32:	4313      	orrs	r3, r2
 800df34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	695b      	ldr	r3, [r3, #20]
 800df40:	4313      	orrs	r3, r2
 800df42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df4e:	4313      	orrs	r3, r2
 800df50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	699b      	ldr	r3, [r3, #24]
 800df5c:	041b      	lsls	r3, r3, #16
 800df5e:	4313      	orrs	r3, r2
 800df60:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	4a27      	ldr	r2, [pc, #156]	; (800e004 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d004      	beq.n	800df76 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4a25      	ldr	r2, [pc, #148]	; (800e008 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d106      	bne.n	800df84 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	69db      	ldr	r3, [r3, #28]
 800df80:	4313      	orrs	r3, r2
 800df82:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4a1e      	ldr	r2, [pc, #120]	; (800e004 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d004      	beq.n	800df98 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	4a1d      	ldr	r2, [pc, #116]	; (800e008 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800df94:	4293      	cmp	r3, r2
 800df96:	d126      	bne.n	800dfe6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfa2:	051b      	lsls	r3, r3, #20
 800dfa4:	4313      	orrs	r3, r2
 800dfa6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	6a1b      	ldr	r3, [r3, #32]
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfc0:	4313      	orrs	r3, r2
 800dfc2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4a0e      	ldr	r2, [pc, #56]	; (800e004 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	d004      	beq.n	800dfd8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	4a0d      	ldr	r2, [pc, #52]	; (800e008 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d106      	bne.n	800dfe6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	68fa      	ldr	r2, [r7, #12]
 800dfec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2200      	movs	r2, #0
 800dff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dff6:	2300      	movs	r3, #0
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3714      	adds	r7, #20
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr
 800e004:	40010000 	.word	0x40010000
 800e008:	40010400 	.word	0x40010400

0800e00c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e00c:	b480      	push	{r7}
 800e00e:	b083      	sub	sp, #12
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e014:	bf00      	nop
 800e016:	370c      	adds	r7, #12
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr

0800e020 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e020:	b480      	push	{r7}
 800e022:	b083      	sub	sp, #12
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e028:	bf00      	nop
 800e02a:	370c      	adds	r7, #12
 800e02c:	46bd      	mov	sp, r7
 800e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e032:	4770      	bx	lr

0800e034 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e034:	b480      	push	{r7}
 800e036:	b083      	sub	sp, #12
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e03c:	bf00      	nop
 800e03e:	370c      	adds	r7, #12
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr

0800e048 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d101      	bne.n	800e05a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e056:	2301      	movs	r3, #1
 800e058:	e042      	b.n	800e0e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e060:	2b00      	cmp	r3, #0
 800e062:	d106      	bne.n	800e072 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2200      	movs	r2, #0
 800e068:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f7f8 f905 	bl	800627c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2224      	movs	r2, #36	; 0x24
 800e076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	681a      	ldr	r2, [r3, #0]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	f022 0201 	bic.w	r2, r2, #1
 800e088:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f000 fcdc 	bl	800ea48 <UART_SetConfig>
 800e090:	4603      	mov	r3, r0
 800e092:	2b01      	cmp	r3, #1
 800e094:	d101      	bne.n	800e09a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e096:	2301      	movs	r3, #1
 800e098:	e022      	b.n	800e0e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d002      	beq.n	800e0a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f001 fb3c 	bl	800f720 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	685a      	ldr	r2, [r3, #4]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e0b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	689a      	ldr	r2, [r3, #8]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e0c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	681a      	ldr	r2, [r3, #0]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	f042 0201 	orr.w	r2, r2, #1
 800e0d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f001 fbc3 	bl	800f864 <UART_CheckIdleState>
 800e0de:	4603      	mov	r3, r0
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}

0800e0e8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b08a      	sub	sp, #40	; 0x28
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	60b9      	str	r1, [r7, #8]
 800e0f2:	4613      	mov	r3, r2
 800e0f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0fc:	2b20      	cmp	r3, #32
 800e0fe:	d17a      	bne.n	800e1f6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d002      	beq.n	800e10c <HAL_UART_Transmit_DMA+0x24>
 800e106:	88fb      	ldrh	r3, [r7, #6]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d101      	bne.n	800e110 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800e10c:	2301      	movs	r3, #1
 800e10e:	e073      	b.n	800e1f8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e116:	2b01      	cmp	r3, #1
 800e118:	d101      	bne.n	800e11e <HAL_UART_Transmit_DMA+0x36>
 800e11a:	2302      	movs	r3, #2
 800e11c:	e06c      	b.n	800e1f8 <HAL_UART_Transmit_DMA+0x110>
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	2201      	movs	r2, #1
 800e122:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	68ba      	ldr	r2, [r7, #8]
 800e12a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	88fa      	ldrh	r2, [r7, #6]
 800e130:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	88fa      	ldrh	r2, [r7, #6]
 800e138:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2200      	movs	r2, #0
 800e140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2221      	movs	r2, #33	; 0x21
 800e148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e150:	2b00      	cmp	r3, #0
 800e152:	d02c      	beq.n	800e1ae <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e158:	4a29      	ldr	r2, [pc, #164]	; (800e200 <HAL_UART_Transmit_DMA+0x118>)
 800e15a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e160:	4a28      	ldr	r2, [pc, #160]	; (800e204 <HAL_UART_Transmit_DMA+0x11c>)
 800e162:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e168:	4a27      	ldr	r2, [pc, #156]	; (800e208 <HAL_UART_Transmit_DMA+0x120>)
 800e16a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e170:	2200      	movs	r2, #0
 800e172:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e17c:	4619      	mov	r1, r3
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	3328      	adds	r3, #40	; 0x28
 800e184:	461a      	mov	r2, r3
 800e186:	88fb      	ldrh	r3, [r7, #6]
 800e188:	f7f9 fa38 	bl	80075fc <HAL_DMA_Start_IT>
 800e18c:	4603      	mov	r3, r0
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d00d      	beq.n	800e1ae <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2210      	movs	r2, #16
 800e196:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	2200      	movs	r2, #0
 800e19e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2220      	movs	r2, #32
 800e1a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	e024      	b.n	800e1f8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	2240      	movs	r2, #64	; 0x40
 800e1b4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	3308      	adds	r3, #8
 800e1c4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	e853 3f00 	ldrex	r3, [r3]
 800e1cc:	613b      	str	r3, [r7, #16]
   return(result);
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1d4:	627b      	str	r3, [r7, #36]	; 0x24
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	3308      	adds	r3, #8
 800e1dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1de:	623a      	str	r2, [r7, #32]
 800e1e0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1e2:	69f9      	ldr	r1, [r7, #28]
 800e1e4:	6a3a      	ldr	r2, [r7, #32]
 800e1e6:	e841 2300 	strex	r3, r2, [r1]
 800e1ea:	61bb      	str	r3, [r7, #24]
   return(result);
 800e1ec:	69bb      	ldr	r3, [r7, #24]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d1e5      	bne.n	800e1be <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	e000      	b.n	800e1f8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800e1f6:	2302      	movs	r3, #2
  }
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3728      	adds	r7, #40	; 0x28
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}
 800e200:	0800fd2d 	.word	0x0800fd2d
 800e204:	0800fdc3 	.word	0x0800fdc3
 800e208:	0800ff39 	.word	0x0800ff39

0800e20c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b08a      	sub	sp, #40	; 0x28
 800e210:	af00      	add	r7, sp, #0
 800e212:	60f8      	str	r0, [r7, #12]
 800e214:	60b9      	str	r1, [r7, #8]
 800e216:	4613      	mov	r3, r2
 800e218:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e220:	2b20      	cmp	r3, #32
 800e222:	d142      	bne.n	800e2aa <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d002      	beq.n	800e230 <HAL_UART_Receive_DMA+0x24>
 800e22a:	88fb      	ldrh	r3, [r7, #6]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d101      	bne.n	800e234 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e230:	2301      	movs	r3, #1
 800e232:	e03b      	b.n	800e2ac <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d101      	bne.n	800e242 <HAL_UART_Receive_DMA+0x36>
 800e23e:	2302      	movs	r3, #2
 800e240:	e034      	b.n	800e2ac <HAL_UART_Receive_DMA+0xa0>
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2201      	movs	r2, #1
 800e246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	2200      	movs	r2, #0
 800e24e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	4a17      	ldr	r2, [pc, #92]	; (800e2b4 <HAL_UART_Receive_DMA+0xa8>)
 800e256:	4293      	cmp	r3, r2
 800e258:	d01f      	beq.n	800e29a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e264:	2b00      	cmp	r3, #0
 800e266:	d018      	beq.n	800e29a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	e853 3f00 	ldrex	r3, [r3]
 800e274:	613b      	str	r3, [r7, #16]
   return(result);
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e27c:	627b      	str	r3, [r7, #36]	; 0x24
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	461a      	mov	r2, r3
 800e284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e286:	623b      	str	r3, [r7, #32]
 800e288:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e28a:	69f9      	ldr	r1, [r7, #28]
 800e28c:	6a3a      	ldr	r2, [r7, #32]
 800e28e:	e841 2300 	strex	r3, r2, [r1]
 800e292:	61bb      	str	r3, [r7, #24]
   return(result);
 800e294:	69bb      	ldr	r3, [r7, #24]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d1e6      	bne.n	800e268 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e29a:	88fb      	ldrh	r3, [r7, #6]
 800e29c:	461a      	mov	r2, r3
 800e29e:	68b9      	ldr	r1, [r7, #8]
 800e2a0:	68f8      	ldr	r0, [r7, #12]
 800e2a2:	f001 fbf3 	bl	800fa8c <UART_Start_Receive_DMA>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	e000      	b.n	800e2ac <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e2aa:	2302      	movs	r3, #2
  }
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3728      	adds	r7, #40	; 0x28
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	58000c00 	.word	0x58000c00

0800e2b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b0ba      	sub	sp, #232	; 0xe8
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	69db      	ldr	r3, [r3, #28]
 800e2c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	689b      	ldr	r3, [r3, #8]
 800e2da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e2de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e2e2:	f640 030f 	movw	r3, #2063	; 0x80f
 800e2e6:	4013      	ands	r3, r2
 800e2e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e2ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d11b      	bne.n	800e32c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e2f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2f8:	f003 0320 	and.w	r3, r3, #32
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d015      	beq.n	800e32c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e304:	f003 0320 	and.w	r3, r3, #32
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d105      	bne.n	800e318 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e30c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e314:	2b00      	cmp	r3, #0
 800e316:	d009      	beq.n	800e32c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	f000 835a 	beq.w	800e9d6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	4798      	blx	r3
      }
      return;
 800e32a:	e354      	b.n	800e9d6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e32c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e330:	2b00      	cmp	r3, #0
 800e332:	f000 811f 	beq.w	800e574 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e336:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e33a:	4b8b      	ldr	r3, [pc, #556]	; (800e568 <HAL_UART_IRQHandler+0x2b0>)
 800e33c:	4013      	ands	r3, r2
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d106      	bne.n	800e350 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e342:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e346:	4b89      	ldr	r3, [pc, #548]	; (800e56c <HAL_UART_IRQHandler+0x2b4>)
 800e348:	4013      	ands	r3, r2
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	f000 8112 	beq.w	800e574 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e354:	f003 0301 	and.w	r3, r3, #1
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d011      	beq.n	800e380 <HAL_UART_IRQHandler+0xc8>
 800e35c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e364:	2b00      	cmp	r3, #0
 800e366:	d00b      	beq.n	800e380 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	2201      	movs	r2, #1
 800e36e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e376:	f043 0201 	orr.w	r2, r3, #1
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e384:	f003 0302 	and.w	r3, r3, #2
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d011      	beq.n	800e3b0 <HAL_UART_IRQHandler+0xf8>
 800e38c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e390:	f003 0301 	and.w	r3, r3, #1
 800e394:	2b00      	cmp	r3, #0
 800e396:	d00b      	beq.n	800e3b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	2202      	movs	r2, #2
 800e39e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3a6:	f043 0204 	orr.w	r2, r3, #4
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e3b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3b4:	f003 0304 	and.w	r3, r3, #4
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d011      	beq.n	800e3e0 <HAL_UART_IRQHandler+0x128>
 800e3bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e3c0:	f003 0301 	and.w	r3, r3, #1
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d00b      	beq.n	800e3e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2204      	movs	r2, #4
 800e3ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3d6:	f043 0202 	orr.w	r2, r3, #2
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e3e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3e4:	f003 0308 	and.w	r3, r3, #8
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d017      	beq.n	800e41c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e3ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3f0:	f003 0320 	and.w	r3, r3, #32
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d105      	bne.n	800e404 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e3f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e3fc:	4b5a      	ldr	r3, [pc, #360]	; (800e568 <HAL_UART_IRQHandler+0x2b0>)
 800e3fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e400:	2b00      	cmp	r3, #0
 800e402:	d00b      	beq.n	800e41c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	2208      	movs	r2, #8
 800e40a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e412:	f043 0208 	orr.w	r2, r3, #8
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e41c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e424:	2b00      	cmp	r3, #0
 800e426:	d012      	beq.n	800e44e <HAL_UART_IRQHandler+0x196>
 800e428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e42c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e430:	2b00      	cmp	r3, #0
 800e432:	d00c      	beq.n	800e44e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e43c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e444:	f043 0220 	orr.w	r2, r3, #32
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e454:	2b00      	cmp	r3, #0
 800e456:	f000 82c0 	beq.w	800e9da <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e45a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e45e:	f003 0320 	and.w	r3, r3, #32
 800e462:	2b00      	cmp	r3, #0
 800e464:	d013      	beq.n	800e48e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e46a:	f003 0320 	and.w	r3, r3, #32
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d105      	bne.n	800e47e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d007      	beq.n	800e48e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e482:	2b00      	cmp	r3, #0
 800e484:	d003      	beq.n	800e48e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e494:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	689b      	ldr	r3, [r3, #8]
 800e49e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4a2:	2b40      	cmp	r3, #64	; 0x40
 800e4a4:	d005      	beq.n	800e4b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e4a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e4aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d04f      	beq.n	800e552 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f001 fbd4 	bl	800fc60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	689b      	ldr	r3, [r3, #8]
 800e4be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4c2:	2b40      	cmp	r3, #64	; 0x40
 800e4c4:	d141      	bne.n	800e54a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	3308      	adds	r3, #8
 800e4cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e4d4:	e853 3f00 	ldrex	r3, [r3]
 800e4d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e4dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e4e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e4e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	3308      	adds	r3, #8
 800e4ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e4f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e4f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e4fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e502:	e841 2300 	strex	r3, r2, [r1]
 800e506:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e50a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1d9      	bne.n	800e4c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e516:	2b00      	cmp	r3, #0
 800e518:	d013      	beq.n	800e542 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e51e:	4a14      	ldr	r2, [pc, #80]	; (800e570 <HAL_UART_IRQHandler+0x2b8>)
 800e520:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e526:	4618      	mov	r0, r3
 800e528:	f7f9 fdf0 	bl	800810c <HAL_DMA_Abort_IT>
 800e52c:	4603      	mov	r3, r0
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d017      	beq.n	800e562 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e538:	687a      	ldr	r2, [r7, #4]
 800e53a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e53c:	4610      	mov	r0, r2
 800e53e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e540:	e00f      	b.n	800e562 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f000 fa6a 	bl	800ea1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e548:	e00b      	b.n	800e562 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f000 fa66 	bl	800ea1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e550:	e007      	b.n	800e562 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f000 fa62 	bl	800ea1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2200      	movs	r2, #0
 800e55c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e560:	e23b      	b.n	800e9da <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e562:	bf00      	nop
    return;
 800e564:	e239      	b.n	800e9da <HAL_UART_IRQHandler+0x722>
 800e566:	bf00      	nop
 800e568:	10000001 	.word	0x10000001
 800e56c:	04000120 	.word	0x04000120
 800e570:	0800ffb9 	.word	0x0800ffb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e578:	2b01      	cmp	r3, #1
 800e57a:	f040 81ce 	bne.w	800e91a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e57e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e582:	f003 0310 	and.w	r3, r3, #16
 800e586:	2b00      	cmp	r3, #0
 800e588:	f000 81c7 	beq.w	800e91a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e58c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e590:	f003 0310 	and.w	r3, r3, #16
 800e594:	2b00      	cmp	r3, #0
 800e596:	f000 81c0 	beq.w	800e91a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	2210      	movs	r2, #16
 800e5a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	689b      	ldr	r3, [r3, #8]
 800e5a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5ac:	2b40      	cmp	r3, #64	; 0x40
 800e5ae:	f040 813b 	bne.w	800e828 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	4a8b      	ldr	r2, [pc, #556]	; (800e7e8 <HAL_UART_IRQHandler+0x530>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d059      	beq.n	800e672 <HAL_UART_IRQHandler+0x3ba>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	4a89      	ldr	r2, [pc, #548]	; (800e7ec <HAL_UART_IRQHandler+0x534>)
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d053      	beq.n	800e672 <HAL_UART_IRQHandler+0x3ba>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	4a87      	ldr	r2, [pc, #540]	; (800e7f0 <HAL_UART_IRQHandler+0x538>)
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d04d      	beq.n	800e672 <HAL_UART_IRQHandler+0x3ba>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4a85      	ldr	r2, [pc, #532]	; (800e7f4 <HAL_UART_IRQHandler+0x53c>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d047      	beq.n	800e672 <HAL_UART_IRQHandler+0x3ba>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	4a83      	ldr	r2, [pc, #524]	; (800e7f8 <HAL_UART_IRQHandler+0x540>)
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	d041      	beq.n	800e672 <HAL_UART_IRQHandler+0x3ba>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4a81      	ldr	r2, [pc, #516]	; (800e7fc <HAL_UART_IRQHandler+0x544>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d03b      	beq.n	800e672 <HAL_UART_IRQHandler+0x3ba>
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	4a7f      	ldr	r2, [pc, #508]	; (800e800 <HAL_UART_IRQHandler+0x548>)
 800e602:	4293      	cmp	r3, r2
 800e604:	d035      	beq.n	800e672 <HAL_UART_IRQHandler+0x3ba>
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4a7d      	ldr	r2, [pc, #500]	; (800e804 <HAL_UART_IRQHandler+0x54c>)
 800e60e:	4293      	cmp	r3, r2
 800e610:	d02f      	beq.n	800e672 <HAL_UART_IRQHandler+0x3ba>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	4a7b      	ldr	r2, [pc, #492]	; (800e808 <HAL_UART_IRQHandler+0x550>)
 800e61a:	4293      	cmp	r3, r2
 800e61c:	d029      	beq.n	800e672 <HAL_UART_IRQHandler+0x3ba>
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	4a79      	ldr	r2, [pc, #484]	; (800e80c <HAL_UART_IRQHandler+0x554>)
 800e626:	4293      	cmp	r3, r2
 800e628:	d023      	beq.n	800e672 <HAL_UART_IRQHandler+0x3ba>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	4a77      	ldr	r2, [pc, #476]	; (800e810 <HAL_UART_IRQHandler+0x558>)
 800e632:	4293      	cmp	r3, r2
 800e634:	d01d      	beq.n	800e672 <HAL_UART_IRQHandler+0x3ba>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4a75      	ldr	r2, [pc, #468]	; (800e814 <HAL_UART_IRQHandler+0x55c>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	d017      	beq.n	800e672 <HAL_UART_IRQHandler+0x3ba>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	4a73      	ldr	r2, [pc, #460]	; (800e818 <HAL_UART_IRQHandler+0x560>)
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d011      	beq.n	800e672 <HAL_UART_IRQHandler+0x3ba>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	4a71      	ldr	r2, [pc, #452]	; (800e81c <HAL_UART_IRQHandler+0x564>)
 800e656:	4293      	cmp	r3, r2
 800e658:	d00b      	beq.n	800e672 <HAL_UART_IRQHandler+0x3ba>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	4a6f      	ldr	r2, [pc, #444]	; (800e820 <HAL_UART_IRQHandler+0x568>)
 800e662:	4293      	cmp	r3, r2
 800e664:	d005      	beq.n	800e672 <HAL_UART_IRQHandler+0x3ba>
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4a6d      	ldr	r2, [pc, #436]	; (800e824 <HAL_UART_IRQHandler+0x56c>)
 800e66e:	4293      	cmp	r3, r2
 800e670:	d105      	bne.n	800e67e <HAL_UART_IRQHandler+0x3c6>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	b29b      	uxth	r3, r3
 800e67c:	e004      	b.n	800e688 <HAL_UART_IRQHandler+0x3d0>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	685b      	ldr	r3, [r3, #4]
 800e686:	b29b      	uxth	r3, r3
 800e688:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e68c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e690:	2b00      	cmp	r3, #0
 800e692:	f000 81a4 	beq.w	800e9de <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e69c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	f080 819c 	bcs.w	800e9de <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e6ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6b4:	69db      	ldr	r3, [r3, #28]
 800e6b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6ba:	f000 8086 	beq.w	800e7ca <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e6ca:	e853 3f00 	ldrex	r3, [r3]
 800e6ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e6d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e6d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e6da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	461a      	mov	r2, r3
 800e6e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e6e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e6ec:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e6f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e6f8:	e841 2300 	strex	r3, r2, [r1]
 800e6fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e700:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e704:	2b00      	cmp	r3, #0
 800e706:	d1da      	bne.n	800e6be <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	3308      	adds	r3, #8
 800e70e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e710:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e712:	e853 3f00 	ldrex	r3, [r3]
 800e716:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e718:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e71a:	f023 0301 	bic.w	r3, r3, #1
 800e71e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	3308      	adds	r3, #8
 800e728:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e72c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e730:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e732:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e734:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e738:	e841 2300 	strex	r3, r2, [r1]
 800e73c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e73e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e740:	2b00      	cmp	r3, #0
 800e742:	d1e1      	bne.n	800e708 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	3308      	adds	r3, #8
 800e74a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e74c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e74e:	e853 3f00 	ldrex	r3, [r3]
 800e752:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e75a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	3308      	adds	r3, #8
 800e764:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e768:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e76a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e76c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e76e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e770:	e841 2300 	strex	r3, r2, [r1]
 800e774:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d1e3      	bne.n	800e744 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2220      	movs	r2, #32
 800e780:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2200      	movs	r2, #0
 800e788:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e792:	e853 3f00 	ldrex	r3, [r3]
 800e796:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e79a:	f023 0310 	bic.w	r3, r3, #16
 800e79e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	461a      	mov	r2, r3
 800e7a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e7ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800e7ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e7b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e7b4:	e841 2300 	strex	r3, r2, [r1]
 800e7b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e7ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d1e4      	bne.n	800e78a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7f9 f983 	bl	8007ad0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7d6:	b29b      	uxth	r3, r3
 800e7d8:	1ad3      	subs	r3, r2, r3
 800e7da:	b29b      	uxth	r3, r3
 800e7dc:	4619      	mov	r1, r3
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f000 f926 	bl	800ea30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e7e4:	e0fb      	b.n	800e9de <HAL_UART_IRQHandler+0x726>
 800e7e6:	bf00      	nop
 800e7e8:	40020010 	.word	0x40020010
 800e7ec:	40020028 	.word	0x40020028
 800e7f0:	40020040 	.word	0x40020040
 800e7f4:	40020058 	.word	0x40020058
 800e7f8:	40020070 	.word	0x40020070
 800e7fc:	40020088 	.word	0x40020088
 800e800:	400200a0 	.word	0x400200a0
 800e804:	400200b8 	.word	0x400200b8
 800e808:	40020410 	.word	0x40020410
 800e80c:	40020428 	.word	0x40020428
 800e810:	40020440 	.word	0x40020440
 800e814:	40020458 	.word	0x40020458
 800e818:	40020470 	.word	0x40020470
 800e81c:	40020488 	.word	0x40020488
 800e820:	400204a0 	.word	0x400204a0
 800e824:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e834:	b29b      	uxth	r3, r3
 800e836:	1ad3      	subs	r3, r2, r3
 800e838:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e842:	b29b      	uxth	r3, r3
 800e844:	2b00      	cmp	r3, #0
 800e846:	f000 80cc 	beq.w	800e9e2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e84a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e84e:	2b00      	cmp	r3, #0
 800e850:	f000 80c7 	beq.w	800e9e2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85c:	e853 3f00 	ldrex	r3, [r3]
 800e860:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e864:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e868:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	461a      	mov	r2, r3
 800e872:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e876:	647b      	str	r3, [r7, #68]	; 0x44
 800e878:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e87a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e87c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e87e:	e841 2300 	strex	r3, r2, [r1]
 800e882:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e886:	2b00      	cmp	r3, #0
 800e888:	d1e4      	bne.n	800e854 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	3308      	adds	r3, #8
 800e890:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e894:	e853 3f00 	ldrex	r3, [r3]
 800e898:	623b      	str	r3, [r7, #32]
   return(result);
 800e89a:	6a3a      	ldr	r2, [r7, #32]
 800e89c:	4b54      	ldr	r3, [pc, #336]	; (800e9f0 <HAL_UART_IRQHandler+0x738>)
 800e89e:	4013      	ands	r3, r2
 800e8a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	3308      	adds	r3, #8
 800e8aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e8ae:	633a      	str	r2, [r7, #48]	; 0x30
 800e8b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e8b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8b6:	e841 2300 	strex	r3, r2, [r1]
 800e8ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d1e3      	bne.n	800e88a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2220      	movs	r2, #32
 800e8c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8dc:	693b      	ldr	r3, [r7, #16]
 800e8de:	e853 3f00 	ldrex	r3, [r3]
 800e8e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	f023 0310 	bic.w	r3, r3, #16
 800e8ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e8f8:	61fb      	str	r3, [r7, #28]
 800e8fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8fc:	69b9      	ldr	r1, [r7, #24]
 800e8fe:	69fa      	ldr	r2, [r7, #28]
 800e900:	e841 2300 	strex	r3, r2, [r1]
 800e904:	617b      	str	r3, [r7, #20]
   return(result);
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d1e4      	bne.n	800e8d6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e90c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e910:	4619      	mov	r1, r3
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f000 f88c 	bl	800ea30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e918:	e063      	b.n	800e9e2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e91a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e91e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e922:	2b00      	cmp	r3, #0
 800e924:	d00e      	beq.n	800e944 <HAL_UART_IRQHandler+0x68c>
 800e926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e92a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d008      	beq.n	800e944 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e93a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f001 fb7c 	bl	801003a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e942:	e051      	b.n	800e9e8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d014      	beq.n	800e97a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d105      	bne.n	800e968 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e95c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e960:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e964:	2b00      	cmp	r3, #0
 800e966:	d008      	beq.n	800e97a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d03a      	beq.n	800e9e6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	4798      	blx	r3
    }
    return;
 800e978:	e035      	b.n	800e9e6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e97a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e97e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e982:	2b00      	cmp	r3, #0
 800e984:	d009      	beq.n	800e99a <HAL_UART_IRQHandler+0x6e2>
 800e986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e98a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d003      	beq.n	800e99a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f001 fb26 	bl	800ffe4 <UART_EndTransmit_IT>
    return;
 800e998:	e026      	b.n	800e9e8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e99a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e99e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d009      	beq.n	800e9ba <HAL_UART_IRQHandler+0x702>
 800e9a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e9aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d003      	beq.n	800e9ba <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f001 fb55 	bl	8010062 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e9b8:	e016      	b.n	800e9e8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e9ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e9be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d010      	beq.n	800e9e8 <HAL_UART_IRQHandler+0x730>
 800e9c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	da0c      	bge.n	800e9e8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f001 fb3d 	bl	801004e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e9d4:	e008      	b.n	800e9e8 <HAL_UART_IRQHandler+0x730>
      return;
 800e9d6:	bf00      	nop
 800e9d8:	e006      	b.n	800e9e8 <HAL_UART_IRQHandler+0x730>
    return;
 800e9da:	bf00      	nop
 800e9dc:	e004      	b.n	800e9e8 <HAL_UART_IRQHandler+0x730>
      return;
 800e9de:	bf00      	nop
 800e9e0:	e002      	b.n	800e9e8 <HAL_UART_IRQHandler+0x730>
      return;
 800e9e2:	bf00      	nop
 800e9e4:	e000      	b.n	800e9e8 <HAL_UART_IRQHandler+0x730>
    return;
 800e9e6:	bf00      	nop
  }
}
 800e9e8:	37e8      	adds	r7, #232	; 0xe8
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	effffffe 	.word	0xeffffffe

0800e9f4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b083      	sub	sp, #12
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e9fc:	bf00      	nop
 800e9fe:	370c      	adds	r7, #12
 800ea00:	46bd      	mov	sp, r7
 800ea02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea06:	4770      	bx	lr

0800ea08 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b083      	sub	sp, #12
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ea10:	bf00      	nop
 800ea12:	370c      	adds	r7, #12
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr

0800ea1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b083      	sub	sp, #12
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ea24:	bf00      	nop
 800ea26:	370c      	adds	r7, #12
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2e:	4770      	bx	lr

0800ea30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b083      	sub	sp, #12
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	460b      	mov	r3, r1
 800ea3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ea3c:	bf00      	nop
 800ea3e:	370c      	adds	r7, #12
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr

0800ea48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ea48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ea4c:	b092      	sub	sp, #72	; 0x48
 800ea4e:	af00      	add	r7, sp, #0
 800ea50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ea52:	2300      	movs	r3, #0
 800ea54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	689a      	ldr	r2, [r3, #8]
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	691b      	ldr	r3, [r3, #16]
 800ea60:	431a      	orrs	r2, r3
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	695b      	ldr	r3, [r3, #20]
 800ea66:	431a      	orrs	r2, r3
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	69db      	ldr	r3, [r3, #28]
 800ea6c:	4313      	orrs	r3, r2
 800ea6e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	681a      	ldr	r2, [r3, #0]
 800ea76:	4bbe      	ldr	r3, [pc, #760]	; (800ed70 <UART_SetConfig+0x328>)
 800ea78:	4013      	ands	r3, r2
 800ea7a:	697a      	ldr	r2, [r7, #20]
 800ea7c:	6812      	ldr	r2, [r2, #0]
 800ea7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea80:	430b      	orrs	r3, r1
 800ea82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	68da      	ldr	r2, [r3, #12]
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	430a      	orrs	r2, r1
 800ea98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	699b      	ldr	r3, [r3, #24]
 800ea9e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4ab3      	ldr	r2, [pc, #716]	; (800ed74 <UART_SetConfig+0x32c>)
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	d004      	beq.n	800eab4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	6a1b      	ldr	r3, [r3, #32]
 800eaae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eab0:	4313      	orrs	r3, r2
 800eab2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	689a      	ldr	r2, [r3, #8]
 800eaba:	4baf      	ldr	r3, [pc, #700]	; (800ed78 <UART_SetConfig+0x330>)
 800eabc:	4013      	ands	r3, r2
 800eabe:	697a      	ldr	r2, [r7, #20]
 800eac0:	6812      	ldr	r2, [r2, #0]
 800eac2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eac4:	430b      	orrs	r3, r1
 800eac6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eace:	f023 010f 	bic.w	r1, r3, #15
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	430a      	orrs	r2, r1
 800eadc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	4aa6      	ldr	r2, [pc, #664]	; (800ed7c <UART_SetConfig+0x334>)
 800eae4:	4293      	cmp	r3, r2
 800eae6:	d177      	bne.n	800ebd8 <UART_SetConfig+0x190>
 800eae8:	4ba5      	ldr	r3, [pc, #660]	; (800ed80 <UART_SetConfig+0x338>)
 800eaea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eaf0:	2b28      	cmp	r3, #40	; 0x28
 800eaf2:	d86d      	bhi.n	800ebd0 <UART_SetConfig+0x188>
 800eaf4:	a201      	add	r2, pc, #4	; (adr r2, 800eafc <UART_SetConfig+0xb4>)
 800eaf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eafa:	bf00      	nop
 800eafc:	0800eba1 	.word	0x0800eba1
 800eb00:	0800ebd1 	.word	0x0800ebd1
 800eb04:	0800ebd1 	.word	0x0800ebd1
 800eb08:	0800ebd1 	.word	0x0800ebd1
 800eb0c:	0800ebd1 	.word	0x0800ebd1
 800eb10:	0800ebd1 	.word	0x0800ebd1
 800eb14:	0800ebd1 	.word	0x0800ebd1
 800eb18:	0800ebd1 	.word	0x0800ebd1
 800eb1c:	0800eba9 	.word	0x0800eba9
 800eb20:	0800ebd1 	.word	0x0800ebd1
 800eb24:	0800ebd1 	.word	0x0800ebd1
 800eb28:	0800ebd1 	.word	0x0800ebd1
 800eb2c:	0800ebd1 	.word	0x0800ebd1
 800eb30:	0800ebd1 	.word	0x0800ebd1
 800eb34:	0800ebd1 	.word	0x0800ebd1
 800eb38:	0800ebd1 	.word	0x0800ebd1
 800eb3c:	0800ebb1 	.word	0x0800ebb1
 800eb40:	0800ebd1 	.word	0x0800ebd1
 800eb44:	0800ebd1 	.word	0x0800ebd1
 800eb48:	0800ebd1 	.word	0x0800ebd1
 800eb4c:	0800ebd1 	.word	0x0800ebd1
 800eb50:	0800ebd1 	.word	0x0800ebd1
 800eb54:	0800ebd1 	.word	0x0800ebd1
 800eb58:	0800ebd1 	.word	0x0800ebd1
 800eb5c:	0800ebb9 	.word	0x0800ebb9
 800eb60:	0800ebd1 	.word	0x0800ebd1
 800eb64:	0800ebd1 	.word	0x0800ebd1
 800eb68:	0800ebd1 	.word	0x0800ebd1
 800eb6c:	0800ebd1 	.word	0x0800ebd1
 800eb70:	0800ebd1 	.word	0x0800ebd1
 800eb74:	0800ebd1 	.word	0x0800ebd1
 800eb78:	0800ebd1 	.word	0x0800ebd1
 800eb7c:	0800ebc1 	.word	0x0800ebc1
 800eb80:	0800ebd1 	.word	0x0800ebd1
 800eb84:	0800ebd1 	.word	0x0800ebd1
 800eb88:	0800ebd1 	.word	0x0800ebd1
 800eb8c:	0800ebd1 	.word	0x0800ebd1
 800eb90:	0800ebd1 	.word	0x0800ebd1
 800eb94:	0800ebd1 	.word	0x0800ebd1
 800eb98:	0800ebd1 	.word	0x0800ebd1
 800eb9c:	0800ebc9 	.word	0x0800ebc9
 800eba0:	2301      	movs	r3, #1
 800eba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eba6:	e326      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800eba8:	2304      	movs	r3, #4
 800ebaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebae:	e322      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ebb0:	2308      	movs	r3, #8
 800ebb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebb6:	e31e      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ebb8:	2310      	movs	r3, #16
 800ebba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebbe:	e31a      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ebc0:	2320      	movs	r3, #32
 800ebc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebc6:	e316      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ebc8:	2340      	movs	r3, #64	; 0x40
 800ebca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebce:	e312      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ebd0:	2380      	movs	r3, #128	; 0x80
 800ebd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebd6:	e30e      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ebd8:	697b      	ldr	r3, [r7, #20]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	4a69      	ldr	r2, [pc, #420]	; (800ed84 <UART_SetConfig+0x33c>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d130      	bne.n	800ec44 <UART_SetConfig+0x1fc>
 800ebe2:	4b67      	ldr	r3, [pc, #412]	; (800ed80 <UART_SetConfig+0x338>)
 800ebe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebe6:	f003 0307 	and.w	r3, r3, #7
 800ebea:	2b05      	cmp	r3, #5
 800ebec:	d826      	bhi.n	800ec3c <UART_SetConfig+0x1f4>
 800ebee:	a201      	add	r2, pc, #4	; (adr r2, 800ebf4 <UART_SetConfig+0x1ac>)
 800ebf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebf4:	0800ec0d 	.word	0x0800ec0d
 800ebf8:	0800ec15 	.word	0x0800ec15
 800ebfc:	0800ec1d 	.word	0x0800ec1d
 800ec00:	0800ec25 	.word	0x0800ec25
 800ec04:	0800ec2d 	.word	0x0800ec2d
 800ec08:	0800ec35 	.word	0x0800ec35
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec12:	e2f0      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ec14:	2304      	movs	r3, #4
 800ec16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec1a:	e2ec      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ec1c:	2308      	movs	r3, #8
 800ec1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec22:	e2e8      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ec24:	2310      	movs	r3, #16
 800ec26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec2a:	e2e4      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ec2c:	2320      	movs	r3, #32
 800ec2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec32:	e2e0      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ec34:	2340      	movs	r3, #64	; 0x40
 800ec36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec3a:	e2dc      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ec3c:	2380      	movs	r3, #128	; 0x80
 800ec3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec42:	e2d8      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4a4f      	ldr	r2, [pc, #316]	; (800ed88 <UART_SetConfig+0x340>)
 800ec4a:	4293      	cmp	r3, r2
 800ec4c:	d130      	bne.n	800ecb0 <UART_SetConfig+0x268>
 800ec4e:	4b4c      	ldr	r3, [pc, #304]	; (800ed80 <UART_SetConfig+0x338>)
 800ec50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec52:	f003 0307 	and.w	r3, r3, #7
 800ec56:	2b05      	cmp	r3, #5
 800ec58:	d826      	bhi.n	800eca8 <UART_SetConfig+0x260>
 800ec5a:	a201      	add	r2, pc, #4	; (adr r2, 800ec60 <UART_SetConfig+0x218>)
 800ec5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec60:	0800ec79 	.word	0x0800ec79
 800ec64:	0800ec81 	.word	0x0800ec81
 800ec68:	0800ec89 	.word	0x0800ec89
 800ec6c:	0800ec91 	.word	0x0800ec91
 800ec70:	0800ec99 	.word	0x0800ec99
 800ec74:	0800eca1 	.word	0x0800eca1
 800ec78:	2300      	movs	r3, #0
 800ec7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec7e:	e2ba      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ec80:	2304      	movs	r3, #4
 800ec82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec86:	e2b6      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ec88:	2308      	movs	r3, #8
 800ec8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec8e:	e2b2      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ec90:	2310      	movs	r3, #16
 800ec92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec96:	e2ae      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ec98:	2320      	movs	r3, #32
 800ec9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec9e:	e2aa      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800eca0:	2340      	movs	r3, #64	; 0x40
 800eca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eca6:	e2a6      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800eca8:	2380      	movs	r3, #128	; 0x80
 800ecaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecae:	e2a2      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4a35      	ldr	r2, [pc, #212]	; (800ed8c <UART_SetConfig+0x344>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d130      	bne.n	800ed1c <UART_SetConfig+0x2d4>
 800ecba:	4b31      	ldr	r3, [pc, #196]	; (800ed80 <UART_SetConfig+0x338>)
 800ecbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecbe:	f003 0307 	and.w	r3, r3, #7
 800ecc2:	2b05      	cmp	r3, #5
 800ecc4:	d826      	bhi.n	800ed14 <UART_SetConfig+0x2cc>
 800ecc6:	a201      	add	r2, pc, #4	; (adr r2, 800eccc <UART_SetConfig+0x284>)
 800ecc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eccc:	0800ece5 	.word	0x0800ece5
 800ecd0:	0800eced 	.word	0x0800eced
 800ecd4:	0800ecf5 	.word	0x0800ecf5
 800ecd8:	0800ecfd 	.word	0x0800ecfd
 800ecdc:	0800ed05 	.word	0x0800ed05
 800ece0:	0800ed0d 	.word	0x0800ed0d
 800ece4:	2300      	movs	r3, #0
 800ece6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecea:	e284      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ecec:	2304      	movs	r3, #4
 800ecee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecf2:	e280      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ecf4:	2308      	movs	r3, #8
 800ecf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecfa:	e27c      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ecfc:	2310      	movs	r3, #16
 800ecfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed02:	e278      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ed04:	2320      	movs	r3, #32
 800ed06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed0a:	e274      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ed0c:	2340      	movs	r3, #64	; 0x40
 800ed0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed12:	e270      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ed14:	2380      	movs	r3, #128	; 0x80
 800ed16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed1a:	e26c      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	4a1b      	ldr	r2, [pc, #108]	; (800ed90 <UART_SetConfig+0x348>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d142      	bne.n	800edac <UART_SetConfig+0x364>
 800ed26:	4b16      	ldr	r3, [pc, #88]	; (800ed80 <UART_SetConfig+0x338>)
 800ed28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed2a:	f003 0307 	and.w	r3, r3, #7
 800ed2e:	2b05      	cmp	r3, #5
 800ed30:	d838      	bhi.n	800eda4 <UART_SetConfig+0x35c>
 800ed32:	a201      	add	r2, pc, #4	; (adr r2, 800ed38 <UART_SetConfig+0x2f0>)
 800ed34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed38:	0800ed51 	.word	0x0800ed51
 800ed3c:	0800ed59 	.word	0x0800ed59
 800ed40:	0800ed61 	.word	0x0800ed61
 800ed44:	0800ed69 	.word	0x0800ed69
 800ed48:	0800ed95 	.word	0x0800ed95
 800ed4c:	0800ed9d 	.word	0x0800ed9d
 800ed50:	2300      	movs	r3, #0
 800ed52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed56:	e24e      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ed58:	2304      	movs	r3, #4
 800ed5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed5e:	e24a      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ed60:	2308      	movs	r3, #8
 800ed62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed66:	e246      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ed68:	2310      	movs	r3, #16
 800ed6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed6e:	e242      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ed70:	cfff69f3 	.word	0xcfff69f3
 800ed74:	58000c00 	.word	0x58000c00
 800ed78:	11fff4ff 	.word	0x11fff4ff
 800ed7c:	40011000 	.word	0x40011000
 800ed80:	58024400 	.word	0x58024400
 800ed84:	40004400 	.word	0x40004400
 800ed88:	40004800 	.word	0x40004800
 800ed8c:	40004c00 	.word	0x40004c00
 800ed90:	40005000 	.word	0x40005000
 800ed94:	2320      	movs	r3, #32
 800ed96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed9a:	e22c      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ed9c:	2340      	movs	r3, #64	; 0x40
 800ed9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eda2:	e228      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800eda4:	2380      	movs	r3, #128	; 0x80
 800eda6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edaa:	e224      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4ab1      	ldr	r2, [pc, #708]	; (800f078 <UART_SetConfig+0x630>)
 800edb2:	4293      	cmp	r3, r2
 800edb4:	d176      	bne.n	800eea4 <UART_SetConfig+0x45c>
 800edb6:	4bb1      	ldr	r3, [pc, #708]	; (800f07c <UART_SetConfig+0x634>)
 800edb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800edbe:	2b28      	cmp	r3, #40	; 0x28
 800edc0:	d86c      	bhi.n	800ee9c <UART_SetConfig+0x454>
 800edc2:	a201      	add	r2, pc, #4	; (adr r2, 800edc8 <UART_SetConfig+0x380>)
 800edc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edc8:	0800ee6d 	.word	0x0800ee6d
 800edcc:	0800ee9d 	.word	0x0800ee9d
 800edd0:	0800ee9d 	.word	0x0800ee9d
 800edd4:	0800ee9d 	.word	0x0800ee9d
 800edd8:	0800ee9d 	.word	0x0800ee9d
 800eddc:	0800ee9d 	.word	0x0800ee9d
 800ede0:	0800ee9d 	.word	0x0800ee9d
 800ede4:	0800ee9d 	.word	0x0800ee9d
 800ede8:	0800ee75 	.word	0x0800ee75
 800edec:	0800ee9d 	.word	0x0800ee9d
 800edf0:	0800ee9d 	.word	0x0800ee9d
 800edf4:	0800ee9d 	.word	0x0800ee9d
 800edf8:	0800ee9d 	.word	0x0800ee9d
 800edfc:	0800ee9d 	.word	0x0800ee9d
 800ee00:	0800ee9d 	.word	0x0800ee9d
 800ee04:	0800ee9d 	.word	0x0800ee9d
 800ee08:	0800ee7d 	.word	0x0800ee7d
 800ee0c:	0800ee9d 	.word	0x0800ee9d
 800ee10:	0800ee9d 	.word	0x0800ee9d
 800ee14:	0800ee9d 	.word	0x0800ee9d
 800ee18:	0800ee9d 	.word	0x0800ee9d
 800ee1c:	0800ee9d 	.word	0x0800ee9d
 800ee20:	0800ee9d 	.word	0x0800ee9d
 800ee24:	0800ee9d 	.word	0x0800ee9d
 800ee28:	0800ee85 	.word	0x0800ee85
 800ee2c:	0800ee9d 	.word	0x0800ee9d
 800ee30:	0800ee9d 	.word	0x0800ee9d
 800ee34:	0800ee9d 	.word	0x0800ee9d
 800ee38:	0800ee9d 	.word	0x0800ee9d
 800ee3c:	0800ee9d 	.word	0x0800ee9d
 800ee40:	0800ee9d 	.word	0x0800ee9d
 800ee44:	0800ee9d 	.word	0x0800ee9d
 800ee48:	0800ee8d 	.word	0x0800ee8d
 800ee4c:	0800ee9d 	.word	0x0800ee9d
 800ee50:	0800ee9d 	.word	0x0800ee9d
 800ee54:	0800ee9d 	.word	0x0800ee9d
 800ee58:	0800ee9d 	.word	0x0800ee9d
 800ee5c:	0800ee9d 	.word	0x0800ee9d
 800ee60:	0800ee9d 	.word	0x0800ee9d
 800ee64:	0800ee9d 	.word	0x0800ee9d
 800ee68:	0800ee95 	.word	0x0800ee95
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee72:	e1c0      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ee74:	2304      	movs	r3, #4
 800ee76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee7a:	e1bc      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ee7c:	2308      	movs	r3, #8
 800ee7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee82:	e1b8      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ee84:	2310      	movs	r3, #16
 800ee86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee8a:	e1b4      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ee8c:	2320      	movs	r3, #32
 800ee8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee92:	e1b0      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ee94:	2340      	movs	r3, #64	; 0x40
 800ee96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee9a:	e1ac      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ee9c:	2380      	movs	r3, #128	; 0x80
 800ee9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eea2:	e1a8      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	4a75      	ldr	r2, [pc, #468]	; (800f080 <UART_SetConfig+0x638>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d130      	bne.n	800ef10 <UART_SetConfig+0x4c8>
 800eeae:	4b73      	ldr	r3, [pc, #460]	; (800f07c <UART_SetConfig+0x634>)
 800eeb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eeb2:	f003 0307 	and.w	r3, r3, #7
 800eeb6:	2b05      	cmp	r3, #5
 800eeb8:	d826      	bhi.n	800ef08 <UART_SetConfig+0x4c0>
 800eeba:	a201      	add	r2, pc, #4	; (adr r2, 800eec0 <UART_SetConfig+0x478>)
 800eebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eec0:	0800eed9 	.word	0x0800eed9
 800eec4:	0800eee1 	.word	0x0800eee1
 800eec8:	0800eee9 	.word	0x0800eee9
 800eecc:	0800eef1 	.word	0x0800eef1
 800eed0:	0800eef9 	.word	0x0800eef9
 800eed4:	0800ef01 	.word	0x0800ef01
 800eed8:	2300      	movs	r3, #0
 800eeda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eede:	e18a      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800eee0:	2304      	movs	r3, #4
 800eee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eee6:	e186      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800eee8:	2308      	movs	r3, #8
 800eeea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeee:	e182      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800eef0:	2310      	movs	r3, #16
 800eef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eef6:	e17e      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800eef8:	2320      	movs	r3, #32
 800eefa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eefe:	e17a      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ef00:	2340      	movs	r3, #64	; 0x40
 800ef02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef06:	e176      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ef08:	2380      	movs	r3, #128	; 0x80
 800ef0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef0e:	e172      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	4a5b      	ldr	r2, [pc, #364]	; (800f084 <UART_SetConfig+0x63c>)
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d130      	bne.n	800ef7c <UART_SetConfig+0x534>
 800ef1a:	4b58      	ldr	r3, [pc, #352]	; (800f07c <UART_SetConfig+0x634>)
 800ef1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef1e:	f003 0307 	and.w	r3, r3, #7
 800ef22:	2b05      	cmp	r3, #5
 800ef24:	d826      	bhi.n	800ef74 <UART_SetConfig+0x52c>
 800ef26:	a201      	add	r2, pc, #4	; (adr r2, 800ef2c <UART_SetConfig+0x4e4>)
 800ef28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef2c:	0800ef45 	.word	0x0800ef45
 800ef30:	0800ef4d 	.word	0x0800ef4d
 800ef34:	0800ef55 	.word	0x0800ef55
 800ef38:	0800ef5d 	.word	0x0800ef5d
 800ef3c:	0800ef65 	.word	0x0800ef65
 800ef40:	0800ef6d 	.word	0x0800ef6d
 800ef44:	2300      	movs	r3, #0
 800ef46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef4a:	e154      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ef4c:	2304      	movs	r3, #4
 800ef4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef52:	e150      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ef54:	2308      	movs	r3, #8
 800ef56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef5a:	e14c      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ef5c:	2310      	movs	r3, #16
 800ef5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef62:	e148      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ef64:	2320      	movs	r3, #32
 800ef66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef6a:	e144      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ef6c:	2340      	movs	r3, #64	; 0x40
 800ef6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef72:	e140      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ef74:	2380      	movs	r3, #128	; 0x80
 800ef76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef7a:	e13c      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	4a41      	ldr	r2, [pc, #260]	; (800f088 <UART_SetConfig+0x640>)
 800ef82:	4293      	cmp	r3, r2
 800ef84:	f040 8082 	bne.w	800f08c <UART_SetConfig+0x644>
 800ef88:	4b3c      	ldr	r3, [pc, #240]	; (800f07c <UART_SetConfig+0x634>)
 800ef8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ef90:	2b28      	cmp	r3, #40	; 0x28
 800ef92:	d86d      	bhi.n	800f070 <UART_SetConfig+0x628>
 800ef94:	a201      	add	r2, pc, #4	; (adr r2, 800ef9c <UART_SetConfig+0x554>)
 800ef96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef9a:	bf00      	nop
 800ef9c:	0800f041 	.word	0x0800f041
 800efa0:	0800f071 	.word	0x0800f071
 800efa4:	0800f071 	.word	0x0800f071
 800efa8:	0800f071 	.word	0x0800f071
 800efac:	0800f071 	.word	0x0800f071
 800efb0:	0800f071 	.word	0x0800f071
 800efb4:	0800f071 	.word	0x0800f071
 800efb8:	0800f071 	.word	0x0800f071
 800efbc:	0800f049 	.word	0x0800f049
 800efc0:	0800f071 	.word	0x0800f071
 800efc4:	0800f071 	.word	0x0800f071
 800efc8:	0800f071 	.word	0x0800f071
 800efcc:	0800f071 	.word	0x0800f071
 800efd0:	0800f071 	.word	0x0800f071
 800efd4:	0800f071 	.word	0x0800f071
 800efd8:	0800f071 	.word	0x0800f071
 800efdc:	0800f051 	.word	0x0800f051
 800efe0:	0800f071 	.word	0x0800f071
 800efe4:	0800f071 	.word	0x0800f071
 800efe8:	0800f071 	.word	0x0800f071
 800efec:	0800f071 	.word	0x0800f071
 800eff0:	0800f071 	.word	0x0800f071
 800eff4:	0800f071 	.word	0x0800f071
 800eff8:	0800f071 	.word	0x0800f071
 800effc:	0800f059 	.word	0x0800f059
 800f000:	0800f071 	.word	0x0800f071
 800f004:	0800f071 	.word	0x0800f071
 800f008:	0800f071 	.word	0x0800f071
 800f00c:	0800f071 	.word	0x0800f071
 800f010:	0800f071 	.word	0x0800f071
 800f014:	0800f071 	.word	0x0800f071
 800f018:	0800f071 	.word	0x0800f071
 800f01c:	0800f061 	.word	0x0800f061
 800f020:	0800f071 	.word	0x0800f071
 800f024:	0800f071 	.word	0x0800f071
 800f028:	0800f071 	.word	0x0800f071
 800f02c:	0800f071 	.word	0x0800f071
 800f030:	0800f071 	.word	0x0800f071
 800f034:	0800f071 	.word	0x0800f071
 800f038:	0800f071 	.word	0x0800f071
 800f03c:	0800f069 	.word	0x0800f069
 800f040:	2301      	movs	r3, #1
 800f042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f046:	e0d6      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800f048:	2304      	movs	r3, #4
 800f04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f04e:	e0d2      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800f050:	2308      	movs	r3, #8
 800f052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f056:	e0ce      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800f058:	2310      	movs	r3, #16
 800f05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f05e:	e0ca      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800f060:	2320      	movs	r3, #32
 800f062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f066:	e0c6      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800f068:	2340      	movs	r3, #64	; 0x40
 800f06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f06e:	e0c2      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800f070:	2380      	movs	r3, #128	; 0x80
 800f072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f076:	e0be      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800f078:	40011400 	.word	0x40011400
 800f07c:	58024400 	.word	0x58024400
 800f080:	40007800 	.word	0x40007800
 800f084:	40007c00 	.word	0x40007c00
 800f088:	40011800 	.word	0x40011800
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	4aad      	ldr	r2, [pc, #692]	; (800f348 <UART_SetConfig+0x900>)
 800f092:	4293      	cmp	r3, r2
 800f094:	d176      	bne.n	800f184 <UART_SetConfig+0x73c>
 800f096:	4bad      	ldr	r3, [pc, #692]	; (800f34c <UART_SetConfig+0x904>)
 800f098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f09a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f09e:	2b28      	cmp	r3, #40	; 0x28
 800f0a0:	d86c      	bhi.n	800f17c <UART_SetConfig+0x734>
 800f0a2:	a201      	add	r2, pc, #4	; (adr r2, 800f0a8 <UART_SetConfig+0x660>)
 800f0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a8:	0800f14d 	.word	0x0800f14d
 800f0ac:	0800f17d 	.word	0x0800f17d
 800f0b0:	0800f17d 	.word	0x0800f17d
 800f0b4:	0800f17d 	.word	0x0800f17d
 800f0b8:	0800f17d 	.word	0x0800f17d
 800f0bc:	0800f17d 	.word	0x0800f17d
 800f0c0:	0800f17d 	.word	0x0800f17d
 800f0c4:	0800f17d 	.word	0x0800f17d
 800f0c8:	0800f155 	.word	0x0800f155
 800f0cc:	0800f17d 	.word	0x0800f17d
 800f0d0:	0800f17d 	.word	0x0800f17d
 800f0d4:	0800f17d 	.word	0x0800f17d
 800f0d8:	0800f17d 	.word	0x0800f17d
 800f0dc:	0800f17d 	.word	0x0800f17d
 800f0e0:	0800f17d 	.word	0x0800f17d
 800f0e4:	0800f17d 	.word	0x0800f17d
 800f0e8:	0800f15d 	.word	0x0800f15d
 800f0ec:	0800f17d 	.word	0x0800f17d
 800f0f0:	0800f17d 	.word	0x0800f17d
 800f0f4:	0800f17d 	.word	0x0800f17d
 800f0f8:	0800f17d 	.word	0x0800f17d
 800f0fc:	0800f17d 	.word	0x0800f17d
 800f100:	0800f17d 	.word	0x0800f17d
 800f104:	0800f17d 	.word	0x0800f17d
 800f108:	0800f165 	.word	0x0800f165
 800f10c:	0800f17d 	.word	0x0800f17d
 800f110:	0800f17d 	.word	0x0800f17d
 800f114:	0800f17d 	.word	0x0800f17d
 800f118:	0800f17d 	.word	0x0800f17d
 800f11c:	0800f17d 	.word	0x0800f17d
 800f120:	0800f17d 	.word	0x0800f17d
 800f124:	0800f17d 	.word	0x0800f17d
 800f128:	0800f16d 	.word	0x0800f16d
 800f12c:	0800f17d 	.word	0x0800f17d
 800f130:	0800f17d 	.word	0x0800f17d
 800f134:	0800f17d 	.word	0x0800f17d
 800f138:	0800f17d 	.word	0x0800f17d
 800f13c:	0800f17d 	.word	0x0800f17d
 800f140:	0800f17d 	.word	0x0800f17d
 800f144:	0800f17d 	.word	0x0800f17d
 800f148:	0800f175 	.word	0x0800f175
 800f14c:	2301      	movs	r3, #1
 800f14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f152:	e050      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800f154:	2304      	movs	r3, #4
 800f156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f15a:	e04c      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800f15c:	2308      	movs	r3, #8
 800f15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f162:	e048      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800f164:	2310      	movs	r3, #16
 800f166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f16a:	e044      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800f16c:	2320      	movs	r3, #32
 800f16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f172:	e040      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800f174:	2340      	movs	r3, #64	; 0x40
 800f176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f17a:	e03c      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800f17c:	2380      	movs	r3, #128	; 0x80
 800f17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f182:	e038      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800f184:	697b      	ldr	r3, [r7, #20]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4a71      	ldr	r2, [pc, #452]	; (800f350 <UART_SetConfig+0x908>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d130      	bne.n	800f1f0 <UART_SetConfig+0x7a8>
 800f18e:	4b6f      	ldr	r3, [pc, #444]	; (800f34c <UART_SetConfig+0x904>)
 800f190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f192:	f003 0307 	and.w	r3, r3, #7
 800f196:	2b05      	cmp	r3, #5
 800f198:	d826      	bhi.n	800f1e8 <UART_SetConfig+0x7a0>
 800f19a:	a201      	add	r2, pc, #4	; (adr r2, 800f1a0 <UART_SetConfig+0x758>)
 800f19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a0:	0800f1b9 	.word	0x0800f1b9
 800f1a4:	0800f1c1 	.word	0x0800f1c1
 800f1a8:	0800f1c9 	.word	0x0800f1c9
 800f1ac:	0800f1d1 	.word	0x0800f1d1
 800f1b0:	0800f1d9 	.word	0x0800f1d9
 800f1b4:	0800f1e1 	.word	0x0800f1e1
 800f1b8:	2302      	movs	r3, #2
 800f1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1be:	e01a      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800f1c0:	2304      	movs	r3, #4
 800f1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1c6:	e016      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800f1c8:	2308      	movs	r3, #8
 800f1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ce:	e012      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800f1d0:	2310      	movs	r3, #16
 800f1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1d6:	e00e      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800f1d8:	2320      	movs	r3, #32
 800f1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1de:	e00a      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800f1e0:	2340      	movs	r3, #64	; 0x40
 800f1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1e6:	e006      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800f1e8:	2380      	movs	r3, #128	; 0x80
 800f1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ee:	e002      	b.n	800f1f6 <UART_SetConfig+0x7ae>
 800f1f0:	2380      	movs	r3, #128	; 0x80
 800f1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	4a55      	ldr	r2, [pc, #340]	; (800f350 <UART_SetConfig+0x908>)
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	f040 80f8 	bne.w	800f3f2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f202:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f206:	2b20      	cmp	r3, #32
 800f208:	dc46      	bgt.n	800f298 <UART_SetConfig+0x850>
 800f20a:	2b02      	cmp	r3, #2
 800f20c:	db75      	blt.n	800f2fa <UART_SetConfig+0x8b2>
 800f20e:	3b02      	subs	r3, #2
 800f210:	2b1e      	cmp	r3, #30
 800f212:	d872      	bhi.n	800f2fa <UART_SetConfig+0x8b2>
 800f214:	a201      	add	r2, pc, #4	; (adr r2, 800f21c <UART_SetConfig+0x7d4>)
 800f216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f21a:	bf00      	nop
 800f21c:	0800f29f 	.word	0x0800f29f
 800f220:	0800f2fb 	.word	0x0800f2fb
 800f224:	0800f2a7 	.word	0x0800f2a7
 800f228:	0800f2fb 	.word	0x0800f2fb
 800f22c:	0800f2fb 	.word	0x0800f2fb
 800f230:	0800f2fb 	.word	0x0800f2fb
 800f234:	0800f2b7 	.word	0x0800f2b7
 800f238:	0800f2fb 	.word	0x0800f2fb
 800f23c:	0800f2fb 	.word	0x0800f2fb
 800f240:	0800f2fb 	.word	0x0800f2fb
 800f244:	0800f2fb 	.word	0x0800f2fb
 800f248:	0800f2fb 	.word	0x0800f2fb
 800f24c:	0800f2fb 	.word	0x0800f2fb
 800f250:	0800f2fb 	.word	0x0800f2fb
 800f254:	0800f2c7 	.word	0x0800f2c7
 800f258:	0800f2fb 	.word	0x0800f2fb
 800f25c:	0800f2fb 	.word	0x0800f2fb
 800f260:	0800f2fb 	.word	0x0800f2fb
 800f264:	0800f2fb 	.word	0x0800f2fb
 800f268:	0800f2fb 	.word	0x0800f2fb
 800f26c:	0800f2fb 	.word	0x0800f2fb
 800f270:	0800f2fb 	.word	0x0800f2fb
 800f274:	0800f2fb 	.word	0x0800f2fb
 800f278:	0800f2fb 	.word	0x0800f2fb
 800f27c:	0800f2fb 	.word	0x0800f2fb
 800f280:	0800f2fb 	.word	0x0800f2fb
 800f284:	0800f2fb 	.word	0x0800f2fb
 800f288:	0800f2fb 	.word	0x0800f2fb
 800f28c:	0800f2fb 	.word	0x0800f2fb
 800f290:	0800f2fb 	.word	0x0800f2fb
 800f294:	0800f2ed 	.word	0x0800f2ed
 800f298:	2b40      	cmp	r3, #64	; 0x40
 800f29a:	d02a      	beq.n	800f2f2 <UART_SetConfig+0x8aa>
 800f29c:	e02d      	b.n	800f2fa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f29e:	f7fc fcd5 	bl	800bc4c <HAL_RCCEx_GetD3PCLK1Freq>
 800f2a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f2a4:	e02f      	b.n	800f306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f2a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7fc fce4 	bl	800bc78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2b4:	e027      	b.n	800f306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f2b6:	f107 0318 	add.w	r3, r7, #24
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7fc fe30 	bl	800bf20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f2c0:	69fb      	ldr	r3, [r7, #28]
 800f2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2c4:	e01f      	b.n	800f306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f2c6:	4b21      	ldr	r3, [pc, #132]	; (800f34c <UART_SetConfig+0x904>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	f003 0320 	and.w	r3, r3, #32
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d009      	beq.n	800f2e6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f2d2:	4b1e      	ldr	r3, [pc, #120]	; (800f34c <UART_SetConfig+0x904>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	08db      	lsrs	r3, r3, #3
 800f2d8:	f003 0303 	and.w	r3, r3, #3
 800f2dc:	4a1d      	ldr	r2, [pc, #116]	; (800f354 <UART_SetConfig+0x90c>)
 800f2de:	fa22 f303 	lsr.w	r3, r2, r3
 800f2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f2e4:	e00f      	b.n	800f306 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f2e6:	4b1b      	ldr	r3, [pc, #108]	; (800f354 <UART_SetConfig+0x90c>)
 800f2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2ea:	e00c      	b.n	800f306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f2ec:	4b1a      	ldr	r3, [pc, #104]	; (800f358 <UART_SetConfig+0x910>)
 800f2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2f0:	e009      	b.n	800f306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2f8:	e005      	b.n	800f306 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f2fe:	2301      	movs	r3, #1
 800f300:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f304:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f308:	2b00      	cmp	r3, #0
 800f30a:	f000 81ee 	beq.w	800f6ea <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f312:	4a12      	ldr	r2, [pc, #72]	; (800f35c <UART_SetConfig+0x914>)
 800f314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f318:	461a      	mov	r2, r3
 800f31a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f31c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f320:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	685a      	ldr	r2, [r3, #4]
 800f326:	4613      	mov	r3, r2
 800f328:	005b      	lsls	r3, r3, #1
 800f32a:	4413      	add	r3, r2
 800f32c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f32e:	429a      	cmp	r2, r3
 800f330:	d305      	bcc.n	800f33e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d910      	bls.n	800f360 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f33e:	2301      	movs	r3, #1
 800f340:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f344:	e1d1      	b.n	800f6ea <UART_SetConfig+0xca2>
 800f346:	bf00      	nop
 800f348:	40011c00 	.word	0x40011c00
 800f34c:	58024400 	.word	0x58024400
 800f350:	58000c00 	.word	0x58000c00
 800f354:	03d09000 	.word	0x03d09000
 800f358:	003d0900 	.word	0x003d0900
 800f35c:	08011488 	.word	0x08011488
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f362:	2200      	movs	r2, #0
 800f364:	60bb      	str	r3, [r7, #8]
 800f366:	60fa      	str	r2, [r7, #12]
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f36c:	4ac0      	ldr	r2, [pc, #768]	; (800f670 <UART_SetConfig+0xc28>)
 800f36e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f372:	b29b      	uxth	r3, r3
 800f374:	2200      	movs	r2, #0
 800f376:	603b      	str	r3, [r7, #0]
 800f378:	607a      	str	r2, [r7, #4]
 800f37a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f37e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f382:	f7f1 f989 	bl	8000698 <__aeabi_uldivmod>
 800f386:	4602      	mov	r2, r0
 800f388:	460b      	mov	r3, r1
 800f38a:	4610      	mov	r0, r2
 800f38c:	4619      	mov	r1, r3
 800f38e:	f04f 0200 	mov.w	r2, #0
 800f392:	f04f 0300 	mov.w	r3, #0
 800f396:	020b      	lsls	r3, r1, #8
 800f398:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f39c:	0202      	lsls	r2, r0, #8
 800f39e:	6979      	ldr	r1, [r7, #20]
 800f3a0:	6849      	ldr	r1, [r1, #4]
 800f3a2:	0849      	lsrs	r1, r1, #1
 800f3a4:	2000      	movs	r0, #0
 800f3a6:	460c      	mov	r4, r1
 800f3a8:	4605      	mov	r5, r0
 800f3aa:	eb12 0804 	adds.w	r8, r2, r4
 800f3ae:	eb43 0905 	adc.w	r9, r3, r5
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	685b      	ldr	r3, [r3, #4]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	469a      	mov	sl, r3
 800f3ba:	4693      	mov	fp, r2
 800f3bc:	4652      	mov	r2, sl
 800f3be:	465b      	mov	r3, fp
 800f3c0:	4640      	mov	r0, r8
 800f3c2:	4649      	mov	r1, r9
 800f3c4:	f7f1 f968 	bl	8000698 <__aeabi_uldivmod>
 800f3c8:	4602      	mov	r2, r0
 800f3ca:	460b      	mov	r3, r1
 800f3cc:	4613      	mov	r3, r2
 800f3ce:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f3d6:	d308      	bcc.n	800f3ea <UART_SetConfig+0x9a2>
 800f3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f3de:	d204      	bcs.n	800f3ea <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f3e6:	60da      	str	r2, [r3, #12]
 800f3e8:	e17f      	b.n	800f6ea <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f3f0:	e17b      	b.n	800f6ea <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	69db      	ldr	r3, [r3, #28]
 800f3f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3fa:	f040 80bd 	bne.w	800f578 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f3fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f402:	2b20      	cmp	r3, #32
 800f404:	dc48      	bgt.n	800f498 <UART_SetConfig+0xa50>
 800f406:	2b00      	cmp	r3, #0
 800f408:	db7b      	blt.n	800f502 <UART_SetConfig+0xaba>
 800f40a:	2b20      	cmp	r3, #32
 800f40c:	d879      	bhi.n	800f502 <UART_SetConfig+0xaba>
 800f40e:	a201      	add	r2, pc, #4	; (adr r2, 800f414 <UART_SetConfig+0x9cc>)
 800f410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f414:	0800f49f 	.word	0x0800f49f
 800f418:	0800f4a7 	.word	0x0800f4a7
 800f41c:	0800f503 	.word	0x0800f503
 800f420:	0800f503 	.word	0x0800f503
 800f424:	0800f4af 	.word	0x0800f4af
 800f428:	0800f503 	.word	0x0800f503
 800f42c:	0800f503 	.word	0x0800f503
 800f430:	0800f503 	.word	0x0800f503
 800f434:	0800f4bf 	.word	0x0800f4bf
 800f438:	0800f503 	.word	0x0800f503
 800f43c:	0800f503 	.word	0x0800f503
 800f440:	0800f503 	.word	0x0800f503
 800f444:	0800f503 	.word	0x0800f503
 800f448:	0800f503 	.word	0x0800f503
 800f44c:	0800f503 	.word	0x0800f503
 800f450:	0800f503 	.word	0x0800f503
 800f454:	0800f4cf 	.word	0x0800f4cf
 800f458:	0800f503 	.word	0x0800f503
 800f45c:	0800f503 	.word	0x0800f503
 800f460:	0800f503 	.word	0x0800f503
 800f464:	0800f503 	.word	0x0800f503
 800f468:	0800f503 	.word	0x0800f503
 800f46c:	0800f503 	.word	0x0800f503
 800f470:	0800f503 	.word	0x0800f503
 800f474:	0800f503 	.word	0x0800f503
 800f478:	0800f503 	.word	0x0800f503
 800f47c:	0800f503 	.word	0x0800f503
 800f480:	0800f503 	.word	0x0800f503
 800f484:	0800f503 	.word	0x0800f503
 800f488:	0800f503 	.word	0x0800f503
 800f48c:	0800f503 	.word	0x0800f503
 800f490:	0800f503 	.word	0x0800f503
 800f494:	0800f4f5 	.word	0x0800f4f5
 800f498:	2b40      	cmp	r3, #64	; 0x40
 800f49a:	d02e      	beq.n	800f4fa <UART_SetConfig+0xab2>
 800f49c:	e031      	b.n	800f502 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f49e:	f7fb fcaf 	bl	800ae00 <HAL_RCC_GetPCLK1Freq>
 800f4a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f4a4:	e033      	b.n	800f50e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f4a6:	f7fb fcc1 	bl	800ae2c <HAL_RCC_GetPCLK2Freq>
 800f4aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f4ac:	e02f      	b.n	800f50e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f4ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7fc fbe0 	bl	800bc78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4bc:	e027      	b.n	800f50e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f4be:	f107 0318 	add.w	r3, r7, #24
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7fc fd2c 	bl	800bf20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f4c8:	69fb      	ldr	r3, [r7, #28]
 800f4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4cc:	e01f      	b.n	800f50e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f4ce:	4b69      	ldr	r3, [pc, #420]	; (800f674 <UART_SetConfig+0xc2c>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	f003 0320 	and.w	r3, r3, #32
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d009      	beq.n	800f4ee <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f4da:	4b66      	ldr	r3, [pc, #408]	; (800f674 <UART_SetConfig+0xc2c>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	08db      	lsrs	r3, r3, #3
 800f4e0:	f003 0303 	and.w	r3, r3, #3
 800f4e4:	4a64      	ldr	r2, [pc, #400]	; (800f678 <UART_SetConfig+0xc30>)
 800f4e6:	fa22 f303 	lsr.w	r3, r2, r3
 800f4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f4ec:	e00f      	b.n	800f50e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f4ee:	4b62      	ldr	r3, [pc, #392]	; (800f678 <UART_SetConfig+0xc30>)
 800f4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4f2:	e00c      	b.n	800f50e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f4f4:	4b61      	ldr	r3, [pc, #388]	; (800f67c <UART_SetConfig+0xc34>)
 800f4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4f8:	e009      	b.n	800f50e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f4fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f500:	e005      	b.n	800f50e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f502:	2300      	movs	r3, #0
 800f504:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f506:	2301      	movs	r3, #1
 800f508:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f50c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f50e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f510:	2b00      	cmp	r3, #0
 800f512:	f000 80ea 	beq.w	800f6ea <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f51a:	4a55      	ldr	r2, [pc, #340]	; (800f670 <UART_SetConfig+0xc28>)
 800f51c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f520:	461a      	mov	r2, r3
 800f522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f524:	fbb3 f3f2 	udiv	r3, r3, r2
 800f528:	005a      	lsls	r2, r3, #1
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	685b      	ldr	r3, [r3, #4]
 800f52e:	085b      	lsrs	r3, r3, #1
 800f530:	441a      	add	r2, r3
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	685b      	ldr	r3, [r3, #4]
 800f536:	fbb2 f3f3 	udiv	r3, r2, r3
 800f53a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f53e:	2b0f      	cmp	r3, #15
 800f540:	d916      	bls.n	800f570 <UART_SetConfig+0xb28>
 800f542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f548:	d212      	bcs.n	800f570 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f54c:	b29b      	uxth	r3, r3
 800f54e:	f023 030f 	bic.w	r3, r3, #15
 800f552:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f556:	085b      	lsrs	r3, r3, #1
 800f558:	b29b      	uxth	r3, r3
 800f55a:	f003 0307 	and.w	r3, r3, #7
 800f55e:	b29a      	uxth	r2, r3
 800f560:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f562:	4313      	orrs	r3, r2
 800f564:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f56c:	60da      	str	r2, [r3, #12]
 800f56e:	e0bc      	b.n	800f6ea <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f570:	2301      	movs	r3, #1
 800f572:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f576:	e0b8      	b.n	800f6ea <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f578:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f57c:	2b20      	cmp	r3, #32
 800f57e:	dc4b      	bgt.n	800f618 <UART_SetConfig+0xbd0>
 800f580:	2b00      	cmp	r3, #0
 800f582:	f2c0 8087 	blt.w	800f694 <UART_SetConfig+0xc4c>
 800f586:	2b20      	cmp	r3, #32
 800f588:	f200 8084 	bhi.w	800f694 <UART_SetConfig+0xc4c>
 800f58c:	a201      	add	r2, pc, #4	; (adr r2, 800f594 <UART_SetConfig+0xb4c>)
 800f58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f592:	bf00      	nop
 800f594:	0800f61f 	.word	0x0800f61f
 800f598:	0800f627 	.word	0x0800f627
 800f59c:	0800f695 	.word	0x0800f695
 800f5a0:	0800f695 	.word	0x0800f695
 800f5a4:	0800f62f 	.word	0x0800f62f
 800f5a8:	0800f695 	.word	0x0800f695
 800f5ac:	0800f695 	.word	0x0800f695
 800f5b0:	0800f695 	.word	0x0800f695
 800f5b4:	0800f63f 	.word	0x0800f63f
 800f5b8:	0800f695 	.word	0x0800f695
 800f5bc:	0800f695 	.word	0x0800f695
 800f5c0:	0800f695 	.word	0x0800f695
 800f5c4:	0800f695 	.word	0x0800f695
 800f5c8:	0800f695 	.word	0x0800f695
 800f5cc:	0800f695 	.word	0x0800f695
 800f5d0:	0800f695 	.word	0x0800f695
 800f5d4:	0800f64f 	.word	0x0800f64f
 800f5d8:	0800f695 	.word	0x0800f695
 800f5dc:	0800f695 	.word	0x0800f695
 800f5e0:	0800f695 	.word	0x0800f695
 800f5e4:	0800f695 	.word	0x0800f695
 800f5e8:	0800f695 	.word	0x0800f695
 800f5ec:	0800f695 	.word	0x0800f695
 800f5f0:	0800f695 	.word	0x0800f695
 800f5f4:	0800f695 	.word	0x0800f695
 800f5f8:	0800f695 	.word	0x0800f695
 800f5fc:	0800f695 	.word	0x0800f695
 800f600:	0800f695 	.word	0x0800f695
 800f604:	0800f695 	.word	0x0800f695
 800f608:	0800f695 	.word	0x0800f695
 800f60c:	0800f695 	.word	0x0800f695
 800f610:	0800f695 	.word	0x0800f695
 800f614:	0800f687 	.word	0x0800f687
 800f618:	2b40      	cmp	r3, #64	; 0x40
 800f61a:	d037      	beq.n	800f68c <UART_SetConfig+0xc44>
 800f61c:	e03a      	b.n	800f694 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f61e:	f7fb fbef 	bl	800ae00 <HAL_RCC_GetPCLK1Freq>
 800f622:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f624:	e03c      	b.n	800f6a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f626:	f7fb fc01 	bl	800ae2c <HAL_RCC_GetPCLK2Freq>
 800f62a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f62c:	e038      	b.n	800f6a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f62e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f632:	4618      	mov	r0, r3
 800f634:	f7fc fb20 	bl	800bc78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f63a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f63c:	e030      	b.n	800f6a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f63e:	f107 0318 	add.w	r3, r7, #24
 800f642:	4618      	mov	r0, r3
 800f644:	f7fc fc6c 	bl	800bf20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f648:	69fb      	ldr	r3, [r7, #28]
 800f64a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f64c:	e028      	b.n	800f6a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f64e:	4b09      	ldr	r3, [pc, #36]	; (800f674 <UART_SetConfig+0xc2c>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	f003 0320 	and.w	r3, r3, #32
 800f656:	2b00      	cmp	r3, #0
 800f658:	d012      	beq.n	800f680 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f65a:	4b06      	ldr	r3, [pc, #24]	; (800f674 <UART_SetConfig+0xc2c>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	08db      	lsrs	r3, r3, #3
 800f660:	f003 0303 	and.w	r3, r3, #3
 800f664:	4a04      	ldr	r2, [pc, #16]	; (800f678 <UART_SetConfig+0xc30>)
 800f666:	fa22 f303 	lsr.w	r3, r2, r3
 800f66a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f66c:	e018      	b.n	800f6a0 <UART_SetConfig+0xc58>
 800f66e:	bf00      	nop
 800f670:	08011488 	.word	0x08011488
 800f674:	58024400 	.word	0x58024400
 800f678:	03d09000 	.word	0x03d09000
 800f67c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f680:	4b24      	ldr	r3, [pc, #144]	; (800f714 <UART_SetConfig+0xccc>)
 800f682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f684:	e00c      	b.n	800f6a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f686:	4b24      	ldr	r3, [pc, #144]	; (800f718 <UART_SetConfig+0xcd0>)
 800f688:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f68a:	e009      	b.n	800f6a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f68c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f690:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f692:	e005      	b.n	800f6a0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f694:	2300      	movs	r3, #0
 800f696:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f698:	2301      	movs	r3, #1
 800f69a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f69e:	bf00      	nop
    }

    if (pclk != 0U)
 800f6a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d021      	beq.n	800f6ea <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6aa:	4a1c      	ldr	r2, [pc, #112]	; (800f71c <UART_SetConfig+0xcd4>)
 800f6ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6b4:	fbb3 f2f2 	udiv	r2, r3, r2
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	685b      	ldr	r3, [r3, #4]
 800f6bc:	085b      	lsrs	r3, r3, #1
 800f6be:	441a      	add	r2, r3
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6c8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6cc:	2b0f      	cmp	r3, #15
 800f6ce:	d909      	bls.n	800f6e4 <UART_SetConfig+0xc9c>
 800f6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6d6:	d205      	bcs.n	800f6e4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6da:	b29a      	uxth	r2, r3
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	60da      	str	r2, [r3, #12]
 800f6e2:	e002      	b.n	800f6ea <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	2201      	movs	r2, #1
 800f6ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	2201      	movs	r2, #1
 800f6f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f700:	697b      	ldr	r3, [r7, #20]
 800f702:	2200      	movs	r2, #0
 800f704:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f706:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	3748      	adds	r7, #72	; 0x48
 800f70e:	46bd      	mov	sp, r7
 800f710:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f714:	03d09000 	.word	0x03d09000
 800f718:	003d0900 	.word	0x003d0900
 800f71c:	08011488 	.word	0x08011488

0800f720 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f720:	b480      	push	{r7}
 800f722:	b083      	sub	sp, #12
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f72c:	f003 0301 	and.w	r3, r3, #1
 800f730:	2b00      	cmp	r3, #0
 800f732:	d00a      	beq.n	800f74a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	685b      	ldr	r3, [r3, #4]
 800f73a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	430a      	orrs	r2, r1
 800f748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f74e:	f003 0302 	and.w	r3, r3, #2
 800f752:	2b00      	cmp	r3, #0
 800f754:	d00a      	beq.n	800f76c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	430a      	orrs	r2, r1
 800f76a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f770:	f003 0304 	and.w	r3, r3, #4
 800f774:	2b00      	cmp	r3, #0
 800f776:	d00a      	beq.n	800f78e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	430a      	orrs	r2, r1
 800f78c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f792:	f003 0308 	and.w	r3, r3, #8
 800f796:	2b00      	cmp	r3, #0
 800f798:	d00a      	beq.n	800f7b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	685b      	ldr	r3, [r3, #4]
 800f7a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	430a      	orrs	r2, r1
 800f7ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7b4:	f003 0310 	and.w	r3, r3, #16
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d00a      	beq.n	800f7d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	689b      	ldr	r3, [r3, #8]
 800f7c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	430a      	orrs	r2, r1
 800f7d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7d6:	f003 0320 	and.w	r3, r3, #32
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d00a      	beq.n	800f7f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	689b      	ldr	r3, [r3, #8]
 800f7e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	430a      	orrs	r2, r1
 800f7f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d01a      	beq.n	800f836 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	685b      	ldr	r3, [r3, #4]
 800f806:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	430a      	orrs	r2, r1
 800f814:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f81a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f81e:	d10a      	bne.n	800f836 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	685b      	ldr	r3, [r3, #4]
 800f826:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	430a      	orrs	r2, r1
 800f834:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f83a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d00a      	beq.n	800f858 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	685b      	ldr	r3, [r3, #4]
 800f848:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	430a      	orrs	r2, r1
 800f856:	605a      	str	r2, [r3, #4]
  }
}
 800f858:	bf00      	nop
 800f85a:	370c      	adds	r7, #12
 800f85c:	46bd      	mov	sp, r7
 800f85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f862:	4770      	bx	lr

0800f864 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b086      	sub	sp, #24
 800f868:	af02      	add	r7, sp, #8
 800f86a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2200      	movs	r2, #0
 800f870:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f874:	f7f7 fa28 	bl	8006cc8 <HAL_GetTick>
 800f878:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	f003 0308 	and.w	r3, r3, #8
 800f884:	2b08      	cmp	r3, #8
 800f886:	d10e      	bne.n	800f8a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f888:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f88c:	9300      	str	r3, [sp, #0]
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	2200      	movs	r2, #0
 800f892:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f000 f82f 	bl	800f8fa <UART_WaitOnFlagUntilTimeout>
 800f89c:	4603      	mov	r3, r0
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d001      	beq.n	800f8a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f8a2:	2303      	movs	r3, #3
 800f8a4:	e025      	b.n	800f8f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	f003 0304 	and.w	r3, r3, #4
 800f8b0:	2b04      	cmp	r3, #4
 800f8b2:	d10e      	bne.n	800f8d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f8b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f8b8:	9300      	str	r3, [sp, #0]
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f000 f819 	bl	800f8fa <UART_WaitOnFlagUntilTimeout>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d001      	beq.n	800f8d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f8ce:	2303      	movs	r3, #3
 800f8d0:	e00f      	b.n	800f8f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2220      	movs	r2, #32
 800f8d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2220      	movs	r2, #32
 800f8de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f8f0:	2300      	movs	r3, #0
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	3710      	adds	r7, #16
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}

0800f8fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f8fa:	b580      	push	{r7, lr}
 800f8fc:	b09c      	sub	sp, #112	; 0x70
 800f8fe:	af00      	add	r7, sp, #0
 800f900:	60f8      	str	r0, [r7, #12]
 800f902:	60b9      	str	r1, [r7, #8]
 800f904:	603b      	str	r3, [r7, #0]
 800f906:	4613      	mov	r3, r2
 800f908:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f90a:	e0a9      	b.n	800fa60 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f90c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f912:	f000 80a5 	beq.w	800fa60 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f916:	f7f7 f9d7 	bl	8006cc8 <HAL_GetTick>
 800f91a:	4602      	mov	r2, r0
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	1ad3      	subs	r3, r2, r3
 800f920:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f922:	429a      	cmp	r2, r3
 800f924:	d302      	bcc.n	800f92c <UART_WaitOnFlagUntilTimeout+0x32>
 800f926:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d140      	bne.n	800f9ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f934:	e853 3f00 	ldrex	r3, [r3]
 800f938:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f93a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f93c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f940:	667b      	str	r3, [r7, #100]	; 0x64
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	461a      	mov	r2, r3
 800f948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f94a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f94c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f94e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f950:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f952:	e841 2300 	strex	r3, r2, [r1]
 800f956:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d1e6      	bne.n	800f92c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	3308      	adds	r3, #8
 800f964:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f968:	e853 3f00 	ldrex	r3, [r3]
 800f96c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f970:	f023 0301 	bic.w	r3, r3, #1
 800f974:	663b      	str	r3, [r7, #96]	; 0x60
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	3308      	adds	r3, #8
 800f97c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f97e:	64ba      	str	r2, [r7, #72]	; 0x48
 800f980:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f982:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f984:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f986:	e841 2300 	strex	r3, r2, [r1]
 800f98a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f98c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d1e5      	bne.n	800f95e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	2220      	movs	r2, #32
 800f996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	2220      	movs	r2, #32
 800f99e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f9aa:	2303      	movs	r3, #3
 800f9ac:	e069      	b.n	800fa82 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	f003 0304 	and.w	r3, r3, #4
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d051      	beq.n	800fa60 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	69db      	ldr	r3, [r3, #28]
 800f9c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f9c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f9ca:	d149      	bne.n	800fa60 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f9d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9de:	e853 3f00 	ldrex	r3, [r3]
 800f9e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f9ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	461a      	mov	r2, r3
 800f9f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9f4:	637b      	str	r3, [r7, #52]	; 0x34
 800f9f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f9fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9fc:	e841 2300 	strex	r3, r2, [r1]
 800fa00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fa02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d1e6      	bne.n	800f9d6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	3308      	adds	r3, #8
 800fa0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	e853 3f00 	ldrex	r3, [r3]
 800fa16:	613b      	str	r3, [r7, #16]
   return(result);
 800fa18:	693b      	ldr	r3, [r7, #16]
 800fa1a:	f023 0301 	bic.w	r3, r3, #1
 800fa1e:	66bb      	str	r3, [r7, #104]	; 0x68
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	3308      	adds	r3, #8
 800fa26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fa28:	623a      	str	r2, [r7, #32]
 800fa2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa2c:	69f9      	ldr	r1, [r7, #28]
 800fa2e:	6a3a      	ldr	r2, [r7, #32]
 800fa30:	e841 2300 	strex	r3, r2, [r1]
 800fa34:	61bb      	str	r3, [r7, #24]
   return(result);
 800fa36:	69bb      	ldr	r3, [r7, #24]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d1e5      	bne.n	800fa08 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	2220      	movs	r2, #32
 800fa40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	2220      	movs	r2, #32
 800fa48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	2220      	movs	r2, #32
 800fa50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	2200      	movs	r2, #0
 800fa58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800fa5c:	2303      	movs	r3, #3
 800fa5e:	e010      	b.n	800fa82 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	69da      	ldr	r2, [r3, #28]
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	4013      	ands	r3, r2
 800fa6a:	68ba      	ldr	r2, [r7, #8]
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	bf0c      	ite	eq
 800fa70:	2301      	moveq	r3, #1
 800fa72:	2300      	movne	r3, #0
 800fa74:	b2db      	uxtb	r3, r3
 800fa76:	461a      	mov	r2, r3
 800fa78:	79fb      	ldrb	r3, [r7, #7]
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	f43f af46 	beq.w	800f90c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fa80:	2300      	movs	r3, #0
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3770      	adds	r7, #112	; 0x70
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}
	...

0800fa8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b096      	sub	sp, #88	; 0x58
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	60f8      	str	r0, [r7, #12]
 800fa94:	60b9      	str	r1, [r7, #8]
 800fa96:	4613      	mov	r3, r2
 800fa98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	68ba      	ldr	r2, [r7, #8]
 800fa9e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	88fa      	ldrh	r2, [r7, #6]
 800faa4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	2200      	movs	r2, #0
 800faac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	2222      	movs	r2, #34	; 0x22
 800fab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d02c      	beq.n	800fb1a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fac4:	4a42      	ldr	r2, [pc, #264]	; (800fbd0 <UART_Start_Receive_DMA+0x144>)
 800fac6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800facc:	4a41      	ldr	r2, [pc, #260]	; (800fbd4 <UART_Start_Receive_DMA+0x148>)
 800face:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fad4:	4a40      	ldr	r2, [pc, #256]	; (800fbd8 <UART_Start_Receive_DMA+0x14c>)
 800fad6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fadc:	2200      	movs	r2, #0
 800fade:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	3324      	adds	r3, #36	; 0x24
 800faea:	4619      	mov	r1, r3
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800faf0:	461a      	mov	r2, r3
 800faf2:	88fb      	ldrh	r3, [r7, #6]
 800faf4:	f7f7 fd82 	bl	80075fc <HAL_DMA_Start_IT>
 800faf8:	4603      	mov	r3, r0
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d00d      	beq.n	800fb1a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	2210      	movs	r2, #16
 800fb02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	2200      	movs	r2, #0
 800fb0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	2220      	movs	r2, #32
 800fb12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800fb16:	2301      	movs	r3, #1
 800fb18:	e055      	b.n	800fbc6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	691b      	ldr	r3, [r3, #16]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d018      	beq.n	800fb5c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb32:	e853 3f00 	ldrex	r3, [r3]
 800fb36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fb3e:	657b      	str	r3, [r7, #84]	; 0x54
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	461a      	mov	r2, r3
 800fb46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb48:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb4a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb50:	e841 2300 	strex	r3, r2, [r1]
 800fb54:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fb56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d1e6      	bne.n	800fb2a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	3308      	adds	r3, #8
 800fb62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb66:	e853 3f00 	ldrex	r3, [r3]
 800fb6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb6e:	f043 0301 	orr.w	r3, r3, #1
 800fb72:	653b      	str	r3, [r7, #80]	; 0x50
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	3308      	adds	r3, #8
 800fb7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb7c:	637a      	str	r2, [r7, #52]	; 0x34
 800fb7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fb82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb84:	e841 2300 	strex	r3, r2, [r1]
 800fb88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d1e5      	bne.n	800fb5c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	3308      	adds	r3, #8
 800fb96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	e853 3f00 	ldrex	r3, [r3]
 800fb9e:	613b      	str	r3, [r7, #16]
   return(result);
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	3308      	adds	r3, #8
 800fbae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fbb0:	623a      	str	r2, [r7, #32]
 800fbb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbb4:	69f9      	ldr	r1, [r7, #28]
 800fbb6:	6a3a      	ldr	r2, [r7, #32]
 800fbb8:	e841 2300 	strex	r3, r2, [r1]
 800fbbc:	61bb      	str	r3, [r7, #24]
   return(result);
 800fbbe:	69bb      	ldr	r3, [r7, #24]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d1e5      	bne.n	800fb90 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800fbc4:	2300      	movs	r3, #0
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3758      	adds	r7, #88	; 0x58
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}
 800fbce:	bf00      	nop
 800fbd0:	0800fddf 	.word	0x0800fddf
 800fbd4:	0800ff01 	.word	0x0800ff01
 800fbd8:	0800ff39 	.word	0x0800ff39

0800fbdc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fbdc:	b480      	push	{r7}
 800fbde:	b08f      	sub	sp, #60	; 0x3c
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbea:	6a3b      	ldr	r3, [r7, #32]
 800fbec:	e853 3f00 	ldrex	r3, [r3]
 800fbf0:	61fb      	str	r3, [r7, #28]
   return(result);
 800fbf2:	69fb      	ldr	r3, [r7, #28]
 800fbf4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fbf8:	637b      	str	r3, [r7, #52]	; 0x34
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	461a      	mov	r2, r3
 800fc00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc04:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc0a:	e841 2300 	strex	r3, r2, [r1]
 800fc0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d1e6      	bne.n	800fbe4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	3308      	adds	r3, #8
 800fc1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	e853 3f00 	ldrex	r3, [r3]
 800fc24:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800fc2c:	633b      	str	r3, [r7, #48]	; 0x30
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	3308      	adds	r3, #8
 800fc34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc36:	61ba      	str	r2, [r7, #24]
 800fc38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc3a:	6979      	ldr	r1, [r7, #20]
 800fc3c:	69ba      	ldr	r2, [r7, #24]
 800fc3e:	e841 2300 	strex	r3, r2, [r1]
 800fc42:	613b      	str	r3, [r7, #16]
   return(result);
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d1e5      	bne.n	800fc16 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	2220      	movs	r2, #32
 800fc4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800fc52:	bf00      	nop
 800fc54:	373c      	adds	r7, #60	; 0x3c
 800fc56:	46bd      	mov	sp, r7
 800fc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5c:	4770      	bx	lr
	...

0800fc60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fc60:	b480      	push	{r7}
 800fc62:	b095      	sub	sp, #84	; 0x54
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc70:	e853 3f00 	ldrex	r3, [r3]
 800fc74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fc7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	461a      	mov	r2, r3
 800fc84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc86:	643b      	str	r3, [r7, #64]	; 0x40
 800fc88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fc8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fc8e:	e841 2300 	strex	r3, r2, [r1]
 800fc92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d1e6      	bne.n	800fc68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	3308      	adds	r3, #8
 800fca0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fca2:	6a3b      	ldr	r3, [r7, #32]
 800fca4:	e853 3f00 	ldrex	r3, [r3]
 800fca8:	61fb      	str	r3, [r7, #28]
   return(result);
 800fcaa:	69fa      	ldr	r2, [r7, #28]
 800fcac:	4b1e      	ldr	r3, [pc, #120]	; (800fd28 <UART_EndRxTransfer+0xc8>)
 800fcae:	4013      	ands	r3, r2
 800fcb0:	64bb      	str	r3, [r7, #72]	; 0x48
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	3308      	adds	r3, #8
 800fcb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fcba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fcbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fcc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcc2:	e841 2300 	strex	r3, r2, [r1]
 800fcc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d1e5      	bne.n	800fc9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcd2:	2b01      	cmp	r3, #1
 800fcd4:	d118      	bne.n	800fd08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	e853 3f00 	ldrex	r3, [r3]
 800fce2:	60bb      	str	r3, [r7, #8]
   return(result);
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	f023 0310 	bic.w	r3, r3, #16
 800fcea:	647b      	str	r3, [r7, #68]	; 0x44
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	461a      	mov	r2, r3
 800fcf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fcf4:	61bb      	str	r3, [r7, #24]
 800fcf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcf8:	6979      	ldr	r1, [r7, #20]
 800fcfa:	69ba      	ldr	r2, [r7, #24]
 800fcfc:	e841 2300 	strex	r3, r2, [r1]
 800fd00:	613b      	str	r3, [r7, #16]
   return(result);
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d1e6      	bne.n	800fcd6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2220      	movs	r2, #32
 800fd0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2200      	movs	r2, #0
 800fd14:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	2200      	movs	r2, #0
 800fd1a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800fd1c:	bf00      	nop
 800fd1e:	3754      	adds	r7, #84	; 0x54
 800fd20:	46bd      	mov	sp, r7
 800fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd26:	4770      	bx	lr
 800fd28:	effffffe 	.word	0xeffffffe

0800fd2c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b090      	sub	sp, #64	; 0x40
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd38:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	69db      	ldr	r3, [r3, #28]
 800fd3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd42:	d037      	beq.n	800fdb4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800fd44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd46:	2200      	movs	r2, #0
 800fd48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fd4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	3308      	adds	r3, #8
 800fd52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd56:	e853 3f00 	ldrex	r3, [r3]
 800fd5a:	623b      	str	r3, [r7, #32]
   return(result);
 800fd5c:	6a3b      	ldr	r3, [r7, #32]
 800fd5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd62:	63bb      	str	r3, [r7, #56]	; 0x38
 800fd64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	3308      	adds	r3, #8
 800fd6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd6c:	633a      	str	r2, [r7, #48]	; 0x30
 800fd6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd74:	e841 2300 	strex	r3, r2, [r1]
 800fd78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d1e5      	bne.n	800fd4c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fd80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	e853 3f00 	ldrex	r3, [r3]
 800fd8c:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd94:	637b      	str	r3, [r7, #52]	; 0x34
 800fd96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	461a      	mov	r2, r3
 800fd9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd9e:	61fb      	str	r3, [r7, #28]
 800fda0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fda2:	69b9      	ldr	r1, [r7, #24]
 800fda4:	69fa      	ldr	r2, [r7, #28]
 800fda6:	e841 2300 	strex	r3, r2, [r1]
 800fdaa:	617b      	str	r3, [r7, #20]
   return(result);
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d1e6      	bne.n	800fd80 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fdb2:	e002      	b.n	800fdba <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800fdb4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fdb6:	f7f3 fffb 	bl	8003db0 <HAL_UART_TxCpltCallback>
}
 800fdba:	bf00      	nop
 800fdbc:	3740      	adds	r7, #64	; 0x40
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}

0800fdc2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fdc2:	b580      	push	{r7, lr}
 800fdc4:	b084      	sub	sp, #16
 800fdc6:	af00      	add	r7, sp, #0
 800fdc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800fdd0:	68f8      	ldr	r0, [r7, #12]
 800fdd2:	f7fe fe0f 	bl	800e9f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fdd6:	bf00      	nop
 800fdd8:	3710      	adds	r7, #16
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}

0800fdde <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fdde:	b580      	push	{r7, lr}
 800fde0:	b09c      	sub	sp, #112	; 0x70
 800fde2:	af00      	add	r7, sp, #0
 800fde4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdea:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	69db      	ldr	r3, [r3, #28]
 800fdf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fdf4:	d071      	beq.n	800feda <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800fdf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fdfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe06:	e853 3f00 	ldrex	r3, [r3]
 800fe0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fe0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fe12:	66bb      	str	r3, [r7, #104]	; 0x68
 800fe14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	461a      	mov	r2, r3
 800fe1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe1c:	65bb      	str	r3, [r7, #88]	; 0x58
 800fe1e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fe22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fe24:	e841 2300 	strex	r3, r2, [r1]
 800fe28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fe2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d1e6      	bne.n	800fdfe <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	3308      	adds	r3, #8
 800fe36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe3a:	e853 3f00 	ldrex	r3, [r3]
 800fe3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fe40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe42:	f023 0301 	bic.w	r3, r3, #1
 800fe46:	667b      	str	r3, [r7, #100]	; 0x64
 800fe48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	3308      	adds	r3, #8
 800fe4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fe50:	647a      	str	r2, [r7, #68]	; 0x44
 800fe52:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fe56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe58:	e841 2300 	strex	r3, r2, [r1]
 800fe5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fe5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d1e5      	bne.n	800fe30 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fe64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	3308      	adds	r3, #8
 800fe6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe6e:	e853 3f00 	ldrex	r3, [r3]
 800fe72:	623b      	str	r3, [r7, #32]
   return(result);
 800fe74:	6a3b      	ldr	r3, [r7, #32]
 800fe76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe7a:	663b      	str	r3, [r7, #96]	; 0x60
 800fe7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	3308      	adds	r3, #8
 800fe82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fe84:	633a      	str	r2, [r7, #48]	; 0x30
 800fe86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe8c:	e841 2300 	strex	r3, r2, [r1]
 800fe90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fe92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d1e5      	bne.n	800fe64 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fe98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe9a:	2220      	movs	r2, #32
 800fe9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	d118      	bne.n	800feda <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feae:	693b      	ldr	r3, [r7, #16]
 800feb0:	e853 3f00 	ldrex	r3, [r3]
 800feb4:	60fb      	str	r3, [r7, #12]
   return(result);
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	f023 0310 	bic.w	r3, r3, #16
 800febc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800febe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	461a      	mov	r2, r3
 800fec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fec6:	61fb      	str	r3, [r7, #28]
 800fec8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feca:	69b9      	ldr	r1, [r7, #24]
 800fecc:	69fa      	ldr	r2, [r7, #28]
 800fece:	e841 2300 	strex	r3, r2, [r1]
 800fed2:	617b      	str	r3, [r7, #20]
   return(result);
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d1e6      	bne.n	800fea8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800feda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fedc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fede:	2b01      	cmp	r3, #1
 800fee0:	d107      	bne.n	800fef2 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fee4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fee8:	4619      	mov	r1, r3
 800feea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800feec:	f7fe fda0 	bl	800ea30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fef0:	e002      	b.n	800fef8 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800fef2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fef4:	f7f3 ff6e 	bl	8003dd4 <HAL_UART_RxCpltCallback>
}
 800fef8:	bf00      	nop
 800fefa:	3770      	adds	r7, #112	; 0x70
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}

0800ff00 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b084      	sub	sp, #16
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff0c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff12:	2b01      	cmp	r3, #1
 800ff14:	d109      	bne.n	800ff2a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ff1c:	085b      	lsrs	r3, r3, #1
 800ff1e:	b29b      	uxth	r3, r3
 800ff20:	4619      	mov	r1, r3
 800ff22:	68f8      	ldr	r0, [r7, #12]
 800ff24:	f7fe fd84 	bl	800ea30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ff28:	e002      	b.n	800ff30 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ff2a:	68f8      	ldr	r0, [r7, #12]
 800ff2c:	f7fe fd6c 	bl	800ea08 <HAL_UART_RxHalfCpltCallback>
}
 800ff30:	bf00      	nop
 800ff32:	3710      	adds	r7, #16
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}

0800ff38 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b086      	sub	sp, #24
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff44:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ff46:	697b      	ldr	r3, [r7, #20]
 800ff48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff4c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ff4e:	697b      	ldr	r3, [r7, #20]
 800ff50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff54:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ff56:	697b      	ldr	r3, [r7, #20]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	689b      	ldr	r3, [r3, #8]
 800ff5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff60:	2b80      	cmp	r3, #128	; 0x80
 800ff62:	d109      	bne.n	800ff78 <UART_DMAError+0x40>
 800ff64:	693b      	ldr	r3, [r7, #16]
 800ff66:	2b21      	cmp	r3, #33	; 0x21
 800ff68:	d106      	bne.n	800ff78 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ff6a:	697b      	ldr	r3, [r7, #20]
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ff72:	6978      	ldr	r0, [r7, #20]
 800ff74:	f7ff fe32 	bl	800fbdc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	689b      	ldr	r3, [r3, #8]
 800ff7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff82:	2b40      	cmp	r3, #64	; 0x40
 800ff84:	d109      	bne.n	800ff9a <UART_DMAError+0x62>
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	2b22      	cmp	r3, #34	; 0x22
 800ff8a:	d106      	bne.n	800ff9a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ff8c:	697b      	ldr	r3, [r7, #20]
 800ff8e:	2200      	movs	r2, #0
 800ff90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ff94:	6978      	ldr	r0, [r7, #20]
 800ff96:	f7ff fe63 	bl	800fc60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ff9a:	697b      	ldr	r3, [r7, #20]
 800ff9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ffa0:	f043 0210 	orr.w	r2, r3, #16
 800ffa4:	697b      	ldr	r3, [r7, #20]
 800ffa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ffaa:	6978      	ldr	r0, [r7, #20]
 800ffac:	f7fe fd36 	bl	800ea1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ffb0:	bf00      	nop
 800ffb2:	3718      	adds	r7, #24
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}

0800ffb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b084      	sub	sp, #16
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	2200      	movs	r2, #0
 800ffca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ffd6:	68f8      	ldr	r0, [r7, #12]
 800ffd8:	f7fe fd20 	bl	800ea1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ffdc:	bf00      	nop
 800ffde:	3710      	adds	r7, #16
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b088      	sub	sp, #32
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	e853 3f00 	ldrex	r3, [r3]
 800fff8:	60bb      	str	r3, [r7, #8]
   return(result);
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010000:	61fb      	str	r3, [r7, #28]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	461a      	mov	r2, r3
 8010008:	69fb      	ldr	r3, [r7, #28]
 801000a:	61bb      	str	r3, [r7, #24]
 801000c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801000e:	6979      	ldr	r1, [r7, #20]
 8010010:	69ba      	ldr	r2, [r7, #24]
 8010012:	e841 2300 	strex	r3, r2, [r1]
 8010016:	613b      	str	r3, [r7, #16]
   return(result);
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d1e6      	bne.n	800ffec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2220      	movs	r2, #32
 8010022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2200      	movs	r2, #0
 801002a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f7f3 febf 	bl	8003db0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010032:	bf00      	nop
 8010034:	3720      	adds	r7, #32
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}

0801003a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801003a:	b480      	push	{r7}
 801003c:	b083      	sub	sp, #12
 801003e:	af00      	add	r7, sp, #0
 8010040:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010042:	bf00      	nop
 8010044:	370c      	adds	r7, #12
 8010046:	46bd      	mov	sp, r7
 8010048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004c:	4770      	bx	lr

0801004e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801004e:	b480      	push	{r7}
 8010050:	b083      	sub	sp, #12
 8010052:	af00      	add	r7, sp, #0
 8010054:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010056:	bf00      	nop
 8010058:	370c      	adds	r7, #12
 801005a:	46bd      	mov	sp, r7
 801005c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010060:	4770      	bx	lr

08010062 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010062:	b480      	push	{r7}
 8010064:	b083      	sub	sp, #12
 8010066:	af00      	add	r7, sp, #0
 8010068:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801006a:	bf00      	nop
 801006c:	370c      	adds	r7, #12
 801006e:	46bd      	mov	sp, r7
 8010070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010074:	4770      	bx	lr

08010076 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010076:	b480      	push	{r7}
 8010078:	b085      	sub	sp, #20
 801007a:	af00      	add	r7, sp, #0
 801007c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010084:	2b01      	cmp	r3, #1
 8010086:	d101      	bne.n	801008c <HAL_UARTEx_DisableFifoMode+0x16>
 8010088:	2302      	movs	r3, #2
 801008a:	e027      	b.n	80100dc <HAL_UARTEx_DisableFifoMode+0x66>
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	2201      	movs	r2, #1
 8010090:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2224      	movs	r2, #36	; 0x24
 8010098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	681a      	ldr	r2, [r3, #0]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	f022 0201 	bic.w	r2, r2, #1
 80100b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80100ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2200      	movs	r2, #0
 80100c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	68fa      	ldr	r2, [r7, #12]
 80100c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2220      	movs	r2, #32
 80100ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2200      	movs	r2, #0
 80100d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80100da:	2300      	movs	r3, #0
}
 80100dc:	4618      	mov	r0, r3
 80100de:	3714      	adds	r7, #20
 80100e0:	46bd      	mov	sp, r7
 80100e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e6:	4770      	bx	lr

080100e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b084      	sub	sp, #16
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
 80100f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80100f8:	2b01      	cmp	r3, #1
 80100fa:	d101      	bne.n	8010100 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80100fc:	2302      	movs	r3, #2
 80100fe:	e02d      	b.n	801015c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2201      	movs	r2, #1
 8010104:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2224      	movs	r2, #36	; 0x24
 801010c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	681a      	ldr	r2, [r3, #0]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	f022 0201 	bic.w	r2, r2, #1
 8010126:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	689b      	ldr	r3, [r3, #8]
 801012e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	683a      	ldr	r2, [r7, #0]
 8010138:	430a      	orrs	r2, r1
 801013a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f000 f84f 	bl	80101e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	68fa      	ldr	r2, [r7, #12]
 8010148:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2220      	movs	r2, #32
 801014e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	2200      	movs	r2, #0
 8010156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801015a:	2300      	movs	r3, #0
}
 801015c:	4618      	mov	r0, r3
 801015e:	3710      	adds	r7, #16
 8010160:	46bd      	mov	sp, r7
 8010162:	bd80      	pop	{r7, pc}

08010164 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b084      	sub	sp, #16
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
 801016c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010174:	2b01      	cmp	r3, #1
 8010176:	d101      	bne.n	801017c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010178:	2302      	movs	r3, #2
 801017a:	e02d      	b.n	80101d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2201      	movs	r2, #1
 8010180:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2224      	movs	r2, #36	; 0x24
 8010188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	681a      	ldr	r2, [r3, #0]
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	f022 0201 	bic.w	r2, r2, #1
 80101a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	689b      	ldr	r3, [r3, #8]
 80101aa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	683a      	ldr	r2, [r7, #0]
 80101b4:	430a      	orrs	r2, r1
 80101b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f000 f811 	bl	80101e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	68fa      	ldr	r2, [r7, #12]
 80101c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2220      	movs	r2, #32
 80101ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2200      	movs	r2, #0
 80101d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80101d6:	2300      	movs	r3, #0
}
 80101d8:	4618      	mov	r0, r3
 80101da:	3710      	adds	r7, #16
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}

080101e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80101e0:	b480      	push	{r7}
 80101e2:	b085      	sub	sp, #20
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d108      	bne.n	8010202 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2201      	movs	r2, #1
 80101f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2201      	movs	r2, #1
 80101fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010200:	e031      	b.n	8010266 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010202:	2310      	movs	r3, #16
 8010204:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010206:	2310      	movs	r3, #16
 8010208:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	689b      	ldr	r3, [r3, #8]
 8010210:	0e5b      	lsrs	r3, r3, #25
 8010212:	b2db      	uxtb	r3, r3
 8010214:	f003 0307 	and.w	r3, r3, #7
 8010218:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	689b      	ldr	r3, [r3, #8]
 8010220:	0f5b      	lsrs	r3, r3, #29
 8010222:	b2db      	uxtb	r3, r3
 8010224:	f003 0307 	and.w	r3, r3, #7
 8010228:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801022a:	7bbb      	ldrb	r3, [r7, #14]
 801022c:	7b3a      	ldrb	r2, [r7, #12]
 801022e:	4911      	ldr	r1, [pc, #68]	; (8010274 <UARTEx_SetNbDataToProcess+0x94>)
 8010230:	5c8a      	ldrb	r2, [r1, r2]
 8010232:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010236:	7b3a      	ldrb	r2, [r7, #12]
 8010238:	490f      	ldr	r1, [pc, #60]	; (8010278 <UARTEx_SetNbDataToProcess+0x98>)
 801023a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801023c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010240:	b29a      	uxth	r2, r3
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010248:	7bfb      	ldrb	r3, [r7, #15]
 801024a:	7b7a      	ldrb	r2, [r7, #13]
 801024c:	4909      	ldr	r1, [pc, #36]	; (8010274 <UARTEx_SetNbDataToProcess+0x94>)
 801024e:	5c8a      	ldrb	r2, [r1, r2]
 8010250:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010254:	7b7a      	ldrb	r2, [r7, #13]
 8010256:	4908      	ldr	r1, [pc, #32]	; (8010278 <UARTEx_SetNbDataToProcess+0x98>)
 8010258:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801025a:	fb93 f3f2 	sdiv	r3, r3, r2
 801025e:	b29a      	uxth	r2, r3
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010266:	bf00      	nop
 8010268:	3714      	adds	r7, #20
 801026a:	46bd      	mov	sp, r7
 801026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010270:	4770      	bx	lr
 8010272:	bf00      	nop
 8010274:	080114a0 	.word	0x080114a0
 8010278:	080114a8 	.word	0x080114a8

0801027c <__cxa_pure_virtual>:
 801027c:	b508      	push	{r3, lr}
 801027e:	f000 f80d 	bl	801029c <_ZSt9terminatev>

08010282 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8010282:	b508      	push	{r3, lr}
 8010284:	4780      	blx	r0
 8010286:	f000 fd93 	bl	8010db0 <abort>
	...

0801028c <_ZSt13get_terminatev>:
 801028c:	4b02      	ldr	r3, [pc, #8]	; (8010298 <_ZSt13get_terminatev+0xc>)
 801028e:	6818      	ldr	r0, [r3, #0]
 8010290:	f3bf 8f5b 	dmb	ish
 8010294:	4770      	bx	lr
 8010296:	bf00      	nop
 8010298:	24000014 	.word	0x24000014

0801029c <_ZSt9terminatev>:
 801029c:	b508      	push	{r3, lr}
 801029e:	f7ff fff5 	bl	801028c <_ZSt13get_terminatev>
 80102a2:	f7ff ffee 	bl	8010282 <_ZN10__cxxabiv111__terminateEPFvvE>

080102a6 <checkint>:
 80102a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80102aa:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80102ae:	429a      	cmp	r2, r3
 80102b0:	b570      	push	{r4, r5, r6, lr}
 80102b2:	dd2a      	ble.n	801030a <checkint+0x64>
 80102b4:	f240 4333 	movw	r3, #1075	; 0x433
 80102b8:	429a      	cmp	r2, r3
 80102ba:	dc24      	bgt.n	8010306 <checkint+0x60>
 80102bc:	1a9b      	subs	r3, r3, r2
 80102be:	f1a3 0620 	sub.w	r6, r3, #32
 80102c2:	f04f 32ff 	mov.w	r2, #4294967295
 80102c6:	fa02 f403 	lsl.w	r4, r2, r3
 80102ca:	fa02 f606 	lsl.w	r6, r2, r6
 80102ce:	f1c3 0520 	rsb	r5, r3, #32
 80102d2:	fa22 f505 	lsr.w	r5, r2, r5
 80102d6:	4334      	orrs	r4, r6
 80102d8:	432c      	orrs	r4, r5
 80102da:	409a      	lsls	r2, r3
 80102dc:	ea20 0202 	bic.w	r2, r0, r2
 80102e0:	ea21 0404 	bic.w	r4, r1, r4
 80102e4:	4322      	orrs	r2, r4
 80102e6:	f1a3 0420 	sub.w	r4, r3, #32
 80102ea:	f1c3 0220 	rsb	r2, r3, #32
 80102ee:	d10c      	bne.n	801030a <checkint+0x64>
 80102f0:	40d8      	lsrs	r0, r3
 80102f2:	fa01 f302 	lsl.w	r3, r1, r2
 80102f6:	4318      	orrs	r0, r3
 80102f8:	40e1      	lsrs	r1, r4
 80102fa:	4308      	orrs	r0, r1
 80102fc:	f000 0001 	and.w	r0, r0, #1
 8010300:	f1d0 0002 	rsbs	r0, r0, #2
 8010304:	bd70      	pop	{r4, r5, r6, pc}
 8010306:	2002      	movs	r0, #2
 8010308:	e7fc      	b.n	8010304 <checkint+0x5e>
 801030a:	2000      	movs	r0, #0
 801030c:	e7fa      	b.n	8010304 <checkint+0x5e>
	...

08010310 <pow>:
 8010310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010314:	ee10 4a90 	vmov	r4, s1
 8010318:	ed2d 8b0a 	vpush	{d8-d12}
 801031c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8010320:	ee11 7a90 	vmov	r7, s3
 8010324:	f10a 32ff 	add.w	r2, sl, #4294967295
 8010328:	f240 73fd 	movw	r3, #2045	; 0x7fd
 801032c:	429a      	cmp	r2, r3
 801032e:	ee10 6a10 	vmov	r6, s0
 8010332:	ee11 0a10 	vmov	r0, s2
 8010336:	b086      	sub	sp, #24
 8010338:	46d4      	mov	ip, sl
 801033a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 801033e:	d806      	bhi.n	801034e <pow+0x3e>
 8010340:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8010344:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8010348:	2b7f      	cmp	r3, #127	; 0x7f
 801034a:	f240 8156 	bls.w	80105fa <pow+0x2ea>
 801034e:	1802      	adds	r2, r0, r0
 8010350:	eb47 0107 	adc.w	r1, r7, r7
 8010354:	f06f 0e01 	mvn.w	lr, #1
 8010358:	f112 39ff 	adds.w	r9, r2, #4294967295
 801035c:	f141 38ff 	adc.w	r8, r1, #4294967295
 8010360:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8010364:	45ce      	cmp	lr, r9
 8010366:	eb73 0808 	sbcs.w	r8, r3, r8
 801036a:	d23f      	bcs.n	80103ec <pow+0xdc>
 801036c:	ea52 0301 	orrs.w	r3, r2, r1
 8010370:	f04f 0300 	mov.w	r3, #0
 8010374:	d10c      	bne.n	8010390 <pow+0x80>
 8010376:	19b6      	adds	r6, r6, r6
 8010378:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 801037c:	4164      	adcs	r4, r4
 801037e:	42b3      	cmp	r3, r6
 8010380:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010384:	41a3      	sbcs	r3, r4
 8010386:	f0c0 808c 	bcc.w	80104a2 <pow+0x192>
 801038a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801038e:	e028      	b.n	80103e2 <pow+0xd2>
 8010390:	4da3      	ldr	r5, [pc, #652]	; (8010620 <pow+0x310>)
 8010392:	42ac      	cmp	r4, r5
 8010394:	bf08      	it	eq
 8010396:	429e      	cmpeq	r6, r3
 8010398:	d107      	bne.n	80103aa <pow+0x9a>
 801039a:	1800      	adds	r0, r0, r0
 801039c:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 80103a0:	417f      	adcs	r7, r7
 80103a2:	4283      	cmp	r3, r0
 80103a4:	4b9f      	ldr	r3, [pc, #636]	; (8010624 <pow+0x314>)
 80103a6:	41bb      	sbcs	r3, r7
 80103a8:	e7ed      	b.n	8010386 <pow+0x76>
 80103aa:	19b6      	adds	r6, r6, r6
 80103ac:	489e      	ldr	r0, [pc, #632]	; (8010628 <pow+0x318>)
 80103ae:	4164      	adcs	r4, r4
 80103b0:	42b3      	cmp	r3, r6
 80103b2:	eb70 0504 	sbcs.w	r5, r0, r4
 80103b6:	d374      	bcc.n	80104a2 <pow+0x192>
 80103b8:	4281      	cmp	r1, r0
 80103ba:	bf08      	it	eq
 80103bc:	429a      	cmpeq	r2, r3
 80103be:	d170      	bne.n	80104a2 <pow+0x192>
 80103c0:	4a9a      	ldr	r2, [pc, #616]	; (801062c <pow+0x31c>)
 80103c2:	4294      	cmp	r4, r2
 80103c4:	bf08      	it	eq
 80103c6:	429e      	cmpeq	r6, r3
 80103c8:	d0df      	beq.n	801038a <pow+0x7a>
 80103ca:	4294      	cmp	r4, r2
 80103cc:	ea6f 0707 	mvn.w	r7, r7
 80103d0:	bf34      	ite	cc
 80103d2:	2400      	movcc	r4, #0
 80103d4:	2401      	movcs	r4, #1
 80103d6:	0fff      	lsrs	r7, r7, #31
 80103d8:	42bc      	cmp	r4, r7
 80103da:	f040 81d9 	bne.w	8010790 <pow+0x480>
 80103de:	ee21 0b01 	vmul.f64	d0, d1, d1
 80103e2:	b006      	add	sp, #24
 80103e4:	ecbd 8b0a 	vpop	{d8-d12}
 80103e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103ec:	eb16 0806 	adds.w	r8, r6, r6
 80103f0:	eb44 0904 	adc.w	r9, r4, r4
 80103f4:	f118 31ff 	adds.w	r1, r8, #4294967295
 80103f8:	f169 0200 	sbc.w	r2, r9, #0
 80103fc:	458e      	cmp	lr, r1
 80103fe:	4193      	sbcs	r3, r2
 8010400:	d223      	bcs.n	801044a <pow+0x13a>
 8010402:	ee20 0b00 	vmul.f64	d0, d0, d0
 8010406:	2c00      	cmp	r4, #0
 8010408:	da12      	bge.n	8010430 <pow+0x120>
 801040a:	4639      	mov	r1, r7
 801040c:	f7ff ff4b 	bl	80102a6 <checkint>
 8010410:	2801      	cmp	r0, #1
 8010412:	d10d      	bne.n	8010430 <pow+0x120>
 8010414:	eeb1 0b40 	vneg.f64	d0, d0
 8010418:	ea58 0309 	orrs.w	r3, r8, r9
 801041c:	d10a      	bne.n	8010434 <pow+0x124>
 801041e:	2f00      	cmp	r7, #0
 8010420:	dadf      	bge.n	80103e2 <pow+0xd2>
 8010422:	b006      	add	sp, #24
 8010424:	ecbd 8b0a 	vpop	{d8-d12}
 8010428:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801042c:	f000 bc74 	b.w	8010d18 <__math_divzero>
 8010430:	2000      	movs	r0, #0
 8010432:	e7f1      	b.n	8010418 <pow+0x108>
 8010434:	2f00      	cmp	r7, #0
 8010436:	dad4      	bge.n	80103e2 <pow+0xd2>
 8010438:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801043c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010440:	ed8d 7b00 	vstr	d7, [sp]
 8010444:	ed9d 0b00 	vldr	d0, [sp]
 8010448:	e7cb      	b.n	80103e2 <pow+0xd2>
 801044a:	2c00      	cmp	r4, #0
 801044c:	da2c      	bge.n	80104a8 <pow+0x198>
 801044e:	4639      	mov	r1, r7
 8010450:	f7ff ff29 	bl	80102a6 <checkint>
 8010454:	b930      	cbnz	r0, 8010464 <pow+0x154>
 8010456:	b006      	add	sp, #24
 8010458:	ecbd 8b0a 	vpop	{d8-d12}
 801045c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010460:	f000 bc72 	b.w	8010d48 <__math_invalid>
 8010464:	2801      	cmp	r0, #1
 8010466:	bf14      	ite	ne
 8010468:	2000      	movne	r0, #0
 801046a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 801046e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010472:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8010476:	f3c5 020a 	ubfx	r2, r5, #0, #11
 801047a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 801047e:	2b7f      	cmp	r3, #127	; 0x7f
 8010480:	d92d      	bls.n	80104de <pow+0x1ce>
 8010482:	4b67      	ldr	r3, [pc, #412]	; (8010620 <pow+0x310>)
 8010484:	2000      	movs	r0, #0
 8010486:	429c      	cmp	r4, r3
 8010488:	bf08      	it	eq
 801048a:	4286      	cmpeq	r6, r0
 801048c:	f43f af7d 	beq.w	801038a <pow+0x7a>
 8010490:	f240 31bd 	movw	r1, #957	; 0x3bd
 8010494:	428a      	cmp	r2, r1
 8010496:	d80c      	bhi.n	80104b2 <pow+0x1a2>
 8010498:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801049c:	42b0      	cmp	r0, r6
 801049e:	41a3      	sbcs	r3, r4
 80104a0:	d204      	bcs.n	80104ac <pow+0x19c>
 80104a2:	ee31 0b00 	vadd.f64	d0, d1, d0
 80104a6:	e79c      	b.n	80103e2 <pow+0xd2>
 80104a8:	2000      	movs	r0, #0
 80104aa:	e7e4      	b.n	8010476 <pow+0x166>
 80104ac:	ee30 0b41 	vsub.f64	d0, d0, d1
 80104b0:	e797      	b.n	80103e2 <pow+0xd2>
 80104b2:	2e01      	cmp	r6, #1
 80104b4:	eb74 0303 	sbcs.w	r3, r4, r3
 80104b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80104bc:	bf34      	ite	cc
 80104be:	2301      	movcc	r3, #1
 80104c0:	2300      	movcs	r3, #0
 80104c2:	4295      	cmp	r5, r2
 80104c4:	bf8c      	ite	hi
 80104c6:	2500      	movhi	r5, #0
 80104c8:	2501      	movls	r5, #1
 80104ca:	42ab      	cmp	r3, r5
 80104cc:	f000 809d 	beq.w	801060a <pow+0x2fa>
 80104d0:	b006      	add	sp, #24
 80104d2:	ecbd 8b0a 	vpop	{d8-d12}
 80104d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104da:	f000 bc15 	b.w	8010d08 <__math_oflow>
 80104de:	f1bc 0f00 	cmp.w	ip, #0
 80104e2:	d10b      	bne.n	80104fc <pow+0x1ec>
 80104e4:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8010618 <pow+0x308>
 80104e8:	ee20 7b07 	vmul.f64	d7, d0, d7
 80104ec:	ec53 2b17 	vmov	r2, r3, d7
 80104f0:	ee17 6a10 	vmov	r6, s14
 80104f4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80104f8:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 80104fc:	4b4c      	ldr	r3, [pc, #304]	; (8010630 <pow+0x320>)
 80104fe:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010502:	4423      	add	r3, r4
 8010504:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8010508:	1519      	asrs	r1, r3, #20
 801050a:	0d1b      	lsrs	r3, r3, #20
 801050c:	051b      	lsls	r3, r3, #20
 801050e:	eba4 0903 	sub.w	r9, r4, r3
 8010512:	4b48      	ldr	r3, [pc, #288]	; (8010634 <pow+0x324>)
 8010514:	ee04 1a10 	vmov	s8, r1
 8010518:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 801051c:	f1b6 0800 	subs.w	r8, r6, #0
 8010520:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8010524:	ec49 8b15 	vmov	d5, r8, r9
 8010528:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 801052c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010530:	ed93 7b00 	vldr	d7, [r3]
 8010534:	ed93 5b02 	vldr	d5, [r3, #8]
 8010538:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 801053c:	eea4 2b07 	vfma.f64	d2, d4, d7
 8010540:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8010544:	ee36 ab02 	vadd.f64	d10, d6, d2
 8010548:	ee32 2b4a 	vsub.f64	d2, d2, d10
 801054c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010550:	ed93 5b04 	vldr	d5, [r3, #16]
 8010554:	ee32 2b06 	vadd.f64	d2, d2, d6
 8010558:	ee37 7b02 	vadd.f64	d7, d7, d2
 801055c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8010560:	ed93 4b08 	vldr	d4, [r3, #32]
 8010564:	ee26 0b05 	vmul.f64	d0, d6, d5
 8010568:	eeb0 9b40 	vmov.f64	d9, d0
 801056c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8010570:	ed93 5b06 	vldr	d5, [r3, #24]
 8010574:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8010578:	ee26 bb00 	vmul.f64	d11, d6, d0
 801057c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8010580:	eea6 5b04 	vfma.f64	d5, d6, d4
 8010584:	ee3a ab48 	vsub.f64	d10, d10, d8
 8010588:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 801058c:	ee37 9b09 	vadd.f64	d9, d7, d9
 8010590:	ee3a ab00 	vadd.f64	d10, d10, d0
 8010594:	eea6 4b03 	vfma.f64	d4, d6, d3
 8010598:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801059c:	ee39 ab0a 	vadd.f64	d10, d9, d10
 80105a0:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80105a4:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80105a8:	eea0 4b03 	vfma.f64	d4, d0, d3
 80105ac:	eea0 5b04 	vfma.f64	d5, d0, d4
 80105b0:	eeab ab05 	vfma.f64	d10, d11, d5
 80105b4:	ee38 6b0a 	vadd.f64	d6, d8, d10
 80105b8:	ee21 7b06 	vmul.f64	d7, d1, d6
 80105bc:	ee17 3a90 	vmov	r3, s15
 80105c0:	eeb0 5b47 	vmov.f64	d5, d7
 80105c4:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80105c8:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80105cc:	18b2      	adds	r2, r6, r2
 80105ce:	2a3e      	cmp	r2, #62	; 0x3e
 80105d0:	ee91 5b06 	vfnms.f64	d5, d1, d6
 80105d4:	ee38 8b46 	vsub.f64	d8, d8, d6
 80105d8:	ee38 ab0a 	vadd.f64	d10, d8, d10
 80105dc:	eea1 5b0a 	vfma.f64	d5, d1, d10
 80105e0:	d92b      	bls.n	801063a <pow+0x32a>
 80105e2:	2a00      	cmp	r2, #0
 80105e4:	da0b      	bge.n	80105fe <pow+0x2ee>
 80105e6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80105ea:	ee37 0b00 	vadd.f64	d0, d7, d0
 80105ee:	2800      	cmp	r0, #0
 80105f0:	f43f aef7 	beq.w	80103e2 <pow+0xd2>
 80105f4:	eeb1 0b40 	vneg.f64	d0, d0
 80105f8:	e6f3      	b.n	80103e2 <pow+0xd2>
 80105fa:	2000      	movs	r0, #0
 80105fc:	e77e      	b.n	80104fc <pow+0x1ec>
 80105fe:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8010602:	d919      	bls.n	8010638 <pow+0x328>
 8010604:	2b00      	cmp	r3, #0
 8010606:	f6bf af63 	bge.w	80104d0 <pow+0x1c0>
 801060a:	b006      	add	sp, #24
 801060c:	ecbd 8b0a 	vpop	{d8-d12}
 8010610:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010614:	f000 bb70 	b.w	8010cf8 <__math_uflow>
 8010618:	00000000 	.word	0x00000000
 801061c:	43300000 	.word	0x43300000
 8010620:	3ff00000 	.word	0x3ff00000
 8010624:	fff00000 	.word	0xfff00000
 8010628:	ffe00000 	.word	0xffe00000
 801062c:	7fe00000 	.word	0x7fe00000
 8010630:	c0196aab 	.word	0xc0196aab
 8010634:	080114b0 	.word	0x080114b0
 8010638:	2600      	movs	r6, #0
 801063a:	495d      	ldr	r1, [pc, #372]	; (80107b0 <pow+0x4a0>)
 801063c:	ed91 4b02 	vldr	d4, [r1, #8]
 8010640:	ed91 3b00 	vldr	d3, [r1]
 8010644:	eeb0 6b44 	vmov.f64	d6, d4
 8010648:	eea7 6b03 	vfma.f64	d6, d7, d3
 801064c:	ee16 5a10 	vmov	r5, s12
 8010650:	ee36 6b44 	vsub.f64	d6, d6, d4
 8010654:	ed91 4b04 	vldr	d4, [r1, #16]
 8010658:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 801065c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8010660:	eeb0 0b47 	vmov.f64	d0, d7
 8010664:	ed91 7b06 	vldr	d7, [r1, #24]
 8010668:	18dc      	adds	r4, r3, r3
 801066a:	f104 030f 	add.w	r3, r4, #15
 801066e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8010672:	eea6 0b07 	vfma.f64	d0, d6, d7
 8010676:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 801067a:	ee35 0b00 	vadd.f64	d0, d5, d0
 801067e:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010682:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8010686:	ed91 5b08 	vldr	d5, [r1, #32]
 801068a:	ee30 7b07 	vadd.f64	d7, d0, d7
 801068e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8010692:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010696:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801069a:	eea6 7b05 	vfma.f64	d7, d6, d5
 801069e:	ee26 6b06 	vmul.f64	d6, d6, d6
 80106a2:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 80106a6:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 80106aa:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80106ae:	eea0 5b04 	vfma.f64	d5, d0, d4
 80106b2:	1940      	adds	r0, r0, r5
 80106b4:	2700      	movs	r7, #0
 80106b6:	eb17 020c 	adds.w	r2, r7, ip
 80106ba:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 80106be:	eea6 7b05 	vfma.f64	d7, d6, d5
 80106c2:	2e00      	cmp	r6, #0
 80106c4:	d15f      	bne.n	8010786 <pow+0x476>
 80106c6:	42bd      	cmp	r5, r7
 80106c8:	db13      	blt.n	80106f2 <pow+0x3e2>
 80106ca:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80106ce:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80106d2:	4610      	mov	r0, r2
 80106d4:	ec41 0b10 	vmov	d0, r0, r1
 80106d8:	eea7 0b00 	vfma.f64	d0, d7, d0
 80106dc:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010798 <pow+0x488>
 80106e0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80106e4:	b006      	add	sp, #24
 80106e6:	ecbd 8b0a 	vpop	{d8-d12}
 80106ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106ee:	f000 bb43 	b.w	8010d78 <__math_check_oflow>
 80106f2:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80106f6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80106fa:	4610      	mov	r0, r2
 80106fc:	ec41 0b15 	vmov	d5, r0, r1
 8010700:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010704:	ee27 6b05 	vmul.f64	d6, d7, d5
 8010708:	ee35 7b06 	vadd.f64	d7, d5, d6
 801070c:	eeb0 3bc7 	vabs.f64	d3, d7
 8010710:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8010714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010718:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80107a0 <pow+0x490>
 801071c:	d52a      	bpl.n	8010774 <pow+0x464>
 801071e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010722:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801072a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 801072e:	ee35 6b06 	vadd.f64	d6, d5, d6
 8010732:	bf48      	it	mi
 8010734:	eeb0 4b43 	vmovmi.f64	d4, d3
 8010738:	ee37 3b04 	vadd.f64	d3, d7, d4
 801073c:	ee34 5b43 	vsub.f64	d5, d4, d3
 8010740:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010744:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010748:	ee37 7b03 	vadd.f64	d7, d7, d3
 801074c:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010750:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010758:	d104      	bne.n	8010764 <pow+0x454>
 801075a:	4632      	mov	r2, r6
 801075c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010760:	ec43 2b17 	vmov	d7, r2, r3
 8010764:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010768:	ed9d 6b02 	vldr	d6, [sp, #8]
 801076c:	ee26 6b00 	vmul.f64	d6, d6, d0
 8010770:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010774:	ee27 0b00 	vmul.f64	d0, d7, d0
 8010778:	b006      	add	sp, #24
 801077a:	ecbd 8b0a 	vpop	{d8-d12}
 801077e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010782:	f000 baf0 	b.w	8010d66 <__math_check_uflow>
 8010786:	ec43 2b10 	vmov	d0, r2, r3
 801078a:	eea7 0b00 	vfma.f64	d0, d7, d0
 801078e:	e628      	b.n	80103e2 <pow+0xd2>
 8010790:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80107a8 <pow+0x498>
 8010794:	e625      	b.n	80103e2 <pow+0xd2>
 8010796:	bf00      	nop
 8010798:	00000000 	.word	0x00000000
 801079c:	7f000000 	.word	0x7f000000
 80107a0:	00000000 	.word	0x00000000
 80107a4:	00100000 	.word	0x00100000
	...
 80107b0:	08012540 	.word	0x08012540
 80107b4:	00000000 	.word	0x00000000

080107b8 <atan>:
 80107b8:	b538      	push	{r3, r4, r5, lr}
 80107ba:	eeb0 7b40 	vmov.f64	d7, d0
 80107be:	ee17 5a90 	vmov	r5, s15
 80107c2:	4b73      	ldr	r3, [pc, #460]	; (8010990 <atan+0x1d8>)
 80107c4:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80107c8:	429c      	cmp	r4, r3
 80107ca:	dd13      	ble.n	80107f4 <atan+0x3c>
 80107cc:	4b71      	ldr	r3, [pc, #452]	; (8010994 <atan+0x1dc>)
 80107ce:	429c      	cmp	r4, r3
 80107d0:	dc03      	bgt.n	80107da <atan+0x22>
 80107d2:	d107      	bne.n	80107e4 <atan+0x2c>
 80107d4:	ee10 3a10 	vmov	r3, s0
 80107d8:	b123      	cbz	r3, 80107e4 <atan+0x2c>
 80107da:	ee37 7b07 	vadd.f64	d7, d7, d7
 80107de:	eeb0 0b47 	vmov.f64	d0, d7
 80107e2:	bd38      	pop	{r3, r4, r5, pc}
 80107e4:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010920 <atan+0x168>
 80107e8:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8010928 <atan+0x170>
 80107ec:	2d00      	cmp	r5, #0
 80107ee:	fe36 7b07 	vselgt.f64	d7, d6, d7
 80107f2:	e7f4      	b.n	80107de <atan+0x26>
 80107f4:	4b68      	ldr	r3, [pc, #416]	; (8010998 <atan+0x1e0>)
 80107f6:	429c      	cmp	r4, r3
 80107f8:	dc11      	bgt.n	801081e <atan+0x66>
 80107fa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80107fe:	429c      	cmp	r4, r3
 8010800:	dc0a      	bgt.n	8010818 <atan+0x60>
 8010802:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8010806:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8010930 <atan+0x178>
 801080a:	ee30 6b06 	vadd.f64	d6, d0, d6
 801080e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010816:	dce2      	bgt.n	80107de <atan+0x26>
 8010818:	f04f 33ff 	mov.w	r3, #4294967295
 801081c:	e013      	b.n	8010846 <atan+0x8e>
 801081e:	f000 f8c5 	bl	80109ac <fabs>
 8010822:	4b5e      	ldr	r3, [pc, #376]	; (801099c <atan+0x1e4>)
 8010824:	429c      	cmp	r4, r3
 8010826:	dc4f      	bgt.n	80108c8 <atan+0x110>
 8010828:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801082c:	429c      	cmp	r4, r3
 801082e:	dc41      	bgt.n	80108b4 <atan+0xfc>
 8010830:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8010834:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010838:	2300      	movs	r3, #0
 801083a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801083e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010842:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010846:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010938 <atan+0x180>
 801084a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801084e:	ee24 5b04 	vmul.f64	d5, d4, d4
 8010852:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8010940 <atan+0x188>
 8010856:	eea5 3b06 	vfma.f64	d3, d5, d6
 801085a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8010948 <atan+0x190>
 801085e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010862:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8010950 <atan+0x198>
 8010866:	eea6 3b05 	vfma.f64	d3, d6, d5
 801086a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8010958 <atan+0x1a0>
 801086e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010872:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8010960 <atan+0x1a8>
 8010876:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8010968 <atan+0x1b0>
 801087a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801087e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010970 <atan+0x1b8>
 8010882:	eea5 2b06 	vfma.f64	d2, d5, d6
 8010886:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010978 <atan+0x1c0>
 801088a:	eea2 6b05 	vfma.f64	d6, d2, d5
 801088e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8010980 <atan+0x1c8>
 8010892:	eea6 2b05 	vfma.f64	d2, d6, d5
 8010896:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010988 <atan+0x1d0>
 801089a:	1c5a      	adds	r2, r3, #1
 801089c:	eea2 6b05 	vfma.f64	d6, d2, d5
 80108a0:	ee26 6b05 	vmul.f64	d6, d6, d5
 80108a4:	eea3 6b04 	vfma.f64	d6, d3, d4
 80108a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80108ac:	d121      	bne.n	80108f2 <atan+0x13a>
 80108ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 80108b2:	e794      	b.n	80107de <atan+0x26>
 80108b4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80108b8:	2301      	movs	r3, #1
 80108ba:	ee30 6b47 	vsub.f64	d6, d0, d7
 80108be:	ee30 0b07 	vadd.f64	d0, d0, d7
 80108c2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80108c6:	e7be      	b.n	8010846 <atan+0x8e>
 80108c8:	4b35      	ldr	r3, [pc, #212]	; (80109a0 <atan+0x1e8>)
 80108ca:	429c      	cmp	r4, r3
 80108cc:	da0b      	bge.n	80108e6 <atan+0x12e>
 80108ce:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80108d2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80108d6:	ee30 5b47 	vsub.f64	d5, d0, d7
 80108da:	eea0 6b07 	vfma.f64	d6, d0, d7
 80108de:	2302      	movs	r3, #2
 80108e0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80108e4:	e7af      	b.n	8010846 <atan+0x8e>
 80108e6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80108ea:	2303      	movs	r3, #3
 80108ec:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80108f0:	e7a9      	b.n	8010846 <atan+0x8e>
 80108f2:	4a2c      	ldr	r2, [pc, #176]	; (80109a4 <atan+0x1ec>)
 80108f4:	492c      	ldr	r1, [pc, #176]	; (80109a8 <atan+0x1f0>)
 80108f6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80108fa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80108fe:	ed93 5b00 	vldr	d5, [r3]
 8010902:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010906:	ee36 7b47 	vsub.f64	d7, d6, d7
 801090a:	ed92 6b00 	vldr	d6, [r2]
 801090e:	2d00      	cmp	r5, #0
 8010910:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010914:	bfb8      	it	lt
 8010916:	eeb1 7b47 	vneglt.f64	d7, d7
 801091a:	e760      	b.n	80107de <atan+0x26>
 801091c:	f3af 8000 	nop.w
 8010920:	54442d18 	.word	0x54442d18
 8010924:	3ff921fb 	.word	0x3ff921fb
 8010928:	54442d18 	.word	0x54442d18
 801092c:	bff921fb 	.word	0xbff921fb
 8010930:	8800759c 	.word	0x8800759c
 8010934:	7e37e43c 	.word	0x7e37e43c
 8010938:	e322da11 	.word	0xe322da11
 801093c:	3f90ad3a 	.word	0x3f90ad3a
 8010940:	24760deb 	.word	0x24760deb
 8010944:	3fa97b4b 	.word	0x3fa97b4b
 8010948:	a0d03d51 	.word	0xa0d03d51
 801094c:	3fb10d66 	.word	0x3fb10d66
 8010950:	c54c206e 	.word	0xc54c206e
 8010954:	3fb745cd 	.word	0x3fb745cd
 8010958:	920083ff 	.word	0x920083ff
 801095c:	3fc24924 	.word	0x3fc24924
 8010960:	5555550d 	.word	0x5555550d
 8010964:	3fd55555 	.word	0x3fd55555
 8010968:	52defd9a 	.word	0x52defd9a
 801096c:	bfadde2d 	.word	0xbfadde2d
 8010970:	2c6a6c2f 	.word	0x2c6a6c2f
 8010974:	bfa2b444 	.word	0xbfa2b444
 8010978:	af749a6d 	.word	0xaf749a6d
 801097c:	bfb3b0f2 	.word	0xbfb3b0f2
 8010980:	fe231671 	.word	0xfe231671
 8010984:	bfbc71c6 	.word	0xbfbc71c6
 8010988:	9998ebc4 	.word	0x9998ebc4
 801098c:	bfc99999 	.word	0xbfc99999
 8010990:	440fffff 	.word	0x440fffff
 8010994:	7ff00000 	.word	0x7ff00000
 8010998:	3fdbffff 	.word	0x3fdbffff
 801099c:	3ff2ffff 	.word	0x3ff2ffff
 80109a0:	40038000 	.word	0x40038000
 80109a4:	080124f8 	.word	0x080124f8
 80109a8:	08012518 	.word	0x08012518

080109ac <fabs>:
 80109ac:	ec51 0b10 	vmov	r0, r1, d0
 80109b0:	ee10 2a10 	vmov	r2, s0
 80109b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80109b8:	ec43 2b10 	vmov	d0, r2, r3
 80109bc:	4770      	bx	lr
	...

080109c0 <acos>:
 80109c0:	b508      	push	{r3, lr}
 80109c2:	ed2d 8b04 	vpush	{d8-d9}
 80109c6:	eeb0 8b40 	vmov.f64	d8, d0
 80109ca:	f000 f845 	bl	8010a58 <__ieee754_acos>
 80109ce:	eeb4 8b48 	vcmp.f64	d8, d8
 80109d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109d6:	eeb0 9b40 	vmov.f64	d9, d0
 80109da:	d615      	bvs.n	8010a08 <acos+0x48>
 80109dc:	eeb0 0b48 	vmov.f64	d0, d8
 80109e0:	f7ff ffe4 	bl	80109ac <fabs>
 80109e4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80109e8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80109ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109f0:	dd0a      	ble.n	8010a08 <acos+0x48>
 80109f2:	f000 f9e5 	bl	8010dc0 <__errno>
 80109f6:	ecbd 8b04 	vpop	{d8-d9}
 80109fa:	2321      	movs	r3, #33	; 0x21
 80109fc:	6003      	str	r3, [r0, #0]
 80109fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010a02:	4804      	ldr	r0, [pc, #16]	; (8010a14 <acos+0x54>)
 8010a04:	f000 b9cc 	b.w	8010da0 <nan>
 8010a08:	eeb0 0b49 	vmov.f64	d0, d9
 8010a0c:	ecbd 8b04 	vpop	{d8-d9}
 8010a10:	bd08      	pop	{r3, pc}
 8010a12:	bf00      	nop
 8010a14:	08012538 	.word	0x08012538

08010a18 <sqrt>:
 8010a18:	b508      	push	{r3, lr}
 8010a1a:	ed2d 8b04 	vpush	{d8-d9}
 8010a1e:	eeb0 8b40 	vmov.f64	d8, d0
 8010a22:	f000 f947 	bl	8010cb4 <__ieee754_sqrt>
 8010a26:	eeb4 8b48 	vcmp.f64	d8, d8
 8010a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a2e:	d60c      	bvs.n	8010a4a <sqrt+0x32>
 8010a30:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8010a50 <sqrt+0x38>
 8010a34:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a3c:	d505      	bpl.n	8010a4a <sqrt+0x32>
 8010a3e:	f000 f9bf 	bl	8010dc0 <__errno>
 8010a42:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8010a46:	2321      	movs	r3, #33	; 0x21
 8010a48:	6003      	str	r3, [r0, #0]
 8010a4a:	ecbd 8b04 	vpop	{d8-d9}
 8010a4e:	bd08      	pop	{r3, pc}
	...

08010a58 <__ieee754_acos>:
 8010a58:	b500      	push	{lr}
 8010a5a:	ee10 2a90 	vmov	r2, s1
 8010a5e:	ed2d 8b10 	vpush	{d8-d15}
 8010a62:	4991      	ldr	r1, [pc, #580]	; (8010ca8 <__ieee754_acos+0x250>)
 8010a64:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8010a68:	428b      	cmp	r3, r1
 8010a6a:	b087      	sub	sp, #28
 8010a6c:	dd18      	ble.n	8010aa0 <__ieee754_acos+0x48>
 8010a6e:	ee10 1a10 	vmov	r1, s0
 8010a72:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8010a76:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010a7a:	430b      	orrs	r3, r1
 8010a7c:	d10b      	bne.n	8010a96 <__ieee754_acos+0x3e>
 8010a7e:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 8010c30 <__ieee754_acos+0x1d8>
 8010a82:	ed9f 7b6d 	vldr	d7, [pc, #436]	; 8010c38 <__ieee754_acos+0x1e0>
 8010a86:	2a00      	cmp	r2, #0
 8010a88:	fe30 0b07 	vselgt.f64	d0, d0, d7
 8010a8c:	b007      	add	sp, #28
 8010a8e:	ecbd 8b10 	vpop	{d8-d15}
 8010a92:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a96:	ee30 8b40 	vsub.f64	d8, d0, d0
 8010a9a:	ee88 0b08 	vdiv.f64	d0, d8, d8
 8010a9e:	e7f5      	b.n	8010a8c <__ieee754_acos+0x34>
 8010aa0:	4982      	ldr	r1, [pc, #520]	; (8010cac <__ieee754_acos+0x254>)
 8010aa2:	428b      	cmp	r3, r1
 8010aa4:	dc3c      	bgt.n	8010b20 <__ieee754_acos+0xc8>
 8010aa6:	4a82      	ldr	r2, [pc, #520]	; (8010cb0 <__ieee754_acos+0x258>)
 8010aa8:	4293      	cmp	r3, r2
 8010aaa:	ed9f 7b65 	vldr	d7, [pc, #404]	; 8010c40 <__ieee754_acos+0x1e8>
 8010aae:	f340 80bc 	ble.w	8010c2a <__ieee754_acos+0x1d2>
 8010ab2:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010ab6:	ed9f 4b64 	vldr	d4, [pc, #400]	; 8010c48 <__ieee754_acos+0x1f0>
 8010aba:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8010c50 <__ieee754_acos+0x1f8>
 8010abe:	eea6 5b04 	vfma.f64	d5, d6, d4
 8010ac2:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8010c58 <__ieee754_acos+0x200>
 8010ac6:	eea5 4b06 	vfma.f64	d4, d5, d6
 8010aca:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8010c60 <__ieee754_acos+0x208>
 8010ace:	eea4 5b06 	vfma.f64	d5, d4, d6
 8010ad2:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8010c68 <__ieee754_acos+0x210>
 8010ad6:	eea5 4b06 	vfma.f64	d4, d5, d6
 8010ada:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8010c70 <__ieee754_acos+0x218>
 8010ade:	ed9f 3b66 	vldr	d3, [pc, #408]	; 8010c78 <__ieee754_acos+0x220>
 8010ae2:	eea4 5b06 	vfma.f64	d5, d4, d6
 8010ae6:	ee25 5b06 	vmul.f64	d5, d5, d6
 8010aea:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8010c80 <__ieee754_acos+0x228>
 8010aee:	eea6 3b04 	vfma.f64	d3, d6, d4
 8010af2:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8010c88 <__ieee754_acos+0x230>
 8010af6:	ed9f 8b66 	vldr	d8, [pc, #408]	; 8010c90 <__ieee754_acos+0x238>
 8010afa:	eea3 4b06 	vfma.f64	d4, d3, d6
 8010afe:	ed9f 3b66 	vldr	d3, [pc, #408]	; 8010c98 <__ieee754_acos+0x240>
 8010b02:	eea4 3b06 	vfma.f64	d3, d4, d6
 8010b06:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010b0a:	eea3 4b06 	vfma.f64	d4, d3, d6
 8010b0e:	ee85 6b04 	vdiv.f64	d6, d5, d4
 8010b12:	eea0 8b46 	vfms.f64	d8, d0, d6
 8010b16:	ee30 0b48 	vsub.f64	d0, d0, d8
 8010b1a:	ee37 0b40 	vsub.f64	d0, d7, d0
 8010b1e:	e7b5      	b.n	8010a8c <__ieee754_acos+0x34>
 8010b20:	2a00      	cmp	r2, #0
 8010b22:	ed9f eb49 	vldr	d14, [pc, #292]	; 8010c48 <__ieee754_acos+0x1f0>
 8010b26:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8010b2a:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8010b2e:	ed9f db48 	vldr	d13, [pc, #288]	; 8010c50 <__ieee754_acos+0x1f8>
 8010b32:	ed9f cb49 	vldr	d12, [pc, #292]	; 8010c58 <__ieee754_acos+0x200>
 8010b36:	ed9f bb4a 	vldr	d11, [pc, #296]	; 8010c60 <__ieee754_acos+0x208>
 8010b3a:	ed9f ab4b 	vldr	d10, [pc, #300]	; 8010c68 <__ieee754_acos+0x210>
 8010b3e:	ed9f fb4c 	vldr	d15, [pc, #304]	; 8010c70 <__ieee754_acos+0x218>
 8010b42:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8010c78 <__ieee754_acos+0x220>
 8010b46:	ed9f 2b50 	vldr	d2, [pc, #320]	; 8010c88 <__ieee754_acos+0x230>
 8010b4a:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8010c98 <__ieee754_acos+0x240>
 8010b4e:	da2a      	bge.n	8010ba6 <__ieee754_acos+0x14e>
 8010b50:	ee30 0b09 	vadd.f64	d0, d0, d9
 8010b54:	ee20 0b08 	vmul.f64	d0, d0, d8
 8010b58:	ed9f 7b49 	vldr	d7, [pc, #292]	; 8010c80 <__ieee754_acos+0x228>
 8010b5c:	eea0 db0e 	vfma.f64	d13, d0, d14
 8010b60:	eead cb00 	vfma.f64	d12, d13, d0
 8010b64:	eea0 3b07 	vfma.f64	d3, d0, d7
 8010b68:	eeac bb00 	vfma.f64	d11, d12, d0
 8010b6c:	eea3 2b00 	vfma.f64	d2, d3, d0
 8010b70:	eeab ab00 	vfma.f64	d10, d11, d0
 8010b74:	eea2 1b00 	vfma.f64	d1, d2, d0
 8010b78:	eeaa fb00 	vfma.f64	d15, d10, d0
 8010b7c:	eea1 9b00 	vfma.f64	d9, d1, d0
 8010b80:	ee2f fb00 	vmul.f64	d15, d15, d0
 8010b84:	f000 f896 	bl	8010cb4 <__ieee754_sqrt>
 8010b88:	ee8f 6b09 	vdiv.f64	d6, d15, d9
 8010b8c:	ed9f 7b44 	vldr	d7, [pc, #272]	; 8010ca0 <__ieee754_acos+0x248>
 8010b90:	eea0 7b06 	vfma.f64	d7, d0, d6
 8010b94:	ee37 7b00 	vadd.f64	d7, d7, d0
 8010b98:	ed9f 0b27 	vldr	d0, [pc, #156]	; 8010c38 <__ieee754_acos+0x1e0>
 8010b9c:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8010ba0:	eea7 0b46 	vfms.f64	d0, d7, d6
 8010ba4:	e772      	b.n	8010a8c <__ieee754_acos+0x34>
 8010ba6:	ee39 0b40 	vsub.f64	d0, d9, d0
 8010baa:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010bae:	eeb0 0b48 	vmov.f64	d0, d8
 8010bb2:	ed8d 1b04 	vstr	d1, [sp, #16]
 8010bb6:	ed8d 2b02 	vstr	d2, [sp, #8]
 8010bba:	ed8d 3b00 	vstr	d3, [sp]
 8010bbe:	f000 f879 	bl	8010cb4 <__ieee754_sqrt>
 8010bc2:	eeb0 5b48 	vmov.f64	d5, d8
 8010bc6:	eea8 db0e 	vfma.f64	d13, d8, d14
 8010bca:	ec53 2b10 	vmov	r2, r3, d0
 8010bce:	eead cb08 	vfma.f64	d12, d13, d8
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	ec43 2b17 	vmov	d7, r2, r3
 8010bd8:	eeac bb08 	vfma.f64	d11, d12, d8
 8010bdc:	ee30 6b07 	vadd.f64	d6, d0, d7
 8010be0:	eea7 5b47 	vfms.f64	d5, d7, d7
 8010be4:	ed9d 3b00 	vldr	d3, [sp]
 8010be8:	ee85 4b06 	vdiv.f64	d4, d5, d6
 8010bec:	eeab ab08 	vfma.f64	d10, d11, d8
 8010bf0:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8010c80 <__ieee754_acos+0x228>
 8010bf4:	eeaa fb08 	vfma.f64	d15, d10, d8
 8010bf8:	ee2f fb08 	vmul.f64	d15, d15, d8
 8010bfc:	ed9d 2b02 	vldr	d2, [sp, #8]
 8010c00:	eea8 3b06 	vfma.f64	d3, d8, d6
 8010c04:	eeb0 6b44 	vmov.f64	d6, d4
 8010c08:	ed9d 1b04 	vldr	d1, [sp, #16]
 8010c0c:	eea3 2b08 	vfma.f64	d2, d3, d8
 8010c10:	eea2 1b08 	vfma.f64	d1, d2, d8
 8010c14:	eea1 9b08 	vfma.f64	d9, d1, d8
 8010c18:	ee8f 5b09 	vdiv.f64	d5, d15, d9
 8010c1c:	eea0 6b05 	vfma.f64	d6, d0, d5
 8010c20:	ee37 0b06 	vadd.f64	d0, d7, d6
 8010c24:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010c28:	e730      	b.n	8010a8c <__ieee754_acos+0x34>
 8010c2a:	eeb0 0b47 	vmov.f64	d0, d7
 8010c2e:	e72d      	b.n	8010a8c <__ieee754_acos+0x34>
	...
 8010c38:	54442d18 	.word	0x54442d18
 8010c3c:	400921fb 	.word	0x400921fb
 8010c40:	54442d18 	.word	0x54442d18
 8010c44:	3ff921fb 	.word	0x3ff921fb
 8010c48:	0dfdf709 	.word	0x0dfdf709
 8010c4c:	3f023de1 	.word	0x3f023de1
 8010c50:	7501b288 	.word	0x7501b288
 8010c54:	3f49efe0 	.word	0x3f49efe0
 8010c58:	b5688f3b 	.word	0xb5688f3b
 8010c5c:	bfa48228 	.word	0xbfa48228
 8010c60:	0e884455 	.word	0x0e884455
 8010c64:	3fc9c155 	.word	0x3fc9c155
 8010c68:	03eb6f7d 	.word	0x03eb6f7d
 8010c6c:	bfd4d612 	.word	0xbfd4d612
 8010c70:	55555555 	.word	0x55555555
 8010c74:	3fc55555 	.word	0x3fc55555
 8010c78:	1b8d0159 	.word	0x1b8d0159
 8010c7c:	bfe6066c 	.word	0xbfe6066c
 8010c80:	b12e9282 	.word	0xb12e9282
 8010c84:	3fb3b8c5 	.word	0x3fb3b8c5
 8010c88:	9c598ac8 	.word	0x9c598ac8
 8010c8c:	40002ae5 	.word	0x40002ae5
 8010c90:	33145c07 	.word	0x33145c07
 8010c94:	3c91a626 	.word	0x3c91a626
 8010c98:	1c8a2d4b 	.word	0x1c8a2d4b
 8010c9c:	c0033a27 	.word	0xc0033a27
 8010ca0:	33145c07 	.word	0x33145c07
 8010ca4:	bc91a626 	.word	0xbc91a626
 8010ca8:	3fefffff 	.word	0x3fefffff
 8010cac:	3fdfffff 	.word	0x3fdfffff
 8010cb0:	3c600000 	.word	0x3c600000

08010cb4 <__ieee754_sqrt>:
 8010cb4:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8010cb8:	4770      	bx	lr

08010cba <with_errno>:
 8010cba:	b513      	push	{r0, r1, r4, lr}
 8010cbc:	4604      	mov	r4, r0
 8010cbe:	ed8d 0b00 	vstr	d0, [sp]
 8010cc2:	f000 f87d 	bl	8010dc0 <__errno>
 8010cc6:	ed9d 0b00 	vldr	d0, [sp]
 8010cca:	6004      	str	r4, [r0, #0]
 8010ccc:	b002      	add	sp, #8
 8010cce:	bd10      	pop	{r4, pc}

08010cd0 <xflow>:
 8010cd0:	b082      	sub	sp, #8
 8010cd2:	b158      	cbz	r0, 8010cec <xflow+0x1c>
 8010cd4:	eeb1 7b40 	vneg.f64	d7, d0
 8010cd8:	ed8d 7b00 	vstr	d7, [sp]
 8010cdc:	ed9d 7b00 	vldr	d7, [sp]
 8010ce0:	2022      	movs	r0, #34	; 0x22
 8010ce2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010ce6:	b002      	add	sp, #8
 8010ce8:	f7ff bfe7 	b.w	8010cba <with_errno>
 8010cec:	eeb0 7b40 	vmov.f64	d7, d0
 8010cf0:	e7f2      	b.n	8010cd8 <xflow+0x8>
 8010cf2:	0000      	movs	r0, r0
 8010cf4:	0000      	movs	r0, r0
	...

08010cf8 <__math_uflow>:
 8010cf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010d00 <__math_uflow+0x8>
 8010cfc:	f7ff bfe8 	b.w	8010cd0 <xflow>
 8010d00:	00000000 	.word	0x00000000
 8010d04:	10000000 	.word	0x10000000

08010d08 <__math_oflow>:
 8010d08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010d10 <__math_oflow+0x8>
 8010d0c:	f7ff bfe0 	b.w	8010cd0 <xflow>
 8010d10:	00000000 	.word	0x00000000
 8010d14:	70000000 	.word	0x70000000

08010d18 <__math_divzero>:
 8010d18:	b082      	sub	sp, #8
 8010d1a:	2800      	cmp	r0, #0
 8010d1c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010d20:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8010d24:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8010d28:	ed8d 7b00 	vstr	d7, [sp]
 8010d2c:	ed9d 0b00 	vldr	d0, [sp]
 8010d30:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8010d40 <__math_divzero+0x28>
 8010d34:	2022      	movs	r0, #34	; 0x22
 8010d36:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8010d3a:	b002      	add	sp, #8
 8010d3c:	f7ff bfbd 	b.w	8010cba <with_errno>
	...

08010d48 <__math_invalid>:
 8010d48:	eeb0 7b40 	vmov.f64	d7, d0
 8010d4c:	eeb4 7b47 	vcmp.f64	d7, d7
 8010d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d54:	ee30 6b40 	vsub.f64	d6, d0, d0
 8010d58:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8010d5c:	d602      	bvs.n	8010d64 <__math_invalid+0x1c>
 8010d5e:	2021      	movs	r0, #33	; 0x21
 8010d60:	f7ff bfab 	b.w	8010cba <with_errno>
 8010d64:	4770      	bx	lr

08010d66 <__math_check_uflow>:
 8010d66:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8010d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d6e:	d102      	bne.n	8010d76 <__math_check_uflow+0x10>
 8010d70:	2022      	movs	r0, #34	; 0x22
 8010d72:	f7ff bfa2 	b.w	8010cba <with_errno>
 8010d76:	4770      	bx	lr

08010d78 <__math_check_oflow>:
 8010d78:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8010d98 <__math_check_oflow+0x20>
 8010d7c:	eeb0 7bc0 	vabs.f64	d7, d0
 8010d80:	eeb4 7b46 	vcmp.f64	d7, d6
 8010d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d88:	dd02      	ble.n	8010d90 <__math_check_oflow+0x18>
 8010d8a:	2022      	movs	r0, #34	; 0x22
 8010d8c:	f7ff bf95 	b.w	8010cba <with_errno>
 8010d90:	4770      	bx	lr
 8010d92:	bf00      	nop
 8010d94:	f3af 8000 	nop.w
 8010d98:	ffffffff 	.word	0xffffffff
 8010d9c:	7fefffff 	.word	0x7fefffff

08010da0 <nan>:
 8010da0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010da8 <nan+0x8>
 8010da4:	4770      	bx	lr
 8010da6:	bf00      	nop
 8010da8:	00000000 	.word	0x00000000
 8010dac:	7ff80000 	.word	0x7ff80000

08010db0 <abort>:
 8010db0:	b508      	push	{r3, lr}
 8010db2:	2006      	movs	r0, #6
 8010db4:	f000 f874 	bl	8010ea0 <raise>
 8010db8:	2001      	movs	r0, #1
 8010dba:	f7f5 fbe7 	bl	800658c <_exit>
	...

08010dc0 <__errno>:
 8010dc0:	4b01      	ldr	r3, [pc, #4]	; (8010dc8 <__errno+0x8>)
 8010dc2:	6818      	ldr	r0, [r3, #0]
 8010dc4:	4770      	bx	lr
 8010dc6:	bf00      	nop
 8010dc8:	24000018 	.word	0x24000018

08010dcc <__libc_init_array>:
 8010dcc:	b570      	push	{r4, r5, r6, lr}
 8010dce:	4d0d      	ldr	r5, [pc, #52]	; (8010e04 <__libc_init_array+0x38>)
 8010dd0:	4c0d      	ldr	r4, [pc, #52]	; (8010e08 <__libc_init_array+0x3c>)
 8010dd2:	1b64      	subs	r4, r4, r5
 8010dd4:	10a4      	asrs	r4, r4, #2
 8010dd6:	2600      	movs	r6, #0
 8010dd8:	42a6      	cmp	r6, r4
 8010dda:	d109      	bne.n	8010df0 <__libc_init_array+0x24>
 8010ddc:	4d0b      	ldr	r5, [pc, #44]	; (8010e0c <__libc_init_array+0x40>)
 8010dde:	4c0c      	ldr	r4, [pc, #48]	; (8010e10 <__libc_init_array+0x44>)
 8010de0:	f000 f9b0 	bl	8011144 <_init>
 8010de4:	1b64      	subs	r4, r4, r5
 8010de6:	10a4      	asrs	r4, r4, #2
 8010de8:	2600      	movs	r6, #0
 8010dea:	42a6      	cmp	r6, r4
 8010dec:	d105      	bne.n	8010dfa <__libc_init_array+0x2e>
 8010dee:	bd70      	pop	{r4, r5, r6, pc}
 8010df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8010df4:	4798      	blx	r3
 8010df6:	3601      	adds	r6, #1
 8010df8:	e7ee      	b.n	8010dd8 <__libc_init_array+0xc>
 8010dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8010dfe:	4798      	blx	r3
 8010e00:	3601      	adds	r6, #1
 8010e02:	e7f2      	b.n	8010dea <__libc_init_array+0x1e>
 8010e04:	08012db8 	.word	0x08012db8
 8010e08:	08012db8 	.word	0x08012db8
 8010e0c:	08012db8 	.word	0x08012db8
 8010e10:	08012dcc 	.word	0x08012dcc

08010e14 <memcpy>:
 8010e14:	440a      	add	r2, r1
 8010e16:	4291      	cmp	r1, r2
 8010e18:	f100 33ff 	add.w	r3, r0, #4294967295
 8010e1c:	d100      	bne.n	8010e20 <memcpy+0xc>
 8010e1e:	4770      	bx	lr
 8010e20:	b510      	push	{r4, lr}
 8010e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e2a:	4291      	cmp	r1, r2
 8010e2c:	d1f9      	bne.n	8010e22 <memcpy+0xe>
 8010e2e:	bd10      	pop	{r4, pc}

08010e30 <memset>:
 8010e30:	4402      	add	r2, r0
 8010e32:	4603      	mov	r3, r0
 8010e34:	4293      	cmp	r3, r2
 8010e36:	d100      	bne.n	8010e3a <memset+0xa>
 8010e38:	4770      	bx	lr
 8010e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8010e3e:	e7f9      	b.n	8010e34 <memset+0x4>

08010e40 <realloc>:
 8010e40:	4b02      	ldr	r3, [pc, #8]	; (8010e4c <realloc+0xc>)
 8010e42:	460a      	mov	r2, r1
 8010e44:	4601      	mov	r1, r0
 8010e46:	6818      	ldr	r0, [r3, #0]
 8010e48:	f000 b8da 	b.w	8011000 <_realloc_r>
 8010e4c:	24000018 	.word	0x24000018

08010e50 <_raise_r>:
 8010e50:	291f      	cmp	r1, #31
 8010e52:	b538      	push	{r3, r4, r5, lr}
 8010e54:	4604      	mov	r4, r0
 8010e56:	460d      	mov	r5, r1
 8010e58:	d904      	bls.n	8010e64 <_raise_r+0x14>
 8010e5a:	2316      	movs	r3, #22
 8010e5c:	6003      	str	r3, [r0, #0]
 8010e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8010e62:	bd38      	pop	{r3, r4, r5, pc}
 8010e64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010e66:	b112      	cbz	r2, 8010e6e <_raise_r+0x1e>
 8010e68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e6c:	b94b      	cbnz	r3, 8010e82 <_raise_r+0x32>
 8010e6e:	4620      	mov	r0, r4
 8010e70:	f000 f830 	bl	8010ed4 <_getpid_r>
 8010e74:	462a      	mov	r2, r5
 8010e76:	4601      	mov	r1, r0
 8010e78:	4620      	mov	r0, r4
 8010e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e7e:	f000 b817 	b.w	8010eb0 <_kill_r>
 8010e82:	2b01      	cmp	r3, #1
 8010e84:	d00a      	beq.n	8010e9c <_raise_r+0x4c>
 8010e86:	1c59      	adds	r1, r3, #1
 8010e88:	d103      	bne.n	8010e92 <_raise_r+0x42>
 8010e8a:	2316      	movs	r3, #22
 8010e8c:	6003      	str	r3, [r0, #0]
 8010e8e:	2001      	movs	r0, #1
 8010e90:	e7e7      	b.n	8010e62 <_raise_r+0x12>
 8010e92:	2400      	movs	r4, #0
 8010e94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010e98:	4628      	mov	r0, r5
 8010e9a:	4798      	blx	r3
 8010e9c:	2000      	movs	r0, #0
 8010e9e:	e7e0      	b.n	8010e62 <_raise_r+0x12>

08010ea0 <raise>:
 8010ea0:	4b02      	ldr	r3, [pc, #8]	; (8010eac <raise+0xc>)
 8010ea2:	4601      	mov	r1, r0
 8010ea4:	6818      	ldr	r0, [r3, #0]
 8010ea6:	f7ff bfd3 	b.w	8010e50 <_raise_r>
 8010eaa:	bf00      	nop
 8010eac:	24000018 	.word	0x24000018

08010eb0 <_kill_r>:
 8010eb0:	b538      	push	{r3, r4, r5, lr}
 8010eb2:	4d07      	ldr	r5, [pc, #28]	; (8010ed0 <_kill_r+0x20>)
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	4604      	mov	r4, r0
 8010eb8:	4608      	mov	r0, r1
 8010eba:	4611      	mov	r1, r2
 8010ebc:	602b      	str	r3, [r5, #0]
 8010ebe:	f7f5 fb55 	bl	800656c <_kill>
 8010ec2:	1c43      	adds	r3, r0, #1
 8010ec4:	d102      	bne.n	8010ecc <_kill_r+0x1c>
 8010ec6:	682b      	ldr	r3, [r5, #0]
 8010ec8:	b103      	cbz	r3, 8010ecc <_kill_r+0x1c>
 8010eca:	6023      	str	r3, [r4, #0]
 8010ecc:	bd38      	pop	{r3, r4, r5, pc}
 8010ece:	bf00      	nop
 8010ed0:	24001b18 	.word	0x24001b18

08010ed4 <_getpid_r>:
 8010ed4:	f7f5 bb42 	b.w	800655c <_getpid>

08010ed8 <sbrk_aligned>:
 8010ed8:	b570      	push	{r4, r5, r6, lr}
 8010eda:	4e0e      	ldr	r6, [pc, #56]	; (8010f14 <sbrk_aligned+0x3c>)
 8010edc:	460c      	mov	r4, r1
 8010ede:	6831      	ldr	r1, [r6, #0]
 8010ee0:	4605      	mov	r5, r0
 8010ee2:	b911      	cbnz	r1, 8010eea <sbrk_aligned+0x12>
 8010ee4:	f000 f8bc 	bl	8011060 <_sbrk_r>
 8010ee8:	6030      	str	r0, [r6, #0]
 8010eea:	4621      	mov	r1, r4
 8010eec:	4628      	mov	r0, r5
 8010eee:	f000 f8b7 	bl	8011060 <_sbrk_r>
 8010ef2:	1c43      	adds	r3, r0, #1
 8010ef4:	d00a      	beq.n	8010f0c <sbrk_aligned+0x34>
 8010ef6:	1cc4      	adds	r4, r0, #3
 8010ef8:	f024 0403 	bic.w	r4, r4, #3
 8010efc:	42a0      	cmp	r0, r4
 8010efe:	d007      	beq.n	8010f10 <sbrk_aligned+0x38>
 8010f00:	1a21      	subs	r1, r4, r0
 8010f02:	4628      	mov	r0, r5
 8010f04:	f000 f8ac 	bl	8011060 <_sbrk_r>
 8010f08:	3001      	adds	r0, #1
 8010f0a:	d101      	bne.n	8010f10 <sbrk_aligned+0x38>
 8010f0c:	f04f 34ff 	mov.w	r4, #4294967295
 8010f10:	4620      	mov	r0, r4
 8010f12:	bd70      	pop	{r4, r5, r6, pc}
 8010f14:	24001b14 	.word	0x24001b14

08010f18 <_malloc_r>:
 8010f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f1c:	1ccd      	adds	r5, r1, #3
 8010f1e:	f025 0503 	bic.w	r5, r5, #3
 8010f22:	3508      	adds	r5, #8
 8010f24:	2d0c      	cmp	r5, #12
 8010f26:	bf38      	it	cc
 8010f28:	250c      	movcc	r5, #12
 8010f2a:	2d00      	cmp	r5, #0
 8010f2c:	4607      	mov	r7, r0
 8010f2e:	db01      	blt.n	8010f34 <_malloc_r+0x1c>
 8010f30:	42a9      	cmp	r1, r5
 8010f32:	d905      	bls.n	8010f40 <_malloc_r+0x28>
 8010f34:	230c      	movs	r3, #12
 8010f36:	603b      	str	r3, [r7, #0]
 8010f38:	2600      	movs	r6, #0
 8010f3a:	4630      	mov	r0, r6
 8010f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f40:	4e2e      	ldr	r6, [pc, #184]	; (8010ffc <_malloc_r+0xe4>)
 8010f42:	f000 f89d 	bl	8011080 <__malloc_lock>
 8010f46:	6833      	ldr	r3, [r6, #0]
 8010f48:	461c      	mov	r4, r3
 8010f4a:	bb34      	cbnz	r4, 8010f9a <_malloc_r+0x82>
 8010f4c:	4629      	mov	r1, r5
 8010f4e:	4638      	mov	r0, r7
 8010f50:	f7ff ffc2 	bl	8010ed8 <sbrk_aligned>
 8010f54:	1c43      	adds	r3, r0, #1
 8010f56:	4604      	mov	r4, r0
 8010f58:	d14d      	bne.n	8010ff6 <_malloc_r+0xde>
 8010f5a:	6834      	ldr	r4, [r6, #0]
 8010f5c:	4626      	mov	r6, r4
 8010f5e:	2e00      	cmp	r6, #0
 8010f60:	d140      	bne.n	8010fe4 <_malloc_r+0xcc>
 8010f62:	6823      	ldr	r3, [r4, #0]
 8010f64:	4631      	mov	r1, r6
 8010f66:	4638      	mov	r0, r7
 8010f68:	eb04 0803 	add.w	r8, r4, r3
 8010f6c:	f000 f878 	bl	8011060 <_sbrk_r>
 8010f70:	4580      	cmp	r8, r0
 8010f72:	d13a      	bne.n	8010fea <_malloc_r+0xd2>
 8010f74:	6821      	ldr	r1, [r4, #0]
 8010f76:	3503      	adds	r5, #3
 8010f78:	1a6d      	subs	r5, r5, r1
 8010f7a:	f025 0503 	bic.w	r5, r5, #3
 8010f7e:	3508      	adds	r5, #8
 8010f80:	2d0c      	cmp	r5, #12
 8010f82:	bf38      	it	cc
 8010f84:	250c      	movcc	r5, #12
 8010f86:	4629      	mov	r1, r5
 8010f88:	4638      	mov	r0, r7
 8010f8a:	f7ff ffa5 	bl	8010ed8 <sbrk_aligned>
 8010f8e:	3001      	adds	r0, #1
 8010f90:	d02b      	beq.n	8010fea <_malloc_r+0xd2>
 8010f92:	6823      	ldr	r3, [r4, #0]
 8010f94:	442b      	add	r3, r5
 8010f96:	6023      	str	r3, [r4, #0]
 8010f98:	e00e      	b.n	8010fb8 <_malloc_r+0xa0>
 8010f9a:	6822      	ldr	r2, [r4, #0]
 8010f9c:	1b52      	subs	r2, r2, r5
 8010f9e:	d41e      	bmi.n	8010fde <_malloc_r+0xc6>
 8010fa0:	2a0b      	cmp	r2, #11
 8010fa2:	d916      	bls.n	8010fd2 <_malloc_r+0xba>
 8010fa4:	1961      	adds	r1, r4, r5
 8010fa6:	42a3      	cmp	r3, r4
 8010fa8:	6025      	str	r5, [r4, #0]
 8010faa:	bf18      	it	ne
 8010fac:	6059      	strne	r1, [r3, #4]
 8010fae:	6863      	ldr	r3, [r4, #4]
 8010fb0:	bf08      	it	eq
 8010fb2:	6031      	streq	r1, [r6, #0]
 8010fb4:	5162      	str	r2, [r4, r5]
 8010fb6:	604b      	str	r3, [r1, #4]
 8010fb8:	4638      	mov	r0, r7
 8010fba:	f104 060b 	add.w	r6, r4, #11
 8010fbe:	f000 f865 	bl	801108c <__malloc_unlock>
 8010fc2:	f026 0607 	bic.w	r6, r6, #7
 8010fc6:	1d23      	adds	r3, r4, #4
 8010fc8:	1af2      	subs	r2, r6, r3
 8010fca:	d0b6      	beq.n	8010f3a <_malloc_r+0x22>
 8010fcc:	1b9b      	subs	r3, r3, r6
 8010fce:	50a3      	str	r3, [r4, r2]
 8010fd0:	e7b3      	b.n	8010f3a <_malloc_r+0x22>
 8010fd2:	6862      	ldr	r2, [r4, #4]
 8010fd4:	42a3      	cmp	r3, r4
 8010fd6:	bf0c      	ite	eq
 8010fd8:	6032      	streq	r2, [r6, #0]
 8010fda:	605a      	strne	r2, [r3, #4]
 8010fdc:	e7ec      	b.n	8010fb8 <_malloc_r+0xa0>
 8010fde:	4623      	mov	r3, r4
 8010fe0:	6864      	ldr	r4, [r4, #4]
 8010fe2:	e7b2      	b.n	8010f4a <_malloc_r+0x32>
 8010fe4:	4634      	mov	r4, r6
 8010fe6:	6876      	ldr	r6, [r6, #4]
 8010fe8:	e7b9      	b.n	8010f5e <_malloc_r+0x46>
 8010fea:	230c      	movs	r3, #12
 8010fec:	603b      	str	r3, [r7, #0]
 8010fee:	4638      	mov	r0, r7
 8010ff0:	f000 f84c 	bl	801108c <__malloc_unlock>
 8010ff4:	e7a1      	b.n	8010f3a <_malloc_r+0x22>
 8010ff6:	6025      	str	r5, [r4, #0]
 8010ff8:	e7de      	b.n	8010fb8 <_malloc_r+0xa0>
 8010ffa:	bf00      	nop
 8010ffc:	24001b10 	.word	0x24001b10

08011000 <_realloc_r>:
 8011000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011004:	4680      	mov	r8, r0
 8011006:	4614      	mov	r4, r2
 8011008:	460e      	mov	r6, r1
 801100a:	b921      	cbnz	r1, 8011016 <_realloc_r+0x16>
 801100c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011010:	4611      	mov	r1, r2
 8011012:	f7ff bf81 	b.w	8010f18 <_malloc_r>
 8011016:	b92a      	cbnz	r2, 8011024 <_realloc_r+0x24>
 8011018:	f000 f83e 	bl	8011098 <_free_r>
 801101c:	4625      	mov	r5, r4
 801101e:	4628      	mov	r0, r5
 8011020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011024:	f000 f884 	bl	8011130 <_malloc_usable_size_r>
 8011028:	4284      	cmp	r4, r0
 801102a:	4607      	mov	r7, r0
 801102c:	d802      	bhi.n	8011034 <_realloc_r+0x34>
 801102e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011032:	d812      	bhi.n	801105a <_realloc_r+0x5a>
 8011034:	4621      	mov	r1, r4
 8011036:	4640      	mov	r0, r8
 8011038:	f7ff ff6e 	bl	8010f18 <_malloc_r>
 801103c:	4605      	mov	r5, r0
 801103e:	2800      	cmp	r0, #0
 8011040:	d0ed      	beq.n	801101e <_realloc_r+0x1e>
 8011042:	42bc      	cmp	r4, r7
 8011044:	4622      	mov	r2, r4
 8011046:	4631      	mov	r1, r6
 8011048:	bf28      	it	cs
 801104a:	463a      	movcs	r2, r7
 801104c:	f7ff fee2 	bl	8010e14 <memcpy>
 8011050:	4631      	mov	r1, r6
 8011052:	4640      	mov	r0, r8
 8011054:	f000 f820 	bl	8011098 <_free_r>
 8011058:	e7e1      	b.n	801101e <_realloc_r+0x1e>
 801105a:	4635      	mov	r5, r6
 801105c:	e7df      	b.n	801101e <_realloc_r+0x1e>
	...

08011060 <_sbrk_r>:
 8011060:	b538      	push	{r3, r4, r5, lr}
 8011062:	4d06      	ldr	r5, [pc, #24]	; (801107c <_sbrk_r+0x1c>)
 8011064:	2300      	movs	r3, #0
 8011066:	4604      	mov	r4, r0
 8011068:	4608      	mov	r0, r1
 801106a:	602b      	str	r3, [r5, #0]
 801106c:	f7f5 fa98 	bl	80065a0 <_sbrk>
 8011070:	1c43      	adds	r3, r0, #1
 8011072:	d102      	bne.n	801107a <_sbrk_r+0x1a>
 8011074:	682b      	ldr	r3, [r5, #0]
 8011076:	b103      	cbz	r3, 801107a <_sbrk_r+0x1a>
 8011078:	6023      	str	r3, [r4, #0]
 801107a:	bd38      	pop	{r3, r4, r5, pc}
 801107c:	24001b18 	.word	0x24001b18

08011080 <__malloc_lock>:
 8011080:	4801      	ldr	r0, [pc, #4]	; (8011088 <__malloc_lock+0x8>)
 8011082:	f000 b85d 	b.w	8011140 <__retarget_lock_acquire_recursive>
 8011086:	bf00      	nop
 8011088:	24001b1c 	.word	0x24001b1c

0801108c <__malloc_unlock>:
 801108c:	4801      	ldr	r0, [pc, #4]	; (8011094 <__malloc_unlock+0x8>)
 801108e:	f000 b858 	b.w	8011142 <__retarget_lock_release_recursive>
 8011092:	bf00      	nop
 8011094:	24001b1c 	.word	0x24001b1c

08011098 <_free_r>:
 8011098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801109a:	2900      	cmp	r1, #0
 801109c:	d044      	beq.n	8011128 <_free_r+0x90>
 801109e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110a2:	9001      	str	r0, [sp, #4]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	f1a1 0404 	sub.w	r4, r1, #4
 80110aa:	bfb8      	it	lt
 80110ac:	18e4      	addlt	r4, r4, r3
 80110ae:	f7ff ffe7 	bl	8011080 <__malloc_lock>
 80110b2:	4a1e      	ldr	r2, [pc, #120]	; (801112c <_free_r+0x94>)
 80110b4:	9801      	ldr	r0, [sp, #4]
 80110b6:	6813      	ldr	r3, [r2, #0]
 80110b8:	b933      	cbnz	r3, 80110c8 <_free_r+0x30>
 80110ba:	6063      	str	r3, [r4, #4]
 80110bc:	6014      	str	r4, [r2, #0]
 80110be:	b003      	add	sp, #12
 80110c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80110c4:	f7ff bfe2 	b.w	801108c <__malloc_unlock>
 80110c8:	42a3      	cmp	r3, r4
 80110ca:	d908      	bls.n	80110de <_free_r+0x46>
 80110cc:	6825      	ldr	r5, [r4, #0]
 80110ce:	1961      	adds	r1, r4, r5
 80110d0:	428b      	cmp	r3, r1
 80110d2:	bf01      	itttt	eq
 80110d4:	6819      	ldreq	r1, [r3, #0]
 80110d6:	685b      	ldreq	r3, [r3, #4]
 80110d8:	1949      	addeq	r1, r1, r5
 80110da:	6021      	streq	r1, [r4, #0]
 80110dc:	e7ed      	b.n	80110ba <_free_r+0x22>
 80110de:	461a      	mov	r2, r3
 80110e0:	685b      	ldr	r3, [r3, #4]
 80110e2:	b10b      	cbz	r3, 80110e8 <_free_r+0x50>
 80110e4:	42a3      	cmp	r3, r4
 80110e6:	d9fa      	bls.n	80110de <_free_r+0x46>
 80110e8:	6811      	ldr	r1, [r2, #0]
 80110ea:	1855      	adds	r5, r2, r1
 80110ec:	42a5      	cmp	r5, r4
 80110ee:	d10b      	bne.n	8011108 <_free_r+0x70>
 80110f0:	6824      	ldr	r4, [r4, #0]
 80110f2:	4421      	add	r1, r4
 80110f4:	1854      	adds	r4, r2, r1
 80110f6:	42a3      	cmp	r3, r4
 80110f8:	6011      	str	r1, [r2, #0]
 80110fa:	d1e0      	bne.n	80110be <_free_r+0x26>
 80110fc:	681c      	ldr	r4, [r3, #0]
 80110fe:	685b      	ldr	r3, [r3, #4]
 8011100:	6053      	str	r3, [r2, #4]
 8011102:	4421      	add	r1, r4
 8011104:	6011      	str	r1, [r2, #0]
 8011106:	e7da      	b.n	80110be <_free_r+0x26>
 8011108:	d902      	bls.n	8011110 <_free_r+0x78>
 801110a:	230c      	movs	r3, #12
 801110c:	6003      	str	r3, [r0, #0]
 801110e:	e7d6      	b.n	80110be <_free_r+0x26>
 8011110:	6825      	ldr	r5, [r4, #0]
 8011112:	1961      	adds	r1, r4, r5
 8011114:	428b      	cmp	r3, r1
 8011116:	bf04      	itt	eq
 8011118:	6819      	ldreq	r1, [r3, #0]
 801111a:	685b      	ldreq	r3, [r3, #4]
 801111c:	6063      	str	r3, [r4, #4]
 801111e:	bf04      	itt	eq
 8011120:	1949      	addeq	r1, r1, r5
 8011122:	6021      	streq	r1, [r4, #0]
 8011124:	6054      	str	r4, [r2, #4]
 8011126:	e7ca      	b.n	80110be <_free_r+0x26>
 8011128:	b003      	add	sp, #12
 801112a:	bd30      	pop	{r4, r5, pc}
 801112c:	24001b10 	.word	0x24001b10

08011130 <_malloc_usable_size_r>:
 8011130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011134:	1f18      	subs	r0, r3, #4
 8011136:	2b00      	cmp	r3, #0
 8011138:	bfbc      	itt	lt
 801113a:	580b      	ldrlt	r3, [r1, r0]
 801113c:	18c0      	addlt	r0, r0, r3
 801113e:	4770      	bx	lr

08011140 <__retarget_lock_acquire_recursive>:
 8011140:	4770      	bx	lr

08011142 <__retarget_lock_release_recursive>:
 8011142:	4770      	bx	lr

08011144 <_init>:
 8011144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011146:	bf00      	nop
 8011148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801114a:	bc08      	pop	{r3}
 801114c:	469e      	mov	lr, r3
 801114e:	4770      	bx	lr

08011150 <_fini>:
 8011150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011152:	bf00      	nop
 8011154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011156:	bc08      	pop	{r3}
 8011158:	469e      	mov	lr, r3
 801115a:	4770      	bx	lr
