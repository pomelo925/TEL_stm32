
TEL_STM_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da70  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  0800dd40  0800dd40  0001dd40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dfec  0800dfec  0001dfec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000010  0800dff4  0800dff4  0001dff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e004  0800e004  0001e004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  0800e008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001788  24000080  0800e084  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001808  0800e084  00021808  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000267a3  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000043f4  00000000  00000000  0004684d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001538  00000000  00000000  0004ac48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013e8  00000000  00000000  0004c180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035af2  00000000  00000000  0004d568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cec3  00000000  00000000  0008305a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153b6d  00000000  00000000  0009ff1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f3a8a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d20  00000000  00000000  001f3adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000080 	.word	0x24000080
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800dd28 	.word	0x0800dd28

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000084 	.word	0x24000084
 800030c:	0800dd28 	.word	0x0800dd28

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00

0800067c <_Z13DC_motor_initv>:
//DC_motor fl(5.5, 85, 0, 0.001, 43193, 200);
//DC_motor br(148.3, 2813.3, 0.537, 0.001, 26734, 200);
//DC_motor bl(0, 0, 0, 0.001, 41296, 200);


void DC_motor_init(){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8000680:	2100      	movs	r1, #0
 8000682:	481a      	ldr	r0, [pc, #104]	; (80006ec <_Z13DC_motor_initv+0x70>)
 8000684:	f00a f872 	bl	800a76c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8000688:	2104      	movs	r1, #4
 800068a:	4818      	ldr	r0, [pc, #96]	; (80006ec <_Z13DC_motor_initv+0x70>)
 800068c:	f00a f86e 	bl	800a76c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 8000690:	2100      	movs	r1, #0
 8000692:	4817      	ldr	r0, [pc, #92]	; (80006f0 <_Z13DC_motor_initv+0x74>)
 8000694:	f00a f86a 	bl	800a76c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 8000698:	2104      	movs	r1, #4
 800069a:	4815      	ldr	r0, [pc, #84]	; (80006f0 <_Z13DC_motor_initv+0x74>)
 800069c:	f00a f866 	bl	800a76c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80006a0:	2100      	movs	r1, #0
 80006a2:	4814      	ldr	r0, [pc, #80]	; (80006f4 <_Z13DC_motor_initv+0x78>)
 80006a4:	f00a f862 	bl	800a76c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80006a8:	2104      	movs	r1, #4
 80006aa:	4812      	ldr	r0, [pc, #72]	; (80006f4 <_Z13DC_motor_initv+0x78>)
 80006ac:	f00a f85e 	bl	800a76c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	4811      	ldr	r0, [pc, #68]	; (80006f8 <_Z13DC_motor_initv+0x7c>)
 80006b4:	f00a f85a 	bl	800a76c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80006b8:	2104      	movs	r1, #4
 80006ba:	480f      	ldr	r0, [pc, #60]	; (80006f8 <_Z13DC_motor_initv+0x7c>)
 80006bc:	f00a f856 	bl	800a76c <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim13);
 80006c0:	480e      	ldr	r0, [pc, #56]	; (80006fc <_Z13DC_motor_initv+0x80>)
 80006c2:	f009 fd67 	bl	800a194 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_2);
 80006c6:	2104      	movs	r1, #4
 80006c8:	480d      	ldr	r0, [pc, #52]	; (8000700 <_Z13DC_motor_initv+0x84>)
 80006ca:	f009 fe41 	bl	800a350 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 80006ce:	2100      	movs	r1, #0
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <_Z13DC_motor_initv+0x84>)
 80006d2:	f009 fe3d 	bl	800a350 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_2);
 80006d6:	2104      	movs	r1, #4
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <_Z13DC_motor_initv+0x88>)
 80006da:	f009 fe39 	bl	800a350 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 80006de:	2100      	movs	r1, #0
 80006e0:	4808      	ldr	r0, [pc, #32]	; (8000704 <_Z13DC_motor_initv+0x88>)
 80006e2:	f009 fe35 	bl	800a350 <HAL_TIM_PWM_Start_IT>
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	24000260 	.word	0x24000260
 80006f0:	24000344 	.word	0x24000344
 80006f4:	240002ac 	.word	0x240002ac
 80006f8:	240002f8 	.word	0x240002f8
 80006fc:	240003dc 	.word	0x240003dc
 8000700:	24000390 	.word	0x24000390
 8000704:	24000428 	.word	0x24000428

08000708 <_ZN8DC_motorC1Edddddd>:

DC_motor::DC_motor(double p, double i, double d, double time, double res, double ratio){
 8000708:	b480      	push	{r7}
 800070a:	b08f      	sub	sp, #60	; 0x3c
 800070c:	af00      	add	r7, sp, #0
 800070e:	6378      	str	r0, [r7, #52]	; 0x34
 8000710:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8000714:	ed87 1b08 	vstr	d1, [r7, #32]
 8000718:	ed87 2b06 	vstr	d2, [r7, #24]
 800071c:	ed87 3b04 	vstr	d3, [r7, #16]
 8000720:	ed87 4b02 	vstr	d4, [r7, #8]
 8000724:	ed87 5b00 	vstr	d5, [r7]
	this->kp = p;
 8000728:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800072a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800072e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	this->ki = i;
 8000732:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000734:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000738:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	this->kd = d;
 800073c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800073e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000742:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	this->time = time;
 8000746:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000748:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800074c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	this->res_encoder = res;
 8000750:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000752:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000756:	e9c1 2300 	strd	r2, r3, [r1]
	this->sr_ratio = ratio;
 800075a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800075c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000760:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8000764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000766:	4618      	mov	r0, r3
 8000768:	373c      	adds	r7, #60	; 0x3c
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <_ZN8DC_motor10PIDControlEv>:
//	if(PID<-1) PID=-1;
//
//	return rps_now;
//}

void DC_motor::PIDControl(void){
 8000772:	b480      	push	{r7}
 8000774:	b083      	sub	sp, #12
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
	rps_now = (double) CountNow / 4 / res_encoder / sr_ratio / time;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8000780:	ee07 3a90 	vmov	s15, r3
 8000784:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000788:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800078c:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	ed93 7b00 	vldr	d7, [r3]
 8000796:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	ed93 7b02 	vldr	d7, [r3, #8]
 80007a0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 80007aa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	error = rps_goal - rps_now;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80007c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	ed83 7b04 	vstr	d7, [r3, #16]
	error_total += error;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	ed93 6b06 	vldr	d6, [r3, #24]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	ed93 7b04 	vldr	d7, [r3, #16]
 80007d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	ed83 7b06 	vstr	d7, [r3, #24]
	PWM = error*kp + error_total*ki + error_last*kd;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	ed93 6b04 	vldr	d6, [r3, #16]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80007ec:	ee26 6b07 	vmul.f64	d6, d6, d7
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	ed93 5b06 	vldr	d5, [r3, #24]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80007fc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000800:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	ed93 5b08 	vldr	d5, [r3, #32]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8000810:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000814:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	error_last = error;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000824:	6879      	ldr	r1, [r7, #4]
 8000826:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
	...

08000838 <_Z41__static_initialization_and_destruction_0ii>:
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d140      	bne.n	80008ca <_Z41__static_initialization_and_destruction_0ii+0x92>
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800084e:	4293      	cmp	r3, r2
 8000850:	d13b      	bne.n	80008ca <_Z41__static_initialization_and_destruction_0ii+0x92>
DC_motor fr(1000,0.5,0, 0.001,512,13.2);
 8000852:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80008d8 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000856:	ed9f 4b22 	vldr	d4, [pc, #136]	; 80008e0 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 800085a:	ed9f 3b23 	vldr	d3, [pc, #140]	; 80008e8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800085e:	ed9f 2b24 	vldr	d2, [pc, #144]	; 80008f0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000862:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8000866:	ed9f 0b24 	vldr	d0, [pc, #144]	; 80008f8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 800086a:	4825      	ldr	r0, [pc, #148]	; (8000900 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800086c:	f7ff ff4c 	bl	8000708 <_ZN8DC_motorC1Edddddd>
DC_motor fl(1000,0.5,0, 0.001,512,13.2);
 8000870:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80008d8 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000874:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 80008e0 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000878:	ed9f 3b1b 	vldr	d3, [pc, #108]	; 80008e8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800087c:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 80008f0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000880:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8000884:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80008f8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000888:	481e      	ldr	r0, [pc, #120]	; (8000904 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800088a:	f7ff ff3d 	bl	8000708 <_ZN8DC_motorC1Edddddd>
DC_motor br(1000,0.5,0, 0.001,512,13.2);
 800088e:	ed9f 5b12 	vldr	d5, [pc, #72]	; 80008d8 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000892:	ed9f 4b13 	vldr	d4, [pc, #76]	; 80008e0 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000896:	ed9f 3b14 	vldr	d3, [pc, #80]	; 80008e8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800089a:	ed9f 2b15 	vldr	d2, [pc, #84]	; 80008f0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 800089e:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 80008a2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80008f8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 80008a6:	4818      	ldr	r0, [pc, #96]	; (8000908 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80008a8:	f7ff ff2e 	bl	8000708 <_ZN8DC_motorC1Edddddd>
DC_motor bl(1000,0.5,0, 0.001,512,13.2);
 80008ac:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80008d8 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80008b0:	ed9f 4b0b 	vldr	d4, [pc, #44]	; 80008e0 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80008b4:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 80008e8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80008b8:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 80008f0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80008bc:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 80008c0:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80008f8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 80008c4:	4811      	ldr	r0, [pc, #68]	; (800090c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80008c6:	f7ff ff1f 	bl	8000708 <_ZN8DC_motorC1Edddddd>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	f3af 8000 	nop.w
 80008d8:	66666666 	.word	0x66666666
 80008dc:	402a6666 	.word	0x402a6666
 80008e0:	00000000 	.word	0x00000000
 80008e4:	40800000 	.word	0x40800000
 80008e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80008ec:	3f50624d 	.word	0x3f50624d
	...
 80008fc:	408f4000 	.word	0x408f4000
 8000900:	240000a0 	.word	0x240000a0
 8000904:	24000110 	.word	0x24000110
 8000908:	24000180 	.word	0x24000180
 800090c:	240001f0 	.word	0x240001f0

08000910 <_GLOBAL__sub_I_fr>:
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
 8000914:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000918:	2001      	movs	r0, #1
 800091a:	f7ff ff8d 	bl	8000838 <_Z41__static_initialization_and_destruction_0ii>
 800091e:	bd80      	pop	{r7, pc}

08000920 <_Z10debug_loopv>:

/** debug which function **/
bool mecanum_debug = true;


void debug_loop(){
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	while(1){
		if(mecanum_debug) mecanum.run();
 8000924:	4b03      	ldr	r3, [pc, #12]	; (8000934 <_Z10debug_loopv+0x14>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d0fb      	beq.n	8000924 <_Z10debug_loopv+0x4>
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <_Z10debug_loopv+0x18>)
 800092e:	f000 fcbd 	bl	80012ac <_ZN7Mecanum3runEv>
 8000932:	e7f7      	b.n	8000924 <_Z10debug_loopv+0x4>
 8000934:	24000001 	.word	0x24000001
 8000938:	240005f8 	.word	0x240005f8

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000940:	f003 ffa2 	bl	8004888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000944:	f000 f818 	bl	8000978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000948:	f000 fb56 	bl	8000ff8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800094c:	f000 f884 	bl	8000a58 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000950:	f000 f8d6 	bl	8000b00 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000954:	f000 f92a 	bl	8000bac <MX_TIM4_Init>
  MX_TIM5_Init();
 8000958:	f000 f97e 	bl	8000c58 <MX_TIM5_Init>
  MX_TIM12_Init();
 800095c:	f000 f9d2 	bl	8000d04 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000960:	f000 fa20 	bl	8000da4 <MX_TIM13_Init>
  MX_TIM15_Init();
 8000964:	f000 fa42 	bl	8000dec <MX_TIM15_Init>
  MX_DMA_Init();
 8000968:	f000 fb1e 	bl	8000fa8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800096c:	f000 fad0 	bl	8000f10 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000970:	f000 fc36 	bl	80011e0 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000974:	e7fe      	b.n	8000974 <main+0x38>
	...

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b09c      	sub	sp, #112	; 0x70
 800097c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000982:	224c      	movs	r2, #76	; 0x4c
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f00d f844 	bl	800da14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2220      	movs	r2, #32
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f00d f83e 	bl	800da14 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000998:	2002      	movs	r0, #2
 800099a:	f007 f913 	bl	8007bc4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800099e:	2300      	movs	r3, #0
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <SystemClock_Config+0xdc>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009aa:	4a2a      	ldr	r2, [pc, #168]	; (8000a54 <SystemClock_Config+0xdc>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b0:	6193      	str	r3, [r2, #24]
 80009b2:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <SystemClock_Config+0xdc>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009be:	bf00      	nop
 80009c0:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <SystemClock_Config+0xdc>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009cc:	d1f8      	bne.n	80009c0 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ce:	2301      	movs	r3, #1
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d8:	2302      	movs	r3, #2
 80009da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009dc:	2302      	movs	r3, #2
 80009de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 80009e4:	232a      	movs	r3, #42	; 0x2a
 80009e6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009f4:	230c      	movs	r3, #12
 80009f6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a04:	4618      	mov	r0, r3
 8000a06:	f007 f917 	bl	8007c38 <HAL_RCC_OscConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a10:	f000 fbe0 	bl	80011d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a14:	233f      	movs	r3, #63	; 0x3f
 8000a16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000a1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a22:	2308      	movs	r3, #8
 8000a24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a26:	2340      	movs	r3, #64	; 0x40
 8000a28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a2a:	2340      	movs	r3, #64	; 0x40
 8000a2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a32:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a34:	2340      	movs	r3, #64	; 0x40
 8000a36:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f007 fca9 	bl	8008394 <HAL_RCC_ClockConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a48:	f000 fbc4 	bl	80011d4 <Error_Handler>
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	3770      	adds	r7, #112	; 0x70
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	58024800 	.word	0x58024800

08000a58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08c      	sub	sp, #48	; 0x30
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	2224      	movs	r2, #36	; 0x24
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f00c ffd4 	bl	800da14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a76:	4b21      	ldr	r3, [pc, #132]	; (8000afc <MX_TIM2_Init+0xa4>)
 8000a78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <MX_TIM2_Init+0xa4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a84:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <MX_TIM2_Init+0xa4>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <MX_TIM2_Init+0xa4>)
 8000a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <MX_TIM2_Init+0xa4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <MX_TIM2_Init+0xa4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <MX_TIM2_Init+0xa4>)
 8000aca:	f009 fda9 	bl	800a620 <HAL_TIM_Encoder_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000ad4:	f000 fb7e 	bl	80011d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_TIM2_Init+0xa4>)
 8000ae6:	f00a fccd 	bl	800b484 <HAL_TIMEx_MasterConfigSynchronization>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000af0:	f000 fb70 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	3730      	adds	r7, #48	; 0x30
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	24000260 	.word	0x24000260

08000b00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08c      	sub	sp, #48	; 0x30
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	2224      	movs	r2, #36	; 0x24
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f00c ff80 	bl	800da14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b14:	463b      	mov	r3, r7
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MX_TIM3_Init+0xa4>)
 8000b20:	4a21      	ldr	r2, [pc, #132]	; (8000ba8 <MX_TIM3_Init+0xa8>)
 8000b22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_TIM3_Init+0xa4>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <MX_TIM3_Init+0xa4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b30:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_TIM3_Init+0xa4>)
 8000b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_TIM3_Init+0xa4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_TIM3_Init+0xa4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b44:	2303      	movs	r3, #3
 8000b46:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <MX_TIM3_Init+0xa4>)
 8000b70:	f009 fd56 	bl	800a620 <HAL_TIM_Encoder_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000b7a:	f000 fb2b 	bl	80011d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b86:	463b      	mov	r3, r7
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <MX_TIM3_Init+0xa4>)
 8000b8c:	f00a fc7a 	bl	800b484 <HAL_TIMEx_MasterConfigSynchronization>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b96:	f000 fb1d 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	3730      	adds	r7, #48	; 0x30
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	240002ac 	.word	0x240002ac
 8000ba8:	40000400 	.word	0x40000400

08000bac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08c      	sub	sp, #48	; 0x30
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	2224      	movs	r2, #36	; 0x24
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f00c ff2a 	bl	800da14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <MX_TIM4_Init+0xa4>)
 8000bcc:	4a21      	ldr	r2, [pc, #132]	; (8000c54 <MX_TIM4_Init+0xa8>)
 8000bce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <MX_TIM4_Init+0xa4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <MX_TIM4_Init+0xa4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <MX_TIM4_Init+0xa4>)
 8000bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000be2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <MX_TIM4_Init+0xa4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <MX_TIM4_Init+0xa4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	4619      	mov	r1, r3
 8000c1a:	480d      	ldr	r0, [pc, #52]	; (8000c50 <MX_TIM4_Init+0xa4>)
 8000c1c:	f009 fd00 	bl	800a620 <HAL_TIM_Encoder_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000c26:	f000 fad5 	bl	80011d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c32:	463b      	mov	r3, r7
 8000c34:	4619      	mov	r1, r3
 8000c36:	4806      	ldr	r0, [pc, #24]	; (8000c50 <MX_TIM4_Init+0xa4>)
 8000c38:	f00a fc24 	bl	800b484 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000c42:	f000 fac7 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	3730      	adds	r7, #48	; 0x30
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	240002f8 	.word	0x240002f8
 8000c54:	40000800 	.word	0x40000800

08000c58 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	; 0x30
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	2224      	movs	r2, #36	; 0x24
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f00c fed4 	bl	800da14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <MX_TIM5_Init+0xa4>)
 8000c78:	4a21      	ldr	r2, [pc, #132]	; (8000d00 <MX_TIM5_Init+0xa8>)
 8000c7a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <MX_TIM5_Init+0xa4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <MX_TIM5_Init+0xa4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000c88:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_TIM5_Init+0xa4>)
 8000c8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c8e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_TIM5_Init+0xa4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_TIM5_Init+0xa4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_TIM5_Init+0xa4>)
 8000cc8:	f009 fcaa 	bl	800a620 <HAL_TIM_Encoder_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000cd2:	f000 fa7f 	bl	80011d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000cde:	463b      	mov	r3, r7
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4806      	ldr	r0, [pc, #24]	; (8000cfc <MX_TIM5_Init+0xa4>)
 8000ce4:	f00a fbce 	bl	800b484 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000cee:	f000 fa71 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	3730      	adds	r7, #48	; 0x30
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	24000344 	.word	0x24000344
 8000d00:	40000c00 	.word	0x40000c00

08000d04 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
 8000d18:	615a      	str	r2, [r3, #20]
 8000d1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <MX_TIM12_Init+0x98>)
 8000d1e:	4a20      	ldr	r2, [pc, #128]	; (8000da0 <MX_TIM12_Init+0x9c>)
 8000d20:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 8000d22:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <MX_TIM12_Init+0x98>)
 8000d24:	2253      	movs	r2, #83	; 0x53
 8000d26:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <MX_TIM12_Init+0x98>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <MX_TIM12_Init+0x98>)
 8000d30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d34:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d36:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <MX_TIM12_Init+0x98>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <MX_TIM12_Init+0x98>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000d42:	4816      	ldr	r0, [pc, #88]	; (8000d9c <MX_TIM12_Init+0x98>)
 8000d44:	f009 faac 	bl	800a2a0 <HAL_TIM_PWM_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000d4e:	f000 fa41 	bl	80011d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d52:	2360      	movs	r3, #96	; 0x60
 8000d54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	4619      	mov	r1, r3
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <MX_TIM12_Init+0x98>)
 8000d6a:	f009 fead 	bl	800aac8 <HAL_TIM_PWM_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000d74:	f000 fa2e 	bl	80011d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	2204      	movs	r2, #4
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4807      	ldr	r0, [pc, #28]	; (8000d9c <MX_TIM12_Init+0x98>)
 8000d80:	f009 fea2 	bl	800aac8 <HAL_TIM_PWM_ConfigChannel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8000d8a:	f000 fa23 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <MX_TIM12_Init+0x98>)
 8000d90:	f003 f9a4 	bl	80040dc <HAL_TIM_MspPostInit>

}
 8000d94:	bf00      	nop
 8000d96:	3720      	adds	r7, #32
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	24000390 	.word	0x24000390
 8000da0:	40001800 	.word	0x40001800

08000da4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_TIM13_Init+0x40>)
 8000daa:	4a0f      	ldr	r2, [pc, #60]	; (8000de8 <MX_TIM13_Init+0x44>)
 8000dac:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 83;
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <MX_TIM13_Init+0x40>)
 8000db0:	2253      	movs	r2, #83	; 0x53
 8000db2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <MX_TIM13_Init+0x40>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <MX_TIM13_Init+0x40>)
 8000dbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dc0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <MX_TIM13_Init+0x40>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_TIM13_Init+0x40>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_TIM13_Init+0x40>)
 8000dd0:	f009 f988 	bl	800a0e4 <HAL_TIM_Base_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8000dda:	f000 f9fb 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	240003dc 	.word	0x240003dc
 8000de8:	40001c00 	.word	0x40001c00

08000dec <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b098      	sub	sp, #96	; 0x60
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]
 8000e0e:	615a      	str	r2, [r3, #20]
 8000e10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2234      	movs	r2, #52	; 0x34
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f00c fdfb 	bl	800da14 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000e1e:	4b3a      	ldr	r3, [pc, #232]	; (8000f08 <MX_TIM15_Init+0x11c>)
 8000e20:	4a3a      	ldr	r2, [pc, #232]	; (8000f0c <MX_TIM15_Init+0x120>)
 8000e22:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 83;
 8000e24:	4b38      	ldr	r3, [pc, #224]	; (8000f08 <MX_TIM15_Init+0x11c>)
 8000e26:	2253      	movs	r2, #83	; 0x53
 8000e28:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2a:	4b37      	ldr	r3, [pc, #220]	; (8000f08 <MX_TIM15_Init+0x11c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8000e30:	4b35      	ldr	r3, [pc, #212]	; (8000f08 <MX_TIM15_Init+0x11c>)
 8000e32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e36:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e38:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <MX_TIM15_Init+0x11c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000e3e:	4b32      	ldr	r3, [pc, #200]	; (8000f08 <MX_TIM15_Init+0x11c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e44:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <MX_TIM15_Init+0x11c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000e4a:	482f      	ldr	r0, [pc, #188]	; (8000f08 <MX_TIM15_Init+0x11c>)
 8000e4c:	f009 fa28 	bl	800a2a0 <HAL_TIM_PWM_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000e56:	f000 f9bd 	bl	80011d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e66:	4619      	mov	r1, r3
 8000e68:	4827      	ldr	r0, [pc, #156]	; (8000f08 <MX_TIM15_Init+0x11c>)
 8000e6a:	f00a fb0b 	bl	800b484 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000e74:	f000 f9ae 	bl	80011d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e78:	2360      	movs	r3, #96	; 0x60
 8000e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e80:	2300      	movs	r3, #0
 8000e82:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e84:	2300      	movs	r3, #0
 8000e86:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e90:	2300      	movs	r3, #0
 8000e92:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e98:	2200      	movs	r2, #0
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	481a      	ldr	r0, [pc, #104]	; (8000f08 <MX_TIM15_Init+0x11c>)
 8000e9e:	f009 fe13 	bl	800aac8 <HAL_TIM_PWM_ConfigChannel>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000ea8:	f000 f994 	bl	80011d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4814      	ldr	r0, [pc, #80]	; (8000f08 <MX_TIM15_Init+0x11c>)
 8000eb6:	f009 fe07 	bl	800aac8 <HAL_TIM_PWM_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000ec0:	f000 f988 	bl	80011d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000edc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4807      	ldr	r0, [pc, #28]	; (8000f08 <MX_TIM15_Init+0x11c>)
 8000eec:	f00a fb66 	bl	800b5bc <HAL_TIMEx_ConfigBreakDeadTime>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000ef6:	f000 f96d 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000efa:	4803      	ldr	r0, [pc, #12]	; (8000f08 <MX_TIM15_Init+0x11c>)
 8000efc:	f003 f8ee 	bl	80040dc <HAL_TIM_MspPostInit>

}
 8000f00:	bf00      	nop
 8000f02:	3760      	adds	r7, #96	; 0x60
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	24000428 	.word	0x24000428
 8000f0c:	40014000 	.word	0x40014000

08000f10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f14:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <MX_USART1_UART_Init+0x90>)
 8000f16:	4a23      	ldr	r2, [pc, #140]	; (8000fa4 <MX_USART1_UART_Init+0x94>)
 8000f18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <MX_USART1_UART_Init+0x90>)
 8000f1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <MX_USART1_UART_Init+0x90>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f28:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <MX_USART1_UART_Init+0x90>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <MX_USART1_UART_Init+0x90>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <MX_USART1_UART_Init+0x90>)
 8000f36:	220c      	movs	r2, #12
 8000f38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <MX_USART1_UART_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f40:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <MX_USART1_UART_Init+0x90>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f46:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <MX_USART1_UART_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <MX_USART1_UART_Init+0x90>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <MX_USART1_UART_Init+0x90>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f58:	4811      	ldr	r0, [pc, #68]	; (8000fa0 <MX_USART1_UART_Init+0x90>)
 8000f5a:	f00a fbed 	bl	800b738 <HAL_UART_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f64:	f000 f936 	bl	80011d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f68:	2100      	movs	r1, #0
 8000f6a:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <MX_USART1_UART_Init+0x90>)
 8000f6c:	f00c fc34 	bl	800d7d8 <HAL_UARTEx_SetTxFifoThreshold>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f76:	f000 f92d 	bl	80011d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <MX_USART1_UART_Init+0x90>)
 8000f7e:	f00c fc69 	bl	800d854 <HAL_UARTEx_SetRxFifoThreshold>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f88:	f000 f924 	bl	80011d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <MX_USART1_UART_Init+0x90>)
 8000f8e:	f00c fbea 	bl	800d766 <HAL_UARTEx_DisableFifoMode>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f98:	f000 f91c 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	24000474 	.word	0x24000474
 8000fa4:	40011000 	.word	0x40011000

08000fa8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_DMA_Init+0x4c>)
 8000fb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fb4:	4a0f      	ldr	r2, [pc, #60]	; (8000ff4 <MX_DMA_Init+0x4c>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <MX_DMA_Init+0x4c>)
 8000fc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	200b      	movs	r0, #11
 8000fd2:	f003 fdc6 	bl	8004b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fd6:	200b      	movs	r0, #11
 8000fd8:	f003 fddd 	bl	8004b96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	200c      	movs	r0, #12
 8000fe2:	f003 fdbe 	bl	8004b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000fe6:	200c      	movs	r0, #12
 8000fe8:	f003 fdd5 	bl	8004b96 <HAL_NVIC_EnableIRQ>

}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	58024400 	.word	0x58024400

08000ff8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08c      	sub	sp, #48	; 0x30
 8000ffc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800100e:	4b6b      	ldr	r3, [pc, #428]	; (80011bc <MX_GPIO_Init+0x1c4>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001014:	4a69      	ldr	r2, [pc, #420]	; (80011bc <MX_GPIO_Init+0x1c4>)
 8001016:	f043 0310 	orr.w	r3, r3, #16
 800101a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101e:	4b67      	ldr	r3, [pc, #412]	; (80011bc <MX_GPIO_Init+0x1c4>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001024:	f003 0310 	and.w	r3, r3, #16
 8001028:	61bb      	str	r3, [r7, #24]
 800102a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102c:	4b63      	ldr	r3, [pc, #396]	; (80011bc <MX_GPIO_Init+0x1c4>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001032:	4a62      	ldr	r2, [pc, #392]	; (80011bc <MX_GPIO_Init+0x1c4>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800103c:	4b5f      	ldr	r3, [pc, #380]	; (80011bc <MX_GPIO_Init+0x1c4>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800104a:	4b5c      	ldr	r3, [pc, #368]	; (80011bc <MX_GPIO_Init+0x1c4>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001050:	4a5a      	ldr	r2, [pc, #360]	; (80011bc <MX_GPIO_Init+0x1c4>)
 8001052:	f043 0320 	orr.w	r3, r3, #32
 8001056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800105a:	4b58      	ldr	r3, [pc, #352]	; (80011bc <MX_GPIO_Init+0x1c4>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001060:	f003 0320 	and.w	r3, r3, #32
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001068:	4b54      	ldr	r3, [pc, #336]	; (80011bc <MX_GPIO_Init+0x1c4>)
 800106a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106e:	4a53      	ldr	r2, [pc, #332]	; (80011bc <MX_GPIO_Init+0x1c4>)
 8001070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001074:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001078:	4b50      	ldr	r3, [pc, #320]	; (80011bc <MX_GPIO_Init+0x1c4>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b4d      	ldr	r3, [pc, #308]	; (80011bc <MX_GPIO_Init+0x1c4>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108c:	4a4b      	ldr	r2, [pc, #300]	; (80011bc <MX_GPIO_Init+0x1c4>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001096:	4b49      	ldr	r3, [pc, #292]	; (80011bc <MX_GPIO_Init+0x1c4>)
 8001098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	4b45      	ldr	r3, [pc, #276]	; (80011bc <MX_GPIO_Init+0x1c4>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010aa:	4a44      	ldr	r2, [pc, #272]	; (80011bc <MX_GPIO_Init+0x1c4>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b4:	4b41      	ldr	r3, [pc, #260]	; (80011bc <MX_GPIO_Init+0x1c4>)
 80010b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c2:	4b3e      	ldr	r3, [pc, #248]	; (80011bc <MX_GPIO_Init+0x1c4>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c8:	4a3c      	ldr	r2, [pc, #240]	; (80011bc <MX_GPIO_Init+0x1c4>)
 80010ca:	f043 0308 	orr.w	r3, r3, #8
 80010ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d2:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <MX_GPIO_Init+0x1c4>)
 80010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d8:	f003 0308 	and.w	r3, r3, #8
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80010e6:	4836      	ldr	r0, [pc, #216]	; (80011c0 <MX_GPIO_Init+0x1c8>)
 80010e8:	f006 fd52 	bl	8007b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_5, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	f242 0120 	movw	r1, #8224	; 0x2020
 80010f2:	4834      	ldr	r0, [pc, #208]	; (80011c4 <MX_GPIO_Init+0x1cc>)
 80010f4:	f006 fd4c 	bl	8007b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
 80010fe:	4832      	ldr	r0, [pc, #200]	; (80011c8 <MX_GPIO_Init+0x1d0>)
 8001100:	f006 fd46 	bl	8007b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 800110a:	4830      	ldr	r0, [pc, #192]	; (80011cc <MX_GPIO_Init+0x1d4>)
 800110c:	f006 fd40 	bl	8007b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 8001116:	482e      	ldr	r0, [pc, #184]	; (80011d0 <MX_GPIO_Init+0x1d8>)
 8001118:	f006 fd3a 	bl	8007b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8;
 800111c:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8001120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	4822      	ldr	r0, [pc, #136]	; (80011c0 <MX_GPIO_Init+0x1c8>)
 8001136:	f006 fb83 	bl	8007840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 800113a:	f242 0320 	movw	r3, #8224	; 0x2020
 800113e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2301      	movs	r3, #1
 8001142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	481c      	ldr	r0, [pc, #112]	; (80011c4 <MX_GPIO_Init+0x1cc>)
 8001154:	f006 fb74 	bl	8007840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF9 PF11 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15;
 8001158:	f44f 430b 	mov.w	r3, #35584	; 0x8b00
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4619      	mov	r1, r3
 8001170:	4815      	ldr	r0, [pc, #84]	; (80011c8 <MX_GPIO_Init+0x1d0>)
 8001172:	f006 fb65 	bl	8007840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9;
 8001176:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 800117a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	480f      	ldr	r0, [pc, #60]	; (80011cc <MX_GPIO_Init+0x1d4>)
 8001190:	f006 fb56 	bl	8007840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 8001194:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119a:	2301      	movs	r3, #1
 800119c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	4619      	mov	r1, r3
 80011ac:	4808      	ldr	r0, [pc, #32]	; (80011d0 <MX_GPIO_Init+0x1d8>)
 80011ae:	f006 fb47 	bl	8007840 <HAL_GPIO_Init>

}
 80011b2:	bf00      	nop
 80011b4:	3730      	adds	r7, #48	; 0x30
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	58024400 	.word	0x58024400
 80011c0:	58021000 	.word	0x58021000
 80011c4:	58020800 	.word	0x58020800
 80011c8:	58021400 	.word	0x58021400
 80011cc:	58020400 	.word	0x58020400
 80011d0:	58020c00 	.word	0x58020c00

080011d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d8:	b672      	cpsid	i
}
 80011da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011dc:	e7fe      	b.n	80011dc <Error_Handler+0x8>
	...

080011e0 <main_function>:
#include "debug.h"
#include "ros_main.h"
#include "stm_main.h"


void main_function(){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	ROS::setup();
 80011e4:	f001 fea6 	bl	8002f34 <_ZN3ROS5setupEv>
	STM::setup();
 80011e8:	f003 f91c 	bl	8004424 <_ZN3STM5setupEv>

	while(1){
		if(debug_mode) debug_loop();
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <main_function+0x20>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d002      	beq.n	80011fa <main_function+0x1a>
 80011f4:	f7ff fb94 	bl	8000920 <_Z10debug_loopv>
 80011f8:	e7f8      	b.n	80011ec <main_function+0xc>
		else ROS::loop();
 80011fa:	f001 feb1 	bl	8002f60 <_ZN3ROS4loopEv>
		if(debug_mode) debug_loop();
 80011fe:	e7f5      	b.n	80011ec <main_function+0xc>
 8001200:	24000000 	.word	0x24000000

08001204 <_ZN8CAR_INFOC1Ev>:

typedef struct{
	double Vx=0;
	double Vy=0;
	double Omega=0;
} CAR_INFO;
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	f04f 0300 	mov.w	r3, #0
 8001216:	e9c1 2300 	strd	r2, r3, [r1]
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	f04f 0300 	mov.w	r3, #0
 8001224:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	0000      	movs	r0, r0
	...

08001248 <_ZN7MecanumC1Ev>:
#include "mecanum.h"
#include "dc_motor.h"

Mecanum mecanum;

Mecanum::Mecanum(void){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ffd6 	bl	8001204 <_ZN8CAR_INFOC1Ev>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3318      	adds	r3, #24
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ffd1 	bl	8001204 <_ZN8CAR_INFOC1Ev>
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <_ZN7MecanumC1Ev+0x60>)
 800126a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	a309      	add	r3, pc, #36	; (adr r3, 8001298 <_ZN7MecanumC1Ev+0x50>)
 8001272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001276:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	a308      	add	r3, pc, #32	; (adr r3, 80012a0 <_ZN7MecanumC1Ev+0x58>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	DC_motor_init();
 8001286:	f7ff f9f9 	bl	800067c <_Z13DC_motor_initv>
}
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	f3af 8000 	nop.w
 8001298:	cccccccd 	.word	0xcccccccd
 800129c:	4020cccc 	.word	0x4020cccc
 80012a0:	39581062 	.word	0x39581062
 80012a4:	400d48b4 	.word	0x400d48b4
 80012a8:	40270000 	.word	0x40270000

080012ac <_ZN7Mecanum3runEv>:

// calculate wheel (-> PID) -> calculate car -> pub
void Mecanum::run(void){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
//	tf2_wheel_speed();
	tf2_car_speed();
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f807 	bl	80012c8 <_ZN7Mecanum13tf2_car_speedEv>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	0000      	movs	r0, r0
 80012c4:	0000      	movs	r0, r0
	...

080012c8 <_ZN7Mecanum13tf2_car_speedEv>:
	br.rps_goal = (CAR_Goal.Vy + CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
}


// give current car speed
void Mecanum::tf2_car_speed(void){
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	CAR_Now.Vx = (1/4)*radius*(fl.rps_now + fr.rps_now + bl.rps_now + br.rps_now);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80012d6:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80013b0 <_ZN7Mecanum13tf2_car_speedEv+0xe8>
 80012da:	ee27 6b06 	vmul.f64	d6, d7, d6
 80012de:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 80012e0:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 80012e4:	4b35      	ldr	r3, [pc, #212]	; (80013bc <_ZN7Mecanum13tf2_car_speedEv+0xf4>)
 80012e6:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80012ea:	ee35 5b07 	vadd.f64	d5, d5, d7
 80012ee:	4b34      	ldr	r3, [pc, #208]	; (80013c0 <_ZN7Mecanum13tf2_car_speedEv+0xf8>)
 80012f0:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80012f4:	ee35 5b07 	vadd.f64	d5, d5, d7
 80012f8:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <_ZN7Mecanum13tf2_car_speedEv+0xfc>)
 80012fa:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80012fe:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001302:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	ed83 7b06 	vstr	d7, [r3, #24]
	CAR_Now.Vy = (1/4)*radius*(-fl.rps_now + fr.rps_now + bl.rps_now - br.rps_now);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001312:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80013b0 <_ZN7Mecanum13tf2_car_speedEv+0xe8>
 8001316:	ee27 6b06 	vmul.f64	d6, d7, d6
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <_ZN7Mecanum13tf2_car_speedEv+0xf4>)
 800131c:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001320:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 8001322:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001326:	ee35 5b47 	vsub.f64	d5, d5, d7
 800132a:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <_ZN7Mecanum13tf2_car_speedEv+0xf8>)
 800132c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001330:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001334:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <_ZN7Mecanum13tf2_car_speedEv+0xfc>)
 8001336:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800133a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800133e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	ed83 7b08 	vstr	d7, [r3, #32]
	CAR_Now.Omega = (1/4)*radius*(1/(a+b))*(-fl.rps_now + fr.rps_now - bl.rps_now + br.rps_now);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800134e:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80013b0 <_ZN7Mecanum13tf2_car_speedEv+0xe8>
 8001352:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001362:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001366:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800136a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800136e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <_ZN7Mecanum13tf2_car_speedEv+0xf4>)
 8001374:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 800137a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800137e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <_ZN7Mecanum13tf2_car_speedEv+0xf8>)
 8001384:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001388:	ee35 5b47 	vsub.f64	d5, d5, d7
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <_ZN7Mecanum13tf2_car_speedEv+0xfc>)
 800138e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001392:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001396:	ee26 7b07 	vmul.f64	d7, d6, d7
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	f3af 8000 	nop.w
	...
 80013b8:	24000110 	.word	0x24000110
 80013bc:	240000a0 	.word	0x240000a0
 80013c0:	240001f0 	.word	0x240001f0
 80013c4:	24000180 	.word	0x24000180

080013c8 <_Z41__static_initialization_and_destruction_0ii>:
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d107      	bne.n	80013e8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013de:	4293      	cmp	r3, r2
 80013e0:	d102      	bne.n	80013e8 <_Z41__static_initialization_and_destruction_0ii+0x20>
Mecanum mecanum;
 80013e2:	4803      	ldr	r0, [pc, #12]	; (80013f0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80013e4:	f7ff ff30 	bl	8001248 <_ZN7MecanumC1Ev>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	240005f8 	.word	0x240005f8

080013f4 <_GLOBAL__sub_I_mecanum>:
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013fc:	2001      	movs	r0, #1
 80013fe:	f7ff ffe3 	bl	80013c8 <_Z41__static_initialization_and_destruction_0ii>
 8001402:	bd80      	pop	{r7, pc}

08001404 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	4a04      	ldr	r2, [pc, #16]	; (8001444 <_ZN3ros3MsgC1Ev+0x1c>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	0800df9c 	.word	0x0800df9c

08001448 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
      data()
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ffe8 	bl	8001428 <_ZN3ros3MsgC1Ev>
 8001458:	4a06      	ldr	r2, [pc, #24]	; (8001474 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3304      	adds	r3, #4
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ffce 	bl	8001404 <_ZN3ros4TimeC1Ev>
    {
    }
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	0800df84 	.word	0x0800df84

08001478 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6859      	ldr	r1, [r3, #4]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	4413      	add	r3, r2
 8001490:	b2ca      	uxtb	r2, r1
 8001492:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	0a19      	lsrs	r1, r3, #8
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3301      	adds	r3, #1
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	4413      	add	r3, r2
 80014a2:	b2ca      	uxtb	r2, r1
 80014a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	0c19      	lsrs	r1, r3, #16
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	3302      	adds	r3, #2
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	b2ca      	uxtb	r2, r1
 80014b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	0e19      	lsrs	r1, r3, #24
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3303      	adds	r3, #3
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	4413      	add	r3, r2
 80014c6:	b2ca      	uxtb	r2, r1
 80014c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3304      	adds	r3, #4
 80014ce:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6899      	ldr	r1, [r3, #8]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	4413      	add	r3, r2
 80014da:	b2ca      	uxtb	r2, r1
 80014dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	0a19      	lsrs	r1, r3, #8
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3301      	adds	r3, #1
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	b2ca      	uxtb	r2, r1
 80014ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	0c19      	lsrs	r1, r3, #16
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	3302      	adds	r3, #2
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	4413      	add	r3, r2
 80014fe:	b2ca      	uxtb	r2, r1
 8001500:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	0e19      	lsrs	r1, r3, #24
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	3303      	adds	r3, #3
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	4413      	add	r3, r2
 8001510:	b2ca      	uxtb	r2, r1
 8001512:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	3304      	adds	r3, #4
 8001518:	60fb      	str	r3, [r7, #12]
      return offset;
 800151a:	68fb      	ldr	r3, [r7, #12]
    }
 800151c:	4618      	mov	r0, r3
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	4413      	add	r3, r2
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	3301      	adds	r3, #1
 800154c:	6839      	ldr	r1, [r7, #0]
 800154e:	440b      	add	r3, r1
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3302      	adds	r3, #2
 8001562:	6839      	ldr	r1, [r7, #0]
 8001564:	440b      	add	r3, r1
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	041b      	lsls	r3, r3, #16
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3303      	adds	r3, #3
 8001578:	6839      	ldr	r1, [r7, #0]
 800157a:	440b      	add	r3, r1
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	061b      	lsls	r3, r3, #24
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	3304      	adds	r3, #4
 800158a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	4413      	add	r3, r2
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	3301      	adds	r3, #1
 80015a2:	6839      	ldr	r1, [r7, #0]
 80015a4:	440b      	add	r3, r1
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	3302      	adds	r3, #2
 80015b8:	6839      	ldr	r1, [r7, #0]
 80015ba:	440b      	add	r3, r1
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	041b      	lsls	r3, r3, #16
 80015c0:	431a      	orrs	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3303      	adds	r3, #3
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	440b      	add	r3, r1
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	061b      	lsls	r3, r3, #24
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	3304      	adds	r3, #4
 80015e0:	60fb      	str	r3, [r7, #12]
     return offset;
 80015e2:	68fb      	ldr	r3, [r7, #12]
    }
 80015e4:	4618      	mov	r0, r3
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	0800dd40 	.word	0x0800dd40

0800160c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	0800dd50 	.word	0x0800dd50

08001628 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fef8 	bl	8001428 <_ZN3ros3MsgC1Ev>
 8001638:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	809a      	strh	r2, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a09      	ldr	r2, [pc, #36]	; (800166c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a07      	ldr	r2, [pc, #28]	; (800166c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800164e:	60da      	str	r2, [r3, #12]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a06      	ldr	r2, [pc, #24]	; (800166c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001654:	611a      	str	r2, [r3, #16]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	615a      	str	r2, [r3, #20]
    {
    }
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	0800df6c 	.word	0x0800df6c
 800166c:	0800dd74 	.word	0x0800dd74

08001670 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	8899      	ldrh	r1, [r3, #4]
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	4413      	add	r3, r2
 8001688:	b2ca      	uxtb	r2, r1
 800168a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	889b      	ldrh	r3, [r3, #4]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	b299      	uxth	r1, r3
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	3301      	adds	r3, #1
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	4413      	add	r3, r2
 800169c:	b2ca      	uxtb	r2, r1
 800169e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	3302      	adds	r3, #2
 80016a4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe fe30 	bl	8000310 <strlen>
 80016b0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	69b9      	ldr	r1, [r7, #24]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f001 fc7e 	bl	8002fbc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	3304      	adds	r3, #4
 80016c4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	18d0      	adds	r0, r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4619      	mov	r1, r3
 80016d4:	f00c f990 	bl	800d9f8 <memcpy>
      offset += length_topic_name;
 80016d8:	69fa      	ldr	r2, [r7, #28]
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	4413      	add	r3, r2
 80016de:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fe13 	bl	8000310 <strlen>
 80016ea:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	4413      	add	r3, r2
 80016f2:	6979      	ldr	r1, [r7, #20]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f001 fc61 	bl	8002fbc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3304      	adds	r3, #4
 80016fe:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	18d0      	adds	r0, r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4619      	mov	r1, r3
 800170e:	f00c f973 	bl	800d9f8 <memcpy>
      offset += length_message_type;
 8001712:	69fa      	ldr	r2, [r7, #28]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	4413      	add	r3, r2
 8001718:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe fdf6 	bl	8000310 <strlen>
 8001724:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	4413      	add	r3, r2
 800172c:	6939      	ldr	r1, [r7, #16]
 800172e:	4618      	mov	r0, r3
 8001730:	f001 fc44 	bl	8002fbc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	3304      	adds	r3, #4
 8001738:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	18d0      	adds	r0, r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4619      	mov	r1, r3
 8001748:	f00c f956 	bl	800d9f8 <memcpy>
      offset += length_md5sum;
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4413      	add	r3, r2
 8001752:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800175a:	68f9      	ldr	r1, [r7, #12]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	4413      	add	r3, r2
 8001762:	b2ca      	uxtb	r2, r1
 8001764:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	0a19      	lsrs	r1, r3, #8
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3301      	adds	r3, #1
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	4413      	add	r3, r2
 8001772:	b2ca      	uxtb	r2, r1
 8001774:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	0c19      	lsrs	r1, r3, #16
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3302      	adds	r3, #2
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	4413      	add	r3, r2
 8001782:	b2ca      	uxtb	r2, r1
 8001784:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	0e19      	lsrs	r1, r3, #24
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3303      	adds	r3, #3
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	4413      	add	r3, r2
 8001792:	b2ca      	uxtb	r2, r1
 8001794:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	61fb      	str	r3, [r7, #28]
      return offset;
 800179c:	69fb      	ldr	r3, [r7, #28]
    }
 800179e:	4618      	mov	r0, r3
 80017a0:	3720      	adds	r7, #32
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b08a      	sub	sp, #40	; 0x28
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	4413      	add	r3, r2
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b29a      	uxth	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	889b      	ldrh	r3, [r3, #4]
 80017c6:	b21a      	sxth	r2, r3
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	3301      	adds	r3, #1
 80017cc:	6839      	ldr	r1, [r7, #0]
 80017ce:	440b      	add	r3, r1
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	4313      	orrs	r3, r2
 80017d8:	b21b      	sxth	r3, r3
 80017da:	b29a      	uxth	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	3302      	adds	r3, #2
 80017e4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	441a      	add	r2, r3
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	4611      	mov	r1, r2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f001 fc00 	bl	8002ff8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	3304      	adds	r3, #4
 80017fc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	4413      	add	r3, r2
 8001808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800180a:	429a      	cmp	r2, r3
 800180c:	d20c      	bcs.n	8001828 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	441a      	add	r2, r3
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	3b01      	subs	r3, #1
 8001818:	6839      	ldr	r1, [r7, #0]
 800181a:	440b      	add	r3, r1
 800181c:	7812      	ldrb	r2, [r2, #0]
 800181e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	3301      	adds	r3, #1
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
 8001826:	e7ec      	b.n	8001802 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	4413      	add	r3, r2
 800182e:	3b01      	subs	r3, #1
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	4413      	add	r3, r2
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	3b01      	subs	r3, #1
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	441a      	add	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	4413      	add	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	441a      	add	r2, r3
 8001852:	f107 0310 	add.w	r3, r7, #16
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f001 fbcd 	bl	8002ff8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	3304      	adds	r3, #4
 8001862:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	623b      	str	r3, [r7, #32]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4413      	add	r3, r2
 800186e:	6a3a      	ldr	r2, [r7, #32]
 8001870:	429a      	cmp	r2, r3
 8001872:	d20c      	bcs.n	800188e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	441a      	add	r2, r3
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	3b01      	subs	r3, #1
 800187e:	6839      	ldr	r1, [r7, #0]
 8001880:	440b      	add	r3, r1
 8001882:	7812      	ldrb	r2, [r2, #0]
 8001884:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	3301      	adds	r3, #1
 800188a:	623b      	str	r3, [r7, #32]
 800188c:	e7ec      	b.n	8001868 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4413      	add	r3, r2
 8001894:	3b01      	subs	r3, #1
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	4413      	add	r3, r2
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	441a      	add	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4413      	add	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	441a      	add	r2, r3
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	4611      	mov	r1, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f001 fb9a 	bl	8002ff8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	3304      	adds	r3, #4
 80018c8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d20c      	bcs.n	80018f4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	441a      	add	r2, r3
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	6839      	ldr	r1, [r7, #0]
 80018e6:	440b      	add	r3, r1
 80018e8:	7812      	ldrb	r2, [r2, #0]
 80018ea:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	3301      	adds	r3, #1
 80018f0:	61fb      	str	r3, [r7, #28]
 80018f2:	e7ec      	b.n	80018ce <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4413      	add	r3, r2
 80018fa:	3b01      	subs	r3, #1
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	3b01      	subs	r3, #1
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	441a      	add	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4413      	add	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	6839      	ldr	r1, [r7, #0]
 8001922:	440a      	add	r2, r1
 8001924:	7812      	ldrb	r2, [r2, #0]
 8001926:	4313      	orrs	r3, r2
 8001928:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	3301      	adds	r3, #1
 8001930:	6839      	ldr	r1, [r7, #0]
 8001932:	440b      	add	r3, r1
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	4313      	orrs	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	3302      	adds	r3, #2
 8001942:	6839      	ldr	r1, [r7, #0]
 8001944:	440b      	add	r3, r1
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	041b      	lsls	r3, r3, #16
 800194a:	4313      	orrs	r3, r2
 800194c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	3303      	adds	r3, #3
 8001954:	6839      	ldr	r1, [r7, #0]
 8001956:	440b      	add	r3, r1
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	061b      	lsls	r3, r3, #24
 800195c:	4313      	orrs	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	3304      	adds	r3, #4
 800196a:	61bb      	str	r3, [r7, #24]
     return offset;
 800196c:	69bb      	ldr	r3, [r7, #24]
    }
 800196e:	4618      	mov	r0, r3
 8001970:	3728      	adds	r7, #40	; 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	4b03      	ldr	r3, [pc, #12]	; (8001990 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	0800dd78 	.word	0x0800dd78

08001994 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	0800dd94 	.word	0x0800dd94

080019b0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fd34 	bl	8001428 <_ZN3ros3MsgC1Ev>
 80019c0:	4a06      	ldr	r2, [pc, #24]	; (80019dc <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	711a      	strb	r2, [r3, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80019d0:	609a      	str	r2, [r3, #8]
    {
    }
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	0800df54 	.word	0x0800df54
 80019e0:	0800dd74 	.word	0x0800dd74

080019e4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	7912      	ldrb	r2, [r2, #4]
 80019fc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	3301      	adds	r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fc81 	bl	8000310 <strlen>
 8001a0e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	4413      	add	r3, r2
 8001a16:	68b9      	ldr	r1, [r7, #8]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f001 facf 	bl	8002fbc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	3304      	adds	r3, #4
 8001a22:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	18d0      	adds	r0, r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	4619      	mov	r1, r3
 8001a32:	f00b ffe1 	bl	800d9f8 <memcpy>
      offset += length_msg;
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
      return offset;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
    }
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	781a      	ldrb	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	3301      	adds	r3, #1
 8001a66:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	441a      	add	r2, r3
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f001 fabf 	bl	8002ff8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4413      	add	r3, r2
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d20c      	bcs.n	8001aaa <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	441a      	add	r2, r3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	6839      	ldr	r1, [r7, #0]
 8001a9c:	440b      	add	r3, r1
 8001a9e:	7812      	ldrb	r2, [r2, #0]
 8001aa0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e7ec      	b.n	8001a84 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	441a      	add	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4413      	add	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
     return offset;
 8001ace:	693b      	ldr	r3, [r7, #16]
    }
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	0800ddb8 	.word	0x0800ddb8

08001af4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	0800ddcc 	.word	0x0800ddcc

08001b10 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fc84 	bl	8001428 <_ZN3ros3MsgC1Ev>
 8001b20:	4a0c      	ldr	r2, [pc, #48]	; (8001b54 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	61da      	str	r2, [r3, #28]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	0800df3c 	.word	0x0800df3c

08001b58 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6859      	ldr	r1, [r3, #4]
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	b2ca      	uxtb	r2, r1
 8001b72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	0a19      	lsrs	r1, r3, #8
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	4413      	add	r3, r2
 8001b82:	b2ca      	uxtb	r2, r1
 8001b84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	0c19      	lsrs	r1, r3, #16
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	3302      	adds	r3, #2
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	b2ca      	uxtb	r2, r1
 8001b96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	0e19      	lsrs	r1, r3, #24
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	3303      	adds	r3, #3
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	b2ca      	uxtb	r2, r1
 8001ba8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	3304      	adds	r3, #4
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	6a3a      	ldr	r2, [r7, #32]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d22b      	bcs.n	8001c16 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001bcc:	6939      	ldr	r1, [r7, #16]
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b2ca      	uxtb	r2, r1
 8001bd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	0a19      	lsrs	r1, r3, #8
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	3301      	adds	r3, #1
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	b2ca      	uxtb	r2, r1
 8001be6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	0c19      	lsrs	r1, r3, #16
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	3302      	adds	r3, #2
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	b2ca      	uxtb	r2, r1
 8001bf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	0e19      	lsrs	r1, r3, #24
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	3303      	adds	r3, #3
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	b2ca      	uxtb	r2, r1
 8001c06:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	3301      	adds	r3, #1
 8001c12:	623b      	str	r3, [r7, #32]
 8001c14:	e7ce      	b.n	8001bb4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6919      	ldr	r1, [r3, #16]
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	b2ca      	uxtb	r2, r1
 8001c22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	0a19      	lsrs	r1, r3, #8
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	4413      	add	r3, r2
 8001c32:	b2ca      	uxtb	r2, r1
 8001c34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	0c19      	lsrs	r1, r3, #16
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	3302      	adds	r3, #2
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	b2ca      	uxtb	r2, r1
 8001c46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	0e19      	lsrs	r1, r3, #24
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	3303      	adds	r3, #3
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	4413      	add	r3, r2
 8001c56:	b2ca      	uxtb	r2, r1
 8001c58:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d22b      	bcs.n	8001cc6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699a      	ldr	r2, [r3, #24]
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001c7c:	68f9      	ldr	r1, [r7, #12]
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	b2ca      	uxtb	r2, r1
 8001c86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	0a19      	lsrs	r1, r3, #8
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	3301      	adds	r3, #1
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	b2ca      	uxtb	r2, r1
 8001c96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	0c19      	lsrs	r1, r3, #16
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	b2ca      	uxtb	r2, r1
 8001ca6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	0e19      	lsrs	r1, r3, #24
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	3303      	adds	r3, #3
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	b2ca      	uxtb	r2, r1
 8001cb6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	3304      	adds	r3, #4
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	61fb      	str	r3, [r7, #28]
 8001cc4:	e7ce      	b.n	8001c64 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69d9      	ldr	r1, [r3, #28]
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	b2ca      	uxtb	r2, r1
 8001cd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	0a19      	lsrs	r1, r3, #8
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	3301      	adds	r3, #1
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	b2ca      	uxtb	r2, r1
 8001ce4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	0c19      	lsrs	r1, r3, #16
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	3302      	adds	r3, #2
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	b2ca      	uxtb	r2, r1
 8001cf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	0e19      	lsrs	r1, r3, #24
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	3303      	adds	r3, #3
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	4413      	add	r3, r2
 8001d06:	b2ca      	uxtb	r2, r1
 8001d08:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001d10:	2300      	movs	r3, #0
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d228      	bcs.n	8001d70 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe faf0 	bl	8000310 <strlen>
 8001d30:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	6979      	ldr	r1, [r7, #20]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f001 f93e 	bl	8002fbc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	3304      	adds	r3, #4
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	18d0      	adds	r0, r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f00b fe4c 	bl	800d9f8 <memcpy>
      offset += length_stringsi;
 8001d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	4413      	add	r3, r2
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	61bb      	str	r3, [r7, #24]
 8001d6e:	e7d1      	b.n	8001d14 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001d72:	4618      	mov	r0, r3
 8001d74:	3728      	adds	r7, #40	; 0x28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b08e      	sub	sp, #56	; 0x38
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d94:	3301      	adds	r3, #1
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	4413      	add	r3, r2
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	021b      	lsls	r3, r3, #8
 8001d9e:	6a3a      	ldr	r2, [r7, #32]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da6:	3302      	adds	r3, #2
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	041b      	lsls	r3, r3, #16
 8001db0:	6a3a      	ldr	r2, [r7, #32]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db8:	3303      	adds	r3, #3
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	061b      	lsls	r3, r3, #24
 8001dc2:	6a3a      	ldr	r2, [r7, #32]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dca:	3304      	adds	r3, #4
 8001dcc:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	6a3a      	ldr	r2, [r7, #32]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d90a      	bls.n	8001dee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4619      	mov	r1, r3
 8001de2:	4610      	mov	r0, r2
 8001de4:	f00b fe1e 	bl	800da24 <realloc>
 8001de8:	4602      	mov	r2, r0
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a3a      	ldr	r2, [r7, #32]
 8001df2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001df4:	2300      	movs	r3, #0
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d236      	bcs.n	8001e70 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e0a:	6839      	ldr	r1, [r7, #0]
 8001e0c:	440a      	add	r2, r1
 8001e0e:	7812      	ldrb	r2, [r2, #0]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e18:	3301      	adds	r3, #1
 8001e1a:	6839      	ldr	r1, [r7, #0]
 8001e1c:	440b      	add	r3, r1
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	021b      	lsls	r3, r3, #8
 8001e22:	4313      	orrs	r3, r2
 8001e24:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2a:	3302      	adds	r3, #2
 8001e2c:	6839      	ldr	r1, [r7, #0]
 8001e2e:	440b      	add	r3, r1
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	041b      	lsls	r3, r3, #16
 8001e34:	4313      	orrs	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e3c:	3303      	adds	r3, #3
 8001e3e:	6839      	ldr	r1, [r7, #0]
 8001e40:	440b      	add	r3, r1
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	061b      	lsls	r3, r3, #24
 8001e46:	4313      	orrs	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e52:	3304      	adds	r3, #4
 8001e54:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	3208      	adds	r2, #8
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e6e:	e7c3      	b.n	8001df8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	4413      	add	r3, r2
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	4413      	add	r3, r2
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e8e:	3302      	adds	r3, #2
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	4413      	add	r3, r2
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	041b      	lsls	r3, r3, #16
 8001e98:	69fa      	ldr	r2, [r7, #28]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea0:	3303      	adds	r3, #3
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	061b      	lsls	r3, r3, #24
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d90a      	bls.n	8001ed6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699a      	ldr	r2, [r3, #24]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4610      	mov	r0, r2
 8001ecc:	f00b fdaa 	bl	800da24 <realloc>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69fa      	ldr	r2, [r7, #28]
 8001eda:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001edc:	2300      	movs	r3, #0
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d236      	bcs.n	8001f58 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ef2:	6839      	ldr	r1, [r7, #0]
 8001ef4:	440a      	add	r2, r1
 8001ef6:	7812      	ldrb	r2, [r2, #0]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f00:	3301      	adds	r3, #1
 8001f02:	6839      	ldr	r1, [r7, #0]
 8001f04:	440b      	add	r3, r1
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f12:	3302      	adds	r3, #2
 8001f14:	6839      	ldr	r1, [r7, #0]
 8001f16:	440b      	add	r3, r1
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	041b      	lsls	r3, r3, #16
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f24:	3303      	adds	r3, #3
 8001f26:	6839      	ldr	r1, [r7, #0]
 8001f28:	440b      	add	r3, r1
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	061b      	lsls	r3, r3, #24
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699a      	ldr	r2, [r3, #24]
 8001f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	3214      	adds	r2, #20
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f52:	3301      	adds	r3, #1
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f56:	e7c3      	b.n	8001ee0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f64:	3301      	adds	r3, #1
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	4413      	add	r3, r2
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f76:	3302      	adds	r3, #2
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	041b      	lsls	r3, r3, #16
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f88:	3303      	adds	r3, #3
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	061b      	lsls	r3, r3, #24
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d90a      	bls.n	8001fbe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	f00b fd36 	bl	800da24 <realloc>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d23f      	bcs.n	8002052 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	441a      	add	r2, r3
 8001fd8:	f107 030c 	add.w	r3, r7, #12
 8001fdc:	4611      	mov	r1, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f001 f80a 	bl	8002ff8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
 8001fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d20c      	bcs.n	8002014 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	441a      	add	r2, r3
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	3b01      	subs	r3, #1
 8002004:	6839      	ldr	r1, [r7, #0]
 8002006:	440b      	add	r3, r1
 8002008:	7812      	ldrb	r2, [r2, #0]
 800200a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	3301      	adds	r3, #1
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
 8002012:	e7ec      	b.n	8001fee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002014:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4413      	add	r3, r2
 800201a:	3b01      	subs	r3, #1
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	4413      	add	r3, r2
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002026:	3b01      	subs	r3, #1
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	441a      	add	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4413      	add	r3, r2
 8002036:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800203c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	3220      	adds	r2, #32
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800204a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204c:	3301      	adds	r3, #1
 800204e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002050:	e7ba      	b.n	8001fc8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002054:	4618      	mov	r0, r3
 8002056:	3738      	adds	r7, #56	; 0x38
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	0800dea8 	.word	0x0800dea8

08002078 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	4b03      	ldr	r3, [pc, #12]	; (8002090 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	0800ddf0 	.word	0x0800ddf0

08002094 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	611a      	str	r2, [r3, #16]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68d8      	ldr	r0, [r3, #12]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6891      	ldr	r1, [r2, #8]
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	4798      	blx	r3
 80020e0:	4603      	mov	r3, r0
  };
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
  }
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a42      	ldr	r2, [pc, #264]	; (8002220 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d068      	beq.n	80021ec <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a40      	ldr	r2, [pc, #256]	; (8002224 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d061      	beq.n	80021ec <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a3d      	ldr	r2, [pc, #244]	; (8002228 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d05a      	beq.n	80021ec <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a3b      	ldr	r2, [pc, #236]	; (800222c <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d053      	beq.n	80021ec <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a38      	ldr	r2, [pc, #224]	; (8002230 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d04c      	beq.n	80021ec <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a36      	ldr	r2, [pc, #216]	; (8002234 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d045      	beq.n	80021ec <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a33      	ldr	r2, [pc, #204]	; (8002238 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d03e      	beq.n	80021ec <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a31      	ldr	r2, [pc, #196]	; (800223c <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d037      	beq.n	80021ec <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a2e      	ldr	r2, [pc, #184]	; (8002240 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d030      	beq.n	80021ec <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a2c      	ldr	r2, [pc, #176]	; (8002244 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d029      	beq.n	80021ec <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a29      	ldr	r2, [pc, #164]	; (8002248 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d022      	beq.n	80021ec <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a27      	ldr	r2, [pc, #156]	; (800224c <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d01b      	beq.n	80021ec <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a24      	ldr	r2, [pc, #144]	; (8002250 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d014      	beq.n	80021ec <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a22      	ldr	r2, [pc, #136]	; (8002254 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d00d      	beq.n	80021ec <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a1f      	ldr	r2, [pc, #124]	; (8002258 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d006      	beq.n	80021ec <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1d      	ldr	r2, [pc, #116]	; (800225c <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d109      	bne.n	8002200 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80021fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021fe:	e008      	b.n	8002212 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800220e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40020010 	.word	0x40020010
 8002224:	40020028 	.word	0x40020028
 8002228:	40020040 	.word	0x40020040
 800222c:	40020058 	.word	0x40020058
 8002230:	40020070 	.word	0x40020070
 8002234:	40020088 	.word	0x40020088
 8002238:	400200a0 	.word	0x400200a0
 800223c:	400200b8 	.word	0x400200b8
 8002240:	40020410 	.word	0x40020410
 8002244:	40020428 	.word	0x40020428
 8002248:	40020440 	.word	0x40020440
 800224c:	40020458 	.word	0x40020458
 8002250:	40020470 	.word	0x40020470
 8002254:	40020488 	.word	0x40020488
 8002258:	400204a0 	.word	0x400204a0
 800225c:	400204b8 	.word	0x400204b8

08002260 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <_ZN13STM32HardwareC1Ev+0x34>)
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
    }
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	24000474 	.word	0x24000474

08002298 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f804 	bl	80022ae <_ZN13STM32Hardware10reset_rbufEv>
    }
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3304      	adds	r3, #4
 80022be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022c2:	4619      	mov	r1, r3
 80022c4:	f009 fb1a 	bl	800b8fc <HAL_UART_Receive_DMA>
    }
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <_ZN13STM32Hardware4readEv>:

    int read(){
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80022d8:	f04f 33ff 	mov.w	r3, #4294967295
 80022dc:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff ff0d 	bl	8002104 <_ZN13STM32Hardware10getRdmaIndEv>
 80022ea:	4603      	mov	r3, r0
 80022ec:	429c      	cmp	r4, r3
 80022ee:	bf14      	ite	ne
 80022f0:	2301      	movne	r3, #1
 80022f2:	2300      	moveq	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d012      	beq.n	8002320 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002300:	1c59      	adds	r1, r3, #1
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	4413      	add	r3, r2
 800230c:	791b      	ldrb	r3, [r3, #4]
 800230e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002316:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      }
      return c;
 8002320:	68fb      	ldr	r3, [r7, #12]
    }
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	bd90      	pop	{r4, r7, pc}
	...

0800232c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800233c:	2b20      	cmp	r3, #32
 800233e:	d108      	bne.n	8002352 <_ZN13STM32Hardware5flushEv+0x26>
 8002340:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	f083 0301 	eor.w	r3, r3, #1
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <_ZN13STM32Hardware5flushEv+0x26>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <_ZN13STM32Hardware5flushEv+0x28>
 8002352:	2300      	movs	r3, #0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d03f      	beq.n	80023d8 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002358:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <_ZN13STM32Hardware5flushEv+0xb4>)
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800236a:	429a      	cmp	r2, r3
 800236c:	d031      	beq.n	80023d2 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800237a:	429a      	cmp	r2, r3
 800237c:	d20a      	bcs.n	8002394 <_ZN13STM32Hardware5flushEv+0x68>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002384:	b29a      	uxth	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800238c:	b29b      	uxth	r3, r3
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	b29b      	uxth	r3, r3
 8002392:	e006      	b.n	80023a2 <_ZN13STM32Hardware5flushEv+0x76>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800239a:	b29b      	uxth	r3, r3
 800239c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80023ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	89fa      	ldrh	r2, [r7, #14]
 80023b8:	4619      	mov	r1, r3
 80023ba:	f009 fa0d 	bl	800b7d8 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 80023c4:	89fb      	ldrh	r3, [r7, #14]
 80023c6:	4413      	add	r3, r2
 80023c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
        }
        mutex = false;
 80023d2:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <_ZN13STM32Hardware5flushEv+0xb4>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
      }
    }
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	24000640 	.word	0x24000640

080023e4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
      int n = length;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023fa:	bfa8      	it	ge
 80023fc:	f44f 6380 	movge.w	r3, #1024	; 0x400
 8002400:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002408:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	4293      	cmp	r3, r2
 8002410:	bf28      	it	cs
 8002412:	4613      	movcs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800241c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4413      	add	r3, r2
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	68b9      	ldr	r1, [r7, #8]
 8002428:	4618      	mov	r0, r3
 800242a:	f00b fae5 	bl	800d9f8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	4413      	add	r3, r2
 8002438:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

      if(n != n_tail){
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	429a      	cmp	r2, r3
 8002448:	d00b      	beq.n	8002462 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	18d1      	adds	r1, r2, r3
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	461a      	mov	r2, r3
 800245e:	f00b facb 	bl	800d9f8 <memcpy>
      }

      flush();
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f7ff ff62 	bl	800232c <_ZN13STM32Hardware5flushEv>
    }
 8002468:	bf00      	nop
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	f002 fa8c 	bl	8004994 <HAL_GetTick>
 800247c:	4603      	mov	r3, r0
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe ffc8 	bl	8001428 <_ZN3ros3MsgC1Ev>
 8002498:	4a0e      	ldr	r2, [pc, #56]	; (80024d4 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	f04f 0300 	mov.w	r3, #0
 80024b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	0800def8 	.word	0x0800def8

080024d8 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80024d8:	b480      	push	{r7}
 80024da:	b08b      	sub	sp, #44	; 0x2c
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80024ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80024f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f6:	6838      	ldr	r0, [r7, #0]
 80024f8:	4401      	add	r1, r0
 80024fa:	b2d3      	uxtb	r3, r2
 80024fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80024fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	0a02      	lsrs	r2, r0, #8
 800250c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002510:	0a0b      	lsrs	r3, r1, #8
 8002512:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002514:	3101      	adds	r1, #1
 8002516:	6838      	ldr	r0, [r7, #0]
 8002518:	4401      	add	r1, r0
 800251a:	b2d3      	uxtb	r3, r2
 800251c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800251e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	f04f 0300 	mov.w	r3, #0
 800252a:	0c02      	lsrs	r2, r0, #16
 800252c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002530:	0c0b      	lsrs	r3, r1, #16
 8002532:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002534:	3102      	adds	r1, #2
 8002536:	6838      	ldr	r0, [r7, #0]
 8002538:	4401      	add	r1, r0
 800253a:	b2d3      	uxtb	r3, r2
 800253c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800253e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	0e02      	lsrs	r2, r0, #24
 800254c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002550:	0e0b      	lsrs	r3, r1, #24
 8002552:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002554:	3103      	adds	r1, #3
 8002556:	6838      	ldr	r0, [r7, #0]
 8002558:	4401      	add	r1, r0
 800255a:	b2d3      	uxtb	r3, r2
 800255c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800255e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	000a      	movs	r2, r1
 800256c:	2300      	movs	r3, #0
 800256e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002570:	3104      	adds	r1, #4
 8002572:	6838      	ldr	r0, [r7, #0]
 8002574:	4401      	add	r1, r0
 8002576:	b2d3      	uxtb	r3, r2
 8002578:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800257a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	0a0a      	lsrs	r2, r1, #8
 8002588:	2300      	movs	r3, #0
 800258a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800258c:	3105      	adds	r1, #5
 800258e:	6838      	ldr	r0, [r7, #0]
 8002590:	4401      	add	r1, r0
 8002592:	b2d3      	uxtb	r3, r2
 8002594:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002596:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	0c0a      	lsrs	r2, r1, #16
 80025a4:	2300      	movs	r3, #0
 80025a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025a8:	3106      	adds	r1, #6
 80025aa:	6838      	ldr	r0, [r7, #0]
 80025ac:	4401      	add	r1, r0
 80025ae:	b2d3      	uxtb	r3, r2
 80025b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80025b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	0e0a      	lsrs	r2, r1, #24
 80025c0:	2300      	movs	r3, #0
 80025c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025c4:	3107      	adds	r1, #7
 80025c6:	6838      	ldr	r0, [r7, #0]
 80025c8:	4401      	add	r1, r0
 80025ca:	b2d3      	uxtb	r3, r2
 80025cc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	3308      	adds	r3, #8
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80025da:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80025de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025e4:	6838      	ldr	r0, [r7, #0]
 80025e6:	4401      	add	r1, r0
 80025e8:	b2d3      	uxtb	r3, r2
 80025ea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80025ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	0a02      	lsrs	r2, r0, #8
 80025fa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80025fe:	0a0b      	lsrs	r3, r1, #8
 8002600:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002602:	3101      	adds	r1, #1
 8002604:	6838      	ldr	r0, [r7, #0]
 8002606:	4401      	add	r1, r0
 8002608:	b2d3      	uxtb	r3, r2
 800260a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800260c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	0c02      	lsrs	r2, r0, #16
 800261a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800261e:	0c0b      	lsrs	r3, r1, #16
 8002620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002622:	3102      	adds	r1, #2
 8002624:	6838      	ldr	r0, [r7, #0]
 8002626:	4401      	add	r1, r0
 8002628:	b2d3      	uxtb	r3, r2
 800262a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800262c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	0e02      	lsrs	r2, r0, #24
 800263a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800263e:	0e0b      	lsrs	r3, r1, #24
 8002640:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002642:	3103      	adds	r1, #3
 8002644:	6838      	ldr	r0, [r7, #0]
 8002646:	4401      	add	r1, r0
 8002648:	b2d3      	uxtb	r3, r2
 800264a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800264c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	000a      	movs	r2, r1
 800265a:	2300      	movs	r3, #0
 800265c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800265e:	3104      	adds	r1, #4
 8002660:	6838      	ldr	r0, [r7, #0]
 8002662:	4401      	add	r1, r0
 8002664:	b2d3      	uxtb	r3, r2
 8002666:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002668:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	0a0a      	lsrs	r2, r1, #8
 8002676:	2300      	movs	r3, #0
 8002678:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800267a:	3105      	adds	r1, #5
 800267c:	6838      	ldr	r0, [r7, #0]
 800267e:	4401      	add	r1, r0
 8002680:	b2d3      	uxtb	r3, r2
 8002682:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002684:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	0c0a      	lsrs	r2, r1, #16
 8002692:	2300      	movs	r3, #0
 8002694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002696:	3106      	adds	r1, #6
 8002698:	6838      	ldr	r0, [r7, #0]
 800269a:	4401      	add	r1, r0
 800269c:	b2d3      	uxtb	r3, r2
 800269e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80026a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	0e0a      	lsrs	r2, r1, #24
 80026ae:	2300      	movs	r3, #0
 80026b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b2:	3107      	adds	r1, #7
 80026b4:	6838      	ldr	r0, [r7, #0]
 80026b6:	4401      	add	r1, r0
 80026b8:	b2d3      	uxtb	r3, r2
 80026ba:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	3308      	adds	r3, #8
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80026c8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80026cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026d2:	6838      	ldr	r0, [r7, #0]
 80026d4:	4401      	add	r1, r0
 80026d6:	b2d3      	uxtb	r3, r2
 80026d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80026da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	0a02      	lsrs	r2, r0, #8
 80026e8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80026ec:	0a0b      	lsrs	r3, r1, #8
 80026ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f0:	3101      	adds	r1, #1
 80026f2:	6838      	ldr	r0, [r7, #0]
 80026f4:	4401      	add	r1, r0
 80026f6:	b2d3      	uxtb	r3, r2
 80026f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80026fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	0c02      	lsrs	r2, r0, #16
 8002708:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800270c:	0c0b      	lsrs	r3, r1, #16
 800270e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002710:	3102      	adds	r1, #2
 8002712:	6838      	ldr	r0, [r7, #0]
 8002714:	4401      	add	r1, r0
 8002716:	b2d3      	uxtb	r3, r2
 8002718:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800271a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	0e02      	lsrs	r2, r0, #24
 8002728:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800272c:	0e0b      	lsrs	r3, r1, #24
 800272e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002730:	3103      	adds	r1, #3
 8002732:	6838      	ldr	r0, [r7, #0]
 8002734:	4401      	add	r1, r0
 8002736:	b2d3      	uxtb	r3, r2
 8002738:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800273a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	000a      	movs	r2, r1
 8002748:	2300      	movs	r3, #0
 800274a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800274c:	3104      	adds	r1, #4
 800274e:	6838      	ldr	r0, [r7, #0]
 8002750:	4401      	add	r1, r0
 8002752:	b2d3      	uxtb	r3, r2
 8002754:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002756:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	0a0a      	lsrs	r2, r1, #8
 8002764:	2300      	movs	r3, #0
 8002766:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002768:	3105      	adds	r1, #5
 800276a:	6838      	ldr	r0, [r7, #0]
 800276c:	4401      	add	r1, r0
 800276e:	b2d3      	uxtb	r3, r2
 8002770:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002772:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	0c0a      	lsrs	r2, r1, #16
 8002780:	2300      	movs	r3, #0
 8002782:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002784:	3106      	adds	r1, #6
 8002786:	6838      	ldr	r0, [r7, #0]
 8002788:	4401      	add	r1, r0
 800278a:	b2d3      	uxtb	r3, r2
 800278c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800278e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	0e0a      	lsrs	r2, r1, #24
 800279c:	2300      	movs	r3, #0
 800279e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a0:	3107      	adds	r1, #7
 80027a2:	6838      	ldr	r0, [r7, #0]
 80027a4:	4401      	add	r1, r0
 80027a6:	b2d3      	uxtb	r3, r2
 80027a8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	3308      	adds	r3, #8
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80027b2:	4618      	mov	r0, r3
 80027b4:	372c      	adds	r7, #44	; 0x2c
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80027be:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80027c2:	b0eb      	sub	sp, #428	; 0x1ac
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80027ca:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80027e0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80027e4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80027e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027ec:	4413      	add	r3, r2
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2200      	movs	r2, #0
 80027f4:	461c      	mov	r4, r3
 80027f6:	4615      	mov	r5, r2
 80027f8:	ea40 0804 	orr.w	r8, r0, r4
 80027fc:	ea41 0905 	orr.w	r9, r1, r5
 8002800:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002804:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002808:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002812:	4413      	add	r3, r2
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2200      	movs	r2, #0
 800281a:	469a      	mov	sl, r3
 800281c:	4693      	mov	fp, r2
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800282a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800282e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002832:	ea40 0402 	orr.w	r4, r0, r2
 8002836:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800283a:	430b      	orrs	r3, r1
 800283c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002840:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002844:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002848:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800284c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002850:	1c9a      	adds	r2, r3, #2
 8002852:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002856:	4413      	add	r3, r2
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2200      	movs	r2, #0
 800285e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002862:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002872:	464c      	mov	r4, r9
 8002874:	0423      	lsls	r3, r4, #16
 8002876:	4644      	mov	r4, r8
 8002878:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800287c:	4644      	mov	r4, r8
 800287e:	0422      	lsls	r2, r4, #16
 8002880:	ea40 0402 	orr.w	r4, r0, r2
 8002884:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002888:	430b      	orrs	r3, r1
 800288a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800288e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002892:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002896:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800289a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800289e:	1cda      	adds	r2, r3, #3
 80028a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028a4:	4413      	add	r3, r2
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2200      	movs	r2, #0
 80028ac:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80028b0:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80028b4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80028b8:	4623      	mov	r3, r4
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80028c0:	4623      	mov	r3, r4
 80028c2:	061b      	lsls	r3, r3, #24
 80028c4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80028c8:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80028cc:	4623      	mov	r3, r4
 80028ce:	4303      	orrs	r3, r0
 80028d0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80028d4:	462b      	mov	r3, r5
 80028d6:	430b      	orrs	r3, r1
 80028d8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80028dc:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80028e0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80028e4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80028e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028ec:	1d1a      	adds	r2, r3, #4
 80028ee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028f2:	4413      	add	r3, r2
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2200      	movs	r2, #0
 80028fa:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80028fe:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800290e:	0023      	movs	r3, r4
 8002910:	2200      	movs	r2, #0
 8002912:	ea40 0402 	orr.w	r4, r0, r2
 8002916:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800291a:	430b      	orrs	r3, r1
 800291c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002920:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002924:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002928:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800292c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002930:	1d5a      	adds	r2, r3, #5
 8002932:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002936:	4413      	add	r3, r2
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2200      	movs	r2, #0
 800293e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002942:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	f04f 0300 	mov.w	r3, #0
 800294e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002952:	0223      	lsls	r3, r4, #8
 8002954:	2200      	movs	r2, #0
 8002956:	ea40 0402 	orr.w	r4, r0, r2
 800295a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800295e:	430b      	orrs	r3, r1
 8002960:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002964:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002968:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800296c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002970:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002974:	1d9a      	adds	r2, r3, #6
 8002976:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800297a:	4413      	add	r3, r2
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2200      	movs	r2, #0
 8002982:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002986:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002996:	0423      	lsls	r3, r4, #16
 8002998:	2200      	movs	r2, #0
 800299a:	ea40 0402 	orr.w	r4, r0, r2
 800299e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80029a2:	430b      	orrs	r3, r1
 80029a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029a8:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80029ac:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80029b0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029b8:	1dda      	adds	r2, r3, #7
 80029ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029be:	4413      	add	r3, r2
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2200      	movs	r2, #0
 80029c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80029ca:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80029da:	0623      	lsls	r3, r4, #24
 80029dc:	2200      	movs	r2, #0
 80029de:	ea40 0402 	orr.w	r4, r0, r2
 80029e2:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80029e6:	430b      	orrs	r3, r1
 80029e8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80029ec:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80029f0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80029f4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029f8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80029fc:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002a00:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a04:	3308      	adds	r3, #8
 8002a06:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a16:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a1a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002a1e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a22:	4413      	add	r3, r2
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002a2e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002a32:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002a36:	4623      	mov	r3, r4
 8002a38:	4303      	orrs	r3, r0
 8002a3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002a3e:	462b      	mov	r3, r5
 8002a40:	430b      	orrs	r3, r1
 8002a42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a46:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002a4a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a4e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a52:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a5c:	4413      	add	r3, r2
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2200      	movs	r2, #0
 8002a64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002a68:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002a78:	464c      	mov	r4, r9
 8002a7a:	0223      	lsls	r3, r4, #8
 8002a7c:	4644      	mov	r4, r8
 8002a7e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002a82:	4644      	mov	r4, r8
 8002a84:	0222      	lsls	r2, r4, #8
 8002a86:	ea40 0402 	orr.w	r4, r0, r2
 8002a8a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002a94:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002a98:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a9c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002aa0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002aa4:	1c9a      	adds	r2, r3, #2
 8002aa6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002aaa:	4413      	add	r3, r2
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ab6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002ac6:	464c      	mov	r4, r9
 8002ac8:	0423      	lsls	r3, r4, #16
 8002aca:	4644      	mov	r4, r8
 8002acc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002ad0:	4644      	mov	r4, r8
 8002ad2:	0422      	lsls	r2, r4, #16
 8002ad4:	ea40 0402 	orr.w	r4, r0, r2
 8002ad8:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002adc:	430b      	orrs	r3, r1
 8002ade:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ae2:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002ae6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002aea:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002aee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002af2:	1cda      	adds	r2, r3, #3
 8002af4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002af8:	4413      	add	r3, r2
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2200      	movs	r2, #0
 8002b00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b04:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b08:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002b0c:	4623      	mov	r3, r4
 8002b0e:	0a1b      	lsrs	r3, r3, #8
 8002b10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002b14:	4623      	mov	r3, r4
 8002b16:	061b      	lsls	r3, r3, #24
 8002b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b1c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002b20:	4623      	mov	r3, r4
 8002b22:	4303      	orrs	r3, r0
 8002b24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b28:	462b      	mov	r3, r5
 8002b2a:	430b      	orrs	r3, r1
 8002b2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b30:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002b34:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002b38:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b3c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b40:	1d1a      	adds	r2, r3, #4
 8002b42:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b46:	4413      	add	r3, r2
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b52:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002b62:	0023      	movs	r3, r4
 8002b64:	2200      	movs	r2, #0
 8002b66:	ea40 0402 	orr.w	r4, r0, r2
 8002b6a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002b74:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002b78:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002b7c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b80:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b84:	1d5a      	adds	r2, r3, #5
 8002b86:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b8a:	4413      	add	r3, r2
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2200      	movs	r2, #0
 8002b92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b96:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002ba6:	0223      	lsls	r3, r4, #8
 8002ba8:	2200      	movs	r2, #0
 8002baa:	ea40 0402 	orr.w	r4, r0, r2
 8002bae:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002bb2:	430b      	orrs	r3, r1
 8002bb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bb8:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002bbc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002bc0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002bc4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bc8:	1d9a      	adds	r2, r3, #6
 8002bca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bce:	4413      	add	r3, r2
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002bda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002bea:	0423      	lsls	r3, r4, #16
 8002bec:	2200      	movs	r2, #0
 8002bee:	ea40 0402 	orr.w	r4, r0, r2
 8002bf2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002bf6:	430b      	orrs	r3, r1
 8002bf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002bfc:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002c00:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002c04:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c08:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c0c:	1dda      	adds	r2, r3, #7
 8002c0e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c12:	4413      	add	r3, r2
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002c2e:	0623      	lsls	r3, r4, #24
 8002c30:	2200      	movs	r2, #0
 8002c32:	ea40 0402 	orr.w	r4, r0, r2
 8002c36:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002c3a:	430b      	orrs	r3, r1
 8002c3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002c40:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002c44:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002c48:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c4c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002c50:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002c54:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c58:	3308      	adds	r3, #8
 8002c5a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c6a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002c6e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002c72:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c76:	4413      	add	r3, r2
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c82:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002c86:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002c8a:	4623      	mov	r3, r4
 8002c8c:	4303      	orrs	r3, r0
 8002c8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c90:	462b      	mov	r3, r5
 8002c92:	430b      	orrs	r3, r1
 8002c94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c96:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002c9a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c9e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ca2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cac:	4413      	add	r3, r2
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	673b      	str	r3, [r7, #112]	; 0x70
 8002cb6:	677a      	str	r2, [r7, #116]	; 0x74
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002cc4:	464c      	mov	r4, r9
 8002cc6:	0223      	lsls	r3, r4, #8
 8002cc8:	4644      	mov	r4, r8
 8002cca:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002cce:	4644      	mov	r4, r8
 8002cd0:	0222      	lsls	r2, r4, #8
 8002cd2:	ea40 0402 	orr.w	r4, r0, r2
 8002cd6:	66bc      	str	r4, [r7, #104]	; 0x68
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cdc:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002ce0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ce4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ce8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cec:	1c9a      	adds	r2, r3, #2
 8002cee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cf2:	4413      	add	r3, r2
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	663b      	str	r3, [r7, #96]	; 0x60
 8002cfc:	667a      	str	r2, [r7, #100]	; 0x64
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d0a:	464c      	mov	r4, r9
 8002d0c:	0423      	lsls	r3, r4, #16
 8002d0e:	4644      	mov	r4, r8
 8002d10:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002d14:	4644      	mov	r4, r8
 8002d16:	0422      	lsls	r2, r4, #16
 8002d18:	ea40 0402 	orr.w	r4, r0, r2
 8002d1c:	65bc      	str	r4, [r7, #88]	; 0x58
 8002d1e:	430b      	orrs	r3, r1
 8002d20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d22:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002d26:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d2a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d2e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d32:	1cda      	adds	r2, r3, #3
 8002d34:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d38:	4413      	add	r3, r2
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2200      	movs	r2, #0
 8002d40:	653b      	str	r3, [r7, #80]	; 0x50
 8002d42:	657a      	str	r2, [r7, #84]	; 0x54
 8002d44:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002d48:	4623      	mov	r3, r4
 8002d4a:	0a1b      	lsrs	r3, r3, #8
 8002d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d4e:	4623      	mov	r3, r4
 8002d50:	061b      	lsls	r3, r3, #24
 8002d52:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d54:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002d58:	4623      	mov	r3, r4
 8002d5a:	4303      	orrs	r3, r0
 8002d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d5e:	462b      	mov	r3, r5
 8002d60:	430b      	orrs	r3, r1
 8002d62:	647b      	str	r3, [r7, #68]	; 0x44
 8002d64:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002d68:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002d6c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d70:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d74:	1d1a      	adds	r2, r3, #4
 8002d76:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d7a:	4413      	add	r3, r2
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2200      	movs	r2, #0
 8002d82:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002d90:	0023      	movs	r3, r4
 8002d92:	2200      	movs	r2, #0
 8002d94:	ea40 0402 	orr.w	r4, r0, r2
 8002d98:	633c      	str	r4, [r7, #48]	; 0x30
 8002d9a:	430b      	orrs	r3, r1
 8002d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d9e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002da2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002da6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002daa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dae:	1d5a      	adds	r2, r3, #5
 8002db0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002db4:	4413      	add	r3, r2
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2200      	movs	r2, #0
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002dca:	0223      	lsls	r3, r4, #8
 8002dcc:	2200      	movs	r2, #0
 8002dce:	ea40 0402 	orr.w	r4, r0, r2
 8002dd2:	623c      	str	r4, [r7, #32]
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002ddc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002de0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002de4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002de8:	3306      	adds	r3, #6
 8002dea:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002dee:	4413      	add	r3, r2
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2200      	movs	r2, #0
 8002df6:	61bb      	str	r3, [r7, #24]
 8002df8:	61fa      	str	r2, [r7, #28]
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	69bc      	ldr	r4, [r7, #24]
 8002e04:	0423      	lsls	r3, r4, #16
 8002e06:	2200      	movs	r2, #0
 8002e08:	ea40 0402 	orr.w	r4, r0, r2
 8002e0c:	613c      	str	r4, [r7, #16]
 8002e0e:	430b      	orrs	r3, r1
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002e16:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002e1a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e1e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e22:	3307      	adds	r3, #7
 8002e24:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002e28:	4413      	add	r3, r2
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2200      	movs	r2, #0
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	60fa      	str	r2, [r7, #12]
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	68bc      	ldr	r4, [r7, #8]
 8002e3e:	0623      	lsls	r3, r4, #24
 8002e40:	2200      	movs	r2, #0
 8002e42:	ea40 0402 	orr.w	r4, r0, r2
 8002e46:	603c      	str	r4, [r7, #0]
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	607b      	str	r3, [r7, #4]
 8002e4c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002e50:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002e54:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002e58:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002e5c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002e60:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e64:	3308      	adds	r3, #8
 8002e66:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002e6a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002e74:	46bd      	mov	sp, r7
 8002e76:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e7a:	4770      	bx	lr

08002e7c <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	0800de14 	.word	0x0800de14

08002e98 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	4b03      	ldr	r3, [pc, #12]	; (8002eb0 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	0800de28 	.word	0x0800de28

08002eb4 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE>:

geometry_msgs::Point car_speed;
ros::Subscriber<geometry_msgs::Point> mecanum_sub("mecanum_toSTM", ROS::mecanum_callback);
ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);

void ROS::mecanum_callback(const geometry_msgs::Point &msgs){
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
	mecanum.CAR_Goal.Vx = msgs.x;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ec2:	490b      	ldr	r1, [pc, #44]	; (8002ef0 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8002ec4:	e9c1 2300 	strd	r2, r3, [r1]
	mecanum.CAR_Goal.Vy = msgs.y;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002ece:	4908      	ldr	r1, [pc, #32]	; (8002ef0 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8002ed0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	mecanum.CAR_Goal.Omega = msgs.z;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002eda:	4905      	ldr	r1, [pc, #20]	; (8002ef0 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8002edc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	mecanum.run();
 8002ee0:	4803      	ldr	r0, [pc, #12]	; (8002ef0 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8002ee2:	f7fe f9e3 	bl	80012ac <_ZN7Mecanum3runEv>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	240005f8 	.word	0x240005f8

08002ef4 <_ZN3ROS11pub_car_velEv>:

 void ROS::pub_car_vel(void){
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
 	car_speed.x = mecanum.CAR_Now.Vx	;
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <_ZN3ROS11pub_car_velEv+0x34>)
 8002efa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002efe:	490b      	ldr	r1, [pc, #44]	; (8002f2c <_ZN3ROS11pub_car_velEv+0x38>)
 8002f00:	e9c1 2302 	strd	r2, r3, [r1, #8]
 	car_speed.y = mecanum.CAR_Now.Vy;
 8002f04:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <_ZN3ROS11pub_car_velEv+0x34>)
 8002f06:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002f0a:	4908      	ldr	r1, [pc, #32]	; (8002f2c <_ZN3ROS11pub_car_velEv+0x38>)
 8002f0c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 	car_speed.z = mecanum.CAR_Now.Omega;
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <_ZN3ROS11pub_car_velEv+0x34>)
 8002f12:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002f16:	4905      	ldr	r1, [pc, #20]	; (8002f2c <_ZN3ROS11pub_car_velEv+0x38>)
 8002f18:	e9c1 2306 	strd	r2, r3, [r1, #24]
 	mecanum_pub.publish(&car_speed);
 8002f1c:	4903      	ldr	r1, [pc, #12]	; (8002f2c <_ZN3ROS11pub_car_velEv+0x38>)
 8002f1e:	4804      	ldr	r0, [pc, #16]	; (8002f30 <_ZN3ROS11pub_car_velEv+0x3c>)
 8002f20:	f7ff f8cf 	bl	80020c2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
 }
 8002f24:	bf00      	nop
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	240005f8 	.word	0x240005f8
 8002f2c:	24001780 	.word	0x24001780
 8002f30:	240017d8 	.word	0x240017d8

08002f34 <_ZN3ROS5setupEv>:


void ROS::setup(void){
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
	nh.initNode();
 8002f38:	4806      	ldr	r0, [pc, #24]	; (8002f54 <_ZN3ROS5setupEv+0x20>)
 8002f3a:	f000 f95d 	bl	80031f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>

    nh.subscribe(mecanum_sub);
 8002f3e:	4906      	ldr	r1, [pc, #24]	; (8002f58 <_ZN3ROS5setupEv+0x24>)
 8002f40:	4804      	ldr	r0, [pc, #16]	; (8002f54 <_ZN3ROS5setupEv+0x20>)
 8002f42:	f000 f982 	bl	800324a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>
    nh.advertise(mecanum_pub);
 8002f46:	4905      	ldr	r1, [pc, #20]	; (8002f5c <_ZN3ROS5setupEv+0x28>)
 8002f48:	4802      	ldr	r0, [pc, #8]	; (8002f54 <_ZN3ROS5setupEv+0x20>)
 8002f4a:	f000 f9a9 	bl	80032a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	24000644 	.word	0x24000644
 8002f58:	240017a0 	.word	0x240017a0
 8002f5c:	240017d8 	.word	0x240017d8

08002f60 <_ZN3ROS4loopEv>:

void ROS::loop(void){
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8002f64:	4802      	ldr	r0, [pc, #8]	; (8002f70 <_ZN3ROS4loopEv+0x10>)
 8002f66:	f000 f9cb 	bl	8003300 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	24000644 	.word	0x24000644

08002f74 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8002f7c:	4805      	ldr	r0, [pc, #20]	; (8002f94 <HAL_UART_TxCpltCallback+0x20>)
 8002f7e:	f000 fc30 	bl	80037e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8002f82:	4603      	mov	r3, r0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff f9d1 	bl	800232c <_ZN13STM32Hardware5flushEv>
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	24000644 	.word	0x24000644

08002f98 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8002fa0:	4805      	ldr	r0, [pc, #20]	; (8002fb8 <HAL_UART_RxCpltCallback+0x20>)
 8002fa2:	f000 fc1e 	bl	80037e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff f980 	bl	80022ae <_ZN13STM32Hardware10reset_rbufEv>
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	24000644 	.word	0x24000644

08002fbc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d80d      	bhi.n	8002fec <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	fa22 f103 	lsr.w	r1, r2, r3
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4413      	add	r3, r2
 8002fe0:	b2ca      	uxtb	r2, r1
 8002fe2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	e7ee      	b.n	8002fca <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b03      	cmp	r3, #3
 8003010:	d811      	bhi.n	8003036 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6839      	ldr	r1, [r7, #0]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	440a      	add	r2, r1
 800301c:	7812      	ldrb	r2, [r2, #0]
 800301e:	4611      	mov	r1, r2
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	00d2      	lsls	r2, r2, #3
 8003024:	fa01 f202 	lsl.w	r2, r1, r2
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	3301      	adds	r3, #1
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	e7ea      	b.n	800300c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003036:	bf00      	nop
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
	...

08003044 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	4a04      	ldr	r2, [pc, #16]	; (8003060 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4618      	mov	r0, r3
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	0800df28 	.word	0x0800df28

08003064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff ffe8 	bl	8003044 <_ZN3ros15NodeHandleBase_C1Ev>
 8003074:	4a45      	ldr	r2, [pc, #276]	; (800318c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x128>)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3304      	adds	r3, #4
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff f8ee 	bl	8002260 <_ZN13STM32HardwareC1Ev>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	f241 1314 	movw	r3, #4372	; 0x1114
 8003096:	4413      	add	r3, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f7fe fd39 	bl	8001b10 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2b18      	cmp	r3, #24
 80030a6:	d80b      	bhi.n	80030c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5c>
      publishers[i] = 0;
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	2200      	movs	r2, #0
 80030b6:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	3301      	adds	r3, #1
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	e7f0      	b.n	80030a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80030c0:	2300      	movs	r3, #0
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	2b18      	cmp	r3, #24
 80030c8:	d80a      	bhi.n	80030e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7c>
      subscribers[i] = 0;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80030d2:	2100      	movs	r1, #0
 80030d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	3301      	adds	r3, #1
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	e7f1      	b.n	80030c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80030e0:	2300      	movs	r3, #0
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ea:	d20a      	bcs.n	8003102 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9e>
      message_in[i] = 0;
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4413      	add	r3, r2
 80030f2:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80030f6:	2200      	movs	r2, #0
 80030f8:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	3301      	adds	r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	e7f0      	b.n	80030e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003102:	2300      	movs	r3, #0
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310c:	d20a      	bcs.n	8003124 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xc0>
      message_out[i] = 0;
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4413      	add	r3, r2
 8003114:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	3301      	adds	r3, #1
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	e7f0      	b.n	8003106 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xa2>

    req_param_resp.ints_length = 0;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800312a:	461a      	mov	r2, r3
 800312c:	2300      	movs	r3, #0
 800312e:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
    req_param_resp.ints = NULL;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003138:	461a      	mov	r2, r3
 800313a:	2300      	movs	r3, #0
 800313c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    req_param_resp.floats_length = 0;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003146:	461a      	mov	r2, r3
 8003148:	2300      	movs	r3, #0
 800314a:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    req_param_resp.floats = NULL;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003154:	461a      	mov	r2, r3
 8003156:	2300      	movs	r3, #0
 8003158:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
    req_param_resp.ints_length = 0;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003162:	461a      	mov	r2, r3
 8003164:	2300      	movs	r3, #0
 8003166:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
    req_param_resp.ints = NULL;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003170:	461a      	mov	r2, r3
 8003172:	2300      	movs	r3, #0
 8003174:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    spin_timeout_ = 0;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  }
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4618      	mov	r0, r3
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	0800dee4 	.word	0x0800dee4

08003190 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	4a04      	ldr	r2, [pc, #16]	; (80031ac <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	0800df10 	.word	0x0800df10

080031b0 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ffe5 	bl	8003190 <_ZN3ros11Subscriber_C1Ev>
 80031c6:	4a0b      	ldr	r2, [pc, #44]	; (80031f4 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei+0x44>)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3310      	adds	r3, #16
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff f959 	bl	8002488 <_ZN13geometry_msgs5PointC1Ev>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	609a      	str	r2, [r3, #8]
  };
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	0800decc 	.word	0x0800decc

080031f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3304      	adds	r3, #4
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff f847 	bl	8002298 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003210:	461a      	mov	r2, r3
 8003212:	2300      	movs	r3, #0
 8003214:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
    bytes_ = 0;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800321e:	461a      	mov	r2, r3
 8003220:	2300      	movs	r3, #0
 8003222:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    index_ = 0;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800322c:	461a      	mov	r2, r3
 800322e:	2300      	movs	r3, #0
 8003230:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    topic_ = 0;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800323a:	461a      	mov	r2, r3
 800323c:	2300      	movs	r3, #0
 800323e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  };
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800324a:	b480      	push	{r7}
 800324c:	b085      	sub	sp, #20
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b18      	cmp	r3, #24
 800325c:	dc19      	bgt.n	8003292 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10d      	bne.n	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800326e:	6839      	ldr	r1, [r7, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	605a      	str	r2, [r3, #4]
        return true;
 8003286:	2301      	movs	r3, #1
 8003288:	e004      	b.n	8003294 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	3301      	adds	r3, #1
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	e7e2      	b.n	8003258 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0xe>
      }
    }
    return false;
 8003292:	2300      	movs	r3, #0
  }
 8003294:	4618      	mov	r0, r3
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b18      	cmp	r3, #24
 80032b2:	dc1e      	bgt.n	80032f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d111      	bne.n	80032ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	60da      	str	r2, [r3, #12]
        return true;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e004      	b.n	80032f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	3301      	adds	r3, #1
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	e7dd      	b.n	80032ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
    return false;
 80032f2:	2300      	movs	r3, #0
  }
 80032f4:	4618      	mov	r0, r3
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff f8af 	bl	8002470 <_ZN13STM32Hardware4timeEv>
 8003312:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800331a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003326:	4293      	cmp	r3, r2
 8003328:	d905      	bls.n	8003336 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x36>
      configured_ = false;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    if (mode_ != MODE_FIRST_FF)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800333c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00e      	beq.n	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800334a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	429a      	cmp	r2, r3
 8003352:	d906      	bls.n	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800335a:	461a      	mov	r2, r3
 800335c:	2300      	movs	r3, #0
 800335e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
      if (spin_timeout_ > 0)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8003368:	2b00      	cmp	r3, #0
 800336a:	d014      	beq.n	8003396 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3304      	adds	r3, #4
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff f87d 	bl	8002470 <_ZN13STM32Hardware4timeEv>
 8003376:	4602      	mov	r2, r0
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	1ad2      	subs	r2, r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8003382:	429a      	cmp	r2, r3
 8003384:	bf8c      	ite	hi
 8003386:	2301      	movhi	r3, #1
 8003388:	2300      	movls	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
          return SPIN_TIMEOUT;
 8003390:	f06f 0301 	mvn.w	r3, #1
 8003394:	e221      	b.n	80037da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      int data = hardware_.read();
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3304      	adds	r3, #4
 800339a:	4618      	mov	r0, r3
 800339c:	f7fe ff98 	bl	80022d0 <_ZN13STM32Hardware4readEv>
 80033a0:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f2c0 81fa 	blt.w	800379e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x49e>
      checksum_ += data;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033b0:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4413      	add	r3, r2
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033be:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033c8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80033cc:	2b07      	cmp	r3, #7
 80033ce:	d12b      	bne.n	8003428 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x128>
        message_in[index_++] = data;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033d6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80033e2:	f8c1 20f8 	str.w	r2, [r1, #248]	; 0xf8
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	b2d1      	uxtb	r1, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	460a      	mov	r2, r1
 80033f0:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
        bytes_--;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033fe:	3b01      	subs	r3, #1
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003406:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1a4      	bne.n	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800341e:	461a      	mov	r2, r3
 8003420:	2308      	movs	r3, #8
 8003422:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003426:	e79c      	b.n	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800342e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003432:	2b00      	cmp	r3, #0
 8003434:	d130      	bne.n	8003498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x198>
        if (data == 0xff)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2bff      	cmp	r3, #255	; 0xff
 800343a:	d112      	bne.n	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003442:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003446:	3301      	adds	r3, #1
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800344e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	3314      	adds	r3, #20
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800345c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8003460:	e77f      	b.n	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff f802 	bl	8002470 <_ZN13STM32Hardware4timeEv>
 800346c:	4602      	mov	r2, r0
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	; 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	bf8c      	ite	hi
 800347a:	2301      	movhi	r3, #1
 800347c:	2300      	movls	r3, #0
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	f43f af6e 	beq.w	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          configured_ = false;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
          return SPIN_TIMEOUT;
 8003492:	f06f 0301 	mvn.w	r3, #1
 8003496:	e1a0      	b.n	80037da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800349e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d121      	bne.n	80034ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1ea>
        if (data == PROTOCOL_VER)
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2bfe      	cmp	r3, #254	; 0xfe
 80034aa:	d10b      	bne.n	80034c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1c4>
          mode_++;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80034b6:	3301      	adds	r3, #1
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034be:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80034c2:	e74e      	b.n	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ca:	461a      	mov	r2, r3
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          if (configured_ == false)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034d8:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f47f af40 	bne.w	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f989 	bl	80037fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 80034e8:	e73b      	b.n	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034f0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d120      	bne.n	800353a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23a>
        bytes_ = data;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034fe:	461a      	mov	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        index_ = 0;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800350c:	461a      	mov	r2, r3
 800350e:	2300      	movs	r3, #0
 8003510:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_++;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800351a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800351e:	3301      	adds	r3, #1
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003526:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte for calculating size checksum */
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003530:	461a      	mov	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8003538:	e713      	b.n	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003540:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003544:	2b03      	cmp	r3, #3
 8003546:	d118      	bne.n	800357a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x27a>
        bytes_ += data << 8;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800354e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	021b      	lsls	r3, r3, #8
 8003556:	4413      	add	r3, r2
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800355e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        mode_++;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003568:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800356c:	3301      	adds	r3, #1
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003574:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003578:	e6f3      	b.n	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003580:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003584:	2b04      	cmp	r3, #4
 8003586:	d11f      	bne.n	80035c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2c8>
        if ((checksum_ % 256) == 255)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800358e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003592:	425a      	negs	r2, r3
 8003594:	b2db      	uxtb	r3, r3
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	bf58      	it	pl
 800359a:	4253      	negpl	r3, r2
 800359c:	2bff      	cmp	r3, #255	; 0xff
 800359e:	d10b      	bne.n	80035b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2b8>
          mode_++;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035a6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80035aa:	3301      	adds	r3, #1
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035b2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80035b6:	e6d4      	b.n	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035be:	461a      	mov	r2, r3
 80035c0:	2300      	movs	r3, #0
 80035c2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80035c6:	e6cc      	b.n	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035ce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80035d2:	2b05      	cmp	r3, #5
 80035d4:	d119      	bne.n	800360a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30a>
        topic_ = data;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035dc:	461a      	mov	r2, r3
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_++;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035ea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80035ee:	3301      	adds	r3, #1
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035f6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte included in checksum */
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003600:	461a      	mov	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8003608:	e6ab      	b.n	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003610:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003614:	2b06      	cmp	r3, #6
 8003616:	d123      	bne.n	8003660 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x360>
        topic_ += data << 8;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800361e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	4413      	add	r3, r2
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800362e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_ = MODE_MESSAGE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003638:	461a      	mov	r2, r3
 800363a:	2307      	movs	r3, #7
 800363c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if (bytes_ == 0)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003646:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800364a:	2b00      	cmp	r3, #0
 800364c:	f47f ae89 	bne.w	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003656:	461a      	mov	r2, r3
 8003658:	2308      	movs	r3, #8
 800365a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800365e:	e680      	b.n	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003666:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800366a:	2b08      	cmp	r3, #8
 800366c:	f47f ae79 	bne.w	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003676:	461a      	mov	r2, r3
 8003678:	2300      	movs	r3, #0
 800367a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if ((checksum_ % 256) == 255)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003684:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003688:	425a      	negs	r2, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	bf58      	it	pl
 8003690:	4253      	negpl	r3, r2
 8003692:	2bff      	cmp	r3, #255	; 0xff
 8003694:	f47f ae65 	bne.w	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800369e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d116      	bne.n	80036d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3d4>
            requestSyncTime();
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f8a7 	bl	80037fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f8c2 	bl	8003836 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036b8:	461a      	mov	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
            last_sync_receive_time = c_time;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c6:	461a      	mov	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            return SPIN_ERR;
 80036ce:	f04f 33ff 	mov.w	r3, #4294967295
 80036d2:	e082      	b.n	80037da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
          else if (topic_ == TopicInfo::ID_TIME)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036de:	2b0a      	cmp	r3, #10
 80036e0:	d107      	bne.n	80036f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3f2>
            syncTime(message_in);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80036e8:	4619      	mov	r1, r3
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f984 	bl	80039f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 80036f0:	e637      	b.n	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036fc:	2b06      	cmp	r3, #6
 80036fe:	d111      	bne.n	8003724 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x424>
            req_param_resp.deserialize(message_in);
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	f241 1314 	movw	r3, #4372	; 0x1114
 8003706:	4413      	add	r3, r2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	f602 0224 	addw	r2, r2, #2084	; 0x824
 800370e:	4611      	mov	r1, r2
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe fb32 	bl	8001d7a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8003722:	e61e      	b.n	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800372a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800372e:	2b0b      	cmp	r3, #11
 8003730:	d106      	bne.n	8003740 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x440>
            configured_ = false;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 800373e:	e610      	b.n	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003746:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800374a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003758:	2b00      	cmp	r3, #0
 800375a:	f43f ae02 	beq.w	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003764:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003768:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003772:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800377c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003780:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800378a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	f602 0224 	addw	r2, r2, #2084	; 0x824
 8003798:	4611      	mov	r1, r2
 800379a:	4798      	blx	r3
    while (true)
 800379c:	e5e1      	b.n	8003362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        break;
 800379e:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037a6:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d014      	beq.n	80037d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037b4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d909      	bls.n	80037d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
      requestSyncTime();
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f818 	bl	80037fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d0:	461a      	mov	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    return SPIN_OK;
 80037d8:	2300      	movs	r3, #0
  }
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:
  Hardware* getHardware()
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
    return &hardware_;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3304      	adds	r3, #4
  }
 80037ee:	4618      	mov	r0, r3
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b086      	sub	sp, #24
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003802:	f107 030c 	add.w	r3, r7, #12
 8003806:	4618      	mov	r0, r3
 8003808:	f7fd fe1e 	bl	8001448 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f107 020c 	add.w	r2, r7, #12
 8003816:	210a      	movs	r1, #10
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	4798      	blx	r3
    rt_time = hardware_.time();
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3304      	adds	r3, #4
 8003820:	4618      	mov	r0, r3
 8003822:	f7fe fe25 	bl	8002470 <_ZN13STM32Hardware4timeEv>
 8003826:	4602      	mov	r2, r0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  }
 800382e:	bf00      	nop
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003836:	b590      	push	{r4, r7, lr}
 8003838:	b08b      	sub	sp, #44	; 0x2c
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800383e:	f107 030c 	add.w	r3, r7, #12
 8003842:	4618      	mov	r0, r3
 8003844:	f7fd fef0 	bl	8001628 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003848:	2300      	movs	r3, #0
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	2b18      	cmp	r3, #24
 8003850:	dc63      	bgt.n	800391a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d056      	beq.n	8003912 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	b29b      	uxth	r3, r3
 8003876:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	6859      	ldr	r1, [r3, #4]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3308      	adds	r3, #8
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4608      	mov	r0, r1
 80038b2:	4798      	blx	r3
 80038b4:	4603      	mov	r3, r0
 80038b6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	6859      	ldr	r1, [r3, #4]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	330c      	adds	r3, #12
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4608      	mov	r0, r1
 80038e0:	4798      	blx	r3
 80038e2:	4603      	mov	r3, r0
 80038e4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80038e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038ea:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681c      	ldr	r4, [r3, #0]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	4618      	mov	r0, r3
 8003902:	f7fe fbf2 	bl	80020ea <_ZN3ros9Publisher15getEndpointTypeEv>
 8003906:	4601      	mov	r1, r0
 8003908:	f107 030c 	add.w	r3, r7, #12
 800390c:	461a      	mov	r2, r3
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	3301      	adds	r3, #1
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
 8003918:	e798      	b.n	800384c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800391a:	2300      	movs	r3, #0
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	2b18      	cmp	r3, #24
 8003922:	dc5f      	bgt.n	80039e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003928:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800392c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d053      	beq.n	80039dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003938:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800393c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	b29b      	uxth	r3, r3
 8003944:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394a:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800394e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395a:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800395e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003966:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800396a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3308      	adds	r3, #8
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4608      	mov	r0, r1
 8003976:	4798      	blx	r3
 8003978:	4603      	mov	r3, r0
 800397a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003980:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003984:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398c:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	330c      	adds	r3, #12
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4608      	mov	r0, r1
 800399c:	4798      	blx	r3
 800399e:	4603      	mov	r3, r0
 80039a0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80039a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039a6:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681c      	ldr	r4, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b2:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80039b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039be:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80039c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3304      	adds	r3, #4
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4608      	mov	r0, r1
 80039ce:	4798      	blx	r3
 80039d0:	4601      	mov	r1, r0
 80039d2:	f107 030c 	add.w	r3, r7, #12
 80039d6:	461a      	mov	r2, r3
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	3301      	adds	r3, #1
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
 80039e2:	e79c      	b.n	800391e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  }
 80039f0:	bf00      	nop
 80039f2:	372c      	adds	r7, #44	; 0x2c
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd90      	pop	{r4, r7, pc}

080039f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003a02:	f107 0308 	add.w	r3, r7, #8
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd fd1e 	bl	8001448 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3304      	adds	r3, #4
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fe fd2d 	bl	8002470 <_ZN13STM32Hardware4timeEv>
 8003a16:	4602      	mov	r2, r0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003a22:	f107 0308 	add.w	r3, r7, #8
 8003a26:	6839      	ldr	r1, [r7, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fd fd7d 	bl	8001528 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	4916      	ldr	r1, [pc, #88]	; (8003a8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8003a34:	fba1 1303 	umull	r1, r3, r1, r3
 8003a38:	099b      	lsrs	r3, r3, #6
 8003a3a:	4413      	add	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003a3e:	6939      	ldr	r1, [r7, #16]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8003a44:	fba3 0302 	umull	r0, r3, r3, r2
 8003a48:	099b      	lsrs	r3, r3, #6
 8003a4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a4e:	fb00 f303 	mul.w	r3, r0, r3
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	4a0e      	ldr	r2, [pc, #56]	; (8003a90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 8003a56:	fb02 f303 	mul.w	r3, r2, r3
 8003a5a:	440b      	add	r3, r1
 8003a5c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003a5e:	f107 0308 	add.w	r3, r7, #8
 8003a62:	3304      	adds	r3, #4
 8003a64:	4619      	mov	r1, r3
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f8aa 	bl	8003bc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7fe fcfd 	bl	8002470 <_ZN13STM32Hardware4timeEv>
 8003a76:	4602      	mov	r2, r0
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a7e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
 8003a82:	bf00      	nop
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	10624dd3 	.word	0x10624dd3
 8003a90:	000f4240 	.word	0x000f4240

08003a94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b63      	cmp	r3, #99	; 0x63
 8003aa4:	dd0b      	ble.n	8003abe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aac:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003ab0:	f083 0301 	eor.w	r3, r3, #1
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8003aba:	2300      	movs	r3, #0
 8003abc:	e079      	b.n	8003bb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	f602 4224 	addw	r2, r2, #3108	; 0xc24
 8003aca:	3207      	adds	r2, #7
 8003acc:	4611      	mov	r1, r2
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	4798      	blx	r3
 8003ad2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	22ff      	movs	r2, #255	; 0xff
 8003ad8:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24
    message_out[1] = PROTOCOL_VER;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	22fe      	movs	r2, #254	; 0xfe
 8003ae0:	f883 2c25 	strb.w	r2, [r3, #3109]	; 0xc25
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f883 2c26 	strb.w	r2, [r3, #3110]	; 0xc26
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f883 2c27 	strb.w	r2, [r3, #3111]	; 0xc27
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 2c26 	ldrb.w	r2, [r3, #3110]	; 0xc26
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 3c27 	ldrb.w	r3, [r3, #3111]	; 0xc27
 8003b0a:	4413      	add	r3, r2
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f883 2c29 	strb.w	r2, [r3, #3113]	; 0xc29
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	b21b      	sxth	r3, r3
 8003b26:	121b      	asrs	r3, r3, #8
 8003b28:	b21b      	sxth	r3, r3
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f883 2c2a 	strb.w	r2, [r3, #3114]	; 0xc2a

    /* calculate checksum */
    int chk = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003b36:	2305      	movs	r3, #5
 8003b38:	61bb      	str	r3, [r7, #24]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	3306      	adds	r3, #6
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	dc0d      	bgt.n	8003b60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xcc>
      chk += message_out[i];
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	4413      	add	r3, r2
 8003b56:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	e7ec      	b.n	8003b3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa6>
    l += 7;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	3307      	adds	r3, #7
 8003b64:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	425a      	negs	r2, r3
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	bf58      	it	pl
 8003b70:	4253      	negpl	r3, r2
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	1c59      	adds	r1, r3, #1
 8003b78:	6179      	str	r1, [r7, #20]
 8003b7a:	43d2      	mvns	r2, r2
 8003b7c:	b2d1      	uxtb	r1, r2
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4413      	add	r3, r2
 8003b82:	460a      	mov	r2, r1
 8003b84:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24

    if (l <= OUTPUT_SIZE)
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b8e:	dc0a      	bgt.n	8003ba6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x112>
    {
      hardware_.write(message_out, l);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	1d18      	adds	r0, r3, #4
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	f7fe fc21 	bl	80023e4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	e005      	b.n	8003bb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003ba6:	4905      	ldr	r1, [pc, #20]	; (8003bbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x128>)
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 f849 	bl	8003c40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8003bae:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3720      	adds	r7, #32
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	0800de4c 	.word	0x0800de4c

08003bc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3304      	adds	r3, #4
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fe fc4e 	bl	8002470 <_ZN13STM32Hardware4timeEv>
 8003bd4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4915      	ldr	r1, [pc, #84]	; (8003c34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8003bde:	fba1 1303 	umull	r1, r3, r1, r3
 8003be2:	099b      	lsrs	r3, r3, #6
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	1e5a      	subs	r2, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	6859      	ldr	r1, [r3, #4]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8003bf6:	fba3 0302 	umull	r0, r3, r3, r2
 8003bfa:	099b      	lsrs	r3, r3, #6
 8003bfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c00:	fb00 f303 	mul.w	r3, r0, r3
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	4a0c      	ldr	r2, [pc, #48]	; (8003c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 8003c08:	fb02 f303 	mul.w	r3, r2, r3
 8003c0c:	1aca      	subs	r2, r1, r3
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 8003c10:	4413      	add	r3, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	f8c2 381c 	str.w	r3, [r2, #2076]	; 0x81c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8003c24:	4619      	mov	r1, r3
 8003c26:	4610      	mov	r0, r2
 8003c28:	f7fc fcfc 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003c2c:	bf00      	nop
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	10624dd3 	.word	0x10624dd3
 8003c38:	000f4240 	.word	0x000f4240
 8003c3c:	3b9aca00 	.word	0x3b9aca00

08003c40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	2103      	movs	r1, #3
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f804 	bl	8003c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	460b      	mov	r3, r1
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003c6a:	f107 0314 	add.w	r3, r7, #20
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fd fe9e 	bl	80019b0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003c74:	7afb      	ldrb	r3, [r7, #11]
 8003c76:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f107 0214 	add.w	r2, r7, #20
 8003c86:	2107      	movs	r1, #7
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	4798      	blx	r3
  }
 8003c8c:	bf00      	nop
 8003c8e:	3720      	adds	r7, #32
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <_Z41__static_initialization_and_destruction_0ii>:
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d116      	bne.n	8003cd2 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d111      	bne.n	8003cd2 <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8003cae:	480b      	ldr	r0, [pc, #44]	; (8003cdc <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003cb0:	f7ff f9d8 	bl	8003064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
geometry_msgs::Point car_speed;
 8003cb4:	480a      	ldr	r0, [pc, #40]	; (8003ce0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003cb6:	f7fe fbe7 	bl	8002488 <_ZN13geometry_msgs5PointC1Ev>
ros::Subscriber<geometry_msgs::Point> mecanum_sub("mecanum_toSTM", ROS::mecanum_callback);
 8003cba:	2301      	movs	r3, #1
 8003cbc:	4a09      	ldr	r2, [pc, #36]	; (8003ce4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003cbe:	490a      	ldr	r1, [pc, #40]	; (8003ce8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003cc0:	480a      	ldr	r0, [pc, #40]	; (8003cec <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003cc2:	f7ff fa75 	bl	80031b0 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	4a05      	ldr	r2, [pc, #20]	; (8003ce0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003cca:	4909      	ldr	r1, [pc, #36]	; (8003cf0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003ccc:	4809      	ldr	r0, [pc, #36]	; (8003cf4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003cce:	f7fe f9e1 	bl	8002094 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	24000644 	.word	0x24000644
 8003ce0:	24001780 	.word	0x24001780
 8003ce4:	08002eb5 	.word	0x08002eb5
 8003ce8:	0800de88 	.word	0x0800de88
 8003cec:	240017a0 	.word	0x240017a0
 8003cf0:	0800de98 	.word	0x0800de98
 8003cf4:	240017d8 	.word	0x240017d8

08003cf8 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3310      	adds	r3, #16
 8003d06:	6839      	ldr	r1, [r7, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fe fd58 	bl	80027be <_ZN13geometry_msgs5Point11deserializeEPh>
    this->cb_(msg);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	3210      	adds	r2, #16
 8003d16:	4610      	mov	r0, r2
 8003d18:	4798      	blx	r3
  }
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3310      	adds	r3, #16
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff f898 	bl	8002e7c <_ZN13geometry_msgs5Point7getTypeEv>
 8003d4c:	4603      	mov	r3, r0
  }
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b082      	sub	sp, #8
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3310      	adds	r3, #16
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff f898 	bl	8002e98 <_ZN13geometry_msgs5Point6getMD5Ev>
 8003d68:	4603      	mov	r3, r0
  }
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
    return configured_;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d80:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
  };
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <_GLOBAL__sub_I_nh>:
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d98:	2001      	movs	r0, #1
 8003d9a:	f7ff ff7b 	bl	8003c94 <_Z41__static_initialization_and_destruction_0ii>
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da6:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <HAL_MspInit+0x3c>)
 8003da8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003dac:	4a0b      	ldr	r2, [pc, #44]	; (8003ddc <HAL_MspInit+0x3c>)
 8003dae:	f043 0302 	orr.w	r3, r3, #2
 8003db2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <HAL_MspInit+0x3c>)
 8003db8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	607b      	str	r3, [r7, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	2005      	movs	r0, #5
 8003dca:	f000 feca 	bl	8004b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003dce:	2005      	movs	r0, #5
 8003dd0:	f000 fee1 	bl	8004b96 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dd4:	bf00      	nop
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	58024400 	.word	0x58024400

08003de0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b090      	sub	sp, #64	; 0x40
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	60da      	str	r2, [r3, #12]
 8003df6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e00:	d14e      	bne.n	8003ea0 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e02:	4b77      	ldr	r3, [pc, #476]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e08:	4a75      	ldr	r2, [pc, #468]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e12:	4b73      	ldr	r3, [pc, #460]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e20:	4b6f      	ldr	r3, [pc, #444]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e26:	4a6e      	ldr	r2, [pc, #440]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e30:	4b6b      	ldr	r3, [pc, #428]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e3e:	4b68      	ldr	r3, [pc, #416]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e44:	4a66      	ldr	r2, [pc, #408]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e46:	f043 0302 	orr.w	r3, r3, #2
 8003e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e4e:	4b64      	ldr	r3, [pc, #400]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	623b      	str	r3, [r7, #32]
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003e5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e62:	2302      	movs	r3, #2
 8003e64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e76:	4619      	mov	r1, r3
 8003e78:	485a      	ldr	r0, [pc, #360]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003e7a:	f003 fce1 	bl	8007840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e7e:	2308      	movs	r3, #8
 8003e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e82:	2302      	movs	r3, #2
 8003e84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e96:	4619      	mov	r1, r3
 8003e98:	4853      	ldr	r0, [pc, #332]	; (8003fe8 <HAL_TIM_Encoder_MspInit+0x208>)
 8003e9a:	f003 fcd1 	bl	8007840 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003e9e:	e09b      	b.n	8003fd8 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a51      	ldr	r2, [pc, #324]	; (8003fec <HAL_TIM_Encoder_MspInit+0x20c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d12e      	bne.n	8003f08 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003eaa:	4b4d      	ldr	r3, [pc, #308]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003eac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003eb0:	4a4b      	ldr	r2, [pc, #300]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003eb2:	f043 0302 	orr.w	r3, r3, #2
 8003eb6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003eba:	4b49      	ldr	r3, [pc, #292]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ec8:	4b45      	ldr	r3, [pc, #276]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ece:	4a44      	ldr	r2, [pc, #272]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003ed0:	f043 0302 	orr.w	r3, r3, #2
 8003ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ed8:	4b41      	ldr	r3, [pc, #260]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	61bb      	str	r3, [r7, #24]
 8003ee4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003ee6:	2330      	movs	r3, #48	; 0x30
 8003ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eea:	2302      	movs	r3, #2
 8003eec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003efa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003efe:	4619      	mov	r1, r3
 8003f00:	4839      	ldr	r0, [pc, #228]	; (8003fe8 <HAL_TIM_Encoder_MspInit+0x208>)
 8003f02:	f003 fc9d 	bl	8007840 <HAL_GPIO_Init>
}
 8003f06:	e067      	b.n	8003fd8 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a38      	ldr	r2, [pc, #224]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x210>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d12f      	bne.n	8003f72 <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f12:	4b33      	ldr	r3, [pc, #204]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f18:	4a31      	ldr	r2, [pc, #196]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f1a:	f043 0304 	orr.w	r3, r3, #4
 8003f1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f22:	4b2f      	ldr	r3, [pc, #188]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f30:	4b2b      	ldr	r3, [pc, #172]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f36:	4a2a      	ldr	r2, [pc, #168]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f38:	f043 0308 	orr.w	r3, r3, #8
 8003f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f40:	4b27      	ldr	r3, [pc, #156]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003f4e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f54:	2302      	movs	r3, #2
 8003f56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003f60:	2302      	movs	r3, #2
 8003f62:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4822      	ldr	r0, [pc, #136]	; (8003ff4 <HAL_TIM_Encoder_MspInit+0x214>)
 8003f6c:	f003 fc68 	bl	8007840 <HAL_GPIO_Init>
}
 8003f70:	e032      	b.n	8003fd8 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a20      	ldr	r2, [pc, #128]	; (8003ff8 <HAL_TIM_Encoder_MspInit+0x218>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d12d      	bne.n	8003fd8 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f7c:	4b18      	ldr	r3, [pc, #96]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f82:	4a17      	ldr	r2, [pc, #92]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f84:	f043 0308 	orr.w	r3, r3, #8
 8003f88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f8c:	4b14      	ldr	r3, [pc, #80]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f9a:	4b11      	ldr	r3, [pc, #68]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fa0:	4a0f      	ldr	r2, [pc, #60]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003faa:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4804      	ldr	r0, [pc, #16]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003fd4:	f003 fc34 	bl	8007840 <HAL_GPIO_Init>
}
 8003fd8:	bf00      	nop
 8003fda:	3740      	adds	r7, #64	; 0x40
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	58024400 	.word	0x58024400
 8003fe4:	58020000 	.word	0x58020000
 8003fe8:	58020400 	.word	0x58020400
 8003fec:	40000400 	.word	0x40000400
 8003ff0:	40000800 	.word	0x40000800
 8003ff4:	58020c00 	.word	0x58020c00
 8003ff8:	40000c00 	.word	0x40000c00

08003ffc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1d      	ldr	r2, [pc, #116]	; (8004080 <HAL_TIM_PWM_MspInit+0x84>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d117      	bne.n	800403e <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800400e:	4b1d      	ldr	r3, [pc, #116]	; (8004084 <HAL_TIM_PWM_MspInit+0x88>)
 8004010:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004014:	4a1b      	ldr	r2, [pc, #108]	; (8004084 <HAL_TIM_PWM_MspInit+0x88>)
 8004016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800401a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800401e:	4b19      	ldr	r3, [pc, #100]	; (8004084 <HAL_TIM_PWM_MspInit+0x88>)
 8004020:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800402c:	2200      	movs	r2, #0
 800402e:	2100      	movs	r1, #0
 8004030:	202b      	movs	r0, #43	; 0x2b
 8004032:	f000 fd96 	bl	8004b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004036:	202b      	movs	r0, #43	; 0x2b
 8004038:	f000 fdad 	bl	8004b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800403c:	e01b      	b.n	8004076 <HAL_TIM_PWM_MspInit+0x7a>
  else if(htim_pwm->Instance==TIM15)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a11      	ldr	r2, [pc, #68]	; (8004088 <HAL_TIM_PWM_MspInit+0x8c>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d116      	bne.n	8004076 <HAL_TIM_PWM_MspInit+0x7a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004048:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <HAL_TIM_PWM_MspInit+0x88>)
 800404a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800404e:	4a0d      	ldr	r2, [pc, #52]	; (8004084 <HAL_TIM_PWM_MspInit+0x88>)
 8004050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004054:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004058:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <HAL_TIM_PWM_MspInit+0x88>)
 800405a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800405e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004062:	60bb      	str	r3, [r7, #8]
 8004064:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8004066:	2200      	movs	r2, #0
 8004068:	2100      	movs	r1, #0
 800406a:	2074      	movs	r0, #116	; 0x74
 800406c:	f000 fd79 	bl	8004b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8004070:	2074      	movs	r0, #116	; 0x74
 8004072:	f000 fd90 	bl	8004b96 <HAL_NVIC_EnableIRQ>
}
 8004076:	bf00      	nop
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40001800 	.word	0x40001800
 8004084:	58024400 	.word	0x58024400
 8004088:	40014000 	.word	0x40014000

0800408c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a0e      	ldr	r2, [pc, #56]	; (80040d4 <HAL_TIM_Base_MspInit+0x48>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d116      	bne.n	80040cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800409e:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <HAL_TIM_Base_MspInit+0x4c>)
 80040a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040a4:	4a0c      	ldr	r2, [pc, #48]	; (80040d8 <HAL_TIM_Base_MspInit+0x4c>)
 80040a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040ae:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <HAL_TIM_Base_MspInit+0x4c>)
 80040b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80040bc:	2200      	movs	r2, #0
 80040be:	2100      	movs	r1, #0
 80040c0:	202c      	movs	r0, #44	; 0x2c
 80040c2:	f000 fd4e 	bl	8004b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80040c6:	202c      	movs	r0, #44	; 0x2c
 80040c8:	f000 fd65 	bl	8004b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80040cc:	bf00      	nop
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40001c00 	.word	0x40001c00
 80040d8:	58024400 	.word	0x58024400

080040dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08a      	sub	sp, #40	; 0x28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e4:	f107 0314 	add.w	r3, r7, #20
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	605a      	str	r2, [r3, #4]
 80040ee:	609a      	str	r2, [r3, #8]
 80040f0:	60da      	str	r2, [r3, #12]
 80040f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a25      	ldr	r2, [pc, #148]	; (8004190 <HAL_TIM_MspPostInit+0xb4>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d120      	bne.n	8004140 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040fe:	4b25      	ldr	r3, [pc, #148]	; (8004194 <HAL_TIM_MspPostInit+0xb8>)
 8004100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004104:	4a23      	ldr	r2, [pc, #140]	; (8004194 <HAL_TIM_MspPostInit+0xb8>)
 8004106:	f043 0302 	orr.w	r3, r3, #2
 800410a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800410e:	4b21      	ldr	r3, [pc, #132]	; (8004194 <HAL_TIM_MspPostInit+0xb8>)
 8004110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800411c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004122:	2302      	movs	r3, #2
 8004124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004126:	2300      	movs	r3, #0
 8004128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800412a:	2300      	movs	r3, #0
 800412c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800412e:	2302      	movs	r3, #2
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004132:	f107 0314 	add.w	r3, r7, #20
 8004136:	4619      	mov	r1, r3
 8004138:	4817      	ldr	r0, [pc, #92]	; (8004198 <HAL_TIM_MspPostInit+0xbc>)
 800413a:	f003 fb81 	bl	8007840 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800413e:	e023      	b.n	8004188 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM15)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a15      	ldr	r2, [pc, #84]	; (800419c <HAL_TIM_MspPostInit+0xc0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d11e      	bne.n	8004188 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800414a:	4b12      	ldr	r3, [pc, #72]	; (8004194 <HAL_TIM_MspPostInit+0xb8>)
 800414c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004150:	4a10      	ldr	r2, [pc, #64]	; (8004194 <HAL_TIM_MspPostInit+0xb8>)
 8004152:	f043 0310 	orr.w	r3, r3, #16
 8004156:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800415a:	4b0e      	ldr	r3, [pc, #56]	; (8004194 <HAL_TIM_MspPostInit+0xb8>)
 800415c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004160:	f003 0310 	and.w	r3, r3, #16
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004168:	2360      	movs	r3, #96	; 0x60
 800416a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800416c:	2302      	movs	r3, #2
 800416e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004170:	2300      	movs	r3, #0
 8004172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004174:	2300      	movs	r3, #0
 8004176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004178:	2304      	movs	r3, #4
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800417c:	f107 0314 	add.w	r3, r7, #20
 8004180:	4619      	mov	r1, r3
 8004182:	4807      	ldr	r0, [pc, #28]	; (80041a0 <HAL_TIM_MspPostInit+0xc4>)
 8004184:	f003 fb5c 	bl	8007840 <HAL_GPIO_Init>
}
 8004188:	bf00      	nop
 800418a:	3728      	adds	r7, #40	; 0x28
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40001800 	.word	0x40001800
 8004194:	58024400 	.word	0x58024400
 8004198:	58020400 	.word	0x58020400
 800419c:	40014000 	.word	0x40014000
 80041a0:	58021000 	.word	0x58021000

080041a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b0b6      	sub	sp, #216	; 0xd8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	605a      	str	r2, [r3, #4]
 80041b6:	609a      	str	r2, [r3, #8]
 80041b8:	60da      	str	r2, [r3, #12]
 80041ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041bc:	f107 0310 	add.w	r3, r7, #16
 80041c0:	22b4      	movs	r2, #180	; 0xb4
 80041c2:	2100      	movs	r1, #0
 80041c4:	4618      	mov	r0, r3
 80041c6:	f009 fc25 	bl	800da14 <memset>
  if(huart->Instance==USART1)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a57      	ldr	r2, [pc, #348]	; (800432c <HAL_UART_MspInit+0x188>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	f040 80a7 	bne.w	8004324 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80041d6:	2301      	movs	r3, #1
 80041d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80041da:	2300      	movs	r3, #0
 80041dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041e0:	f107 0310 	add.w	r3, r7, #16
 80041e4:	4618      	mov	r0, r3
 80041e6:	f004 fc61 	bl	8008aac <HAL_RCCEx_PeriphCLKConfig>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80041f0:	f7fc fff0 	bl	80011d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80041f4:	4b4e      	ldr	r3, [pc, #312]	; (8004330 <HAL_UART_MspInit+0x18c>)
 80041f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041fa:	4a4d      	ldr	r2, [pc, #308]	; (8004330 <HAL_UART_MspInit+0x18c>)
 80041fc:	f043 0310 	orr.w	r3, r3, #16
 8004200:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004204:	4b4a      	ldr	r3, [pc, #296]	; (8004330 <HAL_UART_MspInit+0x18c>)
 8004206:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800420a:	f003 0310 	and.w	r3, r3, #16
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004212:	4b47      	ldr	r3, [pc, #284]	; (8004330 <HAL_UART_MspInit+0x18c>)
 8004214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004218:	4a45      	ldr	r2, [pc, #276]	; (8004330 <HAL_UART_MspInit+0x18c>)
 800421a:	f043 0301 	orr.w	r3, r3, #1
 800421e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004222:	4b43      	ldr	r3, [pc, #268]	; (8004330 <HAL_UART_MspInit+0x18c>)
 8004224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004230:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004234:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004238:	2302      	movs	r3, #2
 800423a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423e:	2300      	movs	r3, #0
 8004240:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004244:	2300      	movs	r3, #0
 8004246:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800424a:	2307      	movs	r3, #7
 800424c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004250:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004254:	4619      	mov	r1, r3
 8004256:	4837      	ldr	r0, [pc, #220]	; (8004334 <HAL_UART_MspInit+0x190>)
 8004258:	f003 faf2 	bl	8007840 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800425c:	4b36      	ldr	r3, [pc, #216]	; (8004338 <HAL_UART_MspInit+0x194>)
 800425e:	4a37      	ldr	r2, [pc, #220]	; (800433c <HAL_UART_MspInit+0x198>)
 8004260:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004262:	4b35      	ldr	r3, [pc, #212]	; (8004338 <HAL_UART_MspInit+0x194>)
 8004264:	2229      	movs	r2, #41	; 0x29
 8004266:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004268:	4b33      	ldr	r3, [pc, #204]	; (8004338 <HAL_UART_MspInit+0x194>)
 800426a:	2200      	movs	r2, #0
 800426c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800426e:	4b32      	ldr	r3, [pc, #200]	; (8004338 <HAL_UART_MspInit+0x194>)
 8004270:	2200      	movs	r2, #0
 8004272:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004274:	4b30      	ldr	r3, [pc, #192]	; (8004338 <HAL_UART_MspInit+0x194>)
 8004276:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800427a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800427c:	4b2e      	ldr	r3, [pc, #184]	; (8004338 <HAL_UART_MspInit+0x194>)
 800427e:	2200      	movs	r2, #0
 8004280:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004282:	4b2d      	ldr	r3, [pc, #180]	; (8004338 <HAL_UART_MspInit+0x194>)
 8004284:	2200      	movs	r2, #0
 8004286:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004288:	4b2b      	ldr	r3, [pc, #172]	; (8004338 <HAL_UART_MspInit+0x194>)
 800428a:	2200      	movs	r2, #0
 800428c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800428e:	4b2a      	ldr	r3, [pc, #168]	; (8004338 <HAL_UART_MspInit+0x194>)
 8004290:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004294:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004296:	4b28      	ldr	r3, [pc, #160]	; (8004338 <HAL_UART_MspInit+0x194>)
 8004298:	2200      	movs	r2, #0
 800429a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800429c:	4826      	ldr	r0, [pc, #152]	; (8004338 <HAL_UART_MspInit+0x194>)
 800429e:	f000 fc95 	bl	8004bcc <HAL_DMA_Init>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80042a8:	f7fc ff94 	bl	80011d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a22      	ldr	r2, [pc, #136]	; (8004338 <HAL_UART_MspInit+0x194>)
 80042b0:	67da      	str	r2, [r3, #124]	; 0x7c
 80042b2:	4a21      	ldr	r2, [pc, #132]	; (8004338 <HAL_UART_MspInit+0x194>)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80042b8:	4b21      	ldr	r3, [pc, #132]	; (8004340 <HAL_UART_MspInit+0x19c>)
 80042ba:	4a22      	ldr	r2, [pc, #136]	; (8004344 <HAL_UART_MspInit+0x1a0>)
 80042bc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80042be:	4b20      	ldr	r3, [pc, #128]	; (8004340 <HAL_UART_MspInit+0x19c>)
 80042c0:	222a      	movs	r2, #42	; 0x2a
 80042c2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042c4:	4b1e      	ldr	r3, [pc, #120]	; (8004340 <HAL_UART_MspInit+0x19c>)
 80042c6:	2240      	movs	r2, #64	; 0x40
 80042c8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042ca:	4b1d      	ldr	r3, [pc, #116]	; (8004340 <HAL_UART_MspInit+0x19c>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80042d0:	4b1b      	ldr	r3, [pc, #108]	; (8004340 <HAL_UART_MspInit+0x19c>)
 80042d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042d8:	4b19      	ldr	r3, [pc, #100]	; (8004340 <HAL_UART_MspInit+0x19c>)
 80042da:	2200      	movs	r2, #0
 80042dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042de:	4b18      	ldr	r3, [pc, #96]	; (8004340 <HAL_UART_MspInit+0x19c>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80042e4:	4b16      	ldr	r3, [pc, #88]	; (8004340 <HAL_UART_MspInit+0x19c>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80042ea:	4b15      	ldr	r3, [pc, #84]	; (8004340 <HAL_UART_MspInit+0x19c>)
 80042ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042f0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042f2:	4b13      	ldr	r3, [pc, #76]	; (8004340 <HAL_UART_MspInit+0x19c>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80042f8:	4811      	ldr	r0, [pc, #68]	; (8004340 <HAL_UART_MspInit+0x19c>)
 80042fa:	f000 fc67 	bl	8004bcc <HAL_DMA_Init>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8004304:	f7fc ff66 	bl	80011d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a0d      	ldr	r2, [pc, #52]	; (8004340 <HAL_UART_MspInit+0x19c>)
 800430c:	679a      	str	r2, [r3, #120]	; 0x78
 800430e:	4a0c      	ldr	r2, [pc, #48]	; (8004340 <HAL_UART_MspInit+0x19c>)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004314:	2200      	movs	r2, #0
 8004316:	2100      	movs	r1, #0
 8004318:	2025      	movs	r0, #37	; 0x25
 800431a:	f000 fc22 	bl	8004b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800431e:	2025      	movs	r0, #37	; 0x25
 8004320:	f000 fc39 	bl	8004b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004324:	bf00      	nop
 8004326:	37d8      	adds	r7, #216	; 0xd8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40011000 	.word	0x40011000
 8004330:	58024400 	.word	0x58024400
 8004334:	58020000 	.word	0x58020000
 8004338:	24000504 	.word	0x24000504
 800433c:	40020010 	.word	0x40020010
 8004340:	2400057c 	.word	0x2400057c
 8004344:	40020028 	.word	0x40020028

08004348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800434c:	e7fe      	b.n	800434c <NMI_Handler+0x4>

0800434e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800434e:	b480      	push	{r7}
 8004350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004352:	e7fe      	b.n	8004352 <HardFault_Handler+0x4>

08004354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004358:	e7fe      	b.n	8004358 <MemManage_Handler+0x4>

0800435a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800435a:	b480      	push	{r7}
 800435c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800435e:	e7fe      	b.n	800435e <BusFault_Handler+0x4>

08004360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004364:	e7fe      	b.n	8004364 <UsageFault_Handler+0x4>

08004366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004366:	b480      	push	{r7}
 8004368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800436a:	bf00      	nop
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004378:	bf00      	nop
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004382:	b480      	push	{r7}
 8004384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004386:	bf00      	nop
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004394:	f000 faea 	bl	800496c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004398:	bf00      	nop
 800439a:	bd80      	pop	{r7, pc}

0800439c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80043a0:	bf00      	nop
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80043b0:	4802      	ldr	r0, [pc, #8]	; (80043bc <DMA1_Stream0_IRQHandler+0x10>)
 80043b2:	f001 ff33 	bl	800621c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80043b6:	bf00      	nop
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	24000504 	.word	0x24000504

080043c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80043c4:	4802      	ldr	r0, [pc, #8]	; (80043d0 <DMA1_Stream1_IRQHandler+0x10>)
 80043c6:	f001 ff29 	bl	800621c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80043ca:	bf00      	nop
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	2400057c 	.word	0x2400057c

080043d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80043d8:	4802      	ldr	r0, [pc, #8]	; (80043e4 <USART1_IRQHandler+0x10>)
 80043da:	f007 fae5 	bl	800b9a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80043de:	bf00      	nop
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	24000474 	.word	0x24000474

080043e8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80043ec:	4802      	ldr	r0, [pc, #8]	; (80043f8 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80043ee:	f006 fa4b 	bl	800a888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80043f2:	bf00      	nop
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	24000390 	.word	0x24000390

080043fc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8004400:	4802      	ldr	r0, [pc, #8]	; (800440c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8004402:	f006 fa41 	bl	800a888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004406:	bf00      	nop
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	240003dc 	.word	0x240003dc

08004410 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8004414:	4802      	ldr	r0, [pc, #8]	; (8004420 <TIM15_IRQHandler+0x10>)
 8004416:	f006 fa37 	bl	800a888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800441a:	bf00      	nop
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	24000428 	.word	0x24000428

08004424 <_ZN3STM5setupEv>:
#include "stm_main.h"
#include "dc_motor.h"
#include "mecanum.h"

void STM::setup(void){
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
	DC_motor_init();
 8004428:	f7fc f928 	bl	800067c <_Z13DC_motor_initv>
}
 800442c:	bf00      	nop
 800442e:	bd80      	pop	{r7, pc}

08004430 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
	return 1;
 8004434:	2301      	movs	r3, #1
}
 8004436:	4618      	mov	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <_kill>:

int _kill(int pid, int sig)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800444a:	f009 faab 	bl	800d9a4 <__errno>
 800444e:	4603      	mov	r3, r0
 8004450:	2216      	movs	r2, #22
 8004452:	601a      	str	r2, [r3, #0]
	return -1;
 8004454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <_exit>:

void _exit (int status)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004468:	f04f 31ff 	mov.w	r1, #4294967295
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff ffe7 	bl	8004440 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004472:	e7fe      	b.n	8004472 <_exit+0x12>

08004474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800447c:	4a14      	ldr	r2, [pc, #80]	; (80044d0 <_sbrk+0x5c>)
 800447e:	4b15      	ldr	r3, [pc, #84]	; (80044d4 <_sbrk+0x60>)
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004488:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <_sbrk+0x64>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d102      	bne.n	8004496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004490:	4b11      	ldr	r3, [pc, #68]	; (80044d8 <_sbrk+0x64>)
 8004492:	4a12      	ldr	r2, [pc, #72]	; (80044dc <_sbrk+0x68>)
 8004494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004496:	4b10      	ldr	r3, [pc, #64]	; (80044d8 <_sbrk+0x64>)
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4413      	add	r3, r2
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d207      	bcs.n	80044b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044a4:	f009 fa7e 	bl	800d9a4 <__errno>
 80044a8:	4603      	mov	r3, r0
 80044aa:	220c      	movs	r2, #12
 80044ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044ae:	f04f 33ff 	mov.w	r3, #4294967295
 80044b2:	e009      	b.n	80044c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044b4:	4b08      	ldr	r3, [pc, #32]	; (80044d8 <_sbrk+0x64>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044ba:	4b07      	ldr	r3, [pc, #28]	; (80044d8 <_sbrk+0x64>)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4413      	add	r3, r2
 80044c2:	4a05      	ldr	r2, [pc, #20]	; (80044d8 <_sbrk+0x64>)
 80044c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044c6:	68fb      	ldr	r3, [r7, #12]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	24050000 	.word	0x24050000
 80044d4:	00000400 	.word	0x00000400
 80044d8:	240017ec 	.word	0x240017ec
 80044dc:	24001808 	.word	0x24001808

080044e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80044e4:	4b32      	ldr	r3, [pc, #200]	; (80045b0 <SystemInit+0xd0>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	4a31      	ldr	r2, [pc, #196]	; (80045b0 <SystemInit+0xd0>)
 80044ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80044f4:	4b2f      	ldr	r3, [pc, #188]	; (80045b4 <SystemInit+0xd4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 030f 	and.w	r3, r3, #15
 80044fc:	2b06      	cmp	r3, #6
 80044fe:	d807      	bhi.n	8004510 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004500:	4b2c      	ldr	r3, [pc, #176]	; (80045b4 <SystemInit+0xd4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f023 030f 	bic.w	r3, r3, #15
 8004508:	4a2a      	ldr	r2, [pc, #168]	; (80045b4 <SystemInit+0xd4>)
 800450a:	f043 0307 	orr.w	r3, r3, #7
 800450e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004510:	4b29      	ldr	r3, [pc, #164]	; (80045b8 <SystemInit+0xd8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a28      	ldr	r2, [pc, #160]	; (80045b8 <SystemInit+0xd8>)
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800451c:	4b26      	ldr	r3, [pc, #152]	; (80045b8 <SystemInit+0xd8>)
 800451e:	2200      	movs	r2, #0
 8004520:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004522:	4b25      	ldr	r3, [pc, #148]	; (80045b8 <SystemInit+0xd8>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4924      	ldr	r1, [pc, #144]	; (80045b8 <SystemInit+0xd8>)
 8004528:	4b24      	ldr	r3, [pc, #144]	; (80045bc <SystemInit+0xdc>)
 800452a:	4013      	ands	r3, r2
 800452c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800452e:	4b21      	ldr	r3, [pc, #132]	; (80045b4 <SystemInit+0xd4>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b00      	cmp	r3, #0
 8004538:	d007      	beq.n	800454a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800453a:	4b1e      	ldr	r3, [pc, #120]	; (80045b4 <SystemInit+0xd4>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f023 030f 	bic.w	r3, r3, #15
 8004542:	4a1c      	ldr	r2, [pc, #112]	; (80045b4 <SystemInit+0xd4>)
 8004544:	f043 0307 	orr.w	r3, r3, #7
 8004548:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800454a:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <SystemInit+0xd8>)
 800454c:	2200      	movs	r2, #0
 800454e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004550:	4b19      	ldr	r3, [pc, #100]	; (80045b8 <SystemInit+0xd8>)
 8004552:	2200      	movs	r2, #0
 8004554:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004556:	4b18      	ldr	r3, [pc, #96]	; (80045b8 <SystemInit+0xd8>)
 8004558:	2200      	movs	r2, #0
 800455a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800455c:	4b16      	ldr	r3, [pc, #88]	; (80045b8 <SystemInit+0xd8>)
 800455e:	4a18      	ldr	r2, [pc, #96]	; (80045c0 <SystemInit+0xe0>)
 8004560:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004562:	4b15      	ldr	r3, [pc, #84]	; (80045b8 <SystemInit+0xd8>)
 8004564:	4a17      	ldr	r2, [pc, #92]	; (80045c4 <SystemInit+0xe4>)
 8004566:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004568:	4b13      	ldr	r3, [pc, #76]	; (80045b8 <SystemInit+0xd8>)
 800456a:	4a17      	ldr	r2, [pc, #92]	; (80045c8 <SystemInit+0xe8>)
 800456c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800456e:	4b12      	ldr	r3, [pc, #72]	; (80045b8 <SystemInit+0xd8>)
 8004570:	2200      	movs	r2, #0
 8004572:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004574:	4b10      	ldr	r3, [pc, #64]	; (80045b8 <SystemInit+0xd8>)
 8004576:	4a14      	ldr	r2, [pc, #80]	; (80045c8 <SystemInit+0xe8>)
 8004578:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800457a:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <SystemInit+0xd8>)
 800457c:	2200      	movs	r2, #0
 800457e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004580:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <SystemInit+0xd8>)
 8004582:	4a11      	ldr	r2, [pc, #68]	; (80045c8 <SystemInit+0xe8>)
 8004584:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004586:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <SystemInit+0xd8>)
 8004588:	2200      	movs	r2, #0
 800458a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800458c:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <SystemInit+0xd8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a09      	ldr	r2, [pc, #36]	; (80045b8 <SystemInit+0xd8>)
 8004592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004596:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004598:	4b07      	ldr	r3, [pc, #28]	; (80045b8 <SystemInit+0xd8>)
 800459a:	2200      	movs	r2, #0
 800459c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800459e:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <SystemInit+0xec>)
 80045a0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80045a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80045a6:	bf00      	nop
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	e000ed00 	.word	0xe000ed00
 80045b4:	52002000 	.word	0x52002000
 80045b8:	58024400 	.word	0x58024400
 80045bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80045c0:	02020200 	.word	0x02020200
 80045c4:	01ff0000 	.word	0x01ff0000
 80045c8:	01010280 	.word	0x01010280
 80045cc:	52004000 	.word	0x52004000

080045d0 <HAL_TIM_PeriodElapsedCallback>:

void motor_standard(void);
void motor_matlab(int fr, int fl, int br, int bl);
void motor_debug(void);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM13) {
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a0f      	ldr	r2, [pc, #60]	; (800461c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d117      	bne.n	8004612 <HAL_TIM_PeriodElapsedCallback+0x42>

	/* ROS publish */
		static int ms=0;
		ms++;
 80045e2:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3301      	adds	r3, #1
 80045e8:	4a0d      	ldr	r2, [pc, #52]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80045ea:	6013      	str	r3, [r2, #0]
		if(ms%10==0) ROS::pub_car_vel();
 80045ec:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80045ee:	6819      	ldr	r1, [r3, #0]
 80045f0:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80045f2:	fb83 2301 	smull	r2, r3, r3, r1
 80045f6:	109a      	asrs	r2, r3, #2
 80045f8:	17cb      	asrs	r3, r1, #31
 80045fa:	1ad2      	subs	r2, r2, r3
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	1aca      	subs	r2, r1, r3
 8004606:	2a00      	cmp	r2, #0
 8004608:	d101      	bne.n	800460e <HAL_TIM_PeriodElapsedCallback+0x3e>
 800460a:	f7fe fc73 	bl	8002ef4 <_ZN3ROS11pub_car_velEv>

	/* STM control */
//		motor_matlab(true, false, false, false);
		motor_standard();
 800460e:	f000 f80b 	bl	8004628 <_Z14motor_standardv>
	}
}
 8004612:	bf00      	nop
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40001c00 	.word	0x40001c00
 8004620:	240017f0 	.word	0x240017f0
 8004624:	66666667 	.word	0x66666667

08004628 <_Z14motor_standardv>:


void motor_standard(void){
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
	/*enc 1*/
		fr.CountNow = __HAL_TIM_GetCounter(&htim2);
 800462c:	4b73      	ldr	r3, [pc, #460]	; (80047fc <_Z14motor_standardv+0x1d4>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	b21a      	sxth	r2, r3
 8004634:	4b72      	ldr	r3, [pc, #456]	; (8004800 <_Z14motor_standardv+0x1d8>)
 8004636:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		fr.PIDControl();
 800463a:	4871      	ldr	r0, [pc, #452]	; (8004800 <_Z14motor_standardv+0x1d8>)
 800463c:	f7fc f899 	bl	8000772 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim2,0);
 8004640:	4b6e      	ldr	r3, [pc, #440]	; (80047fc <_Z14motor_standardv+0x1d4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2200      	movs	r2, #0
 8004646:	625a      	str	r2, [r3, #36]	; 0x24

		if (fr.PWM >= 0) {
 8004648:	4b6d      	ldr	r3, [pc, #436]	; (8004800 <_Z14motor_standardv+0x1d8>)
 800464a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800464e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004656:	db0c      	blt.n	8004672 <_Z14motor_standardv+0x4a>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_SET);
 8004658:	2201      	movs	r2, #1
 800465a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800465e:	4869      	ldr	r0, [pc, #420]	; (8004804 <_Z14motor_standardv+0x1dc>)
 8004660:	f003 fa96 	bl	8007b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_RESET);
 8004664:	2200      	movs	r2, #0
 8004666:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800466a:	4866      	ldr	r0, [pc, #408]	; (8004804 <_Z14motor_standardv+0x1dc>)
 800466c:	f003 fa90 	bl	8007b90 <HAL_GPIO_WritePin>
 8004670:	e00b      	b.n	800468a <_Z14motor_standardv+0x62>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_RESET);
 8004672:	2200      	movs	r2, #0
 8004674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004678:	4862      	ldr	r0, [pc, #392]	; (8004804 <_Z14motor_standardv+0x1dc>)
 800467a:	f003 fa89 	bl	8007b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_SET);
 800467e:	2201      	movs	r2, #1
 8004680:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004684:	485f      	ldr	r0, [pc, #380]	; (8004804 <_Z14motor_standardv+0x1dc>)
 8004686:	f003 fa83 	bl	8007b90 <HAL_GPIO_WritePin>
		}

		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, fabs(fr.PWM));
 800468a:	4b5d      	ldr	r3, [pc, #372]	; (8004800 <_Z14motor_standardv+0x1d8>)
 800468c:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8004690:	eeb0 7bc7 	vabs.f64	d7, d7
 8004694:	4b5c      	ldr	r3, [pc, #368]	; (8004808 <_Z14motor_standardv+0x1e0>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800469c:	ee17 2a90 	vmov	r2, s15
 80046a0:	639a      	str	r2, [r3, #56]	; 0x38

	/*enc 2*/
		fl.CountNow = __HAL_TIM_GetCounter(&htim5);
 80046a2:	4b5a      	ldr	r3, [pc, #360]	; (800480c <_Z14motor_standardv+0x1e4>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	b21a      	sxth	r2, r3
 80046aa:	4b59      	ldr	r3, [pc, #356]	; (8004810 <_Z14motor_standardv+0x1e8>)
 80046ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		fl.PIDControl();
 80046b0:	4857      	ldr	r0, [pc, #348]	; (8004810 <_Z14motor_standardv+0x1e8>)
 80046b2:	f7fc f85e 	bl	8000772 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim5,0);
 80046b6:	4b55      	ldr	r3, [pc, #340]	; (800480c <_Z14motor_standardv+0x1e4>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2200      	movs	r2, #0
 80046bc:	625a      	str	r2, [r3, #36]	; 0x24

		if (fl.PWM < 0) {
 80046be:	4b54      	ldr	r3, [pc, #336]	; (8004810 <_Z14motor_standardv+0x1e8>)
 80046c0:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80046c4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80046c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046cc:	d50c      	bpl.n	80046e8 <_Z14motor_standardv+0xc0>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_SET);
 80046ce:	2201      	movs	r2, #1
 80046d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80046d4:	484f      	ldr	r0, [pc, #316]	; (8004814 <_Z14motor_standardv+0x1ec>)
 80046d6:	f003 fa5b 	bl	8007b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_RESET);
 80046da:	2200      	movs	r2, #0
 80046dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046e0:	484c      	ldr	r0, [pc, #304]	; (8004814 <_Z14motor_standardv+0x1ec>)
 80046e2:	f003 fa55 	bl	8007b90 <HAL_GPIO_WritePin>
 80046e6:	e00b      	b.n	8004700 <_Z14motor_standardv+0xd8>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_RESET);
 80046e8:	2200      	movs	r2, #0
 80046ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80046ee:	4849      	ldr	r0, [pc, #292]	; (8004814 <_Z14motor_standardv+0x1ec>)
 80046f0:	f003 fa4e 	bl	8007b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_SET);
 80046f4:	2201      	movs	r2, #1
 80046f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046fa:	4846      	ldr	r0, [pc, #280]	; (8004814 <_Z14motor_standardv+0x1ec>)
 80046fc:	f003 fa48 	bl	8007b90 <HAL_GPIO_WritePin>
		}

		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, fabs(fl.PWM));
 8004700:	4b43      	ldr	r3, [pc, #268]	; (8004810 <_Z14motor_standardv+0x1e8>)
 8004702:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8004706:	eeb0 7bc7 	vabs.f64	d7, d7
 800470a:	4b3f      	ldr	r3, [pc, #252]	; (8004808 <_Z14motor_standardv+0x1e0>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004712:	ee17 2a90 	vmov	r2, s15
 8004716:	635a      	str	r2, [r3, #52]	; 0x34

	/*enc 3*/
		br.CountNow = __HAL_TIM_GetCounter(&htim3);
 8004718:	4b3f      	ldr	r3, [pc, #252]	; (8004818 <_Z14motor_standardv+0x1f0>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	b21a      	sxth	r2, r3
 8004720:	4b3e      	ldr	r3, [pc, #248]	; (800481c <_Z14motor_standardv+0x1f4>)
 8004722:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		br.PIDControl();
 8004726:	483d      	ldr	r0, [pc, #244]	; (800481c <_Z14motor_standardv+0x1f4>)
 8004728:	f7fc f823 	bl	8000772 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim3,0);
 800472c:	4b3a      	ldr	r3, [pc, #232]	; (8004818 <_Z14motor_standardv+0x1f0>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2200      	movs	r2, #0
 8004732:	625a      	str	r2, [r3, #36]	; 0x24

		if (br.PWM >= 0) {
 8004734:	4b39      	ldr	r3, [pc, #228]	; (800481c <_Z14motor_standardv+0x1f4>)
 8004736:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800473a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800473e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004742:	db0a      	blt.n	800475a <_Z14motor_standardv+0x132>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_SET);
 8004744:	2201      	movs	r2, #1
 8004746:	2104      	movs	r1, #4
 8004748:	4835      	ldr	r0, [pc, #212]	; (8004820 <_Z14motor_standardv+0x1f8>)
 800474a:	f003 fa21 	bl	8007b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_RESET);
 800474e:	2200      	movs	r2, #0
 8004750:	2108      	movs	r1, #8
 8004752:	4833      	ldr	r0, [pc, #204]	; (8004820 <_Z14motor_standardv+0x1f8>)
 8004754:	f003 fa1c 	bl	8007b90 <HAL_GPIO_WritePin>
 8004758:	e009      	b.n	800476e <_Z14motor_standardv+0x146>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_RESET);
 800475a:	2200      	movs	r2, #0
 800475c:	2104      	movs	r1, #4
 800475e:	4830      	ldr	r0, [pc, #192]	; (8004820 <_Z14motor_standardv+0x1f8>)
 8004760:	f003 fa16 	bl	8007b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_SET);
 8004764:	2201      	movs	r2, #1
 8004766:	2108      	movs	r1, #8
 8004768:	482d      	ldr	r0, [pc, #180]	; (8004820 <_Z14motor_standardv+0x1f8>)
 800476a:	f003 fa11 	bl	8007b90 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, fabs(br.PWM));
 800476e:	4b2b      	ldr	r3, [pc, #172]	; (800481c <_Z14motor_standardv+0x1f4>)
 8004770:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8004774:	eeb0 7bc7 	vabs.f64	d7, d7
 8004778:	4b2a      	ldr	r3, [pc, #168]	; (8004824 <_Z14motor_standardv+0x1fc>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004780:	ee17 2a90 	vmov	r2, s15
 8004784:	635a      	str	r2, [r3, #52]	; 0x34

	/*enc 4*/
		bl.CountNow = __HAL_TIM_GetCounter(&htim4);
 8004786:	4b28      	ldr	r3, [pc, #160]	; (8004828 <_Z14motor_standardv+0x200>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	b21a      	sxth	r2, r3
 800478e:	4b27      	ldr	r3, [pc, #156]	; (800482c <_Z14motor_standardv+0x204>)
 8004790:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		bl.PIDControl();
 8004794:	4825      	ldr	r0, [pc, #148]	; (800482c <_Z14motor_standardv+0x204>)
 8004796:	f7fb ffec 	bl	8000772 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim4,0);
 800479a:	4b23      	ldr	r3, [pc, #140]	; (8004828 <_Z14motor_standardv+0x200>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2200      	movs	r2, #0
 80047a0:	625a      	str	r2, [r3, #36]	; 0x24

		if (bl.PWM >= 0) {
 80047a2:	4b22      	ldr	r3, [pc, #136]	; (800482c <_Z14motor_standardv+0x204>)
 80047a4:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80047a8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80047ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b0:	db0b      	blt.n	80047ca <_Z14motor_standardv+0x1a2>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_SET);
 80047b2:	2201      	movs	r2, #1
 80047b4:	2110      	movs	r1, #16
 80047b6:	481a      	ldr	r0, [pc, #104]	; (8004820 <_Z14motor_standardv+0x1f8>)
 80047b8:	f003 f9ea 	bl	8007b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_RESET);
 80047bc:	2200      	movs	r2, #0
 80047be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047c2:	481b      	ldr	r0, [pc, #108]	; (8004830 <_Z14motor_standardv+0x208>)
 80047c4:	f003 f9e4 	bl	8007b90 <HAL_GPIO_WritePin>
 80047c8:	e00a      	b.n	80047e0 <_Z14motor_standardv+0x1b8>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_RESET);
 80047ca:	2200      	movs	r2, #0
 80047cc:	2110      	movs	r1, #16
 80047ce:	4814      	ldr	r0, [pc, #80]	; (8004820 <_Z14motor_standardv+0x1f8>)
 80047d0:	f003 f9de 	bl	8007b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_SET);
 80047d4:	2201      	movs	r2, #1
 80047d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047da:	4815      	ldr	r0, [pc, #84]	; (8004830 <_Z14motor_standardv+0x208>)
 80047dc:	f003 f9d8 	bl	8007b90 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, fabs(bl.PWM));
 80047e0:	4b12      	ldr	r3, [pc, #72]	; (800482c <_Z14motor_standardv+0x204>)
 80047e2:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80047e6:	eeb0 7bc7 	vabs.f64	d7, d7
 80047ea:	4b0e      	ldr	r3, [pc, #56]	; (8004824 <_Z14motor_standardv+0x1fc>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80047f2:	ee17 2a90 	vmov	r2, s15
 80047f6:	639a      	str	r2, [r3, #56]	; 0x38

}
 80047f8:	bf00      	nop
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	24000260 	.word	0x24000260
 8004800:	240000a0 	.word	0x240000a0
 8004804:	58020c00 	.word	0x58020c00
 8004808:	24000390 	.word	0x24000390
 800480c:	24000344 	.word	0x24000344
 8004810:	24000110 	.word	0x24000110
 8004814:	58020400 	.word	0x58020400
 8004818:	240002ac 	.word	0x240002ac
 800481c:	24000180 	.word	0x24000180
 8004820:	58021000 	.word	0x58021000
 8004824:	24000428 	.word	0x24000428
 8004828:	240002f8 	.word	0x240002f8
 800482c:	240001f0 	.word	0x240001f0
 8004830:	58020800 	.word	0x58020800

08004834 <Reset_Handler>:
 8004834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800486c <LoopFillZerobss+0xe>
 8004838:	f7ff fe52 	bl	80044e0 <SystemInit>
 800483c:	480c      	ldr	r0, [pc, #48]	; (8004870 <LoopFillZerobss+0x12>)
 800483e:	490d      	ldr	r1, [pc, #52]	; (8004874 <LoopFillZerobss+0x16>)
 8004840:	4a0d      	ldr	r2, [pc, #52]	; (8004878 <LoopFillZerobss+0x1a>)
 8004842:	2300      	movs	r3, #0
 8004844:	e002      	b.n	800484c <LoopCopyDataInit>

08004846 <CopyDataInit>:
 8004846:	58d4      	ldr	r4, [r2, r3]
 8004848:	50c4      	str	r4, [r0, r3]
 800484a:	3304      	adds	r3, #4

0800484c <LoopCopyDataInit>:
 800484c:	18c4      	adds	r4, r0, r3
 800484e:	428c      	cmp	r4, r1
 8004850:	d3f9      	bcc.n	8004846 <CopyDataInit>
 8004852:	4a0a      	ldr	r2, [pc, #40]	; (800487c <LoopFillZerobss+0x1e>)
 8004854:	4c0a      	ldr	r4, [pc, #40]	; (8004880 <LoopFillZerobss+0x22>)
 8004856:	2300      	movs	r3, #0
 8004858:	e001      	b.n	800485e <LoopFillZerobss>

0800485a <FillZerobss>:
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	3204      	adds	r2, #4

0800485e <LoopFillZerobss>:
 800485e:	42a2      	cmp	r2, r4
 8004860:	d3fb      	bcc.n	800485a <FillZerobss>
 8004862:	f009 f8a5 	bl	800d9b0 <__libc_init_array>
 8004866:	f7fc f869 	bl	800093c <main>
 800486a:	4770      	bx	lr
 800486c:	24050000 	.word	0x24050000
 8004870:	24000000 	.word	0x24000000
 8004874:	2400007c 	.word	0x2400007c
 8004878:	0800e008 	.word	0x0800e008
 800487c:	24000080 	.word	0x24000080
 8004880:	24001808 	.word	0x24001808

08004884 <ADC3_IRQHandler>:
 8004884:	e7fe      	b.n	8004884 <ADC3_IRQHandler>
	...

08004888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800488e:	2003      	movs	r0, #3
 8004890:	f000 f95c 	bl	8004b4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004894:	f003 ff34 	bl	8008700 <HAL_RCC_GetSysClockFreq>
 8004898:	4602      	mov	r2, r0
 800489a:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <HAL_Init+0x68>)
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	0a1b      	lsrs	r3, r3, #8
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	4913      	ldr	r1, [pc, #76]	; (80048f4 <HAL_Init+0x6c>)
 80048a6:	5ccb      	ldrb	r3, [r1, r3]
 80048a8:	f003 031f 	and.w	r3, r3, #31
 80048ac:	fa22 f303 	lsr.w	r3, r2, r3
 80048b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048b2:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <HAL_Init+0x68>)
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	4a0e      	ldr	r2, [pc, #56]	; (80048f4 <HAL_Init+0x6c>)
 80048bc:	5cd3      	ldrb	r3, [r2, r3]
 80048be:	f003 031f 	and.w	r3, r3, #31
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	fa22 f303 	lsr.w	r3, r2, r3
 80048c8:	4a0b      	ldr	r2, [pc, #44]	; (80048f8 <HAL_Init+0x70>)
 80048ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048cc:	4a0b      	ldr	r2, [pc, #44]	; (80048fc <HAL_Init+0x74>)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048d2:	200f      	movs	r0, #15
 80048d4:	f000 f814 	bl	8004900 <HAL_InitTick>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e002      	b.n	80048e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80048e2:	f7ff fa5d 	bl	8003da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	58024400 	.word	0x58024400
 80048f4:	0800dfac 	.word	0x0800dfac
 80048f8:	24000008 	.word	0x24000008
 80048fc:	24000004 	.word	0x24000004

08004900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004908:	4b15      	ldr	r3, [pc, #84]	; (8004960 <HAL_InitTick+0x60>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e021      	b.n	8004958 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004914:	4b13      	ldr	r3, [pc, #76]	; (8004964 <HAL_InitTick+0x64>)
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	4b11      	ldr	r3, [pc, #68]	; (8004960 <HAL_InitTick+0x60>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	4619      	mov	r1, r3
 800491e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004922:	fbb3 f3f1 	udiv	r3, r3, r1
 8004926:	fbb2 f3f3 	udiv	r3, r2, r3
 800492a:	4618      	mov	r0, r3
 800492c:	f000 f941 	bl	8004bb2 <HAL_SYSTICK_Config>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e00e      	b.n	8004958 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b0f      	cmp	r3, #15
 800493e:	d80a      	bhi.n	8004956 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004940:	2200      	movs	r2, #0
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	f04f 30ff 	mov.w	r0, #4294967295
 8004948:	f000 f90b 	bl	8004b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800494c:	4a06      	ldr	r2, [pc, #24]	; (8004968 <HAL_InitTick+0x68>)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	e000      	b.n	8004958 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
}
 8004958:	4618      	mov	r0, r3
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	24000010 	.word	0x24000010
 8004964:	24000004 	.word	0x24000004
 8004968:	2400000c 	.word	0x2400000c

0800496c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004970:	4b06      	ldr	r3, [pc, #24]	; (800498c <HAL_IncTick+0x20>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	461a      	mov	r2, r3
 8004976:	4b06      	ldr	r3, [pc, #24]	; (8004990 <HAL_IncTick+0x24>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4413      	add	r3, r2
 800497c:	4a04      	ldr	r2, [pc, #16]	; (8004990 <HAL_IncTick+0x24>)
 800497e:	6013      	str	r3, [r2, #0]
}
 8004980:	bf00      	nop
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	24000010 	.word	0x24000010
 8004990:	240017f4 	.word	0x240017f4

08004994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  return uwTick;
 8004998:	4b03      	ldr	r3, [pc, #12]	; (80049a8 <HAL_GetTick+0x14>)
 800499a:	681b      	ldr	r3, [r3, #0]
}
 800499c:	4618      	mov	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	240017f4 	.word	0x240017f4

080049ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049bc:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <__NVIC_SetPriorityGrouping+0x40>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049c8:	4013      	ands	r3, r2
 80049ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80049d4:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <__NVIC_SetPriorityGrouping+0x44>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049da:	4a04      	ldr	r2, [pc, #16]	; (80049ec <__NVIC_SetPriorityGrouping+0x40>)
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	60d3      	str	r3, [r2, #12]
}
 80049e0:	bf00      	nop
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	e000ed00 	.word	0xe000ed00
 80049f0:	05fa0000 	.word	0x05fa0000

080049f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049f8:	4b04      	ldr	r3, [pc, #16]	; (8004a0c <__NVIC_GetPriorityGrouping+0x18>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	0a1b      	lsrs	r3, r3, #8
 80049fe:	f003 0307 	and.w	r3, r3, #7
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	e000ed00 	.word	0xe000ed00

08004a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	4603      	mov	r3, r0
 8004a18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	db0b      	blt.n	8004a3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a22:	88fb      	ldrh	r3, [r7, #6]
 8004a24:	f003 021f 	and.w	r2, r3, #31
 8004a28:	4907      	ldr	r1, [pc, #28]	; (8004a48 <__NVIC_EnableIRQ+0x38>)
 8004a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a2e:	095b      	lsrs	r3, r3, #5
 8004a30:	2001      	movs	r0, #1
 8004a32:	fa00 f202 	lsl.w	r2, r0, r2
 8004a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	e000e100 	.word	0xe000e100

08004a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	4603      	mov	r3, r0
 8004a54:	6039      	str	r1, [r7, #0]
 8004a56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	db0a      	blt.n	8004a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	490c      	ldr	r1, [pc, #48]	; (8004a98 <__NVIC_SetPriority+0x4c>)
 8004a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a6a:	0112      	lsls	r2, r2, #4
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	440b      	add	r3, r1
 8004a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a74:	e00a      	b.n	8004a8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	4908      	ldr	r1, [pc, #32]	; (8004a9c <__NVIC_SetPriority+0x50>)
 8004a7c:	88fb      	ldrh	r3, [r7, #6]
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	3b04      	subs	r3, #4
 8004a84:	0112      	lsls	r2, r2, #4
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	440b      	add	r3, r1
 8004a8a:	761a      	strb	r2, [r3, #24]
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	e000e100 	.word	0xe000e100
 8004a9c:	e000ed00 	.word	0xe000ed00

08004aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b089      	sub	sp, #36	; 0x24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	f1c3 0307 	rsb	r3, r3, #7
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	bf28      	it	cs
 8004abe:	2304      	movcs	r3, #4
 8004ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	2b06      	cmp	r3, #6
 8004ac8:	d902      	bls.n	8004ad0 <NVIC_EncodePriority+0x30>
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	3b03      	subs	r3, #3
 8004ace:	e000      	b.n	8004ad2 <NVIC_EncodePriority+0x32>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	fa02 f303 	lsl.w	r3, r2, r3
 8004ade:	43da      	mvns	r2, r3
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	401a      	ands	r2, r3
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	fa01 f303 	lsl.w	r3, r1, r3
 8004af2:	43d9      	mvns	r1, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004af8:	4313      	orrs	r3, r2
         );
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3724      	adds	r7, #36	; 0x24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
	...

08004b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b18:	d301      	bcc.n	8004b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e00f      	b.n	8004b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b1e:	4a0a      	ldr	r2, [pc, #40]	; (8004b48 <SysTick_Config+0x40>)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b26:	210f      	movs	r1, #15
 8004b28:	f04f 30ff 	mov.w	r0, #4294967295
 8004b2c:	f7ff ff8e 	bl	8004a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b30:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <SysTick_Config+0x40>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b36:	4b04      	ldr	r3, [pc, #16]	; (8004b48 <SysTick_Config+0x40>)
 8004b38:	2207      	movs	r2, #7
 8004b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	e000e010 	.word	0xe000e010

08004b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff ff29 	bl	80049ac <__NVIC_SetPriorityGrouping>
}
 8004b5a:	bf00      	nop
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b086      	sub	sp, #24
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	4603      	mov	r3, r0
 8004b6a:	60b9      	str	r1, [r7, #8]
 8004b6c:	607a      	str	r2, [r7, #4]
 8004b6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b70:	f7ff ff40 	bl	80049f4 <__NVIC_GetPriorityGrouping>
 8004b74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	68b9      	ldr	r1, [r7, #8]
 8004b7a:	6978      	ldr	r0, [r7, #20]
 8004b7c:	f7ff ff90 	bl	8004aa0 <NVIC_EncodePriority>
 8004b80:	4602      	mov	r2, r0
 8004b82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b86:	4611      	mov	r1, r2
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff ff5f 	bl	8004a4c <__NVIC_SetPriority>
}
 8004b8e:	bf00      	nop
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ba0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff ff33 	bl	8004a10 <__NVIC_EnableIRQ>
}
 8004baa:	bf00      	nop
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b082      	sub	sp, #8
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7ff ffa4 	bl	8004b08 <SysTick_Config>
 8004bc0:	4603      	mov	r3, r0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004bd4:	f7ff fede 	bl	8004994 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e314      	b.n	800520e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a66      	ldr	r2, [pc, #408]	; (8004d84 <HAL_DMA_Init+0x1b8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d04a      	beq.n	8004c84 <HAL_DMA_Init+0xb8>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a65      	ldr	r2, [pc, #404]	; (8004d88 <HAL_DMA_Init+0x1bc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d045      	beq.n	8004c84 <HAL_DMA_Init+0xb8>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a63      	ldr	r2, [pc, #396]	; (8004d8c <HAL_DMA_Init+0x1c0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d040      	beq.n	8004c84 <HAL_DMA_Init+0xb8>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a62      	ldr	r2, [pc, #392]	; (8004d90 <HAL_DMA_Init+0x1c4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d03b      	beq.n	8004c84 <HAL_DMA_Init+0xb8>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a60      	ldr	r2, [pc, #384]	; (8004d94 <HAL_DMA_Init+0x1c8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d036      	beq.n	8004c84 <HAL_DMA_Init+0xb8>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a5f      	ldr	r2, [pc, #380]	; (8004d98 <HAL_DMA_Init+0x1cc>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d031      	beq.n	8004c84 <HAL_DMA_Init+0xb8>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a5d      	ldr	r2, [pc, #372]	; (8004d9c <HAL_DMA_Init+0x1d0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d02c      	beq.n	8004c84 <HAL_DMA_Init+0xb8>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a5c      	ldr	r2, [pc, #368]	; (8004da0 <HAL_DMA_Init+0x1d4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d027      	beq.n	8004c84 <HAL_DMA_Init+0xb8>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a5a      	ldr	r2, [pc, #360]	; (8004da4 <HAL_DMA_Init+0x1d8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d022      	beq.n	8004c84 <HAL_DMA_Init+0xb8>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a59      	ldr	r2, [pc, #356]	; (8004da8 <HAL_DMA_Init+0x1dc>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d01d      	beq.n	8004c84 <HAL_DMA_Init+0xb8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a57      	ldr	r2, [pc, #348]	; (8004dac <HAL_DMA_Init+0x1e0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d018      	beq.n	8004c84 <HAL_DMA_Init+0xb8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a56      	ldr	r2, [pc, #344]	; (8004db0 <HAL_DMA_Init+0x1e4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d013      	beq.n	8004c84 <HAL_DMA_Init+0xb8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a54      	ldr	r2, [pc, #336]	; (8004db4 <HAL_DMA_Init+0x1e8>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00e      	beq.n	8004c84 <HAL_DMA_Init+0xb8>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a53      	ldr	r2, [pc, #332]	; (8004db8 <HAL_DMA_Init+0x1ec>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d009      	beq.n	8004c84 <HAL_DMA_Init+0xb8>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a51      	ldr	r2, [pc, #324]	; (8004dbc <HAL_DMA_Init+0x1f0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d004      	beq.n	8004c84 <HAL_DMA_Init+0xb8>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a50      	ldr	r2, [pc, #320]	; (8004dc0 <HAL_DMA_Init+0x1f4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d101      	bne.n	8004c88 <HAL_DMA_Init+0xbc>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <HAL_DMA_Init+0xbe>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 813c 	beq.w	8004f08 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a37      	ldr	r2, [pc, #220]	; (8004d84 <HAL_DMA_Init+0x1b8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d04a      	beq.n	8004d40 <HAL_DMA_Init+0x174>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a36      	ldr	r2, [pc, #216]	; (8004d88 <HAL_DMA_Init+0x1bc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d045      	beq.n	8004d40 <HAL_DMA_Init+0x174>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a34      	ldr	r2, [pc, #208]	; (8004d8c <HAL_DMA_Init+0x1c0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d040      	beq.n	8004d40 <HAL_DMA_Init+0x174>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a33      	ldr	r2, [pc, #204]	; (8004d90 <HAL_DMA_Init+0x1c4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d03b      	beq.n	8004d40 <HAL_DMA_Init+0x174>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a31      	ldr	r2, [pc, #196]	; (8004d94 <HAL_DMA_Init+0x1c8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d036      	beq.n	8004d40 <HAL_DMA_Init+0x174>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a30      	ldr	r2, [pc, #192]	; (8004d98 <HAL_DMA_Init+0x1cc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d031      	beq.n	8004d40 <HAL_DMA_Init+0x174>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a2e      	ldr	r2, [pc, #184]	; (8004d9c <HAL_DMA_Init+0x1d0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d02c      	beq.n	8004d40 <HAL_DMA_Init+0x174>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a2d      	ldr	r2, [pc, #180]	; (8004da0 <HAL_DMA_Init+0x1d4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d027      	beq.n	8004d40 <HAL_DMA_Init+0x174>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a2b      	ldr	r2, [pc, #172]	; (8004da4 <HAL_DMA_Init+0x1d8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d022      	beq.n	8004d40 <HAL_DMA_Init+0x174>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a2a      	ldr	r2, [pc, #168]	; (8004da8 <HAL_DMA_Init+0x1dc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d01d      	beq.n	8004d40 <HAL_DMA_Init+0x174>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a28      	ldr	r2, [pc, #160]	; (8004dac <HAL_DMA_Init+0x1e0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d018      	beq.n	8004d40 <HAL_DMA_Init+0x174>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a27      	ldr	r2, [pc, #156]	; (8004db0 <HAL_DMA_Init+0x1e4>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d013      	beq.n	8004d40 <HAL_DMA_Init+0x174>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a25      	ldr	r2, [pc, #148]	; (8004db4 <HAL_DMA_Init+0x1e8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00e      	beq.n	8004d40 <HAL_DMA_Init+0x174>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a24      	ldr	r2, [pc, #144]	; (8004db8 <HAL_DMA_Init+0x1ec>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d009      	beq.n	8004d40 <HAL_DMA_Init+0x174>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a22      	ldr	r2, [pc, #136]	; (8004dbc <HAL_DMA_Init+0x1f0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d004      	beq.n	8004d40 <HAL_DMA_Init+0x174>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a21      	ldr	r2, [pc, #132]	; (8004dc0 <HAL_DMA_Init+0x1f4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d108      	bne.n	8004d52 <HAL_DMA_Init+0x186>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0201 	bic.w	r2, r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	e007      	b.n	8004d62 <HAL_DMA_Init+0x196>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0201 	bic.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d62:	e02f      	b.n	8004dc4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d64:	f7ff fe16 	bl	8004994 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b05      	cmp	r3, #5
 8004d70:	d928      	bls.n	8004dc4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2203      	movs	r2, #3
 8004d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e244      	b.n	800520e <HAL_DMA_Init+0x642>
 8004d84:	40020010 	.word	0x40020010
 8004d88:	40020028 	.word	0x40020028
 8004d8c:	40020040 	.word	0x40020040
 8004d90:	40020058 	.word	0x40020058
 8004d94:	40020070 	.word	0x40020070
 8004d98:	40020088 	.word	0x40020088
 8004d9c:	400200a0 	.word	0x400200a0
 8004da0:	400200b8 	.word	0x400200b8
 8004da4:	40020410 	.word	0x40020410
 8004da8:	40020428 	.word	0x40020428
 8004dac:	40020440 	.word	0x40020440
 8004db0:	40020458 	.word	0x40020458
 8004db4:	40020470 	.word	0x40020470
 8004db8:	40020488 	.word	0x40020488
 8004dbc:	400204a0 	.word	0x400204a0
 8004dc0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1c8      	bne.n	8004d64 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	4b84      	ldr	r3, [pc, #528]	; (8004ff0 <HAL_DMA_Init+0x424>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004dea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004df6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e02:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d107      	bne.n	8004e28 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e20:	4313      	orrs	r3, r2
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b28      	cmp	r3, #40	; 0x28
 8004e2e:	d903      	bls.n	8004e38 <HAL_DMA_Init+0x26c>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b2e      	cmp	r3, #46	; 0x2e
 8004e36:	d91f      	bls.n	8004e78 <HAL_DMA_Init+0x2ac>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2b3e      	cmp	r3, #62	; 0x3e
 8004e3e:	d903      	bls.n	8004e48 <HAL_DMA_Init+0x27c>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b42      	cmp	r3, #66	; 0x42
 8004e46:	d917      	bls.n	8004e78 <HAL_DMA_Init+0x2ac>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b46      	cmp	r3, #70	; 0x46
 8004e4e:	d903      	bls.n	8004e58 <HAL_DMA_Init+0x28c>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b48      	cmp	r3, #72	; 0x48
 8004e56:	d90f      	bls.n	8004e78 <HAL_DMA_Init+0x2ac>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b4e      	cmp	r3, #78	; 0x4e
 8004e5e:	d903      	bls.n	8004e68 <HAL_DMA_Init+0x29c>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2b52      	cmp	r3, #82	; 0x52
 8004e66:	d907      	bls.n	8004e78 <HAL_DMA_Init+0x2ac>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2b73      	cmp	r3, #115	; 0x73
 8004e6e:	d905      	bls.n	8004e7c <HAL_DMA_Init+0x2b0>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b77      	cmp	r3, #119	; 0x77
 8004e76:	d801      	bhi.n	8004e7c <HAL_DMA_Init+0x2b0>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e000      	b.n	8004e7e <HAL_DMA_Init+0x2b2>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e88:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f023 0307 	bic.w	r3, r3, #7
 8004ea0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d117      	bne.n	8004ee4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00e      	beq.n	8004ee4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f002 fb30 	bl	800752c <DMA_CheckFifoParam>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d008      	beq.n	8004ee4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2240      	movs	r2, #64	; 0x40
 8004ed6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e194      	b.n	800520e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f002 fa6b 	bl	80073c8 <DMA_CalcBaseAndBitshift>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004efa:	f003 031f 	and.w	r3, r3, #31
 8004efe:	223f      	movs	r2, #63	; 0x3f
 8004f00:	409a      	lsls	r2, r3
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	609a      	str	r2, [r3, #8]
 8004f06:	e0ca      	b.n	800509e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a39      	ldr	r2, [pc, #228]	; (8004ff4 <HAL_DMA_Init+0x428>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d022      	beq.n	8004f58 <HAL_DMA_Init+0x38c>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a38      	ldr	r2, [pc, #224]	; (8004ff8 <HAL_DMA_Init+0x42c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d01d      	beq.n	8004f58 <HAL_DMA_Init+0x38c>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a36      	ldr	r2, [pc, #216]	; (8004ffc <HAL_DMA_Init+0x430>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d018      	beq.n	8004f58 <HAL_DMA_Init+0x38c>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a35      	ldr	r2, [pc, #212]	; (8005000 <HAL_DMA_Init+0x434>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d013      	beq.n	8004f58 <HAL_DMA_Init+0x38c>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a33      	ldr	r2, [pc, #204]	; (8005004 <HAL_DMA_Init+0x438>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d00e      	beq.n	8004f58 <HAL_DMA_Init+0x38c>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a32      	ldr	r2, [pc, #200]	; (8005008 <HAL_DMA_Init+0x43c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d009      	beq.n	8004f58 <HAL_DMA_Init+0x38c>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a30      	ldr	r2, [pc, #192]	; (800500c <HAL_DMA_Init+0x440>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d004      	beq.n	8004f58 <HAL_DMA_Init+0x38c>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a2f      	ldr	r2, [pc, #188]	; (8005010 <HAL_DMA_Init+0x444>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d101      	bne.n	8004f5c <HAL_DMA_Init+0x390>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e000      	b.n	8004f5e <HAL_DMA_Init+0x392>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 8094 	beq.w	800508c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a22      	ldr	r2, [pc, #136]	; (8004ff4 <HAL_DMA_Init+0x428>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d021      	beq.n	8004fb2 <HAL_DMA_Init+0x3e6>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a21      	ldr	r2, [pc, #132]	; (8004ff8 <HAL_DMA_Init+0x42c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d01c      	beq.n	8004fb2 <HAL_DMA_Init+0x3e6>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a1f      	ldr	r2, [pc, #124]	; (8004ffc <HAL_DMA_Init+0x430>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d017      	beq.n	8004fb2 <HAL_DMA_Init+0x3e6>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a1e      	ldr	r2, [pc, #120]	; (8005000 <HAL_DMA_Init+0x434>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d012      	beq.n	8004fb2 <HAL_DMA_Init+0x3e6>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a1c      	ldr	r2, [pc, #112]	; (8005004 <HAL_DMA_Init+0x438>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00d      	beq.n	8004fb2 <HAL_DMA_Init+0x3e6>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1b      	ldr	r2, [pc, #108]	; (8005008 <HAL_DMA_Init+0x43c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d008      	beq.n	8004fb2 <HAL_DMA_Init+0x3e6>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a19      	ldr	r2, [pc, #100]	; (800500c <HAL_DMA_Init+0x440>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d003      	beq.n	8004fb2 <HAL_DMA_Init+0x3e6>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a18      	ldr	r2, [pc, #96]	; (8005010 <HAL_DMA_Init+0x444>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	4b11      	ldr	r3, [pc, #68]	; (8005014 <HAL_DMA_Init+0x448>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2b40      	cmp	r3, #64	; 0x40
 8004fda:	d01d      	beq.n	8005018 <HAL_DMA_Init+0x44c>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b80      	cmp	r3, #128	; 0x80
 8004fe2:	d102      	bne.n	8004fea <HAL_DMA_Init+0x41e>
 8004fe4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004fe8:	e017      	b.n	800501a <HAL_DMA_Init+0x44e>
 8004fea:	2300      	movs	r3, #0
 8004fec:	e015      	b.n	800501a <HAL_DMA_Init+0x44e>
 8004fee:	bf00      	nop
 8004ff0:	fe10803f 	.word	0xfe10803f
 8004ff4:	58025408 	.word	0x58025408
 8004ff8:	5802541c 	.word	0x5802541c
 8004ffc:	58025430 	.word	0x58025430
 8005000:	58025444 	.word	0x58025444
 8005004:	58025458 	.word	0x58025458
 8005008:	5802546c 	.word	0x5802546c
 800500c:	58025480 	.word	0x58025480
 8005010:	58025494 	.word	0x58025494
 8005014:	fffe000f 	.word	0xfffe000f
 8005018:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	68d2      	ldr	r2, [r2, #12]
 800501e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005020:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005028:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005030:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005038:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005040:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005048:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	461a      	mov	r2, r3
 800505e:	4b6e      	ldr	r3, [pc, #440]	; (8005218 <HAL_DMA_Init+0x64c>)
 8005060:	4413      	add	r3, r2
 8005062:	4a6e      	ldr	r2, [pc, #440]	; (800521c <HAL_DMA_Init+0x650>)
 8005064:	fba2 2303 	umull	r2, r3, r2, r3
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	009a      	lsls	r2, r3, #2
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f002 f9a9 	bl	80073c8 <DMA_CalcBaseAndBitshift>
 8005076:	4603      	mov	r3, r0
 8005078:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800507e:	f003 031f 	and.w	r3, r3, #31
 8005082:	2201      	movs	r2, #1
 8005084:	409a      	lsls	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	605a      	str	r2, [r3, #4]
 800508a:	e008      	b.n	800509e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2240      	movs	r2, #64	; 0x40
 8005090:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2203      	movs	r2, #3
 8005096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e0b7      	b.n	800520e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a5f      	ldr	r2, [pc, #380]	; (8005220 <HAL_DMA_Init+0x654>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d072      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a5d      	ldr	r2, [pc, #372]	; (8005224 <HAL_DMA_Init+0x658>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d06d      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a5c      	ldr	r2, [pc, #368]	; (8005228 <HAL_DMA_Init+0x65c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d068      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a5a      	ldr	r2, [pc, #360]	; (800522c <HAL_DMA_Init+0x660>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d063      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a59      	ldr	r2, [pc, #356]	; (8005230 <HAL_DMA_Init+0x664>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d05e      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a57      	ldr	r2, [pc, #348]	; (8005234 <HAL_DMA_Init+0x668>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d059      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a56      	ldr	r2, [pc, #344]	; (8005238 <HAL_DMA_Init+0x66c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d054      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a54      	ldr	r2, [pc, #336]	; (800523c <HAL_DMA_Init+0x670>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d04f      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a53      	ldr	r2, [pc, #332]	; (8005240 <HAL_DMA_Init+0x674>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d04a      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a51      	ldr	r2, [pc, #324]	; (8005244 <HAL_DMA_Init+0x678>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d045      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a50      	ldr	r2, [pc, #320]	; (8005248 <HAL_DMA_Init+0x67c>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d040      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a4e      	ldr	r2, [pc, #312]	; (800524c <HAL_DMA_Init+0x680>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d03b      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a4d      	ldr	r2, [pc, #308]	; (8005250 <HAL_DMA_Init+0x684>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d036      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a4b      	ldr	r2, [pc, #300]	; (8005254 <HAL_DMA_Init+0x688>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d031      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a4a      	ldr	r2, [pc, #296]	; (8005258 <HAL_DMA_Init+0x68c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d02c      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a48      	ldr	r2, [pc, #288]	; (800525c <HAL_DMA_Init+0x690>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d027      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a47      	ldr	r2, [pc, #284]	; (8005260 <HAL_DMA_Init+0x694>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d022      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a45      	ldr	r2, [pc, #276]	; (8005264 <HAL_DMA_Init+0x698>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d01d      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a44      	ldr	r2, [pc, #272]	; (8005268 <HAL_DMA_Init+0x69c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d018      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a42      	ldr	r2, [pc, #264]	; (800526c <HAL_DMA_Init+0x6a0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d013      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a41      	ldr	r2, [pc, #260]	; (8005270 <HAL_DMA_Init+0x6a4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00e      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a3f      	ldr	r2, [pc, #252]	; (8005274 <HAL_DMA_Init+0x6a8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d009      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a3e      	ldr	r2, [pc, #248]	; (8005278 <HAL_DMA_Init+0x6ac>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d004      	beq.n	800518e <HAL_DMA_Init+0x5c2>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a3c      	ldr	r2, [pc, #240]	; (800527c <HAL_DMA_Init+0x6b0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d101      	bne.n	8005192 <HAL_DMA_Init+0x5c6>
 800518e:	2301      	movs	r3, #1
 8005190:	e000      	b.n	8005194 <HAL_DMA_Init+0x5c8>
 8005192:	2300      	movs	r3, #0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d032      	beq.n	80051fe <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f002 fa43 	bl	8007624 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	2b80      	cmp	r3, #128	; 0x80
 80051a4:	d102      	bne.n	80051ac <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80051c0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d010      	beq.n	80051ec <HAL_DMA_Init+0x620>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d80c      	bhi.n	80051ec <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f002 fac0 	bl	8007758 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80051e8:	605a      	str	r2, [r3, #4]
 80051ea:	e008      	b.n	80051fe <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	a7fdabf8 	.word	0xa7fdabf8
 800521c:	cccccccd 	.word	0xcccccccd
 8005220:	40020010 	.word	0x40020010
 8005224:	40020028 	.word	0x40020028
 8005228:	40020040 	.word	0x40020040
 800522c:	40020058 	.word	0x40020058
 8005230:	40020070 	.word	0x40020070
 8005234:	40020088 	.word	0x40020088
 8005238:	400200a0 	.word	0x400200a0
 800523c:	400200b8 	.word	0x400200b8
 8005240:	40020410 	.word	0x40020410
 8005244:	40020428 	.word	0x40020428
 8005248:	40020440 	.word	0x40020440
 800524c:	40020458 	.word	0x40020458
 8005250:	40020470 	.word	0x40020470
 8005254:	40020488 	.word	0x40020488
 8005258:	400204a0 	.word	0x400204a0
 800525c:	400204b8 	.word	0x400204b8
 8005260:	58025408 	.word	0x58025408
 8005264:	5802541c 	.word	0x5802541c
 8005268:	58025430 	.word	0x58025430
 800526c:	58025444 	.word	0x58025444
 8005270:	58025458 	.word	0x58025458
 8005274:	5802546c 	.word	0x5802546c
 8005278:	58025480 	.word	0x58025480
 800527c:	58025494 	.word	0x58025494

08005280 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e226      	b.n	80056ea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <HAL_DMA_Start_IT+0x2a>
 80052a6:	2302      	movs	r3, #2
 80052a8:	e21f      	b.n	80056ea <HAL_DMA_Start_IT+0x46a>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	f040 820a 	bne.w	80056d4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a68      	ldr	r2, [pc, #416]	; (8005474 <HAL_DMA_Start_IT+0x1f4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d04a      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a66      	ldr	r2, [pc, #408]	; (8005478 <HAL_DMA_Start_IT+0x1f8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d045      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a65      	ldr	r2, [pc, #404]	; (800547c <HAL_DMA_Start_IT+0x1fc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d040      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a63      	ldr	r2, [pc, #396]	; (8005480 <HAL_DMA_Start_IT+0x200>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d03b      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a62      	ldr	r2, [pc, #392]	; (8005484 <HAL_DMA_Start_IT+0x204>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d036      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a60      	ldr	r2, [pc, #384]	; (8005488 <HAL_DMA_Start_IT+0x208>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d031      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a5f      	ldr	r2, [pc, #380]	; (800548c <HAL_DMA_Start_IT+0x20c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d02c      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a5d      	ldr	r2, [pc, #372]	; (8005490 <HAL_DMA_Start_IT+0x210>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d027      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a5c      	ldr	r2, [pc, #368]	; (8005494 <HAL_DMA_Start_IT+0x214>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d022      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a5a      	ldr	r2, [pc, #360]	; (8005498 <HAL_DMA_Start_IT+0x218>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d01d      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a59      	ldr	r2, [pc, #356]	; (800549c <HAL_DMA_Start_IT+0x21c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d018      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a57      	ldr	r2, [pc, #348]	; (80054a0 <HAL_DMA_Start_IT+0x220>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a56      	ldr	r2, [pc, #344]	; (80054a4 <HAL_DMA_Start_IT+0x224>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00e      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a54      	ldr	r2, [pc, #336]	; (80054a8 <HAL_DMA_Start_IT+0x228>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d009      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a53      	ldr	r2, [pc, #332]	; (80054ac <HAL_DMA_Start_IT+0x22c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d004      	beq.n	800536e <HAL_DMA_Start_IT+0xee>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a51      	ldr	r2, [pc, #324]	; (80054b0 <HAL_DMA_Start_IT+0x230>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d108      	bne.n	8005380 <HAL_DMA_Start_IT+0x100>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 0201 	bic.w	r2, r2, #1
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e007      	b.n	8005390 <HAL_DMA_Start_IT+0x110>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0201 	bic.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	68b9      	ldr	r1, [r7, #8]
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f001 fe6a 	bl	8007070 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a34      	ldr	r2, [pc, #208]	; (8005474 <HAL_DMA_Start_IT+0x1f4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d04a      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a33      	ldr	r2, [pc, #204]	; (8005478 <HAL_DMA_Start_IT+0x1f8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d045      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a31      	ldr	r2, [pc, #196]	; (800547c <HAL_DMA_Start_IT+0x1fc>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d040      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a30      	ldr	r2, [pc, #192]	; (8005480 <HAL_DMA_Start_IT+0x200>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d03b      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a2e      	ldr	r2, [pc, #184]	; (8005484 <HAL_DMA_Start_IT+0x204>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d036      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a2d      	ldr	r2, [pc, #180]	; (8005488 <HAL_DMA_Start_IT+0x208>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d031      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a2b      	ldr	r2, [pc, #172]	; (800548c <HAL_DMA_Start_IT+0x20c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d02c      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a2a      	ldr	r2, [pc, #168]	; (8005490 <HAL_DMA_Start_IT+0x210>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d027      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a28      	ldr	r2, [pc, #160]	; (8005494 <HAL_DMA_Start_IT+0x214>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d022      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a27      	ldr	r2, [pc, #156]	; (8005498 <HAL_DMA_Start_IT+0x218>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d01d      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a25      	ldr	r2, [pc, #148]	; (800549c <HAL_DMA_Start_IT+0x21c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d018      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a24      	ldr	r2, [pc, #144]	; (80054a0 <HAL_DMA_Start_IT+0x220>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d013      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a22      	ldr	r2, [pc, #136]	; (80054a4 <HAL_DMA_Start_IT+0x224>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00e      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a21      	ldr	r2, [pc, #132]	; (80054a8 <HAL_DMA_Start_IT+0x228>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d009      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1f      	ldr	r2, [pc, #124]	; (80054ac <HAL_DMA_Start_IT+0x22c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d004      	beq.n	800543c <HAL_DMA_Start_IT+0x1bc>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1e      	ldr	r2, [pc, #120]	; (80054b0 <HAL_DMA_Start_IT+0x230>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d101      	bne.n	8005440 <HAL_DMA_Start_IT+0x1c0>
 800543c:	2301      	movs	r3, #1
 800543e:	e000      	b.n	8005442 <HAL_DMA_Start_IT+0x1c2>
 8005440:	2300      	movs	r3, #0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d036      	beq.n	80054b4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f023 021e 	bic.w	r2, r3, #30
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0216 	orr.w	r2, r2, #22
 8005458:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	2b00      	cmp	r3, #0
 8005460:	d03e      	beq.n	80054e0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f042 0208 	orr.w	r2, r2, #8
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	e035      	b.n	80054e0 <HAL_DMA_Start_IT+0x260>
 8005474:	40020010 	.word	0x40020010
 8005478:	40020028 	.word	0x40020028
 800547c:	40020040 	.word	0x40020040
 8005480:	40020058 	.word	0x40020058
 8005484:	40020070 	.word	0x40020070
 8005488:	40020088 	.word	0x40020088
 800548c:	400200a0 	.word	0x400200a0
 8005490:	400200b8 	.word	0x400200b8
 8005494:	40020410 	.word	0x40020410
 8005498:	40020428 	.word	0x40020428
 800549c:	40020440 	.word	0x40020440
 80054a0:	40020458 	.word	0x40020458
 80054a4:	40020470 	.word	0x40020470
 80054a8:	40020488 	.word	0x40020488
 80054ac:	400204a0 	.word	0x400204a0
 80054b0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f023 020e 	bic.w	r2, r3, #14
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 020a 	orr.w	r2, r2, #10
 80054c6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d007      	beq.n	80054e0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0204 	orr.w	r2, r2, #4
 80054de:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a83      	ldr	r2, [pc, #524]	; (80056f4 <HAL_DMA_Start_IT+0x474>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d072      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a82      	ldr	r2, [pc, #520]	; (80056f8 <HAL_DMA_Start_IT+0x478>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d06d      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a80      	ldr	r2, [pc, #512]	; (80056fc <HAL_DMA_Start_IT+0x47c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d068      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a7f      	ldr	r2, [pc, #508]	; (8005700 <HAL_DMA_Start_IT+0x480>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d063      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a7d      	ldr	r2, [pc, #500]	; (8005704 <HAL_DMA_Start_IT+0x484>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d05e      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a7c      	ldr	r2, [pc, #496]	; (8005708 <HAL_DMA_Start_IT+0x488>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d059      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a7a      	ldr	r2, [pc, #488]	; (800570c <HAL_DMA_Start_IT+0x48c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d054      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a79      	ldr	r2, [pc, #484]	; (8005710 <HAL_DMA_Start_IT+0x490>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d04f      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a77      	ldr	r2, [pc, #476]	; (8005714 <HAL_DMA_Start_IT+0x494>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d04a      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a76      	ldr	r2, [pc, #472]	; (8005718 <HAL_DMA_Start_IT+0x498>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d045      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a74      	ldr	r2, [pc, #464]	; (800571c <HAL_DMA_Start_IT+0x49c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d040      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a73      	ldr	r2, [pc, #460]	; (8005720 <HAL_DMA_Start_IT+0x4a0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d03b      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a71      	ldr	r2, [pc, #452]	; (8005724 <HAL_DMA_Start_IT+0x4a4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d036      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a70      	ldr	r2, [pc, #448]	; (8005728 <HAL_DMA_Start_IT+0x4a8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d031      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a6e      	ldr	r2, [pc, #440]	; (800572c <HAL_DMA_Start_IT+0x4ac>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d02c      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a6d      	ldr	r2, [pc, #436]	; (8005730 <HAL_DMA_Start_IT+0x4b0>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d027      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a6b      	ldr	r2, [pc, #428]	; (8005734 <HAL_DMA_Start_IT+0x4b4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d022      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a6a      	ldr	r2, [pc, #424]	; (8005738 <HAL_DMA_Start_IT+0x4b8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d01d      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a68      	ldr	r2, [pc, #416]	; (800573c <HAL_DMA_Start_IT+0x4bc>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d018      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a67      	ldr	r2, [pc, #412]	; (8005740 <HAL_DMA_Start_IT+0x4c0>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d013      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a65      	ldr	r2, [pc, #404]	; (8005744 <HAL_DMA_Start_IT+0x4c4>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00e      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a64      	ldr	r2, [pc, #400]	; (8005748 <HAL_DMA_Start_IT+0x4c8>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d009      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a62      	ldr	r2, [pc, #392]	; (800574c <HAL_DMA_Start_IT+0x4cc>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d004      	beq.n	80055d0 <HAL_DMA_Start_IT+0x350>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a61      	ldr	r2, [pc, #388]	; (8005750 <HAL_DMA_Start_IT+0x4d0>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d101      	bne.n	80055d4 <HAL_DMA_Start_IT+0x354>
 80055d0:	2301      	movs	r3, #1
 80055d2:	e000      	b.n	80055d6 <HAL_DMA_Start_IT+0x356>
 80055d4:	2300      	movs	r3, #0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d01a      	beq.n	8005610 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d007      	beq.n	80055f8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055f6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800560a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800560e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a37      	ldr	r2, [pc, #220]	; (80056f4 <HAL_DMA_Start_IT+0x474>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d04a      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a36      	ldr	r2, [pc, #216]	; (80056f8 <HAL_DMA_Start_IT+0x478>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d045      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a34      	ldr	r2, [pc, #208]	; (80056fc <HAL_DMA_Start_IT+0x47c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d040      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a33      	ldr	r2, [pc, #204]	; (8005700 <HAL_DMA_Start_IT+0x480>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d03b      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a31      	ldr	r2, [pc, #196]	; (8005704 <HAL_DMA_Start_IT+0x484>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d036      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a30      	ldr	r2, [pc, #192]	; (8005708 <HAL_DMA_Start_IT+0x488>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d031      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a2e      	ldr	r2, [pc, #184]	; (800570c <HAL_DMA_Start_IT+0x48c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d02c      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a2d      	ldr	r2, [pc, #180]	; (8005710 <HAL_DMA_Start_IT+0x490>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d027      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a2b      	ldr	r2, [pc, #172]	; (8005714 <HAL_DMA_Start_IT+0x494>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d022      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a2a      	ldr	r2, [pc, #168]	; (8005718 <HAL_DMA_Start_IT+0x498>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d01d      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a28      	ldr	r2, [pc, #160]	; (800571c <HAL_DMA_Start_IT+0x49c>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d018      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a27      	ldr	r2, [pc, #156]	; (8005720 <HAL_DMA_Start_IT+0x4a0>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d013      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a25      	ldr	r2, [pc, #148]	; (8005724 <HAL_DMA_Start_IT+0x4a4>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00e      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a24      	ldr	r2, [pc, #144]	; (8005728 <HAL_DMA_Start_IT+0x4a8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d009      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a22      	ldr	r2, [pc, #136]	; (800572c <HAL_DMA_Start_IT+0x4ac>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d004      	beq.n	80056b0 <HAL_DMA_Start_IT+0x430>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a21      	ldr	r2, [pc, #132]	; (8005730 <HAL_DMA_Start_IT+0x4b0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d108      	bne.n	80056c2 <HAL_DMA_Start_IT+0x442>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0201 	orr.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	e012      	b.n	80056e8 <HAL_DMA_Start_IT+0x468>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f042 0201 	orr.w	r2, r2, #1
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	e009      	b.n	80056e8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	40020010 	.word	0x40020010
 80056f8:	40020028 	.word	0x40020028
 80056fc:	40020040 	.word	0x40020040
 8005700:	40020058 	.word	0x40020058
 8005704:	40020070 	.word	0x40020070
 8005708:	40020088 	.word	0x40020088
 800570c:	400200a0 	.word	0x400200a0
 8005710:	400200b8 	.word	0x400200b8
 8005714:	40020410 	.word	0x40020410
 8005718:	40020428 	.word	0x40020428
 800571c:	40020440 	.word	0x40020440
 8005720:	40020458 	.word	0x40020458
 8005724:	40020470 	.word	0x40020470
 8005728:	40020488 	.word	0x40020488
 800572c:	400204a0 	.word	0x400204a0
 8005730:	400204b8 	.word	0x400204b8
 8005734:	58025408 	.word	0x58025408
 8005738:	5802541c 	.word	0x5802541c
 800573c:	58025430 	.word	0x58025430
 8005740:	58025444 	.word	0x58025444
 8005744:	58025458 	.word	0x58025458
 8005748:	5802546c 	.word	0x5802546c
 800574c:	58025480 	.word	0x58025480
 8005750:	58025494 	.word	0x58025494

08005754 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800575c:	f7ff f91a 	bl	8004994 <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e2dc      	b.n	8005d26 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d008      	beq.n	800578a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2280      	movs	r2, #128	; 0x80
 800577c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e2cd      	b.n	8005d26 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a76      	ldr	r2, [pc, #472]	; (8005968 <HAL_DMA_Abort+0x214>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d04a      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a74      	ldr	r2, [pc, #464]	; (800596c <HAL_DMA_Abort+0x218>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d045      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a73      	ldr	r2, [pc, #460]	; (8005970 <HAL_DMA_Abort+0x21c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d040      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a71      	ldr	r2, [pc, #452]	; (8005974 <HAL_DMA_Abort+0x220>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d03b      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a70      	ldr	r2, [pc, #448]	; (8005978 <HAL_DMA_Abort+0x224>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d036      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a6e      	ldr	r2, [pc, #440]	; (800597c <HAL_DMA_Abort+0x228>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d031      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a6d      	ldr	r2, [pc, #436]	; (8005980 <HAL_DMA_Abort+0x22c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d02c      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a6b      	ldr	r2, [pc, #428]	; (8005984 <HAL_DMA_Abort+0x230>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d027      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a6a      	ldr	r2, [pc, #424]	; (8005988 <HAL_DMA_Abort+0x234>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d022      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a68      	ldr	r2, [pc, #416]	; (800598c <HAL_DMA_Abort+0x238>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d01d      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a67      	ldr	r2, [pc, #412]	; (8005990 <HAL_DMA_Abort+0x23c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d018      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a65      	ldr	r2, [pc, #404]	; (8005994 <HAL_DMA_Abort+0x240>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a64      	ldr	r2, [pc, #400]	; (8005998 <HAL_DMA_Abort+0x244>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00e      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a62      	ldr	r2, [pc, #392]	; (800599c <HAL_DMA_Abort+0x248>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d009      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a61      	ldr	r2, [pc, #388]	; (80059a0 <HAL_DMA_Abort+0x24c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d004      	beq.n	800582a <HAL_DMA_Abort+0xd6>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a5f      	ldr	r2, [pc, #380]	; (80059a4 <HAL_DMA_Abort+0x250>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d101      	bne.n	800582e <HAL_DMA_Abort+0xda>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <HAL_DMA_Abort+0xdc>
 800582e:	2300      	movs	r3, #0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d013      	beq.n	800585c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 021e 	bic.w	r2, r2, #30
 8005842:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	695a      	ldr	r2, [r3, #20]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005852:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	e00a      	b.n	8005872 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 020e 	bic.w	r2, r2, #14
 800586a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a3c      	ldr	r2, [pc, #240]	; (8005968 <HAL_DMA_Abort+0x214>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d072      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a3a      	ldr	r2, [pc, #232]	; (800596c <HAL_DMA_Abort+0x218>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d06d      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a39      	ldr	r2, [pc, #228]	; (8005970 <HAL_DMA_Abort+0x21c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d068      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a37      	ldr	r2, [pc, #220]	; (8005974 <HAL_DMA_Abort+0x220>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d063      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a36      	ldr	r2, [pc, #216]	; (8005978 <HAL_DMA_Abort+0x224>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d05e      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a34      	ldr	r2, [pc, #208]	; (800597c <HAL_DMA_Abort+0x228>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d059      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a33      	ldr	r2, [pc, #204]	; (8005980 <HAL_DMA_Abort+0x22c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d054      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a31      	ldr	r2, [pc, #196]	; (8005984 <HAL_DMA_Abort+0x230>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d04f      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a30      	ldr	r2, [pc, #192]	; (8005988 <HAL_DMA_Abort+0x234>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d04a      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a2e      	ldr	r2, [pc, #184]	; (800598c <HAL_DMA_Abort+0x238>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d045      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a2d      	ldr	r2, [pc, #180]	; (8005990 <HAL_DMA_Abort+0x23c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d040      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a2b      	ldr	r2, [pc, #172]	; (8005994 <HAL_DMA_Abort+0x240>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d03b      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a2a      	ldr	r2, [pc, #168]	; (8005998 <HAL_DMA_Abort+0x244>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d036      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a28      	ldr	r2, [pc, #160]	; (800599c <HAL_DMA_Abort+0x248>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d031      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a27      	ldr	r2, [pc, #156]	; (80059a0 <HAL_DMA_Abort+0x24c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d02c      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a25      	ldr	r2, [pc, #148]	; (80059a4 <HAL_DMA_Abort+0x250>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d027      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a24      	ldr	r2, [pc, #144]	; (80059a8 <HAL_DMA_Abort+0x254>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d022      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a22      	ldr	r2, [pc, #136]	; (80059ac <HAL_DMA_Abort+0x258>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d01d      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a21      	ldr	r2, [pc, #132]	; (80059b0 <HAL_DMA_Abort+0x25c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d018      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1f      	ldr	r2, [pc, #124]	; (80059b4 <HAL_DMA_Abort+0x260>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1e      	ldr	r2, [pc, #120]	; (80059b8 <HAL_DMA_Abort+0x264>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00e      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a1c      	ldr	r2, [pc, #112]	; (80059bc <HAL_DMA_Abort+0x268>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d009      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a1b      	ldr	r2, [pc, #108]	; (80059c0 <HAL_DMA_Abort+0x26c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d004      	beq.n	8005962 <HAL_DMA_Abort+0x20e>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a19      	ldr	r2, [pc, #100]	; (80059c4 <HAL_DMA_Abort+0x270>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d132      	bne.n	80059c8 <HAL_DMA_Abort+0x274>
 8005962:	2301      	movs	r3, #1
 8005964:	e031      	b.n	80059ca <HAL_DMA_Abort+0x276>
 8005966:	bf00      	nop
 8005968:	40020010 	.word	0x40020010
 800596c:	40020028 	.word	0x40020028
 8005970:	40020040 	.word	0x40020040
 8005974:	40020058 	.word	0x40020058
 8005978:	40020070 	.word	0x40020070
 800597c:	40020088 	.word	0x40020088
 8005980:	400200a0 	.word	0x400200a0
 8005984:	400200b8 	.word	0x400200b8
 8005988:	40020410 	.word	0x40020410
 800598c:	40020428 	.word	0x40020428
 8005990:	40020440 	.word	0x40020440
 8005994:	40020458 	.word	0x40020458
 8005998:	40020470 	.word	0x40020470
 800599c:	40020488 	.word	0x40020488
 80059a0:	400204a0 	.word	0x400204a0
 80059a4:	400204b8 	.word	0x400204b8
 80059a8:	58025408 	.word	0x58025408
 80059ac:	5802541c 	.word	0x5802541c
 80059b0:	58025430 	.word	0x58025430
 80059b4:	58025444 	.word	0x58025444
 80059b8:	58025458 	.word	0x58025458
 80059bc:	5802546c 	.word	0x5802546c
 80059c0:	58025480 	.word	0x58025480
 80059c4:	58025494 	.word	0x58025494
 80059c8:	2300      	movs	r3, #0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d007      	beq.n	80059de <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a6d      	ldr	r2, [pc, #436]	; (8005b98 <HAL_DMA_Abort+0x444>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d04a      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a6b      	ldr	r2, [pc, #428]	; (8005b9c <HAL_DMA_Abort+0x448>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d045      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a6a      	ldr	r2, [pc, #424]	; (8005ba0 <HAL_DMA_Abort+0x44c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d040      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a68      	ldr	r2, [pc, #416]	; (8005ba4 <HAL_DMA_Abort+0x450>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d03b      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a67      	ldr	r2, [pc, #412]	; (8005ba8 <HAL_DMA_Abort+0x454>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d036      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a65      	ldr	r2, [pc, #404]	; (8005bac <HAL_DMA_Abort+0x458>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d031      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a64      	ldr	r2, [pc, #400]	; (8005bb0 <HAL_DMA_Abort+0x45c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d02c      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a62      	ldr	r2, [pc, #392]	; (8005bb4 <HAL_DMA_Abort+0x460>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d027      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a61      	ldr	r2, [pc, #388]	; (8005bb8 <HAL_DMA_Abort+0x464>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d022      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a5f      	ldr	r2, [pc, #380]	; (8005bbc <HAL_DMA_Abort+0x468>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d01d      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a5e      	ldr	r2, [pc, #376]	; (8005bc0 <HAL_DMA_Abort+0x46c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d018      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a5c      	ldr	r2, [pc, #368]	; (8005bc4 <HAL_DMA_Abort+0x470>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d013      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a5b      	ldr	r2, [pc, #364]	; (8005bc8 <HAL_DMA_Abort+0x474>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00e      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a59      	ldr	r2, [pc, #356]	; (8005bcc <HAL_DMA_Abort+0x478>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d009      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a58      	ldr	r2, [pc, #352]	; (8005bd0 <HAL_DMA_Abort+0x47c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d004      	beq.n	8005a7e <HAL_DMA_Abort+0x32a>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a56      	ldr	r2, [pc, #344]	; (8005bd4 <HAL_DMA_Abort+0x480>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d108      	bne.n	8005a90 <HAL_DMA_Abort+0x33c>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0201 	bic.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	e007      	b.n	8005aa0 <HAL_DMA_Abort+0x34c>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0201 	bic.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005aa0:	e013      	b.n	8005aca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005aa2:	f7fe ff77 	bl	8004994 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b05      	cmp	r3, #5
 8005aae:	d90c      	bls.n	8005aca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2203      	movs	r2, #3
 8005aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e12d      	b.n	8005d26 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1e5      	bne.n	8005aa2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a2f      	ldr	r2, [pc, #188]	; (8005b98 <HAL_DMA_Abort+0x444>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d04a      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a2d      	ldr	r2, [pc, #180]	; (8005b9c <HAL_DMA_Abort+0x448>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d045      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a2c      	ldr	r2, [pc, #176]	; (8005ba0 <HAL_DMA_Abort+0x44c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d040      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a2a      	ldr	r2, [pc, #168]	; (8005ba4 <HAL_DMA_Abort+0x450>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d03b      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a29      	ldr	r2, [pc, #164]	; (8005ba8 <HAL_DMA_Abort+0x454>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d036      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a27      	ldr	r2, [pc, #156]	; (8005bac <HAL_DMA_Abort+0x458>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d031      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a26      	ldr	r2, [pc, #152]	; (8005bb0 <HAL_DMA_Abort+0x45c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d02c      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a24      	ldr	r2, [pc, #144]	; (8005bb4 <HAL_DMA_Abort+0x460>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d027      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a23      	ldr	r2, [pc, #140]	; (8005bb8 <HAL_DMA_Abort+0x464>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d022      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a21      	ldr	r2, [pc, #132]	; (8005bbc <HAL_DMA_Abort+0x468>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d01d      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a20      	ldr	r2, [pc, #128]	; (8005bc0 <HAL_DMA_Abort+0x46c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d018      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1e      	ldr	r2, [pc, #120]	; (8005bc4 <HAL_DMA_Abort+0x470>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d013      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1d      	ldr	r2, [pc, #116]	; (8005bc8 <HAL_DMA_Abort+0x474>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00e      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1b      	ldr	r2, [pc, #108]	; (8005bcc <HAL_DMA_Abort+0x478>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d009      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1a      	ldr	r2, [pc, #104]	; (8005bd0 <HAL_DMA_Abort+0x47c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d004      	beq.n	8005b76 <HAL_DMA_Abort+0x422>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a18      	ldr	r2, [pc, #96]	; (8005bd4 <HAL_DMA_Abort+0x480>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d101      	bne.n	8005b7a <HAL_DMA_Abort+0x426>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <HAL_DMA_Abort+0x428>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d02b      	beq.n	8005bd8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b84:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b8a:	f003 031f 	and.w	r3, r3, #31
 8005b8e:	223f      	movs	r2, #63	; 0x3f
 8005b90:	409a      	lsls	r2, r3
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	609a      	str	r2, [r3, #8]
 8005b96:	e02a      	b.n	8005bee <HAL_DMA_Abort+0x49a>
 8005b98:	40020010 	.word	0x40020010
 8005b9c:	40020028 	.word	0x40020028
 8005ba0:	40020040 	.word	0x40020040
 8005ba4:	40020058 	.word	0x40020058
 8005ba8:	40020070 	.word	0x40020070
 8005bac:	40020088 	.word	0x40020088
 8005bb0:	400200a0 	.word	0x400200a0
 8005bb4:	400200b8 	.word	0x400200b8
 8005bb8:	40020410 	.word	0x40020410
 8005bbc:	40020428 	.word	0x40020428
 8005bc0:	40020440 	.word	0x40020440
 8005bc4:	40020458 	.word	0x40020458
 8005bc8:	40020470 	.word	0x40020470
 8005bcc:	40020488 	.word	0x40020488
 8005bd0:	400204a0 	.word	0x400204a0
 8005bd4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bdc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be2:	f003 031f 	and.w	r3, r3, #31
 8005be6:	2201      	movs	r2, #1
 8005be8:	409a      	lsls	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a4f      	ldr	r2, [pc, #316]	; (8005d30 <HAL_DMA_Abort+0x5dc>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d072      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a4d      	ldr	r2, [pc, #308]	; (8005d34 <HAL_DMA_Abort+0x5e0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d06d      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a4c      	ldr	r2, [pc, #304]	; (8005d38 <HAL_DMA_Abort+0x5e4>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d068      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a4a      	ldr	r2, [pc, #296]	; (8005d3c <HAL_DMA_Abort+0x5e8>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d063      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a49      	ldr	r2, [pc, #292]	; (8005d40 <HAL_DMA_Abort+0x5ec>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d05e      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a47      	ldr	r2, [pc, #284]	; (8005d44 <HAL_DMA_Abort+0x5f0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d059      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a46      	ldr	r2, [pc, #280]	; (8005d48 <HAL_DMA_Abort+0x5f4>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d054      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a44      	ldr	r2, [pc, #272]	; (8005d4c <HAL_DMA_Abort+0x5f8>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d04f      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a43      	ldr	r2, [pc, #268]	; (8005d50 <HAL_DMA_Abort+0x5fc>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d04a      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a41      	ldr	r2, [pc, #260]	; (8005d54 <HAL_DMA_Abort+0x600>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d045      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a40      	ldr	r2, [pc, #256]	; (8005d58 <HAL_DMA_Abort+0x604>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d040      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a3e      	ldr	r2, [pc, #248]	; (8005d5c <HAL_DMA_Abort+0x608>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d03b      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a3d      	ldr	r2, [pc, #244]	; (8005d60 <HAL_DMA_Abort+0x60c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d036      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a3b      	ldr	r2, [pc, #236]	; (8005d64 <HAL_DMA_Abort+0x610>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d031      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a3a      	ldr	r2, [pc, #232]	; (8005d68 <HAL_DMA_Abort+0x614>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d02c      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a38      	ldr	r2, [pc, #224]	; (8005d6c <HAL_DMA_Abort+0x618>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d027      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a37      	ldr	r2, [pc, #220]	; (8005d70 <HAL_DMA_Abort+0x61c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d022      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a35      	ldr	r2, [pc, #212]	; (8005d74 <HAL_DMA_Abort+0x620>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d01d      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a34      	ldr	r2, [pc, #208]	; (8005d78 <HAL_DMA_Abort+0x624>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d018      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a32      	ldr	r2, [pc, #200]	; (8005d7c <HAL_DMA_Abort+0x628>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d013      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a31      	ldr	r2, [pc, #196]	; (8005d80 <HAL_DMA_Abort+0x62c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d00e      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a2f      	ldr	r2, [pc, #188]	; (8005d84 <HAL_DMA_Abort+0x630>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d009      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a2e      	ldr	r2, [pc, #184]	; (8005d88 <HAL_DMA_Abort+0x634>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d004      	beq.n	8005cde <HAL_DMA_Abort+0x58a>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a2c      	ldr	r2, [pc, #176]	; (8005d8c <HAL_DMA_Abort+0x638>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d101      	bne.n	8005ce2 <HAL_DMA_Abort+0x58e>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <HAL_DMA_Abort+0x590>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d015      	beq.n	8005d14 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005cf0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00c      	beq.n	8005d14 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d08:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d12:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	40020010 	.word	0x40020010
 8005d34:	40020028 	.word	0x40020028
 8005d38:	40020040 	.word	0x40020040
 8005d3c:	40020058 	.word	0x40020058
 8005d40:	40020070 	.word	0x40020070
 8005d44:	40020088 	.word	0x40020088
 8005d48:	400200a0 	.word	0x400200a0
 8005d4c:	400200b8 	.word	0x400200b8
 8005d50:	40020410 	.word	0x40020410
 8005d54:	40020428 	.word	0x40020428
 8005d58:	40020440 	.word	0x40020440
 8005d5c:	40020458 	.word	0x40020458
 8005d60:	40020470 	.word	0x40020470
 8005d64:	40020488 	.word	0x40020488
 8005d68:	400204a0 	.word	0x400204a0
 8005d6c:	400204b8 	.word	0x400204b8
 8005d70:	58025408 	.word	0x58025408
 8005d74:	5802541c 	.word	0x5802541c
 8005d78:	58025430 	.word	0x58025430
 8005d7c:	58025444 	.word	0x58025444
 8005d80:	58025458 	.word	0x58025458
 8005d84:	5802546c 	.word	0x5802546c
 8005d88:	58025480 	.word	0x58025480
 8005d8c:	58025494 	.word	0x58025494

08005d90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e237      	b.n	8006212 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d004      	beq.n	8005db8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2280      	movs	r2, #128	; 0x80
 8005db2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e22c      	b.n	8006212 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a5c      	ldr	r2, [pc, #368]	; (8005f30 <HAL_DMA_Abort_IT+0x1a0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d04a      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a5b      	ldr	r2, [pc, #364]	; (8005f34 <HAL_DMA_Abort_IT+0x1a4>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d045      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a59      	ldr	r2, [pc, #356]	; (8005f38 <HAL_DMA_Abort_IT+0x1a8>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d040      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a58      	ldr	r2, [pc, #352]	; (8005f3c <HAL_DMA_Abort_IT+0x1ac>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d03b      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a56      	ldr	r2, [pc, #344]	; (8005f40 <HAL_DMA_Abort_IT+0x1b0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d036      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a55      	ldr	r2, [pc, #340]	; (8005f44 <HAL_DMA_Abort_IT+0x1b4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d031      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a53      	ldr	r2, [pc, #332]	; (8005f48 <HAL_DMA_Abort_IT+0x1b8>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d02c      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a52      	ldr	r2, [pc, #328]	; (8005f4c <HAL_DMA_Abort_IT+0x1bc>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d027      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a50      	ldr	r2, [pc, #320]	; (8005f50 <HAL_DMA_Abort_IT+0x1c0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d022      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a4f      	ldr	r2, [pc, #316]	; (8005f54 <HAL_DMA_Abort_IT+0x1c4>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d01d      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a4d      	ldr	r2, [pc, #308]	; (8005f58 <HAL_DMA_Abort_IT+0x1c8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d018      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a4c      	ldr	r2, [pc, #304]	; (8005f5c <HAL_DMA_Abort_IT+0x1cc>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d013      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a4a      	ldr	r2, [pc, #296]	; (8005f60 <HAL_DMA_Abort_IT+0x1d0>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00e      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a49      	ldr	r2, [pc, #292]	; (8005f64 <HAL_DMA_Abort_IT+0x1d4>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d009      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a47      	ldr	r2, [pc, #284]	; (8005f68 <HAL_DMA_Abort_IT+0x1d8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d004      	beq.n	8005e58 <HAL_DMA_Abort_IT+0xc8>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a46      	ldr	r2, [pc, #280]	; (8005f6c <HAL_DMA_Abort_IT+0x1dc>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d101      	bne.n	8005e5c <HAL_DMA_Abort_IT+0xcc>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e000      	b.n	8005e5e <HAL_DMA_Abort_IT+0xce>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 8086 	beq.w	8005f70 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2204      	movs	r2, #4
 8005e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a2f      	ldr	r2, [pc, #188]	; (8005f30 <HAL_DMA_Abort_IT+0x1a0>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d04a      	beq.n	8005f0c <HAL_DMA_Abort_IT+0x17c>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a2e      	ldr	r2, [pc, #184]	; (8005f34 <HAL_DMA_Abort_IT+0x1a4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d045      	beq.n	8005f0c <HAL_DMA_Abort_IT+0x17c>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a2c      	ldr	r2, [pc, #176]	; (8005f38 <HAL_DMA_Abort_IT+0x1a8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d040      	beq.n	8005f0c <HAL_DMA_Abort_IT+0x17c>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a2b      	ldr	r2, [pc, #172]	; (8005f3c <HAL_DMA_Abort_IT+0x1ac>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d03b      	beq.n	8005f0c <HAL_DMA_Abort_IT+0x17c>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a29      	ldr	r2, [pc, #164]	; (8005f40 <HAL_DMA_Abort_IT+0x1b0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d036      	beq.n	8005f0c <HAL_DMA_Abort_IT+0x17c>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a28      	ldr	r2, [pc, #160]	; (8005f44 <HAL_DMA_Abort_IT+0x1b4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d031      	beq.n	8005f0c <HAL_DMA_Abort_IT+0x17c>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a26      	ldr	r2, [pc, #152]	; (8005f48 <HAL_DMA_Abort_IT+0x1b8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d02c      	beq.n	8005f0c <HAL_DMA_Abort_IT+0x17c>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a25      	ldr	r2, [pc, #148]	; (8005f4c <HAL_DMA_Abort_IT+0x1bc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d027      	beq.n	8005f0c <HAL_DMA_Abort_IT+0x17c>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a23      	ldr	r2, [pc, #140]	; (8005f50 <HAL_DMA_Abort_IT+0x1c0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d022      	beq.n	8005f0c <HAL_DMA_Abort_IT+0x17c>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a22      	ldr	r2, [pc, #136]	; (8005f54 <HAL_DMA_Abort_IT+0x1c4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d01d      	beq.n	8005f0c <HAL_DMA_Abort_IT+0x17c>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a20      	ldr	r2, [pc, #128]	; (8005f58 <HAL_DMA_Abort_IT+0x1c8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d018      	beq.n	8005f0c <HAL_DMA_Abort_IT+0x17c>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a1f      	ldr	r2, [pc, #124]	; (8005f5c <HAL_DMA_Abort_IT+0x1cc>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d013      	beq.n	8005f0c <HAL_DMA_Abort_IT+0x17c>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a1d      	ldr	r2, [pc, #116]	; (8005f60 <HAL_DMA_Abort_IT+0x1d0>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d00e      	beq.n	8005f0c <HAL_DMA_Abort_IT+0x17c>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1c      	ldr	r2, [pc, #112]	; (8005f64 <HAL_DMA_Abort_IT+0x1d4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d009      	beq.n	8005f0c <HAL_DMA_Abort_IT+0x17c>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a1a      	ldr	r2, [pc, #104]	; (8005f68 <HAL_DMA_Abort_IT+0x1d8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d004      	beq.n	8005f0c <HAL_DMA_Abort_IT+0x17c>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a19      	ldr	r2, [pc, #100]	; (8005f6c <HAL_DMA_Abort_IT+0x1dc>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d108      	bne.n	8005f1e <HAL_DMA_Abort_IT+0x18e>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0201 	bic.w	r2, r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	e178      	b.n	8006210 <HAL_DMA_Abort_IT+0x480>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0201 	bic.w	r2, r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	e16f      	b.n	8006210 <HAL_DMA_Abort_IT+0x480>
 8005f30:	40020010 	.word	0x40020010
 8005f34:	40020028 	.word	0x40020028
 8005f38:	40020040 	.word	0x40020040
 8005f3c:	40020058 	.word	0x40020058
 8005f40:	40020070 	.word	0x40020070
 8005f44:	40020088 	.word	0x40020088
 8005f48:	400200a0 	.word	0x400200a0
 8005f4c:	400200b8 	.word	0x400200b8
 8005f50:	40020410 	.word	0x40020410
 8005f54:	40020428 	.word	0x40020428
 8005f58:	40020440 	.word	0x40020440
 8005f5c:	40020458 	.word	0x40020458
 8005f60:	40020470 	.word	0x40020470
 8005f64:	40020488 	.word	0x40020488
 8005f68:	400204a0 	.word	0x400204a0
 8005f6c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 020e 	bic.w	r2, r2, #14
 8005f7e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a6c      	ldr	r2, [pc, #432]	; (8006138 <HAL_DMA_Abort_IT+0x3a8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d04a      	beq.n	8006020 <HAL_DMA_Abort_IT+0x290>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a6b      	ldr	r2, [pc, #428]	; (800613c <HAL_DMA_Abort_IT+0x3ac>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d045      	beq.n	8006020 <HAL_DMA_Abort_IT+0x290>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a69      	ldr	r2, [pc, #420]	; (8006140 <HAL_DMA_Abort_IT+0x3b0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d040      	beq.n	8006020 <HAL_DMA_Abort_IT+0x290>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a68      	ldr	r2, [pc, #416]	; (8006144 <HAL_DMA_Abort_IT+0x3b4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d03b      	beq.n	8006020 <HAL_DMA_Abort_IT+0x290>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a66      	ldr	r2, [pc, #408]	; (8006148 <HAL_DMA_Abort_IT+0x3b8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d036      	beq.n	8006020 <HAL_DMA_Abort_IT+0x290>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a65      	ldr	r2, [pc, #404]	; (800614c <HAL_DMA_Abort_IT+0x3bc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d031      	beq.n	8006020 <HAL_DMA_Abort_IT+0x290>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a63      	ldr	r2, [pc, #396]	; (8006150 <HAL_DMA_Abort_IT+0x3c0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d02c      	beq.n	8006020 <HAL_DMA_Abort_IT+0x290>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a62      	ldr	r2, [pc, #392]	; (8006154 <HAL_DMA_Abort_IT+0x3c4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d027      	beq.n	8006020 <HAL_DMA_Abort_IT+0x290>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a60      	ldr	r2, [pc, #384]	; (8006158 <HAL_DMA_Abort_IT+0x3c8>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d022      	beq.n	8006020 <HAL_DMA_Abort_IT+0x290>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a5f      	ldr	r2, [pc, #380]	; (800615c <HAL_DMA_Abort_IT+0x3cc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d01d      	beq.n	8006020 <HAL_DMA_Abort_IT+0x290>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a5d      	ldr	r2, [pc, #372]	; (8006160 <HAL_DMA_Abort_IT+0x3d0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d018      	beq.n	8006020 <HAL_DMA_Abort_IT+0x290>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a5c      	ldr	r2, [pc, #368]	; (8006164 <HAL_DMA_Abort_IT+0x3d4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d013      	beq.n	8006020 <HAL_DMA_Abort_IT+0x290>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a5a      	ldr	r2, [pc, #360]	; (8006168 <HAL_DMA_Abort_IT+0x3d8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d00e      	beq.n	8006020 <HAL_DMA_Abort_IT+0x290>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a59      	ldr	r2, [pc, #356]	; (800616c <HAL_DMA_Abort_IT+0x3dc>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d009      	beq.n	8006020 <HAL_DMA_Abort_IT+0x290>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a57      	ldr	r2, [pc, #348]	; (8006170 <HAL_DMA_Abort_IT+0x3e0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d004      	beq.n	8006020 <HAL_DMA_Abort_IT+0x290>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a56      	ldr	r2, [pc, #344]	; (8006174 <HAL_DMA_Abort_IT+0x3e4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d108      	bne.n	8006032 <HAL_DMA_Abort_IT+0x2a2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0201 	bic.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	e007      	b.n	8006042 <HAL_DMA_Abort_IT+0x2b2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0201 	bic.w	r2, r2, #1
 8006040:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a3c      	ldr	r2, [pc, #240]	; (8006138 <HAL_DMA_Abort_IT+0x3a8>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d072      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a3a      	ldr	r2, [pc, #232]	; (800613c <HAL_DMA_Abort_IT+0x3ac>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d06d      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a39      	ldr	r2, [pc, #228]	; (8006140 <HAL_DMA_Abort_IT+0x3b0>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d068      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a37      	ldr	r2, [pc, #220]	; (8006144 <HAL_DMA_Abort_IT+0x3b4>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d063      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a36      	ldr	r2, [pc, #216]	; (8006148 <HAL_DMA_Abort_IT+0x3b8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d05e      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a34      	ldr	r2, [pc, #208]	; (800614c <HAL_DMA_Abort_IT+0x3bc>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d059      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a33      	ldr	r2, [pc, #204]	; (8006150 <HAL_DMA_Abort_IT+0x3c0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d054      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a31      	ldr	r2, [pc, #196]	; (8006154 <HAL_DMA_Abort_IT+0x3c4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d04f      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a30      	ldr	r2, [pc, #192]	; (8006158 <HAL_DMA_Abort_IT+0x3c8>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d04a      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a2e      	ldr	r2, [pc, #184]	; (800615c <HAL_DMA_Abort_IT+0x3cc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d045      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a2d      	ldr	r2, [pc, #180]	; (8006160 <HAL_DMA_Abort_IT+0x3d0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d040      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a2b      	ldr	r2, [pc, #172]	; (8006164 <HAL_DMA_Abort_IT+0x3d4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d03b      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a2a      	ldr	r2, [pc, #168]	; (8006168 <HAL_DMA_Abort_IT+0x3d8>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d036      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a28      	ldr	r2, [pc, #160]	; (800616c <HAL_DMA_Abort_IT+0x3dc>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d031      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a27      	ldr	r2, [pc, #156]	; (8006170 <HAL_DMA_Abort_IT+0x3e0>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d02c      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a25      	ldr	r2, [pc, #148]	; (8006174 <HAL_DMA_Abort_IT+0x3e4>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d027      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a24      	ldr	r2, [pc, #144]	; (8006178 <HAL_DMA_Abort_IT+0x3e8>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d022      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a22      	ldr	r2, [pc, #136]	; (800617c <HAL_DMA_Abort_IT+0x3ec>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d01d      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a21      	ldr	r2, [pc, #132]	; (8006180 <HAL_DMA_Abort_IT+0x3f0>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d018      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a1f      	ldr	r2, [pc, #124]	; (8006184 <HAL_DMA_Abort_IT+0x3f4>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d013      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a1e      	ldr	r2, [pc, #120]	; (8006188 <HAL_DMA_Abort_IT+0x3f8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00e      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a1c      	ldr	r2, [pc, #112]	; (800618c <HAL_DMA_Abort_IT+0x3fc>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d009      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a1b      	ldr	r2, [pc, #108]	; (8006190 <HAL_DMA_Abort_IT+0x400>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d004      	beq.n	8006132 <HAL_DMA_Abort_IT+0x3a2>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a19      	ldr	r2, [pc, #100]	; (8006194 <HAL_DMA_Abort_IT+0x404>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d132      	bne.n	8006198 <HAL_DMA_Abort_IT+0x408>
 8006132:	2301      	movs	r3, #1
 8006134:	e031      	b.n	800619a <HAL_DMA_Abort_IT+0x40a>
 8006136:	bf00      	nop
 8006138:	40020010 	.word	0x40020010
 800613c:	40020028 	.word	0x40020028
 8006140:	40020040 	.word	0x40020040
 8006144:	40020058 	.word	0x40020058
 8006148:	40020070 	.word	0x40020070
 800614c:	40020088 	.word	0x40020088
 8006150:	400200a0 	.word	0x400200a0
 8006154:	400200b8 	.word	0x400200b8
 8006158:	40020410 	.word	0x40020410
 800615c:	40020428 	.word	0x40020428
 8006160:	40020440 	.word	0x40020440
 8006164:	40020458 	.word	0x40020458
 8006168:	40020470 	.word	0x40020470
 800616c:	40020488 	.word	0x40020488
 8006170:	400204a0 	.word	0x400204a0
 8006174:	400204b8 	.word	0x400204b8
 8006178:	58025408 	.word	0x58025408
 800617c:	5802541c 	.word	0x5802541c
 8006180:	58025430 	.word	0x58025430
 8006184:	58025444 	.word	0x58025444
 8006188:	58025458 	.word	0x58025458
 800618c:	5802546c 	.word	0x5802546c
 8006190:	58025480 	.word	0x58025480
 8006194:	58025494 	.word	0x58025494
 8006198:	2300      	movs	r3, #0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d028      	beq.n	80061f0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061ac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b8:	f003 031f 	and.w	r3, r3, #31
 80061bc:	2201      	movs	r2, #1
 80061be:	409a      	lsls	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80061cc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00c      	beq.n	80061f0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061e4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80061ee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop

0800621c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b08a      	sub	sp, #40	; 0x28
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006228:	4b67      	ldr	r3, [pc, #412]	; (80063c8 <HAL_DMA_IRQHandler+0x1ac>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a67      	ldr	r2, [pc, #412]	; (80063cc <HAL_DMA_IRQHandler+0x1b0>)
 800622e:	fba2 2303 	umull	r2, r3, r2, r3
 8006232:	0a9b      	lsrs	r3, r3, #10
 8006234:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006240:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a5f      	ldr	r2, [pc, #380]	; (80063d0 <HAL_DMA_IRQHandler+0x1b4>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d04a      	beq.n	80062ee <HAL_DMA_IRQHandler+0xd2>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a5d      	ldr	r2, [pc, #372]	; (80063d4 <HAL_DMA_IRQHandler+0x1b8>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d045      	beq.n	80062ee <HAL_DMA_IRQHandler+0xd2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a5c      	ldr	r2, [pc, #368]	; (80063d8 <HAL_DMA_IRQHandler+0x1bc>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d040      	beq.n	80062ee <HAL_DMA_IRQHandler+0xd2>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a5a      	ldr	r2, [pc, #360]	; (80063dc <HAL_DMA_IRQHandler+0x1c0>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d03b      	beq.n	80062ee <HAL_DMA_IRQHandler+0xd2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a59      	ldr	r2, [pc, #356]	; (80063e0 <HAL_DMA_IRQHandler+0x1c4>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d036      	beq.n	80062ee <HAL_DMA_IRQHandler+0xd2>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a57      	ldr	r2, [pc, #348]	; (80063e4 <HAL_DMA_IRQHandler+0x1c8>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d031      	beq.n	80062ee <HAL_DMA_IRQHandler+0xd2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a56      	ldr	r2, [pc, #344]	; (80063e8 <HAL_DMA_IRQHandler+0x1cc>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d02c      	beq.n	80062ee <HAL_DMA_IRQHandler+0xd2>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a54      	ldr	r2, [pc, #336]	; (80063ec <HAL_DMA_IRQHandler+0x1d0>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d027      	beq.n	80062ee <HAL_DMA_IRQHandler+0xd2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a53      	ldr	r2, [pc, #332]	; (80063f0 <HAL_DMA_IRQHandler+0x1d4>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d022      	beq.n	80062ee <HAL_DMA_IRQHandler+0xd2>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a51      	ldr	r2, [pc, #324]	; (80063f4 <HAL_DMA_IRQHandler+0x1d8>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d01d      	beq.n	80062ee <HAL_DMA_IRQHandler+0xd2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a50      	ldr	r2, [pc, #320]	; (80063f8 <HAL_DMA_IRQHandler+0x1dc>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d018      	beq.n	80062ee <HAL_DMA_IRQHandler+0xd2>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a4e      	ldr	r2, [pc, #312]	; (80063fc <HAL_DMA_IRQHandler+0x1e0>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d013      	beq.n	80062ee <HAL_DMA_IRQHandler+0xd2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a4d      	ldr	r2, [pc, #308]	; (8006400 <HAL_DMA_IRQHandler+0x1e4>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d00e      	beq.n	80062ee <HAL_DMA_IRQHandler+0xd2>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a4b      	ldr	r2, [pc, #300]	; (8006404 <HAL_DMA_IRQHandler+0x1e8>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d009      	beq.n	80062ee <HAL_DMA_IRQHandler+0xd2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a4a      	ldr	r2, [pc, #296]	; (8006408 <HAL_DMA_IRQHandler+0x1ec>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d004      	beq.n	80062ee <HAL_DMA_IRQHandler+0xd2>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a48      	ldr	r2, [pc, #288]	; (800640c <HAL_DMA_IRQHandler+0x1f0>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d101      	bne.n	80062f2 <HAL_DMA_IRQHandler+0xd6>
 80062ee:	2301      	movs	r3, #1
 80062f0:	e000      	b.n	80062f4 <HAL_DMA_IRQHandler+0xd8>
 80062f2:	2300      	movs	r3, #0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 842b 	beq.w	8006b50 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062fe:	f003 031f 	and.w	r3, r3, #31
 8006302:	2208      	movs	r2, #8
 8006304:	409a      	lsls	r2, r3
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	4013      	ands	r3, r2
 800630a:	2b00      	cmp	r3, #0
 800630c:	f000 80a2 	beq.w	8006454 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a2e      	ldr	r2, [pc, #184]	; (80063d0 <HAL_DMA_IRQHandler+0x1b4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d04a      	beq.n	80063b0 <HAL_DMA_IRQHandler+0x194>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a2d      	ldr	r2, [pc, #180]	; (80063d4 <HAL_DMA_IRQHandler+0x1b8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d045      	beq.n	80063b0 <HAL_DMA_IRQHandler+0x194>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a2b      	ldr	r2, [pc, #172]	; (80063d8 <HAL_DMA_IRQHandler+0x1bc>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d040      	beq.n	80063b0 <HAL_DMA_IRQHandler+0x194>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a2a      	ldr	r2, [pc, #168]	; (80063dc <HAL_DMA_IRQHandler+0x1c0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d03b      	beq.n	80063b0 <HAL_DMA_IRQHandler+0x194>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a28      	ldr	r2, [pc, #160]	; (80063e0 <HAL_DMA_IRQHandler+0x1c4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d036      	beq.n	80063b0 <HAL_DMA_IRQHandler+0x194>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a27      	ldr	r2, [pc, #156]	; (80063e4 <HAL_DMA_IRQHandler+0x1c8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d031      	beq.n	80063b0 <HAL_DMA_IRQHandler+0x194>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a25      	ldr	r2, [pc, #148]	; (80063e8 <HAL_DMA_IRQHandler+0x1cc>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d02c      	beq.n	80063b0 <HAL_DMA_IRQHandler+0x194>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a24      	ldr	r2, [pc, #144]	; (80063ec <HAL_DMA_IRQHandler+0x1d0>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d027      	beq.n	80063b0 <HAL_DMA_IRQHandler+0x194>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a22      	ldr	r2, [pc, #136]	; (80063f0 <HAL_DMA_IRQHandler+0x1d4>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d022      	beq.n	80063b0 <HAL_DMA_IRQHandler+0x194>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a21      	ldr	r2, [pc, #132]	; (80063f4 <HAL_DMA_IRQHandler+0x1d8>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d01d      	beq.n	80063b0 <HAL_DMA_IRQHandler+0x194>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a1f      	ldr	r2, [pc, #124]	; (80063f8 <HAL_DMA_IRQHandler+0x1dc>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d018      	beq.n	80063b0 <HAL_DMA_IRQHandler+0x194>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a1e      	ldr	r2, [pc, #120]	; (80063fc <HAL_DMA_IRQHandler+0x1e0>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d013      	beq.n	80063b0 <HAL_DMA_IRQHandler+0x194>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a1c      	ldr	r2, [pc, #112]	; (8006400 <HAL_DMA_IRQHandler+0x1e4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d00e      	beq.n	80063b0 <HAL_DMA_IRQHandler+0x194>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a1b      	ldr	r2, [pc, #108]	; (8006404 <HAL_DMA_IRQHandler+0x1e8>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d009      	beq.n	80063b0 <HAL_DMA_IRQHandler+0x194>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a19      	ldr	r2, [pc, #100]	; (8006408 <HAL_DMA_IRQHandler+0x1ec>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d004      	beq.n	80063b0 <HAL_DMA_IRQHandler+0x194>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a18      	ldr	r2, [pc, #96]	; (800640c <HAL_DMA_IRQHandler+0x1f0>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d12f      	bne.n	8006410 <HAL_DMA_IRQHandler+0x1f4>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0304 	and.w	r3, r3, #4
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	bf14      	ite	ne
 80063be:	2301      	movne	r3, #1
 80063c0:	2300      	moveq	r3, #0
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	e02e      	b.n	8006424 <HAL_DMA_IRQHandler+0x208>
 80063c6:	bf00      	nop
 80063c8:	24000004 	.word	0x24000004
 80063cc:	1b4e81b5 	.word	0x1b4e81b5
 80063d0:	40020010 	.word	0x40020010
 80063d4:	40020028 	.word	0x40020028
 80063d8:	40020040 	.word	0x40020040
 80063dc:	40020058 	.word	0x40020058
 80063e0:	40020070 	.word	0x40020070
 80063e4:	40020088 	.word	0x40020088
 80063e8:	400200a0 	.word	0x400200a0
 80063ec:	400200b8 	.word	0x400200b8
 80063f0:	40020410 	.word	0x40020410
 80063f4:	40020428 	.word	0x40020428
 80063f8:	40020440 	.word	0x40020440
 80063fc:	40020458 	.word	0x40020458
 8006400:	40020470 	.word	0x40020470
 8006404:	40020488 	.word	0x40020488
 8006408:	400204a0 	.word	0x400204a0
 800640c:	400204b8 	.word	0x400204b8
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0308 	and.w	r3, r3, #8
 800641a:	2b00      	cmp	r3, #0
 800641c:	bf14      	ite	ne
 800641e:	2301      	movne	r3, #1
 8006420:	2300      	moveq	r3, #0
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d015      	beq.n	8006454 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0204 	bic.w	r2, r2, #4
 8006436:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800643c:	f003 031f 	and.w	r3, r3, #31
 8006440:	2208      	movs	r2, #8
 8006442:	409a      	lsls	r2, r3
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644c:	f043 0201 	orr.w	r2, r3, #1
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006458:	f003 031f 	and.w	r3, r3, #31
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	fa22 f303 	lsr.w	r3, r2, r3
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d06e      	beq.n	8006548 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a69      	ldr	r2, [pc, #420]	; (8006614 <HAL_DMA_IRQHandler+0x3f8>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d04a      	beq.n	800650a <HAL_DMA_IRQHandler+0x2ee>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a67      	ldr	r2, [pc, #412]	; (8006618 <HAL_DMA_IRQHandler+0x3fc>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d045      	beq.n	800650a <HAL_DMA_IRQHandler+0x2ee>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a66      	ldr	r2, [pc, #408]	; (800661c <HAL_DMA_IRQHandler+0x400>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d040      	beq.n	800650a <HAL_DMA_IRQHandler+0x2ee>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a64      	ldr	r2, [pc, #400]	; (8006620 <HAL_DMA_IRQHandler+0x404>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d03b      	beq.n	800650a <HAL_DMA_IRQHandler+0x2ee>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a63      	ldr	r2, [pc, #396]	; (8006624 <HAL_DMA_IRQHandler+0x408>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d036      	beq.n	800650a <HAL_DMA_IRQHandler+0x2ee>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a61      	ldr	r2, [pc, #388]	; (8006628 <HAL_DMA_IRQHandler+0x40c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d031      	beq.n	800650a <HAL_DMA_IRQHandler+0x2ee>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a60      	ldr	r2, [pc, #384]	; (800662c <HAL_DMA_IRQHandler+0x410>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d02c      	beq.n	800650a <HAL_DMA_IRQHandler+0x2ee>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a5e      	ldr	r2, [pc, #376]	; (8006630 <HAL_DMA_IRQHandler+0x414>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d027      	beq.n	800650a <HAL_DMA_IRQHandler+0x2ee>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a5d      	ldr	r2, [pc, #372]	; (8006634 <HAL_DMA_IRQHandler+0x418>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d022      	beq.n	800650a <HAL_DMA_IRQHandler+0x2ee>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a5b      	ldr	r2, [pc, #364]	; (8006638 <HAL_DMA_IRQHandler+0x41c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d01d      	beq.n	800650a <HAL_DMA_IRQHandler+0x2ee>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a5a      	ldr	r2, [pc, #360]	; (800663c <HAL_DMA_IRQHandler+0x420>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d018      	beq.n	800650a <HAL_DMA_IRQHandler+0x2ee>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a58      	ldr	r2, [pc, #352]	; (8006640 <HAL_DMA_IRQHandler+0x424>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d013      	beq.n	800650a <HAL_DMA_IRQHandler+0x2ee>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a57      	ldr	r2, [pc, #348]	; (8006644 <HAL_DMA_IRQHandler+0x428>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d00e      	beq.n	800650a <HAL_DMA_IRQHandler+0x2ee>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a55      	ldr	r2, [pc, #340]	; (8006648 <HAL_DMA_IRQHandler+0x42c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d009      	beq.n	800650a <HAL_DMA_IRQHandler+0x2ee>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a54      	ldr	r2, [pc, #336]	; (800664c <HAL_DMA_IRQHandler+0x430>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d004      	beq.n	800650a <HAL_DMA_IRQHandler+0x2ee>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a52      	ldr	r2, [pc, #328]	; (8006650 <HAL_DMA_IRQHandler+0x434>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d10a      	bne.n	8006520 <HAL_DMA_IRQHandler+0x304>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006514:	2b00      	cmp	r3, #0
 8006516:	bf14      	ite	ne
 8006518:	2301      	movne	r3, #1
 800651a:	2300      	moveq	r3, #0
 800651c:	b2db      	uxtb	r3, r3
 800651e:	e003      	b.n	8006528 <HAL_DMA_IRQHandler+0x30c>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2300      	movs	r3, #0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00d      	beq.n	8006548 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006530:	f003 031f 	and.w	r3, r3, #31
 8006534:	2201      	movs	r2, #1
 8006536:	409a      	lsls	r2, r3
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006540:	f043 0202 	orr.w	r2, r3, #2
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800654c:	f003 031f 	and.w	r3, r3, #31
 8006550:	2204      	movs	r2, #4
 8006552:	409a      	lsls	r2, r3
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	4013      	ands	r3, r2
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 808f 	beq.w	800667c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a2c      	ldr	r2, [pc, #176]	; (8006614 <HAL_DMA_IRQHandler+0x3f8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d04a      	beq.n	80065fe <HAL_DMA_IRQHandler+0x3e2>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a2a      	ldr	r2, [pc, #168]	; (8006618 <HAL_DMA_IRQHandler+0x3fc>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d045      	beq.n	80065fe <HAL_DMA_IRQHandler+0x3e2>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a29      	ldr	r2, [pc, #164]	; (800661c <HAL_DMA_IRQHandler+0x400>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d040      	beq.n	80065fe <HAL_DMA_IRQHandler+0x3e2>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a27      	ldr	r2, [pc, #156]	; (8006620 <HAL_DMA_IRQHandler+0x404>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d03b      	beq.n	80065fe <HAL_DMA_IRQHandler+0x3e2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a26      	ldr	r2, [pc, #152]	; (8006624 <HAL_DMA_IRQHandler+0x408>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d036      	beq.n	80065fe <HAL_DMA_IRQHandler+0x3e2>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a24      	ldr	r2, [pc, #144]	; (8006628 <HAL_DMA_IRQHandler+0x40c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d031      	beq.n	80065fe <HAL_DMA_IRQHandler+0x3e2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a23      	ldr	r2, [pc, #140]	; (800662c <HAL_DMA_IRQHandler+0x410>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d02c      	beq.n	80065fe <HAL_DMA_IRQHandler+0x3e2>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a21      	ldr	r2, [pc, #132]	; (8006630 <HAL_DMA_IRQHandler+0x414>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d027      	beq.n	80065fe <HAL_DMA_IRQHandler+0x3e2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a20      	ldr	r2, [pc, #128]	; (8006634 <HAL_DMA_IRQHandler+0x418>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d022      	beq.n	80065fe <HAL_DMA_IRQHandler+0x3e2>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a1e      	ldr	r2, [pc, #120]	; (8006638 <HAL_DMA_IRQHandler+0x41c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d01d      	beq.n	80065fe <HAL_DMA_IRQHandler+0x3e2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a1d      	ldr	r2, [pc, #116]	; (800663c <HAL_DMA_IRQHandler+0x420>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d018      	beq.n	80065fe <HAL_DMA_IRQHandler+0x3e2>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a1b      	ldr	r2, [pc, #108]	; (8006640 <HAL_DMA_IRQHandler+0x424>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d013      	beq.n	80065fe <HAL_DMA_IRQHandler+0x3e2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a1a      	ldr	r2, [pc, #104]	; (8006644 <HAL_DMA_IRQHandler+0x428>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d00e      	beq.n	80065fe <HAL_DMA_IRQHandler+0x3e2>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a18      	ldr	r2, [pc, #96]	; (8006648 <HAL_DMA_IRQHandler+0x42c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d009      	beq.n	80065fe <HAL_DMA_IRQHandler+0x3e2>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a17      	ldr	r2, [pc, #92]	; (800664c <HAL_DMA_IRQHandler+0x430>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d004      	beq.n	80065fe <HAL_DMA_IRQHandler+0x3e2>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a15      	ldr	r2, [pc, #84]	; (8006650 <HAL_DMA_IRQHandler+0x434>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d12a      	bne.n	8006654 <HAL_DMA_IRQHandler+0x438>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	2b00      	cmp	r3, #0
 800660a:	bf14      	ite	ne
 800660c:	2301      	movne	r3, #1
 800660e:	2300      	moveq	r3, #0
 8006610:	b2db      	uxtb	r3, r3
 8006612:	e023      	b.n	800665c <HAL_DMA_IRQHandler+0x440>
 8006614:	40020010 	.word	0x40020010
 8006618:	40020028 	.word	0x40020028
 800661c:	40020040 	.word	0x40020040
 8006620:	40020058 	.word	0x40020058
 8006624:	40020070 	.word	0x40020070
 8006628:	40020088 	.word	0x40020088
 800662c:	400200a0 	.word	0x400200a0
 8006630:	400200b8 	.word	0x400200b8
 8006634:	40020410 	.word	0x40020410
 8006638:	40020428 	.word	0x40020428
 800663c:	40020440 	.word	0x40020440
 8006640:	40020458 	.word	0x40020458
 8006644:	40020470 	.word	0x40020470
 8006648:	40020488 	.word	0x40020488
 800664c:	400204a0 	.word	0x400204a0
 8006650:	400204b8 	.word	0x400204b8
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2300      	movs	r3, #0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00d      	beq.n	800667c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006664:	f003 031f 	and.w	r3, r3, #31
 8006668:	2204      	movs	r2, #4
 800666a:	409a      	lsls	r2, r3
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006674:	f043 0204 	orr.w	r2, r3, #4
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006680:	f003 031f 	and.w	r3, r3, #31
 8006684:	2210      	movs	r2, #16
 8006686:	409a      	lsls	r2, r3
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	4013      	ands	r3, r2
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 80a6 	beq.w	80067de <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a85      	ldr	r2, [pc, #532]	; (80068ac <HAL_DMA_IRQHandler+0x690>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d04a      	beq.n	8006732 <HAL_DMA_IRQHandler+0x516>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a83      	ldr	r2, [pc, #524]	; (80068b0 <HAL_DMA_IRQHandler+0x694>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d045      	beq.n	8006732 <HAL_DMA_IRQHandler+0x516>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a82      	ldr	r2, [pc, #520]	; (80068b4 <HAL_DMA_IRQHandler+0x698>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d040      	beq.n	8006732 <HAL_DMA_IRQHandler+0x516>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a80      	ldr	r2, [pc, #512]	; (80068b8 <HAL_DMA_IRQHandler+0x69c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d03b      	beq.n	8006732 <HAL_DMA_IRQHandler+0x516>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a7f      	ldr	r2, [pc, #508]	; (80068bc <HAL_DMA_IRQHandler+0x6a0>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d036      	beq.n	8006732 <HAL_DMA_IRQHandler+0x516>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a7d      	ldr	r2, [pc, #500]	; (80068c0 <HAL_DMA_IRQHandler+0x6a4>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d031      	beq.n	8006732 <HAL_DMA_IRQHandler+0x516>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a7c      	ldr	r2, [pc, #496]	; (80068c4 <HAL_DMA_IRQHandler+0x6a8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d02c      	beq.n	8006732 <HAL_DMA_IRQHandler+0x516>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a7a      	ldr	r2, [pc, #488]	; (80068c8 <HAL_DMA_IRQHandler+0x6ac>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d027      	beq.n	8006732 <HAL_DMA_IRQHandler+0x516>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a79      	ldr	r2, [pc, #484]	; (80068cc <HAL_DMA_IRQHandler+0x6b0>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d022      	beq.n	8006732 <HAL_DMA_IRQHandler+0x516>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a77      	ldr	r2, [pc, #476]	; (80068d0 <HAL_DMA_IRQHandler+0x6b4>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d01d      	beq.n	8006732 <HAL_DMA_IRQHandler+0x516>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a76      	ldr	r2, [pc, #472]	; (80068d4 <HAL_DMA_IRQHandler+0x6b8>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d018      	beq.n	8006732 <HAL_DMA_IRQHandler+0x516>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a74      	ldr	r2, [pc, #464]	; (80068d8 <HAL_DMA_IRQHandler+0x6bc>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d013      	beq.n	8006732 <HAL_DMA_IRQHandler+0x516>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a73      	ldr	r2, [pc, #460]	; (80068dc <HAL_DMA_IRQHandler+0x6c0>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d00e      	beq.n	8006732 <HAL_DMA_IRQHandler+0x516>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a71      	ldr	r2, [pc, #452]	; (80068e0 <HAL_DMA_IRQHandler+0x6c4>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d009      	beq.n	8006732 <HAL_DMA_IRQHandler+0x516>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a70      	ldr	r2, [pc, #448]	; (80068e4 <HAL_DMA_IRQHandler+0x6c8>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d004      	beq.n	8006732 <HAL_DMA_IRQHandler+0x516>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a6e      	ldr	r2, [pc, #440]	; (80068e8 <HAL_DMA_IRQHandler+0x6cc>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d10a      	bne.n	8006748 <HAL_DMA_IRQHandler+0x52c>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0308 	and.w	r3, r3, #8
 800673c:	2b00      	cmp	r3, #0
 800673e:	bf14      	ite	ne
 8006740:	2301      	movne	r3, #1
 8006742:	2300      	moveq	r3, #0
 8006744:	b2db      	uxtb	r3, r3
 8006746:	e009      	b.n	800675c <HAL_DMA_IRQHandler+0x540>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b00      	cmp	r3, #0
 8006754:	bf14      	ite	ne
 8006756:	2301      	movne	r3, #1
 8006758:	2300      	moveq	r3, #0
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b00      	cmp	r3, #0
 800675e:	d03e      	beq.n	80067de <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006764:	f003 031f 	and.w	r3, r3, #31
 8006768:	2210      	movs	r2, #16
 800676a:	409a      	lsls	r2, r3
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d018      	beq.n	80067b0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d108      	bne.n	800679e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006790:	2b00      	cmp	r3, #0
 8006792:	d024      	beq.n	80067de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	4798      	blx	r3
 800679c:	e01f      	b.n	80067de <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d01b      	beq.n	80067de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	4798      	blx	r3
 80067ae:	e016      	b.n	80067de <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d107      	bne.n	80067ce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0208 	bic.w	r2, r2, #8
 80067cc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e2:	f003 031f 	and.w	r3, r3, #31
 80067e6:	2220      	movs	r2, #32
 80067e8:	409a      	lsls	r2, r3
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	4013      	ands	r3, r2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f000 8110 	beq.w	8006a14 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a2c      	ldr	r2, [pc, #176]	; (80068ac <HAL_DMA_IRQHandler+0x690>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d04a      	beq.n	8006894 <HAL_DMA_IRQHandler+0x678>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a2b      	ldr	r2, [pc, #172]	; (80068b0 <HAL_DMA_IRQHandler+0x694>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d045      	beq.n	8006894 <HAL_DMA_IRQHandler+0x678>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a29      	ldr	r2, [pc, #164]	; (80068b4 <HAL_DMA_IRQHandler+0x698>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d040      	beq.n	8006894 <HAL_DMA_IRQHandler+0x678>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a28      	ldr	r2, [pc, #160]	; (80068b8 <HAL_DMA_IRQHandler+0x69c>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d03b      	beq.n	8006894 <HAL_DMA_IRQHandler+0x678>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a26      	ldr	r2, [pc, #152]	; (80068bc <HAL_DMA_IRQHandler+0x6a0>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d036      	beq.n	8006894 <HAL_DMA_IRQHandler+0x678>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a25      	ldr	r2, [pc, #148]	; (80068c0 <HAL_DMA_IRQHandler+0x6a4>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d031      	beq.n	8006894 <HAL_DMA_IRQHandler+0x678>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a23      	ldr	r2, [pc, #140]	; (80068c4 <HAL_DMA_IRQHandler+0x6a8>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d02c      	beq.n	8006894 <HAL_DMA_IRQHandler+0x678>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a22      	ldr	r2, [pc, #136]	; (80068c8 <HAL_DMA_IRQHandler+0x6ac>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d027      	beq.n	8006894 <HAL_DMA_IRQHandler+0x678>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a20      	ldr	r2, [pc, #128]	; (80068cc <HAL_DMA_IRQHandler+0x6b0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d022      	beq.n	8006894 <HAL_DMA_IRQHandler+0x678>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a1f      	ldr	r2, [pc, #124]	; (80068d0 <HAL_DMA_IRQHandler+0x6b4>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d01d      	beq.n	8006894 <HAL_DMA_IRQHandler+0x678>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a1d      	ldr	r2, [pc, #116]	; (80068d4 <HAL_DMA_IRQHandler+0x6b8>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d018      	beq.n	8006894 <HAL_DMA_IRQHandler+0x678>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a1c      	ldr	r2, [pc, #112]	; (80068d8 <HAL_DMA_IRQHandler+0x6bc>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d013      	beq.n	8006894 <HAL_DMA_IRQHandler+0x678>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a1a      	ldr	r2, [pc, #104]	; (80068dc <HAL_DMA_IRQHandler+0x6c0>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d00e      	beq.n	8006894 <HAL_DMA_IRQHandler+0x678>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a19      	ldr	r2, [pc, #100]	; (80068e0 <HAL_DMA_IRQHandler+0x6c4>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d009      	beq.n	8006894 <HAL_DMA_IRQHandler+0x678>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a17      	ldr	r2, [pc, #92]	; (80068e4 <HAL_DMA_IRQHandler+0x6c8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d004      	beq.n	8006894 <HAL_DMA_IRQHandler+0x678>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a16      	ldr	r2, [pc, #88]	; (80068e8 <HAL_DMA_IRQHandler+0x6cc>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d12b      	bne.n	80068ec <HAL_DMA_IRQHandler+0x6d0>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0310 	and.w	r3, r3, #16
 800689e:	2b00      	cmp	r3, #0
 80068a0:	bf14      	ite	ne
 80068a2:	2301      	movne	r3, #1
 80068a4:	2300      	moveq	r3, #0
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	e02a      	b.n	8006900 <HAL_DMA_IRQHandler+0x6e4>
 80068aa:	bf00      	nop
 80068ac:	40020010 	.word	0x40020010
 80068b0:	40020028 	.word	0x40020028
 80068b4:	40020040 	.word	0x40020040
 80068b8:	40020058 	.word	0x40020058
 80068bc:	40020070 	.word	0x40020070
 80068c0:	40020088 	.word	0x40020088
 80068c4:	400200a0 	.word	0x400200a0
 80068c8:	400200b8 	.word	0x400200b8
 80068cc:	40020410 	.word	0x40020410
 80068d0:	40020428 	.word	0x40020428
 80068d4:	40020440 	.word	0x40020440
 80068d8:	40020458 	.word	0x40020458
 80068dc:	40020470 	.word	0x40020470
 80068e0:	40020488 	.word	0x40020488
 80068e4:	400204a0 	.word	0x400204a0
 80068e8:	400204b8 	.word	0x400204b8
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	bf14      	ite	ne
 80068fa:	2301      	movne	r3, #1
 80068fc:	2300      	moveq	r3, #0
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 8087 	beq.w	8006a14 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800690a:	f003 031f 	and.w	r3, r3, #31
 800690e:	2220      	movs	r2, #32
 8006910:	409a      	lsls	r2, r3
 8006912:	6a3b      	ldr	r3, [r7, #32]
 8006914:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b04      	cmp	r3, #4
 8006920:	d139      	bne.n	8006996 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0216 	bic.w	r2, r2, #22
 8006930:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	695a      	ldr	r2, [r3, #20]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006940:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	2b00      	cmp	r3, #0
 8006948:	d103      	bne.n	8006952 <HAL_DMA_IRQHandler+0x736>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800694e:	2b00      	cmp	r3, #0
 8006950:	d007      	beq.n	8006962 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 0208 	bic.w	r2, r2, #8
 8006960:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006966:	f003 031f 	and.w	r3, r3, #31
 800696a:	223f      	movs	r2, #63	; 0x3f
 800696c:	409a      	lsls	r2, r3
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 834a 	beq.w	8007020 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	4798      	blx	r3
          }
          return;
 8006994:	e344      	b.n	8007020 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d018      	beq.n	80069d6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d108      	bne.n	80069c4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d02c      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	4798      	blx	r3
 80069c2:	e027      	b.n	8006a14 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d023      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	4798      	blx	r3
 80069d4:	e01e      	b.n	8006a14 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10f      	bne.n	8006a04 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0210 	bic.w	r2, r2, #16
 80069f2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 8306 	beq.w	800702a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 8088 	beq.w	8006b3c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2204      	movs	r2, #4
 8006a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a7a      	ldr	r2, [pc, #488]	; (8006c24 <HAL_DMA_IRQHandler+0xa08>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d04a      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x8b8>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a79      	ldr	r2, [pc, #484]	; (8006c28 <HAL_DMA_IRQHandler+0xa0c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d045      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x8b8>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a77      	ldr	r2, [pc, #476]	; (8006c2c <HAL_DMA_IRQHandler+0xa10>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d040      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x8b8>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a76      	ldr	r2, [pc, #472]	; (8006c30 <HAL_DMA_IRQHandler+0xa14>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d03b      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x8b8>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a74      	ldr	r2, [pc, #464]	; (8006c34 <HAL_DMA_IRQHandler+0xa18>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d036      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x8b8>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a73      	ldr	r2, [pc, #460]	; (8006c38 <HAL_DMA_IRQHandler+0xa1c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d031      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x8b8>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a71      	ldr	r2, [pc, #452]	; (8006c3c <HAL_DMA_IRQHandler+0xa20>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d02c      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x8b8>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a70      	ldr	r2, [pc, #448]	; (8006c40 <HAL_DMA_IRQHandler+0xa24>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d027      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x8b8>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a6e      	ldr	r2, [pc, #440]	; (8006c44 <HAL_DMA_IRQHandler+0xa28>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d022      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x8b8>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a6d      	ldr	r2, [pc, #436]	; (8006c48 <HAL_DMA_IRQHandler+0xa2c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d01d      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x8b8>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a6b      	ldr	r2, [pc, #428]	; (8006c4c <HAL_DMA_IRQHandler+0xa30>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d018      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x8b8>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a6a      	ldr	r2, [pc, #424]	; (8006c50 <HAL_DMA_IRQHandler+0xa34>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d013      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x8b8>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a68      	ldr	r2, [pc, #416]	; (8006c54 <HAL_DMA_IRQHandler+0xa38>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d00e      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x8b8>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a67      	ldr	r2, [pc, #412]	; (8006c58 <HAL_DMA_IRQHandler+0xa3c>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d009      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x8b8>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a65      	ldr	r2, [pc, #404]	; (8006c5c <HAL_DMA_IRQHandler+0xa40>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d004      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x8b8>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a64      	ldr	r2, [pc, #400]	; (8006c60 <HAL_DMA_IRQHandler+0xa44>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d108      	bne.n	8006ae6 <HAL_DMA_IRQHandler+0x8ca>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f022 0201 	bic.w	r2, r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	e007      	b.n	8006af6 <HAL_DMA_IRQHandler+0x8da>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 0201 	bic.w	r2, r2, #1
 8006af4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	3301      	adds	r3, #1
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d307      	bcc.n	8006b12 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1f2      	bne.n	8006af6 <HAL_DMA_IRQHandler+0x8da>
 8006b10:	e000      	b.n	8006b14 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006b12:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d004      	beq.n	8006b2c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2203      	movs	r2, #3
 8006b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006b2a:	e003      	b.n	8006b34 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8272 	beq.w	800702a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	4798      	blx	r3
 8006b4e:	e26c      	b.n	800702a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a43      	ldr	r2, [pc, #268]	; (8006c64 <HAL_DMA_IRQHandler+0xa48>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d022      	beq.n	8006ba0 <HAL_DMA_IRQHandler+0x984>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a42      	ldr	r2, [pc, #264]	; (8006c68 <HAL_DMA_IRQHandler+0xa4c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d01d      	beq.n	8006ba0 <HAL_DMA_IRQHandler+0x984>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a40      	ldr	r2, [pc, #256]	; (8006c6c <HAL_DMA_IRQHandler+0xa50>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d018      	beq.n	8006ba0 <HAL_DMA_IRQHandler+0x984>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a3f      	ldr	r2, [pc, #252]	; (8006c70 <HAL_DMA_IRQHandler+0xa54>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d013      	beq.n	8006ba0 <HAL_DMA_IRQHandler+0x984>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a3d      	ldr	r2, [pc, #244]	; (8006c74 <HAL_DMA_IRQHandler+0xa58>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d00e      	beq.n	8006ba0 <HAL_DMA_IRQHandler+0x984>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a3c      	ldr	r2, [pc, #240]	; (8006c78 <HAL_DMA_IRQHandler+0xa5c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d009      	beq.n	8006ba0 <HAL_DMA_IRQHandler+0x984>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a3a      	ldr	r2, [pc, #232]	; (8006c7c <HAL_DMA_IRQHandler+0xa60>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d004      	beq.n	8006ba0 <HAL_DMA_IRQHandler+0x984>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a39      	ldr	r2, [pc, #228]	; (8006c80 <HAL_DMA_IRQHandler+0xa64>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d101      	bne.n	8006ba4 <HAL_DMA_IRQHandler+0x988>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e000      	b.n	8006ba6 <HAL_DMA_IRQHandler+0x98a>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f000 823f 	beq.w	800702a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb8:	f003 031f 	and.w	r3, r3, #31
 8006bbc:	2204      	movs	r2, #4
 8006bbe:	409a      	lsls	r2, r3
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 80cd 	beq.w	8006d64 <HAL_DMA_IRQHandler+0xb48>
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f003 0304 	and.w	r3, r3, #4
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 80c7 	beq.w	8006d64 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bda:	f003 031f 	and.w	r3, r3, #31
 8006bde:	2204      	movs	r2, #4
 8006be0:	409a      	lsls	r2, r3
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d049      	beq.n	8006c84 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d109      	bne.n	8006c0e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 8210 	beq.w	8007024 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c0c:	e20a      	b.n	8007024 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 8206 	beq.w	8007024 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c20:	e200      	b.n	8007024 <HAL_DMA_IRQHandler+0xe08>
 8006c22:	bf00      	nop
 8006c24:	40020010 	.word	0x40020010
 8006c28:	40020028 	.word	0x40020028
 8006c2c:	40020040 	.word	0x40020040
 8006c30:	40020058 	.word	0x40020058
 8006c34:	40020070 	.word	0x40020070
 8006c38:	40020088 	.word	0x40020088
 8006c3c:	400200a0 	.word	0x400200a0
 8006c40:	400200b8 	.word	0x400200b8
 8006c44:	40020410 	.word	0x40020410
 8006c48:	40020428 	.word	0x40020428
 8006c4c:	40020440 	.word	0x40020440
 8006c50:	40020458 	.word	0x40020458
 8006c54:	40020470 	.word	0x40020470
 8006c58:	40020488 	.word	0x40020488
 8006c5c:	400204a0 	.word	0x400204a0
 8006c60:	400204b8 	.word	0x400204b8
 8006c64:	58025408 	.word	0x58025408
 8006c68:	5802541c 	.word	0x5802541c
 8006c6c:	58025430 	.word	0x58025430
 8006c70:	58025444 	.word	0x58025444
 8006c74:	58025458 	.word	0x58025458
 8006c78:	5802546c 	.word	0x5802546c
 8006c7c:	58025480 	.word	0x58025480
 8006c80:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f003 0320 	and.w	r3, r3, #32
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d160      	bne.n	8006d50 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a7f      	ldr	r2, [pc, #508]	; (8006e90 <HAL_DMA_IRQHandler+0xc74>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d04a      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb12>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a7d      	ldr	r2, [pc, #500]	; (8006e94 <HAL_DMA_IRQHandler+0xc78>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d045      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb12>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a7c      	ldr	r2, [pc, #496]	; (8006e98 <HAL_DMA_IRQHandler+0xc7c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d040      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb12>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a7a      	ldr	r2, [pc, #488]	; (8006e9c <HAL_DMA_IRQHandler+0xc80>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d03b      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb12>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a79      	ldr	r2, [pc, #484]	; (8006ea0 <HAL_DMA_IRQHandler+0xc84>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d036      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb12>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a77      	ldr	r2, [pc, #476]	; (8006ea4 <HAL_DMA_IRQHandler+0xc88>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d031      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb12>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a76      	ldr	r2, [pc, #472]	; (8006ea8 <HAL_DMA_IRQHandler+0xc8c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d02c      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb12>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a74      	ldr	r2, [pc, #464]	; (8006eac <HAL_DMA_IRQHandler+0xc90>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d027      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb12>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a73      	ldr	r2, [pc, #460]	; (8006eb0 <HAL_DMA_IRQHandler+0xc94>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d022      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb12>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a71      	ldr	r2, [pc, #452]	; (8006eb4 <HAL_DMA_IRQHandler+0xc98>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d01d      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb12>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a70      	ldr	r2, [pc, #448]	; (8006eb8 <HAL_DMA_IRQHandler+0xc9c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d018      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb12>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a6e      	ldr	r2, [pc, #440]	; (8006ebc <HAL_DMA_IRQHandler+0xca0>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d013      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb12>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a6d      	ldr	r2, [pc, #436]	; (8006ec0 <HAL_DMA_IRQHandler+0xca4>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00e      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb12>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a6b      	ldr	r2, [pc, #428]	; (8006ec4 <HAL_DMA_IRQHandler+0xca8>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d009      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb12>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a6a      	ldr	r2, [pc, #424]	; (8006ec8 <HAL_DMA_IRQHandler+0xcac>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d004      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xb12>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a68      	ldr	r2, [pc, #416]	; (8006ecc <HAL_DMA_IRQHandler+0xcb0>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d108      	bne.n	8006d40 <HAL_DMA_IRQHandler+0xb24>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0208 	bic.w	r2, r2, #8
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	e007      	b.n	8006d50 <HAL_DMA_IRQHandler+0xb34>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 0204 	bic.w	r2, r2, #4
 8006d4e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 8165 	beq.w	8007024 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d62:	e15f      	b.n	8007024 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d68:	f003 031f 	and.w	r3, r3, #31
 8006d6c:	2202      	movs	r2, #2
 8006d6e:	409a      	lsls	r2, r3
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	4013      	ands	r3, r2
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 80c5 	beq.w	8006f04 <HAL_DMA_IRQHandler+0xce8>
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 80bf 	beq.w	8006f04 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d8a:	f003 031f 	and.w	r3, r3, #31
 8006d8e:	2202      	movs	r2, #2
 8006d90:	409a      	lsls	r2, r3
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d018      	beq.n	8006dd2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d109      	bne.n	8006dbe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f000 813a 	beq.w	8007028 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dbc:	e134      	b.n	8007028 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 8130 	beq.w	8007028 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dd0:	e12a      	b.n	8007028 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f003 0320 	and.w	r3, r3, #32
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f040 8089 	bne.w	8006ef0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a2b      	ldr	r2, [pc, #172]	; (8006e90 <HAL_DMA_IRQHandler+0xc74>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d04a      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xc62>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a29      	ldr	r2, [pc, #164]	; (8006e94 <HAL_DMA_IRQHandler+0xc78>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d045      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xc62>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a28      	ldr	r2, [pc, #160]	; (8006e98 <HAL_DMA_IRQHandler+0xc7c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d040      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xc62>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a26      	ldr	r2, [pc, #152]	; (8006e9c <HAL_DMA_IRQHandler+0xc80>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d03b      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xc62>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a25      	ldr	r2, [pc, #148]	; (8006ea0 <HAL_DMA_IRQHandler+0xc84>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d036      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xc62>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a23      	ldr	r2, [pc, #140]	; (8006ea4 <HAL_DMA_IRQHandler+0xc88>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d031      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xc62>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a22      	ldr	r2, [pc, #136]	; (8006ea8 <HAL_DMA_IRQHandler+0xc8c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d02c      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xc62>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a20      	ldr	r2, [pc, #128]	; (8006eac <HAL_DMA_IRQHandler+0xc90>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d027      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xc62>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a1f      	ldr	r2, [pc, #124]	; (8006eb0 <HAL_DMA_IRQHandler+0xc94>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d022      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xc62>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a1d      	ldr	r2, [pc, #116]	; (8006eb4 <HAL_DMA_IRQHandler+0xc98>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d01d      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xc62>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a1c      	ldr	r2, [pc, #112]	; (8006eb8 <HAL_DMA_IRQHandler+0xc9c>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d018      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xc62>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a1a      	ldr	r2, [pc, #104]	; (8006ebc <HAL_DMA_IRQHandler+0xca0>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d013      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xc62>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a19      	ldr	r2, [pc, #100]	; (8006ec0 <HAL_DMA_IRQHandler+0xca4>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d00e      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xc62>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a17      	ldr	r2, [pc, #92]	; (8006ec4 <HAL_DMA_IRQHandler+0xca8>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d009      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xc62>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a16      	ldr	r2, [pc, #88]	; (8006ec8 <HAL_DMA_IRQHandler+0xcac>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d004      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xc62>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a14      	ldr	r2, [pc, #80]	; (8006ecc <HAL_DMA_IRQHandler+0xcb0>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d128      	bne.n	8006ed0 <HAL_DMA_IRQHandler+0xcb4>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 0214 	bic.w	r2, r2, #20
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	e027      	b.n	8006ee0 <HAL_DMA_IRQHandler+0xcc4>
 8006e90:	40020010 	.word	0x40020010
 8006e94:	40020028 	.word	0x40020028
 8006e98:	40020040 	.word	0x40020040
 8006e9c:	40020058 	.word	0x40020058
 8006ea0:	40020070 	.word	0x40020070
 8006ea4:	40020088 	.word	0x40020088
 8006ea8:	400200a0 	.word	0x400200a0
 8006eac:	400200b8 	.word	0x400200b8
 8006eb0:	40020410 	.word	0x40020410
 8006eb4:	40020428 	.word	0x40020428
 8006eb8:	40020440 	.word	0x40020440
 8006ebc:	40020458 	.word	0x40020458
 8006ec0:	40020470 	.word	0x40020470
 8006ec4:	40020488 	.word	0x40020488
 8006ec8:	400204a0 	.word	0x400204a0
 8006ecc:	400204b8 	.word	0x400204b8
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 020a 	bic.w	r2, r2, #10
 8006ede:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 8097 	beq.w	8007028 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f02:	e091      	b.n	8007028 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f08:	f003 031f 	and.w	r3, r3, #31
 8006f0c:	2208      	movs	r2, #8
 8006f0e:	409a      	lsls	r2, r3
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	4013      	ands	r3, r2
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 8088 	beq.w	800702a <HAL_DMA_IRQHandler+0xe0e>
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f003 0308 	and.w	r3, r3, #8
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 8082 	beq.w	800702a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a41      	ldr	r2, [pc, #260]	; (8007030 <HAL_DMA_IRQHandler+0xe14>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d04a      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xdaa>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a3f      	ldr	r2, [pc, #252]	; (8007034 <HAL_DMA_IRQHandler+0xe18>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d045      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xdaa>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a3e      	ldr	r2, [pc, #248]	; (8007038 <HAL_DMA_IRQHandler+0xe1c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d040      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xdaa>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a3c      	ldr	r2, [pc, #240]	; (800703c <HAL_DMA_IRQHandler+0xe20>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d03b      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xdaa>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a3b      	ldr	r2, [pc, #236]	; (8007040 <HAL_DMA_IRQHandler+0xe24>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d036      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xdaa>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a39      	ldr	r2, [pc, #228]	; (8007044 <HAL_DMA_IRQHandler+0xe28>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d031      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xdaa>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a38      	ldr	r2, [pc, #224]	; (8007048 <HAL_DMA_IRQHandler+0xe2c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d02c      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xdaa>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a36      	ldr	r2, [pc, #216]	; (800704c <HAL_DMA_IRQHandler+0xe30>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d027      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xdaa>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a35      	ldr	r2, [pc, #212]	; (8007050 <HAL_DMA_IRQHandler+0xe34>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d022      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xdaa>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a33      	ldr	r2, [pc, #204]	; (8007054 <HAL_DMA_IRQHandler+0xe38>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d01d      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xdaa>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a32      	ldr	r2, [pc, #200]	; (8007058 <HAL_DMA_IRQHandler+0xe3c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d018      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xdaa>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a30      	ldr	r2, [pc, #192]	; (800705c <HAL_DMA_IRQHandler+0xe40>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d013      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xdaa>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a2f      	ldr	r2, [pc, #188]	; (8007060 <HAL_DMA_IRQHandler+0xe44>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00e      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xdaa>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a2d      	ldr	r2, [pc, #180]	; (8007064 <HAL_DMA_IRQHandler+0xe48>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d009      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xdaa>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a2c      	ldr	r2, [pc, #176]	; (8007068 <HAL_DMA_IRQHandler+0xe4c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d004      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xdaa>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a2a      	ldr	r2, [pc, #168]	; (800706c <HAL_DMA_IRQHandler+0xe50>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d108      	bne.n	8006fd8 <HAL_DMA_IRQHandler+0xdbc>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 021c 	bic.w	r2, r2, #28
 8006fd4:	601a      	str	r2, [r3, #0]
 8006fd6:	e007      	b.n	8006fe8 <HAL_DMA_IRQHandler+0xdcc>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 020e 	bic.w	r2, r2, #14
 8006fe6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fec:	f003 031f 	and.w	r3, r3, #31
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	409a      	lsls	r2, r3
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007012:	2b00      	cmp	r3, #0
 8007014:	d009      	beq.n	800702a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	4798      	blx	r3
 800701e:	e004      	b.n	800702a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007020:	bf00      	nop
 8007022:	e002      	b.n	800702a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007024:	bf00      	nop
 8007026:	e000      	b.n	800702a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007028:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800702a:	3728      	adds	r7, #40	; 0x28
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	40020010 	.word	0x40020010
 8007034:	40020028 	.word	0x40020028
 8007038:	40020040 	.word	0x40020040
 800703c:	40020058 	.word	0x40020058
 8007040:	40020070 	.word	0x40020070
 8007044:	40020088 	.word	0x40020088
 8007048:	400200a0 	.word	0x400200a0
 800704c:	400200b8 	.word	0x400200b8
 8007050:	40020410 	.word	0x40020410
 8007054:	40020428 	.word	0x40020428
 8007058:	40020440 	.word	0x40020440
 800705c:	40020458 	.word	0x40020458
 8007060:	40020470 	.word	0x40020470
 8007064:	40020488 	.word	0x40020488
 8007068:	400204a0 	.word	0x400204a0
 800706c:	400204b8 	.word	0x400204b8

08007070 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
 800707c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007082:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007088:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a7f      	ldr	r2, [pc, #508]	; (800728c <DMA_SetConfig+0x21c>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d072      	beq.n	800717a <DMA_SetConfig+0x10a>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a7d      	ldr	r2, [pc, #500]	; (8007290 <DMA_SetConfig+0x220>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d06d      	beq.n	800717a <DMA_SetConfig+0x10a>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a7c      	ldr	r2, [pc, #496]	; (8007294 <DMA_SetConfig+0x224>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d068      	beq.n	800717a <DMA_SetConfig+0x10a>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a7a      	ldr	r2, [pc, #488]	; (8007298 <DMA_SetConfig+0x228>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d063      	beq.n	800717a <DMA_SetConfig+0x10a>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a79      	ldr	r2, [pc, #484]	; (800729c <DMA_SetConfig+0x22c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d05e      	beq.n	800717a <DMA_SetConfig+0x10a>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a77      	ldr	r2, [pc, #476]	; (80072a0 <DMA_SetConfig+0x230>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d059      	beq.n	800717a <DMA_SetConfig+0x10a>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a76      	ldr	r2, [pc, #472]	; (80072a4 <DMA_SetConfig+0x234>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d054      	beq.n	800717a <DMA_SetConfig+0x10a>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a74      	ldr	r2, [pc, #464]	; (80072a8 <DMA_SetConfig+0x238>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d04f      	beq.n	800717a <DMA_SetConfig+0x10a>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a73      	ldr	r2, [pc, #460]	; (80072ac <DMA_SetConfig+0x23c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d04a      	beq.n	800717a <DMA_SetConfig+0x10a>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a71      	ldr	r2, [pc, #452]	; (80072b0 <DMA_SetConfig+0x240>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d045      	beq.n	800717a <DMA_SetConfig+0x10a>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a70      	ldr	r2, [pc, #448]	; (80072b4 <DMA_SetConfig+0x244>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d040      	beq.n	800717a <DMA_SetConfig+0x10a>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a6e      	ldr	r2, [pc, #440]	; (80072b8 <DMA_SetConfig+0x248>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d03b      	beq.n	800717a <DMA_SetConfig+0x10a>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a6d      	ldr	r2, [pc, #436]	; (80072bc <DMA_SetConfig+0x24c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d036      	beq.n	800717a <DMA_SetConfig+0x10a>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a6b      	ldr	r2, [pc, #428]	; (80072c0 <DMA_SetConfig+0x250>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d031      	beq.n	800717a <DMA_SetConfig+0x10a>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a6a      	ldr	r2, [pc, #424]	; (80072c4 <DMA_SetConfig+0x254>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d02c      	beq.n	800717a <DMA_SetConfig+0x10a>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a68      	ldr	r2, [pc, #416]	; (80072c8 <DMA_SetConfig+0x258>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d027      	beq.n	800717a <DMA_SetConfig+0x10a>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a67      	ldr	r2, [pc, #412]	; (80072cc <DMA_SetConfig+0x25c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d022      	beq.n	800717a <DMA_SetConfig+0x10a>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a65      	ldr	r2, [pc, #404]	; (80072d0 <DMA_SetConfig+0x260>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d01d      	beq.n	800717a <DMA_SetConfig+0x10a>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a64      	ldr	r2, [pc, #400]	; (80072d4 <DMA_SetConfig+0x264>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d018      	beq.n	800717a <DMA_SetConfig+0x10a>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a62      	ldr	r2, [pc, #392]	; (80072d8 <DMA_SetConfig+0x268>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d013      	beq.n	800717a <DMA_SetConfig+0x10a>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a61      	ldr	r2, [pc, #388]	; (80072dc <DMA_SetConfig+0x26c>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d00e      	beq.n	800717a <DMA_SetConfig+0x10a>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a5f      	ldr	r2, [pc, #380]	; (80072e0 <DMA_SetConfig+0x270>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d009      	beq.n	800717a <DMA_SetConfig+0x10a>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a5e      	ldr	r2, [pc, #376]	; (80072e4 <DMA_SetConfig+0x274>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d004      	beq.n	800717a <DMA_SetConfig+0x10a>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a5c      	ldr	r2, [pc, #368]	; (80072e8 <DMA_SetConfig+0x278>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d101      	bne.n	800717e <DMA_SetConfig+0x10e>
 800717a:	2301      	movs	r3, #1
 800717c:	e000      	b.n	8007180 <DMA_SetConfig+0x110>
 800717e:	2300      	movs	r3, #0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00d      	beq.n	80071a0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800718c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007192:	2b00      	cmp	r3, #0
 8007194:	d004      	beq.n	80071a0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800719e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a39      	ldr	r2, [pc, #228]	; (800728c <DMA_SetConfig+0x21c>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d04a      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a38      	ldr	r2, [pc, #224]	; (8007290 <DMA_SetConfig+0x220>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d045      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a36      	ldr	r2, [pc, #216]	; (8007294 <DMA_SetConfig+0x224>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d040      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a35      	ldr	r2, [pc, #212]	; (8007298 <DMA_SetConfig+0x228>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d03b      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a33      	ldr	r2, [pc, #204]	; (800729c <DMA_SetConfig+0x22c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d036      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a32      	ldr	r2, [pc, #200]	; (80072a0 <DMA_SetConfig+0x230>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d031      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a30      	ldr	r2, [pc, #192]	; (80072a4 <DMA_SetConfig+0x234>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d02c      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a2f      	ldr	r2, [pc, #188]	; (80072a8 <DMA_SetConfig+0x238>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d027      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a2d      	ldr	r2, [pc, #180]	; (80072ac <DMA_SetConfig+0x23c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d022      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a2c      	ldr	r2, [pc, #176]	; (80072b0 <DMA_SetConfig+0x240>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d01d      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a2a      	ldr	r2, [pc, #168]	; (80072b4 <DMA_SetConfig+0x244>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d018      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a29      	ldr	r2, [pc, #164]	; (80072b8 <DMA_SetConfig+0x248>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d013      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a27      	ldr	r2, [pc, #156]	; (80072bc <DMA_SetConfig+0x24c>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d00e      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a26      	ldr	r2, [pc, #152]	; (80072c0 <DMA_SetConfig+0x250>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d009      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a24      	ldr	r2, [pc, #144]	; (80072c4 <DMA_SetConfig+0x254>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d004      	beq.n	8007240 <DMA_SetConfig+0x1d0>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a23      	ldr	r2, [pc, #140]	; (80072c8 <DMA_SetConfig+0x258>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d101      	bne.n	8007244 <DMA_SetConfig+0x1d4>
 8007240:	2301      	movs	r3, #1
 8007242:	e000      	b.n	8007246 <DMA_SetConfig+0x1d6>
 8007244:	2300      	movs	r3, #0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d059      	beq.n	80072fe <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800724e:	f003 031f 	and.w	r3, r3, #31
 8007252:	223f      	movs	r2, #63	; 0x3f
 8007254:	409a      	lsls	r2, r3
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007268:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	2b40      	cmp	r3, #64	; 0x40
 8007278:	d138      	bne.n	80072ec <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800728a:	e086      	b.n	800739a <DMA_SetConfig+0x32a>
 800728c:	40020010 	.word	0x40020010
 8007290:	40020028 	.word	0x40020028
 8007294:	40020040 	.word	0x40020040
 8007298:	40020058 	.word	0x40020058
 800729c:	40020070 	.word	0x40020070
 80072a0:	40020088 	.word	0x40020088
 80072a4:	400200a0 	.word	0x400200a0
 80072a8:	400200b8 	.word	0x400200b8
 80072ac:	40020410 	.word	0x40020410
 80072b0:	40020428 	.word	0x40020428
 80072b4:	40020440 	.word	0x40020440
 80072b8:	40020458 	.word	0x40020458
 80072bc:	40020470 	.word	0x40020470
 80072c0:	40020488 	.word	0x40020488
 80072c4:	400204a0 	.word	0x400204a0
 80072c8:	400204b8 	.word	0x400204b8
 80072cc:	58025408 	.word	0x58025408
 80072d0:	5802541c 	.word	0x5802541c
 80072d4:	58025430 	.word	0x58025430
 80072d8:	58025444 	.word	0x58025444
 80072dc:	58025458 	.word	0x58025458
 80072e0:	5802546c 	.word	0x5802546c
 80072e4:	58025480 	.word	0x58025480
 80072e8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	60da      	str	r2, [r3, #12]
}
 80072fc:	e04d      	b.n	800739a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a29      	ldr	r2, [pc, #164]	; (80073a8 <DMA_SetConfig+0x338>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d022      	beq.n	800734e <DMA_SetConfig+0x2de>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a27      	ldr	r2, [pc, #156]	; (80073ac <DMA_SetConfig+0x33c>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d01d      	beq.n	800734e <DMA_SetConfig+0x2de>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a26      	ldr	r2, [pc, #152]	; (80073b0 <DMA_SetConfig+0x340>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d018      	beq.n	800734e <DMA_SetConfig+0x2de>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a24      	ldr	r2, [pc, #144]	; (80073b4 <DMA_SetConfig+0x344>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d013      	beq.n	800734e <DMA_SetConfig+0x2de>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a23      	ldr	r2, [pc, #140]	; (80073b8 <DMA_SetConfig+0x348>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d00e      	beq.n	800734e <DMA_SetConfig+0x2de>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a21      	ldr	r2, [pc, #132]	; (80073bc <DMA_SetConfig+0x34c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d009      	beq.n	800734e <DMA_SetConfig+0x2de>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a20      	ldr	r2, [pc, #128]	; (80073c0 <DMA_SetConfig+0x350>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d004      	beq.n	800734e <DMA_SetConfig+0x2de>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a1e      	ldr	r2, [pc, #120]	; (80073c4 <DMA_SetConfig+0x354>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d101      	bne.n	8007352 <DMA_SetConfig+0x2e2>
 800734e:	2301      	movs	r3, #1
 8007350:	e000      	b.n	8007354 <DMA_SetConfig+0x2e4>
 8007352:	2300      	movs	r3, #0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d020      	beq.n	800739a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800735c:	f003 031f 	and.w	r3, r3, #31
 8007360:	2201      	movs	r2, #1
 8007362:	409a      	lsls	r2, r3
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	2b40      	cmp	r3, #64	; 0x40
 8007376:	d108      	bne.n	800738a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	60da      	str	r2, [r3, #12]
}
 8007388:	e007      	b.n	800739a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	60da      	str	r2, [r3, #12]
}
 800739a:	bf00      	nop
 800739c:	371c      	adds	r7, #28
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	58025408 	.word	0x58025408
 80073ac:	5802541c 	.word	0x5802541c
 80073b0:	58025430 	.word	0x58025430
 80073b4:	58025444 	.word	0x58025444
 80073b8:	58025458 	.word	0x58025458
 80073bc:	5802546c 	.word	0x5802546c
 80073c0:	58025480 	.word	0x58025480
 80073c4:	58025494 	.word	0x58025494

080073c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a42      	ldr	r2, [pc, #264]	; (80074e0 <DMA_CalcBaseAndBitshift+0x118>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d04a      	beq.n	8007470 <DMA_CalcBaseAndBitshift+0xa8>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a41      	ldr	r2, [pc, #260]	; (80074e4 <DMA_CalcBaseAndBitshift+0x11c>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d045      	beq.n	8007470 <DMA_CalcBaseAndBitshift+0xa8>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a3f      	ldr	r2, [pc, #252]	; (80074e8 <DMA_CalcBaseAndBitshift+0x120>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d040      	beq.n	8007470 <DMA_CalcBaseAndBitshift+0xa8>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a3e      	ldr	r2, [pc, #248]	; (80074ec <DMA_CalcBaseAndBitshift+0x124>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d03b      	beq.n	8007470 <DMA_CalcBaseAndBitshift+0xa8>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a3c      	ldr	r2, [pc, #240]	; (80074f0 <DMA_CalcBaseAndBitshift+0x128>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d036      	beq.n	8007470 <DMA_CalcBaseAndBitshift+0xa8>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a3b      	ldr	r2, [pc, #236]	; (80074f4 <DMA_CalcBaseAndBitshift+0x12c>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d031      	beq.n	8007470 <DMA_CalcBaseAndBitshift+0xa8>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a39      	ldr	r2, [pc, #228]	; (80074f8 <DMA_CalcBaseAndBitshift+0x130>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d02c      	beq.n	8007470 <DMA_CalcBaseAndBitshift+0xa8>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a38      	ldr	r2, [pc, #224]	; (80074fc <DMA_CalcBaseAndBitshift+0x134>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d027      	beq.n	8007470 <DMA_CalcBaseAndBitshift+0xa8>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a36      	ldr	r2, [pc, #216]	; (8007500 <DMA_CalcBaseAndBitshift+0x138>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d022      	beq.n	8007470 <DMA_CalcBaseAndBitshift+0xa8>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a35      	ldr	r2, [pc, #212]	; (8007504 <DMA_CalcBaseAndBitshift+0x13c>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d01d      	beq.n	8007470 <DMA_CalcBaseAndBitshift+0xa8>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a33      	ldr	r2, [pc, #204]	; (8007508 <DMA_CalcBaseAndBitshift+0x140>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d018      	beq.n	8007470 <DMA_CalcBaseAndBitshift+0xa8>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a32      	ldr	r2, [pc, #200]	; (800750c <DMA_CalcBaseAndBitshift+0x144>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d013      	beq.n	8007470 <DMA_CalcBaseAndBitshift+0xa8>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a30      	ldr	r2, [pc, #192]	; (8007510 <DMA_CalcBaseAndBitshift+0x148>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d00e      	beq.n	8007470 <DMA_CalcBaseAndBitshift+0xa8>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a2f      	ldr	r2, [pc, #188]	; (8007514 <DMA_CalcBaseAndBitshift+0x14c>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d009      	beq.n	8007470 <DMA_CalcBaseAndBitshift+0xa8>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a2d      	ldr	r2, [pc, #180]	; (8007518 <DMA_CalcBaseAndBitshift+0x150>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d004      	beq.n	8007470 <DMA_CalcBaseAndBitshift+0xa8>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a2c      	ldr	r2, [pc, #176]	; (800751c <DMA_CalcBaseAndBitshift+0x154>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d101      	bne.n	8007474 <DMA_CalcBaseAndBitshift+0xac>
 8007470:	2301      	movs	r3, #1
 8007472:	e000      	b.n	8007476 <DMA_CalcBaseAndBitshift+0xae>
 8007474:	2300      	movs	r3, #0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d024      	beq.n	80074c4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	b2db      	uxtb	r3, r3
 8007480:	3b10      	subs	r3, #16
 8007482:	4a27      	ldr	r2, [pc, #156]	; (8007520 <DMA_CalcBaseAndBitshift+0x158>)
 8007484:	fba2 2303 	umull	r2, r3, r2, r3
 8007488:	091b      	lsrs	r3, r3, #4
 800748a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f003 0307 	and.w	r3, r3, #7
 8007492:	4a24      	ldr	r2, [pc, #144]	; (8007524 <DMA_CalcBaseAndBitshift+0x15c>)
 8007494:	5cd3      	ldrb	r3, [r2, r3]
 8007496:	461a      	mov	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d908      	bls.n	80074b4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	461a      	mov	r2, r3
 80074a8:	4b1f      	ldr	r3, [pc, #124]	; (8007528 <DMA_CalcBaseAndBitshift+0x160>)
 80074aa:	4013      	ands	r3, r2
 80074ac:	1d1a      	adds	r2, r3, #4
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	659a      	str	r2, [r3, #88]	; 0x58
 80074b2:	e00d      	b.n	80074d0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	461a      	mov	r2, r3
 80074ba:	4b1b      	ldr	r3, [pc, #108]	; (8007528 <DMA_CalcBaseAndBitshift+0x160>)
 80074bc:	4013      	ands	r3, r2
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	6593      	str	r3, [r2, #88]	; 0x58
 80074c2:	e005      	b.n	80074d0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	40020010 	.word	0x40020010
 80074e4:	40020028 	.word	0x40020028
 80074e8:	40020040 	.word	0x40020040
 80074ec:	40020058 	.word	0x40020058
 80074f0:	40020070 	.word	0x40020070
 80074f4:	40020088 	.word	0x40020088
 80074f8:	400200a0 	.word	0x400200a0
 80074fc:	400200b8 	.word	0x400200b8
 8007500:	40020410 	.word	0x40020410
 8007504:	40020428 	.word	0x40020428
 8007508:	40020440 	.word	0x40020440
 800750c:	40020458 	.word	0x40020458
 8007510:	40020470 	.word	0x40020470
 8007514:	40020488 	.word	0x40020488
 8007518:	400204a0 	.word	0x400204a0
 800751c:	400204b8 	.word	0x400204b8
 8007520:	aaaaaaab 	.word	0xaaaaaaab
 8007524:	0800dfbc 	.word	0x0800dfbc
 8007528:	fffffc00 	.word	0xfffffc00

0800752c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007534:	2300      	movs	r3, #0
 8007536:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d120      	bne.n	8007582 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007544:	2b03      	cmp	r3, #3
 8007546:	d858      	bhi.n	80075fa <DMA_CheckFifoParam+0xce>
 8007548:	a201      	add	r2, pc, #4	; (adr r2, 8007550 <DMA_CheckFifoParam+0x24>)
 800754a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754e:	bf00      	nop
 8007550:	08007561 	.word	0x08007561
 8007554:	08007573 	.word	0x08007573
 8007558:	08007561 	.word	0x08007561
 800755c:	080075fb 	.word	0x080075fb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d048      	beq.n	80075fe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007570:	e045      	b.n	80075fe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007576:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800757a:	d142      	bne.n	8007602 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007580:	e03f      	b.n	8007602 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800758a:	d123      	bne.n	80075d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007590:	2b03      	cmp	r3, #3
 8007592:	d838      	bhi.n	8007606 <DMA_CheckFifoParam+0xda>
 8007594:	a201      	add	r2, pc, #4	; (adr r2, 800759c <DMA_CheckFifoParam+0x70>)
 8007596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759a:	bf00      	nop
 800759c:	080075ad 	.word	0x080075ad
 80075a0:	080075b3 	.word	0x080075b3
 80075a4:	080075ad 	.word	0x080075ad
 80075a8:	080075c5 	.word	0x080075c5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	73fb      	strb	r3, [r7, #15]
        break;
 80075b0:	e030      	b.n	8007614 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d025      	beq.n	800760a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075c2:	e022      	b.n	800760a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80075cc:	d11f      	bne.n	800760e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075d2:	e01c      	b.n	800760e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d902      	bls.n	80075e2 <DMA_CheckFifoParam+0xb6>
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d003      	beq.n	80075e8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80075e0:	e018      	b.n	8007614 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	73fb      	strb	r3, [r7, #15]
        break;
 80075e6:	e015      	b.n	8007614 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00e      	beq.n	8007612 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	73fb      	strb	r3, [r7, #15]
    break;
 80075f8:	e00b      	b.n	8007612 <DMA_CheckFifoParam+0xe6>
        break;
 80075fa:	bf00      	nop
 80075fc:	e00a      	b.n	8007614 <DMA_CheckFifoParam+0xe8>
        break;
 80075fe:	bf00      	nop
 8007600:	e008      	b.n	8007614 <DMA_CheckFifoParam+0xe8>
        break;
 8007602:	bf00      	nop
 8007604:	e006      	b.n	8007614 <DMA_CheckFifoParam+0xe8>
        break;
 8007606:	bf00      	nop
 8007608:	e004      	b.n	8007614 <DMA_CheckFifoParam+0xe8>
        break;
 800760a:	bf00      	nop
 800760c:	e002      	b.n	8007614 <DMA_CheckFifoParam+0xe8>
        break;
 800760e:	bf00      	nop
 8007610:	e000      	b.n	8007614 <DMA_CheckFifoParam+0xe8>
    break;
 8007612:	bf00      	nop
    }
  }

  return status;
 8007614:	7bfb      	ldrb	r3, [r7, #15]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3714      	adds	r7, #20
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop

08007624 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a38      	ldr	r2, [pc, #224]	; (8007718 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d022      	beq.n	8007682 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a36      	ldr	r2, [pc, #216]	; (800771c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d01d      	beq.n	8007682 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a35      	ldr	r2, [pc, #212]	; (8007720 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d018      	beq.n	8007682 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a33      	ldr	r2, [pc, #204]	; (8007724 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d013      	beq.n	8007682 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a32      	ldr	r2, [pc, #200]	; (8007728 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d00e      	beq.n	8007682 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a30      	ldr	r2, [pc, #192]	; (800772c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d009      	beq.n	8007682 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a2f      	ldr	r2, [pc, #188]	; (8007730 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d004      	beq.n	8007682 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a2d      	ldr	r2, [pc, #180]	; (8007734 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d101      	bne.n	8007686 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007682:	2301      	movs	r3, #1
 8007684:	e000      	b.n	8007688 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007686:	2300      	movs	r3, #0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d01a      	beq.n	80076c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	b2db      	uxtb	r3, r3
 8007692:	3b08      	subs	r3, #8
 8007694:	4a28      	ldr	r2, [pc, #160]	; (8007738 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007696:	fba2 2303 	umull	r2, r3, r2, r3
 800769a:	091b      	lsrs	r3, r3, #4
 800769c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	4b26      	ldr	r3, [pc, #152]	; (800773c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80076a2:	4413      	add	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	461a      	mov	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a24      	ldr	r2, [pc, #144]	; (8007740 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80076b0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f003 031f 	and.w	r3, r3, #31
 80076b8:	2201      	movs	r2, #1
 80076ba:	409a      	lsls	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80076c0:	e024      	b.n	800770c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	3b10      	subs	r3, #16
 80076ca:	4a1e      	ldr	r2, [pc, #120]	; (8007744 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80076cc:	fba2 2303 	umull	r2, r3, r2, r3
 80076d0:	091b      	lsrs	r3, r3, #4
 80076d2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	4a1c      	ldr	r2, [pc, #112]	; (8007748 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d806      	bhi.n	80076ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	4a1b      	ldr	r2, [pc, #108]	; (800774c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d902      	bls.n	80076ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	3308      	adds	r3, #8
 80076e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	4b18      	ldr	r3, [pc, #96]	; (8007750 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80076ee:	4413      	add	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	461a      	mov	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a16      	ldr	r2, [pc, #88]	; (8007754 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80076fc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f003 031f 	and.w	r3, r3, #31
 8007704:	2201      	movs	r2, #1
 8007706:	409a      	lsls	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800770c:	bf00      	nop
 800770e:	3714      	adds	r7, #20
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr
 8007718:	58025408 	.word	0x58025408
 800771c:	5802541c 	.word	0x5802541c
 8007720:	58025430 	.word	0x58025430
 8007724:	58025444 	.word	0x58025444
 8007728:	58025458 	.word	0x58025458
 800772c:	5802546c 	.word	0x5802546c
 8007730:	58025480 	.word	0x58025480
 8007734:	58025494 	.word	0x58025494
 8007738:	cccccccd 	.word	0xcccccccd
 800773c:	16009600 	.word	0x16009600
 8007740:	58025880 	.word	0x58025880
 8007744:	aaaaaaab 	.word	0xaaaaaaab
 8007748:	400204b8 	.word	0x400204b8
 800774c:	4002040f 	.word	0x4002040f
 8007750:	10008200 	.word	0x10008200
 8007754:	40020880 	.word	0x40020880

08007758 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	b2db      	uxtb	r3, r3
 8007766:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d04a      	beq.n	8007804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2b08      	cmp	r3, #8
 8007772:	d847      	bhi.n	8007804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a25      	ldr	r2, [pc, #148]	; (8007810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d022      	beq.n	80077c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a24      	ldr	r2, [pc, #144]	; (8007814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d01d      	beq.n	80077c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a22      	ldr	r2, [pc, #136]	; (8007818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d018      	beq.n	80077c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a21      	ldr	r2, [pc, #132]	; (800781c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d013      	beq.n	80077c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a1f      	ldr	r2, [pc, #124]	; (8007820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d00e      	beq.n	80077c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a1e      	ldr	r2, [pc, #120]	; (8007824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d009      	beq.n	80077c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a1c      	ldr	r2, [pc, #112]	; (8007828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d004      	beq.n	80077c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a1b      	ldr	r2, [pc, #108]	; (800782c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d101      	bne.n	80077c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80077c4:	2301      	movs	r3, #1
 80077c6:	e000      	b.n	80077ca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80077c8:	2300      	movs	r3, #0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00a      	beq.n	80077e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	4b17      	ldr	r3, [pc, #92]	; (8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80077d2:	4413      	add	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	461a      	mov	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a15      	ldr	r2, [pc, #84]	; (8007834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80077e0:	671a      	str	r2, [r3, #112]	; 0x70
 80077e2:	e009      	b.n	80077f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	4b14      	ldr	r3, [pc, #80]	; (8007838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80077e8:	4413      	add	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	461a      	mov	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a11      	ldr	r2, [pc, #68]	; (800783c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80077f6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	2201      	movs	r2, #1
 80077fe:	409a      	lsls	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007804:	bf00      	nop
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	58025408 	.word	0x58025408
 8007814:	5802541c 	.word	0x5802541c
 8007818:	58025430 	.word	0x58025430
 800781c:	58025444 	.word	0x58025444
 8007820:	58025458 	.word	0x58025458
 8007824:	5802546c 	.word	0x5802546c
 8007828:	58025480 	.word	0x58025480
 800782c:	58025494 	.word	0x58025494
 8007830:	1600963f 	.word	0x1600963f
 8007834:	58025940 	.word	0x58025940
 8007838:	1000823f 	.word	0x1000823f
 800783c:	40020940 	.word	0x40020940

08007840 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007840:	b480      	push	{r7}
 8007842:	b089      	sub	sp, #36	; 0x24
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800784a:	2300      	movs	r3, #0
 800784c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800784e:	4b86      	ldr	r3, [pc, #536]	; (8007a68 <HAL_GPIO_Init+0x228>)
 8007850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007852:	e18c      	b.n	8007b6e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	2101      	movs	r1, #1
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	fa01 f303 	lsl.w	r3, r1, r3
 8007860:	4013      	ands	r3, r2
 8007862:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	f000 817e 	beq.w	8007b68 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f003 0303 	and.w	r3, r3, #3
 8007874:	2b01      	cmp	r3, #1
 8007876:	d005      	beq.n	8007884 <HAL_GPIO_Init+0x44>
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f003 0303 	and.w	r3, r3, #3
 8007880:	2b02      	cmp	r3, #2
 8007882:	d130      	bne.n	80078e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	2203      	movs	r2, #3
 8007890:	fa02 f303 	lsl.w	r3, r2, r3
 8007894:	43db      	mvns	r3, r3
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	4013      	ands	r3, r2
 800789a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	68da      	ldr	r2, [r3, #12]
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	005b      	lsls	r3, r3, #1
 80078a4:	fa02 f303 	lsl.w	r3, r2, r3
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	69ba      	ldr	r2, [r7, #24]
 80078b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80078ba:	2201      	movs	r2, #1
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	fa02 f303 	lsl.w	r3, r2, r3
 80078c2:	43db      	mvns	r3, r3
 80078c4:	69ba      	ldr	r2, [r7, #24]
 80078c6:	4013      	ands	r3, r2
 80078c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	091b      	lsrs	r3, r3, #4
 80078d0:	f003 0201 	and.w	r2, r3, #1
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	fa02 f303 	lsl.w	r3, r2, r3
 80078da:	69ba      	ldr	r2, [r7, #24]
 80078dc:	4313      	orrs	r3, r2
 80078de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	69ba      	ldr	r2, [r7, #24]
 80078e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f003 0303 	and.w	r3, r3, #3
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d017      	beq.n	8007922 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	005b      	lsls	r3, r3, #1
 80078fc:	2203      	movs	r2, #3
 80078fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007902:	43db      	mvns	r3, r3
 8007904:	69ba      	ldr	r2, [r7, #24]
 8007906:	4013      	ands	r3, r2
 8007908:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	689a      	ldr	r2, [r3, #8]
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	fa02 f303 	lsl.w	r3, r2, r3
 8007916:	69ba      	ldr	r2, [r7, #24]
 8007918:	4313      	orrs	r3, r2
 800791a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	69ba      	ldr	r2, [r7, #24]
 8007920:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f003 0303 	and.w	r3, r3, #3
 800792a:	2b02      	cmp	r3, #2
 800792c:	d123      	bne.n	8007976 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	08da      	lsrs	r2, r3, #3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	3208      	adds	r2, #8
 8007936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800793a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	f003 0307 	and.w	r3, r3, #7
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	220f      	movs	r2, #15
 8007946:	fa02 f303 	lsl.w	r3, r2, r3
 800794a:	43db      	mvns	r3, r3
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	4013      	ands	r3, r2
 8007950:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	691a      	ldr	r2, [r3, #16]
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	f003 0307 	and.w	r3, r3, #7
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	fa02 f303 	lsl.w	r3, r2, r3
 8007962:	69ba      	ldr	r2, [r7, #24]
 8007964:	4313      	orrs	r3, r2
 8007966:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	08da      	lsrs	r2, r3, #3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	3208      	adds	r2, #8
 8007970:	69b9      	ldr	r1, [r7, #24]
 8007972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	005b      	lsls	r3, r3, #1
 8007980:	2203      	movs	r2, #3
 8007982:	fa02 f303 	lsl.w	r3, r2, r3
 8007986:	43db      	mvns	r3, r3
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	4013      	ands	r3, r2
 800798c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f003 0203 	and.w	r2, r3, #3
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	005b      	lsls	r3, r3, #1
 800799a:	fa02 f303 	lsl.w	r3, r2, r3
 800799e:	69ba      	ldr	r2, [r7, #24]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	69ba      	ldr	r2, [r7, #24]
 80079a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 80d8 	beq.w	8007b68 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079b8:	4b2c      	ldr	r3, [pc, #176]	; (8007a6c <HAL_GPIO_Init+0x22c>)
 80079ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079be:	4a2b      	ldr	r2, [pc, #172]	; (8007a6c <HAL_GPIO_Init+0x22c>)
 80079c0:	f043 0302 	orr.w	r3, r3, #2
 80079c4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80079c8:	4b28      	ldr	r3, [pc, #160]	; (8007a6c <HAL_GPIO_Init+0x22c>)
 80079ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	60fb      	str	r3, [r7, #12]
 80079d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80079d6:	4a26      	ldr	r2, [pc, #152]	; (8007a70 <HAL_GPIO_Init+0x230>)
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	089b      	lsrs	r3, r3, #2
 80079dc:	3302      	adds	r3, #2
 80079de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	f003 0303 	and.w	r3, r3, #3
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	220f      	movs	r2, #15
 80079ee:	fa02 f303 	lsl.w	r3, r2, r3
 80079f2:	43db      	mvns	r3, r3
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	4013      	ands	r3, r2
 80079f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a1d      	ldr	r2, [pc, #116]	; (8007a74 <HAL_GPIO_Init+0x234>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d04a      	beq.n	8007a98 <HAL_GPIO_Init+0x258>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a1c      	ldr	r2, [pc, #112]	; (8007a78 <HAL_GPIO_Init+0x238>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d02b      	beq.n	8007a62 <HAL_GPIO_Init+0x222>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a1b      	ldr	r2, [pc, #108]	; (8007a7c <HAL_GPIO_Init+0x23c>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d025      	beq.n	8007a5e <HAL_GPIO_Init+0x21e>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a1a      	ldr	r2, [pc, #104]	; (8007a80 <HAL_GPIO_Init+0x240>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d01f      	beq.n	8007a5a <HAL_GPIO_Init+0x21a>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a19      	ldr	r2, [pc, #100]	; (8007a84 <HAL_GPIO_Init+0x244>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d019      	beq.n	8007a56 <HAL_GPIO_Init+0x216>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a18      	ldr	r2, [pc, #96]	; (8007a88 <HAL_GPIO_Init+0x248>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d013      	beq.n	8007a52 <HAL_GPIO_Init+0x212>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a17      	ldr	r2, [pc, #92]	; (8007a8c <HAL_GPIO_Init+0x24c>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d00d      	beq.n	8007a4e <HAL_GPIO_Init+0x20e>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a16      	ldr	r2, [pc, #88]	; (8007a90 <HAL_GPIO_Init+0x250>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d007      	beq.n	8007a4a <HAL_GPIO_Init+0x20a>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a15      	ldr	r2, [pc, #84]	; (8007a94 <HAL_GPIO_Init+0x254>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d101      	bne.n	8007a46 <HAL_GPIO_Init+0x206>
 8007a42:	2309      	movs	r3, #9
 8007a44:	e029      	b.n	8007a9a <HAL_GPIO_Init+0x25a>
 8007a46:	230a      	movs	r3, #10
 8007a48:	e027      	b.n	8007a9a <HAL_GPIO_Init+0x25a>
 8007a4a:	2307      	movs	r3, #7
 8007a4c:	e025      	b.n	8007a9a <HAL_GPIO_Init+0x25a>
 8007a4e:	2306      	movs	r3, #6
 8007a50:	e023      	b.n	8007a9a <HAL_GPIO_Init+0x25a>
 8007a52:	2305      	movs	r3, #5
 8007a54:	e021      	b.n	8007a9a <HAL_GPIO_Init+0x25a>
 8007a56:	2304      	movs	r3, #4
 8007a58:	e01f      	b.n	8007a9a <HAL_GPIO_Init+0x25a>
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e01d      	b.n	8007a9a <HAL_GPIO_Init+0x25a>
 8007a5e:	2302      	movs	r3, #2
 8007a60:	e01b      	b.n	8007a9a <HAL_GPIO_Init+0x25a>
 8007a62:	2301      	movs	r3, #1
 8007a64:	e019      	b.n	8007a9a <HAL_GPIO_Init+0x25a>
 8007a66:	bf00      	nop
 8007a68:	58000080 	.word	0x58000080
 8007a6c:	58024400 	.word	0x58024400
 8007a70:	58000400 	.word	0x58000400
 8007a74:	58020000 	.word	0x58020000
 8007a78:	58020400 	.word	0x58020400
 8007a7c:	58020800 	.word	0x58020800
 8007a80:	58020c00 	.word	0x58020c00
 8007a84:	58021000 	.word	0x58021000
 8007a88:	58021400 	.word	0x58021400
 8007a8c:	58021800 	.word	0x58021800
 8007a90:	58021c00 	.word	0x58021c00
 8007a94:	58022400 	.word	0x58022400
 8007a98:	2300      	movs	r3, #0
 8007a9a:	69fa      	ldr	r2, [r7, #28]
 8007a9c:	f002 0203 	and.w	r2, r2, #3
 8007aa0:	0092      	lsls	r2, r2, #2
 8007aa2:	4093      	lsls	r3, r2
 8007aa4:	69ba      	ldr	r2, [r7, #24]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007aaa:	4938      	ldr	r1, [pc, #224]	; (8007b8c <HAL_GPIO_Init+0x34c>)
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	089b      	lsrs	r3, r3, #2
 8007ab0:	3302      	adds	r3, #2
 8007ab2:	69ba      	ldr	r2, [r7, #24]
 8007ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	43db      	mvns	r3, r3
 8007ac4:	69ba      	ldr	r2, [r7, #24]
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007ade:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	43db      	mvns	r3, r3
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	4013      	ands	r3, r2
 8007af6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d003      	beq.n	8007b0c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007b0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	43db      	mvns	r3, r3
 8007b1e:	69ba      	ldr	r2, [r7, #24]
 8007b20:	4013      	ands	r3, r2
 8007b22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d003      	beq.n	8007b38 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	43db      	mvns	r3, r3
 8007b48:	69ba      	ldr	r2, [r7, #24]
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d003      	beq.n	8007b62 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007b5a:	69ba      	ldr	r2, [r7, #24]
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	fa22 f303 	lsr.w	r3, r2, r3
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f47f ae6b 	bne.w	8007854 <HAL_GPIO_Init+0x14>
  }
}
 8007b7e:	bf00      	nop
 8007b80:	bf00      	nop
 8007b82:	3724      	adds	r7, #36	; 0x24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	58000400 	.word	0x58000400

08007b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	807b      	strh	r3, [r7, #2]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ba0:	787b      	ldrb	r3, [r7, #1]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d003      	beq.n	8007bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ba6:	887a      	ldrh	r2, [r7, #2]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007bac:	e003      	b.n	8007bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007bae:	887b      	ldrh	r3, [r7, #2]
 8007bb0:	041a      	lsls	r2, r3, #16
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	619a      	str	r2, [r3, #24]
}
 8007bb6:	bf00      	nop
 8007bb8:	370c      	adds	r7, #12
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
	...

08007bc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007bcc:	4b19      	ldr	r3, [pc, #100]	; (8007c34 <HAL_PWREx_ConfigSupply+0x70>)
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	f003 0304 	and.w	r3, r3, #4
 8007bd4:	2b04      	cmp	r3, #4
 8007bd6:	d00a      	beq.n	8007bee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007bd8:	4b16      	ldr	r3, [pc, #88]	; (8007c34 <HAL_PWREx_ConfigSupply+0x70>)
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	f003 0307 	and.w	r3, r3, #7
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d001      	beq.n	8007bea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e01f      	b.n	8007c2a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	e01d      	b.n	8007c2a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007bee:	4b11      	ldr	r3, [pc, #68]	; (8007c34 <HAL_PWREx_ConfigSupply+0x70>)
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f023 0207 	bic.w	r2, r3, #7
 8007bf6:	490f      	ldr	r1, [pc, #60]	; (8007c34 <HAL_PWREx_ConfigSupply+0x70>)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007bfe:	f7fc fec9 	bl	8004994 <HAL_GetTick>
 8007c02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c04:	e009      	b.n	8007c1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007c06:	f7fc fec5 	bl	8004994 <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c14:	d901      	bls.n	8007c1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e007      	b.n	8007c2a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c1a:	4b06      	ldr	r3, [pc, #24]	; (8007c34 <HAL_PWREx_ConfigSupply+0x70>)
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c26:	d1ee      	bne.n	8007c06 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	58024800 	.word	0x58024800

08007c38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08c      	sub	sp, #48	; 0x30
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e39d      	b.n	8008386 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f000 8087 	beq.w	8007d66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c58:	4b88      	ldr	r3, [pc, #544]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c62:	4b86      	ldr	r3, [pc, #536]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c66:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6a:	2b10      	cmp	r3, #16
 8007c6c:	d007      	beq.n	8007c7e <HAL_RCC_OscConfig+0x46>
 8007c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c70:	2b18      	cmp	r3, #24
 8007c72:	d110      	bne.n	8007c96 <HAL_RCC_OscConfig+0x5e>
 8007c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c76:	f003 0303 	and.w	r3, r3, #3
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d10b      	bne.n	8007c96 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c7e:	4b7f      	ldr	r3, [pc, #508]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d06c      	beq.n	8007d64 <HAL_RCC_OscConfig+0x12c>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d168      	bne.n	8007d64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e377      	b.n	8008386 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c9e:	d106      	bne.n	8007cae <HAL_RCC_OscConfig+0x76>
 8007ca0:	4b76      	ldr	r3, [pc, #472]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a75      	ldr	r2, [pc, #468]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	e02e      	b.n	8007d0c <HAL_RCC_OscConfig+0xd4>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10c      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x98>
 8007cb6:	4b71      	ldr	r3, [pc, #452]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a70      	ldr	r2, [pc, #448]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cc0:	6013      	str	r3, [r2, #0]
 8007cc2:	4b6e      	ldr	r3, [pc, #440]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a6d      	ldr	r2, [pc, #436]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ccc:	6013      	str	r3, [r2, #0]
 8007cce:	e01d      	b.n	8007d0c <HAL_RCC_OscConfig+0xd4>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007cd8:	d10c      	bne.n	8007cf4 <HAL_RCC_OscConfig+0xbc>
 8007cda:	4b68      	ldr	r3, [pc, #416]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a67      	ldr	r2, [pc, #412]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ce4:	6013      	str	r3, [r2, #0]
 8007ce6:	4b65      	ldr	r3, [pc, #404]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a64      	ldr	r2, [pc, #400]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cf0:	6013      	str	r3, [r2, #0]
 8007cf2:	e00b      	b.n	8007d0c <HAL_RCC_OscConfig+0xd4>
 8007cf4:	4b61      	ldr	r3, [pc, #388]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a60      	ldr	r2, [pc, #384]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	4b5e      	ldr	r3, [pc, #376]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a5d      	ldr	r2, [pc, #372]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d013      	beq.n	8007d3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d14:	f7fc fe3e 	bl	8004994 <HAL_GetTick>
 8007d18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d1a:	e008      	b.n	8007d2e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d1c:	f7fc fe3a 	bl	8004994 <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	2b64      	cmp	r3, #100	; 0x64
 8007d28:	d901      	bls.n	8007d2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e32b      	b.n	8008386 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d2e:	4b53      	ldr	r3, [pc, #332]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d0f0      	beq.n	8007d1c <HAL_RCC_OscConfig+0xe4>
 8007d3a:	e014      	b.n	8007d66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d3c:	f7fc fe2a 	bl	8004994 <HAL_GetTick>
 8007d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d42:	e008      	b.n	8007d56 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d44:	f7fc fe26 	bl	8004994 <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	2b64      	cmp	r3, #100	; 0x64
 8007d50:	d901      	bls.n	8007d56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e317      	b.n	8008386 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d56:	4b49      	ldr	r3, [pc, #292]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1f0      	bne.n	8007d44 <HAL_RCC_OscConfig+0x10c>
 8007d62:	e000      	b.n	8007d66 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 808c 	beq.w	8007e8c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d74:	4b41      	ldr	r3, [pc, #260]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d7c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d7e:	4b3f      	ldr	r3, [pc, #252]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d82:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d007      	beq.n	8007d9a <HAL_RCC_OscConfig+0x162>
 8007d8a:	6a3b      	ldr	r3, [r7, #32]
 8007d8c:	2b18      	cmp	r3, #24
 8007d8e:	d137      	bne.n	8007e00 <HAL_RCC_OscConfig+0x1c8>
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	f003 0303 	and.w	r3, r3, #3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d132      	bne.n	8007e00 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d9a:	4b38      	ldr	r3, [pc, #224]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 0304 	and.w	r3, r3, #4
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d005      	beq.n	8007db2 <HAL_RCC_OscConfig+0x17a>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d101      	bne.n	8007db2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e2e9      	b.n	8008386 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007db2:	4b32      	ldr	r3, [pc, #200]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f023 0219 	bic.w	r2, r3, #25
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	492f      	ldr	r1, [pc, #188]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007dc4:	f7fc fde6 	bl	8004994 <HAL_GetTick>
 8007dc8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007dca:	e008      	b.n	8007dde <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dcc:	f7fc fde2 	bl	8004994 <HAL_GetTick>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d901      	bls.n	8007dde <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e2d3      	b.n	8008386 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007dde:	4b27      	ldr	r3, [pc, #156]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0304 	and.w	r3, r3, #4
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d0f0      	beq.n	8007dcc <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dea:	4b24      	ldr	r3, [pc, #144]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	061b      	lsls	r3, r3, #24
 8007df8:	4920      	ldr	r1, [pc, #128]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007dfe:	e045      	b.n	8007e8c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d026      	beq.n	8007e56 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e08:	4b1c      	ldr	r3, [pc, #112]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f023 0219 	bic.w	r2, r3, #25
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	4919      	ldr	r1, [pc, #100]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e1a:	f7fc fdbb 	bl	8004994 <HAL_GetTick>
 8007e1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e20:	e008      	b.n	8007e34 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e22:	f7fc fdb7 	bl	8004994 <HAL_GetTick>
 8007e26:	4602      	mov	r2, r0
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d901      	bls.n	8007e34 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e2a8      	b.n	8008386 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e34:	4b11      	ldr	r3, [pc, #68]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0304 	and.w	r3, r3, #4
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d0f0      	beq.n	8007e22 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e40:	4b0e      	ldr	r3, [pc, #56]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	061b      	lsls	r3, r3, #24
 8007e4e:	490b      	ldr	r1, [pc, #44]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	604b      	str	r3, [r1, #4]
 8007e54:	e01a      	b.n	8007e8c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e56:	4b09      	ldr	r3, [pc, #36]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a08      	ldr	r2, [pc, #32]	; (8007e7c <HAL_RCC_OscConfig+0x244>)
 8007e5c:	f023 0301 	bic.w	r3, r3, #1
 8007e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e62:	f7fc fd97 	bl	8004994 <HAL_GetTick>
 8007e66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007e68:	e00a      	b.n	8007e80 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e6a:	f7fc fd93 	bl	8004994 <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d903      	bls.n	8007e80 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e284      	b.n	8008386 <HAL_RCC_OscConfig+0x74e>
 8007e7c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007e80:	4b96      	ldr	r3, [pc, #600]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0304 	and.w	r3, r3, #4
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1ee      	bne.n	8007e6a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 0310 	and.w	r3, r3, #16
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d06a      	beq.n	8007f6e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e98:	4b90      	ldr	r3, [pc, #576]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ea0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ea2:	4b8e      	ldr	r3, [pc, #568]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	2b08      	cmp	r3, #8
 8007eac:	d007      	beq.n	8007ebe <HAL_RCC_OscConfig+0x286>
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	2b18      	cmp	r3, #24
 8007eb2:	d11b      	bne.n	8007eec <HAL_RCC_OscConfig+0x2b4>
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f003 0303 	and.w	r3, r3, #3
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d116      	bne.n	8007eec <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ebe:	4b87      	ldr	r3, [pc, #540]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d005      	beq.n	8007ed6 <HAL_RCC_OscConfig+0x29e>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	69db      	ldr	r3, [r3, #28]
 8007ece:	2b80      	cmp	r3, #128	; 0x80
 8007ed0:	d001      	beq.n	8007ed6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e257      	b.n	8008386 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ed6:	4b81      	ldr	r3, [pc, #516]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	061b      	lsls	r3, r3, #24
 8007ee4:	497d      	ldr	r1, [pc, #500]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007eea:	e040      	b.n	8007f6e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	69db      	ldr	r3, [r3, #28]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d023      	beq.n	8007f3c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007ef4:	4b79      	ldr	r3, [pc, #484]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a78      	ldr	r2, [pc, #480]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8007efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f00:	f7fc fd48 	bl	8004994 <HAL_GetTick>
 8007f04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f06:	e008      	b.n	8007f1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007f08:	f7fc fd44 	bl	8004994 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d901      	bls.n	8007f1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e235      	b.n	8008386 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f1a:	4b70      	ldr	r3, [pc, #448]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d0f0      	beq.n	8007f08 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f26:	4b6d      	ldr	r3, [pc, #436]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	061b      	lsls	r3, r3, #24
 8007f34:	4969      	ldr	r1, [pc, #420]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	60cb      	str	r3, [r1, #12]
 8007f3a:	e018      	b.n	8007f6e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007f3c:	4b67      	ldr	r3, [pc, #412]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a66      	ldr	r2, [pc, #408]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8007f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f48:	f7fc fd24 	bl	8004994 <HAL_GetTick>
 8007f4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007f4e:	e008      	b.n	8007f62 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007f50:	f7fc fd20 	bl	8004994 <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d901      	bls.n	8007f62 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e211      	b.n	8008386 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007f62:	4b5e      	ldr	r3, [pc, #376]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1f0      	bne.n	8007f50 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 0308 	and.w	r3, r3, #8
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d036      	beq.n	8007fe8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d019      	beq.n	8007fb6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f82:	4b56      	ldr	r3, [pc, #344]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8007f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f86:	4a55      	ldr	r2, [pc, #340]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8007f88:	f043 0301 	orr.w	r3, r3, #1
 8007f8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f8e:	f7fc fd01 	bl	8004994 <HAL_GetTick>
 8007f92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f94:	e008      	b.n	8007fa8 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f96:	f7fc fcfd 	bl	8004994 <HAL_GetTick>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d901      	bls.n	8007fa8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e1ee      	b.n	8008386 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007fa8:	4b4c      	ldr	r3, [pc, #304]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8007faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fac:	f003 0302 	and.w	r3, r3, #2
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d0f0      	beq.n	8007f96 <HAL_RCC_OscConfig+0x35e>
 8007fb4:	e018      	b.n	8007fe8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007fb6:	4b49      	ldr	r3, [pc, #292]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8007fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fba:	4a48      	ldr	r2, [pc, #288]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8007fbc:	f023 0301 	bic.w	r3, r3, #1
 8007fc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fc2:	f7fc fce7 	bl	8004994 <HAL_GetTick>
 8007fc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007fc8:	e008      	b.n	8007fdc <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fca:	f7fc fce3 	bl	8004994 <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d901      	bls.n	8007fdc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e1d4      	b.n	8008386 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007fdc:	4b3f      	ldr	r3, [pc, #252]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8007fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fe0:	f003 0302 	and.w	r3, r3, #2
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d1f0      	bne.n	8007fca <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 0320 	and.w	r3, r3, #32
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d036      	beq.n	8008062 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	699b      	ldr	r3, [r3, #24]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d019      	beq.n	8008030 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007ffc:	4b37      	ldr	r3, [pc, #220]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a36      	ldr	r2, [pc, #216]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8008002:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008006:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008008:	f7fc fcc4 	bl	8004994 <HAL_GetTick>
 800800c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800800e:	e008      	b.n	8008022 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008010:	f7fc fcc0 	bl	8004994 <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	2b02      	cmp	r3, #2
 800801c:	d901      	bls.n	8008022 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e1b1      	b.n	8008386 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008022:	4b2e      	ldr	r3, [pc, #184]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d0f0      	beq.n	8008010 <HAL_RCC_OscConfig+0x3d8>
 800802e:	e018      	b.n	8008062 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008030:	4b2a      	ldr	r3, [pc, #168]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a29      	ldr	r2, [pc, #164]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8008036:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800803a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800803c:	f7fc fcaa 	bl	8004994 <HAL_GetTick>
 8008040:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008042:	e008      	b.n	8008056 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008044:	f7fc fca6 	bl	8004994 <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	2b02      	cmp	r3, #2
 8008050:	d901      	bls.n	8008056 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e197      	b.n	8008386 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008056:	4b21      	ldr	r3, [pc, #132]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1f0      	bne.n	8008044 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 0304 	and.w	r3, r3, #4
 800806a:	2b00      	cmp	r3, #0
 800806c:	f000 8086 	beq.w	800817c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008070:	4b1b      	ldr	r3, [pc, #108]	; (80080e0 <HAL_RCC_OscConfig+0x4a8>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a1a      	ldr	r2, [pc, #104]	; (80080e0 <HAL_RCC_OscConfig+0x4a8>)
 8008076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800807a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800807c:	f7fc fc8a 	bl	8004994 <HAL_GetTick>
 8008080:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008082:	e008      	b.n	8008096 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008084:	f7fc fc86 	bl	8004994 <HAL_GetTick>
 8008088:	4602      	mov	r2, r0
 800808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	2b64      	cmp	r3, #100	; 0x64
 8008090:	d901      	bls.n	8008096 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e177      	b.n	8008386 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008096:	4b12      	ldr	r3, [pc, #72]	; (80080e0 <HAL_RCC_OscConfig+0x4a8>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d0f0      	beq.n	8008084 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d106      	bne.n	80080b8 <HAL_RCC_OscConfig+0x480>
 80080aa:	4b0c      	ldr	r3, [pc, #48]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 80080ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ae:	4a0b      	ldr	r2, [pc, #44]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 80080b0:	f043 0301 	orr.w	r3, r3, #1
 80080b4:	6713      	str	r3, [r2, #112]	; 0x70
 80080b6:	e032      	b.n	800811e <HAL_RCC_OscConfig+0x4e6>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d111      	bne.n	80080e4 <HAL_RCC_OscConfig+0x4ac>
 80080c0:	4b06      	ldr	r3, [pc, #24]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 80080c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c4:	4a05      	ldr	r2, [pc, #20]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 80080c6:	f023 0301 	bic.w	r3, r3, #1
 80080ca:	6713      	str	r3, [r2, #112]	; 0x70
 80080cc:	4b03      	ldr	r3, [pc, #12]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 80080ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d0:	4a02      	ldr	r2, [pc, #8]	; (80080dc <HAL_RCC_OscConfig+0x4a4>)
 80080d2:	f023 0304 	bic.w	r3, r3, #4
 80080d6:	6713      	str	r3, [r2, #112]	; 0x70
 80080d8:	e021      	b.n	800811e <HAL_RCC_OscConfig+0x4e6>
 80080da:	bf00      	nop
 80080dc:	58024400 	.word	0x58024400
 80080e0:	58024800 	.word	0x58024800
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	2b05      	cmp	r3, #5
 80080ea:	d10c      	bne.n	8008106 <HAL_RCC_OscConfig+0x4ce>
 80080ec:	4b83      	ldr	r3, [pc, #524]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 80080ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f0:	4a82      	ldr	r2, [pc, #520]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 80080f2:	f043 0304 	orr.w	r3, r3, #4
 80080f6:	6713      	str	r3, [r2, #112]	; 0x70
 80080f8:	4b80      	ldr	r3, [pc, #512]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 80080fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080fc:	4a7f      	ldr	r2, [pc, #508]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 80080fe:	f043 0301 	orr.w	r3, r3, #1
 8008102:	6713      	str	r3, [r2, #112]	; 0x70
 8008104:	e00b      	b.n	800811e <HAL_RCC_OscConfig+0x4e6>
 8008106:	4b7d      	ldr	r3, [pc, #500]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 8008108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800810a:	4a7c      	ldr	r2, [pc, #496]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 800810c:	f023 0301 	bic.w	r3, r3, #1
 8008110:	6713      	str	r3, [r2, #112]	; 0x70
 8008112:	4b7a      	ldr	r3, [pc, #488]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 8008114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008116:	4a79      	ldr	r2, [pc, #484]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 8008118:	f023 0304 	bic.w	r3, r3, #4
 800811c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d015      	beq.n	8008152 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008126:	f7fc fc35 	bl	8004994 <HAL_GetTick>
 800812a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800812c:	e00a      	b.n	8008144 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800812e:	f7fc fc31 	bl	8004994 <HAL_GetTick>
 8008132:	4602      	mov	r2, r0
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	1ad3      	subs	r3, r2, r3
 8008138:	f241 3288 	movw	r2, #5000	; 0x1388
 800813c:	4293      	cmp	r3, r2
 800813e:	d901      	bls.n	8008144 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e120      	b.n	8008386 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008144:	4b6d      	ldr	r3, [pc, #436]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 8008146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008148:	f003 0302 	and.w	r3, r3, #2
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0ee      	beq.n	800812e <HAL_RCC_OscConfig+0x4f6>
 8008150:	e014      	b.n	800817c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008152:	f7fc fc1f 	bl	8004994 <HAL_GetTick>
 8008156:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008158:	e00a      	b.n	8008170 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800815a:	f7fc fc1b 	bl	8004994 <HAL_GetTick>
 800815e:	4602      	mov	r2, r0
 8008160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	f241 3288 	movw	r2, #5000	; 0x1388
 8008168:	4293      	cmp	r3, r2
 800816a:	d901      	bls.n	8008170 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800816c:	2303      	movs	r3, #3
 800816e:	e10a      	b.n	8008386 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008170:	4b62      	ldr	r3, [pc, #392]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 8008172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008174:	f003 0302 	and.w	r3, r3, #2
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1ee      	bne.n	800815a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 80ff 	beq.w	8008384 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008186:	4b5d      	ldr	r3, [pc, #372]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800818e:	2b18      	cmp	r3, #24
 8008190:	f000 80ba 	beq.w	8008308 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008198:	2b02      	cmp	r3, #2
 800819a:	f040 8095 	bne.w	80082c8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800819e:	4b57      	ldr	r3, [pc, #348]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a56      	ldr	r2, [pc, #344]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 80081a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081aa:	f7fc fbf3 	bl	8004994 <HAL_GetTick>
 80081ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081b0:	e008      	b.n	80081c4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081b2:	f7fc fbef 	bl	8004994 <HAL_GetTick>
 80081b6:	4602      	mov	r2, r0
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d901      	bls.n	80081c4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e0e0      	b.n	8008386 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081c4:	4b4d      	ldr	r3, [pc, #308]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1f0      	bne.n	80081b2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081d0:	4b4a      	ldr	r3, [pc, #296]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 80081d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081d4:	4b4a      	ldr	r3, [pc, #296]	; (8008300 <HAL_RCC_OscConfig+0x6c8>)
 80081d6:	4013      	ands	r3, r2
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80081e0:	0112      	lsls	r2, r2, #4
 80081e2:	430a      	orrs	r2, r1
 80081e4:	4945      	ldr	r1, [pc, #276]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 80081e6:	4313      	orrs	r3, r2
 80081e8:	628b      	str	r3, [r1, #40]	; 0x28
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ee:	3b01      	subs	r3, #1
 80081f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081f8:	3b01      	subs	r3, #1
 80081fa:	025b      	lsls	r3, r3, #9
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	431a      	orrs	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008204:	3b01      	subs	r3, #1
 8008206:	041b      	lsls	r3, r3, #16
 8008208:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800820c:	431a      	orrs	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008212:	3b01      	subs	r3, #1
 8008214:	061b      	lsls	r3, r3, #24
 8008216:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800821a:	4938      	ldr	r1, [pc, #224]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 800821c:	4313      	orrs	r3, r2
 800821e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008220:	4b36      	ldr	r3, [pc, #216]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 8008222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008224:	4a35      	ldr	r2, [pc, #212]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 8008226:	f023 0301 	bic.w	r3, r3, #1
 800822a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800822c:	4b33      	ldr	r3, [pc, #204]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 800822e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008230:	4b34      	ldr	r3, [pc, #208]	; (8008304 <HAL_RCC_OscConfig+0x6cc>)
 8008232:	4013      	ands	r3, r2
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008238:	00d2      	lsls	r2, r2, #3
 800823a:	4930      	ldr	r1, [pc, #192]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 800823c:	4313      	orrs	r3, r2
 800823e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008240:	4b2e      	ldr	r3, [pc, #184]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	f023 020c 	bic.w	r2, r3, #12
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824c:	492b      	ldr	r1, [pc, #172]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 800824e:	4313      	orrs	r3, r2
 8008250:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008252:	4b2a      	ldr	r3, [pc, #168]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 8008254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008256:	f023 0202 	bic.w	r2, r3, #2
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800825e:	4927      	ldr	r1, [pc, #156]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 8008260:	4313      	orrs	r3, r2
 8008262:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008264:	4b25      	ldr	r3, [pc, #148]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 8008266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008268:	4a24      	ldr	r2, [pc, #144]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 800826a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800826e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008270:	4b22      	ldr	r3, [pc, #136]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 8008272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008274:	4a21      	ldr	r2, [pc, #132]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 8008276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800827a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800827c:	4b1f      	ldr	r3, [pc, #124]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 800827e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008280:	4a1e      	ldr	r2, [pc, #120]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 8008282:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008286:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008288:	4b1c      	ldr	r3, [pc, #112]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 800828a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828c:	4a1b      	ldr	r2, [pc, #108]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 800828e:	f043 0301 	orr.w	r3, r3, #1
 8008292:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008294:	4b19      	ldr	r3, [pc, #100]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a18      	ldr	r2, [pc, #96]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 800829a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800829e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082a0:	f7fc fb78 	bl	8004994 <HAL_GetTick>
 80082a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80082a6:	e008      	b.n	80082ba <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082a8:	f7fc fb74 	bl	8004994 <HAL_GetTick>
 80082ac:	4602      	mov	r2, r0
 80082ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d901      	bls.n	80082ba <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e065      	b.n	8008386 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80082ba:	4b10      	ldr	r3, [pc, #64]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d0f0      	beq.n	80082a8 <HAL_RCC_OscConfig+0x670>
 80082c6:	e05d      	b.n	8008384 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082c8:	4b0c      	ldr	r3, [pc, #48]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a0b      	ldr	r2, [pc, #44]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 80082ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082d4:	f7fc fb5e 	bl	8004994 <HAL_GetTick>
 80082d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082da:	e008      	b.n	80082ee <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082dc:	f7fc fb5a 	bl	8004994 <HAL_GetTick>
 80082e0:	4602      	mov	r2, r0
 80082e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d901      	bls.n	80082ee <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e04b      	b.n	8008386 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082ee:	4b03      	ldr	r3, [pc, #12]	; (80082fc <HAL_RCC_OscConfig+0x6c4>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1f0      	bne.n	80082dc <HAL_RCC_OscConfig+0x6a4>
 80082fa:	e043      	b.n	8008384 <HAL_RCC_OscConfig+0x74c>
 80082fc:	58024400 	.word	0x58024400
 8008300:	fffffc0c 	.word	0xfffffc0c
 8008304:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008308:	4b21      	ldr	r3, [pc, #132]	; (8008390 <HAL_RCC_OscConfig+0x758>)
 800830a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800830e:	4b20      	ldr	r3, [pc, #128]	; (8008390 <HAL_RCC_OscConfig+0x758>)
 8008310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008312:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008318:	2b01      	cmp	r3, #1
 800831a:	d031      	beq.n	8008380 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	f003 0203 	and.w	r2, r3, #3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008326:	429a      	cmp	r2, r3
 8008328:	d12a      	bne.n	8008380 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	091b      	lsrs	r3, r3, #4
 800832e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008336:	429a      	cmp	r2, r3
 8008338:	d122      	bne.n	8008380 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008344:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008346:	429a      	cmp	r2, r3
 8008348:	d11a      	bne.n	8008380 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	0a5b      	lsrs	r3, r3, #9
 800834e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008356:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008358:	429a      	cmp	r2, r3
 800835a:	d111      	bne.n	8008380 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	0c1b      	lsrs	r3, r3, #16
 8008360:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008368:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800836a:	429a      	cmp	r2, r3
 800836c:	d108      	bne.n	8008380 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	0e1b      	lsrs	r3, r3, #24
 8008372:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800837a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800837c:	429a      	cmp	r2, r3
 800837e:	d001      	beq.n	8008384 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e000      	b.n	8008386 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3730      	adds	r7, #48	; 0x30
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	58024400 	.word	0x58024400

08008394 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e19c      	b.n	80086e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80083a8:	4b8a      	ldr	r3, [pc, #552]	; (80085d4 <HAL_RCC_ClockConfig+0x240>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 030f 	and.w	r3, r3, #15
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d910      	bls.n	80083d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083b6:	4b87      	ldr	r3, [pc, #540]	; (80085d4 <HAL_RCC_ClockConfig+0x240>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f023 020f 	bic.w	r2, r3, #15
 80083be:	4985      	ldr	r1, [pc, #532]	; (80085d4 <HAL_RCC_ClockConfig+0x240>)
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083c6:	4b83      	ldr	r3, [pc, #524]	; (80085d4 <HAL_RCC_ClockConfig+0x240>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 030f 	and.w	r3, r3, #15
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d001      	beq.n	80083d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e184      	b.n	80086e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0304 	and.w	r3, r3, #4
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d010      	beq.n	8008406 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	691a      	ldr	r2, [r3, #16]
 80083e8:	4b7b      	ldr	r3, [pc, #492]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d908      	bls.n	8008406 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083f4:	4b78      	ldr	r3, [pc, #480]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	4975      	ldr	r1, [pc, #468]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008402:	4313      	orrs	r3, r2
 8008404:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0308 	and.w	r3, r3, #8
 800840e:	2b00      	cmp	r3, #0
 8008410:	d010      	beq.n	8008434 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	695a      	ldr	r2, [r3, #20]
 8008416:	4b70      	ldr	r3, [pc, #448]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008418:	69db      	ldr	r3, [r3, #28]
 800841a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800841e:	429a      	cmp	r2, r3
 8008420:	d908      	bls.n	8008434 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008422:	4b6d      	ldr	r3, [pc, #436]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008424:	69db      	ldr	r3, [r3, #28]
 8008426:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	496a      	ldr	r1, [pc, #424]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008430:	4313      	orrs	r3, r2
 8008432:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0310 	and.w	r3, r3, #16
 800843c:	2b00      	cmp	r3, #0
 800843e:	d010      	beq.n	8008462 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	699a      	ldr	r2, [r3, #24]
 8008444:	4b64      	ldr	r3, [pc, #400]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008446:	69db      	ldr	r3, [r3, #28]
 8008448:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800844c:	429a      	cmp	r2, r3
 800844e:	d908      	bls.n	8008462 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008450:	4b61      	ldr	r3, [pc, #388]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008452:	69db      	ldr	r3, [r3, #28]
 8008454:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	495e      	ldr	r1, [pc, #376]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 800845e:	4313      	orrs	r3, r2
 8008460:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0320 	and.w	r3, r3, #32
 800846a:	2b00      	cmp	r3, #0
 800846c:	d010      	beq.n	8008490 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	69da      	ldr	r2, [r3, #28]
 8008472:	4b59      	ldr	r3, [pc, #356]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800847a:	429a      	cmp	r2, r3
 800847c:	d908      	bls.n	8008490 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800847e:	4b56      	ldr	r3, [pc, #344]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	69db      	ldr	r3, [r3, #28]
 800848a:	4953      	ldr	r1, [pc, #332]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 800848c:	4313      	orrs	r3, r2
 800848e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0302 	and.w	r3, r3, #2
 8008498:	2b00      	cmp	r3, #0
 800849a:	d010      	beq.n	80084be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68da      	ldr	r2, [r3, #12]
 80084a0:	4b4d      	ldr	r3, [pc, #308]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	f003 030f 	and.w	r3, r3, #15
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d908      	bls.n	80084be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084ac:	4b4a      	ldr	r3, [pc, #296]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	f023 020f 	bic.w	r2, r3, #15
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	4947      	ldr	r1, [pc, #284]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 80084ba:	4313      	orrs	r3, r2
 80084bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0301 	and.w	r3, r3, #1
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d055      	beq.n	8008576 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80084ca:	4b43      	ldr	r3, [pc, #268]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	4940      	ldr	r1, [pc, #256]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d107      	bne.n	80084f4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084e4:	4b3c      	ldr	r3, [pc, #240]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d121      	bne.n	8008534 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e0f6      	b.n	80086e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	2b03      	cmp	r3, #3
 80084fa:	d107      	bne.n	800850c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084fc:	4b36      	ldr	r3, [pc, #216]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d115      	bne.n	8008534 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	e0ea      	b.n	80086e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d107      	bne.n	8008524 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008514:	4b30      	ldr	r3, [pc, #192]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800851c:	2b00      	cmp	r3, #0
 800851e:	d109      	bne.n	8008534 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e0de      	b.n	80086e2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008524:	4b2c      	ldr	r3, [pc, #176]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 0304 	and.w	r3, r3, #4
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	e0d6      	b.n	80086e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008534:	4b28      	ldr	r3, [pc, #160]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	f023 0207 	bic.w	r2, r3, #7
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	4925      	ldr	r1, [pc, #148]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008542:	4313      	orrs	r3, r2
 8008544:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008546:	f7fc fa25 	bl	8004994 <HAL_GetTick>
 800854a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800854c:	e00a      	b.n	8008564 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800854e:	f7fc fa21 	bl	8004994 <HAL_GetTick>
 8008552:	4602      	mov	r2, r0
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	f241 3288 	movw	r2, #5000	; 0x1388
 800855c:	4293      	cmp	r3, r2
 800855e:	d901      	bls.n	8008564 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e0be      	b.n	80086e2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008564:	4b1c      	ldr	r3, [pc, #112]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	00db      	lsls	r3, r3, #3
 8008572:	429a      	cmp	r2, r3
 8008574:	d1eb      	bne.n	800854e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0302 	and.w	r3, r3, #2
 800857e:	2b00      	cmp	r3, #0
 8008580:	d010      	beq.n	80085a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68da      	ldr	r2, [r3, #12]
 8008586:	4b14      	ldr	r3, [pc, #80]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	f003 030f 	and.w	r3, r3, #15
 800858e:	429a      	cmp	r2, r3
 8008590:	d208      	bcs.n	80085a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008592:	4b11      	ldr	r3, [pc, #68]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	f023 020f 	bic.w	r2, r3, #15
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	490e      	ldr	r1, [pc, #56]	; (80085d8 <HAL_RCC_ClockConfig+0x244>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80085a4:	4b0b      	ldr	r3, [pc, #44]	; (80085d4 <HAL_RCC_ClockConfig+0x240>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 030f 	and.w	r3, r3, #15
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d214      	bcs.n	80085dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085b2:	4b08      	ldr	r3, [pc, #32]	; (80085d4 <HAL_RCC_ClockConfig+0x240>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f023 020f 	bic.w	r2, r3, #15
 80085ba:	4906      	ldr	r1, [pc, #24]	; (80085d4 <HAL_RCC_ClockConfig+0x240>)
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	4313      	orrs	r3, r2
 80085c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085c2:	4b04      	ldr	r3, [pc, #16]	; (80085d4 <HAL_RCC_ClockConfig+0x240>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 030f 	and.w	r3, r3, #15
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d005      	beq.n	80085dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e086      	b.n	80086e2 <HAL_RCC_ClockConfig+0x34e>
 80085d4:	52002000 	.word	0x52002000
 80085d8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0304 	and.w	r3, r3, #4
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d010      	beq.n	800860a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	691a      	ldr	r2, [r3, #16]
 80085ec:	4b3f      	ldr	r3, [pc, #252]	; (80086ec <HAL_RCC_ClockConfig+0x358>)
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d208      	bcs.n	800860a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085f8:	4b3c      	ldr	r3, [pc, #240]	; (80086ec <HAL_RCC_ClockConfig+0x358>)
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	4939      	ldr	r1, [pc, #228]	; (80086ec <HAL_RCC_ClockConfig+0x358>)
 8008606:	4313      	orrs	r3, r2
 8008608:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 0308 	and.w	r3, r3, #8
 8008612:	2b00      	cmp	r3, #0
 8008614:	d010      	beq.n	8008638 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	695a      	ldr	r2, [r3, #20]
 800861a:	4b34      	ldr	r3, [pc, #208]	; (80086ec <HAL_RCC_ClockConfig+0x358>)
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008622:	429a      	cmp	r2, r3
 8008624:	d208      	bcs.n	8008638 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008626:	4b31      	ldr	r3, [pc, #196]	; (80086ec <HAL_RCC_ClockConfig+0x358>)
 8008628:	69db      	ldr	r3, [r3, #28]
 800862a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	492e      	ldr	r1, [pc, #184]	; (80086ec <HAL_RCC_ClockConfig+0x358>)
 8008634:	4313      	orrs	r3, r2
 8008636:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 0310 	and.w	r3, r3, #16
 8008640:	2b00      	cmp	r3, #0
 8008642:	d010      	beq.n	8008666 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	699a      	ldr	r2, [r3, #24]
 8008648:	4b28      	ldr	r3, [pc, #160]	; (80086ec <HAL_RCC_ClockConfig+0x358>)
 800864a:	69db      	ldr	r3, [r3, #28]
 800864c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008650:	429a      	cmp	r2, r3
 8008652:	d208      	bcs.n	8008666 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008654:	4b25      	ldr	r3, [pc, #148]	; (80086ec <HAL_RCC_ClockConfig+0x358>)
 8008656:	69db      	ldr	r3, [r3, #28]
 8008658:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	4922      	ldr	r1, [pc, #136]	; (80086ec <HAL_RCC_ClockConfig+0x358>)
 8008662:	4313      	orrs	r3, r2
 8008664:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0320 	and.w	r3, r3, #32
 800866e:	2b00      	cmp	r3, #0
 8008670:	d010      	beq.n	8008694 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	69da      	ldr	r2, [r3, #28]
 8008676:	4b1d      	ldr	r3, [pc, #116]	; (80086ec <HAL_RCC_ClockConfig+0x358>)
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800867e:	429a      	cmp	r2, r3
 8008680:	d208      	bcs.n	8008694 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008682:	4b1a      	ldr	r3, [pc, #104]	; (80086ec <HAL_RCC_ClockConfig+0x358>)
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	69db      	ldr	r3, [r3, #28]
 800868e:	4917      	ldr	r1, [pc, #92]	; (80086ec <HAL_RCC_ClockConfig+0x358>)
 8008690:	4313      	orrs	r3, r2
 8008692:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008694:	f000 f834 	bl	8008700 <HAL_RCC_GetSysClockFreq>
 8008698:	4602      	mov	r2, r0
 800869a:	4b14      	ldr	r3, [pc, #80]	; (80086ec <HAL_RCC_ClockConfig+0x358>)
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	0a1b      	lsrs	r3, r3, #8
 80086a0:	f003 030f 	and.w	r3, r3, #15
 80086a4:	4912      	ldr	r1, [pc, #72]	; (80086f0 <HAL_RCC_ClockConfig+0x35c>)
 80086a6:	5ccb      	ldrb	r3, [r1, r3]
 80086a8:	f003 031f 	and.w	r3, r3, #31
 80086ac:	fa22 f303 	lsr.w	r3, r2, r3
 80086b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80086b2:	4b0e      	ldr	r3, [pc, #56]	; (80086ec <HAL_RCC_ClockConfig+0x358>)
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	f003 030f 	and.w	r3, r3, #15
 80086ba:	4a0d      	ldr	r2, [pc, #52]	; (80086f0 <HAL_RCC_ClockConfig+0x35c>)
 80086bc:	5cd3      	ldrb	r3, [r2, r3]
 80086be:	f003 031f 	and.w	r3, r3, #31
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	fa22 f303 	lsr.w	r3, r2, r3
 80086c8:	4a0a      	ldr	r2, [pc, #40]	; (80086f4 <HAL_RCC_ClockConfig+0x360>)
 80086ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80086cc:	4a0a      	ldr	r2, [pc, #40]	; (80086f8 <HAL_RCC_ClockConfig+0x364>)
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80086d2:	4b0a      	ldr	r3, [pc, #40]	; (80086fc <HAL_RCC_ClockConfig+0x368>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fc f912 	bl	8004900 <HAL_InitTick>
 80086dc:	4603      	mov	r3, r0
 80086de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3718      	adds	r7, #24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	58024400 	.word	0x58024400
 80086f0:	0800dfac 	.word	0x0800dfac
 80086f4:	24000008 	.word	0x24000008
 80086f8:	24000004 	.word	0x24000004
 80086fc:	2400000c 	.word	0x2400000c

08008700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008700:	b480      	push	{r7}
 8008702:	b089      	sub	sp, #36	; 0x24
 8008704:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008706:	4bb3      	ldr	r3, [pc, #716]	; (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800870e:	2b18      	cmp	r3, #24
 8008710:	f200 8155 	bhi.w	80089be <HAL_RCC_GetSysClockFreq+0x2be>
 8008714:	a201      	add	r2, pc, #4	; (adr r2, 800871c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871a:	bf00      	nop
 800871c:	08008781 	.word	0x08008781
 8008720:	080089bf 	.word	0x080089bf
 8008724:	080089bf 	.word	0x080089bf
 8008728:	080089bf 	.word	0x080089bf
 800872c:	080089bf 	.word	0x080089bf
 8008730:	080089bf 	.word	0x080089bf
 8008734:	080089bf 	.word	0x080089bf
 8008738:	080089bf 	.word	0x080089bf
 800873c:	080087a7 	.word	0x080087a7
 8008740:	080089bf 	.word	0x080089bf
 8008744:	080089bf 	.word	0x080089bf
 8008748:	080089bf 	.word	0x080089bf
 800874c:	080089bf 	.word	0x080089bf
 8008750:	080089bf 	.word	0x080089bf
 8008754:	080089bf 	.word	0x080089bf
 8008758:	080089bf 	.word	0x080089bf
 800875c:	080087ad 	.word	0x080087ad
 8008760:	080089bf 	.word	0x080089bf
 8008764:	080089bf 	.word	0x080089bf
 8008768:	080089bf 	.word	0x080089bf
 800876c:	080089bf 	.word	0x080089bf
 8008770:	080089bf 	.word	0x080089bf
 8008774:	080089bf 	.word	0x080089bf
 8008778:	080089bf 	.word	0x080089bf
 800877c:	080087b3 	.word	0x080087b3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008780:	4b94      	ldr	r3, [pc, #592]	; (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 0320 	and.w	r3, r3, #32
 8008788:	2b00      	cmp	r3, #0
 800878a:	d009      	beq.n	80087a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800878c:	4b91      	ldr	r3, [pc, #580]	; (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	08db      	lsrs	r3, r3, #3
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	4a90      	ldr	r2, [pc, #576]	; (80089d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008798:	fa22 f303 	lsr.w	r3, r2, r3
 800879c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800879e:	e111      	b.n	80089c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80087a0:	4b8d      	ldr	r3, [pc, #564]	; (80089d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80087a2:	61bb      	str	r3, [r7, #24]
    break;
 80087a4:	e10e      	b.n	80089c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80087a6:	4b8d      	ldr	r3, [pc, #564]	; (80089dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80087a8:	61bb      	str	r3, [r7, #24]
    break;
 80087aa:	e10b      	b.n	80089c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80087ac:	4b8c      	ldr	r3, [pc, #560]	; (80089e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80087ae:	61bb      	str	r3, [r7, #24]
    break;
 80087b0:	e108      	b.n	80089c4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087b2:	4b88      	ldr	r3, [pc, #544]	; (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b6:	f003 0303 	and.w	r3, r3, #3
 80087ba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80087bc:	4b85      	ldr	r3, [pc, #532]	; (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c0:	091b      	lsrs	r3, r3, #4
 80087c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087c6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80087c8:	4b82      	ldr	r3, [pc, #520]	; (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80087d2:	4b80      	ldr	r3, [pc, #512]	; (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d6:	08db      	lsrs	r3, r3, #3
 80087d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	fb02 f303 	mul.w	r3, r2, r3
 80087e2:	ee07 3a90 	vmov	s15, r3
 80087e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 80e1 	beq.w	80089b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	f000 8083 	beq.w	8008904 <HAL_RCC_GetSysClockFreq+0x204>
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	2b02      	cmp	r3, #2
 8008802:	f200 80a1 	bhi.w	8008948 <HAL_RCC_GetSysClockFreq+0x248>
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <HAL_RCC_GetSysClockFreq+0x114>
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d056      	beq.n	80088c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008812:	e099      	b.n	8008948 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008814:	4b6f      	ldr	r3, [pc, #444]	; (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0320 	and.w	r3, r3, #32
 800881c:	2b00      	cmp	r3, #0
 800881e:	d02d      	beq.n	800887c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008820:	4b6c      	ldr	r3, [pc, #432]	; (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	08db      	lsrs	r3, r3, #3
 8008826:	f003 0303 	and.w	r3, r3, #3
 800882a:	4a6b      	ldr	r2, [pc, #428]	; (80089d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800882c:	fa22 f303 	lsr.w	r3, r2, r3
 8008830:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	ee07 3a90 	vmov	s15, r3
 8008838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800884a:	4b62      	ldr	r3, [pc, #392]	; (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800884c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008852:	ee07 3a90 	vmov	s15, r3
 8008856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800885a:	ed97 6a02 	vldr	s12, [r7, #8]
 800885e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80089e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800886a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800886e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008876:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800887a:	e087      	b.n	800898c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	ee07 3a90 	vmov	s15, r3
 8008882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008886:	eddf 6a58 	vldr	s13, [pc, #352]	; 80089e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800888a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800888e:	4b51      	ldr	r3, [pc, #324]	; (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008896:	ee07 3a90 	vmov	s15, r3
 800889a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800889e:	ed97 6a02 	vldr	s12, [r7, #8]
 80088a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80089e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088be:	e065      	b.n	800898c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	ee07 3a90 	vmov	s15, r3
 80088c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80089ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80088ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088d2:	4b40      	ldr	r3, [pc, #256]	; (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088da:	ee07 3a90 	vmov	s15, r3
 80088de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80088e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80089e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008902:	e043      	b.n	800898c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	ee07 3a90 	vmov	s15, r3
 800890a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800890e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80089f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008916:	4b2f      	ldr	r3, [pc, #188]	; (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800891e:	ee07 3a90 	vmov	s15, r3
 8008922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008926:	ed97 6a02 	vldr	s12, [r7, #8]
 800892a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80089e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800892e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800893a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800893e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008946:	e021      	b.n	800898c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	ee07 3a90 	vmov	s15, r3
 800894e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008952:	eddf 6a26 	vldr	s13, [pc, #152]	; 80089ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8008956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800895a:	4b1e      	ldr	r3, [pc, #120]	; (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800895c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008962:	ee07 3a90 	vmov	s15, r3
 8008966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800896a:	ed97 6a02 	vldr	s12, [r7, #8]
 800896e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80089e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800897a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800897e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800898a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800898c:	4b11      	ldr	r3, [pc, #68]	; (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800898e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008990:	0a5b      	lsrs	r3, r3, #9
 8008992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008996:	3301      	adds	r3, #1
 8008998:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	ee07 3a90 	vmov	s15, r3
 80089a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80089a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80089a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089b0:	ee17 3a90 	vmov	r3, s15
 80089b4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80089b6:	e005      	b.n	80089c4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	61bb      	str	r3, [r7, #24]
    break;
 80089bc:	e002      	b.n	80089c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80089be:	4b07      	ldr	r3, [pc, #28]	; (80089dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80089c0:	61bb      	str	r3, [r7, #24]
    break;
 80089c2:	bf00      	nop
  }

  return sysclockfreq;
 80089c4:	69bb      	ldr	r3, [r7, #24]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3724      	adds	r7, #36	; 0x24
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	58024400 	.word	0x58024400
 80089d8:	03d09000 	.word	0x03d09000
 80089dc:	003d0900 	.word	0x003d0900
 80089e0:	007a1200 	.word	0x007a1200
 80089e4:	46000000 	.word	0x46000000
 80089e8:	4c742400 	.word	0x4c742400
 80089ec:	4a742400 	.word	0x4a742400
 80089f0:	4af42400 	.word	0x4af42400

080089f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089fa:	f7ff fe81 	bl	8008700 <HAL_RCC_GetSysClockFreq>
 80089fe:	4602      	mov	r2, r0
 8008a00:	4b10      	ldr	r3, [pc, #64]	; (8008a44 <HAL_RCC_GetHCLKFreq+0x50>)
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	0a1b      	lsrs	r3, r3, #8
 8008a06:	f003 030f 	and.w	r3, r3, #15
 8008a0a:	490f      	ldr	r1, [pc, #60]	; (8008a48 <HAL_RCC_GetHCLKFreq+0x54>)
 8008a0c:	5ccb      	ldrb	r3, [r1, r3]
 8008a0e:	f003 031f 	and.w	r3, r3, #31
 8008a12:	fa22 f303 	lsr.w	r3, r2, r3
 8008a16:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a18:	4b0a      	ldr	r3, [pc, #40]	; (8008a44 <HAL_RCC_GetHCLKFreq+0x50>)
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	f003 030f 	and.w	r3, r3, #15
 8008a20:	4a09      	ldr	r2, [pc, #36]	; (8008a48 <HAL_RCC_GetHCLKFreq+0x54>)
 8008a22:	5cd3      	ldrb	r3, [r2, r3]
 8008a24:	f003 031f 	and.w	r3, r3, #31
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a2e:	4a07      	ldr	r2, [pc, #28]	; (8008a4c <HAL_RCC_GetHCLKFreq+0x58>)
 8008a30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a32:	4a07      	ldr	r2, [pc, #28]	; (8008a50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008a38:	4b04      	ldr	r3, [pc, #16]	; (8008a4c <HAL_RCC_GetHCLKFreq+0x58>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	58024400 	.word	0x58024400
 8008a48:	0800dfac 	.word	0x0800dfac
 8008a4c:	24000008 	.word	0x24000008
 8008a50:	24000004 	.word	0x24000004

08008a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008a58:	f7ff ffcc 	bl	80089f4 <HAL_RCC_GetHCLKFreq>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	4b06      	ldr	r3, [pc, #24]	; (8008a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	091b      	lsrs	r3, r3, #4
 8008a64:	f003 0307 	and.w	r3, r3, #7
 8008a68:	4904      	ldr	r1, [pc, #16]	; (8008a7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a6a:	5ccb      	ldrb	r3, [r1, r3]
 8008a6c:	f003 031f 	and.w	r3, r3, #31
 8008a70:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	58024400 	.word	0x58024400
 8008a7c:	0800dfac 	.word	0x0800dfac

08008a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008a84:	f7ff ffb6 	bl	80089f4 <HAL_RCC_GetHCLKFreq>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	4b06      	ldr	r3, [pc, #24]	; (8008aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	0a1b      	lsrs	r3, r3, #8
 8008a90:	f003 0307 	and.w	r3, r3, #7
 8008a94:	4904      	ldr	r1, [pc, #16]	; (8008aa8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a96:	5ccb      	ldrb	r3, [r1, r3]
 8008a98:	f003 031f 	and.w	r3, r3, #31
 8008a9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	58024400 	.word	0x58024400
 8008aa8:	0800dfac 	.word	0x0800dfac

08008aac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ab8:	2300      	movs	r3, #0
 8008aba:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d03f      	beq.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008acc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ad0:	d02a      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008ad2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ad6:	d824      	bhi.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008ad8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008adc:	d018      	beq.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008ade:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ae2:	d81e      	bhi.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d003      	beq.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008ae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008aec:	d007      	beq.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008aee:	e018      	b.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008af0:	4ba4      	ldr	r3, [pc, #656]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af4:	4aa3      	ldr	r2, [pc, #652]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008afa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008afc:	e015      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	3304      	adds	r3, #4
 8008b02:	2102      	movs	r1, #2
 8008b04:	4618      	mov	r0, r3
 8008b06:	f001 f989 	bl	8009e1c <RCCEx_PLL2_Config>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008b0e:	e00c      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	3324      	adds	r3, #36	; 0x24
 8008b14:	2102      	movs	r1, #2
 8008b16:	4618      	mov	r0, r3
 8008b18:	f001 fa32 	bl	8009f80 <RCCEx_PLL3_Config>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008b20:	e003      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	75fb      	strb	r3, [r7, #23]
      break;
 8008b26:	e000      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b2a:	7dfb      	ldrb	r3, [r7, #23]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d109      	bne.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008b30:	4b94      	ldr	r3, [pc, #592]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b3c:	4991      	ldr	r1, [pc, #580]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	650b      	str	r3, [r1, #80]	; 0x50
 8008b42:	e001      	b.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b44:	7dfb      	ldrb	r3, [r7, #23]
 8008b46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d03d      	beq.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b58:	2b04      	cmp	r3, #4
 8008b5a:	d826      	bhi.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008b5c:	a201      	add	r2, pc, #4	; (adr r2, 8008b64 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b62:	bf00      	nop
 8008b64:	08008b79 	.word	0x08008b79
 8008b68:	08008b87 	.word	0x08008b87
 8008b6c:	08008b99 	.word	0x08008b99
 8008b70:	08008bb1 	.word	0x08008bb1
 8008b74:	08008bb1 	.word	0x08008bb1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b78:	4b82      	ldr	r3, [pc, #520]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7c:	4a81      	ldr	r2, [pc, #516]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b84:	e015      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	3304      	adds	r3, #4
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f001 f945 	bl	8009e1c <RCCEx_PLL2_Config>
 8008b92:	4603      	mov	r3, r0
 8008b94:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b96:	e00c      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	3324      	adds	r3, #36	; 0x24
 8008b9c:	2100      	movs	r1, #0
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f001 f9ee 	bl	8009f80 <RCCEx_PLL3_Config>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ba8:	e003      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	75fb      	strb	r3, [r7, #23]
      break;
 8008bae:	e000      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008bb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d109      	bne.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008bb8:	4b72      	ldr	r3, [pc, #456]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bbc:	f023 0207 	bic.w	r2, r3, #7
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc4:	496f      	ldr	r1, [pc, #444]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	650b      	str	r3, [r1, #80]	; 0x50
 8008bca:	e001      	b.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bcc:	7dfb      	ldrb	r3, [r7, #23]
 8008bce:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d051      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008be2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008be6:	d036      	beq.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008be8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008bec:	d830      	bhi.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008bee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bf2:	d032      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8008bf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bf8:	d82a      	bhi.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008bfa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008bfe:	d02e      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008c00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008c04:	d824      	bhi.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c0a:	d018      	beq.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008c0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c10:	d81e      	bhi.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d003      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8008c16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c1a:	d007      	beq.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008c1c:	e018      	b.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c1e:	4b59      	ldr	r3, [pc, #356]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c22:	4a58      	ldr	r2, [pc, #352]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c2a:	e019      	b.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	3304      	adds	r3, #4
 8008c30:	2100      	movs	r1, #0
 8008c32:	4618      	mov	r0, r3
 8008c34:	f001 f8f2 	bl	8009e1c <RCCEx_PLL2_Config>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008c3c:	e010      	b.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	3324      	adds	r3, #36	; 0x24
 8008c42:	2100      	movs	r1, #0
 8008c44:	4618      	mov	r0, r3
 8008c46:	f001 f99b 	bl	8009f80 <RCCEx_PLL3_Config>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c4e:	e007      	b.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	75fb      	strb	r3, [r7, #23]
      break;
 8008c54:	e004      	b.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008c56:	bf00      	nop
 8008c58:	e002      	b.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008c5a:	bf00      	nop
 8008c5c:	e000      	b.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008c5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c60:	7dfb      	ldrb	r3, [r7, #23]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10a      	bne.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008c66:	4b47      	ldr	r3, [pc, #284]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c6a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008c74:	4943      	ldr	r1, [pc, #268]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	658b      	str	r3, [r1, #88]	; 0x58
 8008c7a:	e001      	b.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c7c:	7dfb      	ldrb	r3, [r7, #23]
 8008c7e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d051      	beq.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c92:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008c96:	d036      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008c98:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008c9c:	d830      	bhi.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008c9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ca2:	d032      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8008ca4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ca8:	d82a      	bhi.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008caa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008cae:	d02e      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008cb0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008cb4:	d824      	bhi.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008cb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cba:	d018      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008cbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cc0:	d81e      	bhi.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d003      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008cc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008cca:	d007      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008ccc:	e018      	b.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cce:	4b2d      	ldr	r3, [pc, #180]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd2:	4a2c      	ldr	r2, [pc, #176]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cda:	e019      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	3304      	adds	r3, #4
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f001 f89a 	bl	8009e1c <RCCEx_PLL2_Config>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008cec:	e010      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	3324      	adds	r3, #36	; 0x24
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f001 f943 	bl	8009f80 <RCCEx_PLL3_Config>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cfe:	e007      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	75fb      	strb	r3, [r7, #23]
      break;
 8008d04:	e004      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008d06:	bf00      	nop
 8008d08:	e002      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008d0a:	bf00      	nop
 8008d0c:	e000      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008d0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d10:	7dfb      	ldrb	r3, [r7, #23]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10a      	bne.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008d16:	4b1b      	ldr	r3, [pc, #108]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d1a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008d24:	4917      	ldr	r1, [pc, #92]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d26:	4313      	orrs	r3, r2
 8008d28:	658b      	str	r3, [r1, #88]	; 0x58
 8008d2a:	e001      	b.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
 8008d2e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d035      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d40:	2b30      	cmp	r3, #48	; 0x30
 8008d42:	d01c      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008d44:	2b30      	cmp	r3, #48	; 0x30
 8008d46:	d817      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008d48:	2b20      	cmp	r3, #32
 8008d4a:	d00c      	beq.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008d4c:	2b20      	cmp	r3, #32
 8008d4e:	d813      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d019      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8008d54:	2b10      	cmp	r3, #16
 8008d56:	d10f      	bne.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d58:	4b0a      	ldr	r3, [pc, #40]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5c:	4a09      	ldr	r2, [pc, #36]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008d64:	e011      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	3304      	adds	r3, #4
 8008d6a:	2102      	movs	r1, #2
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f001 f855 	bl	8009e1c <RCCEx_PLL2_Config>
 8008d72:	4603      	mov	r3, r0
 8008d74:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008d76:	e008      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d7c:	e005      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8008d7e:	bf00      	nop
 8008d80:	e003      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008d82:	bf00      	nop
 8008d84:	58024400 	.word	0x58024400
      break;
 8008d88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d8a:	7dfb      	ldrb	r3, [r7, #23]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d109      	bne.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008d90:	4ba3      	ldr	r3, [pc, #652]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d9c:	49a0      	ldr	r1, [pc, #640]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008da2:	e001      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da4:	7dfb      	ldrb	r3, [r7, #23]
 8008da6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d047      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008db8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dbc:	d030      	beq.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008dbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dc2:	d82a      	bhi.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008dc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008dc8:	d02c      	beq.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008dca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008dce:	d824      	bhi.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dd4:	d018      	beq.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dda:	d81e      	bhi.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d003      	beq.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008de4:	d007      	beq.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008de6:	e018      	b.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008de8:	4b8d      	ldr	r3, [pc, #564]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dec:	4a8c      	ldr	r2, [pc, #560]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008df2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008df4:	e017      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	3304      	adds	r3, #4
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f001 f80d 	bl	8009e1c <RCCEx_PLL2_Config>
 8008e02:	4603      	mov	r3, r0
 8008e04:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008e06:	e00e      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	3324      	adds	r3, #36	; 0x24
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f001 f8b6 	bl	8009f80 <RCCEx_PLL3_Config>
 8008e14:	4603      	mov	r3, r0
 8008e16:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008e18:	e005      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8008e1e:	e002      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008e20:	bf00      	nop
 8008e22:	e000      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008e24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e26:	7dfb      	ldrb	r3, [r7, #23]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d109      	bne.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008e2c:	4b7c      	ldr	r3, [pc, #496]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e30:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e38:	4979      	ldr	r1, [pc, #484]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	650b      	str	r3, [r1, #80]	; 0x50
 8008e3e:	e001      	b.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e40:	7dfb      	ldrb	r3, [r7, #23]
 8008e42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d049      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e58:	d02e      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8008e5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e5e:	d828      	bhi.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008e60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e64:	d02a      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008e66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e6a:	d822      	bhi.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008e6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e70:	d026      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008e72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e76:	d81c      	bhi.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008e78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e7c:	d010      	beq.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008e7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e82:	d816      	bhi.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d01d      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e8c:	d111      	bne.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	3304      	adds	r3, #4
 8008e92:	2101      	movs	r1, #1
 8008e94:	4618      	mov	r0, r3
 8008e96:	f000 ffc1 	bl	8009e1c <RCCEx_PLL2_Config>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008e9e:	e012      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	3324      	adds	r3, #36	; 0x24
 8008ea4:	2101      	movs	r1, #1
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f001 f86a 	bl	8009f80 <RCCEx_PLL3_Config>
 8008eac:	4603      	mov	r3, r0
 8008eae:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008eb0:	e009      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	75fb      	strb	r3, [r7, #23]
      break;
 8008eb6:	e006      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008eb8:	bf00      	nop
 8008eba:	e004      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008ebc:	bf00      	nop
 8008ebe:	e002      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008ec0:	bf00      	nop
 8008ec2:	e000      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d109      	bne.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008ecc:	4b54      	ldr	r3, [pc, #336]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ed0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ed8:	4951      	ldr	r1, [pc, #324]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008eda:	4313      	orrs	r3, r2
 8008edc:	650b      	str	r3, [r1, #80]	; 0x50
 8008ede:	e001      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee0:	7dfb      	ldrb	r3, [r7, #23]
 8008ee2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d04b      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008ef6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008efa:	d02e      	beq.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8008efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f00:	d828      	bhi.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f06:	d02a      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8008f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f0c:	d822      	bhi.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008f0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f12:	d026      	beq.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8008f14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f18:	d81c      	bhi.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008f1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f1e:	d010      	beq.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8008f20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f24:	d816      	bhi.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d01d      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8008f2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f2e:	d111      	bne.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	3304      	adds	r3, #4
 8008f34:	2101      	movs	r1, #1
 8008f36:	4618      	mov	r0, r3
 8008f38:	f000 ff70 	bl	8009e1c <RCCEx_PLL2_Config>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008f40:	e012      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	3324      	adds	r3, #36	; 0x24
 8008f46:	2101      	movs	r1, #1
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f001 f819 	bl	8009f80 <RCCEx_PLL3_Config>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008f52:	e009      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	75fb      	strb	r3, [r7, #23]
      break;
 8008f58:	e006      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008f5a:	bf00      	nop
 8008f5c:	e004      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008f5e:	bf00      	nop
 8008f60:	e002      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008f62:	bf00      	nop
 8008f64:	e000      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008f66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f68:	7dfb      	ldrb	r3, [r7, #23]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10a      	bne.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008f6e:	4b2c      	ldr	r3, [pc, #176]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f72:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f7c:	4928      	ldr	r1, [pc, #160]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	658b      	str	r3, [r1, #88]	; 0x58
 8008f82:	e001      	b.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
 8008f86:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d02f      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f9c:	d00e      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x510>
 8008f9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fa2:	d814      	bhi.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d015      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008fa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fac:	d10f      	bne.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fae:	4b1c      	ldr	r3, [pc, #112]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb2:	4a1b      	ldr	r2, [pc, #108]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008fba:	e00c      	b.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	3304      	adds	r3, #4
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f000 ff2a 	bl	8009e1c <RCCEx_PLL2_Config>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008fcc:	e003      	b.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	75fb      	strb	r3, [r7, #23]
      break;
 8008fd2:	e000      	b.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8008fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fd6:	7dfb      	ldrb	r3, [r7, #23]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d109      	bne.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008fdc:	4b10      	ldr	r3, [pc, #64]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fe0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fe8:	490d      	ldr	r1, [pc, #52]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008fea:	4313      	orrs	r3, r2
 8008fec:	650b      	str	r3, [r1, #80]	; 0x50
 8008fee:	e001      	b.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ff0:	7dfb      	ldrb	r3, [r7, #23]
 8008ff2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d034      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009004:	2b03      	cmp	r3, #3
 8009006:	d81d      	bhi.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009008:	a201      	add	r2, pc, #4	; (adr r2, 8009010 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800900a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900e:	bf00      	nop
 8009010:	0800904b 	.word	0x0800904b
 8009014:	08009025 	.word	0x08009025
 8009018:	08009033 	.word	0x08009033
 800901c:	0800904b 	.word	0x0800904b
 8009020:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009024:	4bb1      	ldr	r3, [pc, #708]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009028:	4ab0      	ldr	r2, [pc, #704]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800902a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800902e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009030:	e00c      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	3304      	adds	r3, #4
 8009036:	2102      	movs	r1, #2
 8009038:	4618      	mov	r0, r3
 800903a:	f000 feef 	bl	8009e1c <RCCEx_PLL2_Config>
 800903e:	4603      	mov	r3, r0
 8009040:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009042:	e003      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	75fb      	strb	r3, [r7, #23]
      break;
 8009048:	e000      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800904a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800904c:	7dfb      	ldrb	r3, [r7, #23]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d109      	bne.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009052:	4ba6      	ldr	r3, [pc, #664]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009056:	f023 0203 	bic.w	r2, r3, #3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800905e:	49a3      	ldr	r1, [pc, #652]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009060:	4313      	orrs	r3, r2
 8009062:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009064:	e001      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009066:	7dfb      	ldrb	r3, [r7, #23]
 8009068:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009072:	2b00      	cmp	r3, #0
 8009074:	f000 8086 	beq.w	8009184 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009078:	4b9d      	ldr	r3, [pc, #628]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a9c      	ldr	r2, [pc, #624]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800907e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009082:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009084:	f7fb fc86 	bl	8004994 <HAL_GetTick>
 8009088:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800908a:	e009      	b.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800908c:	f7fb fc82 	bl	8004994 <HAL_GetTick>
 8009090:	4602      	mov	r2, r0
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	1ad3      	subs	r3, r2, r3
 8009096:	2b64      	cmp	r3, #100	; 0x64
 8009098:	d902      	bls.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800909a:	2303      	movs	r3, #3
 800909c:	75fb      	strb	r3, [r7, #23]
        break;
 800909e:	e005      	b.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090a0:	4b93      	ldr	r3, [pc, #588]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d0ef      	beq.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 80090ac:	7dfb      	ldrb	r3, [r7, #23]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d166      	bne.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80090b2:	4b8e      	ldr	r3, [pc, #568]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80090bc:	4053      	eors	r3, r2
 80090be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d013      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80090c6:	4b89      	ldr	r3, [pc, #548]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090ce:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80090d0:	4b86      	ldr	r3, [pc, #536]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090d4:	4a85      	ldr	r2, [pc, #532]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090da:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80090dc:	4b83      	ldr	r3, [pc, #524]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e0:	4a82      	ldr	r2, [pc, #520]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090e6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80090e8:	4a80      	ldr	r2, [pc, #512]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80090f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090f8:	d115      	bne.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090fa:	f7fb fc4b 	bl	8004994 <HAL_GetTick>
 80090fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009100:	e00b      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009102:	f7fb fc47 	bl	8004994 <HAL_GetTick>
 8009106:	4602      	mov	r2, r0
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009110:	4293      	cmp	r3, r2
 8009112:	d902      	bls.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	75fb      	strb	r3, [r7, #23]
            break;
 8009118:	e005      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800911a:	4b74      	ldr	r3, [pc, #464]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800911c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911e:	f003 0302 	and.w	r3, r3, #2
 8009122:	2b00      	cmp	r3, #0
 8009124:	d0ed      	beq.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8009126:	7dfb      	ldrb	r3, [r7, #23]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d126      	bne.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009136:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800913a:	d10d      	bne.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800913c:	4b6b      	ldr	r3, [pc, #428]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800914a:	0919      	lsrs	r1, r3, #4
 800914c:	4b69      	ldr	r3, [pc, #420]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800914e:	400b      	ands	r3, r1
 8009150:	4966      	ldr	r1, [pc, #408]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009152:	4313      	orrs	r3, r2
 8009154:	610b      	str	r3, [r1, #16]
 8009156:	e005      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009158:	4b64      	ldr	r3, [pc, #400]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	4a63      	ldr	r2, [pc, #396]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800915e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009162:	6113      	str	r3, [r2, #16]
 8009164:	4b61      	ldr	r3, [pc, #388]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009166:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800916e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009172:	495e      	ldr	r1, [pc, #376]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009174:	4313      	orrs	r3, r2
 8009176:	670b      	str	r3, [r1, #112]	; 0x70
 8009178:	e004      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800917a:	7dfb      	ldrb	r3, [r7, #23]
 800917c:	75bb      	strb	r3, [r7, #22]
 800917e:	e001      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009180:	7dfb      	ldrb	r3, [r7, #23]
 8009182:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f003 0301 	and.w	r3, r3, #1
 800918c:	2b00      	cmp	r3, #0
 800918e:	d07e      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009194:	2b28      	cmp	r3, #40	; 0x28
 8009196:	d867      	bhi.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8009198:	a201      	add	r2, pc, #4	; (adr r2, 80091a0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800919a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919e:	bf00      	nop
 80091a0:	0800926f 	.word	0x0800926f
 80091a4:	08009269 	.word	0x08009269
 80091a8:	08009269 	.word	0x08009269
 80091ac:	08009269 	.word	0x08009269
 80091b0:	08009269 	.word	0x08009269
 80091b4:	08009269 	.word	0x08009269
 80091b8:	08009269 	.word	0x08009269
 80091bc:	08009269 	.word	0x08009269
 80091c0:	08009245 	.word	0x08009245
 80091c4:	08009269 	.word	0x08009269
 80091c8:	08009269 	.word	0x08009269
 80091cc:	08009269 	.word	0x08009269
 80091d0:	08009269 	.word	0x08009269
 80091d4:	08009269 	.word	0x08009269
 80091d8:	08009269 	.word	0x08009269
 80091dc:	08009269 	.word	0x08009269
 80091e0:	08009257 	.word	0x08009257
 80091e4:	08009269 	.word	0x08009269
 80091e8:	08009269 	.word	0x08009269
 80091ec:	08009269 	.word	0x08009269
 80091f0:	08009269 	.word	0x08009269
 80091f4:	08009269 	.word	0x08009269
 80091f8:	08009269 	.word	0x08009269
 80091fc:	08009269 	.word	0x08009269
 8009200:	0800926f 	.word	0x0800926f
 8009204:	08009269 	.word	0x08009269
 8009208:	08009269 	.word	0x08009269
 800920c:	08009269 	.word	0x08009269
 8009210:	08009269 	.word	0x08009269
 8009214:	08009269 	.word	0x08009269
 8009218:	08009269 	.word	0x08009269
 800921c:	08009269 	.word	0x08009269
 8009220:	0800926f 	.word	0x0800926f
 8009224:	08009269 	.word	0x08009269
 8009228:	08009269 	.word	0x08009269
 800922c:	08009269 	.word	0x08009269
 8009230:	08009269 	.word	0x08009269
 8009234:	08009269 	.word	0x08009269
 8009238:	08009269 	.word	0x08009269
 800923c:	08009269 	.word	0x08009269
 8009240:	0800926f 	.word	0x0800926f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	3304      	adds	r3, #4
 8009248:	2101      	movs	r1, #1
 800924a:	4618      	mov	r0, r3
 800924c:	f000 fde6 	bl	8009e1c <RCCEx_PLL2_Config>
 8009250:	4603      	mov	r3, r0
 8009252:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009254:	e00c      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	3324      	adds	r3, #36	; 0x24
 800925a:	2101      	movs	r1, #1
 800925c:	4618      	mov	r0, r3
 800925e:	f000 fe8f 	bl	8009f80 <RCCEx_PLL3_Config>
 8009262:	4603      	mov	r3, r0
 8009264:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009266:	e003      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	75fb      	strb	r3, [r7, #23]
      break;
 800926c:	e000      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800926e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009270:	7dfb      	ldrb	r3, [r7, #23]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d109      	bne.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009276:	4b1d      	ldr	r3, [pc, #116]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800927a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009282:	491a      	ldr	r1, [pc, #104]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009284:	4313      	orrs	r3, r2
 8009286:	654b      	str	r3, [r1, #84]	; 0x54
 8009288:	e001      	b.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800928a:	7dfb      	ldrb	r3, [r7, #23]
 800928c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 0302 	and.w	r3, r3, #2
 8009296:	2b00      	cmp	r3, #0
 8009298:	d03e      	beq.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929e:	2b05      	cmp	r3, #5
 80092a0:	d820      	bhi.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80092a2:	a201      	add	r2, pc, #4	; (adr r2, 80092a8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80092a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a8:	080092f9 	.word	0x080092f9
 80092ac:	080092c1 	.word	0x080092c1
 80092b0:	080092d3 	.word	0x080092d3
 80092b4:	080092f9 	.word	0x080092f9
 80092b8:	080092f9 	.word	0x080092f9
 80092bc:	080092f9 	.word	0x080092f9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	3304      	adds	r3, #4
 80092c4:	2101      	movs	r1, #1
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 fda8 	bl	8009e1c <RCCEx_PLL2_Config>
 80092cc:	4603      	mov	r3, r0
 80092ce:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80092d0:	e013      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	3324      	adds	r3, #36	; 0x24
 80092d6:	2101      	movs	r1, #1
 80092d8:	4618      	mov	r0, r3
 80092da:	f000 fe51 	bl	8009f80 <RCCEx_PLL3_Config>
 80092de:	4603      	mov	r3, r0
 80092e0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80092e2:	e00a      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	75fb      	strb	r3, [r7, #23]
      break;
 80092e8:	e007      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80092ea:	bf00      	nop
 80092ec:	58024400 	.word	0x58024400
 80092f0:	58024800 	.word	0x58024800
 80092f4:	00ffffcf 	.word	0x00ffffcf
      break;
 80092f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092fa:	7dfb      	ldrb	r3, [r7, #23]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d109      	bne.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009300:	4b9f      	ldr	r3, [pc, #636]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009304:	f023 0207 	bic.w	r2, r3, #7
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800930c:	499c      	ldr	r1, [pc, #624]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800930e:	4313      	orrs	r3, r2
 8009310:	654b      	str	r3, [r1, #84]	; 0x54
 8009312:	e001      	b.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009314:	7dfb      	ldrb	r3, [r7, #23]
 8009316:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f003 0304 	and.w	r3, r3, #4
 8009320:	2b00      	cmp	r3, #0
 8009322:	d039      	beq.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800932a:	2b05      	cmp	r3, #5
 800932c:	d820      	bhi.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800932e:	a201      	add	r2, pc, #4	; (adr r2, 8009334 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8009330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009334:	08009377 	.word	0x08009377
 8009338:	0800934d 	.word	0x0800934d
 800933c:	0800935f 	.word	0x0800935f
 8009340:	08009377 	.word	0x08009377
 8009344:	08009377 	.word	0x08009377
 8009348:	08009377 	.word	0x08009377
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	3304      	adds	r3, #4
 8009350:	2101      	movs	r1, #1
 8009352:	4618      	mov	r0, r3
 8009354:	f000 fd62 	bl	8009e1c <RCCEx_PLL2_Config>
 8009358:	4603      	mov	r3, r0
 800935a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800935c:	e00c      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	3324      	adds	r3, #36	; 0x24
 8009362:	2101      	movs	r1, #1
 8009364:	4618      	mov	r0, r3
 8009366:	f000 fe0b 	bl	8009f80 <RCCEx_PLL3_Config>
 800936a:	4603      	mov	r3, r0
 800936c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800936e:	e003      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	75fb      	strb	r3, [r7, #23]
      break;
 8009374:	e000      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8009376:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009378:	7dfb      	ldrb	r3, [r7, #23]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10a      	bne.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800937e:	4b80      	ldr	r3, [pc, #512]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009382:	f023 0207 	bic.w	r2, r3, #7
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800938c:	497c      	ldr	r1, [pc, #496]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800938e:	4313      	orrs	r3, r2
 8009390:	658b      	str	r3, [r1, #88]	; 0x58
 8009392:	e001      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009394:	7dfb      	ldrb	r3, [r7, #23]
 8009396:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 0320 	and.w	r3, r3, #32
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d04b      	beq.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093ae:	d02e      	beq.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x962>
 80093b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093b4:	d828      	bhi.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80093b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ba:	d02a      	beq.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80093bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093c0:	d822      	bhi.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80093c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093c6:	d026      	beq.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80093c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093cc:	d81c      	bhi.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80093ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093d2:	d010      	beq.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80093d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093d8:	d816      	bhi.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d01d      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80093de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093e2:	d111      	bne.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	3304      	adds	r3, #4
 80093e8:	2100      	movs	r1, #0
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 fd16 	bl	8009e1c <RCCEx_PLL2_Config>
 80093f0:	4603      	mov	r3, r0
 80093f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80093f4:	e012      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	3324      	adds	r3, #36	; 0x24
 80093fa:	2102      	movs	r1, #2
 80093fc:	4618      	mov	r0, r3
 80093fe:	f000 fdbf 	bl	8009f80 <RCCEx_PLL3_Config>
 8009402:	4603      	mov	r3, r0
 8009404:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009406:	e009      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	75fb      	strb	r3, [r7, #23]
      break;
 800940c:	e006      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800940e:	bf00      	nop
 8009410:	e004      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009412:	bf00      	nop
 8009414:	e002      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009416:	bf00      	nop
 8009418:	e000      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800941a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800941c:	7dfb      	ldrb	r3, [r7, #23]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d10a      	bne.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009422:	4b57      	ldr	r3, [pc, #348]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009426:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009430:	4953      	ldr	r1, [pc, #332]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009432:	4313      	orrs	r3, r2
 8009434:	654b      	str	r3, [r1, #84]	; 0x54
 8009436:	e001      	b.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009438:	7dfb      	ldrb	r3, [r7, #23]
 800943a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009444:	2b00      	cmp	r3, #0
 8009446:	d04b      	beq.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800944e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009452:	d02e      	beq.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8009454:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009458:	d828      	bhi.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800945a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800945e:	d02a      	beq.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009464:	d822      	bhi.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009466:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800946a:	d026      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800946c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009470:	d81c      	bhi.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009476:	d010      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8009478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800947c:	d816      	bhi.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800947e:	2b00      	cmp	r3, #0
 8009480:	d01d      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009486:	d111      	bne.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	3304      	adds	r3, #4
 800948c:	2100      	movs	r1, #0
 800948e:	4618      	mov	r0, r3
 8009490:	f000 fcc4 	bl	8009e1c <RCCEx_PLL2_Config>
 8009494:	4603      	mov	r3, r0
 8009496:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009498:	e012      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	3324      	adds	r3, #36	; 0x24
 800949e:	2102      	movs	r1, #2
 80094a0:	4618      	mov	r0, r3
 80094a2:	f000 fd6d 	bl	8009f80 <RCCEx_PLL3_Config>
 80094a6:	4603      	mov	r3, r0
 80094a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80094aa:	e009      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	75fb      	strb	r3, [r7, #23]
      break;
 80094b0:	e006      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80094b2:	bf00      	nop
 80094b4:	e004      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80094b6:	bf00      	nop
 80094b8:	e002      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80094ba:	bf00      	nop
 80094bc:	e000      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80094be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10a      	bne.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80094c6:	4b2e      	ldr	r3, [pc, #184]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80094c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094d4:	492a      	ldr	r1, [pc, #168]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80094d6:	4313      	orrs	r3, r2
 80094d8:	658b      	str	r3, [r1, #88]	; 0x58
 80094da:	e001      	b.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094dc:	7dfb      	ldrb	r3, [r7, #23]
 80094de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d04d      	beq.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094f2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80094f6:	d02e      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80094f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80094fc:	d828      	bhi.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80094fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009502:	d02a      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8009504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009508:	d822      	bhi.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800950a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800950e:	d026      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8009510:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009514:	d81c      	bhi.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009516:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800951a:	d010      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800951c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009520:	d816      	bhi.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009522:	2b00      	cmp	r3, #0
 8009524:	d01d      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8009526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800952a:	d111      	bne.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	3304      	adds	r3, #4
 8009530:	2100      	movs	r1, #0
 8009532:	4618      	mov	r0, r3
 8009534:	f000 fc72 	bl	8009e1c <RCCEx_PLL2_Config>
 8009538:	4603      	mov	r3, r0
 800953a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800953c:	e012      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	3324      	adds	r3, #36	; 0x24
 8009542:	2102      	movs	r1, #2
 8009544:	4618      	mov	r0, r3
 8009546:	f000 fd1b 	bl	8009f80 <RCCEx_PLL3_Config>
 800954a:	4603      	mov	r3, r0
 800954c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800954e:	e009      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	75fb      	strb	r3, [r7, #23]
      break;
 8009554:	e006      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009556:	bf00      	nop
 8009558:	e004      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800955a:	bf00      	nop
 800955c:	e002      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800955e:	bf00      	nop
 8009560:	e000      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009562:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009564:	7dfb      	ldrb	r3, [r7, #23]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d10c      	bne.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800956a:	4b05      	ldr	r3, [pc, #20]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800956c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800956e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009578:	4901      	ldr	r1, [pc, #4]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800957a:	4313      	orrs	r3, r2
 800957c:	658b      	str	r3, [r1, #88]	; 0x58
 800957e:	e003      	b.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009580:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009584:	7dfb      	ldrb	r3, [r7, #23]
 8009586:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 0308 	and.w	r3, r3, #8
 8009590:	2b00      	cmp	r3, #0
 8009592:	d018      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800959c:	d10a      	bne.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	3324      	adds	r3, #36	; 0x24
 80095a2:	2102      	movs	r1, #2
 80095a4:	4618      	mov	r0, r3
 80095a6:	f000 fceb 	bl	8009f80 <RCCEx_PLL3_Config>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80095b4:	4b8a      	ldr	r3, [pc, #552]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80095b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095c0:	4987      	ldr	r1, [pc, #540]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80095c2:	4313      	orrs	r3, r2
 80095c4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 0310 	and.w	r3, r3, #16
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d01a      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095dc:	d10a      	bne.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	3324      	adds	r3, #36	; 0x24
 80095e2:	2102      	movs	r1, #2
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 fccb 	bl	8009f80 <RCCEx_PLL3_Config>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d001      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80095f4:	4b7a      	ldr	r3, [pc, #488]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80095f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009602:	4977      	ldr	r1, [pc, #476]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009604:	4313      	orrs	r3, r2
 8009606:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009610:	2b00      	cmp	r3, #0
 8009612:	d034      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800961a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800961e:	d01d      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009620:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009624:	d817      	bhi.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8009626:	2b00      	cmp	r3, #0
 8009628:	d003      	beq.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800962a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800962e:	d009      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009630:	e011      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	3304      	adds	r3, #4
 8009636:	2100      	movs	r1, #0
 8009638:	4618      	mov	r0, r3
 800963a:	f000 fbef 	bl	8009e1c <RCCEx_PLL2_Config>
 800963e:	4603      	mov	r3, r0
 8009640:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009642:	e00c      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	3324      	adds	r3, #36	; 0x24
 8009648:	2102      	movs	r1, #2
 800964a:	4618      	mov	r0, r3
 800964c:	f000 fc98 	bl	8009f80 <RCCEx_PLL3_Config>
 8009650:	4603      	mov	r3, r0
 8009652:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009654:	e003      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	75fb      	strb	r3, [r7, #23]
      break;
 800965a:	e000      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800965c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800965e:	7dfb      	ldrb	r3, [r7, #23]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d10a      	bne.n	800967a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009664:	4b5e      	ldr	r3, [pc, #376]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009668:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009672:	495b      	ldr	r1, [pc, #364]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009674:	4313      	orrs	r3, r2
 8009676:	658b      	str	r3, [r1, #88]	; 0x58
 8009678:	e001      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800967a:	7dfb      	ldrb	r3, [r7, #23]
 800967c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009686:	2b00      	cmp	r3, #0
 8009688:	d033      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009690:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009694:	d01c      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009696:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800969a:	d816      	bhi.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800969c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096a0:	d003      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80096a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096a6:	d007      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80096a8:	e00f      	b.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096aa:	4b4d      	ldr	r3, [pc, #308]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80096ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ae:	4a4c      	ldr	r2, [pc, #304]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80096b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80096b6:	e00c      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	3324      	adds	r3, #36	; 0x24
 80096bc:	2101      	movs	r1, #1
 80096be:	4618      	mov	r0, r3
 80096c0:	f000 fc5e 	bl	8009f80 <RCCEx_PLL3_Config>
 80096c4:	4603      	mov	r3, r0
 80096c6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80096c8:	e003      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	75fb      	strb	r3, [r7, #23]
      break;
 80096ce:	e000      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80096d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096d2:	7dfb      	ldrb	r3, [r7, #23]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d10a      	bne.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80096d8:	4b41      	ldr	r3, [pc, #260]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80096da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096e6:	493e      	ldr	r1, [pc, #248]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80096e8:	4313      	orrs	r3, r2
 80096ea:	654b      	str	r3, [r1, #84]	; 0x54
 80096ec:	e001      	b.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ee:	7dfb      	ldrb	r3, [r7, #23]
 80096f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d029      	beq.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009702:	2b00      	cmp	r3, #0
 8009704:	d003      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800970a:	d007      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800970c:	e00f      	b.n	800972e <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800970e:	4b34      	ldr	r3, [pc, #208]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009712:	4a33      	ldr	r2, [pc, #204]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009718:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800971a:	e00b      	b.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	3304      	adds	r3, #4
 8009720:	2102      	movs	r1, #2
 8009722:	4618      	mov	r0, r3
 8009724:	f000 fb7a 	bl	8009e1c <RCCEx_PLL2_Config>
 8009728:	4603      	mov	r3, r0
 800972a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800972c:	e002      	b.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	75fb      	strb	r3, [r7, #23]
      break;
 8009732:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009734:	7dfb      	ldrb	r3, [r7, #23]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d109      	bne.n	800974e <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800973a:	4b29      	ldr	r3, [pc, #164]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800973c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800973e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009746:	4926      	ldr	r1, [pc, #152]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009748:	4313      	orrs	r3, r2
 800974a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800974c:	e001      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800974e:	7dfb      	ldrb	r3, [r7, #23]
 8009750:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00a      	beq.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	3324      	adds	r3, #36	; 0x24
 8009762:	2102      	movs	r1, #2
 8009764:	4618      	mov	r0, r3
 8009766:	f000 fc0b 	bl	8009f80 <RCCEx_PLL3_Config>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d033      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009784:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009788:	d017      	beq.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800978a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800978e:	d811      	bhi.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009794:	d013      	beq.n	80097be <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8009796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800979a:	d80b      	bhi.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800979c:	2b00      	cmp	r3, #0
 800979e:	d010      	beq.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 80097a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097a4:	d106      	bne.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097a6:	4b0e      	ldr	r3, [pc, #56]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097aa:	4a0d      	ldr	r2, [pc, #52]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80097b2:	e007      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	75fb      	strb	r3, [r7, #23]
      break;
 80097b8:	e004      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80097ba:	bf00      	nop
 80097bc:	e002      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80097be:	bf00      	nop
 80097c0:	e000      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80097c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097c4:	7dfb      	ldrb	r3, [r7, #23]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d10c      	bne.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80097ca:	4b05      	ldr	r3, [pc, #20]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097d6:	4902      	ldr	r1, [pc, #8]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097d8:	4313      	orrs	r3, r2
 80097da:	654b      	str	r3, [r1, #84]	; 0x54
 80097dc:	e004      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80097de:	bf00      	nop
 80097e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097e4:	7dfb      	ldrb	r3, [r7, #23]
 80097e6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d008      	beq.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80097f4:	4b29      	ldr	r3, [pc, #164]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009800:	4926      	ldr	r1, [pc, #152]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009802:	4313      	orrs	r3, r2
 8009804:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800980e:	2b00      	cmp	r3, #0
 8009810:	d008      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009812:	4b22      	ldr	r3, [pc, #136]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009816:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800981e:	491f      	ldr	r1, [pc, #124]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009820:	4313      	orrs	r3, r2
 8009822:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00d      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009830:	4b1a      	ldr	r3, [pc, #104]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	4a19      	ldr	r2, [pc, #100]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009836:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800983a:	6113      	str	r3, [r2, #16]
 800983c:	4b17      	ldr	r3, [pc, #92]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800983e:	691a      	ldr	r2, [r3, #16]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009846:	4915      	ldr	r1, [pc, #84]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009848:	4313      	orrs	r3, r2
 800984a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	da08      	bge.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009854:	4b11      	ldr	r3, [pc, #68]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009858:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009860:	490e      	ldr	r1, [pc, #56]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009862:	4313      	orrs	r3, r2
 8009864:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800986e:	2b00      	cmp	r3, #0
 8009870:	d009      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009872:	4b0a      	ldr	r3, [pc, #40]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009876:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009880:	4906      	ldr	r1, [pc, #24]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009882:	4313      	orrs	r3, r2
 8009884:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009886:	7dbb      	ldrb	r3, [r7, #22]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d101      	bne.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800988c:	2300      	movs	r3, #0
 800988e:	e000      	b.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009890:	2301      	movs	r3, #1
}
 8009892:	4618      	mov	r0, r3
 8009894:	3718      	adds	r7, #24
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	58024400 	.word	0x58024400

080098a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80098a4:	f7ff f8a6 	bl	80089f4 <HAL_RCC_GetHCLKFreq>
 80098a8:	4602      	mov	r2, r0
 80098aa:	4b06      	ldr	r3, [pc, #24]	; (80098c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80098ac:	6a1b      	ldr	r3, [r3, #32]
 80098ae:	091b      	lsrs	r3, r3, #4
 80098b0:	f003 0307 	and.w	r3, r3, #7
 80098b4:	4904      	ldr	r1, [pc, #16]	; (80098c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80098b6:	5ccb      	ldrb	r3, [r1, r3]
 80098b8:	f003 031f 	and.w	r3, r3, #31
 80098bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	58024400 	.word	0x58024400
 80098c8:	0800dfac 	.word	0x0800dfac

080098cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b089      	sub	sp, #36	; 0x24
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098d4:	4ba1      	ldr	r3, [pc, #644]	; (8009b5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d8:	f003 0303 	and.w	r3, r3, #3
 80098dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80098de:	4b9f      	ldr	r3, [pc, #636]	; (8009b5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e2:	0b1b      	lsrs	r3, r3, #12
 80098e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80098ea:	4b9c      	ldr	r3, [pc, #624]	; (8009b5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ee:	091b      	lsrs	r3, r3, #4
 80098f0:	f003 0301 	and.w	r3, r3, #1
 80098f4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80098f6:	4b99      	ldr	r3, [pc, #612]	; (8009b5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098fa:	08db      	lsrs	r3, r3, #3
 80098fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009900:	693a      	ldr	r2, [r7, #16]
 8009902:	fb02 f303 	mul.w	r3, r2, r3
 8009906:	ee07 3a90 	vmov	s15, r3
 800990a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800990e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	2b00      	cmp	r3, #0
 8009916:	f000 8111 	beq.w	8009b3c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	2b02      	cmp	r3, #2
 800991e:	f000 8083 	beq.w	8009a28 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	2b02      	cmp	r3, #2
 8009926:	f200 80a1 	bhi.w	8009a6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d003      	beq.n	8009938 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	2b01      	cmp	r3, #1
 8009934:	d056      	beq.n	80099e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009936:	e099      	b.n	8009a6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009938:	4b88      	ldr	r3, [pc, #544]	; (8009b5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f003 0320 	and.w	r3, r3, #32
 8009940:	2b00      	cmp	r3, #0
 8009942:	d02d      	beq.n	80099a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009944:	4b85      	ldr	r3, [pc, #532]	; (8009b5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	08db      	lsrs	r3, r3, #3
 800994a:	f003 0303 	and.w	r3, r3, #3
 800994e:	4a84      	ldr	r2, [pc, #528]	; (8009b60 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009950:	fa22 f303 	lsr.w	r3, r2, r3
 8009954:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	ee07 3a90 	vmov	s15, r3
 800995c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	ee07 3a90 	vmov	s15, r3
 8009966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800996a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800996e:	4b7b      	ldr	r3, [pc, #492]	; (8009b5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009976:	ee07 3a90 	vmov	s15, r3
 800997a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800997e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009982:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009b64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800998a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800998e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800999a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800999e:	e087      	b.n	8009ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	ee07 3a90 	vmov	s15, r3
 80099a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b68 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80099ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099b2:	4b6a      	ldr	r3, [pc, #424]	; (8009b5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ba:	ee07 3a90 	vmov	s15, r3
 80099be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80099c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009b64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099e2:	e065      	b.n	8009ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	ee07 3a90 	vmov	s15, r3
 80099ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80099f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099f6:	4b59      	ldr	r3, [pc, #356]	; (8009b5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099fe:	ee07 3a90 	vmov	s15, r3
 8009a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a0a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009b64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a26:	e043      	b.n	8009ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	ee07 3a90 	vmov	s15, r3
 8009a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a32:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a3a:	4b48      	ldr	r3, [pc, #288]	; (8009b5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a42:	ee07 3a90 	vmov	s15, r3
 8009a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a4e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009b64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a6a:	e021      	b.n	8009ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	ee07 3a90 	vmov	s15, r3
 8009a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a76:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a7e:	4b37      	ldr	r3, [pc, #220]	; (8009b5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a86:	ee07 3a90 	vmov	s15, r3
 8009a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a92:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009aae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009ab0:	4b2a      	ldr	r3, [pc, #168]	; (8009b5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab4:	0a5b      	lsrs	r3, r3, #9
 8009ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aba:	ee07 3a90 	vmov	s15, r3
 8009abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ac2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ac6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009aca:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ad6:	ee17 2a90 	vmov	r2, s15
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009ade:	4b1f      	ldr	r3, [pc, #124]	; (8009b5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae2:	0c1b      	lsrs	r3, r3, #16
 8009ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ae8:	ee07 3a90 	vmov	s15, r3
 8009aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009af0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009af4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009af8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009afc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b04:	ee17 2a90 	vmov	r2, s15
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009b0c:	4b13      	ldr	r3, [pc, #76]	; (8009b5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b10:	0e1b      	lsrs	r3, r3, #24
 8009b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b16:	ee07 3a90 	vmov	s15, r3
 8009b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b26:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b32:	ee17 2a90 	vmov	r2, s15
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009b3a:	e008      	b.n	8009b4e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	609a      	str	r2, [r3, #8]
}
 8009b4e:	bf00      	nop
 8009b50:	3724      	adds	r7, #36	; 0x24
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	58024400 	.word	0x58024400
 8009b60:	03d09000 	.word	0x03d09000
 8009b64:	46000000 	.word	0x46000000
 8009b68:	4c742400 	.word	0x4c742400
 8009b6c:	4a742400 	.word	0x4a742400
 8009b70:	4af42400 	.word	0x4af42400

08009b74 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b089      	sub	sp, #36	; 0x24
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b7c:	4ba1      	ldr	r3, [pc, #644]	; (8009e04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b80:	f003 0303 	and.w	r3, r3, #3
 8009b84:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009b86:	4b9f      	ldr	r3, [pc, #636]	; (8009e04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8a:	0d1b      	lsrs	r3, r3, #20
 8009b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b90:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009b92:	4b9c      	ldr	r3, [pc, #624]	; (8009e04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b96:	0a1b      	lsrs	r3, r3, #8
 8009b98:	f003 0301 	and.w	r3, r3, #1
 8009b9c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009b9e:	4b99      	ldr	r3, [pc, #612]	; (8009e04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ba2:	08db      	lsrs	r3, r3, #3
 8009ba4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ba8:	693a      	ldr	r2, [r7, #16]
 8009baa:	fb02 f303 	mul.w	r3, r2, r3
 8009bae:	ee07 3a90 	vmov	s15, r3
 8009bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f000 8111 	beq.w	8009de4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	f000 8083 	beq.w	8009cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	f200 80a1 	bhi.w	8009d14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d003      	beq.n	8009be0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d056      	beq.n	8009c8c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009bde:	e099      	b.n	8009d14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009be0:	4b88      	ldr	r3, [pc, #544]	; (8009e04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 0320 	and.w	r3, r3, #32
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d02d      	beq.n	8009c48 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bec:	4b85      	ldr	r3, [pc, #532]	; (8009e04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	08db      	lsrs	r3, r3, #3
 8009bf2:	f003 0303 	and.w	r3, r3, #3
 8009bf6:	4a84      	ldr	r2, [pc, #528]	; (8009e08 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8009bfc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	ee07 3a90 	vmov	s15, r3
 8009c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	ee07 3a90 	vmov	s15, r3
 8009c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c16:	4b7b      	ldr	r3, [pc, #492]	; (8009e04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c1e:	ee07 3a90 	vmov	s15, r3
 8009c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c2a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009e0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c42:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009c46:	e087      	b.n	8009d58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	ee07 3a90 	vmov	s15, r3
 8009c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c52:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009e10 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c5a:	4b6a      	ldr	r3, [pc, #424]	; (8009e04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c62:	ee07 3a90 	vmov	s15, r3
 8009c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c6e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009e0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c8a:	e065      	b.n	8009d58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	ee07 3a90 	vmov	s15, r3
 8009c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009e14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c9e:	4b59      	ldr	r3, [pc, #356]	; (8009e04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ca6:	ee07 3a90 	vmov	s15, r3
 8009caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cb2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009e0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cce:	e043      	b.n	8009d58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	ee07 3a90 	vmov	s15, r3
 8009cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cda:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009e18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ce2:	4b48      	ldr	r3, [pc, #288]	; (8009e04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cea:	ee07 3a90 	vmov	s15, r3
 8009cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cf6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009e0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d12:	e021      	b.n	8009d58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	ee07 3a90 	vmov	s15, r3
 8009d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009e14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d26:	4b37      	ldr	r3, [pc, #220]	; (8009e04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d2e:	ee07 3a90 	vmov	s15, r3
 8009d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009e0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d56:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009d58:	4b2a      	ldr	r3, [pc, #168]	; (8009e04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5c:	0a5b      	lsrs	r3, r3, #9
 8009d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d62:	ee07 3a90 	vmov	s15, r3
 8009d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d72:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d7e:	ee17 2a90 	vmov	r2, s15
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009d86:	4b1f      	ldr	r3, [pc, #124]	; (8009e04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8a:	0c1b      	lsrs	r3, r3, #16
 8009d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d90:	ee07 3a90 	vmov	s15, r3
 8009d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009da0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dac:	ee17 2a90 	vmov	r2, s15
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009db4:	4b13      	ldr	r3, [pc, #76]	; (8009e04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db8:	0e1b      	lsrs	r3, r3, #24
 8009dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dbe:	ee07 3a90 	vmov	s15, r3
 8009dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dce:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dda:	ee17 2a90 	vmov	r2, s15
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009de2:	e008      	b.n	8009df6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	609a      	str	r2, [r3, #8]
}
 8009df6:	bf00      	nop
 8009df8:	3724      	adds	r7, #36	; 0x24
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	58024400 	.word	0x58024400
 8009e08:	03d09000 	.word	0x03d09000
 8009e0c:	46000000 	.word	0x46000000
 8009e10:	4c742400 	.word	0x4c742400
 8009e14:	4a742400 	.word	0x4a742400
 8009e18:	4af42400 	.word	0x4af42400

08009e1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e26:	2300      	movs	r3, #0
 8009e28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e2a:	4b53      	ldr	r3, [pc, #332]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e2e:	f003 0303 	and.w	r3, r3, #3
 8009e32:	2b03      	cmp	r3, #3
 8009e34:	d101      	bne.n	8009e3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	e099      	b.n	8009f6e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009e3a:	4b4f      	ldr	r3, [pc, #316]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a4e      	ldr	r2, [pc, #312]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009e40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e46:	f7fa fda5 	bl	8004994 <HAL_GetTick>
 8009e4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e4c:	e008      	b.n	8009e60 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009e4e:	f7fa fda1 	bl	8004994 <HAL_GetTick>
 8009e52:	4602      	mov	r2, r0
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d901      	bls.n	8009e60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	e086      	b.n	8009f6e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e60:	4b45      	ldr	r3, [pc, #276]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1f0      	bne.n	8009e4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009e6c:	4b42      	ldr	r3, [pc, #264]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e70:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	031b      	lsls	r3, r3, #12
 8009e7a:	493f      	ldr	r1, [pc, #252]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	628b      	str	r3, [r1, #40]	; 0x28
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	3b01      	subs	r3, #1
 8009e86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	025b      	lsls	r3, r3, #9
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	431a      	orrs	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	041b      	lsls	r3, r3, #16
 8009e9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009ea2:	431a      	orrs	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	691b      	ldr	r3, [r3, #16]
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	061b      	lsls	r3, r3, #24
 8009eac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009eb0:	4931      	ldr	r1, [pc, #196]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009eb6:	4b30      	ldr	r3, [pc, #192]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	695b      	ldr	r3, [r3, #20]
 8009ec2:	492d      	ldr	r1, [pc, #180]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009ec8:	4b2b      	ldr	r3, [pc, #172]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ecc:	f023 0220 	bic.w	r2, r3, #32
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	699b      	ldr	r3, [r3, #24]
 8009ed4:	4928      	ldr	r1, [pc, #160]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009eda:	4b27      	ldr	r3, [pc, #156]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ede:	4a26      	ldr	r2, [pc, #152]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009ee0:	f023 0310 	bic.w	r3, r3, #16
 8009ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009ee6:	4b24      	ldr	r3, [pc, #144]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009ee8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009eea:	4b24      	ldr	r3, [pc, #144]	; (8009f7c <RCCEx_PLL2_Config+0x160>)
 8009eec:	4013      	ands	r3, r2
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	69d2      	ldr	r2, [r2, #28]
 8009ef2:	00d2      	lsls	r2, r2, #3
 8009ef4:	4920      	ldr	r1, [pc, #128]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009efa:	4b1f      	ldr	r3, [pc, #124]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efe:	4a1e      	ldr	r2, [pc, #120]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009f00:	f043 0310 	orr.w	r3, r3, #16
 8009f04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d106      	bne.n	8009f1a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009f0c:	4b1a      	ldr	r3, [pc, #104]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f10:	4a19      	ldr	r2, [pc, #100]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009f12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f18:	e00f      	b.n	8009f3a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d106      	bne.n	8009f2e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009f20:	4b15      	ldr	r3, [pc, #84]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f24:	4a14      	ldr	r2, [pc, #80]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f2c:	e005      	b.n	8009f3a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009f2e:	4b12      	ldr	r3, [pc, #72]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f32:	4a11      	ldr	r2, [pc, #68]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009f34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009f3a:	4b0f      	ldr	r3, [pc, #60]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a0e      	ldr	r2, [pc, #56]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009f40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f46:	f7fa fd25 	bl	8004994 <HAL_GetTick>
 8009f4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f4c:	e008      	b.n	8009f60 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009f4e:	f7fa fd21 	bl	8004994 <HAL_GetTick>
 8009f52:	4602      	mov	r2, r0
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	1ad3      	subs	r3, r2, r3
 8009f58:	2b02      	cmp	r3, #2
 8009f5a:	d901      	bls.n	8009f60 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	e006      	b.n	8009f6e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f60:	4b05      	ldr	r3, [pc, #20]	; (8009f78 <RCCEx_PLL2_Config+0x15c>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d0f0      	beq.n	8009f4e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	58024400 	.word	0x58024400
 8009f7c:	ffff0007 	.word	0xffff0007

08009f80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f8e:	4b53      	ldr	r3, [pc, #332]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 8009f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f92:	f003 0303 	and.w	r3, r3, #3
 8009f96:	2b03      	cmp	r3, #3
 8009f98:	d101      	bne.n	8009f9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e099      	b.n	800a0d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009f9e:	4b4f      	ldr	r3, [pc, #316]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a4e      	ldr	r2, [pc, #312]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 8009fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009faa:	f7fa fcf3 	bl	8004994 <HAL_GetTick>
 8009fae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009fb0:	e008      	b.n	8009fc4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009fb2:	f7fa fcef 	bl	8004994 <HAL_GetTick>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	1ad3      	subs	r3, r2, r3
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d901      	bls.n	8009fc4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	e086      	b.n	800a0d2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009fc4:	4b45      	ldr	r3, [pc, #276]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d1f0      	bne.n	8009fb2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009fd0:	4b42      	ldr	r3, [pc, #264]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 8009fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	051b      	lsls	r3, r3, #20
 8009fde:	493f      	ldr	r1, [pc, #252]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	628b      	str	r3, [r1, #40]	; 0x28
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	025b      	lsls	r3, r3, #9
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	431a      	orrs	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	3b01      	subs	r3, #1
 800a000:	041b      	lsls	r3, r3, #16
 800a002:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a006:	431a      	orrs	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	3b01      	subs	r3, #1
 800a00e:	061b      	lsls	r3, r3, #24
 800a010:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a014:	4931      	ldr	r1, [pc, #196]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 800a016:	4313      	orrs	r3, r2
 800a018:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a01a:	4b30      	ldr	r3, [pc, #192]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 800a01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	695b      	ldr	r3, [r3, #20]
 800a026:	492d      	ldr	r1, [pc, #180]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 800a028:	4313      	orrs	r3, r2
 800a02a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a02c:	4b2b      	ldr	r3, [pc, #172]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 800a02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a030:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	699b      	ldr	r3, [r3, #24]
 800a038:	4928      	ldr	r1, [pc, #160]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 800a03a:	4313      	orrs	r3, r2
 800a03c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a03e:	4b27      	ldr	r3, [pc, #156]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 800a040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a042:	4a26      	ldr	r2, [pc, #152]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 800a044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a048:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a04a:	4b24      	ldr	r3, [pc, #144]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 800a04c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a04e:	4b24      	ldr	r3, [pc, #144]	; (800a0e0 <RCCEx_PLL3_Config+0x160>)
 800a050:	4013      	ands	r3, r2
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	69d2      	ldr	r2, [r2, #28]
 800a056:	00d2      	lsls	r2, r2, #3
 800a058:	4920      	ldr	r1, [pc, #128]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 800a05a:	4313      	orrs	r3, r2
 800a05c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a05e:	4b1f      	ldr	r3, [pc, #124]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 800a060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a062:	4a1e      	ldr	r2, [pc, #120]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 800a064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a068:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d106      	bne.n	800a07e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a070:	4b1a      	ldr	r3, [pc, #104]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 800a072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a074:	4a19      	ldr	r2, [pc, #100]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 800a076:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a07a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a07c:	e00f      	b.n	800a09e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2b01      	cmp	r3, #1
 800a082:	d106      	bne.n	800a092 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a084:	4b15      	ldr	r3, [pc, #84]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 800a086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a088:	4a14      	ldr	r2, [pc, #80]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 800a08a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a08e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a090:	e005      	b.n	800a09e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a092:	4b12      	ldr	r3, [pc, #72]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 800a094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a096:	4a11      	ldr	r2, [pc, #68]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 800a098:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a09c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a09e:	4b0f      	ldr	r3, [pc, #60]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a0e      	ldr	r2, [pc, #56]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 800a0a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0aa:	f7fa fc73 	bl	8004994 <HAL_GetTick>
 800a0ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a0b0:	e008      	b.n	800a0c4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a0b2:	f7fa fc6f 	bl	8004994 <HAL_GetTick>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	d901      	bls.n	800a0c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	e006      	b.n	800a0d2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a0c4:	4b05      	ldr	r3, [pc, #20]	; (800a0dc <RCCEx_PLL3_Config+0x15c>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d0f0      	beq.n	800a0b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	58024400 	.word	0x58024400
 800a0e0:	ffff0007 	.word	0xffff0007

0800a0e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d101      	bne.n	800a0f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e049      	b.n	800a18a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d106      	bne.n	800a110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f7f9 ffbe 	bl	800408c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2202      	movs	r2, #2
 800a114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	3304      	adds	r3, #4
 800a120:	4619      	mov	r1, r3
 800a122:	4610      	mov	r0, r2
 800a124:	f000 fe0c 	bl	800ad40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3708      	adds	r7, #8
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
	...

0800a194 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a194:	b480      	push	{r7}
 800a196:	b085      	sub	sp, #20
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d001      	beq.n	800a1ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e05e      	b.n	800a26a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68da      	ldr	r2, [r3, #12]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f042 0201 	orr.w	r2, r2, #1
 800a1c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a2b      	ldr	r2, [pc, #172]	; (800a278 <HAL_TIM_Base_Start_IT+0xe4>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d02c      	beq.n	800a228 <HAL_TIM_Base_Start_IT+0x94>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1d6:	d027      	beq.n	800a228 <HAL_TIM_Base_Start_IT+0x94>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a27      	ldr	r2, [pc, #156]	; (800a27c <HAL_TIM_Base_Start_IT+0xe8>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d022      	beq.n	800a228 <HAL_TIM_Base_Start_IT+0x94>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a26      	ldr	r2, [pc, #152]	; (800a280 <HAL_TIM_Base_Start_IT+0xec>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d01d      	beq.n	800a228 <HAL_TIM_Base_Start_IT+0x94>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a24      	ldr	r2, [pc, #144]	; (800a284 <HAL_TIM_Base_Start_IT+0xf0>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d018      	beq.n	800a228 <HAL_TIM_Base_Start_IT+0x94>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a23      	ldr	r2, [pc, #140]	; (800a288 <HAL_TIM_Base_Start_IT+0xf4>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d013      	beq.n	800a228 <HAL_TIM_Base_Start_IT+0x94>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a21      	ldr	r2, [pc, #132]	; (800a28c <HAL_TIM_Base_Start_IT+0xf8>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d00e      	beq.n	800a228 <HAL_TIM_Base_Start_IT+0x94>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a20      	ldr	r2, [pc, #128]	; (800a290 <HAL_TIM_Base_Start_IT+0xfc>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d009      	beq.n	800a228 <HAL_TIM_Base_Start_IT+0x94>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a1e      	ldr	r2, [pc, #120]	; (800a294 <HAL_TIM_Base_Start_IT+0x100>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d004      	beq.n	800a228 <HAL_TIM_Base_Start_IT+0x94>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a1d      	ldr	r2, [pc, #116]	; (800a298 <HAL_TIM_Base_Start_IT+0x104>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d115      	bne.n	800a254 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	689a      	ldr	r2, [r3, #8]
 800a22e:	4b1b      	ldr	r3, [pc, #108]	; (800a29c <HAL_TIM_Base_Start_IT+0x108>)
 800a230:	4013      	ands	r3, r2
 800a232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2b06      	cmp	r3, #6
 800a238:	d015      	beq.n	800a266 <HAL_TIM_Base_Start_IT+0xd2>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a240:	d011      	beq.n	800a266 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f042 0201 	orr.w	r2, r2, #1
 800a250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a252:	e008      	b.n	800a266 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f042 0201 	orr.w	r2, r2, #1
 800a262:	601a      	str	r2, [r3, #0]
 800a264:	e000      	b.n	800a268 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a266:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3714      	adds	r7, #20
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop
 800a278:	40010000 	.word	0x40010000
 800a27c:	40000400 	.word	0x40000400
 800a280:	40000800 	.word	0x40000800
 800a284:	40000c00 	.word	0x40000c00
 800a288:	40010400 	.word	0x40010400
 800a28c:	40001800 	.word	0x40001800
 800a290:	40014000 	.word	0x40014000
 800a294:	4000e000 	.word	0x4000e000
 800a298:	4000e400 	.word	0x4000e400
 800a29c:	00010007 	.word	0x00010007

0800a2a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d101      	bne.n	800a2b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e049      	b.n	800a346 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d106      	bne.n	800a2cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f7f9 fe98 	bl	8003ffc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2202      	movs	r2, #2
 800a2d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	3304      	adds	r3, #4
 800a2dc:	4619      	mov	r1, r3
 800a2de:	4610      	mov	r0, r2
 800a2e0:	f000 fd2e 	bl	800ad40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
	...

0800a350 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a35a:	2300      	movs	r3, #0
 800a35c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d109      	bne.n	800a378 <HAL_TIM_PWM_Start_IT+0x28>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	bf14      	ite	ne
 800a370:	2301      	movne	r3, #1
 800a372:	2300      	moveq	r3, #0
 800a374:	b2db      	uxtb	r3, r3
 800a376:	e03c      	b.n	800a3f2 <HAL_TIM_PWM_Start_IT+0xa2>
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	2b04      	cmp	r3, #4
 800a37c:	d109      	bne.n	800a392 <HAL_TIM_PWM_Start_IT+0x42>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a384:	b2db      	uxtb	r3, r3
 800a386:	2b01      	cmp	r3, #1
 800a388:	bf14      	ite	ne
 800a38a:	2301      	movne	r3, #1
 800a38c:	2300      	moveq	r3, #0
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	e02f      	b.n	800a3f2 <HAL_TIM_PWM_Start_IT+0xa2>
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	2b08      	cmp	r3, #8
 800a396:	d109      	bne.n	800a3ac <HAL_TIM_PWM_Start_IT+0x5c>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	bf14      	ite	ne
 800a3a4:	2301      	movne	r3, #1
 800a3a6:	2300      	moveq	r3, #0
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	e022      	b.n	800a3f2 <HAL_TIM_PWM_Start_IT+0xa2>
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	2b0c      	cmp	r3, #12
 800a3b0:	d109      	bne.n	800a3c6 <HAL_TIM_PWM_Start_IT+0x76>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	bf14      	ite	ne
 800a3be:	2301      	movne	r3, #1
 800a3c0:	2300      	moveq	r3, #0
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	e015      	b.n	800a3f2 <HAL_TIM_PWM_Start_IT+0xa2>
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2b10      	cmp	r3, #16
 800a3ca:	d109      	bne.n	800a3e0 <HAL_TIM_PWM_Start_IT+0x90>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	bf14      	ite	ne
 800a3d8:	2301      	movne	r3, #1
 800a3da:	2300      	moveq	r3, #0
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	e008      	b.n	800a3f2 <HAL_TIM_PWM_Start_IT+0xa2>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	bf14      	ite	ne
 800a3ec:	2301      	movne	r3, #1
 800a3ee:	2300      	moveq	r3, #0
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d001      	beq.n	800a3fa <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e0f6      	b.n	800a5e8 <HAL_TIM_PWM_Start_IT+0x298>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d104      	bne.n	800a40a <HAL_TIM_PWM_Start_IT+0xba>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2202      	movs	r2, #2
 800a404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a408:	e023      	b.n	800a452 <HAL_TIM_PWM_Start_IT+0x102>
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	2b04      	cmp	r3, #4
 800a40e:	d104      	bne.n	800a41a <HAL_TIM_PWM_Start_IT+0xca>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2202      	movs	r2, #2
 800a414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a418:	e01b      	b.n	800a452 <HAL_TIM_PWM_Start_IT+0x102>
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	2b08      	cmp	r3, #8
 800a41e:	d104      	bne.n	800a42a <HAL_TIM_PWM_Start_IT+0xda>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2202      	movs	r2, #2
 800a424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a428:	e013      	b.n	800a452 <HAL_TIM_PWM_Start_IT+0x102>
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2b0c      	cmp	r3, #12
 800a42e:	d104      	bne.n	800a43a <HAL_TIM_PWM_Start_IT+0xea>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2202      	movs	r2, #2
 800a434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a438:	e00b      	b.n	800a452 <HAL_TIM_PWM_Start_IT+0x102>
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	2b10      	cmp	r3, #16
 800a43e:	d104      	bne.n	800a44a <HAL_TIM_PWM_Start_IT+0xfa>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2202      	movs	r2, #2
 800a444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a448:	e003      	b.n	800a452 <HAL_TIM_PWM_Start_IT+0x102>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2202      	movs	r2, #2
 800a44e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b0c      	cmp	r3, #12
 800a456:	d841      	bhi.n	800a4dc <HAL_TIM_PWM_Start_IT+0x18c>
 800a458:	a201      	add	r2, pc, #4	; (adr r2, 800a460 <HAL_TIM_PWM_Start_IT+0x110>)
 800a45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a45e:	bf00      	nop
 800a460:	0800a495 	.word	0x0800a495
 800a464:	0800a4dd 	.word	0x0800a4dd
 800a468:	0800a4dd 	.word	0x0800a4dd
 800a46c:	0800a4dd 	.word	0x0800a4dd
 800a470:	0800a4a7 	.word	0x0800a4a7
 800a474:	0800a4dd 	.word	0x0800a4dd
 800a478:	0800a4dd 	.word	0x0800a4dd
 800a47c:	0800a4dd 	.word	0x0800a4dd
 800a480:	0800a4b9 	.word	0x0800a4b9
 800a484:	0800a4dd 	.word	0x0800a4dd
 800a488:	0800a4dd 	.word	0x0800a4dd
 800a48c:	0800a4dd 	.word	0x0800a4dd
 800a490:	0800a4cb 	.word	0x0800a4cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68da      	ldr	r2, [r3, #12]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f042 0202 	orr.w	r2, r2, #2
 800a4a2:	60da      	str	r2, [r3, #12]
      break;
 800a4a4:	e01d      	b.n	800a4e2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68da      	ldr	r2, [r3, #12]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f042 0204 	orr.w	r2, r2, #4
 800a4b4:	60da      	str	r2, [r3, #12]
      break;
 800a4b6:	e014      	b.n	800a4e2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	68da      	ldr	r2, [r3, #12]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f042 0208 	orr.w	r2, r2, #8
 800a4c6:	60da      	str	r2, [r3, #12]
      break;
 800a4c8:	e00b      	b.n	800a4e2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68da      	ldr	r2, [r3, #12]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f042 0210 	orr.w	r2, r2, #16
 800a4d8:	60da      	str	r2, [r3, #12]
      break;
 800a4da:	e002      	b.n	800a4e2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	73fb      	strb	r3, [r7, #15]
      break;
 800a4e0:	bf00      	nop
  }

  if (status == HAL_OK)
 800a4e2:	7bfb      	ldrb	r3, [r7, #15]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d17e      	bne.n	800a5e6 <HAL_TIM_PWM_Start_IT+0x296>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	6839      	ldr	r1, [r7, #0]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f000 ffa1 	bl	800b438 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a3d      	ldr	r2, [pc, #244]	; (800a5f0 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d013      	beq.n	800a528 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a3b      	ldr	r2, [pc, #236]	; (800a5f4 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d00e      	beq.n	800a528 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a3a      	ldr	r2, [pc, #232]	; (800a5f8 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d009      	beq.n	800a528 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a38      	ldr	r2, [pc, #224]	; (800a5fc <HAL_TIM_PWM_Start_IT+0x2ac>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d004      	beq.n	800a528 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a37      	ldr	r2, [pc, #220]	; (800a600 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d101      	bne.n	800a52c <HAL_TIM_PWM_Start_IT+0x1dc>
 800a528:	2301      	movs	r3, #1
 800a52a:	e000      	b.n	800a52e <HAL_TIM_PWM_Start_IT+0x1de>
 800a52c:	2300      	movs	r3, #0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d007      	beq.n	800a542 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a540:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a2a      	ldr	r2, [pc, #168]	; (800a5f0 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d02c      	beq.n	800a5a6 <HAL_TIM_PWM_Start_IT+0x256>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a554:	d027      	beq.n	800a5a6 <HAL_TIM_PWM_Start_IT+0x256>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a2a      	ldr	r2, [pc, #168]	; (800a604 <HAL_TIM_PWM_Start_IT+0x2b4>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d022      	beq.n	800a5a6 <HAL_TIM_PWM_Start_IT+0x256>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a28      	ldr	r2, [pc, #160]	; (800a608 <HAL_TIM_PWM_Start_IT+0x2b8>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d01d      	beq.n	800a5a6 <HAL_TIM_PWM_Start_IT+0x256>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a27      	ldr	r2, [pc, #156]	; (800a60c <HAL_TIM_PWM_Start_IT+0x2bc>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d018      	beq.n	800a5a6 <HAL_TIM_PWM_Start_IT+0x256>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a1e      	ldr	r2, [pc, #120]	; (800a5f4 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d013      	beq.n	800a5a6 <HAL_TIM_PWM_Start_IT+0x256>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a23      	ldr	r2, [pc, #140]	; (800a610 <HAL_TIM_PWM_Start_IT+0x2c0>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d00e      	beq.n	800a5a6 <HAL_TIM_PWM_Start_IT+0x256>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a1a      	ldr	r2, [pc, #104]	; (800a5f8 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d009      	beq.n	800a5a6 <HAL_TIM_PWM_Start_IT+0x256>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a1f      	ldr	r2, [pc, #124]	; (800a614 <HAL_TIM_PWM_Start_IT+0x2c4>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d004      	beq.n	800a5a6 <HAL_TIM_PWM_Start_IT+0x256>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a1d      	ldr	r2, [pc, #116]	; (800a618 <HAL_TIM_PWM_Start_IT+0x2c8>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d115      	bne.n	800a5d2 <HAL_TIM_PWM_Start_IT+0x282>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	689a      	ldr	r2, [r3, #8]
 800a5ac:	4b1b      	ldr	r3, [pc, #108]	; (800a61c <HAL_TIM_PWM_Start_IT+0x2cc>)
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	2b06      	cmp	r3, #6
 800a5b6:	d015      	beq.n	800a5e4 <HAL_TIM_PWM_Start_IT+0x294>
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5be:	d011      	beq.n	800a5e4 <HAL_TIM_PWM_Start_IT+0x294>
      {
        __HAL_TIM_ENABLE(htim);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f042 0201 	orr.w	r2, r2, #1
 800a5ce:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5d0:	e008      	b.n	800a5e4 <HAL_TIM_PWM_Start_IT+0x294>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f042 0201 	orr.w	r2, r2, #1
 800a5e0:	601a      	str	r2, [r3, #0]
 800a5e2:	e000      	b.n	800a5e6 <HAL_TIM_PWM_Start_IT+0x296>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5e4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a5e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	40010000 	.word	0x40010000
 800a5f4:	40010400 	.word	0x40010400
 800a5f8:	40014000 	.word	0x40014000
 800a5fc:	40014400 	.word	0x40014400
 800a600:	40014800 	.word	0x40014800
 800a604:	40000400 	.word	0x40000400
 800a608:	40000800 	.word	0x40000800
 800a60c:	40000c00 	.word	0x40000c00
 800a610:	40001800 	.word	0x40001800
 800a614:	4000e000 	.word	0x4000e000
 800a618:	4000e400 	.word	0x4000e400
 800a61c:	00010007 	.word	0x00010007

0800a620 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b086      	sub	sp, #24
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d101      	bne.n	800a634 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	e08f      	b.n	800a754 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d106      	bne.n	800a64e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f7f9 fbc9 	bl	8003de0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2202      	movs	r2, #2
 800a652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	6899      	ldr	r1, [r3, #8]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	4b3e      	ldr	r3, [pc, #248]	; (800a75c <HAL_TIM_Encoder_Init+0x13c>)
 800a662:	400b      	ands	r3, r1
 800a664:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	3304      	adds	r3, #4
 800a66e:	4619      	mov	r1, r3
 800a670:	4610      	mov	r0, r2
 800a672:	f000 fb65 	bl	800ad40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	699b      	ldr	r3, [r3, #24]
 800a684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	6a1b      	ldr	r3, [r3, #32]
 800a68c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	697a      	ldr	r2, [r7, #20]
 800a694:	4313      	orrs	r3, r2
 800a696:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a698:	693a      	ldr	r2, [r7, #16]
 800a69a:	4b31      	ldr	r3, [pc, #196]	; (800a760 <HAL_TIM_Encoder_Init+0x140>)
 800a69c:	4013      	ands	r3, r2
 800a69e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	689a      	ldr	r2, [r3, #8]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	699b      	ldr	r3, [r3, #24]
 800a6a8:	021b      	lsls	r3, r3, #8
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	693a      	ldr	r2, [r7, #16]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a6b2:	693a      	ldr	r2, [r7, #16]
 800a6b4:	4b2b      	ldr	r3, [pc, #172]	; (800a764 <HAL_TIM_Encoder_Init+0x144>)
 800a6b6:	4013      	ands	r3, r2
 800a6b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a6ba:	693a      	ldr	r2, [r7, #16]
 800a6bc:	4b2a      	ldr	r3, [pc, #168]	; (800a768 <HAL_TIM_Encoder_Init+0x148>)
 800a6be:	4013      	ands	r3, r2
 800a6c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	68da      	ldr	r2, [r3, #12]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	69db      	ldr	r3, [r3, #28]
 800a6ca:	021b      	lsls	r3, r3, #8
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	693a      	ldr	r2, [r7, #16]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	691b      	ldr	r3, [r3, #16]
 800a6d8:	011a      	lsls	r2, r3, #4
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	6a1b      	ldr	r3, [r3, #32]
 800a6de:	031b      	lsls	r3, r3, #12
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	693a      	ldr	r2, [r7, #16]
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a6ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a6f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	685a      	ldr	r2, [r3, #4]
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	695b      	ldr	r3, [r3, #20]
 800a700:	011b      	lsls	r3, r3, #4
 800a702:	4313      	orrs	r3, r2
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	4313      	orrs	r3, r2
 800a708:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	693a      	ldr	r2, [r7, #16]
 800a718:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2201      	movs	r2, #1
 800a726:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2201      	movs	r2, #1
 800a72e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2201      	movs	r2, #1
 800a736:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2201      	movs	r2, #1
 800a73e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2201      	movs	r2, #1
 800a746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2201      	movs	r2, #1
 800a74e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a752:	2300      	movs	r3, #0
}
 800a754:	4618      	mov	r0, r3
 800a756:	3718      	adds	r7, #24
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	fffebff8 	.word	0xfffebff8
 800a760:	fffffcfc 	.word	0xfffffcfc
 800a764:	fffff3f3 	.word	0xfffff3f3
 800a768:	ffff0f0f 	.word	0xffff0f0f

0800a76c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a77c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a784:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a78c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a794:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d110      	bne.n	800a7be <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a79c:	7bfb      	ldrb	r3, [r7, #15]
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d102      	bne.n	800a7a8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a7a2:	7b7b      	ldrb	r3, [r7, #13]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d001      	beq.n	800a7ac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e069      	b.n	800a880 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2202      	movs	r2, #2
 800a7b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2202      	movs	r2, #2
 800a7b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7bc:	e031      	b.n	800a822 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	2b04      	cmp	r3, #4
 800a7c2:	d110      	bne.n	800a7e6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a7c4:	7bbb      	ldrb	r3, [r7, #14]
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d102      	bne.n	800a7d0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a7ca:	7b3b      	ldrb	r3, [r7, #12]
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d001      	beq.n	800a7d4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	e055      	b.n	800a880 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2202      	movs	r2, #2
 800a7d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2202      	movs	r2, #2
 800a7e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7e4:	e01d      	b.n	800a822 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a7e6:	7bfb      	ldrb	r3, [r7, #15]
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d108      	bne.n	800a7fe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a7ec:	7bbb      	ldrb	r3, [r7, #14]
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d105      	bne.n	800a7fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a7f2:	7b7b      	ldrb	r3, [r7, #13]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d102      	bne.n	800a7fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a7f8:	7b3b      	ldrb	r3, [r7, #12]
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d001      	beq.n	800a802 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	e03e      	b.n	800a880 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2202      	movs	r2, #2
 800a806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2202      	movs	r2, #2
 800a80e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2202      	movs	r2, #2
 800a816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2202      	movs	r2, #2
 800a81e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d003      	beq.n	800a830 <HAL_TIM_Encoder_Start+0xc4>
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	2b04      	cmp	r3, #4
 800a82c:	d008      	beq.n	800a840 <HAL_TIM_Encoder_Start+0xd4>
 800a82e:	e00f      	b.n	800a850 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2201      	movs	r2, #1
 800a836:	2100      	movs	r1, #0
 800a838:	4618      	mov	r0, r3
 800a83a:	f000 fdfd 	bl	800b438 <TIM_CCxChannelCmd>
      break;
 800a83e:	e016      	b.n	800a86e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2201      	movs	r2, #1
 800a846:	2104      	movs	r1, #4
 800a848:	4618      	mov	r0, r3
 800a84a:	f000 fdf5 	bl	800b438 <TIM_CCxChannelCmd>
      break;
 800a84e:	e00e      	b.n	800a86e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2201      	movs	r2, #1
 800a856:	2100      	movs	r1, #0
 800a858:	4618      	mov	r0, r3
 800a85a:	f000 fded 	bl	800b438 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2201      	movs	r2, #1
 800a864:	2104      	movs	r1, #4
 800a866:	4618      	mov	r0, r3
 800a868:	f000 fde6 	bl	800b438 <TIM_CCxChannelCmd>
      break;
 800a86c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f042 0201 	orr.w	r2, r2, #1
 800a87c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	f003 0302 	and.w	r3, r3, #2
 800a89a:	2b02      	cmp	r3, #2
 800a89c:	d122      	bne.n	800a8e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	f003 0302 	and.w	r3, r3, #2
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d11b      	bne.n	800a8e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f06f 0202 	mvn.w	r2, #2
 800a8b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	f003 0303 	and.w	r3, r3, #3
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d003      	beq.n	800a8d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 fa1a 	bl	800ad04 <HAL_TIM_IC_CaptureCallback>
 800a8d0:	e005      	b.n	800a8de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 fa0c 	bl	800acf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 fa1d 	bl	800ad18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	f003 0304 	and.w	r3, r3, #4
 800a8ee:	2b04      	cmp	r3, #4
 800a8f0:	d122      	bne.n	800a938 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	f003 0304 	and.w	r3, r3, #4
 800a8fc:	2b04      	cmp	r3, #4
 800a8fe:	d11b      	bne.n	800a938 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f06f 0204 	mvn.w	r2, #4
 800a908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2202      	movs	r2, #2
 800a90e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	699b      	ldr	r3, [r3, #24]
 800a916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d003      	beq.n	800a926 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 f9f0 	bl	800ad04 <HAL_TIM_IC_CaptureCallback>
 800a924:	e005      	b.n	800a932 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 f9e2 	bl	800acf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 f9f3 	bl	800ad18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	f003 0308 	and.w	r3, r3, #8
 800a942:	2b08      	cmp	r3, #8
 800a944:	d122      	bne.n	800a98c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	f003 0308 	and.w	r3, r3, #8
 800a950:	2b08      	cmp	r3, #8
 800a952:	d11b      	bne.n	800a98c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f06f 0208 	mvn.w	r2, #8
 800a95c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2204      	movs	r2, #4
 800a962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	69db      	ldr	r3, [r3, #28]
 800a96a:	f003 0303 	and.w	r3, r3, #3
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d003      	beq.n	800a97a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 f9c6 	bl	800ad04 <HAL_TIM_IC_CaptureCallback>
 800a978:	e005      	b.n	800a986 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f9b8 	bl	800acf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 f9c9 	bl	800ad18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	f003 0310 	and.w	r3, r3, #16
 800a996:	2b10      	cmp	r3, #16
 800a998:	d122      	bne.n	800a9e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	f003 0310 	and.w	r3, r3, #16
 800a9a4:	2b10      	cmp	r3, #16
 800a9a6:	d11b      	bne.n	800a9e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f06f 0210 	mvn.w	r2, #16
 800a9b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2208      	movs	r2, #8
 800a9b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	69db      	ldr	r3, [r3, #28]
 800a9be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d003      	beq.n	800a9ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 f99c 	bl	800ad04 <HAL_TIM_IC_CaptureCallback>
 800a9cc:	e005      	b.n	800a9da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f98e 	bl	800acf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 f99f 	bl	800ad18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	f003 0301 	and.w	r3, r3, #1
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d10e      	bne.n	800aa0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	f003 0301 	and.w	r3, r3, #1
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d107      	bne.n	800aa0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f06f 0201 	mvn.w	r2, #1
 800aa04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f7f9 fde2 	bl	80045d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa16:	2b80      	cmp	r3, #128	; 0x80
 800aa18:	d10e      	bne.n	800aa38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa24:	2b80      	cmp	r3, #128	; 0x80
 800aa26:	d107      	bne.n	800aa38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fe6c 	bl	800b710 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa46:	d10e      	bne.n	800aa66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa52:	2b80      	cmp	r3, #128	; 0x80
 800aa54:	d107      	bne.n	800aa66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 fe5f 	bl	800b724 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa70:	2b40      	cmp	r3, #64	; 0x40
 800aa72:	d10e      	bne.n	800aa92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa7e:	2b40      	cmp	r3, #64	; 0x40
 800aa80:	d107      	bne.n	800aa92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 f94d 	bl	800ad2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	691b      	ldr	r3, [r3, #16]
 800aa98:	f003 0320 	and.w	r3, r3, #32
 800aa9c:	2b20      	cmp	r3, #32
 800aa9e:	d10e      	bne.n	800aabe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	f003 0320 	and.w	r3, r3, #32
 800aaaa:	2b20      	cmp	r3, #32
 800aaac:	d107      	bne.n	800aabe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f06f 0220 	mvn.w	r2, #32
 800aab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fe1f 	bl	800b6fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aabe:	bf00      	nop
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
	...

0800aac8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b086      	sub	sp, #24
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aad4:	2300      	movs	r3, #0
 800aad6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d101      	bne.n	800aae6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aae2:	2302      	movs	r3, #2
 800aae4:	e0ff      	b.n	800ace6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2201      	movs	r2, #1
 800aaea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2b14      	cmp	r3, #20
 800aaf2:	f200 80f0 	bhi.w	800acd6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aaf6:	a201      	add	r2, pc, #4	; (adr r2, 800aafc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aaf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aafc:	0800ab51 	.word	0x0800ab51
 800ab00:	0800acd7 	.word	0x0800acd7
 800ab04:	0800acd7 	.word	0x0800acd7
 800ab08:	0800acd7 	.word	0x0800acd7
 800ab0c:	0800ab91 	.word	0x0800ab91
 800ab10:	0800acd7 	.word	0x0800acd7
 800ab14:	0800acd7 	.word	0x0800acd7
 800ab18:	0800acd7 	.word	0x0800acd7
 800ab1c:	0800abd3 	.word	0x0800abd3
 800ab20:	0800acd7 	.word	0x0800acd7
 800ab24:	0800acd7 	.word	0x0800acd7
 800ab28:	0800acd7 	.word	0x0800acd7
 800ab2c:	0800ac13 	.word	0x0800ac13
 800ab30:	0800acd7 	.word	0x0800acd7
 800ab34:	0800acd7 	.word	0x0800acd7
 800ab38:	0800acd7 	.word	0x0800acd7
 800ab3c:	0800ac55 	.word	0x0800ac55
 800ab40:	0800acd7 	.word	0x0800acd7
 800ab44:	0800acd7 	.word	0x0800acd7
 800ab48:	0800acd7 	.word	0x0800acd7
 800ab4c:	0800ac95 	.word	0x0800ac95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	68b9      	ldr	r1, [r7, #8]
 800ab56:	4618      	mov	r0, r3
 800ab58:	f000 f998 	bl	800ae8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	699a      	ldr	r2, [r3, #24]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f042 0208 	orr.w	r2, r2, #8
 800ab6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	699a      	ldr	r2, [r3, #24]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f022 0204 	bic.w	r2, r2, #4
 800ab7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	6999      	ldr	r1, [r3, #24]
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	691a      	ldr	r2, [r3, #16]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	430a      	orrs	r2, r1
 800ab8c:	619a      	str	r2, [r3, #24]
      break;
 800ab8e:	e0a5      	b.n	800acdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	68b9      	ldr	r1, [r7, #8]
 800ab96:	4618      	mov	r0, r3
 800ab98:	f000 fa08 	bl	800afac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	699a      	ldr	r2, [r3, #24]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	699a      	ldr	r2, [r3, #24]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	6999      	ldr	r1, [r3, #24]
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	691b      	ldr	r3, [r3, #16]
 800abc6:	021a      	lsls	r2, r3, #8
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	430a      	orrs	r2, r1
 800abce:	619a      	str	r2, [r3, #24]
      break;
 800abd0:	e084      	b.n	800acdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68b9      	ldr	r1, [r7, #8]
 800abd8:	4618      	mov	r0, r3
 800abda:	f000 fa71 	bl	800b0c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	69da      	ldr	r2, [r3, #28]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f042 0208 	orr.w	r2, r2, #8
 800abec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	69da      	ldr	r2, [r3, #28]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f022 0204 	bic.w	r2, r2, #4
 800abfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	69d9      	ldr	r1, [r3, #28]
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	691a      	ldr	r2, [r3, #16]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	430a      	orrs	r2, r1
 800ac0e:	61da      	str	r2, [r3, #28]
      break;
 800ac10:	e064      	b.n	800acdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68b9      	ldr	r1, [r7, #8]
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f000 fad9 	bl	800b1d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	69da      	ldr	r2, [r3, #28]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	69da      	ldr	r2, [r3, #28]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	69d9      	ldr	r1, [r3, #28]
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	691b      	ldr	r3, [r3, #16]
 800ac48:	021a      	lsls	r2, r3, #8
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	430a      	orrs	r2, r1
 800ac50:	61da      	str	r2, [r3, #28]
      break;
 800ac52:	e043      	b.n	800acdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68b9      	ldr	r1, [r7, #8]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f000 fb22 	bl	800b2a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f042 0208 	orr.w	r2, r2, #8
 800ac6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f022 0204 	bic.w	r2, r2, #4
 800ac7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	691a      	ldr	r2, [r3, #16]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	430a      	orrs	r2, r1
 800ac90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ac92:	e023      	b.n	800acdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	68b9      	ldr	r1, [r7, #8]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f000 fb66 	bl	800b36c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800acae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800acbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	021a      	lsls	r2, r3, #8
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	430a      	orrs	r2, r1
 800acd2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800acd4:	e002      	b.n	800acdc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	75fb      	strb	r3, [r7, #23]
      break;
 800acda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2200      	movs	r2, #0
 800ace0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ace4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3718      	adds	r7, #24
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop

0800acf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800acf8:	bf00      	nop
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad0c:	bf00      	nop
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad20:	bf00      	nop
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b085      	sub	sp, #20
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a44      	ldr	r2, [pc, #272]	; (800ae64 <TIM_Base_SetConfig+0x124>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d013      	beq.n	800ad80 <TIM_Base_SetConfig+0x40>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad5e:	d00f      	beq.n	800ad80 <TIM_Base_SetConfig+0x40>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a41      	ldr	r2, [pc, #260]	; (800ae68 <TIM_Base_SetConfig+0x128>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d00b      	beq.n	800ad80 <TIM_Base_SetConfig+0x40>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4a40      	ldr	r2, [pc, #256]	; (800ae6c <TIM_Base_SetConfig+0x12c>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d007      	beq.n	800ad80 <TIM_Base_SetConfig+0x40>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a3f      	ldr	r2, [pc, #252]	; (800ae70 <TIM_Base_SetConfig+0x130>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d003      	beq.n	800ad80 <TIM_Base_SetConfig+0x40>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4a3e      	ldr	r2, [pc, #248]	; (800ae74 <TIM_Base_SetConfig+0x134>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d108      	bne.n	800ad92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a33      	ldr	r2, [pc, #204]	; (800ae64 <TIM_Base_SetConfig+0x124>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d027      	beq.n	800adea <TIM_Base_SetConfig+0xaa>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ada0:	d023      	beq.n	800adea <TIM_Base_SetConfig+0xaa>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a30      	ldr	r2, [pc, #192]	; (800ae68 <TIM_Base_SetConfig+0x128>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d01f      	beq.n	800adea <TIM_Base_SetConfig+0xaa>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4a2f      	ldr	r2, [pc, #188]	; (800ae6c <TIM_Base_SetConfig+0x12c>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d01b      	beq.n	800adea <TIM_Base_SetConfig+0xaa>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a2e      	ldr	r2, [pc, #184]	; (800ae70 <TIM_Base_SetConfig+0x130>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d017      	beq.n	800adea <TIM_Base_SetConfig+0xaa>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4a2d      	ldr	r2, [pc, #180]	; (800ae74 <TIM_Base_SetConfig+0x134>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d013      	beq.n	800adea <TIM_Base_SetConfig+0xaa>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a2c      	ldr	r2, [pc, #176]	; (800ae78 <TIM_Base_SetConfig+0x138>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d00f      	beq.n	800adea <TIM_Base_SetConfig+0xaa>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4a2b      	ldr	r2, [pc, #172]	; (800ae7c <TIM_Base_SetConfig+0x13c>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d00b      	beq.n	800adea <TIM_Base_SetConfig+0xaa>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4a2a      	ldr	r2, [pc, #168]	; (800ae80 <TIM_Base_SetConfig+0x140>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d007      	beq.n	800adea <TIM_Base_SetConfig+0xaa>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4a29      	ldr	r2, [pc, #164]	; (800ae84 <TIM_Base_SetConfig+0x144>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d003      	beq.n	800adea <TIM_Base_SetConfig+0xaa>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	4a28      	ldr	r2, [pc, #160]	; (800ae88 <TIM_Base_SetConfig+0x148>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d108      	bne.n	800adfc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	4313      	orrs	r3, r2
 800adfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	695b      	ldr	r3, [r3, #20]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	689a      	ldr	r2, [r3, #8]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	4a10      	ldr	r2, [pc, #64]	; (800ae64 <TIM_Base_SetConfig+0x124>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d00f      	beq.n	800ae48 <TIM_Base_SetConfig+0x108>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4a12      	ldr	r2, [pc, #72]	; (800ae74 <TIM_Base_SetConfig+0x134>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d00b      	beq.n	800ae48 <TIM_Base_SetConfig+0x108>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a11      	ldr	r2, [pc, #68]	; (800ae78 <TIM_Base_SetConfig+0x138>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d007      	beq.n	800ae48 <TIM_Base_SetConfig+0x108>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a10      	ldr	r2, [pc, #64]	; (800ae7c <TIM_Base_SetConfig+0x13c>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d003      	beq.n	800ae48 <TIM_Base_SetConfig+0x108>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a0f      	ldr	r2, [pc, #60]	; (800ae80 <TIM_Base_SetConfig+0x140>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d103      	bne.n	800ae50 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	691a      	ldr	r2, [r3, #16]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2201      	movs	r2, #1
 800ae54:	615a      	str	r2, [r3, #20]
}
 800ae56:	bf00      	nop
 800ae58:	3714      	adds	r7, #20
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	40010000 	.word	0x40010000
 800ae68:	40000400 	.word	0x40000400
 800ae6c:	40000800 	.word	0x40000800
 800ae70:	40000c00 	.word	0x40000c00
 800ae74:	40010400 	.word	0x40010400
 800ae78:	40014000 	.word	0x40014000
 800ae7c:	40014400 	.word	0x40014400
 800ae80:	40014800 	.word	0x40014800
 800ae84:	4000e000 	.word	0x4000e000
 800ae88:	4000e400 	.word	0x4000e400

0800ae8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b087      	sub	sp, #28
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a1b      	ldr	r3, [r3, #32]
 800ae9a:	f023 0201 	bic.w	r2, r3, #1
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6a1b      	ldr	r3, [r3, #32]
 800aea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	699b      	ldr	r3, [r3, #24]
 800aeb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aeb4:	68fa      	ldr	r2, [r7, #12]
 800aeb6:	4b37      	ldr	r3, [pc, #220]	; (800af94 <TIM_OC1_SetConfig+0x108>)
 800aeb8:	4013      	ands	r3, r2
 800aeba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f023 0303 	bic.w	r3, r3, #3
 800aec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	f023 0302 	bic.w	r3, r3, #2
 800aed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	697a      	ldr	r2, [r7, #20]
 800aedc:	4313      	orrs	r3, r2
 800aede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	4a2d      	ldr	r2, [pc, #180]	; (800af98 <TIM_OC1_SetConfig+0x10c>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d00f      	beq.n	800af08 <TIM_OC1_SetConfig+0x7c>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	4a2c      	ldr	r2, [pc, #176]	; (800af9c <TIM_OC1_SetConfig+0x110>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d00b      	beq.n	800af08 <TIM_OC1_SetConfig+0x7c>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4a2b      	ldr	r2, [pc, #172]	; (800afa0 <TIM_OC1_SetConfig+0x114>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d007      	beq.n	800af08 <TIM_OC1_SetConfig+0x7c>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	4a2a      	ldr	r2, [pc, #168]	; (800afa4 <TIM_OC1_SetConfig+0x118>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d003      	beq.n	800af08 <TIM_OC1_SetConfig+0x7c>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	4a29      	ldr	r2, [pc, #164]	; (800afa8 <TIM_OC1_SetConfig+0x11c>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d10c      	bne.n	800af22 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	f023 0308 	bic.w	r3, r3, #8
 800af0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	697a      	ldr	r2, [r7, #20]
 800af16:	4313      	orrs	r3, r2
 800af18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	f023 0304 	bic.w	r3, r3, #4
 800af20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4a1c      	ldr	r2, [pc, #112]	; (800af98 <TIM_OC1_SetConfig+0x10c>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d00f      	beq.n	800af4a <TIM_OC1_SetConfig+0xbe>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4a1b      	ldr	r2, [pc, #108]	; (800af9c <TIM_OC1_SetConfig+0x110>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d00b      	beq.n	800af4a <TIM_OC1_SetConfig+0xbe>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	4a1a      	ldr	r2, [pc, #104]	; (800afa0 <TIM_OC1_SetConfig+0x114>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d007      	beq.n	800af4a <TIM_OC1_SetConfig+0xbe>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	4a19      	ldr	r2, [pc, #100]	; (800afa4 <TIM_OC1_SetConfig+0x118>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d003      	beq.n	800af4a <TIM_OC1_SetConfig+0xbe>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	4a18      	ldr	r2, [pc, #96]	; (800afa8 <TIM_OC1_SetConfig+0x11c>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d111      	bne.n	800af6e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	695b      	ldr	r3, [r3, #20]
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	4313      	orrs	r3, r2
 800af62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	699b      	ldr	r3, [r3, #24]
 800af68:	693a      	ldr	r2, [r7, #16]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	693a      	ldr	r2, [r7, #16]
 800af72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	68fa      	ldr	r2, [r7, #12]
 800af78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	685a      	ldr	r2, [r3, #4]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	697a      	ldr	r2, [r7, #20]
 800af86:	621a      	str	r2, [r3, #32]
}
 800af88:	bf00      	nop
 800af8a:	371c      	adds	r7, #28
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr
 800af94:	fffeff8f 	.word	0xfffeff8f
 800af98:	40010000 	.word	0x40010000
 800af9c:	40010400 	.word	0x40010400
 800afa0:	40014000 	.word	0x40014000
 800afa4:	40014400 	.word	0x40014400
 800afa8:	40014800 	.word	0x40014800

0800afac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afac:	b480      	push	{r7}
 800afae:	b087      	sub	sp, #28
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a1b      	ldr	r3, [r3, #32]
 800afba:	f023 0210 	bic.w	r2, r3, #16
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6a1b      	ldr	r3, [r3, #32]
 800afc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	699b      	ldr	r3, [r3, #24]
 800afd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800afd4:	68fa      	ldr	r2, [r7, #12]
 800afd6:	4b34      	ldr	r3, [pc, #208]	; (800b0a8 <TIM_OC2_SetConfig+0xfc>)
 800afd8:	4013      	ands	r3, r2
 800afda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	021b      	lsls	r3, r3, #8
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	4313      	orrs	r3, r2
 800afee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	f023 0320 	bic.w	r3, r3, #32
 800aff6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	011b      	lsls	r3, r3, #4
 800affe:	697a      	ldr	r2, [r7, #20]
 800b000:	4313      	orrs	r3, r2
 800b002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	4a29      	ldr	r2, [pc, #164]	; (800b0ac <TIM_OC2_SetConfig+0x100>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d003      	beq.n	800b014 <TIM_OC2_SetConfig+0x68>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	4a28      	ldr	r2, [pc, #160]	; (800b0b0 <TIM_OC2_SetConfig+0x104>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d10d      	bne.n	800b030 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b01a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	011b      	lsls	r3, r3, #4
 800b022:	697a      	ldr	r2, [r7, #20]
 800b024:	4313      	orrs	r3, r2
 800b026:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b02e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4a1e      	ldr	r2, [pc, #120]	; (800b0ac <TIM_OC2_SetConfig+0x100>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d00f      	beq.n	800b058 <TIM_OC2_SetConfig+0xac>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4a1d      	ldr	r2, [pc, #116]	; (800b0b0 <TIM_OC2_SetConfig+0x104>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d00b      	beq.n	800b058 <TIM_OC2_SetConfig+0xac>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4a1c      	ldr	r2, [pc, #112]	; (800b0b4 <TIM_OC2_SetConfig+0x108>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d007      	beq.n	800b058 <TIM_OC2_SetConfig+0xac>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a1b      	ldr	r2, [pc, #108]	; (800b0b8 <TIM_OC2_SetConfig+0x10c>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d003      	beq.n	800b058 <TIM_OC2_SetConfig+0xac>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4a1a      	ldr	r2, [pc, #104]	; (800b0bc <TIM_OC2_SetConfig+0x110>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d113      	bne.n	800b080 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b05e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b066:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	695b      	ldr	r3, [r3, #20]
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	693a      	ldr	r2, [r7, #16]
 800b070:	4313      	orrs	r3, r2
 800b072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	699b      	ldr	r3, [r3, #24]
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	693a      	ldr	r2, [r7, #16]
 800b07c:	4313      	orrs	r3, r2
 800b07e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	693a      	ldr	r2, [r7, #16]
 800b084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	685a      	ldr	r2, [r3, #4]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	697a      	ldr	r2, [r7, #20]
 800b098:	621a      	str	r2, [r3, #32]
}
 800b09a:	bf00      	nop
 800b09c:	371c      	adds	r7, #28
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	feff8fff 	.word	0xfeff8fff
 800b0ac:	40010000 	.word	0x40010000
 800b0b0:	40010400 	.word	0x40010400
 800b0b4:	40014000 	.word	0x40014000
 800b0b8:	40014400 	.word	0x40014400
 800b0bc:	40014800 	.word	0x40014800

0800b0c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b087      	sub	sp, #28
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6a1b      	ldr	r3, [r3, #32]
 800b0ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6a1b      	ldr	r3, [r3, #32]
 800b0da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	69db      	ldr	r3, [r3, #28]
 800b0e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	4b33      	ldr	r3, [pc, #204]	; (800b1b8 <TIM_OC3_SetConfig+0xf8>)
 800b0ec:	4013      	ands	r3, r2
 800b0ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f023 0303 	bic.w	r3, r3, #3
 800b0f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	4313      	orrs	r3, r2
 800b100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	021b      	lsls	r3, r3, #8
 800b110:	697a      	ldr	r2, [r7, #20]
 800b112:	4313      	orrs	r3, r2
 800b114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	4a28      	ldr	r2, [pc, #160]	; (800b1bc <TIM_OC3_SetConfig+0xfc>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d003      	beq.n	800b126 <TIM_OC3_SetConfig+0x66>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4a27      	ldr	r2, [pc, #156]	; (800b1c0 <TIM_OC3_SetConfig+0x100>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d10d      	bne.n	800b142 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b12c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	021b      	lsls	r3, r3, #8
 800b134:	697a      	ldr	r2, [r7, #20]
 800b136:	4313      	orrs	r3, r2
 800b138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4a1d      	ldr	r2, [pc, #116]	; (800b1bc <TIM_OC3_SetConfig+0xfc>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d00f      	beq.n	800b16a <TIM_OC3_SetConfig+0xaa>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4a1c      	ldr	r2, [pc, #112]	; (800b1c0 <TIM_OC3_SetConfig+0x100>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d00b      	beq.n	800b16a <TIM_OC3_SetConfig+0xaa>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4a1b      	ldr	r2, [pc, #108]	; (800b1c4 <TIM_OC3_SetConfig+0x104>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d007      	beq.n	800b16a <TIM_OC3_SetConfig+0xaa>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4a1a      	ldr	r2, [pc, #104]	; (800b1c8 <TIM_OC3_SetConfig+0x108>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d003      	beq.n	800b16a <TIM_OC3_SetConfig+0xaa>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4a19      	ldr	r2, [pc, #100]	; (800b1cc <TIM_OC3_SetConfig+0x10c>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d113      	bne.n	800b192 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	695b      	ldr	r3, [r3, #20]
 800b17e:	011b      	lsls	r3, r3, #4
 800b180:	693a      	ldr	r2, [r7, #16]
 800b182:	4313      	orrs	r3, r2
 800b184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	699b      	ldr	r3, [r3, #24]
 800b18a:	011b      	lsls	r3, r3, #4
 800b18c:	693a      	ldr	r2, [r7, #16]
 800b18e:	4313      	orrs	r3, r2
 800b190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	693a      	ldr	r2, [r7, #16]
 800b196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	685a      	ldr	r2, [r3, #4]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	697a      	ldr	r2, [r7, #20]
 800b1aa:	621a      	str	r2, [r3, #32]
}
 800b1ac:	bf00      	nop
 800b1ae:	371c      	adds	r7, #28
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr
 800b1b8:	fffeff8f 	.word	0xfffeff8f
 800b1bc:	40010000 	.word	0x40010000
 800b1c0:	40010400 	.word	0x40010400
 800b1c4:	40014000 	.word	0x40014000
 800b1c8:	40014400 	.word	0x40014400
 800b1cc:	40014800 	.word	0x40014800

0800b1d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b087      	sub	sp, #28
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a1b      	ldr	r3, [r3, #32]
 800b1de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a1b      	ldr	r3, [r3, #32]
 800b1ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	69db      	ldr	r3, [r3, #28]
 800b1f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	4b24      	ldr	r3, [pc, #144]	; (800b28c <TIM_OC4_SetConfig+0xbc>)
 800b1fc:	4013      	ands	r3, r2
 800b1fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	021b      	lsls	r3, r3, #8
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	4313      	orrs	r3, r2
 800b212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b21a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	689b      	ldr	r3, [r3, #8]
 800b220:	031b      	lsls	r3, r3, #12
 800b222:	693a      	ldr	r2, [r7, #16]
 800b224:	4313      	orrs	r3, r2
 800b226:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	4a19      	ldr	r2, [pc, #100]	; (800b290 <TIM_OC4_SetConfig+0xc0>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d00f      	beq.n	800b250 <TIM_OC4_SetConfig+0x80>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	4a18      	ldr	r2, [pc, #96]	; (800b294 <TIM_OC4_SetConfig+0xc4>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d00b      	beq.n	800b250 <TIM_OC4_SetConfig+0x80>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	4a17      	ldr	r2, [pc, #92]	; (800b298 <TIM_OC4_SetConfig+0xc8>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d007      	beq.n	800b250 <TIM_OC4_SetConfig+0x80>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4a16      	ldr	r2, [pc, #88]	; (800b29c <TIM_OC4_SetConfig+0xcc>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d003      	beq.n	800b250 <TIM_OC4_SetConfig+0x80>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a15      	ldr	r2, [pc, #84]	; (800b2a0 <TIM_OC4_SetConfig+0xd0>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d109      	bne.n	800b264 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b256:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	695b      	ldr	r3, [r3, #20]
 800b25c:	019b      	lsls	r3, r3, #6
 800b25e:	697a      	ldr	r2, [r7, #20]
 800b260:	4313      	orrs	r3, r2
 800b262:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	697a      	ldr	r2, [r7, #20]
 800b268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	685a      	ldr	r2, [r3, #4]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	693a      	ldr	r2, [r7, #16]
 800b27c:	621a      	str	r2, [r3, #32]
}
 800b27e:	bf00      	nop
 800b280:	371c      	adds	r7, #28
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	feff8fff 	.word	0xfeff8fff
 800b290:	40010000 	.word	0x40010000
 800b294:	40010400 	.word	0x40010400
 800b298:	40014000 	.word	0x40014000
 800b29c:	40014400 	.word	0x40014400
 800b2a0:	40014800 	.word	0x40014800

0800b2a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b087      	sub	sp, #28
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6a1b      	ldr	r3, [r3, #32]
 800b2b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6a1b      	ldr	r3, [r3, #32]
 800b2be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	4b21      	ldr	r3, [pc, #132]	; (800b354 <TIM_OC5_SetConfig+0xb0>)
 800b2d0:	4013      	ands	r3, r2
 800b2d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	68fa      	ldr	r2, [r7, #12]
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b2e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	041b      	lsls	r3, r3, #16
 800b2ec:	693a      	ldr	r2, [r7, #16]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	4a18      	ldr	r2, [pc, #96]	; (800b358 <TIM_OC5_SetConfig+0xb4>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d00f      	beq.n	800b31a <TIM_OC5_SetConfig+0x76>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	4a17      	ldr	r2, [pc, #92]	; (800b35c <TIM_OC5_SetConfig+0xb8>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d00b      	beq.n	800b31a <TIM_OC5_SetConfig+0x76>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4a16      	ldr	r2, [pc, #88]	; (800b360 <TIM_OC5_SetConfig+0xbc>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d007      	beq.n	800b31a <TIM_OC5_SetConfig+0x76>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a15      	ldr	r2, [pc, #84]	; (800b364 <TIM_OC5_SetConfig+0xc0>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d003      	beq.n	800b31a <TIM_OC5_SetConfig+0x76>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4a14      	ldr	r2, [pc, #80]	; (800b368 <TIM_OC5_SetConfig+0xc4>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d109      	bne.n	800b32e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b320:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	695b      	ldr	r3, [r3, #20]
 800b326:	021b      	lsls	r3, r3, #8
 800b328:	697a      	ldr	r2, [r7, #20]
 800b32a:	4313      	orrs	r3, r2
 800b32c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	697a      	ldr	r2, [r7, #20]
 800b332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	68fa      	ldr	r2, [r7, #12]
 800b338:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	685a      	ldr	r2, [r3, #4]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	693a      	ldr	r2, [r7, #16]
 800b346:	621a      	str	r2, [r3, #32]
}
 800b348:	bf00      	nop
 800b34a:	371c      	adds	r7, #28
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr
 800b354:	fffeff8f 	.word	0xfffeff8f
 800b358:	40010000 	.word	0x40010000
 800b35c:	40010400 	.word	0x40010400
 800b360:	40014000 	.word	0x40014000
 800b364:	40014400 	.word	0x40014400
 800b368:	40014800 	.word	0x40014800

0800b36c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b087      	sub	sp, #28
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6a1b      	ldr	r3, [r3, #32]
 800b37a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6a1b      	ldr	r3, [r3, #32]
 800b386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	4b22      	ldr	r3, [pc, #136]	; (800b420 <TIM_OC6_SetConfig+0xb4>)
 800b398:	4013      	ands	r3, r2
 800b39a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	021b      	lsls	r3, r3, #8
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b3ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	051b      	lsls	r3, r3, #20
 800b3b6:	693a      	ldr	r2, [r7, #16]
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	4a19      	ldr	r2, [pc, #100]	; (800b424 <TIM_OC6_SetConfig+0xb8>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d00f      	beq.n	800b3e4 <TIM_OC6_SetConfig+0x78>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	4a18      	ldr	r2, [pc, #96]	; (800b428 <TIM_OC6_SetConfig+0xbc>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d00b      	beq.n	800b3e4 <TIM_OC6_SetConfig+0x78>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	4a17      	ldr	r2, [pc, #92]	; (800b42c <TIM_OC6_SetConfig+0xc0>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d007      	beq.n	800b3e4 <TIM_OC6_SetConfig+0x78>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	4a16      	ldr	r2, [pc, #88]	; (800b430 <TIM_OC6_SetConfig+0xc4>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d003      	beq.n	800b3e4 <TIM_OC6_SetConfig+0x78>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	4a15      	ldr	r2, [pc, #84]	; (800b434 <TIM_OC6_SetConfig+0xc8>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d109      	bne.n	800b3f8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b3ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	695b      	ldr	r3, [r3, #20]
 800b3f0:	029b      	lsls	r3, r3, #10
 800b3f2:	697a      	ldr	r2, [r7, #20]
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	697a      	ldr	r2, [r7, #20]
 800b3fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	685a      	ldr	r2, [r3, #4]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	693a      	ldr	r2, [r7, #16]
 800b410:	621a      	str	r2, [r3, #32]
}
 800b412:	bf00      	nop
 800b414:	371c      	adds	r7, #28
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr
 800b41e:	bf00      	nop
 800b420:	feff8fff 	.word	0xfeff8fff
 800b424:	40010000 	.word	0x40010000
 800b428:	40010400 	.word	0x40010400
 800b42c:	40014000 	.word	0x40014000
 800b430:	40014400 	.word	0x40014400
 800b434:	40014800 	.word	0x40014800

0800b438 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b438:	b480      	push	{r7}
 800b43a:	b087      	sub	sp, #28
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	f003 031f 	and.w	r3, r3, #31
 800b44a:	2201      	movs	r2, #1
 800b44c:	fa02 f303 	lsl.w	r3, r2, r3
 800b450:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	6a1a      	ldr	r2, [r3, #32]
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	43db      	mvns	r3, r3
 800b45a:	401a      	ands	r2, r3
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6a1a      	ldr	r2, [r3, #32]
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	f003 031f 	and.w	r3, r3, #31
 800b46a:	6879      	ldr	r1, [r7, #4]
 800b46c:	fa01 f303 	lsl.w	r3, r1, r3
 800b470:	431a      	orrs	r2, r3
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	621a      	str	r2, [r3, #32]
}
 800b476:	bf00      	nop
 800b478:	371c      	adds	r7, #28
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr
	...

0800b484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b484:	b480      	push	{r7}
 800b486:	b085      	sub	sp, #20
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b494:	2b01      	cmp	r3, #1
 800b496:	d101      	bne.n	800b49c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b498:	2302      	movs	r3, #2
 800b49a:	e077      	b.n	800b58c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2202      	movs	r2, #2
 800b4a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	689b      	ldr	r3, [r3, #8]
 800b4ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a35      	ldr	r2, [pc, #212]	; (800b598 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d004      	beq.n	800b4d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a34      	ldr	r2, [pc, #208]	; (800b59c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d108      	bne.n	800b4e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b4d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	68fa      	ldr	r2, [r7, #12]
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68fa      	ldr	r2, [r7, #12]
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a25      	ldr	r2, [pc, #148]	; (800b598 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d02c      	beq.n	800b560 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b50e:	d027      	beq.n	800b560 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a22      	ldr	r2, [pc, #136]	; (800b5a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d022      	beq.n	800b560 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a21      	ldr	r2, [pc, #132]	; (800b5a4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d01d      	beq.n	800b560 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a1f      	ldr	r2, [pc, #124]	; (800b5a8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d018      	beq.n	800b560 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4a1a      	ldr	r2, [pc, #104]	; (800b59c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d013      	beq.n	800b560 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4a1b      	ldr	r2, [pc, #108]	; (800b5ac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d00e      	beq.n	800b560 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4a1a      	ldr	r2, [pc, #104]	; (800b5b0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d009      	beq.n	800b560 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a18      	ldr	r2, [pc, #96]	; (800b5b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d004      	beq.n	800b560 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a17      	ldr	r2, [pc, #92]	; (800b5b8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d10c      	bne.n	800b57a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b566:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	689b      	ldr	r3, [r3, #8]
 800b56c:	68ba      	ldr	r2, [r7, #8]
 800b56e:	4313      	orrs	r3, r2
 800b570:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	68ba      	ldr	r2, [r7, #8]
 800b578:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2201      	movs	r2, #1
 800b57e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b58a:	2300      	movs	r3, #0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3714      	adds	r7, #20
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr
 800b598:	40010000 	.word	0x40010000
 800b59c:	40010400 	.word	0x40010400
 800b5a0:	40000400 	.word	0x40000400
 800b5a4:	40000800 	.word	0x40000800
 800b5a8:	40000c00 	.word	0x40000c00
 800b5ac:	40001800 	.word	0x40001800
 800b5b0:	40014000 	.word	0x40014000
 800b5b4:	4000e000 	.word	0x4000e000
 800b5b8:	4000e400 	.word	0x4000e400

0800b5bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b085      	sub	sp, #20
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d101      	bne.n	800b5d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b5d4:	2302      	movs	r3, #2
 800b5d6:	e087      	b.n	800b6e8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2201      	movs	r2, #1
 800b5dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	4313      	orrs	r3, r2
 800b608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4313      	orrs	r3, r2
 800b616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	4313      	orrs	r3, r2
 800b624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	695b      	ldr	r3, [r3, #20]
 800b630:	4313      	orrs	r3, r2
 800b632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b63e:	4313      	orrs	r3, r2
 800b640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	699b      	ldr	r3, [r3, #24]
 800b64c:	041b      	lsls	r3, r3, #16
 800b64e:	4313      	orrs	r3, r2
 800b650:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4a27      	ldr	r2, [pc, #156]	; (800b6f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d004      	beq.n	800b666 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a25      	ldr	r2, [pc, #148]	; (800b6f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d106      	bne.n	800b674 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	69db      	ldr	r3, [r3, #28]
 800b670:	4313      	orrs	r3, r2
 800b672:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a1e      	ldr	r2, [pc, #120]	; (800b6f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d004      	beq.n	800b688 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a1d      	ldr	r2, [pc, #116]	; (800b6f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d126      	bne.n	800b6d6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b692:	051b      	lsls	r3, r3, #20
 800b694:	4313      	orrs	r3, r2
 800b696:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	6a1b      	ldr	r3, [r3, #32]
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a0e      	ldr	r2, [pc, #56]	; (800b6f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d004      	beq.n	800b6c8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a0d      	ldr	r2, [pc, #52]	; (800b6f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d106      	bne.n	800b6d6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68fa      	ldr	r2, [r7, #12]
 800b6dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b6e6:	2300      	movs	r3, #0
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3714      	adds	r7, #20
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr
 800b6f4:	40010000 	.word	0x40010000
 800b6f8:	40010400 	.word	0x40010400

0800b6fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b704:	bf00      	nop
 800b706:	370c      	adds	r7, #12
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b718:	bf00      	nop
 800b71a:	370c      	adds	r7, #12
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr

0800b724 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b72c:	bf00      	nop
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d101      	bne.n	800b74a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	e042      	b.n	800b7d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b750:	2b00      	cmp	r3, #0
 800b752:	d106      	bne.n	800b762 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2200      	movs	r2, #0
 800b758:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f7f8 fd21 	bl	80041a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2224      	movs	r2, #36	; 0x24
 800b766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f022 0201 	bic.w	r2, r2, #1
 800b778:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fcdc 	bl	800c138 <UART_SetConfig>
 800b780:	4603      	mov	r3, r0
 800b782:	2b01      	cmp	r3, #1
 800b784:	d101      	bne.n	800b78a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e022      	b.n	800b7d0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d002      	beq.n	800b798 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f001 fb3c 	bl	800ce10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	685a      	ldr	r2, [r3, #4]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b7a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	689a      	ldr	r2, [r3, #8]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b7b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f042 0201 	orr.w	r2, r2, #1
 800b7c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f001 fbc3 	bl	800cf54 <UART_CheckIdleState>
 800b7ce:	4603      	mov	r3, r0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b08a      	sub	sp, #40	; 0x28
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	4613      	mov	r3, r2
 800b7e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7ec:	2b20      	cmp	r3, #32
 800b7ee:	d17a      	bne.n	800b8e6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d002      	beq.n	800b7fc <HAL_UART_Transmit_DMA+0x24>
 800b7f6:	88fb      	ldrh	r3, [r7, #6]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d101      	bne.n	800b800 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	e073      	b.n	800b8e8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b806:	2b01      	cmp	r3, #1
 800b808:	d101      	bne.n	800b80e <HAL_UART_Transmit_DMA+0x36>
 800b80a:	2302      	movs	r3, #2
 800b80c:	e06c      	b.n	800b8e8 <HAL_UART_Transmit_DMA+0x110>
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2201      	movs	r2, #1
 800b812:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	68ba      	ldr	r2, [r7, #8]
 800b81a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	88fa      	ldrh	r2, [r7, #6]
 800b820:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	88fa      	ldrh	r2, [r7, #6]
 800b828:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2200      	movs	r2, #0
 800b830:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2221      	movs	r2, #33	; 0x21
 800b838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b840:	2b00      	cmp	r3, #0
 800b842:	d02c      	beq.n	800b89e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b848:	4a29      	ldr	r2, [pc, #164]	; (800b8f0 <HAL_UART_Transmit_DMA+0x118>)
 800b84a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b850:	4a28      	ldr	r2, [pc, #160]	; (800b8f4 <HAL_UART_Transmit_DMA+0x11c>)
 800b852:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b858:	4a27      	ldr	r2, [pc, #156]	; (800b8f8 <HAL_UART_Transmit_DMA+0x120>)
 800b85a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b860:	2200      	movs	r2, #0
 800b862:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b86c:	4619      	mov	r1, r3
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	3328      	adds	r3, #40	; 0x28
 800b874:	461a      	mov	r2, r3
 800b876:	88fb      	ldrh	r3, [r7, #6]
 800b878:	f7f9 fd02 	bl	8005280 <HAL_DMA_Start_IT>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00d      	beq.n	800b89e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2210      	movs	r2, #16
 800b886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2220      	movs	r2, #32
 800b896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800b89a:	2301      	movs	r3, #1
 800b89c:	e024      	b.n	800b8e8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	2240      	movs	r2, #64	; 0x40
 800b8a4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	3308      	adds	r3, #8
 800b8b4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	e853 3f00 	ldrex	r3, [r3]
 800b8bc:	613b      	str	r3, [r7, #16]
   return(result);
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8c4:	627b      	str	r3, [r7, #36]	; 0x24
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	3308      	adds	r3, #8
 800b8cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ce:	623a      	str	r2, [r7, #32]
 800b8d0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d2:	69f9      	ldr	r1, [r7, #28]
 800b8d4:	6a3a      	ldr	r2, [r7, #32]
 800b8d6:	e841 2300 	strex	r3, r2, [r1]
 800b8da:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8dc:	69bb      	ldr	r3, [r7, #24]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1e5      	bne.n	800b8ae <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	e000      	b.n	800b8e8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800b8e6:	2302      	movs	r3, #2
  }
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3728      	adds	r7, #40	; 0x28
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	0800d41d 	.word	0x0800d41d
 800b8f4:	0800d4b3 	.word	0x0800d4b3
 800b8f8:	0800d629 	.word	0x0800d629

0800b8fc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b08a      	sub	sp, #40	; 0x28
 800b900:	af00      	add	r7, sp, #0
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	4613      	mov	r3, r2
 800b908:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b910:	2b20      	cmp	r3, #32
 800b912:	d142      	bne.n	800b99a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d002      	beq.n	800b920 <HAL_UART_Receive_DMA+0x24>
 800b91a:	88fb      	ldrh	r3, [r7, #6]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d101      	bne.n	800b924 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b920:	2301      	movs	r3, #1
 800b922:	e03b      	b.n	800b99c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d101      	bne.n	800b932 <HAL_UART_Receive_DMA+0x36>
 800b92e:	2302      	movs	r3, #2
 800b930:	e034      	b.n	800b99c <HAL_UART_Receive_DMA+0xa0>
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2201      	movs	r2, #1
 800b936:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2200      	movs	r2, #0
 800b93e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4a17      	ldr	r2, [pc, #92]	; (800b9a4 <HAL_UART_Receive_DMA+0xa8>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d01f      	beq.n	800b98a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b954:	2b00      	cmp	r3, #0
 800b956:	d018      	beq.n	800b98a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	e853 3f00 	ldrex	r3, [r3]
 800b964:	613b      	str	r3, [r7, #16]
   return(result);
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b96c:	627b      	str	r3, [r7, #36]	; 0x24
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	461a      	mov	r2, r3
 800b974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b976:	623b      	str	r3, [r7, #32]
 800b978:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b97a:	69f9      	ldr	r1, [r7, #28]
 800b97c:	6a3a      	ldr	r2, [r7, #32]
 800b97e:	e841 2300 	strex	r3, r2, [r1]
 800b982:	61bb      	str	r3, [r7, #24]
   return(result);
 800b984:	69bb      	ldr	r3, [r7, #24]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d1e6      	bne.n	800b958 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b98a:	88fb      	ldrh	r3, [r7, #6]
 800b98c:	461a      	mov	r2, r3
 800b98e:	68b9      	ldr	r1, [r7, #8]
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f001 fbf3 	bl	800d17c <UART_Start_Receive_DMA>
 800b996:	4603      	mov	r3, r0
 800b998:	e000      	b.n	800b99c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b99a:	2302      	movs	r3, #2
  }
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3728      	adds	r7, #40	; 0x28
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}
 800b9a4:	58000c00 	.word	0x58000c00

0800b9a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b0ba      	sub	sp, #232	; 0xe8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	69db      	ldr	r3, [r3, #28]
 800b9b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	689b      	ldr	r3, [r3, #8]
 800b9ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b9ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b9d2:	f640 030f 	movw	r3, #2063	; 0x80f
 800b9d6:	4013      	ands	r3, r2
 800b9d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b9dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d11b      	bne.n	800ba1c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b9e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9e8:	f003 0320 	and.w	r3, r3, #32
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d015      	beq.n	800ba1c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b9f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9f4:	f003 0320 	and.w	r3, r3, #32
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d105      	bne.n	800ba08 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b9fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d009      	beq.n	800ba1c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f000 835a 	beq.w	800c0c6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	4798      	blx	r3
      }
      return;
 800ba1a:	e354      	b.n	800c0c6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ba1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	f000 811f 	beq.w	800bc64 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ba26:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ba2a:	4b8b      	ldr	r3, [pc, #556]	; (800bc58 <HAL_UART_IRQHandler+0x2b0>)
 800ba2c:	4013      	ands	r3, r2
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d106      	bne.n	800ba40 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ba32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ba36:	4b89      	ldr	r3, [pc, #548]	; (800bc5c <HAL_UART_IRQHandler+0x2b4>)
 800ba38:	4013      	ands	r3, r2
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	f000 8112 	beq.w	800bc64 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ba40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba44:	f003 0301 	and.w	r3, r3, #1
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d011      	beq.n	800ba70 <HAL_UART_IRQHandler+0xc8>
 800ba4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00b      	beq.n	800ba70 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba66:	f043 0201 	orr.w	r2, r3, #1
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba74:	f003 0302 	and.w	r3, r3, #2
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d011      	beq.n	800baa0 <HAL_UART_IRQHandler+0xf8>
 800ba7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba80:	f003 0301 	and.w	r3, r3, #1
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d00b      	beq.n	800baa0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	2202      	movs	r2, #2
 800ba8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba96:	f043 0204 	orr.w	r2, r3, #4
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800baa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baa4:	f003 0304 	and.w	r3, r3, #4
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d011      	beq.n	800bad0 <HAL_UART_IRQHandler+0x128>
 800baac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bab0:	f003 0301 	and.w	r3, r3, #1
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00b      	beq.n	800bad0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2204      	movs	r2, #4
 800babe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bac6:	f043 0202 	orr.w	r2, r3, #2
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bad4:	f003 0308 	and.w	r3, r3, #8
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d017      	beq.n	800bb0c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800badc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bae0:	f003 0320 	and.w	r3, r3, #32
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d105      	bne.n	800baf4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bae8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800baec:	4b5a      	ldr	r3, [pc, #360]	; (800bc58 <HAL_UART_IRQHandler+0x2b0>)
 800baee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00b      	beq.n	800bb0c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2208      	movs	r2, #8
 800bafa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb02:	f043 0208 	orr.w	r2, r3, #8
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bb0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d012      	beq.n	800bb3e <HAL_UART_IRQHandler+0x196>
 800bb18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d00c      	beq.n	800bb3e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb34:	f043 0220 	orr.w	r2, r3, #32
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	f000 82c0 	beq.w	800c0ca <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb4e:	f003 0320 	and.w	r3, r3, #32
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d013      	beq.n	800bb7e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bb56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb5a:	f003 0320 	and.w	r3, r3, #32
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d105      	bne.n	800bb6e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bb62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d007      	beq.n	800bb7e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d003      	beq.n	800bb7e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	689b      	ldr	r3, [r3, #8]
 800bb8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb92:	2b40      	cmp	r3, #64	; 0x40
 800bb94:	d005      	beq.n	800bba2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bb96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d04f      	beq.n	800bc42 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f001 fbd4 	bl	800d350 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbb2:	2b40      	cmp	r3, #64	; 0x40
 800bbb4:	d141      	bne.n	800bc3a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	3308      	adds	r3, #8
 800bbbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bbc4:	e853 3f00 	ldrex	r3, [r3]
 800bbc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bbcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bbd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	3308      	adds	r3, #8
 800bbde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bbe2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bbe6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bbee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bbf2:	e841 2300 	strex	r3, r2, [r1]
 800bbf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bbfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d1d9      	bne.n	800bbb6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d013      	beq.n	800bc32 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc0e:	4a14      	ldr	r2, [pc, #80]	; (800bc60 <HAL_UART_IRQHandler+0x2b8>)
 800bc10:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7fa f8ba 	bl	8005d90 <HAL_DMA_Abort_IT>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d017      	beq.n	800bc52 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bc2c:	4610      	mov	r0, r2
 800bc2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc30:	e00f      	b.n	800bc52 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 fa6a 	bl	800c10c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc38:	e00b      	b.n	800bc52 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 fa66 	bl	800c10c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc40:	e007      	b.n	800bc52 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 fa62 	bl	800c10c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bc50:	e23b      	b.n	800c0ca <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc52:	bf00      	nop
    return;
 800bc54:	e239      	b.n	800c0ca <HAL_UART_IRQHandler+0x722>
 800bc56:	bf00      	nop
 800bc58:	10000001 	.word	0x10000001
 800bc5c:	04000120 	.word	0x04000120
 800bc60:	0800d6a9 	.word	0x0800d6a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	f040 81ce 	bne.w	800c00a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bc6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc72:	f003 0310 	and.w	r3, r3, #16
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f000 81c7 	beq.w	800c00a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bc7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc80:	f003 0310 	and.w	r3, r3, #16
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	f000 81c0 	beq.w	800c00a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2210      	movs	r2, #16
 800bc90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	689b      	ldr	r3, [r3, #8]
 800bc98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc9c:	2b40      	cmp	r3, #64	; 0x40
 800bc9e:	f040 813b 	bne.w	800bf18 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4a8b      	ldr	r2, [pc, #556]	; (800bed8 <HAL_UART_IRQHandler+0x530>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d059      	beq.n	800bd62 <HAL_UART_IRQHandler+0x3ba>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4a89      	ldr	r2, [pc, #548]	; (800bedc <HAL_UART_IRQHandler+0x534>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d053      	beq.n	800bd62 <HAL_UART_IRQHandler+0x3ba>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a87      	ldr	r2, [pc, #540]	; (800bee0 <HAL_UART_IRQHandler+0x538>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d04d      	beq.n	800bd62 <HAL_UART_IRQHandler+0x3ba>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4a85      	ldr	r2, [pc, #532]	; (800bee4 <HAL_UART_IRQHandler+0x53c>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d047      	beq.n	800bd62 <HAL_UART_IRQHandler+0x3ba>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a83      	ldr	r2, [pc, #524]	; (800bee8 <HAL_UART_IRQHandler+0x540>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d041      	beq.n	800bd62 <HAL_UART_IRQHandler+0x3ba>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a81      	ldr	r2, [pc, #516]	; (800beec <HAL_UART_IRQHandler+0x544>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d03b      	beq.n	800bd62 <HAL_UART_IRQHandler+0x3ba>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a7f      	ldr	r2, [pc, #508]	; (800bef0 <HAL_UART_IRQHandler+0x548>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d035      	beq.n	800bd62 <HAL_UART_IRQHandler+0x3ba>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a7d      	ldr	r2, [pc, #500]	; (800bef4 <HAL_UART_IRQHandler+0x54c>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d02f      	beq.n	800bd62 <HAL_UART_IRQHandler+0x3ba>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a7b      	ldr	r2, [pc, #492]	; (800bef8 <HAL_UART_IRQHandler+0x550>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d029      	beq.n	800bd62 <HAL_UART_IRQHandler+0x3ba>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a79      	ldr	r2, [pc, #484]	; (800befc <HAL_UART_IRQHandler+0x554>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d023      	beq.n	800bd62 <HAL_UART_IRQHandler+0x3ba>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a77      	ldr	r2, [pc, #476]	; (800bf00 <HAL_UART_IRQHandler+0x558>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d01d      	beq.n	800bd62 <HAL_UART_IRQHandler+0x3ba>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4a75      	ldr	r2, [pc, #468]	; (800bf04 <HAL_UART_IRQHandler+0x55c>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d017      	beq.n	800bd62 <HAL_UART_IRQHandler+0x3ba>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a73      	ldr	r2, [pc, #460]	; (800bf08 <HAL_UART_IRQHandler+0x560>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d011      	beq.n	800bd62 <HAL_UART_IRQHandler+0x3ba>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4a71      	ldr	r2, [pc, #452]	; (800bf0c <HAL_UART_IRQHandler+0x564>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d00b      	beq.n	800bd62 <HAL_UART_IRQHandler+0x3ba>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4a6f      	ldr	r2, [pc, #444]	; (800bf10 <HAL_UART_IRQHandler+0x568>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d005      	beq.n	800bd62 <HAL_UART_IRQHandler+0x3ba>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a6d      	ldr	r2, [pc, #436]	; (800bf14 <HAL_UART_IRQHandler+0x56c>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d105      	bne.n	800bd6e <HAL_UART_IRQHandler+0x3c6>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	e004      	b.n	800bd78 <HAL_UART_IRQHandler+0x3d0>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bd7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	f000 81a4 	beq.w	800c0ce <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bd8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd90:	429a      	cmp	r2, r3
 800bd92:	f080 819c 	bcs.w	800c0ce <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bda4:	69db      	ldr	r3, [r3, #28]
 800bda6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdaa:	f000 8086 	beq.w	800beba <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bdba:	e853 3f00 	ldrex	r3, [r3]
 800bdbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bdc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bdc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bdd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bddc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bde4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bde8:	e841 2300 	strex	r3, r2, [r1]
 800bdec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bdf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d1da      	bne.n	800bdae <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	3308      	adds	r3, #8
 800bdfe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be02:	e853 3f00 	ldrex	r3, [r3]
 800be06:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800be08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be0a:	f023 0301 	bic.w	r3, r3, #1
 800be0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	3308      	adds	r3, #8
 800be18:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800be1c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800be20:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be22:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800be24:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800be28:	e841 2300 	strex	r3, r2, [r1]
 800be2c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800be2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be30:	2b00      	cmp	r3, #0
 800be32:	d1e1      	bne.n	800bdf8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	3308      	adds	r3, #8
 800be3a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be3e:	e853 3f00 	ldrex	r3, [r3]
 800be42:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800be44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	3308      	adds	r3, #8
 800be54:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800be58:	66fa      	str	r2, [r7, #108]	; 0x6c
 800be5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be5c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800be5e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800be60:	e841 2300 	strex	r3, r2, [r1]
 800be64:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800be66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d1e3      	bne.n	800be34 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2220      	movs	r2, #32
 800be70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2200      	movs	r2, #0
 800be78:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be82:	e853 3f00 	ldrex	r3, [r3]
 800be86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800be88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be8a:	f023 0310 	bic.w	r3, r3, #16
 800be8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	461a      	mov	r2, r3
 800be98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be9c:	65bb      	str	r3, [r7, #88]	; 0x58
 800be9e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bea2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bea4:	e841 2300 	strex	r3, r2, [r1]
 800bea8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800beaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beac:	2b00      	cmp	r3, #0
 800beae:	d1e4      	bne.n	800be7a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beb4:	4618      	mov	r0, r3
 800beb6:	f7f9 fc4d 	bl	8005754 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	1ad3      	subs	r3, r2, r3
 800beca:	b29b      	uxth	r3, r3
 800becc:	4619      	mov	r1, r3
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 f926 	bl	800c120 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bed4:	e0fb      	b.n	800c0ce <HAL_UART_IRQHandler+0x726>
 800bed6:	bf00      	nop
 800bed8:	40020010 	.word	0x40020010
 800bedc:	40020028 	.word	0x40020028
 800bee0:	40020040 	.word	0x40020040
 800bee4:	40020058 	.word	0x40020058
 800bee8:	40020070 	.word	0x40020070
 800beec:	40020088 	.word	0x40020088
 800bef0:	400200a0 	.word	0x400200a0
 800bef4:	400200b8 	.word	0x400200b8
 800bef8:	40020410 	.word	0x40020410
 800befc:	40020428 	.word	0x40020428
 800bf00:	40020440 	.word	0x40020440
 800bf04:	40020458 	.word	0x40020458
 800bf08:	40020470 	.word	0x40020470
 800bf0c:	40020488 	.word	0x40020488
 800bf10:	400204a0 	.word	0x400204a0
 800bf14:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	1ad3      	subs	r3, r2, r3
 800bf28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f000 80cc 	beq.w	800c0d2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800bf3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	f000 80c7 	beq.w	800c0d2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4c:	e853 3f00 	ldrex	r3, [r3]
 800bf50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	461a      	mov	r2, r3
 800bf62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bf66:	647b      	str	r3, [r7, #68]	; 0x44
 800bf68:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf6e:	e841 2300 	strex	r3, r2, [r1]
 800bf72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d1e4      	bne.n	800bf44 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	3308      	adds	r3, #8
 800bf80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf84:	e853 3f00 	ldrex	r3, [r3]
 800bf88:	623b      	str	r3, [r7, #32]
   return(result);
 800bf8a:	6a3a      	ldr	r2, [r7, #32]
 800bf8c:	4b54      	ldr	r3, [pc, #336]	; (800c0e0 <HAL_UART_IRQHandler+0x738>)
 800bf8e:	4013      	ands	r3, r2
 800bf90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	3308      	adds	r3, #8
 800bf9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bf9e:	633a      	str	r2, [r7, #48]	; 0x30
 800bfa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfa6:	e841 2300 	strex	r3, r2, [r1]
 800bfaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d1e3      	bne.n	800bf7a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2220      	movs	r2, #32
 800bfb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	e853 3f00 	ldrex	r3, [r3]
 800bfd2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f023 0310 	bic.w	r3, r3, #16
 800bfda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bfe8:	61fb      	str	r3, [r7, #28]
 800bfea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfec:	69b9      	ldr	r1, [r7, #24]
 800bfee:	69fa      	ldr	r2, [r7, #28]
 800bff0:	e841 2300 	strex	r3, r2, [r1]
 800bff4:	617b      	str	r3, [r7, #20]
   return(result);
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1e4      	bne.n	800bfc6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bffc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c000:	4619      	mov	r1, r3
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 f88c 	bl	800c120 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c008:	e063      	b.n	800c0d2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c00a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c00e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00e      	beq.n	800c034 <HAL_UART_IRQHandler+0x68c>
 800c016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c01a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d008      	beq.n	800c034 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c02a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f001 fb7c 	bl	800d72a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c032:	e051      	b.n	800c0d8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d014      	beq.n	800c06a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d105      	bne.n	800c058 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c04c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c054:	2b00      	cmp	r3, #0
 800c056:	d008      	beq.n	800c06a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d03a      	beq.n	800c0d6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	4798      	blx	r3
    }
    return;
 800c068:	e035      	b.n	800c0d6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c06a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c06e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c072:	2b00      	cmp	r3, #0
 800c074:	d009      	beq.n	800c08a <HAL_UART_IRQHandler+0x6e2>
 800c076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c07a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d003      	beq.n	800c08a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f001 fb26 	bl	800d6d4 <UART_EndTransmit_IT>
    return;
 800c088:	e026      	b.n	800c0d8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c08a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c08e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c092:	2b00      	cmp	r3, #0
 800c094:	d009      	beq.n	800c0aa <HAL_UART_IRQHandler+0x702>
 800c096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c09a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d003      	beq.n	800c0aa <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f001 fb55 	bl	800d752 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c0a8:	e016      	b.n	800c0d8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c0aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d010      	beq.n	800c0d8 <HAL_UART_IRQHandler+0x730>
 800c0b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	da0c      	bge.n	800c0d8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f001 fb3d 	bl	800d73e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c0c4:	e008      	b.n	800c0d8 <HAL_UART_IRQHandler+0x730>
      return;
 800c0c6:	bf00      	nop
 800c0c8:	e006      	b.n	800c0d8 <HAL_UART_IRQHandler+0x730>
    return;
 800c0ca:	bf00      	nop
 800c0cc:	e004      	b.n	800c0d8 <HAL_UART_IRQHandler+0x730>
      return;
 800c0ce:	bf00      	nop
 800c0d0:	e002      	b.n	800c0d8 <HAL_UART_IRQHandler+0x730>
      return;
 800c0d2:	bf00      	nop
 800c0d4:	e000      	b.n	800c0d8 <HAL_UART_IRQHandler+0x730>
    return;
 800c0d6:	bf00      	nop
  }
}
 800c0d8:	37e8      	adds	r7, #232	; 0xe8
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	effffffe 	.word	0xeffffffe

0800c0e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c0ec:	bf00      	nop
 800c0ee:	370c      	adds	r7, #12
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b083      	sub	sp, #12
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c100:	bf00      	nop
 800c102:	370c      	adds	r7, #12
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr

0800c10c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c114:	bf00      	nop
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr

0800c120 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	460b      	mov	r3, r1
 800c12a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c12c:	bf00      	nop
 800c12e:	370c      	adds	r7, #12
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr

0800c138 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c13c:	b092      	sub	sp, #72	; 0x48
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c142:	2300      	movs	r3, #0
 800c144:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	689a      	ldr	r2, [r3, #8]
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	691b      	ldr	r3, [r3, #16]
 800c150:	431a      	orrs	r2, r3
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	695b      	ldr	r3, [r3, #20]
 800c156:	431a      	orrs	r2, r3
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	69db      	ldr	r3, [r3, #28]
 800c15c:	4313      	orrs	r3, r2
 800c15e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	4bbe      	ldr	r3, [pc, #760]	; (800c460 <UART_SetConfig+0x328>)
 800c168:	4013      	ands	r3, r2
 800c16a:	697a      	ldr	r2, [r7, #20]
 800c16c:	6812      	ldr	r2, [r2, #0]
 800c16e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c170:	430b      	orrs	r3, r1
 800c172:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	68da      	ldr	r2, [r3, #12]
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	430a      	orrs	r2, r1
 800c188:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	699b      	ldr	r3, [r3, #24]
 800c18e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4ab3      	ldr	r2, [pc, #716]	; (800c464 <UART_SetConfig+0x32c>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d004      	beq.n	800c1a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	6a1b      	ldr	r3, [r3, #32]
 800c19e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	689a      	ldr	r2, [r3, #8]
 800c1aa:	4baf      	ldr	r3, [pc, #700]	; (800c468 <UART_SetConfig+0x330>)
 800c1ac:	4013      	ands	r3, r2
 800c1ae:	697a      	ldr	r2, [r7, #20]
 800c1b0:	6812      	ldr	r2, [r2, #0]
 800c1b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c1b4:	430b      	orrs	r3, r1
 800c1b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1be:	f023 010f 	bic.w	r1, r3, #15
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	430a      	orrs	r2, r1
 800c1cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4aa6      	ldr	r2, [pc, #664]	; (800c46c <UART_SetConfig+0x334>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d177      	bne.n	800c2c8 <UART_SetConfig+0x190>
 800c1d8:	4ba5      	ldr	r3, [pc, #660]	; (800c470 <UART_SetConfig+0x338>)
 800c1da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c1e0:	2b28      	cmp	r3, #40	; 0x28
 800c1e2:	d86d      	bhi.n	800c2c0 <UART_SetConfig+0x188>
 800c1e4:	a201      	add	r2, pc, #4	; (adr r2, 800c1ec <UART_SetConfig+0xb4>)
 800c1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ea:	bf00      	nop
 800c1ec:	0800c291 	.word	0x0800c291
 800c1f0:	0800c2c1 	.word	0x0800c2c1
 800c1f4:	0800c2c1 	.word	0x0800c2c1
 800c1f8:	0800c2c1 	.word	0x0800c2c1
 800c1fc:	0800c2c1 	.word	0x0800c2c1
 800c200:	0800c2c1 	.word	0x0800c2c1
 800c204:	0800c2c1 	.word	0x0800c2c1
 800c208:	0800c2c1 	.word	0x0800c2c1
 800c20c:	0800c299 	.word	0x0800c299
 800c210:	0800c2c1 	.word	0x0800c2c1
 800c214:	0800c2c1 	.word	0x0800c2c1
 800c218:	0800c2c1 	.word	0x0800c2c1
 800c21c:	0800c2c1 	.word	0x0800c2c1
 800c220:	0800c2c1 	.word	0x0800c2c1
 800c224:	0800c2c1 	.word	0x0800c2c1
 800c228:	0800c2c1 	.word	0x0800c2c1
 800c22c:	0800c2a1 	.word	0x0800c2a1
 800c230:	0800c2c1 	.word	0x0800c2c1
 800c234:	0800c2c1 	.word	0x0800c2c1
 800c238:	0800c2c1 	.word	0x0800c2c1
 800c23c:	0800c2c1 	.word	0x0800c2c1
 800c240:	0800c2c1 	.word	0x0800c2c1
 800c244:	0800c2c1 	.word	0x0800c2c1
 800c248:	0800c2c1 	.word	0x0800c2c1
 800c24c:	0800c2a9 	.word	0x0800c2a9
 800c250:	0800c2c1 	.word	0x0800c2c1
 800c254:	0800c2c1 	.word	0x0800c2c1
 800c258:	0800c2c1 	.word	0x0800c2c1
 800c25c:	0800c2c1 	.word	0x0800c2c1
 800c260:	0800c2c1 	.word	0x0800c2c1
 800c264:	0800c2c1 	.word	0x0800c2c1
 800c268:	0800c2c1 	.word	0x0800c2c1
 800c26c:	0800c2b1 	.word	0x0800c2b1
 800c270:	0800c2c1 	.word	0x0800c2c1
 800c274:	0800c2c1 	.word	0x0800c2c1
 800c278:	0800c2c1 	.word	0x0800c2c1
 800c27c:	0800c2c1 	.word	0x0800c2c1
 800c280:	0800c2c1 	.word	0x0800c2c1
 800c284:	0800c2c1 	.word	0x0800c2c1
 800c288:	0800c2c1 	.word	0x0800c2c1
 800c28c:	0800c2b9 	.word	0x0800c2b9
 800c290:	2301      	movs	r3, #1
 800c292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c296:	e326      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c298:	2304      	movs	r3, #4
 800c29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c29e:	e322      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c2a0:	2308      	movs	r3, #8
 800c2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2a6:	e31e      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c2a8:	2310      	movs	r3, #16
 800c2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ae:	e31a      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c2b0:	2320      	movs	r3, #32
 800c2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2b6:	e316      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c2b8:	2340      	movs	r3, #64	; 0x40
 800c2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2be:	e312      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c2c0:	2380      	movs	r3, #128	; 0x80
 800c2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2c6:	e30e      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a69      	ldr	r2, [pc, #420]	; (800c474 <UART_SetConfig+0x33c>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d130      	bne.n	800c334 <UART_SetConfig+0x1fc>
 800c2d2:	4b67      	ldr	r3, [pc, #412]	; (800c470 <UART_SetConfig+0x338>)
 800c2d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2d6:	f003 0307 	and.w	r3, r3, #7
 800c2da:	2b05      	cmp	r3, #5
 800c2dc:	d826      	bhi.n	800c32c <UART_SetConfig+0x1f4>
 800c2de:	a201      	add	r2, pc, #4	; (adr r2, 800c2e4 <UART_SetConfig+0x1ac>)
 800c2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e4:	0800c2fd 	.word	0x0800c2fd
 800c2e8:	0800c305 	.word	0x0800c305
 800c2ec:	0800c30d 	.word	0x0800c30d
 800c2f0:	0800c315 	.word	0x0800c315
 800c2f4:	0800c31d 	.word	0x0800c31d
 800c2f8:	0800c325 	.word	0x0800c325
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c302:	e2f0      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c304:	2304      	movs	r3, #4
 800c306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c30a:	e2ec      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c30c:	2308      	movs	r3, #8
 800c30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c312:	e2e8      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c314:	2310      	movs	r3, #16
 800c316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c31a:	e2e4      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c31c:	2320      	movs	r3, #32
 800c31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c322:	e2e0      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c324:	2340      	movs	r3, #64	; 0x40
 800c326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c32a:	e2dc      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c32c:	2380      	movs	r3, #128	; 0x80
 800c32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c332:	e2d8      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4a4f      	ldr	r2, [pc, #316]	; (800c478 <UART_SetConfig+0x340>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d130      	bne.n	800c3a0 <UART_SetConfig+0x268>
 800c33e:	4b4c      	ldr	r3, [pc, #304]	; (800c470 <UART_SetConfig+0x338>)
 800c340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c342:	f003 0307 	and.w	r3, r3, #7
 800c346:	2b05      	cmp	r3, #5
 800c348:	d826      	bhi.n	800c398 <UART_SetConfig+0x260>
 800c34a:	a201      	add	r2, pc, #4	; (adr r2, 800c350 <UART_SetConfig+0x218>)
 800c34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c350:	0800c369 	.word	0x0800c369
 800c354:	0800c371 	.word	0x0800c371
 800c358:	0800c379 	.word	0x0800c379
 800c35c:	0800c381 	.word	0x0800c381
 800c360:	0800c389 	.word	0x0800c389
 800c364:	0800c391 	.word	0x0800c391
 800c368:	2300      	movs	r3, #0
 800c36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c36e:	e2ba      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c370:	2304      	movs	r3, #4
 800c372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c376:	e2b6      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c378:	2308      	movs	r3, #8
 800c37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c37e:	e2b2      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c380:	2310      	movs	r3, #16
 800c382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c386:	e2ae      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c388:	2320      	movs	r3, #32
 800c38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c38e:	e2aa      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c390:	2340      	movs	r3, #64	; 0x40
 800c392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c396:	e2a6      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c398:	2380      	movs	r3, #128	; 0x80
 800c39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c39e:	e2a2      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a35      	ldr	r2, [pc, #212]	; (800c47c <UART_SetConfig+0x344>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d130      	bne.n	800c40c <UART_SetConfig+0x2d4>
 800c3aa:	4b31      	ldr	r3, [pc, #196]	; (800c470 <UART_SetConfig+0x338>)
 800c3ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3ae:	f003 0307 	and.w	r3, r3, #7
 800c3b2:	2b05      	cmp	r3, #5
 800c3b4:	d826      	bhi.n	800c404 <UART_SetConfig+0x2cc>
 800c3b6:	a201      	add	r2, pc, #4	; (adr r2, 800c3bc <UART_SetConfig+0x284>)
 800c3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3bc:	0800c3d5 	.word	0x0800c3d5
 800c3c0:	0800c3dd 	.word	0x0800c3dd
 800c3c4:	0800c3e5 	.word	0x0800c3e5
 800c3c8:	0800c3ed 	.word	0x0800c3ed
 800c3cc:	0800c3f5 	.word	0x0800c3f5
 800c3d0:	0800c3fd 	.word	0x0800c3fd
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3da:	e284      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c3dc:	2304      	movs	r3, #4
 800c3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3e2:	e280      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c3e4:	2308      	movs	r3, #8
 800c3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ea:	e27c      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c3ec:	2310      	movs	r3, #16
 800c3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3f2:	e278      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c3f4:	2320      	movs	r3, #32
 800c3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3fa:	e274      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c3fc:	2340      	movs	r3, #64	; 0x40
 800c3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c402:	e270      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c404:	2380      	movs	r3, #128	; 0x80
 800c406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c40a:	e26c      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a1b      	ldr	r2, [pc, #108]	; (800c480 <UART_SetConfig+0x348>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d142      	bne.n	800c49c <UART_SetConfig+0x364>
 800c416:	4b16      	ldr	r3, [pc, #88]	; (800c470 <UART_SetConfig+0x338>)
 800c418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c41a:	f003 0307 	and.w	r3, r3, #7
 800c41e:	2b05      	cmp	r3, #5
 800c420:	d838      	bhi.n	800c494 <UART_SetConfig+0x35c>
 800c422:	a201      	add	r2, pc, #4	; (adr r2, 800c428 <UART_SetConfig+0x2f0>)
 800c424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c428:	0800c441 	.word	0x0800c441
 800c42c:	0800c449 	.word	0x0800c449
 800c430:	0800c451 	.word	0x0800c451
 800c434:	0800c459 	.word	0x0800c459
 800c438:	0800c485 	.word	0x0800c485
 800c43c:	0800c48d 	.word	0x0800c48d
 800c440:	2300      	movs	r3, #0
 800c442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c446:	e24e      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c448:	2304      	movs	r3, #4
 800c44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c44e:	e24a      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c450:	2308      	movs	r3, #8
 800c452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c456:	e246      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c458:	2310      	movs	r3, #16
 800c45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c45e:	e242      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c460:	cfff69f3 	.word	0xcfff69f3
 800c464:	58000c00 	.word	0x58000c00
 800c468:	11fff4ff 	.word	0x11fff4ff
 800c46c:	40011000 	.word	0x40011000
 800c470:	58024400 	.word	0x58024400
 800c474:	40004400 	.word	0x40004400
 800c478:	40004800 	.word	0x40004800
 800c47c:	40004c00 	.word	0x40004c00
 800c480:	40005000 	.word	0x40005000
 800c484:	2320      	movs	r3, #32
 800c486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c48a:	e22c      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c48c:	2340      	movs	r3, #64	; 0x40
 800c48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c492:	e228      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c494:	2380      	movs	r3, #128	; 0x80
 800c496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c49a:	e224      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4ab1      	ldr	r2, [pc, #708]	; (800c768 <UART_SetConfig+0x630>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d176      	bne.n	800c594 <UART_SetConfig+0x45c>
 800c4a6:	4bb1      	ldr	r3, [pc, #708]	; (800c76c <UART_SetConfig+0x634>)
 800c4a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c4ae:	2b28      	cmp	r3, #40	; 0x28
 800c4b0:	d86c      	bhi.n	800c58c <UART_SetConfig+0x454>
 800c4b2:	a201      	add	r2, pc, #4	; (adr r2, 800c4b8 <UART_SetConfig+0x380>)
 800c4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b8:	0800c55d 	.word	0x0800c55d
 800c4bc:	0800c58d 	.word	0x0800c58d
 800c4c0:	0800c58d 	.word	0x0800c58d
 800c4c4:	0800c58d 	.word	0x0800c58d
 800c4c8:	0800c58d 	.word	0x0800c58d
 800c4cc:	0800c58d 	.word	0x0800c58d
 800c4d0:	0800c58d 	.word	0x0800c58d
 800c4d4:	0800c58d 	.word	0x0800c58d
 800c4d8:	0800c565 	.word	0x0800c565
 800c4dc:	0800c58d 	.word	0x0800c58d
 800c4e0:	0800c58d 	.word	0x0800c58d
 800c4e4:	0800c58d 	.word	0x0800c58d
 800c4e8:	0800c58d 	.word	0x0800c58d
 800c4ec:	0800c58d 	.word	0x0800c58d
 800c4f0:	0800c58d 	.word	0x0800c58d
 800c4f4:	0800c58d 	.word	0x0800c58d
 800c4f8:	0800c56d 	.word	0x0800c56d
 800c4fc:	0800c58d 	.word	0x0800c58d
 800c500:	0800c58d 	.word	0x0800c58d
 800c504:	0800c58d 	.word	0x0800c58d
 800c508:	0800c58d 	.word	0x0800c58d
 800c50c:	0800c58d 	.word	0x0800c58d
 800c510:	0800c58d 	.word	0x0800c58d
 800c514:	0800c58d 	.word	0x0800c58d
 800c518:	0800c575 	.word	0x0800c575
 800c51c:	0800c58d 	.word	0x0800c58d
 800c520:	0800c58d 	.word	0x0800c58d
 800c524:	0800c58d 	.word	0x0800c58d
 800c528:	0800c58d 	.word	0x0800c58d
 800c52c:	0800c58d 	.word	0x0800c58d
 800c530:	0800c58d 	.word	0x0800c58d
 800c534:	0800c58d 	.word	0x0800c58d
 800c538:	0800c57d 	.word	0x0800c57d
 800c53c:	0800c58d 	.word	0x0800c58d
 800c540:	0800c58d 	.word	0x0800c58d
 800c544:	0800c58d 	.word	0x0800c58d
 800c548:	0800c58d 	.word	0x0800c58d
 800c54c:	0800c58d 	.word	0x0800c58d
 800c550:	0800c58d 	.word	0x0800c58d
 800c554:	0800c58d 	.word	0x0800c58d
 800c558:	0800c585 	.word	0x0800c585
 800c55c:	2301      	movs	r3, #1
 800c55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c562:	e1c0      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c564:	2304      	movs	r3, #4
 800c566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c56a:	e1bc      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c56c:	2308      	movs	r3, #8
 800c56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c572:	e1b8      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c574:	2310      	movs	r3, #16
 800c576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c57a:	e1b4      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c57c:	2320      	movs	r3, #32
 800c57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c582:	e1b0      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c584:	2340      	movs	r3, #64	; 0x40
 800c586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c58a:	e1ac      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c58c:	2380      	movs	r3, #128	; 0x80
 800c58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c592:	e1a8      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4a75      	ldr	r2, [pc, #468]	; (800c770 <UART_SetConfig+0x638>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d130      	bne.n	800c600 <UART_SetConfig+0x4c8>
 800c59e:	4b73      	ldr	r3, [pc, #460]	; (800c76c <UART_SetConfig+0x634>)
 800c5a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5a2:	f003 0307 	and.w	r3, r3, #7
 800c5a6:	2b05      	cmp	r3, #5
 800c5a8:	d826      	bhi.n	800c5f8 <UART_SetConfig+0x4c0>
 800c5aa:	a201      	add	r2, pc, #4	; (adr r2, 800c5b0 <UART_SetConfig+0x478>)
 800c5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b0:	0800c5c9 	.word	0x0800c5c9
 800c5b4:	0800c5d1 	.word	0x0800c5d1
 800c5b8:	0800c5d9 	.word	0x0800c5d9
 800c5bc:	0800c5e1 	.word	0x0800c5e1
 800c5c0:	0800c5e9 	.word	0x0800c5e9
 800c5c4:	0800c5f1 	.word	0x0800c5f1
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ce:	e18a      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c5d0:	2304      	movs	r3, #4
 800c5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5d6:	e186      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c5d8:	2308      	movs	r3, #8
 800c5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5de:	e182      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c5e0:	2310      	movs	r3, #16
 800c5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5e6:	e17e      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c5e8:	2320      	movs	r3, #32
 800c5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ee:	e17a      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c5f0:	2340      	movs	r3, #64	; 0x40
 800c5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5f6:	e176      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c5f8:	2380      	movs	r3, #128	; 0x80
 800c5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5fe:	e172      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a5b      	ldr	r2, [pc, #364]	; (800c774 <UART_SetConfig+0x63c>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d130      	bne.n	800c66c <UART_SetConfig+0x534>
 800c60a:	4b58      	ldr	r3, [pc, #352]	; (800c76c <UART_SetConfig+0x634>)
 800c60c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c60e:	f003 0307 	and.w	r3, r3, #7
 800c612:	2b05      	cmp	r3, #5
 800c614:	d826      	bhi.n	800c664 <UART_SetConfig+0x52c>
 800c616:	a201      	add	r2, pc, #4	; (adr r2, 800c61c <UART_SetConfig+0x4e4>)
 800c618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c61c:	0800c635 	.word	0x0800c635
 800c620:	0800c63d 	.word	0x0800c63d
 800c624:	0800c645 	.word	0x0800c645
 800c628:	0800c64d 	.word	0x0800c64d
 800c62c:	0800c655 	.word	0x0800c655
 800c630:	0800c65d 	.word	0x0800c65d
 800c634:	2300      	movs	r3, #0
 800c636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c63a:	e154      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c63c:	2304      	movs	r3, #4
 800c63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c642:	e150      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c644:	2308      	movs	r3, #8
 800c646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c64a:	e14c      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c64c:	2310      	movs	r3, #16
 800c64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c652:	e148      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c654:	2320      	movs	r3, #32
 800c656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c65a:	e144      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c65c:	2340      	movs	r3, #64	; 0x40
 800c65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c662:	e140      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c664:	2380      	movs	r3, #128	; 0x80
 800c666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c66a:	e13c      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4a41      	ldr	r2, [pc, #260]	; (800c778 <UART_SetConfig+0x640>)
 800c672:	4293      	cmp	r3, r2
 800c674:	f040 8082 	bne.w	800c77c <UART_SetConfig+0x644>
 800c678:	4b3c      	ldr	r3, [pc, #240]	; (800c76c <UART_SetConfig+0x634>)
 800c67a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c67c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c680:	2b28      	cmp	r3, #40	; 0x28
 800c682:	d86d      	bhi.n	800c760 <UART_SetConfig+0x628>
 800c684:	a201      	add	r2, pc, #4	; (adr r2, 800c68c <UART_SetConfig+0x554>)
 800c686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c68a:	bf00      	nop
 800c68c:	0800c731 	.word	0x0800c731
 800c690:	0800c761 	.word	0x0800c761
 800c694:	0800c761 	.word	0x0800c761
 800c698:	0800c761 	.word	0x0800c761
 800c69c:	0800c761 	.word	0x0800c761
 800c6a0:	0800c761 	.word	0x0800c761
 800c6a4:	0800c761 	.word	0x0800c761
 800c6a8:	0800c761 	.word	0x0800c761
 800c6ac:	0800c739 	.word	0x0800c739
 800c6b0:	0800c761 	.word	0x0800c761
 800c6b4:	0800c761 	.word	0x0800c761
 800c6b8:	0800c761 	.word	0x0800c761
 800c6bc:	0800c761 	.word	0x0800c761
 800c6c0:	0800c761 	.word	0x0800c761
 800c6c4:	0800c761 	.word	0x0800c761
 800c6c8:	0800c761 	.word	0x0800c761
 800c6cc:	0800c741 	.word	0x0800c741
 800c6d0:	0800c761 	.word	0x0800c761
 800c6d4:	0800c761 	.word	0x0800c761
 800c6d8:	0800c761 	.word	0x0800c761
 800c6dc:	0800c761 	.word	0x0800c761
 800c6e0:	0800c761 	.word	0x0800c761
 800c6e4:	0800c761 	.word	0x0800c761
 800c6e8:	0800c761 	.word	0x0800c761
 800c6ec:	0800c749 	.word	0x0800c749
 800c6f0:	0800c761 	.word	0x0800c761
 800c6f4:	0800c761 	.word	0x0800c761
 800c6f8:	0800c761 	.word	0x0800c761
 800c6fc:	0800c761 	.word	0x0800c761
 800c700:	0800c761 	.word	0x0800c761
 800c704:	0800c761 	.word	0x0800c761
 800c708:	0800c761 	.word	0x0800c761
 800c70c:	0800c751 	.word	0x0800c751
 800c710:	0800c761 	.word	0x0800c761
 800c714:	0800c761 	.word	0x0800c761
 800c718:	0800c761 	.word	0x0800c761
 800c71c:	0800c761 	.word	0x0800c761
 800c720:	0800c761 	.word	0x0800c761
 800c724:	0800c761 	.word	0x0800c761
 800c728:	0800c761 	.word	0x0800c761
 800c72c:	0800c759 	.word	0x0800c759
 800c730:	2301      	movs	r3, #1
 800c732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c736:	e0d6      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c738:	2304      	movs	r3, #4
 800c73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c73e:	e0d2      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c740:	2308      	movs	r3, #8
 800c742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c746:	e0ce      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c748:	2310      	movs	r3, #16
 800c74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c74e:	e0ca      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c750:	2320      	movs	r3, #32
 800c752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c756:	e0c6      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c758:	2340      	movs	r3, #64	; 0x40
 800c75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c75e:	e0c2      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c760:	2380      	movs	r3, #128	; 0x80
 800c762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c766:	e0be      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c768:	40011400 	.word	0x40011400
 800c76c:	58024400 	.word	0x58024400
 800c770:	40007800 	.word	0x40007800
 800c774:	40007c00 	.word	0x40007c00
 800c778:	40011800 	.word	0x40011800
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4aad      	ldr	r2, [pc, #692]	; (800ca38 <UART_SetConfig+0x900>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d176      	bne.n	800c874 <UART_SetConfig+0x73c>
 800c786:	4bad      	ldr	r3, [pc, #692]	; (800ca3c <UART_SetConfig+0x904>)
 800c788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c78a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c78e:	2b28      	cmp	r3, #40	; 0x28
 800c790:	d86c      	bhi.n	800c86c <UART_SetConfig+0x734>
 800c792:	a201      	add	r2, pc, #4	; (adr r2, 800c798 <UART_SetConfig+0x660>)
 800c794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c798:	0800c83d 	.word	0x0800c83d
 800c79c:	0800c86d 	.word	0x0800c86d
 800c7a0:	0800c86d 	.word	0x0800c86d
 800c7a4:	0800c86d 	.word	0x0800c86d
 800c7a8:	0800c86d 	.word	0x0800c86d
 800c7ac:	0800c86d 	.word	0x0800c86d
 800c7b0:	0800c86d 	.word	0x0800c86d
 800c7b4:	0800c86d 	.word	0x0800c86d
 800c7b8:	0800c845 	.word	0x0800c845
 800c7bc:	0800c86d 	.word	0x0800c86d
 800c7c0:	0800c86d 	.word	0x0800c86d
 800c7c4:	0800c86d 	.word	0x0800c86d
 800c7c8:	0800c86d 	.word	0x0800c86d
 800c7cc:	0800c86d 	.word	0x0800c86d
 800c7d0:	0800c86d 	.word	0x0800c86d
 800c7d4:	0800c86d 	.word	0x0800c86d
 800c7d8:	0800c84d 	.word	0x0800c84d
 800c7dc:	0800c86d 	.word	0x0800c86d
 800c7e0:	0800c86d 	.word	0x0800c86d
 800c7e4:	0800c86d 	.word	0x0800c86d
 800c7e8:	0800c86d 	.word	0x0800c86d
 800c7ec:	0800c86d 	.word	0x0800c86d
 800c7f0:	0800c86d 	.word	0x0800c86d
 800c7f4:	0800c86d 	.word	0x0800c86d
 800c7f8:	0800c855 	.word	0x0800c855
 800c7fc:	0800c86d 	.word	0x0800c86d
 800c800:	0800c86d 	.word	0x0800c86d
 800c804:	0800c86d 	.word	0x0800c86d
 800c808:	0800c86d 	.word	0x0800c86d
 800c80c:	0800c86d 	.word	0x0800c86d
 800c810:	0800c86d 	.word	0x0800c86d
 800c814:	0800c86d 	.word	0x0800c86d
 800c818:	0800c85d 	.word	0x0800c85d
 800c81c:	0800c86d 	.word	0x0800c86d
 800c820:	0800c86d 	.word	0x0800c86d
 800c824:	0800c86d 	.word	0x0800c86d
 800c828:	0800c86d 	.word	0x0800c86d
 800c82c:	0800c86d 	.word	0x0800c86d
 800c830:	0800c86d 	.word	0x0800c86d
 800c834:	0800c86d 	.word	0x0800c86d
 800c838:	0800c865 	.word	0x0800c865
 800c83c:	2301      	movs	r3, #1
 800c83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c842:	e050      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c844:	2304      	movs	r3, #4
 800c846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c84a:	e04c      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c84c:	2308      	movs	r3, #8
 800c84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c852:	e048      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c854:	2310      	movs	r3, #16
 800c856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c85a:	e044      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c85c:	2320      	movs	r3, #32
 800c85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c862:	e040      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c864:	2340      	movs	r3, #64	; 0x40
 800c866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c86a:	e03c      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c86c:	2380      	movs	r3, #128	; 0x80
 800c86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c872:	e038      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a71      	ldr	r2, [pc, #452]	; (800ca40 <UART_SetConfig+0x908>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d130      	bne.n	800c8e0 <UART_SetConfig+0x7a8>
 800c87e:	4b6f      	ldr	r3, [pc, #444]	; (800ca3c <UART_SetConfig+0x904>)
 800c880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c882:	f003 0307 	and.w	r3, r3, #7
 800c886:	2b05      	cmp	r3, #5
 800c888:	d826      	bhi.n	800c8d8 <UART_SetConfig+0x7a0>
 800c88a:	a201      	add	r2, pc, #4	; (adr r2, 800c890 <UART_SetConfig+0x758>)
 800c88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c890:	0800c8a9 	.word	0x0800c8a9
 800c894:	0800c8b1 	.word	0x0800c8b1
 800c898:	0800c8b9 	.word	0x0800c8b9
 800c89c:	0800c8c1 	.word	0x0800c8c1
 800c8a0:	0800c8c9 	.word	0x0800c8c9
 800c8a4:	0800c8d1 	.word	0x0800c8d1
 800c8a8:	2302      	movs	r3, #2
 800c8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ae:	e01a      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c8b0:	2304      	movs	r3, #4
 800c8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8b6:	e016      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c8b8:	2308      	movs	r3, #8
 800c8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8be:	e012      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c8c0:	2310      	movs	r3, #16
 800c8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8c6:	e00e      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c8c8:	2320      	movs	r3, #32
 800c8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ce:	e00a      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c8d0:	2340      	movs	r3, #64	; 0x40
 800c8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8d6:	e006      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c8d8:	2380      	movs	r3, #128	; 0x80
 800c8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8de:	e002      	b.n	800c8e6 <UART_SetConfig+0x7ae>
 800c8e0:	2380      	movs	r3, #128	; 0x80
 800c8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a55      	ldr	r2, [pc, #340]	; (800ca40 <UART_SetConfig+0x908>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	f040 80f8 	bne.w	800cae2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c8f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c8f6:	2b20      	cmp	r3, #32
 800c8f8:	dc46      	bgt.n	800c988 <UART_SetConfig+0x850>
 800c8fa:	2b02      	cmp	r3, #2
 800c8fc:	db75      	blt.n	800c9ea <UART_SetConfig+0x8b2>
 800c8fe:	3b02      	subs	r3, #2
 800c900:	2b1e      	cmp	r3, #30
 800c902:	d872      	bhi.n	800c9ea <UART_SetConfig+0x8b2>
 800c904:	a201      	add	r2, pc, #4	; (adr r2, 800c90c <UART_SetConfig+0x7d4>)
 800c906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c90a:	bf00      	nop
 800c90c:	0800c98f 	.word	0x0800c98f
 800c910:	0800c9eb 	.word	0x0800c9eb
 800c914:	0800c997 	.word	0x0800c997
 800c918:	0800c9eb 	.word	0x0800c9eb
 800c91c:	0800c9eb 	.word	0x0800c9eb
 800c920:	0800c9eb 	.word	0x0800c9eb
 800c924:	0800c9a7 	.word	0x0800c9a7
 800c928:	0800c9eb 	.word	0x0800c9eb
 800c92c:	0800c9eb 	.word	0x0800c9eb
 800c930:	0800c9eb 	.word	0x0800c9eb
 800c934:	0800c9eb 	.word	0x0800c9eb
 800c938:	0800c9eb 	.word	0x0800c9eb
 800c93c:	0800c9eb 	.word	0x0800c9eb
 800c940:	0800c9eb 	.word	0x0800c9eb
 800c944:	0800c9b7 	.word	0x0800c9b7
 800c948:	0800c9eb 	.word	0x0800c9eb
 800c94c:	0800c9eb 	.word	0x0800c9eb
 800c950:	0800c9eb 	.word	0x0800c9eb
 800c954:	0800c9eb 	.word	0x0800c9eb
 800c958:	0800c9eb 	.word	0x0800c9eb
 800c95c:	0800c9eb 	.word	0x0800c9eb
 800c960:	0800c9eb 	.word	0x0800c9eb
 800c964:	0800c9eb 	.word	0x0800c9eb
 800c968:	0800c9eb 	.word	0x0800c9eb
 800c96c:	0800c9eb 	.word	0x0800c9eb
 800c970:	0800c9eb 	.word	0x0800c9eb
 800c974:	0800c9eb 	.word	0x0800c9eb
 800c978:	0800c9eb 	.word	0x0800c9eb
 800c97c:	0800c9eb 	.word	0x0800c9eb
 800c980:	0800c9eb 	.word	0x0800c9eb
 800c984:	0800c9dd 	.word	0x0800c9dd
 800c988:	2b40      	cmp	r3, #64	; 0x40
 800c98a:	d02a      	beq.n	800c9e2 <UART_SetConfig+0x8aa>
 800c98c:	e02d      	b.n	800c9ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c98e:	f7fc ff87 	bl	80098a0 <HAL_RCCEx_GetD3PCLK1Freq>
 800c992:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c994:	e02f      	b.n	800c9f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7fc ff96 	bl	80098cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9a4:	e027      	b.n	800c9f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9a6:	f107 0318 	add.w	r3, r7, #24
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7fd f8e2 	bl	8009b74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c9b0:	69fb      	ldr	r3, [r7, #28]
 800c9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9b4:	e01f      	b.n	800c9f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9b6:	4b21      	ldr	r3, [pc, #132]	; (800ca3c <UART_SetConfig+0x904>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f003 0320 	and.w	r3, r3, #32
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d009      	beq.n	800c9d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c9c2:	4b1e      	ldr	r3, [pc, #120]	; (800ca3c <UART_SetConfig+0x904>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	08db      	lsrs	r3, r3, #3
 800c9c8:	f003 0303 	and.w	r3, r3, #3
 800c9cc:	4a1d      	ldr	r2, [pc, #116]	; (800ca44 <UART_SetConfig+0x90c>)
 800c9ce:	fa22 f303 	lsr.w	r3, r2, r3
 800c9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c9d4:	e00f      	b.n	800c9f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c9d6:	4b1b      	ldr	r3, [pc, #108]	; (800ca44 <UART_SetConfig+0x90c>)
 800c9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9da:	e00c      	b.n	800c9f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c9dc:	4b1a      	ldr	r3, [pc, #104]	; (800ca48 <UART_SetConfig+0x910>)
 800c9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e0:	e009      	b.n	800c9f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e8:	e005      	b.n	800c9f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c9f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c9f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	f000 81ee 	beq.w	800cdda <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca02:	4a12      	ldr	r2, [pc, #72]	; (800ca4c <UART_SetConfig+0x914>)
 800ca04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca08:	461a      	mov	r2, r3
 800ca0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca10:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	685a      	ldr	r2, [r3, #4]
 800ca16:	4613      	mov	r3, r2
 800ca18:	005b      	lsls	r3, r3, #1
 800ca1a:	4413      	add	r3, r2
 800ca1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d305      	bcc.n	800ca2e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d910      	bls.n	800ca50 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ca34:	e1d1      	b.n	800cdda <UART_SetConfig+0xca2>
 800ca36:	bf00      	nop
 800ca38:	40011c00 	.word	0x40011c00
 800ca3c:	58024400 	.word	0x58024400
 800ca40:	58000c00 	.word	0x58000c00
 800ca44:	03d09000 	.word	0x03d09000
 800ca48:	003d0900 	.word	0x003d0900
 800ca4c:	0800dfc4 	.word	0x0800dfc4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca52:	2200      	movs	r2, #0
 800ca54:	60bb      	str	r3, [r7, #8]
 800ca56:	60fa      	str	r2, [r7, #12]
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca5c:	4ac0      	ldr	r2, [pc, #768]	; (800cd60 <UART_SetConfig+0xc28>)
 800ca5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca62:	b29b      	uxth	r3, r3
 800ca64:	2200      	movs	r2, #0
 800ca66:	603b      	str	r3, [r7, #0]
 800ca68:	607a      	str	r2, [r7, #4]
 800ca6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ca72:	f7f3 fc55 	bl	8000320 <__aeabi_uldivmod>
 800ca76:	4602      	mov	r2, r0
 800ca78:	460b      	mov	r3, r1
 800ca7a:	4610      	mov	r0, r2
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	f04f 0200 	mov.w	r2, #0
 800ca82:	f04f 0300 	mov.w	r3, #0
 800ca86:	020b      	lsls	r3, r1, #8
 800ca88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca8c:	0202      	lsls	r2, r0, #8
 800ca8e:	6979      	ldr	r1, [r7, #20]
 800ca90:	6849      	ldr	r1, [r1, #4]
 800ca92:	0849      	lsrs	r1, r1, #1
 800ca94:	2000      	movs	r0, #0
 800ca96:	460c      	mov	r4, r1
 800ca98:	4605      	mov	r5, r0
 800ca9a:	eb12 0804 	adds.w	r8, r2, r4
 800ca9e:	eb43 0905 	adc.w	r9, r3, r5
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	2200      	movs	r2, #0
 800caa8:	469a      	mov	sl, r3
 800caaa:	4693      	mov	fp, r2
 800caac:	4652      	mov	r2, sl
 800caae:	465b      	mov	r3, fp
 800cab0:	4640      	mov	r0, r8
 800cab2:	4649      	mov	r1, r9
 800cab4:	f7f3 fc34 	bl	8000320 <__aeabi_uldivmod>
 800cab8:	4602      	mov	r2, r0
 800caba:	460b      	mov	r3, r1
 800cabc:	4613      	mov	r3, r2
 800cabe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cac6:	d308      	bcc.n	800cada <UART_SetConfig+0x9a2>
 800cac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cace:	d204      	bcs.n	800cada <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cad6:	60da      	str	r2, [r3, #12]
 800cad8:	e17f      	b.n	800cdda <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800cada:	2301      	movs	r3, #1
 800cadc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cae0:	e17b      	b.n	800cdda <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	69db      	ldr	r3, [r3, #28]
 800cae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800caea:	f040 80bd 	bne.w	800cc68 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800caee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800caf2:	2b20      	cmp	r3, #32
 800caf4:	dc48      	bgt.n	800cb88 <UART_SetConfig+0xa50>
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	db7b      	blt.n	800cbf2 <UART_SetConfig+0xaba>
 800cafa:	2b20      	cmp	r3, #32
 800cafc:	d879      	bhi.n	800cbf2 <UART_SetConfig+0xaba>
 800cafe:	a201      	add	r2, pc, #4	; (adr r2, 800cb04 <UART_SetConfig+0x9cc>)
 800cb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb04:	0800cb8f 	.word	0x0800cb8f
 800cb08:	0800cb97 	.word	0x0800cb97
 800cb0c:	0800cbf3 	.word	0x0800cbf3
 800cb10:	0800cbf3 	.word	0x0800cbf3
 800cb14:	0800cb9f 	.word	0x0800cb9f
 800cb18:	0800cbf3 	.word	0x0800cbf3
 800cb1c:	0800cbf3 	.word	0x0800cbf3
 800cb20:	0800cbf3 	.word	0x0800cbf3
 800cb24:	0800cbaf 	.word	0x0800cbaf
 800cb28:	0800cbf3 	.word	0x0800cbf3
 800cb2c:	0800cbf3 	.word	0x0800cbf3
 800cb30:	0800cbf3 	.word	0x0800cbf3
 800cb34:	0800cbf3 	.word	0x0800cbf3
 800cb38:	0800cbf3 	.word	0x0800cbf3
 800cb3c:	0800cbf3 	.word	0x0800cbf3
 800cb40:	0800cbf3 	.word	0x0800cbf3
 800cb44:	0800cbbf 	.word	0x0800cbbf
 800cb48:	0800cbf3 	.word	0x0800cbf3
 800cb4c:	0800cbf3 	.word	0x0800cbf3
 800cb50:	0800cbf3 	.word	0x0800cbf3
 800cb54:	0800cbf3 	.word	0x0800cbf3
 800cb58:	0800cbf3 	.word	0x0800cbf3
 800cb5c:	0800cbf3 	.word	0x0800cbf3
 800cb60:	0800cbf3 	.word	0x0800cbf3
 800cb64:	0800cbf3 	.word	0x0800cbf3
 800cb68:	0800cbf3 	.word	0x0800cbf3
 800cb6c:	0800cbf3 	.word	0x0800cbf3
 800cb70:	0800cbf3 	.word	0x0800cbf3
 800cb74:	0800cbf3 	.word	0x0800cbf3
 800cb78:	0800cbf3 	.word	0x0800cbf3
 800cb7c:	0800cbf3 	.word	0x0800cbf3
 800cb80:	0800cbf3 	.word	0x0800cbf3
 800cb84:	0800cbe5 	.word	0x0800cbe5
 800cb88:	2b40      	cmp	r3, #64	; 0x40
 800cb8a:	d02e      	beq.n	800cbea <UART_SetConfig+0xab2>
 800cb8c:	e031      	b.n	800cbf2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb8e:	f7fb ff61 	bl	8008a54 <HAL_RCC_GetPCLK1Freq>
 800cb92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb94:	e033      	b.n	800cbfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb96:	f7fb ff73 	bl	8008a80 <HAL_RCC_GetPCLK2Freq>
 800cb9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb9c:	e02f      	b.n	800cbfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fc fe92 	bl	80098cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbac:	e027      	b.n	800cbfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbae:	f107 0318 	add.w	r3, r7, #24
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fc ffde 	bl	8009b74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbbc:	e01f      	b.n	800cbfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbbe:	4b69      	ldr	r3, [pc, #420]	; (800cd64 <UART_SetConfig+0xc2c>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f003 0320 	and.w	r3, r3, #32
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d009      	beq.n	800cbde <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cbca:	4b66      	ldr	r3, [pc, #408]	; (800cd64 <UART_SetConfig+0xc2c>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	08db      	lsrs	r3, r3, #3
 800cbd0:	f003 0303 	and.w	r3, r3, #3
 800cbd4:	4a64      	ldr	r2, [pc, #400]	; (800cd68 <UART_SetConfig+0xc30>)
 800cbd6:	fa22 f303 	lsr.w	r3, r2, r3
 800cbda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cbdc:	e00f      	b.n	800cbfe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800cbde:	4b62      	ldr	r3, [pc, #392]	; (800cd68 <UART_SetConfig+0xc30>)
 800cbe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbe2:	e00c      	b.n	800cbfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cbe4:	4b61      	ldr	r3, [pc, #388]	; (800cd6c <UART_SetConfig+0xc34>)
 800cbe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbe8:	e009      	b.n	800cbfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbf0:	e005      	b.n	800cbfe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cbfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cbfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	f000 80ea 	beq.w	800cdda <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0a:	4a55      	ldr	r2, [pc, #340]	; (800cd60 <UART_SetConfig+0xc28>)
 800cc0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc10:	461a      	mov	r2, r3
 800cc12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc14:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc18:	005a      	lsls	r2, r3, #1
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	085b      	lsrs	r3, r3, #1
 800cc20:	441a      	add	r2, r3
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc2a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2e:	2b0f      	cmp	r3, #15
 800cc30:	d916      	bls.n	800cc60 <UART_SetConfig+0xb28>
 800cc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc38:	d212      	bcs.n	800cc60 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	f023 030f 	bic.w	r3, r3, #15
 800cc42:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc46:	085b      	lsrs	r3, r3, #1
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	f003 0307 	and.w	r3, r3, #7
 800cc4e:	b29a      	uxth	r2, r3
 800cc50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cc52:	4313      	orrs	r3, r2
 800cc54:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cc5c:	60da      	str	r2, [r3, #12]
 800cc5e:	e0bc      	b.n	800cdda <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cc60:	2301      	movs	r3, #1
 800cc62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cc66:	e0b8      	b.n	800cdda <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cc68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cc6c:	2b20      	cmp	r3, #32
 800cc6e:	dc4b      	bgt.n	800cd08 <UART_SetConfig+0xbd0>
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	f2c0 8087 	blt.w	800cd84 <UART_SetConfig+0xc4c>
 800cc76:	2b20      	cmp	r3, #32
 800cc78:	f200 8084 	bhi.w	800cd84 <UART_SetConfig+0xc4c>
 800cc7c:	a201      	add	r2, pc, #4	; (adr r2, 800cc84 <UART_SetConfig+0xb4c>)
 800cc7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc82:	bf00      	nop
 800cc84:	0800cd0f 	.word	0x0800cd0f
 800cc88:	0800cd17 	.word	0x0800cd17
 800cc8c:	0800cd85 	.word	0x0800cd85
 800cc90:	0800cd85 	.word	0x0800cd85
 800cc94:	0800cd1f 	.word	0x0800cd1f
 800cc98:	0800cd85 	.word	0x0800cd85
 800cc9c:	0800cd85 	.word	0x0800cd85
 800cca0:	0800cd85 	.word	0x0800cd85
 800cca4:	0800cd2f 	.word	0x0800cd2f
 800cca8:	0800cd85 	.word	0x0800cd85
 800ccac:	0800cd85 	.word	0x0800cd85
 800ccb0:	0800cd85 	.word	0x0800cd85
 800ccb4:	0800cd85 	.word	0x0800cd85
 800ccb8:	0800cd85 	.word	0x0800cd85
 800ccbc:	0800cd85 	.word	0x0800cd85
 800ccc0:	0800cd85 	.word	0x0800cd85
 800ccc4:	0800cd3f 	.word	0x0800cd3f
 800ccc8:	0800cd85 	.word	0x0800cd85
 800cccc:	0800cd85 	.word	0x0800cd85
 800ccd0:	0800cd85 	.word	0x0800cd85
 800ccd4:	0800cd85 	.word	0x0800cd85
 800ccd8:	0800cd85 	.word	0x0800cd85
 800ccdc:	0800cd85 	.word	0x0800cd85
 800cce0:	0800cd85 	.word	0x0800cd85
 800cce4:	0800cd85 	.word	0x0800cd85
 800cce8:	0800cd85 	.word	0x0800cd85
 800ccec:	0800cd85 	.word	0x0800cd85
 800ccf0:	0800cd85 	.word	0x0800cd85
 800ccf4:	0800cd85 	.word	0x0800cd85
 800ccf8:	0800cd85 	.word	0x0800cd85
 800ccfc:	0800cd85 	.word	0x0800cd85
 800cd00:	0800cd85 	.word	0x0800cd85
 800cd04:	0800cd77 	.word	0x0800cd77
 800cd08:	2b40      	cmp	r3, #64	; 0x40
 800cd0a:	d037      	beq.n	800cd7c <UART_SetConfig+0xc44>
 800cd0c:	e03a      	b.n	800cd84 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd0e:	f7fb fea1 	bl	8008a54 <HAL_RCC_GetPCLK1Freq>
 800cd12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd14:	e03c      	b.n	800cd90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd16:	f7fb feb3 	bl	8008a80 <HAL_RCC_GetPCLK2Freq>
 800cd1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd1c:	e038      	b.n	800cd90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7fc fdd2 	bl	80098cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd2c:	e030      	b.n	800cd90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd2e:	f107 0318 	add.w	r3, r7, #24
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7fc ff1e 	bl	8009b74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd3c:	e028      	b.n	800cd90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd3e:	4b09      	ldr	r3, [pc, #36]	; (800cd64 <UART_SetConfig+0xc2c>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f003 0320 	and.w	r3, r3, #32
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d012      	beq.n	800cd70 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd4a:	4b06      	ldr	r3, [pc, #24]	; (800cd64 <UART_SetConfig+0xc2c>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	08db      	lsrs	r3, r3, #3
 800cd50:	f003 0303 	and.w	r3, r3, #3
 800cd54:	4a04      	ldr	r2, [pc, #16]	; (800cd68 <UART_SetConfig+0xc30>)
 800cd56:	fa22 f303 	lsr.w	r3, r2, r3
 800cd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd5c:	e018      	b.n	800cd90 <UART_SetConfig+0xc58>
 800cd5e:	bf00      	nop
 800cd60:	0800dfc4 	.word	0x0800dfc4
 800cd64:	58024400 	.word	0x58024400
 800cd68:	03d09000 	.word	0x03d09000
 800cd6c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800cd70:	4b24      	ldr	r3, [pc, #144]	; (800ce04 <UART_SetConfig+0xccc>)
 800cd72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd74:	e00c      	b.n	800cd90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd76:	4b24      	ldr	r3, [pc, #144]	; (800ce08 <UART_SetConfig+0xcd0>)
 800cd78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd7a:	e009      	b.n	800cd90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd82:	e005      	b.n	800cd90 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800cd84:	2300      	movs	r3, #0
 800cd86:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cd88:	2301      	movs	r3, #1
 800cd8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cd8e:	bf00      	nop
    }

    if (pclk != 0U)
 800cd90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d021      	beq.n	800cdda <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd9a:	4a1c      	ldr	r2, [pc, #112]	; (800ce0c <UART_SetConfig+0xcd4>)
 800cd9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cda0:	461a      	mov	r2, r3
 800cda2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cda4:	fbb3 f2f2 	udiv	r2, r3, r2
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	085b      	lsrs	r3, r3, #1
 800cdae:	441a      	add	r2, r3
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdb8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cdba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdbc:	2b0f      	cmp	r3, #15
 800cdbe:	d909      	bls.n	800cdd4 <UART_SetConfig+0xc9c>
 800cdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdc6:	d205      	bcs.n	800cdd4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cdc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdca:	b29a      	uxth	r2, r3
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	60da      	str	r2, [r3, #12]
 800cdd2:	e002      	b.n	800cdda <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	2201      	movs	r2, #1
 800cdde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	2201      	movs	r2, #1
 800cde6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	2200      	movs	r2, #0
 800cdee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cdf6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3748      	adds	r7, #72	; 0x48
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce04:	03d09000 	.word	0x03d09000
 800ce08:	003d0900 	.word	0x003d0900
 800ce0c:	0800dfc4 	.word	0x0800dfc4

0800ce10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce1c:	f003 0301 	and.w	r3, r3, #1
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d00a      	beq.n	800ce3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	430a      	orrs	r2, r1
 800ce38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce3e:	f003 0302 	and.w	r3, r3, #2
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00a      	beq.n	800ce5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	430a      	orrs	r2, r1
 800ce5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce60:	f003 0304 	and.w	r3, r3, #4
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d00a      	beq.n	800ce7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	430a      	orrs	r2, r1
 800ce7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce82:	f003 0308 	and.w	r3, r3, #8
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d00a      	beq.n	800cea0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	430a      	orrs	r2, r1
 800ce9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cea4:	f003 0310 	and.w	r3, r3, #16
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d00a      	beq.n	800cec2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	689b      	ldr	r3, [r3, #8]
 800ceb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	430a      	orrs	r2, r1
 800cec0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec6:	f003 0320 	and.w	r3, r3, #32
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d00a      	beq.n	800cee4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	689b      	ldr	r3, [r3, #8]
 800ced4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	430a      	orrs	r2, r1
 800cee2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d01a      	beq.n	800cf26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	430a      	orrs	r2, r1
 800cf04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf0e:	d10a      	bne.n	800cf26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	430a      	orrs	r2, r1
 800cf24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d00a      	beq.n	800cf48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	430a      	orrs	r2, r1
 800cf46:	605a      	str	r2, [r3, #4]
  }
}
 800cf48:	bf00      	nop
 800cf4a:	370c      	adds	r7, #12
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr

0800cf54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b086      	sub	sp, #24
 800cf58:	af02      	add	r7, sp, #8
 800cf5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf64:	f7f7 fd16 	bl	8004994 <HAL_GetTick>
 800cf68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f003 0308 	and.w	r3, r3, #8
 800cf74:	2b08      	cmp	r3, #8
 800cf76:	d10e      	bne.n	800cf96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf7c:	9300      	str	r3, [sp, #0]
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2200      	movs	r2, #0
 800cf82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 f82f 	bl	800cfea <UART_WaitOnFlagUntilTimeout>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d001      	beq.n	800cf96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf92:	2303      	movs	r3, #3
 800cf94:	e025      	b.n	800cfe2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f003 0304 	and.w	r3, r3, #4
 800cfa0:	2b04      	cmp	r3, #4
 800cfa2:	d10e      	bne.n	800cfc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cfa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cfa8:	9300      	str	r3, [sp, #0]
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2200      	movs	r2, #0
 800cfae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 f819 	bl	800cfea <UART_WaitOnFlagUntilTimeout>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d001      	beq.n	800cfc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cfbe:	2303      	movs	r3, #3
 800cfc0:	e00f      	b.n	800cfe2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2220      	movs	r2, #32
 800cfc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2220      	movs	r2, #32
 800cfce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cfe0:	2300      	movs	r3, #0
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3710      	adds	r7, #16
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}

0800cfea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cfea:	b580      	push	{r7, lr}
 800cfec:	b09c      	sub	sp, #112	; 0x70
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	60f8      	str	r0, [r7, #12]
 800cff2:	60b9      	str	r1, [r7, #8]
 800cff4:	603b      	str	r3, [r7, #0]
 800cff6:	4613      	mov	r3, r2
 800cff8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cffa:	e0a9      	b.n	800d150 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d002:	f000 80a5 	beq.w	800d150 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d006:	f7f7 fcc5 	bl	8004994 <HAL_GetTick>
 800d00a:	4602      	mov	r2, r0
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	1ad3      	subs	r3, r2, r3
 800d010:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d012:	429a      	cmp	r2, r3
 800d014:	d302      	bcc.n	800d01c <UART_WaitOnFlagUntilTimeout+0x32>
 800d016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d140      	bne.n	800d09e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d024:	e853 3f00 	ldrex	r3, [r3]
 800d028:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d02a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d02c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d030:	667b      	str	r3, [r7, #100]	; 0x64
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	461a      	mov	r2, r3
 800d038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d03a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d03c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d03e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d040:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d042:	e841 2300 	strex	r3, r2, [r1]
 800d046:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d1e6      	bne.n	800d01c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	3308      	adds	r3, #8
 800d054:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d058:	e853 3f00 	ldrex	r3, [r3]
 800d05c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d060:	f023 0301 	bic.w	r3, r3, #1
 800d064:	663b      	str	r3, [r7, #96]	; 0x60
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	3308      	adds	r3, #8
 800d06c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d06e:	64ba      	str	r2, [r7, #72]	; 0x48
 800d070:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d072:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d076:	e841 2300 	strex	r3, r2, [r1]
 800d07a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d07c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d1e5      	bne.n	800d04e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2220      	movs	r2, #32
 800d086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2220      	movs	r2, #32
 800d08e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2200      	movs	r2, #0
 800d096:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d09a:	2303      	movs	r3, #3
 800d09c:	e069      	b.n	800d172 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f003 0304 	and.w	r3, r3, #4
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d051      	beq.n	800d150 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	69db      	ldr	r3, [r3, #28]
 800d0b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d0b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d0ba:	d149      	bne.n	800d150 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d0c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ce:	e853 3f00 	ldrex	r3, [r3]
 800d0d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d0da:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	461a      	mov	r2, r3
 800d0e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0e4:	637b      	str	r3, [r7, #52]	; 0x34
 800d0e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d0ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0ec:	e841 2300 	strex	r3, r2, [r1]
 800d0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d1e6      	bne.n	800d0c6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	3308      	adds	r3, #8
 800d0fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	e853 3f00 	ldrex	r3, [r3]
 800d106:	613b      	str	r3, [r7, #16]
   return(result);
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	f023 0301 	bic.w	r3, r3, #1
 800d10e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	3308      	adds	r3, #8
 800d116:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d118:	623a      	str	r2, [r7, #32]
 800d11a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d11c:	69f9      	ldr	r1, [r7, #28]
 800d11e:	6a3a      	ldr	r2, [r7, #32]
 800d120:	e841 2300 	strex	r3, r2, [r1]
 800d124:	61bb      	str	r3, [r7, #24]
   return(result);
 800d126:	69bb      	ldr	r3, [r7, #24]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d1e5      	bne.n	800d0f8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2220      	movs	r2, #32
 800d130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2220      	movs	r2, #32
 800d138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2220      	movs	r2, #32
 800d140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2200      	movs	r2, #0
 800d148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d14c:	2303      	movs	r3, #3
 800d14e:	e010      	b.n	800d172 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	69da      	ldr	r2, [r3, #28]
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	4013      	ands	r3, r2
 800d15a:	68ba      	ldr	r2, [r7, #8]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	bf0c      	ite	eq
 800d160:	2301      	moveq	r3, #1
 800d162:	2300      	movne	r3, #0
 800d164:	b2db      	uxtb	r3, r3
 800d166:	461a      	mov	r2, r3
 800d168:	79fb      	ldrb	r3, [r7, #7]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	f43f af46 	beq.w	800cffc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d170:	2300      	movs	r3, #0
}
 800d172:	4618      	mov	r0, r3
 800d174:	3770      	adds	r7, #112	; 0x70
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
	...

0800d17c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b096      	sub	sp, #88	; 0x58
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	60b9      	str	r1, [r7, #8]
 800d186:	4613      	mov	r3, r2
 800d188:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	68ba      	ldr	r2, [r7, #8]
 800d18e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	88fa      	ldrh	r2, [r7, #6]
 800d194:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2200      	movs	r2, #0
 800d19c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2222      	movs	r2, #34	; 0x22
 800d1a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d02c      	beq.n	800d20a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1b4:	4a42      	ldr	r2, [pc, #264]	; (800d2c0 <UART_Start_Receive_DMA+0x144>)
 800d1b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1bc:	4a41      	ldr	r2, [pc, #260]	; (800d2c4 <UART_Start_Receive_DMA+0x148>)
 800d1be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1c4:	4a40      	ldr	r2, [pc, #256]	; (800d2c8 <UART_Start_Receive_DMA+0x14c>)
 800d1c6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	3324      	adds	r3, #36	; 0x24
 800d1da:	4619      	mov	r1, r3
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	88fb      	ldrh	r3, [r7, #6]
 800d1e4:	f7f8 f84c 	bl	8005280 <HAL_DMA_Start_IT>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d00d      	beq.n	800d20a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2210      	movs	r2, #16
 800d1f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2220      	movs	r2, #32
 800d202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d206:	2301      	movs	r3, #1
 800d208:	e055      	b.n	800d2b6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2200      	movs	r2, #0
 800d20e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	691b      	ldr	r3, [r3, #16]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d018      	beq.n	800d24c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d222:	e853 3f00 	ldrex	r3, [r3]
 800d226:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d22a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d22e:	657b      	str	r3, [r7, #84]	; 0x54
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	461a      	mov	r2, r3
 800d236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d238:	64bb      	str	r3, [r7, #72]	; 0x48
 800d23a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d23c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d23e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d240:	e841 2300 	strex	r3, r2, [r1]
 800d244:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d1e6      	bne.n	800d21a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	3308      	adds	r3, #8
 800d252:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d256:	e853 3f00 	ldrex	r3, [r3]
 800d25a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25e:	f043 0301 	orr.w	r3, r3, #1
 800d262:	653b      	str	r3, [r7, #80]	; 0x50
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	3308      	adds	r3, #8
 800d26a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d26c:	637a      	str	r2, [r7, #52]	; 0x34
 800d26e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d270:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d274:	e841 2300 	strex	r3, r2, [r1]
 800d278:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d1e5      	bne.n	800d24c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	3308      	adds	r3, #8
 800d286:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	e853 3f00 	ldrex	r3, [r3]
 800d28e:	613b      	str	r3, [r7, #16]
   return(result);
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d296:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	3308      	adds	r3, #8
 800d29e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d2a0:	623a      	str	r2, [r7, #32]
 800d2a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a4:	69f9      	ldr	r1, [r7, #28]
 800d2a6:	6a3a      	ldr	r2, [r7, #32]
 800d2a8:	e841 2300 	strex	r3, r2, [r1]
 800d2ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800d2ae:	69bb      	ldr	r3, [r7, #24]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d1e5      	bne.n	800d280 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d2b4:	2300      	movs	r3, #0
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3758      	adds	r7, #88	; 0x58
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}
 800d2be:	bf00      	nop
 800d2c0:	0800d4cf 	.word	0x0800d4cf
 800d2c4:	0800d5f1 	.word	0x0800d5f1
 800d2c8:	0800d629 	.word	0x0800d629

0800d2cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b08f      	sub	sp, #60	; 0x3c
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2da:	6a3b      	ldr	r3, [r7, #32]
 800d2dc:	e853 3f00 	ldrex	r3, [r3]
 800d2e0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d2e2:	69fb      	ldr	r3, [r7, #28]
 800d2e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d2e8:	637b      	str	r3, [r7, #52]	; 0x34
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2f4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2fa:	e841 2300 	strex	r3, r2, [r1]
 800d2fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d302:	2b00      	cmp	r3, #0
 800d304:	d1e6      	bne.n	800d2d4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	3308      	adds	r3, #8
 800d30c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	e853 3f00 	ldrex	r3, [r3]
 800d314:	60bb      	str	r3, [r7, #8]
   return(result);
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d31c:	633b      	str	r3, [r7, #48]	; 0x30
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	3308      	adds	r3, #8
 800d324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d326:	61ba      	str	r2, [r7, #24]
 800d328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d32a:	6979      	ldr	r1, [r7, #20]
 800d32c:	69ba      	ldr	r2, [r7, #24]
 800d32e:	e841 2300 	strex	r3, r2, [r1]
 800d332:	613b      	str	r3, [r7, #16]
   return(result);
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d1e5      	bne.n	800d306 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2220      	movs	r2, #32
 800d33e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d342:	bf00      	nop
 800d344:	373c      	adds	r7, #60	; 0x3c
 800d346:	46bd      	mov	sp, r7
 800d348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34c:	4770      	bx	lr
	...

0800d350 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d350:	b480      	push	{r7}
 800d352:	b095      	sub	sp, #84	; 0x54
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d360:	e853 3f00 	ldrex	r3, [r3]
 800d364:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d368:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d36c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	461a      	mov	r2, r3
 800d374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d376:	643b      	str	r3, [r7, #64]	; 0x40
 800d378:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d37a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d37c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d37e:	e841 2300 	strex	r3, r2, [r1]
 800d382:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d386:	2b00      	cmp	r3, #0
 800d388:	d1e6      	bne.n	800d358 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	3308      	adds	r3, #8
 800d390:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d392:	6a3b      	ldr	r3, [r7, #32]
 800d394:	e853 3f00 	ldrex	r3, [r3]
 800d398:	61fb      	str	r3, [r7, #28]
   return(result);
 800d39a:	69fa      	ldr	r2, [r7, #28]
 800d39c:	4b1e      	ldr	r3, [pc, #120]	; (800d418 <UART_EndRxTransfer+0xc8>)
 800d39e:	4013      	ands	r3, r2
 800d3a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	3308      	adds	r3, #8
 800d3a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d3ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3b2:	e841 2300 	strex	r3, r2, [r1]
 800d3b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d1e5      	bne.n	800d38a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d118      	bne.n	800d3f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	e853 3f00 	ldrex	r3, [r3]
 800d3d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	f023 0310 	bic.w	r3, r3, #16
 800d3da:	647b      	str	r3, [r7, #68]	; 0x44
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	461a      	mov	r2, r3
 800d3e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3e4:	61bb      	str	r3, [r7, #24]
 800d3e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e8:	6979      	ldr	r1, [r7, #20]
 800d3ea:	69ba      	ldr	r2, [r7, #24]
 800d3ec:	e841 2300 	strex	r3, r2, [r1]
 800d3f0:	613b      	str	r3, [r7, #16]
   return(result);
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d1e6      	bne.n	800d3c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2220      	movs	r2, #32
 800d3fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2200      	movs	r2, #0
 800d404:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2200      	movs	r2, #0
 800d40a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d40c:	bf00      	nop
 800d40e:	3754      	adds	r7, #84	; 0x54
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr
 800d418:	effffffe 	.word	0xeffffffe

0800d41c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b090      	sub	sp, #64	; 0x40
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d428:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	69db      	ldr	r3, [r3, #28]
 800d42e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d432:	d037      	beq.n	800d4a4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d436:	2200      	movs	r2, #0
 800d438:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	3308      	adds	r3, #8
 800d442:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d446:	e853 3f00 	ldrex	r3, [r3]
 800d44a:	623b      	str	r3, [r7, #32]
   return(result);
 800d44c:	6a3b      	ldr	r3, [r7, #32]
 800d44e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d452:	63bb      	str	r3, [r7, #56]	; 0x38
 800d454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	3308      	adds	r3, #8
 800d45a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d45c:	633a      	str	r2, [r7, #48]	; 0x30
 800d45e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d460:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d464:	e841 2300 	strex	r3, r2, [r1]
 800d468:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d1e5      	bne.n	800d43c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	e853 3f00 	ldrex	r3, [r3]
 800d47c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d484:	637b      	str	r3, [r7, #52]	; 0x34
 800d486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	461a      	mov	r2, r3
 800d48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d48e:	61fb      	str	r3, [r7, #28]
 800d490:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d492:	69b9      	ldr	r1, [r7, #24]
 800d494:	69fa      	ldr	r2, [r7, #28]
 800d496:	e841 2300 	strex	r3, r2, [r1]
 800d49a:	617b      	str	r3, [r7, #20]
   return(result);
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d1e6      	bne.n	800d470 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d4a2:	e002      	b.n	800d4aa <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d4a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d4a6:	f7f5 fd65 	bl	8002f74 <HAL_UART_TxCpltCallback>
}
 800d4aa:	bf00      	nop
 800d4ac:	3740      	adds	r7, #64	; 0x40
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}

0800d4b2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d4b2:	b580      	push	{r7, lr}
 800d4b4:	b084      	sub	sp, #16
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4be:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d4c0:	68f8      	ldr	r0, [r7, #12]
 800d4c2:	f7fe fe0f 	bl	800c0e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4c6:	bf00      	nop
 800d4c8:	3710      	adds	r7, #16
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}

0800d4ce <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d4ce:	b580      	push	{r7, lr}
 800d4d0:	b09c      	sub	sp, #112	; 0x70
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4da:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	69db      	ldr	r3, [r3, #28]
 800d4e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4e4:	d071      	beq.n	800d5ca <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d4e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d4ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4f6:	e853 3f00 	ldrex	r3, [r3]
 800d4fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d4fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d502:	66bb      	str	r3, [r7, #104]	; 0x68
 800d504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	461a      	mov	r2, r3
 800d50a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d50c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d50e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d510:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d512:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d514:	e841 2300 	strex	r3, r2, [r1]
 800d518:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d51a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d1e6      	bne.n	800d4ee <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	3308      	adds	r3, #8
 800d526:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d52a:	e853 3f00 	ldrex	r3, [r3]
 800d52e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d532:	f023 0301 	bic.w	r3, r3, #1
 800d536:	667b      	str	r3, [r7, #100]	; 0x64
 800d538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	3308      	adds	r3, #8
 800d53e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d540:	647a      	str	r2, [r7, #68]	; 0x44
 800d542:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d544:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d546:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d548:	e841 2300 	strex	r3, r2, [r1]
 800d54c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d54e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d550:	2b00      	cmp	r3, #0
 800d552:	d1e5      	bne.n	800d520 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	3308      	adds	r3, #8
 800d55a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55e:	e853 3f00 	ldrex	r3, [r3]
 800d562:	623b      	str	r3, [r7, #32]
   return(result);
 800d564:	6a3b      	ldr	r3, [r7, #32]
 800d566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d56a:	663b      	str	r3, [r7, #96]	; 0x60
 800d56c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	3308      	adds	r3, #8
 800d572:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d574:	633a      	str	r2, [r7, #48]	; 0x30
 800d576:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d578:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d57a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d57c:	e841 2300 	strex	r3, r2, [r1]
 800d580:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d584:	2b00      	cmp	r3, #0
 800d586:	d1e5      	bne.n	800d554 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d58a:	2220      	movs	r2, #32
 800d58c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d594:	2b01      	cmp	r3, #1
 800d596:	d118      	bne.n	800d5ca <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	e853 3f00 	ldrex	r3, [r3]
 800d5a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f023 0310 	bic.w	r3, r3, #16
 800d5ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d5ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5b6:	61fb      	str	r3, [r7, #28]
 800d5b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ba:	69b9      	ldr	r1, [r7, #24]
 800d5bc:	69fa      	ldr	r2, [r7, #28]
 800d5be:	e841 2300 	strex	r3, r2, [r1]
 800d5c2:	617b      	str	r3, [r7, #20]
   return(result);
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d1e6      	bne.n	800d598 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5ce:	2b01      	cmp	r3, #1
 800d5d0:	d107      	bne.n	800d5e2 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d5d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d5d8:	4619      	mov	r1, r3
 800d5da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d5dc:	f7fe fda0 	bl	800c120 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d5e0:	e002      	b.n	800d5e8 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800d5e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d5e4:	f7f5 fcd8 	bl	8002f98 <HAL_UART_RxCpltCallback>
}
 800d5e8:	bf00      	nop
 800d5ea:	3770      	adds	r7, #112	; 0x70
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5fc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d602:	2b01      	cmp	r3, #1
 800d604:	d109      	bne.n	800d61a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d60c:	085b      	lsrs	r3, r3, #1
 800d60e:	b29b      	uxth	r3, r3
 800d610:	4619      	mov	r1, r3
 800d612:	68f8      	ldr	r0, [r7, #12]
 800d614:	f7fe fd84 	bl	800c120 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d618:	e002      	b.n	800d620 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d61a:	68f8      	ldr	r0, [r7, #12]
 800d61c:	f7fe fd6c 	bl	800c0f8 <HAL_UART_RxHalfCpltCallback>
}
 800d620:	bf00      	nop
 800d622:	3710      	adds	r7, #16
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}

0800d628 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b086      	sub	sp, #24
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d634:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d63c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d644:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	689b      	ldr	r3, [r3, #8]
 800d64c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d650:	2b80      	cmp	r3, #128	; 0x80
 800d652:	d109      	bne.n	800d668 <UART_DMAError+0x40>
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	2b21      	cmp	r3, #33	; 0x21
 800d658:	d106      	bne.n	800d668 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	2200      	movs	r2, #0
 800d65e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d662:	6978      	ldr	r0, [r7, #20]
 800d664:	f7ff fe32 	bl	800d2cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	689b      	ldr	r3, [r3, #8]
 800d66e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d672:	2b40      	cmp	r3, #64	; 0x40
 800d674:	d109      	bne.n	800d68a <UART_DMAError+0x62>
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2b22      	cmp	r3, #34	; 0x22
 800d67a:	d106      	bne.n	800d68a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	2200      	movs	r2, #0
 800d680:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d684:	6978      	ldr	r0, [r7, #20]
 800d686:	f7ff fe63 	bl	800d350 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d690:	f043 0210 	orr.w	r2, r3, #16
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d69a:	6978      	ldr	r0, [r7, #20]
 800d69c:	f7fe fd36 	bl	800c10c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6a0:	bf00      	nop
 800d6a2:	3718      	adds	r7, #24
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d6c6:	68f8      	ldr	r0, [r7, #12]
 800d6c8:	f7fe fd20 	bl	800c10c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6cc:	bf00      	nop
 800d6ce:	3710      	adds	r7, #16
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}

0800d6d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b088      	sub	sp, #32
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	e853 3f00 	ldrex	r3, [r3]
 800d6e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6f0:	61fb      	str	r3, [r7, #28]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	61bb      	str	r3, [r7, #24]
 800d6fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6fe:	6979      	ldr	r1, [r7, #20]
 800d700:	69ba      	ldr	r2, [r7, #24]
 800d702:	e841 2300 	strex	r3, r2, [r1]
 800d706:	613b      	str	r3, [r7, #16]
   return(result);
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d1e6      	bne.n	800d6dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2220      	movs	r2, #32
 800d712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2200      	movs	r2, #0
 800d71a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f7f5 fc29 	bl	8002f74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d722:	bf00      	nop
 800d724:	3720      	adds	r7, #32
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}

0800d72a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d72a:	b480      	push	{r7}
 800d72c:	b083      	sub	sp, #12
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d732:	bf00      	nop
 800d734:	370c      	adds	r7, #12
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr

0800d73e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d73e:	b480      	push	{r7}
 800d740:	b083      	sub	sp, #12
 800d742:	af00      	add	r7, sp, #0
 800d744:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d746:	bf00      	nop
 800d748:	370c      	adds	r7, #12
 800d74a:	46bd      	mov	sp, r7
 800d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d750:	4770      	bx	lr

0800d752 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d752:	b480      	push	{r7}
 800d754:	b083      	sub	sp, #12
 800d756:	af00      	add	r7, sp, #0
 800d758:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d75a:	bf00      	nop
 800d75c:	370c      	adds	r7, #12
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr

0800d766 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d766:	b480      	push	{r7}
 800d768:	b085      	sub	sp, #20
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d774:	2b01      	cmp	r3, #1
 800d776:	d101      	bne.n	800d77c <HAL_UARTEx_DisableFifoMode+0x16>
 800d778:	2302      	movs	r3, #2
 800d77a:	e027      	b.n	800d7cc <HAL_UARTEx_DisableFifoMode+0x66>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2201      	movs	r2, #1
 800d780:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2224      	movs	r2, #36	; 0x24
 800d788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	681a      	ldr	r2, [r3, #0]
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f022 0201 	bic.w	r2, r2, #1
 800d7a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d7aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	68fa      	ldr	r2, [r7, #12]
 800d7b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2220      	movs	r2, #32
 800d7be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d7ca:	2300      	movs	r3, #0
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3714      	adds	r7, #20
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr

0800d7d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	d101      	bne.n	800d7f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d7ec:	2302      	movs	r3, #2
 800d7ee:	e02d      	b.n	800d84c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2224      	movs	r2, #36	; 0x24
 800d7fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f022 0201 	bic.w	r2, r2, #1
 800d816:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	689b      	ldr	r3, [r3, #8]
 800d81e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	683a      	ldr	r2, [r7, #0]
 800d828:	430a      	orrs	r2, r1
 800d82a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f000 f84f 	bl	800d8d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	68fa      	ldr	r2, [r7, #12]
 800d838:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2220      	movs	r2, #32
 800d83e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2200      	movs	r2, #0
 800d846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d84a:	2300      	movs	r3, #0
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3710      	adds	r7, #16
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d864:	2b01      	cmp	r3, #1
 800d866:	d101      	bne.n	800d86c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d868:	2302      	movs	r3, #2
 800d86a:	e02d      	b.n	800d8c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2201      	movs	r2, #1
 800d870:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2224      	movs	r2, #36	; 0x24
 800d878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f022 0201 	bic.w	r2, r2, #1
 800d892:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	689b      	ldr	r3, [r3, #8]
 800d89a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	683a      	ldr	r2, [r7, #0]
 800d8a4:	430a      	orrs	r2, r1
 800d8a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 f811 	bl	800d8d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	68fa      	ldr	r2, [r7, #12]
 800d8b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2220      	movs	r2, #32
 800d8ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d8c6:	2300      	movs	r3, #0
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3710      	adds	r7, #16
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b085      	sub	sp, #20
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d108      	bne.n	800d8f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d8f0:	e031      	b.n	800d956 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d8f2:	2310      	movs	r3, #16
 800d8f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d8f6:	2310      	movs	r3, #16
 800d8f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	689b      	ldr	r3, [r3, #8]
 800d900:	0e5b      	lsrs	r3, r3, #25
 800d902:	b2db      	uxtb	r3, r3
 800d904:	f003 0307 	and.w	r3, r3, #7
 800d908:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	689b      	ldr	r3, [r3, #8]
 800d910:	0f5b      	lsrs	r3, r3, #29
 800d912:	b2db      	uxtb	r3, r3
 800d914:	f003 0307 	and.w	r3, r3, #7
 800d918:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d91a:	7bbb      	ldrb	r3, [r7, #14]
 800d91c:	7b3a      	ldrb	r2, [r7, #12]
 800d91e:	4911      	ldr	r1, [pc, #68]	; (800d964 <UARTEx_SetNbDataToProcess+0x94>)
 800d920:	5c8a      	ldrb	r2, [r1, r2]
 800d922:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d926:	7b3a      	ldrb	r2, [r7, #12]
 800d928:	490f      	ldr	r1, [pc, #60]	; (800d968 <UARTEx_SetNbDataToProcess+0x98>)
 800d92a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d92c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d930:	b29a      	uxth	r2, r3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d938:	7bfb      	ldrb	r3, [r7, #15]
 800d93a:	7b7a      	ldrb	r2, [r7, #13]
 800d93c:	4909      	ldr	r1, [pc, #36]	; (800d964 <UARTEx_SetNbDataToProcess+0x94>)
 800d93e:	5c8a      	ldrb	r2, [r1, r2]
 800d940:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d944:	7b7a      	ldrb	r2, [r7, #13]
 800d946:	4908      	ldr	r1, [pc, #32]	; (800d968 <UARTEx_SetNbDataToProcess+0x98>)
 800d948:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d94a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d94e:	b29a      	uxth	r2, r3
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d956:	bf00      	nop
 800d958:	3714      	adds	r7, #20
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr
 800d962:	bf00      	nop
 800d964:	0800dfdc 	.word	0x0800dfdc
 800d968:	0800dfe4 	.word	0x0800dfe4

0800d96c <__cxa_pure_virtual>:
 800d96c:	b508      	push	{r3, lr}
 800d96e:	f000 f80d 	bl	800d98c <_ZSt9terminatev>

0800d972 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800d972:	b508      	push	{r3, lr}
 800d974:	4780      	blx	r0
 800d976:	f000 f80e 	bl	800d996 <abort>
	...

0800d97c <_ZSt13get_terminatev>:
 800d97c:	4b02      	ldr	r3, [pc, #8]	; (800d988 <_ZSt13get_terminatev+0xc>)
 800d97e:	6818      	ldr	r0, [r3, #0]
 800d980:	f3bf 8f5b 	dmb	ish
 800d984:	4770      	bx	lr
 800d986:	bf00      	nop
 800d988:	24000014 	.word	0x24000014

0800d98c <_ZSt9terminatev>:
 800d98c:	b508      	push	{r3, lr}
 800d98e:	f7ff fff5 	bl	800d97c <_ZSt13get_terminatev>
 800d992:	f7ff ffee 	bl	800d972 <_ZN10__cxxabiv111__terminateEPFvvE>

0800d996 <abort>:
 800d996:	b508      	push	{r3, lr}
 800d998:	2006      	movs	r0, #6
 800d99a:	f000 f873 	bl	800da84 <raise>
 800d99e:	2001      	movs	r0, #1
 800d9a0:	f7f6 fd5e 	bl	8004460 <_exit>

0800d9a4 <__errno>:
 800d9a4:	4b01      	ldr	r3, [pc, #4]	; (800d9ac <__errno+0x8>)
 800d9a6:	6818      	ldr	r0, [r3, #0]
 800d9a8:	4770      	bx	lr
 800d9aa:	bf00      	nop
 800d9ac:	24000018 	.word	0x24000018

0800d9b0 <__libc_init_array>:
 800d9b0:	b570      	push	{r4, r5, r6, lr}
 800d9b2:	4d0d      	ldr	r5, [pc, #52]	; (800d9e8 <__libc_init_array+0x38>)
 800d9b4:	4c0d      	ldr	r4, [pc, #52]	; (800d9ec <__libc_init_array+0x3c>)
 800d9b6:	1b64      	subs	r4, r4, r5
 800d9b8:	10a4      	asrs	r4, r4, #2
 800d9ba:	2600      	movs	r6, #0
 800d9bc:	42a6      	cmp	r6, r4
 800d9be:	d109      	bne.n	800d9d4 <__libc_init_array+0x24>
 800d9c0:	4d0b      	ldr	r5, [pc, #44]	; (800d9f0 <__libc_init_array+0x40>)
 800d9c2:	4c0c      	ldr	r4, [pc, #48]	; (800d9f4 <__libc_init_array+0x44>)
 800d9c4:	f000 f9b0 	bl	800dd28 <_init>
 800d9c8:	1b64      	subs	r4, r4, r5
 800d9ca:	10a4      	asrs	r4, r4, #2
 800d9cc:	2600      	movs	r6, #0
 800d9ce:	42a6      	cmp	r6, r4
 800d9d0:	d105      	bne.n	800d9de <__libc_init_array+0x2e>
 800d9d2:	bd70      	pop	{r4, r5, r6, pc}
 800d9d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9d8:	4798      	blx	r3
 800d9da:	3601      	adds	r6, #1
 800d9dc:	e7ee      	b.n	800d9bc <__libc_init_array+0xc>
 800d9de:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9e2:	4798      	blx	r3
 800d9e4:	3601      	adds	r6, #1
 800d9e6:	e7f2      	b.n	800d9ce <__libc_init_array+0x1e>
 800d9e8:	0800dff4 	.word	0x0800dff4
 800d9ec:	0800dff4 	.word	0x0800dff4
 800d9f0:	0800dff4 	.word	0x0800dff4
 800d9f4:	0800e004 	.word	0x0800e004

0800d9f8 <memcpy>:
 800d9f8:	440a      	add	r2, r1
 800d9fa:	4291      	cmp	r1, r2
 800d9fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800da00:	d100      	bne.n	800da04 <memcpy+0xc>
 800da02:	4770      	bx	lr
 800da04:	b510      	push	{r4, lr}
 800da06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da0e:	4291      	cmp	r1, r2
 800da10:	d1f9      	bne.n	800da06 <memcpy+0xe>
 800da12:	bd10      	pop	{r4, pc}

0800da14 <memset>:
 800da14:	4402      	add	r2, r0
 800da16:	4603      	mov	r3, r0
 800da18:	4293      	cmp	r3, r2
 800da1a:	d100      	bne.n	800da1e <memset+0xa>
 800da1c:	4770      	bx	lr
 800da1e:	f803 1b01 	strb.w	r1, [r3], #1
 800da22:	e7f9      	b.n	800da18 <memset+0x4>

0800da24 <realloc>:
 800da24:	4b02      	ldr	r3, [pc, #8]	; (800da30 <realloc+0xc>)
 800da26:	460a      	mov	r2, r1
 800da28:	4601      	mov	r1, r0
 800da2a:	6818      	ldr	r0, [r3, #0]
 800da2c:	f000 b8da 	b.w	800dbe4 <_realloc_r>
 800da30:	24000018 	.word	0x24000018

0800da34 <_raise_r>:
 800da34:	291f      	cmp	r1, #31
 800da36:	b538      	push	{r3, r4, r5, lr}
 800da38:	4604      	mov	r4, r0
 800da3a:	460d      	mov	r5, r1
 800da3c:	d904      	bls.n	800da48 <_raise_r+0x14>
 800da3e:	2316      	movs	r3, #22
 800da40:	6003      	str	r3, [r0, #0]
 800da42:	f04f 30ff 	mov.w	r0, #4294967295
 800da46:	bd38      	pop	{r3, r4, r5, pc}
 800da48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da4a:	b112      	cbz	r2, 800da52 <_raise_r+0x1e>
 800da4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da50:	b94b      	cbnz	r3, 800da66 <_raise_r+0x32>
 800da52:	4620      	mov	r0, r4
 800da54:	f000 f830 	bl	800dab8 <_getpid_r>
 800da58:	462a      	mov	r2, r5
 800da5a:	4601      	mov	r1, r0
 800da5c:	4620      	mov	r0, r4
 800da5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da62:	f000 b817 	b.w	800da94 <_kill_r>
 800da66:	2b01      	cmp	r3, #1
 800da68:	d00a      	beq.n	800da80 <_raise_r+0x4c>
 800da6a:	1c59      	adds	r1, r3, #1
 800da6c:	d103      	bne.n	800da76 <_raise_r+0x42>
 800da6e:	2316      	movs	r3, #22
 800da70:	6003      	str	r3, [r0, #0]
 800da72:	2001      	movs	r0, #1
 800da74:	e7e7      	b.n	800da46 <_raise_r+0x12>
 800da76:	2400      	movs	r4, #0
 800da78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da7c:	4628      	mov	r0, r5
 800da7e:	4798      	blx	r3
 800da80:	2000      	movs	r0, #0
 800da82:	e7e0      	b.n	800da46 <_raise_r+0x12>

0800da84 <raise>:
 800da84:	4b02      	ldr	r3, [pc, #8]	; (800da90 <raise+0xc>)
 800da86:	4601      	mov	r1, r0
 800da88:	6818      	ldr	r0, [r3, #0]
 800da8a:	f7ff bfd3 	b.w	800da34 <_raise_r>
 800da8e:	bf00      	nop
 800da90:	24000018 	.word	0x24000018

0800da94 <_kill_r>:
 800da94:	b538      	push	{r3, r4, r5, lr}
 800da96:	4d07      	ldr	r5, [pc, #28]	; (800dab4 <_kill_r+0x20>)
 800da98:	2300      	movs	r3, #0
 800da9a:	4604      	mov	r4, r0
 800da9c:	4608      	mov	r0, r1
 800da9e:	4611      	mov	r1, r2
 800daa0:	602b      	str	r3, [r5, #0]
 800daa2:	f7f6 fccd 	bl	8004440 <_kill>
 800daa6:	1c43      	adds	r3, r0, #1
 800daa8:	d102      	bne.n	800dab0 <_kill_r+0x1c>
 800daaa:	682b      	ldr	r3, [r5, #0]
 800daac:	b103      	cbz	r3, 800dab0 <_kill_r+0x1c>
 800daae:	6023      	str	r3, [r4, #0]
 800dab0:	bd38      	pop	{r3, r4, r5, pc}
 800dab2:	bf00      	nop
 800dab4:	24001800 	.word	0x24001800

0800dab8 <_getpid_r>:
 800dab8:	f7f6 bcba 	b.w	8004430 <_getpid>

0800dabc <sbrk_aligned>:
 800dabc:	b570      	push	{r4, r5, r6, lr}
 800dabe:	4e0e      	ldr	r6, [pc, #56]	; (800daf8 <sbrk_aligned+0x3c>)
 800dac0:	460c      	mov	r4, r1
 800dac2:	6831      	ldr	r1, [r6, #0]
 800dac4:	4605      	mov	r5, r0
 800dac6:	b911      	cbnz	r1, 800dace <sbrk_aligned+0x12>
 800dac8:	f000 f8bc 	bl	800dc44 <_sbrk_r>
 800dacc:	6030      	str	r0, [r6, #0]
 800dace:	4621      	mov	r1, r4
 800dad0:	4628      	mov	r0, r5
 800dad2:	f000 f8b7 	bl	800dc44 <_sbrk_r>
 800dad6:	1c43      	adds	r3, r0, #1
 800dad8:	d00a      	beq.n	800daf0 <sbrk_aligned+0x34>
 800dada:	1cc4      	adds	r4, r0, #3
 800dadc:	f024 0403 	bic.w	r4, r4, #3
 800dae0:	42a0      	cmp	r0, r4
 800dae2:	d007      	beq.n	800daf4 <sbrk_aligned+0x38>
 800dae4:	1a21      	subs	r1, r4, r0
 800dae6:	4628      	mov	r0, r5
 800dae8:	f000 f8ac 	bl	800dc44 <_sbrk_r>
 800daec:	3001      	adds	r0, #1
 800daee:	d101      	bne.n	800daf4 <sbrk_aligned+0x38>
 800daf0:	f04f 34ff 	mov.w	r4, #4294967295
 800daf4:	4620      	mov	r0, r4
 800daf6:	bd70      	pop	{r4, r5, r6, pc}
 800daf8:	240017fc 	.word	0x240017fc

0800dafc <_malloc_r>:
 800dafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db00:	1ccd      	adds	r5, r1, #3
 800db02:	f025 0503 	bic.w	r5, r5, #3
 800db06:	3508      	adds	r5, #8
 800db08:	2d0c      	cmp	r5, #12
 800db0a:	bf38      	it	cc
 800db0c:	250c      	movcc	r5, #12
 800db0e:	2d00      	cmp	r5, #0
 800db10:	4607      	mov	r7, r0
 800db12:	db01      	blt.n	800db18 <_malloc_r+0x1c>
 800db14:	42a9      	cmp	r1, r5
 800db16:	d905      	bls.n	800db24 <_malloc_r+0x28>
 800db18:	230c      	movs	r3, #12
 800db1a:	603b      	str	r3, [r7, #0]
 800db1c:	2600      	movs	r6, #0
 800db1e:	4630      	mov	r0, r6
 800db20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db24:	4e2e      	ldr	r6, [pc, #184]	; (800dbe0 <_malloc_r+0xe4>)
 800db26:	f000 f89d 	bl	800dc64 <__malloc_lock>
 800db2a:	6833      	ldr	r3, [r6, #0]
 800db2c:	461c      	mov	r4, r3
 800db2e:	bb34      	cbnz	r4, 800db7e <_malloc_r+0x82>
 800db30:	4629      	mov	r1, r5
 800db32:	4638      	mov	r0, r7
 800db34:	f7ff ffc2 	bl	800dabc <sbrk_aligned>
 800db38:	1c43      	adds	r3, r0, #1
 800db3a:	4604      	mov	r4, r0
 800db3c:	d14d      	bne.n	800dbda <_malloc_r+0xde>
 800db3e:	6834      	ldr	r4, [r6, #0]
 800db40:	4626      	mov	r6, r4
 800db42:	2e00      	cmp	r6, #0
 800db44:	d140      	bne.n	800dbc8 <_malloc_r+0xcc>
 800db46:	6823      	ldr	r3, [r4, #0]
 800db48:	4631      	mov	r1, r6
 800db4a:	4638      	mov	r0, r7
 800db4c:	eb04 0803 	add.w	r8, r4, r3
 800db50:	f000 f878 	bl	800dc44 <_sbrk_r>
 800db54:	4580      	cmp	r8, r0
 800db56:	d13a      	bne.n	800dbce <_malloc_r+0xd2>
 800db58:	6821      	ldr	r1, [r4, #0]
 800db5a:	3503      	adds	r5, #3
 800db5c:	1a6d      	subs	r5, r5, r1
 800db5e:	f025 0503 	bic.w	r5, r5, #3
 800db62:	3508      	adds	r5, #8
 800db64:	2d0c      	cmp	r5, #12
 800db66:	bf38      	it	cc
 800db68:	250c      	movcc	r5, #12
 800db6a:	4629      	mov	r1, r5
 800db6c:	4638      	mov	r0, r7
 800db6e:	f7ff ffa5 	bl	800dabc <sbrk_aligned>
 800db72:	3001      	adds	r0, #1
 800db74:	d02b      	beq.n	800dbce <_malloc_r+0xd2>
 800db76:	6823      	ldr	r3, [r4, #0]
 800db78:	442b      	add	r3, r5
 800db7a:	6023      	str	r3, [r4, #0]
 800db7c:	e00e      	b.n	800db9c <_malloc_r+0xa0>
 800db7e:	6822      	ldr	r2, [r4, #0]
 800db80:	1b52      	subs	r2, r2, r5
 800db82:	d41e      	bmi.n	800dbc2 <_malloc_r+0xc6>
 800db84:	2a0b      	cmp	r2, #11
 800db86:	d916      	bls.n	800dbb6 <_malloc_r+0xba>
 800db88:	1961      	adds	r1, r4, r5
 800db8a:	42a3      	cmp	r3, r4
 800db8c:	6025      	str	r5, [r4, #0]
 800db8e:	bf18      	it	ne
 800db90:	6059      	strne	r1, [r3, #4]
 800db92:	6863      	ldr	r3, [r4, #4]
 800db94:	bf08      	it	eq
 800db96:	6031      	streq	r1, [r6, #0]
 800db98:	5162      	str	r2, [r4, r5]
 800db9a:	604b      	str	r3, [r1, #4]
 800db9c:	4638      	mov	r0, r7
 800db9e:	f104 060b 	add.w	r6, r4, #11
 800dba2:	f000 f865 	bl	800dc70 <__malloc_unlock>
 800dba6:	f026 0607 	bic.w	r6, r6, #7
 800dbaa:	1d23      	adds	r3, r4, #4
 800dbac:	1af2      	subs	r2, r6, r3
 800dbae:	d0b6      	beq.n	800db1e <_malloc_r+0x22>
 800dbb0:	1b9b      	subs	r3, r3, r6
 800dbb2:	50a3      	str	r3, [r4, r2]
 800dbb4:	e7b3      	b.n	800db1e <_malloc_r+0x22>
 800dbb6:	6862      	ldr	r2, [r4, #4]
 800dbb8:	42a3      	cmp	r3, r4
 800dbba:	bf0c      	ite	eq
 800dbbc:	6032      	streq	r2, [r6, #0]
 800dbbe:	605a      	strne	r2, [r3, #4]
 800dbc0:	e7ec      	b.n	800db9c <_malloc_r+0xa0>
 800dbc2:	4623      	mov	r3, r4
 800dbc4:	6864      	ldr	r4, [r4, #4]
 800dbc6:	e7b2      	b.n	800db2e <_malloc_r+0x32>
 800dbc8:	4634      	mov	r4, r6
 800dbca:	6876      	ldr	r6, [r6, #4]
 800dbcc:	e7b9      	b.n	800db42 <_malloc_r+0x46>
 800dbce:	230c      	movs	r3, #12
 800dbd0:	603b      	str	r3, [r7, #0]
 800dbd2:	4638      	mov	r0, r7
 800dbd4:	f000 f84c 	bl	800dc70 <__malloc_unlock>
 800dbd8:	e7a1      	b.n	800db1e <_malloc_r+0x22>
 800dbda:	6025      	str	r5, [r4, #0]
 800dbdc:	e7de      	b.n	800db9c <_malloc_r+0xa0>
 800dbde:	bf00      	nop
 800dbe0:	240017f8 	.word	0x240017f8

0800dbe4 <_realloc_r>:
 800dbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe8:	4680      	mov	r8, r0
 800dbea:	4614      	mov	r4, r2
 800dbec:	460e      	mov	r6, r1
 800dbee:	b921      	cbnz	r1, 800dbfa <_realloc_r+0x16>
 800dbf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbf4:	4611      	mov	r1, r2
 800dbf6:	f7ff bf81 	b.w	800dafc <_malloc_r>
 800dbfa:	b92a      	cbnz	r2, 800dc08 <_realloc_r+0x24>
 800dbfc:	f000 f83e 	bl	800dc7c <_free_r>
 800dc00:	4625      	mov	r5, r4
 800dc02:	4628      	mov	r0, r5
 800dc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc08:	f000 f884 	bl	800dd14 <_malloc_usable_size_r>
 800dc0c:	4284      	cmp	r4, r0
 800dc0e:	4607      	mov	r7, r0
 800dc10:	d802      	bhi.n	800dc18 <_realloc_r+0x34>
 800dc12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dc16:	d812      	bhi.n	800dc3e <_realloc_r+0x5a>
 800dc18:	4621      	mov	r1, r4
 800dc1a:	4640      	mov	r0, r8
 800dc1c:	f7ff ff6e 	bl	800dafc <_malloc_r>
 800dc20:	4605      	mov	r5, r0
 800dc22:	2800      	cmp	r0, #0
 800dc24:	d0ed      	beq.n	800dc02 <_realloc_r+0x1e>
 800dc26:	42bc      	cmp	r4, r7
 800dc28:	4622      	mov	r2, r4
 800dc2a:	4631      	mov	r1, r6
 800dc2c:	bf28      	it	cs
 800dc2e:	463a      	movcs	r2, r7
 800dc30:	f7ff fee2 	bl	800d9f8 <memcpy>
 800dc34:	4631      	mov	r1, r6
 800dc36:	4640      	mov	r0, r8
 800dc38:	f000 f820 	bl	800dc7c <_free_r>
 800dc3c:	e7e1      	b.n	800dc02 <_realloc_r+0x1e>
 800dc3e:	4635      	mov	r5, r6
 800dc40:	e7df      	b.n	800dc02 <_realloc_r+0x1e>
	...

0800dc44 <_sbrk_r>:
 800dc44:	b538      	push	{r3, r4, r5, lr}
 800dc46:	4d06      	ldr	r5, [pc, #24]	; (800dc60 <_sbrk_r+0x1c>)
 800dc48:	2300      	movs	r3, #0
 800dc4a:	4604      	mov	r4, r0
 800dc4c:	4608      	mov	r0, r1
 800dc4e:	602b      	str	r3, [r5, #0]
 800dc50:	f7f6 fc10 	bl	8004474 <_sbrk>
 800dc54:	1c43      	adds	r3, r0, #1
 800dc56:	d102      	bne.n	800dc5e <_sbrk_r+0x1a>
 800dc58:	682b      	ldr	r3, [r5, #0]
 800dc5a:	b103      	cbz	r3, 800dc5e <_sbrk_r+0x1a>
 800dc5c:	6023      	str	r3, [r4, #0]
 800dc5e:	bd38      	pop	{r3, r4, r5, pc}
 800dc60:	24001800 	.word	0x24001800

0800dc64 <__malloc_lock>:
 800dc64:	4801      	ldr	r0, [pc, #4]	; (800dc6c <__malloc_lock+0x8>)
 800dc66:	f000 b85d 	b.w	800dd24 <__retarget_lock_acquire_recursive>
 800dc6a:	bf00      	nop
 800dc6c:	24001804 	.word	0x24001804

0800dc70 <__malloc_unlock>:
 800dc70:	4801      	ldr	r0, [pc, #4]	; (800dc78 <__malloc_unlock+0x8>)
 800dc72:	f000 b858 	b.w	800dd26 <__retarget_lock_release_recursive>
 800dc76:	bf00      	nop
 800dc78:	24001804 	.word	0x24001804

0800dc7c <_free_r>:
 800dc7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc7e:	2900      	cmp	r1, #0
 800dc80:	d044      	beq.n	800dd0c <_free_r+0x90>
 800dc82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc86:	9001      	str	r0, [sp, #4]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	f1a1 0404 	sub.w	r4, r1, #4
 800dc8e:	bfb8      	it	lt
 800dc90:	18e4      	addlt	r4, r4, r3
 800dc92:	f7ff ffe7 	bl	800dc64 <__malloc_lock>
 800dc96:	4a1e      	ldr	r2, [pc, #120]	; (800dd10 <_free_r+0x94>)
 800dc98:	9801      	ldr	r0, [sp, #4]
 800dc9a:	6813      	ldr	r3, [r2, #0]
 800dc9c:	b933      	cbnz	r3, 800dcac <_free_r+0x30>
 800dc9e:	6063      	str	r3, [r4, #4]
 800dca0:	6014      	str	r4, [r2, #0]
 800dca2:	b003      	add	sp, #12
 800dca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dca8:	f7ff bfe2 	b.w	800dc70 <__malloc_unlock>
 800dcac:	42a3      	cmp	r3, r4
 800dcae:	d908      	bls.n	800dcc2 <_free_r+0x46>
 800dcb0:	6825      	ldr	r5, [r4, #0]
 800dcb2:	1961      	adds	r1, r4, r5
 800dcb4:	428b      	cmp	r3, r1
 800dcb6:	bf01      	itttt	eq
 800dcb8:	6819      	ldreq	r1, [r3, #0]
 800dcba:	685b      	ldreq	r3, [r3, #4]
 800dcbc:	1949      	addeq	r1, r1, r5
 800dcbe:	6021      	streq	r1, [r4, #0]
 800dcc0:	e7ed      	b.n	800dc9e <_free_r+0x22>
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	685b      	ldr	r3, [r3, #4]
 800dcc6:	b10b      	cbz	r3, 800dccc <_free_r+0x50>
 800dcc8:	42a3      	cmp	r3, r4
 800dcca:	d9fa      	bls.n	800dcc2 <_free_r+0x46>
 800dccc:	6811      	ldr	r1, [r2, #0]
 800dcce:	1855      	adds	r5, r2, r1
 800dcd0:	42a5      	cmp	r5, r4
 800dcd2:	d10b      	bne.n	800dcec <_free_r+0x70>
 800dcd4:	6824      	ldr	r4, [r4, #0]
 800dcd6:	4421      	add	r1, r4
 800dcd8:	1854      	adds	r4, r2, r1
 800dcda:	42a3      	cmp	r3, r4
 800dcdc:	6011      	str	r1, [r2, #0]
 800dcde:	d1e0      	bne.n	800dca2 <_free_r+0x26>
 800dce0:	681c      	ldr	r4, [r3, #0]
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	6053      	str	r3, [r2, #4]
 800dce6:	4421      	add	r1, r4
 800dce8:	6011      	str	r1, [r2, #0]
 800dcea:	e7da      	b.n	800dca2 <_free_r+0x26>
 800dcec:	d902      	bls.n	800dcf4 <_free_r+0x78>
 800dcee:	230c      	movs	r3, #12
 800dcf0:	6003      	str	r3, [r0, #0]
 800dcf2:	e7d6      	b.n	800dca2 <_free_r+0x26>
 800dcf4:	6825      	ldr	r5, [r4, #0]
 800dcf6:	1961      	adds	r1, r4, r5
 800dcf8:	428b      	cmp	r3, r1
 800dcfa:	bf04      	itt	eq
 800dcfc:	6819      	ldreq	r1, [r3, #0]
 800dcfe:	685b      	ldreq	r3, [r3, #4]
 800dd00:	6063      	str	r3, [r4, #4]
 800dd02:	bf04      	itt	eq
 800dd04:	1949      	addeq	r1, r1, r5
 800dd06:	6021      	streq	r1, [r4, #0]
 800dd08:	6054      	str	r4, [r2, #4]
 800dd0a:	e7ca      	b.n	800dca2 <_free_r+0x26>
 800dd0c:	b003      	add	sp, #12
 800dd0e:	bd30      	pop	{r4, r5, pc}
 800dd10:	240017f8 	.word	0x240017f8

0800dd14 <_malloc_usable_size_r>:
 800dd14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd18:	1f18      	subs	r0, r3, #4
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	bfbc      	itt	lt
 800dd1e:	580b      	ldrlt	r3, [r1, r0]
 800dd20:	18c0      	addlt	r0, r0, r3
 800dd22:	4770      	bx	lr

0800dd24 <__retarget_lock_acquire_recursive>:
 800dd24:	4770      	bx	lr

0800dd26 <__retarget_lock_release_recursive>:
 800dd26:	4770      	bx	lr

0800dd28 <_init>:
 800dd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd2a:	bf00      	nop
 800dd2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd2e:	bc08      	pop	{r3}
 800dd30:	469e      	mov	lr, r3
 800dd32:	4770      	bx	lr

0800dd34 <_fini>:
 800dd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd36:	bf00      	nop
 800dd38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd3a:	bc08      	pop	{r3}
 800dd3c:	469e      	mov	lr, r3
 800dd3e:	4770      	bx	lr
