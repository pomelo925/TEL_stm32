
TEL_STM_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbdc  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  0800deac  0800deac  0001deac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e1b0  0800e1b0  0001e1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000014  0800e1b8  0800e1b8  0001e1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e1cc  0800e1cc  0001e1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800e1d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001088  24000078  0800e248  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001100  0800e248  00021100  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026b5e  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000442c  00000000  00000000  00046c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001568  00000000  00000000  0004b030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001418  00000000  00000000  0004c598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035add  00000000  00000000  0004d9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cf04  00000000  00000000  0008348d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153d4f  00000000  00000000  000a0391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f40e0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005e20  00000000  00000000  001f4130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800de94 	.word	0x0800de94

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800de94 	.word	0x0800de94

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00

0800067c <_Z13DC_motor_initv>:
DC_motor fr(25000,10,0.1,0.0005,512,13.2,200);
DC_motor fl(25000,10,0.1,0.0005,512,13.2,200);
DC_motor br(25000,10,0.1,0.0005,512,13.2,200);
DC_motor bl(25000,10,0.1,0.0005,512,13.2,200);

void DC_motor_init(){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8000680:	2100      	movs	r1, #0
 8000682:	481a      	ldr	r0, [pc, #104]	; (80006ec <_Z13DC_motor_initv+0x70>)
 8000684:	f00a f928 	bl	800a8d8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8000688:	2104      	movs	r1, #4
 800068a:	4818      	ldr	r0, [pc, #96]	; (80006ec <_Z13DC_motor_initv+0x70>)
 800068c:	f00a f924 	bl	800a8d8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 8000690:	2100      	movs	r1, #0
 8000692:	4817      	ldr	r0, [pc, #92]	; (80006f0 <_Z13DC_motor_initv+0x74>)
 8000694:	f00a f920 	bl	800a8d8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 8000698:	2104      	movs	r1, #4
 800069a:	4815      	ldr	r0, [pc, #84]	; (80006f0 <_Z13DC_motor_initv+0x74>)
 800069c:	f00a f91c 	bl	800a8d8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80006a0:	2100      	movs	r1, #0
 80006a2:	4814      	ldr	r0, [pc, #80]	; (80006f4 <_Z13DC_motor_initv+0x78>)
 80006a4:	f00a f918 	bl	800a8d8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80006a8:	2104      	movs	r1, #4
 80006aa:	4812      	ldr	r0, [pc, #72]	; (80006f4 <_Z13DC_motor_initv+0x78>)
 80006ac:	f00a f914 	bl	800a8d8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	4811      	ldr	r0, [pc, #68]	; (80006f8 <_Z13DC_motor_initv+0x7c>)
 80006b4:	f00a f910 	bl	800a8d8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80006b8:	2104      	movs	r1, #4
 80006ba:	480f      	ldr	r0, [pc, #60]	; (80006f8 <_Z13DC_motor_initv+0x7c>)
 80006bc:	f00a f90c 	bl	800a8d8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim13);
 80006c0:	480e      	ldr	r0, [pc, #56]	; (80006fc <_Z13DC_motor_initv+0x80>)
 80006c2:	f009 fe1d 	bl	800a300 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_2);
 80006c6:	2104      	movs	r1, #4
 80006c8:	480d      	ldr	r0, [pc, #52]	; (8000700 <_Z13DC_motor_initv+0x84>)
 80006ca:	f009 fef7 	bl	800a4bc <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 80006ce:	2100      	movs	r1, #0
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <_Z13DC_motor_initv+0x84>)
 80006d2:	f009 fef3 	bl	800a4bc <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_2);
 80006d6:	2104      	movs	r1, #4
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <_Z13DC_motor_initv+0x88>)
 80006da:	f009 feef 	bl	800a4bc <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 80006de:	2100      	movs	r1, #0
 80006e0:	4808      	ldr	r0, [pc, #32]	; (8000704 <_Z13DC_motor_initv+0x88>)
 80006e2:	f009 feeb 	bl	800a4bc <HAL_TIM_PWM_Start_IT>
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	240002dc 	.word	0x240002dc
 80006f0:	240003c0 	.word	0x240003c0
 80006f4:	24000328 	.word	0x24000328
 80006f8:	24000374 	.word	0x24000374
 80006fc:	24000458 	.word	0x24000458
 8000700:	2400040c 	.word	0x2400040c
 8000704:	240004a4 	.word	0x240004a4

08000708 <_ZN8DC_motorC1Eddddddd>:


DC_motor::DC_motor(double p, double i, double d, double time, double res, double ratio, double limit){
 8000708:	b480      	push	{r7}
 800070a:	b091      	sub	sp, #68	; 0x44
 800070c:	af00      	add	r7, sp, #0
 800070e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000710:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 8000714:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 8000718:	ed87 2b08 	vstr	d2, [r7, #32]
 800071c:	ed87 3b06 	vstr	d3, [r7, #24]
 8000720:	ed87 4b04 	vstr	d4, [r7, #16]
 8000724:	ed87 5b02 	vstr	d5, [r7, #8]
 8000728:	ed87 6b00 	vstr	d6, [r7]
 800072c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800072e:	2200      	movs	r2, #0
 8000730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	this->p = p;
 8000734:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000736:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800073a:	e9c1 2300 	strd	r2, r3, [r1]
	this->i = i;
 800073e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000740:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000744:	e9c1 2304 	strd	r2, r3, [r1, #16]
	this->d = d;
 8000748:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800074a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800074e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	this->time = time;
 8000752:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000758:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	this->res_encoder = res;
 800075c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800075e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000762:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	this->sr_ratio = ratio;
 8000766:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000768:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800076c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	this->I_limit=limit;
 8000770:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000772:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000776:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
}
 800077a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800077c:	4618      	mov	r0, r3
 800077e:	3744      	adds	r7, #68	; 0x44
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <_ZN8DC_motor10PIDControlEv>:

void DC_motor::PIDControl(void){
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

	pid_check++;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000796:	1c5a      	adds	r2, r3, #1
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	temp = error;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	rps_now = (double) CountNow / 4 / res_encoder / sr_ratio / time;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80007b0:	ee07 3a90 	vmov	s15, r3
 80007b4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007b8:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80007bc:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80007c6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80007d0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80007da:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	error = rps_goal - rps_now;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80007f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	P = p * error;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	ed93 6b00 	vldr	d6, [r3]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8000806:	ee26 7b07 	vmul.f64	d7, d6, d7
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	ed83 7b02 	vstr	d7, [r3, #8]
	sum = i * error * time;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	ed93 6b04 	vldr	d6, [r3, #16]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800081c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8000826:	ee26 7b07 	vmul.f64	d7, d6, d7
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	I = I + sum;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	ed93 6b06 	vldr	d6, [r3, #24]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800083c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	ed83 7b06 	vstr	d7, [r3, #24]
	if (rps_now == 0) {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800084c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000854:	d106      	bne.n	8000864 <_ZN8DC_motor10PIDControlEv+0xdc>
		I = 0;
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	f04f 0200 	mov.w	r2, #0
 800085c:	f04f 0300 	mov.w	r3, #0
 8000860:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}
	if (I >= I_limit) {
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	ed93 6b06 	vldr	d6, [r3, #24]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 8000870:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000878:	db05      	blt.n	8000886 <_ZN8DC_motor10PIDControlEv+0xfe>
		I = I_limit;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8000880:	6879      	ldr	r1, [r7, #4]
 8000882:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}
	if (I < -I_limit) {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	ed93 6b06 	vldr	d6, [r3, #24]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 8000892:	eeb1 7b47 	vneg.f64	d7, d7
 8000896:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089e:	d507      	bpl.n	80008b0 <_ZN8DC_motor10PIDControlEv+0x128>
		I = -I_limit;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 80008a6:	eeb1 7b47 	vneg.f64	d7, d7
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	ed83 7b06 	vstr	d7, [r3, #24]
	}
	D = d * (error - temp) / time;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	ed93 6b08 	vldr	d6, [r3, #32]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 80008c2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80008c6:	ee26 5b07 	vmul.f64	d5, d6, d7
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80008d0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	PID = P + I + D;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	ed93 6b02 	vldr	d6, [r3, #8]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	ed93 7b06 	vldr	d7, [r3, #24]
 80008e6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80008f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <_Z41__static_initialization_and_destruction_0ii>:
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d148      	bne.n	80009aa <_Z41__static_initialization_and_destruction_0ii+0xa2>
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800091e:	4293      	cmp	r3, r2
 8000920:	d143      	bne.n	80009aa <_Z41__static_initialization_and_destruction_0ii+0xa2>
DC_motor fr(25000,10,0.1,0.0005,512,13.2,200);
 8000922:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80009b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000926:	ed9f 5b26 	vldr	d5, [pc, #152]	; 80009c0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 800092a:	ed9f 4b27 	vldr	d4, [pc, #156]	; 80009c8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 800092e:	ed9f 3b28 	vldr	d3, [pc, #160]	; 80009d0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000932:	ed9f 2b29 	vldr	d2, [pc, #164]	; 80009d8 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8000936:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 800093a:	ed9f 0b29 	vldr	d0, [pc, #164]	; 80009e0 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 800093e:	482a      	ldr	r0, [pc, #168]	; (80009e8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8000940:	f7ff fee2 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
DC_motor fl(25000,10,0.1,0.0005,512,13.2,200);
 8000944:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80009b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000948:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 80009c0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 800094c:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 80009c8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000950:	ed9f 3b1f 	vldr	d3, [pc, #124]	; 80009d0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000954:	ed9f 2b20 	vldr	d2, [pc, #128]	; 80009d8 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8000958:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 800095c:	ed9f 0b20 	vldr	d0, [pc, #128]	; 80009e0 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 8000960:	4822      	ldr	r0, [pc, #136]	; (80009ec <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8000962:	f7ff fed1 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
DC_motor br(25000,10,0.1,0.0005,512,13.2,200);
 8000966:	ed9f 6b14 	vldr	d6, [pc, #80]	; 80009b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800096a:	ed9f 5b15 	vldr	d5, [pc, #84]	; 80009c0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 800096e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80009c8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000972:	ed9f 3b17 	vldr	d3, [pc, #92]	; 80009d0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000976:	ed9f 2b18 	vldr	d2, [pc, #96]	; 80009d8 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 800097a:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 800097e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80009e0 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 8000982:	481b      	ldr	r0, [pc, #108]	; (80009f0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8000984:	f7ff fec0 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
DC_motor bl(25000,10,0.1,0.0005,512,13.2,200);
 8000988:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80009b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800098c:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 80009c0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000990:	ed9f 4b0d 	vldr	d4, [pc, #52]	; 80009c8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000994:	ed9f 3b0e 	vldr	d3, [pc, #56]	; 80009d0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000998:	ed9f 2b0f 	vldr	d2, [pc, #60]	; 80009d8 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 800099c:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 80009a0:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80009e0 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 80009a4:	4813      	ldr	r0, [pc, #76]	; (80009f4 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80009a6:	f7ff feaf 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	f3af 8000 	nop.w
 80009b8:	00000000 	.word	0x00000000
 80009bc:	40690000 	.word	0x40690000
 80009c0:	66666666 	.word	0x66666666
 80009c4:	402a6666 	.word	0x402a6666
 80009c8:	00000000 	.word	0x00000000
 80009cc:	40800000 	.word	0x40800000
 80009d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80009d4:	3f40624d 	.word	0x3f40624d
 80009d8:	9999999a 	.word	0x9999999a
 80009dc:	3fb99999 	.word	0x3fb99999
 80009e0:	00000000 	.word	0x00000000
 80009e4:	40d86a00 	.word	0x40d86a00
 80009e8:	24000098 	.word	0x24000098
 80009ec:	24000128 	.word	0x24000128
 80009f0:	240001b8 	.word	0x240001b8
 80009f4:	24000248 	.word	0x24000248

080009f8 <_GLOBAL__sub_I_fr>:
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a00:	2001      	movs	r0, #1
 8000a02:	f7ff ff81 	bl	8000908 <_Z41__static_initialization_and_destruction_0ii>
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <_Z10debug_loopv>:
#include "debug.h"

bool debug_mode;
void debug_loop(){
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1a:	f003 ffeb 	bl	80049f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1e:	f000 f817 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a22:	f000 fb55 	bl	80010d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a26:	f000 f883 	bl	8000b30 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a2a:	f000 f8d5 	bl	8000bd8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a2e:	f000 f929 	bl	8000c84 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000a32:	f000 f97d 	bl	8000d30 <MX_TIM5_Init>
  MX_TIM12_Init();
 8000a36:	f000 f9d1 	bl	8000ddc <MX_TIM12_Init>
  MX_TIM13_Init();
 8000a3a:	f000 fa1f 	bl	8000e7c <MX_TIM13_Init>
  MX_TIM15_Init();
 8000a3e:	f000 fa41 	bl	8000ec4 <MX_TIM15_Init>
  MX_DMA_Init();
 8000a42:	f000 fb1d 	bl	8001080 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a46:	f000 facf 	bl	8000fe8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000a4a:	f000 fc35 	bl	80012b8 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <main+0x38>

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b09c      	sub	sp, #112	; 0x70
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5a:	224c      	movs	r2, #76	; 0x4c
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f00d f88e 	bl	800db80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2220      	movs	r2, #32
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f00d f888 	bl	800db80 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a70:	2002      	movs	r0, #2
 8000a72:	f007 f95d 	bl	8007d30 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b2c      	ldr	r3, [pc, #176]	; (8000b2c <SystemClock_Config+0xdc>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a82:	4a2a      	ldr	r2, [pc, #168]	; (8000b2c <SystemClock_Config+0xdc>)
 8000a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a88:	6193      	str	r3, [r2, #24]
 8000a8a:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <SystemClock_Config+0xdc>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a96:	bf00      	nop
 8000a98:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <SystemClock_Config+0xdc>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aa4:	d1f8      	bne.n	8000a98 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000abc:	232a      	movs	r3, #42	; 0x2a
 8000abe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000acc:	230c      	movs	r3, #12
 8000ace:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000adc:	4618      	mov	r0, r3
 8000ade:	f007 f961 	bl	8007da4 <HAL_RCC_OscConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ae8:	f000 fbe0 	bl	80012ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aec:	233f      	movs	r3, #63	; 0x3f
 8000aee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af0:	2303      	movs	r3, #3
 8000af2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000af4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000af8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000afa:	2308      	movs	r3, #8
 8000afc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000afe:	2340      	movs	r3, #64	; 0x40
 8000b00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b02:	2340      	movs	r3, #64	; 0x40
 8000b04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b0a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b0c:	2340      	movs	r3, #64	; 0x40
 8000b0e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2102      	movs	r1, #2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f007 fcf3 	bl	8008500 <HAL_RCC_ClockConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b20:	f000 fbc4 	bl	80012ac <Error_Handler>
  }
}
 8000b24:	bf00      	nop
 8000b26:	3770      	adds	r7, #112	; 0x70
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	58024800 	.word	0x58024800

08000b30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	2224      	movs	r2, #36	; 0x24
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f00d f81e 	bl	800db80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b44:	463b      	mov	r3, r7
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <MX_TIM2_Init+0xa4>)
 8000b50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b56:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <MX_TIM2_Init+0xa4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <MX_TIM2_Init+0xa4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <MX_TIM2_Init+0xa4>)
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295
 8000b68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <MX_TIM2_Init+0xa4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <MX_TIM2_Init+0xa4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <MX_TIM2_Init+0xa4>)
 8000ba2:	f009 fdf3 	bl	800a78c <HAL_TIM_Encoder_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000bac:	f000 fb7e 	bl	80012ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bb8:	463b      	mov	r3, r7
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_TIM2_Init+0xa4>)
 8000bbe:	f00a fd17 	bl	800b5f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000bc8:	f000 fb70 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	3730      	adds	r7, #48	; 0x30
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	240002dc 	.word	0x240002dc

08000bd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	; 0x30
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	2224      	movs	r2, #36	; 0x24
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f00c ffca 	bl	800db80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bec:	463b      	mov	r3, r7
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <MX_TIM3_Init+0xa4>)
 8000bf8:	4a21      	ldr	r2, [pc, #132]	; (8000c80 <MX_TIM3_Init+0xa8>)
 8000bfa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <MX_TIM3_Init+0xa4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c02:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <MX_TIM3_Init+0xa4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c08:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <MX_TIM3_Init+0xa4>)
 8000c0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c10:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_TIM3_Init+0xa4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <MX_TIM3_Init+0xa4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c24:	2301      	movs	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c34:	2301      	movs	r3, #1
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	4619      	mov	r1, r3
 8000c46:	480d      	ldr	r0, [pc, #52]	; (8000c7c <MX_TIM3_Init+0xa4>)
 8000c48:	f009 fda0 	bl	800a78c <HAL_TIM_Encoder_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c52:	f000 fb2b 	bl	80012ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c5e:	463b      	mov	r3, r7
 8000c60:	4619      	mov	r1, r3
 8000c62:	4806      	ldr	r0, [pc, #24]	; (8000c7c <MX_TIM3_Init+0xa4>)
 8000c64:	f00a fcc4 	bl	800b5f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c6e:	f000 fb1d 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	3730      	adds	r7, #48	; 0x30
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	24000328 	.word	0x24000328
 8000c80:	40000400 	.word	0x40000400

08000c84 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08c      	sub	sp, #48	; 0x30
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	2224      	movs	r2, #36	; 0x24
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f00c ff74 	bl	800db80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ca2:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <MX_TIM4_Init+0xa4>)
 8000ca4:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <MX_TIM4_Init+0xa8>)
 8000ca6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <MX_TIM4_Init+0xa4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cae:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <MX_TIM4_Init+0xa4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <MX_TIM4_Init+0xa4>)
 8000cb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <MX_TIM4_Init+0xa4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <MX_TIM4_Init+0xa4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480d      	ldr	r0, [pc, #52]	; (8000d28 <MX_TIM4_Init+0xa4>)
 8000cf4:	f009 fd4a 	bl	800a78c <HAL_TIM_Encoder_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000cfe:	f000 fad5 	bl	80012ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4806      	ldr	r0, [pc, #24]	; (8000d28 <MX_TIM4_Init+0xa4>)
 8000d10:	f00a fc6e 	bl	800b5f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d1a:	f000 fac7 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	3730      	adds	r7, #48	; 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	24000374 	.word	0x24000374
 8000d2c:	40000800 	.word	0x40000800

08000d30 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	; 0x30
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	2224      	movs	r2, #36	; 0x24
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f00c ff1e 	bl	800db80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d44:	463b      	mov	r3, r7
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <MX_TIM5_Init+0xa4>)
 8000d50:	4a21      	ldr	r2, [pc, #132]	; (8000dd8 <MX_TIM5_Init+0xa8>)
 8000d52:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d54:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <MX_TIM5_Init+0xa4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <MX_TIM5_Init+0xa4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000d60:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <MX_TIM5_Init+0xa4>)
 8000d62:	f04f 32ff 	mov.w	r2, #4294967295
 8000d66:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_TIM5_Init+0xa4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <MX_TIM5_Init+0xa4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d74:	2301      	movs	r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <MX_TIM5_Init+0xa4>)
 8000da0:	f009 fcf4 	bl	800a78c <HAL_TIM_Encoder_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000daa:	f000 fa7f 	bl	80012ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dae:	2300      	movs	r3, #0
 8000db0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000db6:	463b      	mov	r3, r7
 8000db8:	4619      	mov	r1, r3
 8000dba:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <MX_TIM5_Init+0xa4>)
 8000dbc:	f00a fc18 	bl	800b5f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000dc6:	f000 fa71 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	3730      	adds	r7, #48	; 0x30
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	240003c0 	.word	0x240003c0
 8000dd8:	40000c00 	.word	0x40000c00

08000ddc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	615a      	str	r2, [r3, #20]
 8000df2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <MX_TIM12_Init+0x98>)
 8000df6:	4a20      	ldr	r2, [pc, #128]	; (8000e78 <MX_TIM12_Init+0x9c>)
 8000df8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <MX_TIM12_Init+0x98>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e00:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <MX_TIM12_Init+0x98>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000e06:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <MX_TIM12_Init+0x98>)
 8000e08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e0c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <MX_TIM12_Init+0x98>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <MX_TIM12_Init+0x98>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000e1a:	4816      	ldr	r0, [pc, #88]	; (8000e74 <MX_TIM12_Init+0x98>)
 8000e1c:	f009 faf6 	bl	800a40c <HAL_TIM_PWM_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000e26:	f000 fa41 	bl	80012ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e2a:	2360      	movs	r3, #96	; 0x60
 8000e2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480c      	ldr	r0, [pc, #48]	; (8000e74 <MX_TIM12_Init+0x98>)
 8000e42:	f009 fef7 	bl	800ac34 <HAL_TIM_PWM_ConfigChannel>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000e4c:	f000 fa2e 	bl	80012ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2204      	movs	r2, #4
 8000e54:	4619      	mov	r1, r3
 8000e56:	4807      	ldr	r0, [pc, #28]	; (8000e74 <MX_TIM12_Init+0x98>)
 8000e58:	f009 feec 	bl	800ac34 <HAL_TIM_PWM_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8000e62:	f000 fa23 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000e66:	4803      	ldr	r0, [pc, #12]	; (8000e74 <MX_TIM12_Init+0x98>)
 8000e68:	f003 f9e2 	bl	8004230 <HAL_TIM_MspPostInit>

}
 8000e6c:	bf00      	nop
 8000e6e:	3720      	adds	r7, #32
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	2400040c 	.word	0x2400040c
 8000e78:	40001800 	.word	0x40001800

08000e7c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_TIM13_Init+0x40>)
 8000e82:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <MX_TIM13_Init+0x44>)
 8000e84:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 63;
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <MX_TIM13_Init+0x40>)
 8000e88:	223f      	movs	r2, #63	; 0x3f
 8000e8a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_TIM13_Init+0x40>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <MX_TIM13_Init+0x40>)
 8000e94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e98:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_TIM13_Init+0x40>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_TIM13_Init+0x40>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_TIM13_Init+0x40>)
 8000ea8:	f009 f9d2 	bl	800a250 <HAL_TIM_Base_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8000eb2:	f000 f9fb 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	24000458 	.word	0x24000458
 8000ec0:	40001c00 	.word	0x40001c00

08000ec4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b098      	sub	sp, #96	; 0x60
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]
 8000ee6:	615a      	str	r2, [r3, #20]
 8000ee8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2234      	movs	r2, #52	; 0x34
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f00c fe45 	bl	800db80 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000ef6:	4b3a      	ldr	r3, [pc, #232]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000ef8:	4a3a      	ldr	r2, [pc, #232]	; (8000fe4 <MX_TIM15_Init+0x120>)
 8000efa:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000efc:	4b38      	ldr	r3, [pc, #224]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f02:	4b37      	ldr	r3, [pc, #220]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000f08:	4b35      	ldr	r3, [pc, #212]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000f0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f0e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f10:	4b33      	ldr	r3, [pc, #204]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f16:	4b32      	ldr	r3, [pc, #200]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1c:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f22:	482f      	ldr	r0, [pc, #188]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000f24:	f009 fa72 	bl	800a40c <HAL_TIM_PWM_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000f2e:	f000 f9bd 	bl	80012ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4827      	ldr	r0, [pc, #156]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000f42:	f00a fb55 	bl	800b5f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000f4c:	f000 f9ae 	bl	80012ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f50:	2360      	movs	r3, #96	; 0x60
 8000f52:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f64:	2300      	movs	r3, #0
 8000f66:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f70:	2200      	movs	r2, #0
 8000f72:	4619      	mov	r1, r3
 8000f74:	481a      	ldr	r0, [pc, #104]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000f76:	f009 fe5d 	bl	800ac34 <HAL_TIM_PWM_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000f80:	f000 f994 	bl	80012ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f88:	2204      	movs	r2, #4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4814      	ldr	r0, [pc, #80]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000f8e:	f009 fe51 	bl	800ac34 <HAL_TIM_PWM_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000f98:	f000 f988 	bl	80012ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000fc4:	f00a fbb0 	bl	800b728 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000fce:	f000 f96d 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000fd2:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000fd4:	f003 f92c 	bl	8004230 <HAL_TIM_MspPostInit>

}
 8000fd8:	bf00      	nop
 8000fda:	3760      	adds	r7, #96	; 0x60
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	240004a4 	.word	0x240004a4
 8000fe4:	40014000 	.word	0x40014000

08000fe8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8000fee:	4a23      	ldr	r2, [pc, #140]	; (800107c <MX_USART1_UART_Init+0x94>)
 8000ff0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8000ff4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800100c:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <MX_USART1_UART_Init+0x90>)
 800100e:	220c      	movs	r2, #12
 8001010:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001012:	4b19      	ldr	r3, [pc, #100]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <MX_USART1_UART_Init+0x90>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800101e:	4b16      	ldr	r3, [pc, #88]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800102a:	4b13      	ldr	r3, [pc, #76]	; (8001078 <MX_USART1_UART_Init+0x90>)
 800102c:	2200      	movs	r2, #0
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001030:	4811      	ldr	r0, [pc, #68]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8001032:	f00a fc37 	bl	800b8a4 <HAL_UART_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800103c:	f000 f936 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001040:	2100      	movs	r1, #0
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8001044:	f00c fc7e 	bl	800d944 <HAL_UARTEx_SetTxFifoThreshold>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800104e:	f000 f92d 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001052:	2100      	movs	r1, #0
 8001054:	4808      	ldr	r0, [pc, #32]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8001056:	f00c fcb3 	bl	800d9c0 <HAL_UARTEx_SetRxFifoThreshold>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001060:	f000 f924 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8001066:	f00c fc34 	bl	800d8d2 <HAL_UARTEx_DisableFifoMode>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001070:	f000 f91c 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	240004f0 	.word	0x240004f0
 800107c:	40011000 	.word	0x40011000

08001080 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_DMA_Init+0x4c>)
 8001088:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800108c:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <MX_DMA_Init+0x4c>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <MX_DMA_Init+0x4c>)
 8001098:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	200b      	movs	r0, #11
 80010aa:	f003 fe10 	bl	8004cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010ae:	200b      	movs	r0, #11
 80010b0:	f003 fe27 	bl	8004d02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2100      	movs	r1, #0
 80010b8:	200c      	movs	r0, #12
 80010ba:	f003 fe08 	bl	8004cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80010be:	200c      	movs	r0, #12
 80010c0:	f003 fe1f 	bl	8004d02 <HAL_NVIC_EnableIRQ>

}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	58024400 	.word	0x58024400

080010d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	; 0x30
 80010d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e6:	4b6b      	ldr	r3, [pc, #428]	; (8001294 <MX_GPIO_Init+0x1c4>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ec:	4a69      	ldr	r2, [pc, #420]	; (8001294 <MX_GPIO_Init+0x1c4>)
 80010ee:	f043 0310 	orr.w	r3, r3, #16
 80010f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f6:	4b67      	ldr	r3, [pc, #412]	; (8001294 <MX_GPIO_Init+0x1c4>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	61bb      	str	r3, [r7, #24]
 8001102:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001104:	4b63      	ldr	r3, [pc, #396]	; (8001294 <MX_GPIO_Init+0x1c4>)
 8001106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110a:	4a62      	ldr	r2, [pc, #392]	; (8001294 <MX_GPIO_Init+0x1c4>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001114:	4b5f      	ldr	r3, [pc, #380]	; (8001294 <MX_GPIO_Init+0x1c4>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001122:	4b5c      	ldr	r3, [pc, #368]	; (8001294 <MX_GPIO_Init+0x1c4>)
 8001124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001128:	4a5a      	ldr	r2, [pc, #360]	; (8001294 <MX_GPIO_Init+0x1c4>)
 800112a:	f043 0320 	orr.w	r3, r3, #32
 800112e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001132:	4b58      	ldr	r3, [pc, #352]	; (8001294 <MX_GPIO_Init+0x1c4>)
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001138:	f003 0320 	and.w	r3, r3, #32
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001140:	4b54      	ldr	r3, [pc, #336]	; (8001294 <MX_GPIO_Init+0x1c4>)
 8001142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001146:	4a53      	ldr	r2, [pc, #332]	; (8001294 <MX_GPIO_Init+0x1c4>)
 8001148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800114c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001150:	4b50      	ldr	r3, [pc, #320]	; (8001294 <MX_GPIO_Init+0x1c4>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	4b4d      	ldr	r3, [pc, #308]	; (8001294 <MX_GPIO_Init+0x1c4>)
 8001160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001164:	4a4b      	ldr	r2, [pc, #300]	; (8001294 <MX_GPIO_Init+0x1c4>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800116e:	4b49      	ldr	r3, [pc, #292]	; (8001294 <MX_GPIO_Init+0x1c4>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117c:	4b45      	ldr	r3, [pc, #276]	; (8001294 <MX_GPIO_Init+0x1c4>)
 800117e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001182:	4a44      	ldr	r2, [pc, #272]	; (8001294 <MX_GPIO_Init+0x1c4>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118c:	4b41      	ldr	r3, [pc, #260]	; (8001294 <MX_GPIO_Init+0x1c4>)
 800118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800119a:	4b3e      	ldr	r3, [pc, #248]	; (8001294 <MX_GPIO_Init+0x1c4>)
 800119c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a0:	4a3c      	ldr	r2, [pc, #240]	; (8001294 <MX_GPIO_Init+0x1c4>)
 80011a2:	f043 0308 	orr.w	r3, r3, #8
 80011a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011aa:	4b3a      	ldr	r3, [pc, #232]	; (8001294 <MX_GPIO_Init+0x1c4>)
 80011ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80011be:	4836      	ldr	r0, [pc, #216]	; (8001298 <MX_GPIO_Init+0x1c8>)
 80011c0:	f006 fd9c 	bl	8007cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_5, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f242 0120 	movw	r1, #8224	; 0x2020
 80011ca:	4834      	ldr	r0, [pc, #208]	; (800129c <MX_GPIO_Init+0x1cc>)
 80011cc:	f006 fd96 	bl	8007cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
 80011d6:	4832      	ldr	r0, [pc, #200]	; (80012a0 <MX_GPIO_Init+0x1d0>)
 80011d8:	f006 fd90 	bl	8007cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 80011e2:	4830      	ldr	r0, [pc, #192]	; (80012a4 <MX_GPIO_Init+0x1d4>)
 80011e4:	f006 fd8a 	bl	8007cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 80011ee:	482e      	ldr	r0, [pc, #184]	; (80012a8 <MX_GPIO_Init+0x1d8>)
 80011f0:	f006 fd84 	bl	8007cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8;
 80011f4:	f44f 738e 	mov.w	r3, #284	; 0x11c
 80011f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	4619      	mov	r1, r3
 800120c:	4822      	ldr	r0, [pc, #136]	; (8001298 <MX_GPIO_Init+0x1c8>)
 800120e:	f006 fbcd 	bl	80079ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8001212:	f242 0320 	movw	r3, #8224	; 0x2020
 8001216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	4619      	mov	r1, r3
 800122a:	481c      	ldr	r0, [pc, #112]	; (800129c <MX_GPIO_Init+0x1cc>)
 800122c:	f006 fbbe 	bl	80079ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF9 PF11 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15;
 8001230:	f44f 430b 	mov.w	r3, #35584	; 0x8b00
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	4619      	mov	r1, r3
 8001248:	4815      	ldr	r0, [pc, #84]	; (80012a0 <MX_GPIO_Init+0x1d0>)
 800124a:	f006 fbaf 	bl	80079ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9;
 800124e:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4619      	mov	r1, r3
 8001266:	480f      	ldr	r0, [pc, #60]	; (80012a4 <MX_GPIO_Init+0x1d4>)
 8001268:	f006 fba0 	bl	80079ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 800126c:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	4808      	ldr	r0, [pc, #32]	; (80012a8 <MX_GPIO_Init+0x1d8>)
 8001286:	f006 fb91 	bl	80079ac <HAL_GPIO_Init>

}
 800128a:	bf00      	nop
 800128c:	3730      	adds	r7, #48	; 0x30
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	58024400 	.word	0x58024400
 8001298:	58021000 	.word	0x58021000
 800129c:	58020800 	.word	0x58020800
 80012a0:	58021400 	.word	0x58021400
 80012a4:	58020400 	.word	0x58020400
 80012a8:	58020c00 	.word	0x58020c00

080012ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b0:	b672      	cpsid	i
}
 80012b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <Error_Handler+0x8>
	...

080012b8 <main_function>:
#include "debug.h"
#include "ros_main.h"



void main_function(){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	ROS::setup();
 80012bc:	f001 ff78 	bl	80031b0 <_ZN3ROS5setupEv>

	while(1){
		if(debug_mode) debug_loop();
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <main_function+0x1c>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d002      	beq.n	80012ce <main_function+0x16>
 80012c8:	f7ff fb9e 	bl	8000a08 <_Z10debug_loopv>
 80012cc:	e7f8      	b.n	80012c0 <main_function+0x8>
		else ROS::loop();
 80012ce:	f001 ff7f 	bl	80031d0 <_ZN3ROS4loopEv>
		if(debug_mode) debug_loop();
 80012d2:	e7f5      	b.n	80012c0 <main_function+0x8>
 80012d4:	240002d8 	.word	0x240002d8

080012d8 <_ZN8CAR_INFOC1Ev>:

typedef struct{
	double Vx=0;
	double Vy=0;
	double Omega=0;
} CAR_INFO;
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	f04f 0300 	mov.w	r3, #0
 80012ea:	e9c1 2300 	strd	r2, r3, [r1]
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	f04f 0300 	mov.w	r3, #0
 8001306:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <_ZN7MecanumC1Ev>:
#include "mecanum.h"
#include "dc_motor.h"

Mecanum mecanum;

Mecanum::Mecanum(void){
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ffd8 	bl	80012d8 <_ZN8CAR_INFOC1Ev>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3318      	adds	r3, #24
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ffd3 	bl	80012d8 <_ZN8CAR_INFOC1Ev>
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <_ZN7MecanumC1Ev+0x60>)
 800133a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	a309      	add	r3, pc, #36	; (adr r3, 8001368 <_ZN7MecanumC1Ev+0x50>)
 8001342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001346:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	a308      	add	r3, pc, #32	; (adr r3, 8001370 <_ZN7MecanumC1Ev+0x58>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	DC_motor_init();
 8001356:	f7ff f991 	bl	800067c <_Z13DC_motor_initv>
}
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	f3af 8000 	nop.w
 8001368:	cccccccd 	.word	0xcccccccd
 800136c:	4020cccc 	.word	0x4020cccc
 8001370:	39581062 	.word	0x39581062
 8001374:	400d48b4 	.word	0x400d48b4
 8001378:	40270000 	.word	0x40270000

0800137c <_ZN7Mecanum3runEv>:

// calculate wheel (-> PID) -> calculate car -> pub
void Mecanum::run(void){
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	tf2_wheel_speed();
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f807 	bl	8001398 <_ZN7Mecanum15tf2_wheel_speedEv>
	tf2_car_speed();
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f894 	bl	80014b8 <_ZN7Mecanum13tf2_car_speedEv>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <_ZN7Mecanum15tf2_wheel_speedEv>:

// alter wheel speed
void Mecanum::tf2_wheel_speed(void){
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	fr.rps_goal = (CAR_Goal.Vy - CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	ed93 6b02 	vldr	d6, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	ed93 7b00 	vldr	d7, [r3]
 80013ac:	ee36 6b47 	vsub.f64	d6, d6, d7
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	ed93 5b04 	vldr	d5, [r3, #16]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80013c2:	ee34 7b07 	vadd.f64	d7, d4, d7
 80013c6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013ca:	ee36 5b07 	vadd.f64	d5, d6, d7
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80013d4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013d8:	4b32      	ldr	r3, [pc, #200]	; (80014a4 <_ZN7Mecanum15tf2_wheel_speedEv+0x10c>)
 80013da:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	fl.rps_goal = (CAR_Goal.Vy + CAR_Goal.Vx - CAR_Goal.Omega*(a+b) )/radius;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	ed93 6b02 	vldr	d6, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	ed93 7b00 	vldr	d7, [r3]
 80013ea:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	ed93 5b04 	vldr	d5, [r3, #16]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001400:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001404:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001408:	ee36 5b47 	vsub.f64	d5, d6, d7
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8001412:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001416:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <_ZN7Mecanum15tf2_wheel_speedEv+0x110>)
 8001418:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	bl.rps_goal = (CAR_Goal.Vy - CAR_Goal.Vx - CAR_Goal.Omega*(a+b) )/radius;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	ed93 6b02 	vldr	d6, [r3, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	ed93 7b00 	vldr	d7, [r3]
 8001428:	ee36 6b47 	vsub.f64	d6, d6, d7
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	ed93 5b04 	vldr	d5, [r3, #16]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800143e:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001442:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001446:	ee36 5b47 	vsub.f64	d5, d6, d7
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8001450:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <_ZN7Mecanum15tf2_wheel_speedEv+0x114>)
 8001456:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	br.rps_goal = (CAR_Goal.Vy + CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	ed93 6b02 	vldr	d6, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	ed93 7b00 	vldr	d7, [r3]
 8001466:	ee36 6b07 	vadd.f64	d6, d6, d7
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	ed93 5b04 	vldr	d5, [r3, #16]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800147c:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001480:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001484:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 800148e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <_ZN7Mecanum15tf2_wheel_speedEv+0x118>)
 8001494:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	24000098 	.word	0x24000098
 80014a8:	24000128 	.word	0x24000128
 80014ac:	24000248 	.word	0x24000248
 80014b0:	240001b8 	.word	0x240001b8
 80014b4:	00000000 	.word	0x00000000

080014b8 <_ZN7Mecanum13tf2_car_speedEv>:


// give current car speed
void Mecanum::tf2_car_speed(void){
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	CAR_Now.Vx = (1/4)*(fl.rps_now + fr.rps_now + bl.rps_now + br.rps_now);
 80014c0:	4b31      	ldr	r3, [pc, #196]	; (8001588 <_ZN7Mecanum13tf2_car_speedEv+0xd0>)
 80014c2:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80014c6:	4b31      	ldr	r3, [pc, #196]	; (800158c <_ZN7Mecanum13tf2_car_speedEv+0xd4>)
 80014c8:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80014cc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014d0:	4b2f      	ldr	r3, [pc, #188]	; (8001590 <_ZN7Mecanum13tf2_car_speedEv+0xd8>)
 80014d2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80014d6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014da:	4b2e      	ldr	r3, [pc, #184]	; (8001594 <_ZN7Mecanum13tf2_car_speedEv+0xdc>)
 80014dc:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80014e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014e4:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8001580 <_ZN7Mecanum13tf2_car_speedEv+0xc8>
 80014e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	ed83 7b06 	vstr	d7, [r3, #24]
	CAR_Now.Vy = (1/4)*(-fl.rps_now + fr.rps_now + bl.rps_now - br.rps_now);
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <_ZN7Mecanum13tf2_car_speedEv+0xd4>)
 80014f4:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <_ZN7Mecanum13tf2_car_speedEv+0xd0>)
 80014fa:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80014fe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001502:	4b23      	ldr	r3, [pc, #140]	; (8001590 <_ZN7Mecanum13tf2_car_speedEv+0xd8>)
 8001504:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001508:	ee36 6b07 	vadd.f64	d6, d6, d7
 800150c:	4b21      	ldr	r3, [pc, #132]	; (8001594 <_ZN7Mecanum13tf2_car_speedEv+0xdc>)
 800150e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001512:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001516:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001580 <_ZN7Mecanum13tf2_car_speedEv+0xc8>
 800151a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	ed83 7b08 	vstr	d7, [r3, #32]
	CAR_Now.Omega = (1/4)*(1/(a+b))*(-fl.rps_now + fr.rps_now - bl.rps_now + br.rps_now);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001530:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001534:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001538:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800153c:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001580 <_ZN7Mecanum13tf2_car_speedEv+0xc8>
 8001540:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <_ZN7Mecanum13tf2_car_speedEv+0xd4>)
 8001546:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <_ZN7Mecanum13tf2_car_speedEv+0xd0>)
 800154c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001550:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <_ZN7Mecanum13tf2_car_speedEv+0xd8>)
 8001556:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800155a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <_ZN7Mecanum13tf2_car_speedEv+0xdc>)
 8001560:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001564:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001568:	ee26 7b07 	vmul.f64	d7, d6, d7
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
	...
 8001588:	24000128 	.word	0x24000128
 800158c:	24000098 	.word	0x24000098
 8001590:	24000248 	.word	0x24000248
 8001594:	240001b8 	.word	0x240001b8

08001598 <_Z41__static_initialization_and_destruction_0ii>:
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d107      	bne.n	80015b8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d102      	bne.n	80015b8 <_Z41__static_initialization_and_destruction_0ii+0x20>
Mecanum mecanum;
 80015b2:	4803      	ldr	r0, [pc, #12]	; (80015c0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80015b4:	f7ff feb0 	bl	8001318 <_ZN7MecanumC1Ev>
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	24000670 	.word	0x24000670

080015c4 <_GLOBAL__sub_I_mecanum>:
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015cc:	2001      	movs	r0, #1
 80015ce:	f7ff ffe3 	bl	8001598 <_Z41__static_initialization_and_destruction_0ii>
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <_ZN3ros3MsgC1Ev+0x1c>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	0800e160 	.word	0x0800e160

08001618 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
      data()
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ffe8 	bl	80015f8 <_ZN3ros3MsgC1Ev>
 8001628:	4a06      	ldr	r2, [pc, #24]	; (8001644 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3304      	adds	r3, #4
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ffce 	bl	80015d4 <_ZN3ros4TimeC1Ev>
    {
    }
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	0800e148 	.word	0x0800e148

08001648 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6859      	ldr	r1, [r3, #4]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	4413      	add	r3, r2
 8001660:	b2ca      	uxtb	r2, r1
 8001662:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	0a19      	lsrs	r1, r3, #8
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3301      	adds	r3, #1
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	4413      	add	r3, r2
 8001672:	b2ca      	uxtb	r2, r1
 8001674:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	0c19      	lsrs	r1, r3, #16
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3302      	adds	r3, #2
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	4413      	add	r3, r2
 8001684:	b2ca      	uxtb	r2, r1
 8001686:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	0e19      	lsrs	r1, r3, #24
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	3303      	adds	r3, #3
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	4413      	add	r3, r2
 8001696:	b2ca      	uxtb	r2, r1
 8001698:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3304      	adds	r3, #4
 800169e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6899      	ldr	r1, [r3, #8]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	4413      	add	r3, r2
 80016aa:	b2ca      	uxtb	r2, r1
 80016ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	0a19      	lsrs	r1, r3, #8
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3301      	adds	r3, #1
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	b2ca      	uxtb	r2, r1
 80016be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	0c19      	lsrs	r1, r3, #16
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	3302      	adds	r3, #2
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	4413      	add	r3, r2
 80016ce:	b2ca      	uxtb	r2, r1
 80016d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	0e19      	lsrs	r1, r3, #24
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3303      	adds	r3, #3
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	b2ca      	uxtb	r2, r1
 80016e2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3304      	adds	r3, #4
 80016e8:	60fb      	str	r3, [r7, #12]
      return offset;
 80016ea:	68fb      	ldr	r3, [r7, #12]
    }
 80016ec:	4618      	mov	r0, r3
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	4413      	add	r3, r2
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	3301      	adds	r3, #1
 800171c:	6839      	ldr	r1, [r7, #0]
 800171e:	440b      	add	r3, r1
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	3302      	adds	r3, #2
 8001732:	6839      	ldr	r1, [r7, #0]
 8001734:	440b      	add	r3, r1
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	041b      	lsls	r3, r3, #16
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	3303      	adds	r3, #3
 8001748:	6839      	ldr	r1, [r7, #0]
 800174a:	440b      	add	r3, r1
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	061b      	lsls	r3, r3, #24
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	3304      	adds	r3, #4
 800175a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	4413      	add	r3, r2
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	3301      	adds	r3, #1
 8001772:	6839      	ldr	r1, [r7, #0]
 8001774:	440b      	add	r3, r1
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	021b      	lsls	r3, r3, #8
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	3302      	adds	r3, #2
 8001788:	6839      	ldr	r1, [r7, #0]
 800178a:	440b      	add	r3, r1
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	041b      	lsls	r3, r3, #16
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3303      	adds	r3, #3
 800179e:	6839      	ldr	r1, [r7, #0]
 80017a0:	440b      	add	r3, r1
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	061b      	lsls	r3, r3, #24
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3304      	adds	r3, #4
 80017b0:	60fb      	str	r3, [r7, #12]
     return offset;
 80017b2:	68fb      	ldr	r3, [r7, #12]
    }
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	0800deac 	.word	0x0800deac

080017dc <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	0800debc 	.word	0x0800debc

080017f8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fef8 	bl	80015f8 <_ZN3ros3MsgC1Ev>
 8001808:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	809a      	strh	r2, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a09      	ldr	r2, [pc, #36]	; (800183c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a07      	ldr	r2, [pc, #28]	; (800183c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800181e:	60da      	str	r2, [r3, #12]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a06      	ldr	r2, [pc, #24]	; (800183c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001824:	611a      	str	r2, [r3, #16]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	615a      	str	r2, [r3, #20]
    {
    }
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	0800e130 	.word	0x0800e130
 800183c:	0800dee0 	.word	0x0800dee0

08001840 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	8899      	ldrh	r1, [r3, #4]
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	4413      	add	r3, r2
 8001858:	b2ca      	uxtb	r2, r1
 800185a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	889b      	ldrh	r3, [r3, #4]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	b299      	uxth	r1, r3
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	3301      	adds	r3, #1
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	4413      	add	r3, r2
 800186c:	b2ca      	uxtb	r2, r1
 800186e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	3302      	adds	r3, #2
 8001874:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fd48 	bl	8000310 <strlen>
 8001880:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	4413      	add	r3, r2
 8001888:	69b9      	ldr	r1, [r7, #24]
 800188a:	4618      	mov	r0, r3
 800188c:	f001 fcce 	bl	800322c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	3304      	adds	r3, #4
 8001894:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	18d0      	adds	r0, r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4619      	mov	r1, r3
 80018a4:	f00c f95e 	bl	800db64 <memcpy>
      offset += length_topic_name;
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	4413      	add	r3, r2
 80018ae:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fd2b 	bl	8000310 <strlen>
 80018ba:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	4413      	add	r3, r2
 80018c2:	6979      	ldr	r1, [r7, #20]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f001 fcb1 	bl	800322c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3304      	adds	r3, #4
 80018ce:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	18d0      	adds	r0, r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4619      	mov	r1, r3
 80018de:	f00c f941 	bl	800db64 <memcpy>
      offset += length_message_type;
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	4413      	add	r3, r2
 80018e8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fd0e 	bl	8000310 <strlen>
 80018f4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	6939      	ldr	r1, [r7, #16]
 80018fe:	4618      	mov	r0, r3
 8001900:	f001 fc94 	bl	800322c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	3304      	adds	r3, #4
 8001908:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	18d0      	adds	r0, r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4619      	mov	r1, r3
 8001918:	f00c f924 	bl	800db64 <memcpy>
      offset += length_md5sum;
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4413      	add	r3, r2
 8001922:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800192a:	68f9      	ldr	r1, [r7, #12]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	4413      	add	r3, r2
 8001932:	b2ca      	uxtb	r2, r1
 8001934:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	0a19      	lsrs	r1, r3, #8
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3301      	adds	r3, #1
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	4413      	add	r3, r2
 8001942:	b2ca      	uxtb	r2, r1
 8001944:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	0c19      	lsrs	r1, r3, #16
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3302      	adds	r3, #2
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	4413      	add	r3, r2
 8001952:	b2ca      	uxtb	r2, r1
 8001954:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	0e19      	lsrs	r1, r3, #24
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3303      	adds	r3, #3
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	4413      	add	r3, r2
 8001962:	b2ca      	uxtb	r2, r1
 8001964:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	61fb      	str	r3, [r7, #28]
      return offset;
 800196c:	69fb      	ldr	r3, [r7, #28]
    }
 800196e:	4618      	mov	r0, r3
 8001970:	3720      	adds	r7, #32
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001976:	b580      	push	{r7, lr}
 8001978:	b08a      	sub	sp, #40	; 0x28
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	4413      	add	r3, r2
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	b29a      	uxth	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	889b      	ldrh	r3, [r3, #4]
 8001996:	b21a      	sxth	r2, r3
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	3301      	adds	r3, #1
 800199c:	6839      	ldr	r1, [r7, #0]
 800199e:	440b      	add	r3, r1
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	4313      	orrs	r3, r2
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	3302      	adds	r3, #2
 80019b4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	441a      	add	r2, r3
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f001 fc50 	bl	8003268 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	3304      	adds	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	4413      	add	r3, r2
 80019d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019da:	429a      	cmp	r2, r3
 80019dc:	d20c      	bcs.n	80019f8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	441a      	add	r2, r3
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6839      	ldr	r1, [r7, #0]
 80019ea:	440b      	add	r3, r1
 80019ec:	7812      	ldrb	r2, [r2, #0]
 80019ee:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	3301      	adds	r3, #1
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
 80019f6:	e7ec      	b.n	80019d2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	4413      	add	r3, r2
 80019fe:	3b01      	subs	r3, #1
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	441a      	add	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	4413      	add	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	441a      	add	r2, r3
 8001a22:	f107 0310 	add.w	r3, r7, #16
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f001 fc1d 	bl	8003268 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	3304      	adds	r3, #4
 8001a32:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	623b      	str	r3, [r7, #32]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	6a3a      	ldr	r2, [r7, #32]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d20c      	bcs.n	8001a5e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	441a      	add	r2, r3
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	6839      	ldr	r1, [r7, #0]
 8001a50:	440b      	add	r3, r1
 8001a52:	7812      	ldrb	r2, [r2, #0]
 8001a54:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	623b      	str	r3, [r7, #32]
 8001a5c:	e7ec      	b.n	8001a38 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4413      	add	r3, r2
 8001a64:	3b01      	subs	r3, #1
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	4413      	add	r3, r2
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	441a      	add	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4413      	add	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	441a      	add	r2, r3
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f001 fbea 	bl	8003268 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	3304      	adds	r3, #4
 8001a98:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d20c      	bcs.n	8001ac4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	441a      	add	r2, r3
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6839      	ldr	r1, [r7, #0]
 8001ab6:	440b      	add	r3, r1
 8001ab8:	7812      	ldrb	r2, [r2, #0]
 8001aba:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	e7ec      	b.n	8001a9e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	4413      	add	r3, r2
 8001aca:	3b01      	subs	r3, #1
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	441a      	add	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	6839      	ldr	r1, [r7, #0]
 8001af2:	440a      	add	r2, r1
 8001af4:	7812      	ldrb	r2, [r2, #0]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	3301      	adds	r3, #1
 8001b00:	6839      	ldr	r1, [r7, #0]
 8001b02:	440b      	add	r3, r1
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	3302      	adds	r3, #2
 8001b12:	6839      	ldr	r1, [r7, #0]
 8001b14:	440b      	add	r3, r1
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	041b      	lsls	r3, r3, #16
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	3303      	adds	r3, #3
 8001b24:	6839      	ldr	r1, [r7, #0]
 8001b26:	440b      	add	r3, r1
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	061b      	lsls	r3, r3, #24
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	61bb      	str	r3, [r7, #24]
     return offset;
 8001b3c:	69bb      	ldr	r3, [r7, #24]
    }
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3728      	adds	r7, #40	; 0x28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	0800dee4 	.word	0x0800dee4

08001b64 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	0800df00 	.word	0x0800df00

08001b80 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fd34 	bl	80015f8 <_ZN3ros3MsgC1Ev>
 8001b90:	4a06      	ldr	r2, [pc, #24]	; (8001bac <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	711a      	strb	r2, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001ba0:	609a      	str	r2, [r3, #8]
    {
    }
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	0800e118 	.word	0x0800e118
 8001bb0:	0800dee0 	.word	0x0800dee0

08001bb4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	7912      	ldrb	r2, [r2, #4]
 8001bcc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fb99 	bl	8000310 <strlen>
 8001bde:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	4413      	add	r3, r2
 8001be6:	68b9      	ldr	r1, [r7, #8]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f001 fb1f 	bl	800322c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	18d0      	adds	r0, r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	4619      	mov	r1, r3
 8001c02:	f00b ffaf 	bl	800db64 <memcpy>
      offset += length_msg;
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
      return offset;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
    }
 8001c10:	4618      	mov	r0, r3
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	781a      	ldrb	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	3301      	adds	r3, #1
 8001c36:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	441a      	add	r2, r3
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f001 fb0f 	bl	8003268 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4413      	add	r3, r2
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d20c      	bcs.n	8001c7a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	441a      	add	r2, r3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	6839      	ldr	r1, [r7, #0]
 8001c6c:	440b      	add	r3, r1
 8001c6e:	7812      	ldrb	r2, [r2, #0]
 8001c70:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	3301      	adds	r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	e7ec      	b.n	8001c54 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	3b01      	subs	r3, #1
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	4413      	add	r3, r2
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	441a      	add	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
     return offset;
 8001c9e:	693b      	ldr	r3, [r7, #16]
    }
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	0800df24 	.word	0x0800df24

08001cc4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	0800df38 	.word	0x0800df38

08001ce0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fc84 	bl	80015f8 <_ZN3ros3MsgC1Ev>
 8001cf0:	4a0c      	ldr	r2, [pc, #48]	; (8001d24 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	619a      	str	r2, [r3, #24]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	61da      	str	r2, [r3, #28]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	0800e100 	.word	0x0800e100

08001d28 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	; 0x28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6859      	ldr	r1, [r3, #4]
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	b2ca      	uxtb	r2, r1
 8001d42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	0a19      	lsrs	r1, r3, #8
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	4413      	add	r3, r2
 8001d52:	b2ca      	uxtb	r2, r1
 8001d54:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	0c19      	lsrs	r1, r3, #16
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	3302      	adds	r3, #2
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	b2ca      	uxtb	r2, r1
 8001d66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	0e19      	lsrs	r1, r3, #24
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	3303      	adds	r3, #3
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	4413      	add	r3, r2
 8001d76:	b2ca      	uxtb	r2, r1
 8001d78:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001d80:	2300      	movs	r3, #0
 8001d82:	623b      	str	r3, [r7, #32]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	6a3a      	ldr	r2, [r7, #32]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d22b      	bcs.n	8001de6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001d9c:	6939      	ldr	r1, [r7, #16]
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	b2ca      	uxtb	r2, r1
 8001da6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	0a19      	lsrs	r1, r3, #8
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	3301      	adds	r3, #1
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	b2ca      	uxtb	r2, r1
 8001db6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	0c19      	lsrs	r1, r3, #16
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	3302      	adds	r3, #2
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	b2ca      	uxtb	r2, r1
 8001dc6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	0e19      	lsrs	r1, r3, #24
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	3303      	adds	r3, #3
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	b2ca      	uxtb	r2, r1
 8001dd6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	3304      	adds	r3, #4
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	3301      	adds	r3, #1
 8001de2:	623b      	str	r3, [r7, #32]
 8001de4:	e7ce      	b.n	8001d84 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6919      	ldr	r1, [r3, #16]
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	b2ca      	uxtb	r2, r1
 8001df2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	0a19      	lsrs	r1, r3, #8
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	4413      	add	r3, r2
 8001e02:	b2ca      	uxtb	r2, r1
 8001e04:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	0c19      	lsrs	r1, r3, #16
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	3302      	adds	r3, #2
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	b2ca      	uxtb	r2, r1
 8001e16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	0e19      	lsrs	r1, r3, #24
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	3303      	adds	r3, #3
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	4413      	add	r3, r2
 8001e26:	b2ca      	uxtb	r2, r1
 8001e28:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d22b      	bcs.n	8001e96 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699a      	ldr	r2, [r3, #24]
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001e4c:	68f9      	ldr	r1, [r7, #12]
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	4413      	add	r3, r2
 8001e54:	b2ca      	uxtb	r2, r1
 8001e56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	0a19      	lsrs	r1, r3, #8
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	3301      	adds	r3, #1
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	b2ca      	uxtb	r2, r1
 8001e66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	0c19      	lsrs	r1, r3, #16
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	3302      	adds	r3, #2
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	b2ca      	uxtb	r2, r1
 8001e76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	0e19      	lsrs	r1, r3, #24
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	3303      	adds	r3, #3
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	b2ca      	uxtb	r2, r1
 8001e86:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3301      	adds	r3, #1
 8001e92:	61fb      	str	r3, [r7, #28]
 8001e94:	e7ce      	b.n	8001e34 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69d9      	ldr	r1, [r3, #28]
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	b2ca      	uxtb	r2, r1
 8001ea2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	0a19      	lsrs	r1, r3, #8
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	3301      	adds	r3, #1
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	b2ca      	uxtb	r2, r1
 8001eb4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	0c19      	lsrs	r1, r3, #16
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	3302      	adds	r3, #2
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	b2ca      	uxtb	r2, r1
 8001ec6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	0e19      	lsrs	r1, r3, #24
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	3303      	adds	r3, #3
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	b2ca      	uxtb	r2, r1
 8001ed8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	3304      	adds	r3, #4
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61bb      	str	r3, [r7, #24]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d228      	bcs.n	8001f40 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fa08 	bl	8000310 <strlen>
 8001f00:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	6979      	ldr	r1, [r7, #20]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f001 f98e 	bl	800322c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	3304      	adds	r3, #4
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	18d0      	adds	r0, r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f00b fe1a 	bl	800db64 <memcpy>
      offset += length_stringsi;
 8001f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	4413      	add	r3, r2
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	e7d1      	b.n	8001ee4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001f42:	4618      	mov	r0, r3
 8001f44:	3728      	adds	r7, #40	; 0x28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b08e      	sub	sp, #56	; 0x38
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f64:	3301      	adds	r3, #1
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	4413      	add	r3, r2
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	6a3a      	ldr	r2, [r7, #32]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f76:	3302      	adds	r3, #2
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	041b      	lsls	r3, r3, #16
 8001f80:	6a3a      	ldr	r2, [r7, #32]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f88:	3303      	adds	r3, #3
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	061b      	lsls	r3, r3, #24
 8001f92:	6a3a      	ldr	r2, [r7, #32]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	6a3a      	ldr	r2, [r7, #32]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d90a      	bls.n	8001fbe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	f00b fdec 	bl	800db90 <realloc>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a3a      	ldr	r2, [r7, #32]
 8001fc2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	633b      	str	r3, [r7, #48]	; 0x30
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d236      	bcs.n	8002040 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fda:	6839      	ldr	r1, [r7, #0]
 8001fdc:	440a      	add	r2, r1
 8001fde:	7812      	ldrb	r2, [r2, #0]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe8:	3301      	adds	r3, #1
 8001fea:	6839      	ldr	r1, [r7, #0]
 8001fec:	440b      	add	r3, r1
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	6839      	ldr	r1, [r7, #0]
 8001ffe:	440b      	add	r3, r1
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	041b      	lsls	r3, r3, #16
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800200c:	3303      	adds	r3, #3
 800200e:	6839      	ldr	r1, [r7, #0]
 8002010:	440b      	add	r3, r1
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	061b      	lsls	r3, r3, #24
 8002016:	4313      	orrs	r3, r2
 8002018:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002022:	3304      	adds	r3, #4
 8002024:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	3208      	adds	r2, #8
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203a:	3301      	adds	r3, #1
 800203c:	633b      	str	r3, [r7, #48]	; 0x30
 800203e:	e7c3      	b.n	8001fc8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	4413      	add	r3, r2
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800204a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800204c:	3301      	adds	r3, #1
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	4413      	add	r3, r2
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	021b      	lsls	r3, r3, #8
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	4313      	orrs	r3, r2
 800205a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800205c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800205e:	3302      	adds	r3, #2
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	4413      	add	r3, r2
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	041b      	lsls	r3, r3, #16
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	4313      	orrs	r3, r2
 800206c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800206e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002070:	3303      	adds	r3, #3
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	4413      	add	r3, r2
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	061b      	lsls	r3, r3, #24
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	4313      	orrs	r3, r2
 800207e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002082:	3304      	adds	r3, #4
 8002084:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	429a      	cmp	r2, r3
 800208e:	d90a      	bls.n	80020a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699a      	ldr	r2, [r3, #24]
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4619      	mov	r1, r3
 800209a:	4610      	mov	r0, r2
 800209c:	f00b fd78 	bl	800db90 <realloc>
 80020a0:	4602      	mov	r2, r0
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80020ac:	2300      	movs	r3, #0
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d236      	bcs.n	8002128 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020c2:	6839      	ldr	r1, [r7, #0]
 80020c4:	440a      	add	r2, r1
 80020c6:	7812      	ldrb	r2, [r2, #0]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d0:	3301      	adds	r3, #1
 80020d2:	6839      	ldr	r1, [r7, #0]
 80020d4:	440b      	add	r3, r1
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	021b      	lsls	r3, r3, #8
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e2:	3302      	adds	r3, #2
 80020e4:	6839      	ldr	r1, [r7, #0]
 80020e6:	440b      	add	r3, r1
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	041b      	lsls	r3, r3, #16
 80020ec:	4313      	orrs	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f4:	3303      	adds	r3, #3
 80020f6:	6839      	ldr	r1, [r7, #0]
 80020f8:	440b      	add	r3, r1
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	061b      	lsls	r3, r3, #24
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210a:	3304      	adds	r3, #4
 800210c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	3214      	adds	r2, #20
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002122:	3301      	adds	r3, #1
 8002124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002126:	e7c3      	b.n	80020b0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	4413      	add	r3, r2
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002134:	3301      	adds	r3, #1
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	4413      	add	r3, r2
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002146:	3302      	adds	r3, #2
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	4413      	add	r3, r2
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	041b      	lsls	r3, r3, #16
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002158:	3303      	adds	r3, #3
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	4413      	add	r3, r2
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	061b      	lsls	r3, r3, #24
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216a:	3304      	adds	r3, #4
 800216c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	429a      	cmp	r2, r3
 8002176:	d90a      	bls.n	800218e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4619      	mov	r1, r3
 8002182:	4610      	mov	r0, r2
 8002184:	f00b fd04 	bl	800db90 <realloc>
 8002188:	4602      	mov	r2, r0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002194:	2300      	movs	r3, #0
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800219e:	429a      	cmp	r2, r3
 80021a0:	d23f      	bcs.n	8002222 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80021a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	441a      	add	r2, r3
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	4611      	mov	r1, r2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f001 f85a 	bl	8003268 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b6:	3304      	adds	r3, #4
 80021b8:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80021ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
 80021be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4413      	add	r3, r2
 80021c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d20c      	bcs.n	80021e4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	441a      	add	r2, r3
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	3b01      	subs	r3, #1
 80021d4:	6839      	ldr	r1, [r7, #0]
 80021d6:	440b      	add	r3, r1
 80021d8:	7812      	ldrb	r2, [r2, #0]
 80021da:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	3301      	adds	r3, #1
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
 80021e2:	e7ec      	b.n	80021be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80021e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4413      	add	r3, r2
 80021ea:	3b01      	subs	r3, #1
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80021f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f6:	3b01      	subs	r3, #1
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	441a      	add	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4413      	add	r3, r2
 8002206:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800220c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	3220      	adds	r2, #32
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800221a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221c:	3301      	adds	r3, #1
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002220:	e7ba      	b.n	8002198 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002224:	4618      	mov	r0, r3
 8002226:	3738      	adds	r7, #56	; 0x38
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	0800e054 	.word	0x0800e054

08002248 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	0800df5c 	.word	0x0800df5c

08002264 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	611a      	str	r2, [r3, #16]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
  }
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
	...

080022ac <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a42      	ldr	r2, [pc, #264]	; (80023c8 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d068      	beq.n	8002394 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a40      	ldr	r2, [pc, #256]	; (80023cc <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d061      	beq.n	8002394 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a3d      	ldr	r2, [pc, #244]	; (80023d0 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d05a      	beq.n	8002394 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a3b      	ldr	r2, [pc, #236]	; (80023d4 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d053      	beq.n	8002394 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a38      	ldr	r2, [pc, #224]	; (80023d8 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d04c      	beq.n	8002394 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a36      	ldr	r2, [pc, #216]	; (80023dc <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d045      	beq.n	8002394 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a33      	ldr	r2, [pc, #204]	; (80023e0 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d03e      	beq.n	8002394 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a31      	ldr	r2, [pc, #196]	; (80023e4 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d037      	beq.n	8002394 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a2e      	ldr	r2, [pc, #184]	; (80023e8 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d030      	beq.n	8002394 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a2c      	ldr	r2, [pc, #176]	; (80023ec <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d029      	beq.n	8002394 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a29      	ldr	r2, [pc, #164]	; (80023f0 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d022      	beq.n	8002394 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a27      	ldr	r2, [pc, #156]	; (80023f4 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d01b      	beq.n	8002394 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a24      	ldr	r2, [pc, #144]	; (80023f8 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d014      	beq.n	8002394 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a22      	ldr	r2, [pc, #136]	; (80023fc <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d00d      	beq.n	8002394 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a1f      	ldr	r2, [pc, #124]	; (8002400 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d006      	beq.n	8002394 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a1d      	ldr	r2, [pc, #116]	; (8002404 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d109      	bne.n	80023a8 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80023a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a6:	e008      	b.n	80023ba <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80023b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40020010 	.word	0x40020010
 80023cc:	40020028 	.word	0x40020028
 80023d0:	40020040 	.word	0x40020040
 80023d4:	40020058 	.word	0x40020058
 80023d8:	40020070 	.word	0x40020070
 80023dc:	40020088 	.word	0x40020088
 80023e0:	400200a0 	.word	0x400200a0
 80023e4:	400200b8 	.word	0x400200b8
 80023e8:	40020410 	.word	0x40020410
 80023ec:	40020428 	.word	0x40020428
 80023f0:	40020440 	.word	0x40020440
 80023f4:	40020458 	.word	0x40020458
 80023f8:	40020470 	.word	0x40020470
 80023fc:	40020488 	.word	0x40020488
 8002400:	400204a0 	.word	0x400204a0
 8002404:	400204b8 	.word	0x400204b8

08002408 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a0a      	ldr	r2, [pc, #40]	; (800243c <_ZN13STM32HardwareC1Ev+0x34>)
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	240004f0 	.word	0x240004f0

08002440 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f804 	bl	8002456 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3304      	adds	r3, #4
 8002466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800246a:	4619      	mov	r1, r3
 800246c:	f009 fafc 	bl	800ba68 <HAL_UART_Receive_DMA>
    }
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002478:	b590      	push	{r4, r7, lr}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002480:	f04f 33ff 	mov.w	r3, #4294967295
 8002484:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ff0d 	bl	80022ac <_ZN13STM32Hardware10getRdmaIndEv>
 8002492:	4603      	mov	r3, r0
 8002494:	429c      	cmp	r4, r3
 8002496:	bf14      	ite	ne
 8002498:	2301      	movne	r3, #1
 800249a:	2300      	moveq	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d012      	beq.n	80024c8 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80024a8:	1c59      	adds	r1, r3, #1
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	4413      	add	r3, r2
 80024b4:	791b      	ldrb	r3, [r3, #4]
 80024b6:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80024be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80024c8:	68fb      	ldr	r3, [r7, #12]
    }
 80024ca:	4618      	mov	r0, r3
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd90      	pop	{r4, r7, pc}
	...

080024d4 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d108      	bne.n	80024fa <_ZN13STM32Hardware5flushEv+0x26>
 80024e8:	4b27      	ldr	r3, [pc, #156]	; (8002588 <_ZN13STM32Hardware5flushEv+0xb4>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	f083 0301 	eor.w	r3, r3, #1
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <_ZN13STM32Hardware5flushEv+0x26>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <_ZN13STM32Hardware5flushEv+0x28>
 80024fa:	2300      	movs	r3, #0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d03f      	beq.n	8002580 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002500:	4b21      	ldr	r3, [pc, #132]	; (8002588 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002512:	429a      	cmp	r2, r3
 8002514:	d031      	beq.n	800257a <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002522:	429a      	cmp	r2, r3
 8002524:	d20a      	bcs.n	800253c <_ZN13STM32Hardware5flushEv+0x68>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800252c:	b29a      	uxth	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002534:	b29b      	uxth	r3, r3
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	b29b      	uxth	r3, r3
 800253a:	e006      	b.n	800254a <_ZN13STM32Hardware5flushEv+0x76>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002542:	b29b      	uxth	r3, r3
 8002544:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002548:	b29b      	uxth	r3, r3
 800254a:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002556:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	89fa      	ldrh	r2, [r7, #14]
 8002560:	4619      	mov	r1, r3
 8002562:	f009 f9ef 	bl	800b944 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800256c:	89fb      	ldrh	r3, [r7, #14]
 800256e:	4413      	add	r3, r2
 8002570:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 800257a:	4b03      	ldr	r3, [pc, #12]	; (8002588 <_ZN13STM32Hardware5flushEv+0xb4>)
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
      }
    }
 8002580:	bf00      	nop
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	240006b8 	.word	0x240006b8

0800258c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
      int n = length;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a2:	bfa8      	it	ge
 80025a4:	f44f 7300 	movge.w	r3, #512	; 0x200
 80025a8:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80025b0:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	4293      	cmp	r3, r2
 80025b8:	bf28      	it	cs
 80025ba:	4613      	movcs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80025c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4413      	add	r3, r2
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	68b9      	ldr	r1, [r7, #8]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f00b fac7 	bl	800db64 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	4413      	add	r3, r2
 80025e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d00b      	beq.n	800260a <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	18d1      	adds	r1, r2, r3
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	461a      	mov	r2, r3
 8002606:	f00b faad 	bl	800db64 <memcpy>
      }

      flush();
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f7ff ff62 	bl	80024d4 <_ZN13STM32Hardware5flushEv>
    }
 8002610:	bf00      	nop
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	f002 fa6e 	bl	8004b00 <HAL_GetTick>
 8002624:	4603      	mov	r3, r0
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe ffdc 	bl	80015f8 <_ZN3ros3MsgC1Ev>
 8002640:	4a0e      	ldr	r2, [pc, #56]	; (800267c <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	0800e0bc 	.word	0x0800e0bc

08002680 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002680:	b480      	push	{r7}
 8002682:	b08b      	sub	sp, #44	; 0x2c
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002694:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800269c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800269e:	6838      	ldr	r0, [r7, #0]
 80026a0:	4401      	add	r1, r0
 80026a2:	b2d3      	uxtb	r3, r2
 80026a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80026a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	0a02      	lsrs	r2, r0, #8
 80026b4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80026b8:	0a0b      	lsrs	r3, r1, #8
 80026ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026bc:	3101      	adds	r1, #1
 80026be:	6838      	ldr	r0, [r7, #0]
 80026c0:	4401      	add	r1, r0
 80026c2:	b2d3      	uxtb	r3, r2
 80026c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80026c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	0c02      	lsrs	r2, r0, #16
 80026d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80026d8:	0c0b      	lsrs	r3, r1, #16
 80026da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026dc:	3102      	adds	r1, #2
 80026de:	6838      	ldr	r0, [r7, #0]
 80026e0:	4401      	add	r1, r0
 80026e2:	b2d3      	uxtb	r3, r2
 80026e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80026e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	0e02      	lsrs	r2, r0, #24
 80026f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026f8:	0e0b      	lsrs	r3, r1, #24
 80026fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026fc:	3103      	adds	r1, #3
 80026fe:	6838      	ldr	r0, [r7, #0]
 8002700:	4401      	add	r1, r0
 8002702:	b2d3      	uxtb	r3, r2
 8002704:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002706:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	000a      	movs	r2, r1
 8002714:	2300      	movs	r3, #0
 8002716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002718:	3104      	adds	r1, #4
 800271a:	6838      	ldr	r0, [r7, #0]
 800271c:	4401      	add	r1, r0
 800271e:	b2d3      	uxtb	r3, r2
 8002720:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002722:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	0a0a      	lsrs	r2, r1, #8
 8002730:	2300      	movs	r3, #0
 8002732:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002734:	3105      	adds	r1, #5
 8002736:	6838      	ldr	r0, [r7, #0]
 8002738:	4401      	add	r1, r0
 800273a:	b2d3      	uxtb	r3, r2
 800273c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800273e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	0c0a      	lsrs	r2, r1, #16
 800274c:	2300      	movs	r3, #0
 800274e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002750:	3106      	adds	r1, #6
 8002752:	6838      	ldr	r0, [r7, #0]
 8002754:	4401      	add	r1, r0
 8002756:	b2d3      	uxtb	r3, r2
 8002758:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800275a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	0e0a      	lsrs	r2, r1, #24
 8002768:	2300      	movs	r3, #0
 800276a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800276c:	3107      	adds	r1, #7
 800276e:	6838      	ldr	r0, [r7, #0]
 8002770:	4401      	add	r1, r0
 8002772:	b2d3      	uxtb	r3, r2
 8002774:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	3308      	adds	r3, #8
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002782:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002786:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800278a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800278c:	6838      	ldr	r0, [r7, #0]
 800278e:	4401      	add	r1, r0
 8002790:	b2d3      	uxtb	r3, r2
 8002792:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002794:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	0a02      	lsrs	r2, r0, #8
 80027a2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80027a6:	0a0b      	lsrs	r3, r1, #8
 80027a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027aa:	3101      	adds	r1, #1
 80027ac:	6838      	ldr	r0, [r7, #0]
 80027ae:	4401      	add	r1, r0
 80027b0:	b2d3      	uxtb	r3, r2
 80027b2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80027b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	0c02      	lsrs	r2, r0, #16
 80027c2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80027c6:	0c0b      	lsrs	r3, r1, #16
 80027c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ca:	3102      	adds	r1, #2
 80027cc:	6838      	ldr	r0, [r7, #0]
 80027ce:	4401      	add	r1, r0
 80027d0:	b2d3      	uxtb	r3, r2
 80027d2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80027d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	0e02      	lsrs	r2, r0, #24
 80027e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80027e6:	0e0b      	lsrs	r3, r1, #24
 80027e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ea:	3103      	adds	r1, #3
 80027ec:	6838      	ldr	r0, [r7, #0]
 80027ee:	4401      	add	r1, r0
 80027f0:	b2d3      	uxtb	r3, r2
 80027f2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80027f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	000a      	movs	r2, r1
 8002802:	2300      	movs	r3, #0
 8002804:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002806:	3104      	adds	r1, #4
 8002808:	6838      	ldr	r0, [r7, #0]
 800280a:	4401      	add	r1, r0
 800280c:	b2d3      	uxtb	r3, r2
 800280e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002810:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	0a0a      	lsrs	r2, r1, #8
 800281e:	2300      	movs	r3, #0
 8002820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002822:	3105      	adds	r1, #5
 8002824:	6838      	ldr	r0, [r7, #0]
 8002826:	4401      	add	r1, r0
 8002828:	b2d3      	uxtb	r3, r2
 800282a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 800282c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	0c0a      	lsrs	r2, r1, #16
 800283a:	2300      	movs	r3, #0
 800283c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800283e:	3106      	adds	r1, #6
 8002840:	6838      	ldr	r0, [r7, #0]
 8002842:	4401      	add	r1, r0
 8002844:	b2d3      	uxtb	r3, r2
 8002846:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002848:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	0e0a      	lsrs	r2, r1, #24
 8002856:	2300      	movs	r3, #0
 8002858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800285a:	3107      	adds	r1, #7
 800285c:	6838      	ldr	r0, [r7, #0]
 800285e:	4401      	add	r1, r0
 8002860:	b2d3      	uxtb	r3, r2
 8002862:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	3308      	adds	r3, #8
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002870:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002874:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800287a:	6838      	ldr	r0, [r7, #0]
 800287c:	4401      	add	r1, r0
 800287e:	b2d3      	uxtb	r3, r2
 8002880:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002882:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	0a02      	lsrs	r2, r0, #8
 8002890:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002894:	0a0b      	lsrs	r3, r1, #8
 8002896:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002898:	3101      	adds	r1, #1
 800289a:	6838      	ldr	r0, [r7, #0]
 800289c:	4401      	add	r1, r0
 800289e:	b2d3      	uxtb	r3, r2
 80028a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80028a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	0c02      	lsrs	r2, r0, #16
 80028b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80028b4:	0c0b      	lsrs	r3, r1, #16
 80028b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b8:	3102      	adds	r1, #2
 80028ba:	6838      	ldr	r0, [r7, #0]
 80028bc:	4401      	add	r1, r0
 80028be:	b2d3      	uxtb	r3, r2
 80028c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80028c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	0e02      	lsrs	r2, r0, #24
 80028d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80028d4:	0e0b      	lsrs	r3, r1, #24
 80028d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d8:	3103      	adds	r1, #3
 80028da:	6838      	ldr	r0, [r7, #0]
 80028dc:	4401      	add	r1, r0
 80028de:	b2d3      	uxtb	r3, r2
 80028e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80028e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	000a      	movs	r2, r1
 80028f0:	2300      	movs	r3, #0
 80028f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028f4:	3104      	adds	r1, #4
 80028f6:	6838      	ldr	r0, [r7, #0]
 80028f8:	4401      	add	r1, r0
 80028fa:	b2d3      	uxtb	r3, r2
 80028fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80028fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	0a0a      	lsrs	r2, r1, #8
 800290c:	2300      	movs	r3, #0
 800290e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002910:	3105      	adds	r1, #5
 8002912:	6838      	ldr	r0, [r7, #0]
 8002914:	4401      	add	r1, r0
 8002916:	b2d3      	uxtb	r3, r2
 8002918:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800291a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	0c0a      	lsrs	r2, r1, #16
 8002928:	2300      	movs	r3, #0
 800292a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800292c:	3106      	adds	r1, #6
 800292e:	6838      	ldr	r0, [r7, #0]
 8002930:	4401      	add	r1, r0
 8002932:	b2d3      	uxtb	r3, r2
 8002934:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002936:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	0e0a      	lsrs	r2, r1, #24
 8002944:	2300      	movs	r3, #0
 8002946:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002948:	3107      	adds	r1, #7
 800294a:	6838      	ldr	r0, [r7, #0]
 800294c:	4401      	add	r1, r0
 800294e:	b2d3      	uxtb	r3, r2
 8002950:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	3308      	adds	r3, #8
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800295a:	4618      	mov	r0, r3
 800295c:	372c      	adds	r7, #44	; 0x2c
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002966:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800296a:	b0eb      	sub	sp, #428	; 0x1ac
 800296c:	af00      	add	r7, sp, #0
 800296e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002972:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002988:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800298c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002990:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002994:	4413      	add	r3, r2
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2200      	movs	r2, #0
 800299c:	461c      	mov	r4, r3
 800299e:	4615      	mov	r5, r2
 80029a0:	ea40 0804 	orr.w	r8, r0, r4
 80029a4:	ea41 0905 	orr.w	r9, r1, r5
 80029a8:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029ac:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029b0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029ba:	4413      	add	r3, r2
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2200      	movs	r2, #0
 80029c2:	469a      	mov	sl, r3
 80029c4:	4693      	mov	fp, r2
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80029d2:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80029d6:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80029da:	ea40 0402 	orr.w	r4, r0, r2
 80029de:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80029e2:	430b      	orrs	r3, r1
 80029e4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80029e8:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80029ec:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029f0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029f8:	1c9a      	adds	r2, r3, #2
 80029fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029fe:	4413      	add	r3, r2
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2200      	movs	r2, #0
 8002a06:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002a0a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002a1a:	464c      	mov	r4, r9
 8002a1c:	0423      	lsls	r3, r4, #16
 8002a1e:	4644      	mov	r4, r8
 8002a20:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002a24:	4644      	mov	r4, r8
 8002a26:	0422      	lsls	r2, r4, #16
 8002a28:	ea40 0402 	orr.w	r4, r0, r2
 8002a2c:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002a30:	430b      	orrs	r3, r1
 8002a32:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002a36:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002a3a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a3e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a42:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a46:	1cda      	adds	r2, r3, #3
 8002a48:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a4c:	4413      	add	r3, r2
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2200      	movs	r2, #0
 8002a54:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002a58:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002a5c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002a60:	4623      	mov	r3, r4
 8002a62:	0a1b      	lsrs	r3, r3, #8
 8002a64:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002a68:	4623      	mov	r3, r4
 8002a6a:	061b      	lsls	r3, r3, #24
 8002a6c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002a70:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002a74:	4623      	mov	r3, r4
 8002a76:	4303      	orrs	r3, r0
 8002a78:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a7c:	462b      	mov	r3, r5
 8002a7e:	430b      	orrs	r3, r1
 8002a80:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a84:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002a88:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002a8c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a90:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a94:	1d1a      	adds	r2, r3, #4
 8002a96:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a9a:	4413      	add	r3, r2
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002aa6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002ab6:	0023      	movs	r3, r4
 8002ab8:	2200      	movs	r2, #0
 8002aba:	ea40 0402 	orr.w	r4, r0, r2
 8002abe:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002ac2:	430b      	orrs	r3, r1
 8002ac4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002ac8:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002acc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002ad0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ad4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ad8:	1d5a      	adds	r2, r3, #5
 8002ada:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ade:	4413      	add	r3, r2
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002aea:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002afa:	0223      	lsls	r3, r4, #8
 8002afc:	2200      	movs	r2, #0
 8002afe:	ea40 0402 	orr.w	r4, r0, r2
 8002b02:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002b06:	430b      	orrs	r3, r1
 8002b08:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002b0c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002b10:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002b14:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b18:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b1c:	1d9a      	adds	r2, r3, #6
 8002b1e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b22:	4413      	add	r3, r2
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002b2e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002b3e:	0423      	lsls	r3, r4, #16
 8002b40:	2200      	movs	r2, #0
 8002b42:	ea40 0402 	orr.w	r4, r0, r2
 8002b46:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002b4a:	430b      	orrs	r3, r1
 8002b4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b50:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002b54:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002b58:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b5c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b60:	1dda      	adds	r2, r3, #7
 8002b62:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b66:	4413      	add	r3, r2
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002b72:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002b82:	0623      	lsls	r3, r4, #24
 8002b84:	2200      	movs	r2, #0
 8002b86:	ea40 0402 	orr.w	r4, r0, r2
 8002b8a:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002b8e:	430b      	orrs	r3, r1
 8002b90:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002b94:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002b98:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002b9c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ba0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002ba4:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002ba8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bac:	3308      	adds	r3, #8
 8002bae:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002bbe:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002bc2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002bc6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bca:	4413      	add	r3, r2
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002bd6:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002bda:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002bde:	4623      	mov	r3, r4
 8002be0:	4303      	orrs	r3, r0
 8002be2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002be6:	462b      	mov	r3, r5
 8002be8:	430b      	orrs	r3, r1
 8002bea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002bee:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002bf2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002bf6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002bfa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c04:	4413      	add	r3, r2
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002c10:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002c20:	464c      	mov	r4, r9
 8002c22:	0223      	lsls	r3, r4, #8
 8002c24:	4644      	mov	r4, r8
 8002c26:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002c2a:	4644      	mov	r4, r8
 8002c2c:	0222      	lsls	r2, r4, #8
 8002c2e:	ea40 0402 	orr.w	r4, r0, r2
 8002c32:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002c36:	430b      	orrs	r3, r1
 8002c38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002c3c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002c40:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c44:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c48:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c4c:	1c9a      	adds	r2, r3, #2
 8002c4e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c52:	4413      	add	r3, r2
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002c6e:	464c      	mov	r4, r9
 8002c70:	0423      	lsls	r3, r4, #16
 8002c72:	4644      	mov	r4, r8
 8002c74:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002c78:	4644      	mov	r4, r8
 8002c7a:	0422      	lsls	r2, r4, #16
 8002c7c:	ea40 0402 	orr.w	r4, r0, r2
 8002c80:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002c84:	430b      	orrs	r3, r1
 8002c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c8a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002c8e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c92:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c96:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c9a:	1cda      	adds	r2, r3, #3
 8002c9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ca0:	4413      	add	r3, r2
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cac:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002cb0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002cb4:	4623      	mov	r3, r4
 8002cb6:	0a1b      	lsrs	r3, r3, #8
 8002cb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002cbc:	4623      	mov	r3, r4
 8002cbe:	061b      	lsls	r3, r3, #24
 8002cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cc4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002cc8:	4623      	mov	r3, r4
 8002cca:	4303      	orrs	r3, r0
 8002ccc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cd0:	462b      	mov	r3, r5
 8002cd2:	430b      	orrs	r3, r1
 8002cd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002cd8:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002cdc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002ce0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ce4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ce8:	1d1a      	adds	r2, r3, #4
 8002cea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cee:	4413      	add	r3, r2
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cfa:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002d0a:	0023      	movs	r3, r4
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	ea40 0402 	orr.w	r4, r0, r2
 8002d12:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002d16:	430b      	orrs	r3, r1
 8002d18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002d1c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002d20:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002d24:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d28:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d2c:	1d5a      	adds	r2, r3, #5
 8002d2e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d32:	4413      	add	r3, r2
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d3e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002d4e:	0223      	lsls	r3, r4, #8
 8002d50:	2200      	movs	r2, #0
 8002d52:	ea40 0402 	orr.w	r4, r0, r2
 8002d56:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d60:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002d64:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002d68:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d6c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d70:	1d9a      	adds	r2, r3, #6
 8002d72:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d76:	4413      	add	r3, r2
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002d92:	0423      	lsls	r3, r4, #16
 8002d94:	2200      	movs	r2, #0
 8002d96:	ea40 0402 	orr.w	r4, r0, r2
 8002d9a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002d9e:	430b      	orrs	r3, r1
 8002da0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002da4:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002da8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002dac:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002db0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002db4:	1dda      	adds	r2, r3, #7
 8002db6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dba:	4413      	add	r3, r2
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002dc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002dd6:	0623      	lsls	r3, r4, #24
 8002dd8:	2200      	movs	r2, #0
 8002dda:	ea40 0402 	orr.w	r4, r0, r2
 8002dde:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002de2:	430b      	orrs	r3, r1
 8002de4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002de8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002dec:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002df0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002df4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002df8:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002dfc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e00:	3308      	adds	r3, #8
 8002e02:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e12:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e16:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002e1a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e1e:	4413      	add	r3, r2
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2200      	movs	r2, #0
 8002e26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e2a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e2e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002e32:	4623      	mov	r3, r4
 8002e34:	4303      	orrs	r3, r0
 8002e36:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e38:	462b      	mov	r3, r5
 8002e3a:	430b      	orrs	r3, r1
 8002e3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e3e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002e42:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e46:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e4a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e54:	4413      	add	r3, r2
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	673b      	str	r3, [r7, #112]	; 0x70
 8002e5e:	677a      	str	r2, [r7, #116]	; 0x74
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e6c:	464c      	mov	r4, r9
 8002e6e:	0223      	lsls	r3, r4, #8
 8002e70:	4644      	mov	r4, r8
 8002e72:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002e76:	4644      	mov	r4, r8
 8002e78:	0222      	lsls	r2, r4, #8
 8002e7a:	ea40 0402 	orr.w	r4, r0, r2
 8002e7e:	66bc      	str	r4, [r7, #104]	; 0x68
 8002e80:	430b      	orrs	r3, r1
 8002e82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e84:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002e88:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e8c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e90:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e94:	1c9a      	adds	r2, r3, #2
 8002e96:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e9a:	4413      	add	r3, r2
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	663b      	str	r3, [r7, #96]	; 0x60
 8002ea4:	667a      	str	r2, [r7, #100]	; 0x64
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	f04f 0300 	mov.w	r3, #0
 8002eae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002eb2:	464c      	mov	r4, r9
 8002eb4:	0423      	lsls	r3, r4, #16
 8002eb6:	4644      	mov	r4, r8
 8002eb8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002ebc:	4644      	mov	r4, r8
 8002ebe:	0422      	lsls	r2, r4, #16
 8002ec0:	ea40 0402 	orr.w	r4, r0, r2
 8002ec4:	65bc      	str	r4, [r7, #88]	; 0x58
 8002ec6:	430b      	orrs	r3, r1
 8002ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002eca:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002ece:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ed2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ed6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002eda:	1cda      	adds	r2, r3, #3
 8002edc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ee0:	4413      	add	r3, r2
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	653b      	str	r3, [r7, #80]	; 0x50
 8002eea:	657a      	str	r2, [r7, #84]	; 0x54
 8002eec:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002ef0:	4623      	mov	r3, r4
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ef6:	4623      	mov	r3, r4
 8002ef8:	061b      	lsls	r3, r3, #24
 8002efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002efc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002f00:	4623      	mov	r3, r4
 8002f02:	4303      	orrs	r3, r0
 8002f04:	643b      	str	r3, [r7, #64]	; 0x40
 8002f06:	462b      	mov	r3, r5
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f0c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002f10:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002f14:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f18:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f1c:	1d1a      	adds	r2, r3, #4
 8002f1e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f22:	4413      	add	r3, r2
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2200      	movs	r2, #0
 8002f2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002f38:	0023      	movs	r3, r4
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	ea40 0402 	orr.w	r4, r0, r2
 8002f40:	633c      	str	r4, [r7, #48]	; 0x30
 8002f42:	430b      	orrs	r3, r1
 8002f44:	637b      	str	r3, [r7, #52]	; 0x34
 8002f46:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002f4a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002f4e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f52:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f56:	1d5a      	adds	r2, r3, #5
 8002f58:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f5c:	4413      	add	r3, r2
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2200      	movs	r2, #0
 8002f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002f72:	0223      	lsls	r3, r4, #8
 8002f74:	2200      	movs	r2, #0
 8002f76:	ea40 0402 	orr.w	r4, r0, r2
 8002f7a:	623c      	str	r4, [r7, #32]
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f80:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002f84:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002f88:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f8c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f90:	3306      	adds	r3, #6
 8002f92:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002f96:	4413      	add	r3, r2
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	61bb      	str	r3, [r7, #24]
 8002fa0:	61fa      	str	r2, [r7, #28]
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	69bc      	ldr	r4, [r7, #24]
 8002fac:	0423      	lsls	r3, r4, #16
 8002fae:	2200      	movs	r2, #0
 8002fb0:	ea40 0402 	orr.w	r4, r0, r2
 8002fb4:	613c      	str	r4, [r7, #16]
 8002fb6:	430b      	orrs	r3, r1
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002fbe:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002fc2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002fc6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fca:	3307      	adds	r3, #7
 8002fcc:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002fd0:	4413      	add	r3, r2
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	60fa      	str	r2, [r7, #12]
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	68bc      	ldr	r4, [r7, #8]
 8002fe6:	0623      	lsls	r3, r4, #24
 8002fe8:	2200      	movs	r2, #0
 8002fea:	ea40 0402 	orr.w	r4, r0, r2
 8002fee:	603c      	str	r4, [r7, #0]
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	607b      	str	r3, [r7, #4]
 8002ff4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002ff8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002ffc:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003000:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003004:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003008:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800300c:	3308      	adds	r3, #8
 800300e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003012:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003016:	4618      	mov	r0, r3
 8003018:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 800301c:	46bd      	mov	sp, r7
 800301e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003022:	4770      	bx	lr

08003024 <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 800302e:	4618      	mov	r0, r3
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	0800df80 	.word	0x0800df80

08003040 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	4b03      	ldr	r3, [pc, #12]	; (8003058 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	0800df94 	.word	0x0800df94

0800305c <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
      data(0)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe fac6 	bl	80015f8 <_ZN3ros3MsgC1Ev>
 800306c:	4a05      	ldr	r2, [pc, #20]	; (8003084 <_ZN8std_msgs4BoolC1Ev+0x28>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	711a      	strb	r2, [r3, #4]
    {
    }
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	0800e0a4 	.word	0x0800e0a4

08003088 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	791b      	ldrb	r3, [r3, #4]
 800309a:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	4413      	add	r3, r2
 80030a2:	7a3a      	ldrb	r2, [r7, #8]
 80030a4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3301      	adds	r3, #1
 80030aa:	60fb      	str	r3, [r7, #12]
      return offset;
 80030ac:	68fb      	ldr	r3, [r7, #12]
    }
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80030ba:	b480      	push	{r7}
 80030bc:	b085      	sub	sp, #20
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80030cc:	7a3a      	ldrb	r2, [r7, #8]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6839      	ldr	r1, [r7, #0]
 80030d2:	440b      	add	r3, r1
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 80030dc:	7a3a      	ldrb	r2, [r7, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	3301      	adds	r3, #1
 80030e6:	60fb      	str	r3, [r7, #12]
     return offset;
 80030e8:	68fb      	ldr	r3, [r7, #12]
    }
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <_ZN8std_msgs4Bool7getTypeEv>:

    const char * getType(){ return "std_msgs/Bool"; };
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	4b03      	ldr	r3, [pc, #12]	; (8003110 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 8003102:	4618      	mov	r0, r3
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	0800dfb8 	.word	0x0800dfb8

08003114 <_ZN8std_msgs4Bool6getMD5Ev>:
    const char * getMD5(){ return "8b94c1b53db61fb6aed406028ad6332a"; };
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	4b03      	ldr	r3, [pc, #12]	; (800312c <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 800311e:	4618      	mov	r0, r3
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	0800dfc8 	.word	0x0800dfc8

08003130 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE>:
ros::Subscriber<geometry_msgs::Point> scara_sub("scara_toSTM", ROS::scara_callback);

ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
//ros::Publisher scara_pub("scara_fromSTM", &scara_state);

void ROS::scara_callback(const geometry_msgs::Point &msgs){
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	scara.ARM_Goal.Px = msgs.x;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800313e:	490b      	ldr	r1, [pc, #44]	; (800316c <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003140:	e9c1 2300 	strd	r2, r3, [r1]
	scara.ARM_Goal.Py = msgs.y;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800314a:	4908      	ldr	r1, [pc, #32]	; (800316c <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 800314c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	scara.ARM_Goal.Pz = msgs.z;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003156:	4905      	ldr	r1, [pc, #20]	; (800316c <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003158:	e9c1 2304 	strd	r2, r3, [r1, #16]
	scara.run();
 800315c:	4803      	ldr	r0, [pc, #12]	; (800316c <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 800315e:	f000 fe95 	bl	8003e8c <_ZN5SCARA3runEv>
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	240010a8 	.word	0x240010a8

08003170 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE>:

void ROS::mecanum_callback(const geometry_msgs::Point &msgs){
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
	mecanum.CAR_Goal.Vx = msgs.x;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800317e:	490b      	ldr	r1, [pc, #44]	; (80031ac <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003180:	e9c1 2300 	strd	r2, r3, [r1]
	mecanum.CAR_Goal.Vy = msgs.y;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800318a:	4908      	ldr	r1, [pc, #32]	; (80031ac <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 800318c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	mecanum.CAR_Goal.Omega = msgs.z;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003196:	4905      	ldr	r1, [pc, #20]	; (80031ac <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003198:	e9c1 2304 	strd	r2, r3, [r1, #16]
	mecanum.run();
 800319c:	4803      	ldr	r0, [pc, #12]	; (80031ac <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 800319e:	f7fe f8ed 	bl	800137c <_ZN7Mecanum3runEv>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	24000670 	.word	0x24000670

080031b0 <_ZN3ROS5setupEv>:
//	car_speed.z = mecanum.CAR_Now.Omega;
//	mecanum_pub.publish(&car_speed);
//}


void ROS::setup(void){
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
	nh.initNode();
 80031b4:	4804      	ldr	r0, [pc, #16]	; (80031c8 <_ZN3ROS5setupEv+0x18>)
 80031b6:	f000 f941 	bl	800343c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

    nh.subscribe(mecanum_sub);
 80031ba:	4904      	ldr	r1, [pc, #16]	; (80031cc <_ZN3ROS5setupEv+0x1c>)
 80031bc:	4802      	ldr	r0, [pc, #8]	; (80031c8 <_ZN3ROS5setupEv+0x18>)
 80031be:	f000 f95a 	bl	8003476 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>

//    nh.advertise(mecanum_pub);
}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	240006bc 	.word	0x240006bc
 80031cc:	24001020 	.word	0x24001020

080031d0 <_ZN3ROS4loopEv>:

void ROS::loop(void){
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
	nh.spinOnce();
 80031d4:	4802      	ldr	r0, [pc, #8]	; (80031e0 <_ZN3ROS4loopEv+0x10>)
 80031d6:	f000 f979 	bl	80034cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	240006bc 	.word	0x240006bc

080031e4 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 80031ec:	4805      	ldr	r0, [pc, #20]	; (8003204 <HAL_UART_TxCpltCallback+0x20>)
 80031ee:	f000 fb46 	bl	800387e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80031f2:	4603      	mov	r3, r0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff f96d 	bl	80024d4 <_ZN13STM32Hardware5flushEv>
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	240006bc 	.word	0x240006bc

08003208 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003210:	4805      	ldr	r0, [pc, #20]	; (8003228 <HAL_UART_RxCpltCallback+0x20>)
 8003212:	f000 fb34 	bl	800387e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003216:	4603      	mov	r3, r0
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff f91c 	bl	8002456 <_ZN13STM32Hardware10reset_rbufEv>
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	240006bc 	.word	0x240006bc

0800322c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b03      	cmp	r3, #3
 800323e:	d80d      	bhi.n	800325c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	fa22 f103 	lsr.w	r1, r2, r3
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	b2ca      	uxtb	r2, r1
 8003252:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3301      	adds	r3, #1
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	e7ee      	b.n	800323a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800325c:	bf00      	nop
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b03      	cmp	r3, #3
 8003280:	d811      	bhi.n	80032a6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6839      	ldr	r1, [r7, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	440a      	add	r2, r1
 800328c:	7812      	ldrb	r2, [r2, #0]
 800328e:	4611      	mov	r1, r2
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	00d2      	lsls	r2, r2, #3
 8003294:	fa01 f202 	lsl.w	r2, r1, r2
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	3301      	adds	r3, #1
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	e7ea      	b.n	800327c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80032a6:	bf00      	nop
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
	...

080032b4 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	4a04      	ldr	r2, [pc, #16]	; (80032d0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	0800e0ec 	.word	0x0800e0ec

080032d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff ffe8 	bl	80032b4 <_ZN3ros15NodeHandleBase_C1Ev>
 80032e4:	4a3a      	ldr	r2, [pc, #232]	; (80033d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3304      	adds	r3, #4
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff f88a 	bl	8002408 <_ZN13STM32HardwareC1Ev>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe fcec 	bl	8001ce0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2b18      	cmp	r3, #24
 8003310:	d80b      	bhi.n	800332a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	2200      	movs	r2, #0
 8003320:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	3301      	adds	r3, #1
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	e7f0      	b.n	800330c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b18      	cmp	r3, #24
 8003332:	d80a      	bhi.n	800334a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	f202 2222 	addw	r2, r2, #546	; 0x222
 800333c:	2100      	movs	r1, #0
 800333e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	3301      	adds	r3, #1
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	e7f1      	b.n	800332e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003354:	d20a      	bcs.n	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4413      	add	r3, r2
 800335c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	3301      	adds	r3, #1
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	e7f0      	b.n	800334e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800336c:	2300      	movs	r3, #0
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003376:	d20a      	bcs.n	800338e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4413      	add	r3, r2
 800337e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	3301      	adds	r3, #1
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	e7f0      	b.n	8003370 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	0800e090 	.word	0x0800e090

080033d4 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	4a04      	ldr	r2, [pc, #16]	; (80033f0 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	0800e0d4 	.word	0x0800e0d4

080033f4 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff ffe5 	bl	80033d4 <_ZN3ros11Subscriber_C1Ev>
 800340a:	4a0b      	ldr	r2, [pc, #44]	; (8003438 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei+0x44>)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3310      	adds	r3, #16
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff f90b 	bl	8002630 <_ZN13geometry_msgs5PointC1Ev>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	609a      	str	r2, [r3, #8]
  };
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	0800e078 	.word	0x0800e078

0800343c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3304      	adds	r3, #4
 8003448:	4618      	mov	r0, r3
 800344a:	f7fe fff9 	bl	8002440 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003476:	b480      	push	{r7}
 8003478:	b085      	sub	sp, #20
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2b18      	cmp	r3, #24
 8003488:	dc19      	bgt.n	80034be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10d      	bne.n	80034b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800349a:	6839      	ldr	r1, [r7, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80034a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	605a      	str	r2, [r3, #4]
        return true;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e004      	b.n	80034c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	3301      	adds	r3, #1
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	e7e2      	b.n	8003484 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0xe>
      }
    }
    return false;
 80034be:	2300      	movs	r3, #0
  }
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3304      	adds	r3, #4
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff f89d 	bl	8002618 <_ZN13STM32Hardware4timeEv>
 80034de:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d903      	bls.n	80034fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003500:	2b00      	cmp	r3, #0
 8003502:	d009      	beq.n	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	429a      	cmp	r2, r3
 800350e:	d903      	bls.n	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800351e:	2b00      	cmp	r3, #0
 8003520:	d014      	beq.n	800354c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3304      	adds	r3, #4
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff f876 	bl	8002618 <_ZN13STM32Hardware4timeEv>
 800352c:	4602      	mov	r2, r0
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1ad2      	subs	r2, r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003538:	429a      	cmp	r2, r3
 800353a:	bf8c      	ite	hi
 800353c:	2301      	movhi	r3, #1
 800353e:	2300      	movls	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8003546:	f06f 0301 	mvn.w	r3, #1
 800354a:	e194      	b.n	8003876 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3304      	adds	r3, #4
 8003550:	4618      	mov	r0, r3
 8003552:	f7fe ff91 	bl	8002478 <_ZN13STM32Hardware4readEv>
 8003556:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f2c0 8174 	blt.w	8003848 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	441a      	add	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003576:	2b07      	cmp	r3, #7
 8003578:	d11e      	bne.n	80035b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003580:	1c59      	adds	r1, r3, #1
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	b2d1      	uxtb	r1, r2
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	4413      	add	r3, r2
 8003590:	460a      	mov	r2, r1
 8003592:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800359c:	1e5a      	subs	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1b4      	bne.n	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2208      	movs	r2, #8
 80035b2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80035b6:	e7af      	b.n	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d128      	bne.n	8003614 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2bff      	cmp	r3, #255	; 0xff
 80035c6:	d10d      	bne.n	80035e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f103 0214 	add.w	r2, r3, #20
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80035e2:	e799      	b.n	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3304      	adds	r3, #4
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff f815 	bl	8002618 <_ZN13STM32Hardware4timeEv>
 80035ee:	4602      	mov	r2, r0
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f8:	4293      	cmp	r3, r2
 80035fa:	bf8c      	ite	hi
 80035fc:	2301      	movhi	r3, #1
 80035fe:	2300      	movls	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d088      	beq.n	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800360e:	f06f 0301 	mvn.w	r3, #1
 8003612:	e130      	b.n	8003876 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800361a:	2b01      	cmp	r3, #1
 800361c:	d118      	bne.n	8003650 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2bfe      	cmp	r3, #254	; 0xfe
 8003622:	d107      	bne.n	8003634 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003632:	e771      	b.n	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003642:	2b00      	cmp	r3, #0
 8003644:	f47f af68 	bne.w	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f924 	bl	8003896 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800364e:	e763      	b.n	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003656:	2b02      	cmp	r3, #2
 8003658:	d113      	bne.n	8003682 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003680:	e74a      	b.n	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003688:	2b03      	cmp	r3, #3
 800368a:	d110      	bne.n	80036ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	021b      	lsls	r3, r3, #8
 8003696:	441a      	add	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80036ac:	e734      	b.n	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d116      	bne.n	80036e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80036be:	425a      	negs	r2, r3
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	bf58      	it	pl
 80036c6:	4253      	negpl	r3, r2
 80036c8:	2bff      	cmp	r3, #255	; 0xff
 80036ca:	d107      	bne.n	80036dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80036da:	e71d      	b.n	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80036e4:	e718      	b.n	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036ec:	2b05      	cmp	r3, #5
 80036ee:	d10f      	bne.n	8003710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800370e:	e703      	b.n	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003716:	2b06      	cmp	r3, #6
 8003718:	d117      	bne.n	800374a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	441a      	add	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2207      	movs	r2, #7
 8003730:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800373a:	2b00      	cmp	r3, #0
 800373c:	f47f aeec 	bne.w	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2208      	movs	r2, #8
 8003744:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003748:	e6e6      	b.n	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003750:	2b08      	cmp	r3, #8
 8003752:	f47f aee1 	bne.w	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003764:	425a      	negs	r2, r3
 8003766:	b2db      	uxtb	r3, r3
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	bf58      	it	pl
 800376c:	4253      	negpl	r3, r2
 800376e:	2bff      	cmp	r3, #255	; 0xff
 8003770:	f47f aed2 	bne.w	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800377a:	2b00      	cmp	r3, #0
 800377c:	d110      	bne.n	80037a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f889 	bl	8003896 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f8a4 	bl	80038d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800379a:	f04f 33ff 	mov.w	r3, #4294967295
 800379e:	e06a      	b.n	8003876 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80037a6:	2b0a      	cmp	r3, #10
 80037a8:	d107      	bne.n	80037ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80037b0:	4619      	mov	r1, r3
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f96c 	bl	8003a90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80037b8:	e6ae      	b.n	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80037c0:	2b06      	cmp	r3, #6
 80037c2:	d10e      	bne.n	80037e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80037d0:	4619      	mov	r1, r3
 80037d2:	4610      	mov	r0, r2
 80037d4:	f7fe fbb9 	bl	8001f4a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80037e0:	e69a      	b.n	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80037e8:	2b0b      	cmp	r3, #11
 80037ea:	d104      	bne.n	80037f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80037f4:	e690      	b.n	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80037fc:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800380a:	2b00      	cmp	r3, #0
 800380c:	f43f ae84 	beq.w	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003816:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003820:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800382a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003842:	4611      	mov	r1, r2
 8003844:	4798      	blx	r3
    while (true)
 8003846:	e667      	b.n	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003848:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00f      	beq.n	8003874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003862:	4293      	cmp	r3, r2
 8003864:	d906      	bls.n	8003874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f815 	bl	8003896 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8003874:	2300      	movs	r3, #0
  }
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
    return &hardware_;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3304      	adds	r3, #4
  }
 800388a:	4618      	mov	r0, r3
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003896:	b580      	push	{r7, lr}
 8003898:	b086      	sub	sp, #24
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800389e:	f107 030c 	add.w	r3, r7, #12
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fd feb8 	bl	8001618 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f107 020c 	add.w	r2, r7, #12
 80038b2:	210a      	movs	r1, #10
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	4798      	blx	r3
    rt_time = hardware_.time();
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3304      	adds	r3, #4
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fe feab 	bl	8002618 <_ZN13STM32Hardware4timeEv>
 80038c2:	4602      	mov	r2, r0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80038ca:	bf00      	nop
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80038d2:	b590      	push	{r4, r7, lr}
 80038d4:	b08b      	sub	sp, #44	; 0x2c
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80038da:	f107 030c 	add.w	r3, r7, #12
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fd ff8a 	bl	80017f8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80038e4:	2300      	movs	r3, #0
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	2b18      	cmp	r3, #24
 80038ec:	dc63      	bgt.n	80039b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d056      	beq.n	80039ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	b29b      	uxth	r3, r3
 8003912:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	6859      	ldr	r1, [r3, #4]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3308      	adds	r3, #8
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4608      	mov	r0, r1
 800394e:	4798      	blx	r3
 8003950:	4603      	mov	r3, r0
 8003952:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	6859      	ldr	r1, [r3, #4]
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	330c      	adds	r3, #12
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4608      	mov	r0, r1
 800397c:	4798      	blx	r3
 800397e:	4603      	mov	r3, r0
 8003980:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003986:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681c      	ldr	r4, [r3, #0]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4618      	mov	r0, r3
 800399e:	f7fe fc78 	bl	8002292 <_ZN3ros9Publisher15getEndpointTypeEv>
 80039a2:	4601      	mov	r1, r0
 80039a4:	f107 030c 	add.w	r3, r7, #12
 80039a8:	461a      	mov	r2, r3
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	3301      	adds	r3, #1
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
 80039b4:	e798      	b.n	80038e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80039b6:	2300      	movs	r3, #0
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	2b18      	cmp	r3, #24
 80039be:	dc5f      	bgt.n	8003a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d053      	beq.n	8003a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a02:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3308      	adds	r3, #8
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4608      	mov	r0, r1
 8003a12:	4798      	blx	r3
 8003a14:	4603      	mov	r3, r0
 8003a16:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a28:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	330c      	adds	r3, #12
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4608      	mov	r0, r1
 8003a38:	4798      	blx	r3
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003a3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a42:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681c      	ldr	r4, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3304      	adds	r3, #4
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4608      	mov	r0, r1
 8003a6a:	4798      	blx	r3
 8003a6c:	4601      	mov	r1, r0
 8003a6e:	f107 030c 	add.w	r3, r7, #12
 8003a72:	461a      	mov	r2, r3
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7e:	e79c      	b.n	80039ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003a88:	bf00      	nop
 8003a8a:	372c      	adds	r7, #44	; 0x2c
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd90      	pop	{r4, r7, pc}

08003a90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003a9a:	f107 0308 	add.w	r3, r7, #8
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fd fdba 	bl	8001618 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fe fdb5 	bl	8002618 <_ZN13STM32Hardware4timeEv>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003aba:	f107 0308 	add.w	r3, r7, #8
 8003abe:	6839      	ldr	r1, [r7, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fd fe19 	bl	80016f8 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	4915      	ldr	r1, [pc, #84]	; (8003b20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003acc:	fba1 1303 	umull	r1, r3, r1, r3
 8003ad0:	099b      	lsrs	r3, r3, #6
 8003ad2:	4413      	add	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003ad6:	6939      	ldr	r1, [r7, #16]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003adc:	fba3 0302 	umull	r0, r3, r3, r2
 8003ae0:	099b      	lsrs	r3, r3, #6
 8003ae2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ae6:	fb00 f303 	mul.w	r3, r0, r3
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	4a0d      	ldr	r2, [pc, #52]	; (8003b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003aee:	fb02 f303 	mul.w	r3, r2, r3
 8003af2:	440b      	add	r3, r1
 8003af4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003af6:	f107 0308 	add.w	r3, r7, #8
 8003afa:	3304      	adds	r3, #4
 8003afc:	4619      	mov	r1, r3
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f8a6 	bl	8003c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3304      	adds	r3, #4
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fe fd85 	bl	8002618 <_ZN13STM32Hardware4timeEv>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003b16:	bf00      	nop
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	10624dd3 	.word	0x10624dd3
 8003b24:	000f4240 	.word	0x000f4240

08003b28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b63      	cmp	r3, #99	; 0x63
 8003b38:	dd09      	ble.n	8003b4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003b40:	f083 0301 	eor.w	r3, r3, #1
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e079      	b.n	8003c42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003b5a:	3207      	adds	r2, #7
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	4798      	blx	r3
 8003b62:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	22ff      	movs	r2, #255	; 0xff
 8003b68:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	22fe      	movs	r2, #254	; 0xfe
 8003b70:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	0a1b      	lsrs	r3, r3, #8
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003b9a:	4413      	add	r3, r2
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	b21b      	sxth	r3, r3
 8003bb6:	121b      	asrs	r3, r3, #8
 8003bb8:	b21b      	sxth	r3, r3
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003bc6:	2305      	movs	r3, #5
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	3306      	adds	r3, #6
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	dc0d      	bgt.n	8003bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	4413      	add	r3, r2
 8003be6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	3301      	adds	r3, #1
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	e7ec      	b.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	3307      	adds	r3, #7
 8003bf4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	425a      	negs	r2, r3
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	bf58      	it	pl
 8003c00:	4253      	negpl	r3, r2
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	1c59      	adds	r1, r3, #1
 8003c08:	6179      	str	r1, [r7, #20]
 8003c0a:	43d2      	mvns	r2, r2
 8003c0c:	b2d1      	uxtb	r1, r2
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4413      	add	r3, r2
 8003c12:	460a      	mov	r2, r1
 8003c14:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c1e:	dc0a      	bgt.n	8003c36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	1d18      	adds	r0, r3, #4
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f7fe fcad 	bl	800258c <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	e005      	b.n	8003c42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003c36:	4905      	ldr	r1, [pc, #20]	; (8003c4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f849 	bl	8003cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003c3e:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003c42:	4618      	mov	r0, r3
 8003c44:	3720      	adds	r7, #32
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	0800dfec 	.word	0x0800dfec

08003c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fe fcda 	bl	8002618 <_ZN13STM32Hardware4timeEv>
 8003c64:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4915      	ldr	r1, [pc, #84]	; (8003cc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003c6e:	fba1 1303 	umull	r1, r3, r1, r3
 8003c72:	099b      	lsrs	r3, r3, #6
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	1e5a      	subs	r2, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6859      	ldr	r1, [r3, #4]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003c86:	fba3 0302 	umull	r0, r3, r3, r2
 8003c8a:	099b      	lsrs	r3, r3, #6
 8003c8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c90:	fb00 f303 	mul.w	r3, r0, r3
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	4a0c      	ldr	r2, [pc, #48]	; (8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8003c98:	fb02 f303 	mul.w	r3, r2, r3
 8003c9c:	1aca      	subs	r2, r1, r3
 8003c9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003ca0:	4413      	add	r3, r2
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	f7fc fcb4 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003cbc:	bf00      	nop
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	10624dd3 	.word	0x10624dd3
 8003cc8:	000f4240 	.word	0x000f4240
 8003ccc:	3b9aca00 	.word	0x3b9aca00

08003cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	2103      	movs	r1, #3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f804 	bl	8003cec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003cfa:	f107 0314 	add.w	r3, r7, #20
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fd ff3e 	bl	8001b80 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003d04:	7afb      	ldrb	r3, [r7, #11]
 8003d06:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f107 0214 	add.w	r2, r7, #20
 8003d16:	2107      	movs	r1, #7
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	4798      	blx	r3
  }
 8003d1c:	bf00      	nop
 8003d1e:	3720      	adds	r7, #32
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <_Z41__static_initialization_and_destruction_0ii>:
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d11f      	bne.n	8003d74 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d11a      	bne.n	8003d74 <_Z41__static_initialization_and_destruction_0ii+0x50>
ros::NodeHandle nh;
 8003d3e:	480f      	ldr	r0, [pc, #60]	; (8003d7c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003d40:	f7ff fac8 	bl	80032d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Bool scara_state;
 8003d44:	480e      	ldr	r0, [pc, #56]	; (8003d80 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003d46:	f7ff f989 	bl	800305c <_ZN8std_msgs4BoolC1Ev>
geometry_msgs::Point car_speed;
 8003d4a:	480e      	ldr	r0, [pc, #56]	; (8003d84 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003d4c:	f7fe fc70 	bl	8002630 <_ZN13geometry_msgs5PointC1Ev>
ros::Subscriber<geometry_msgs::Point> mecanum_sub("mecanum_toSTM", ROS::mecanum_callback);
 8003d50:	2301      	movs	r3, #1
 8003d52:	4a0d      	ldr	r2, [pc, #52]	; (8003d88 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003d54:	490d      	ldr	r1, [pc, #52]	; (8003d8c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003d56:	480e      	ldr	r0, [pc, #56]	; (8003d90 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003d58:	f7ff fb4c 	bl	80033f4 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<geometry_msgs::Point> scara_sub("scara_toSTM", ROS::scara_callback);
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	4a0d      	ldr	r2, [pc, #52]	; (8003d94 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003d60:	490d      	ldr	r1, [pc, #52]	; (8003d98 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003d62:	480e      	ldr	r0, [pc, #56]	; (8003d9c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003d64:	f7ff fb46 	bl	80033f4 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
 8003d68:	2300      	movs	r3, #0
 8003d6a:	4a06      	ldr	r2, [pc, #24]	; (8003d84 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003d6c:	490c      	ldr	r1, [pc, #48]	; (8003da0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003d6e:	480d      	ldr	r0, [pc, #52]	; (8003da4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003d70:	f7fe fa78 	bl	8002264 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003d74:	bf00      	nop
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	240006bc 	.word	0x240006bc
 8003d80:	24000ff8 	.word	0x24000ff8
 8003d84:	24001000 	.word	0x24001000
 8003d88:	08003171 	.word	0x08003171
 8003d8c:	0800e028 	.word	0x0800e028
 8003d90:	24001020 	.word	0x24001020
 8003d94:	08003131 	.word	0x08003131
 8003d98:	0800e038 	.word	0x0800e038
 8003d9c:	24001058 	.word	0x24001058
 8003da0:	0800e044 	.word	0x0800e044
 8003da4:	24001090 	.word	0x24001090

08003da8 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	3310      	adds	r3, #16
 8003db6:	6839      	ldr	r1, [r7, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fe fdd4 	bl	8002966 <_ZN13geometry_msgs5Point11deserializeEPh>
    this->cb_(msg);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	3210      	adds	r2, #16
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	4798      	blx	r3
  }
 8003dca:	bf00      	nop
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3310      	adds	r3, #16
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff f914 	bl	8003024 <_ZN13geometry_msgs5Point7getTypeEv>
 8003dfc:	4603      	mov	r3, r0
  }
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b082      	sub	sp, #8
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3310      	adds	r3, #16
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff f914 	bl	8003040 <_ZN13geometry_msgs5Point6getMD5Ev>
 8003e18:	4603      	mov	r3, r0
  }
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
    return configured_;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <_GLOBAL__sub_I_nh>:
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e44:	2001      	movs	r0, #1
 8003e46:	f7ff ff6d 	bl	8003d24 <_Z41__static_initialization_and_destruction_0ii>
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <_ZN8ARM_INFOC1Ev>:
	double Py;
	double Pz;

	// pub to ROS //
	bool is_finished = false;
} ARM_INFO;
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	761a      	strb	r2, [r3, #24]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <_ZN5SCARAC1Ev>:

class SCARA{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff ffea 	bl	8003e4c <_ZN8ARM_INFOC1Ev>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3320      	adds	r3, #32
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff ffe5 	bl	8003e4c <_ZN8ARM_INFOC1Ev>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4618      	mov	r0, r3
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <_ZN5SCARA3runEv>:
#include "scara.h"
#include "stepper.h"

SCARA scara;

void SCARA::run(void){
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
	SCARA::tf2_arm_angle();
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f804 	bl	8003ea2 <_ZN5SCARA13tf2_arm_angleEv>
}
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <_ZN5SCARA13tf2_arm_angleEv>:


void SCARA::tf2_arm_angle(void){
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]


}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <_Z41__static_initialization_and_destruction_0ii>:
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d107      	bne.n	8003ed8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d102      	bne.n	8003ed8 <_Z41__static_initialization_and_destruction_0ii+0x20>
SCARA scara;
 8003ed2:	4803      	ldr	r0, [pc, #12]	; (8003ee0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003ed4:	f7ff ffc8 	bl	8003e68 <_ZN5SCARAC1Ev>
}
 8003ed8:	bf00      	nop
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	240010a8 	.word	0x240010a8

08003ee4 <_GLOBAL__sub_I_scara>:
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003eec:	2001      	movs	r0, #1
 8003eee:	f7ff ffe3 	bl	8003eb8 <_Z41__static_initialization_and_destruction_0ii>
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003efa:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <HAL_MspInit+0x3c>)
 8003efc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f00:	4a0b      	ldr	r2, [pc, #44]	; (8003f30 <HAL_MspInit+0x3c>)
 8003f02:	f043 0302 	orr.w	r3, r3, #2
 8003f06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f0a:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <HAL_MspInit+0x3c>)
 8003f0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	607b      	str	r3, [r7, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	2005      	movs	r0, #5
 8003f1e:	f000 fed6 	bl	8004cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003f22:	2005      	movs	r0, #5
 8003f24:	f000 feed 	bl	8004d02 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f28:	bf00      	nop
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	58024400 	.word	0x58024400

08003f34 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b090      	sub	sp, #64	; 0x40
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	60da      	str	r2, [r3, #12]
 8003f4a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f54:	d14e      	bne.n	8003ff4 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f56:	4b77      	ldr	r3, [pc, #476]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f5c:	4a75      	ldr	r2, [pc, #468]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f66:	4b73      	ldr	r3, [pc, #460]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f72:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f74:	4b6f      	ldr	r3, [pc, #444]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f7a:	4a6e      	ldr	r2, [pc, #440]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f84:	4b6b      	ldr	r3, [pc, #428]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f92:	4b68      	ldr	r3, [pc, #416]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f98:	4a66      	ldr	r2, [pc, #408]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f9a:	f043 0302 	orr.w	r3, r3, #2
 8003f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fa2:	4b64      	ldr	r3, [pc, #400]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 8003fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	623b      	str	r3, [r7, #32]
 8003fae:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003fb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fca:	4619      	mov	r1, r3
 8003fcc:	485a      	ldr	r0, [pc, #360]	; (8004138 <HAL_TIM_Encoder_MspInit+0x204>)
 8003fce:	f003 fced 	bl	80079ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003fd2:	2308      	movs	r3, #8
 8003fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fe6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fea:	4619      	mov	r1, r3
 8003fec:	4853      	ldr	r0, [pc, #332]	; (800413c <HAL_TIM_Encoder_MspInit+0x208>)
 8003fee:	f003 fcdd 	bl	80079ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003ff2:	e09b      	b.n	800412c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a51      	ldr	r2, [pc, #324]	; (8004140 <HAL_TIM_Encoder_MspInit+0x20c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d12e      	bne.n	800405c <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ffe:	4b4d      	ldr	r3, [pc, #308]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 8004000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004004:	4a4b      	ldr	r2, [pc, #300]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 8004006:	f043 0302 	orr.w	r3, r3, #2
 800400a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800400e:	4b49      	ldr	r3, [pc, #292]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 8004010:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	61fb      	str	r3, [r7, #28]
 800401a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800401c:	4b45      	ldr	r3, [pc, #276]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 800401e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004022:	4a44      	ldr	r2, [pc, #272]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 8004024:	f043 0302 	orr.w	r3, r3, #2
 8004028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800402c:	4b41      	ldr	r3, [pc, #260]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 800402e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	61bb      	str	r3, [r7, #24]
 8004038:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800403a:	2330      	movs	r3, #48	; 0x30
 800403c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800403e:	2302      	movs	r3, #2
 8004040:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004042:	2300      	movs	r3, #0
 8004044:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004046:	2300      	movs	r3, #0
 8004048:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800404a:	2302      	movs	r3, #2
 800404c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800404e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004052:	4619      	mov	r1, r3
 8004054:	4839      	ldr	r0, [pc, #228]	; (800413c <HAL_TIM_Encoder_MspInit+0x208>)
 8004056:	f003 fca9 	bl	80079ac <HAL_GPIO_Init>
}
 800405a:	e067      	b.n	800412c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a38      	ldr	r2, [pc, #224]	; (8004144 <HAL_TIM_Encoder_MspInit+0x210>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d12f      	bne.n	80040c6 <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004066:	4b33      	ldr	r3, [pc, #204]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 8004068:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800406c:	4a31      	ldr	r2, [pc, #196]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 800406e:	f043 0304 	orr.w	r3, r3, #4
 8004072:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004076:	4b2f      	ldr	r3, [pc, #188]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 8004078:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004084:	4b2b      	ldr	r3, [pc, #172]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 8004086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800408a:	4a2a      	ldr	r2, [pc, #168]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 800408c:	f043 0308 	orr.w	r3, r3, #8
 8004090:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004094:	4b27      	ldr	r3, [pc, #156]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 8004096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80040a2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80040a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a8:	2302      	movs	r3, #2
 80040aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b0:	2300      	movs	r3, #0
 80040b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80040b4:	2302      	movs	r3, #2
 80040b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040bc:	4619      	mov	r1, r3
 80040be:	4822      	ldr	r0, [pc, #136]	; (8004148 <HAL_TIM_Encoder_MspInit+0x214>)
 80040c0:	f003 fc74 	bl	80079ac <HAL_GPIO_Init>
}
 80040c4:	e032      	b.n	800412c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a20      	ldr	r2, [pc, #128]	; (800414c <HAL_TIM_Encoder_MspInit+0x218>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d12d      	bne.n	800412c <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80040d0:	4b18      	ldr	r3, [pc, #96]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 80040d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040d6:	4a17      	ldr	r2, [pc, #92]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 80040d8:	f043 0308 	orr.w	r3, r3, #8
 80040dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040e0:	4b14      	ldr	r3, [pc, #80]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 80040e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ee:	4b11      	ldr	r3, [pc, #68]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 80040f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040f4:	4a0f      	ldr	r2, [pc, #60]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040fe:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <HAL_TIM_Encoder_MspInit+0x200>)
 8004100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800410c:	2303      	movs	r3, #3
 800410e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004110:	2302      	movs	r3, #2
 8004112:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004114:	2300      	movs	r3, #0
 8004116:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004118:	2300      	movs	r3, #0
 800411a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800411c:	2302      	movs	r3, #2
 800411e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004124:	4619      	mov	r1, r3
 8004126:	4804      	ldr	r0, [pc, #16]	; (8004138 <HAL_TIM_Encoder_MspInit+0x204>)
 8004128:	f003 fc40 	bl	80079ac <HAL_GPIO_Init>
}
 800412c:	bf00      	nop
 800412e:	3740      	adds	r7, #64	; 0x40
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	58024400 	.word	0x58024400
 8004138:	58020000 	.word	0x58020000
 800413c:	58020400 	.word	0x58020400
 8004140:	40000400 	.word	0x40000400
 8004144:	40000800 	.word	0x40000800
 8004148:	58020c00 	.word	0x58020c00
 800414c:	40000c00 	.word	0x40000c00

08004150 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a1d      	ldr	r2, [pc, #116]	; (80041d4 <HAL_TIM_PWM_MspInit+0x84>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d117      	bne.n	8004192 <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004162:	4b1d      	ldr	r3, [pc, #116]	; (80041d8 <HAL_TIM_PWM_MspInit+0x88>)
 8004164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004168:	4a1b      	ldr	r2, [pc, #108]	; (80041d8 <HAL_TIM_PWM_MspInit+0x88>)
 800416a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800416e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004172:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <HAL_TIM_PWM_MspInit+0x88>)
 8004174:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004180:	2200      	movs	r2, #0
 8004182:	2100      	movs	r1, #0
 8004184:	202b      	movs	r0, #43	; 0x2b
 8004186:	f000 fda2 	bl	8004cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800418a:	202b      	movs	r0, #43	; 0x2b
 800418c:	f000 fdb9 	bl	8004d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004190:	e01b      	b.n	80041ca <HAL_TIM_PWM_MspInit+0x7a>
  else if(htim_pwm->Instance==TIM15)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a11      	ldr	r2, [pc, #68]	; (80041dc <HAL_TIM_PWM_MspInit+0x8c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d116      	bne.n	80041ca <HAL_TIM_PWM_MspInit+0x7a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800419c:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <HAL_TIM_PWM_MspInit+0x88>)
 800419e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041a2:	4a0d      	ldr	r2, [pc, #52]	; (80041d8 <HAL_TIM_PWM_MspInit+0x88>)
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80041ac:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <HAL_TIM_PWM_MspInit+0x88>)
 80041ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b6:	60bb      	str	r3, [r7, #8]
 80041b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80041ba:	2200      	movs	r2, #0
 80041bc:	2100      	movs	r1, #0
 80041be:	2074      	movs	r0, #116	; 0x74
 80041c0:	f000 fd85 	bl	8004cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80041c4:	2074      	movs	r0, #116	; 0x74
 80041c6:	f000 fd9c 	bl	8004d02 <HAL_NVIC_EnableIRQ>
}
 80041ca:	bf00      	nop
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40001800 	.word	0x40001800
 80041d8:	58024400 	.word	0x58024400
 80041dc:	40014000 	.word	0x40014000

080041e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a0e      	ldr	r2, [pc, #56]	; (8004228 <HAL_TIM_Base_MspInit+0x48>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d116      	bne.n	8004220 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80041f2:	4b0e      	ldr	r3, [pc, #56]	; (800422c <HAL_TIM_Base_MspInit+0x4c>)
 80041f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041f8:	4a0c      	ldr	r2, [pc, #48]	; (800422c <HAL_TIM_Base_MspInit+0x4c>)
 80041fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004202:	4b0a      	ldr	r3, [pc, #40]	; (800422c <HAL_TIM_Base_MspInit+0x4c>)
 8004204:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004210:	2200      	movs	r2, #0
 8004212:	2100      	movs	r1, #0
 8004214:	202c      	movs	r0, #44	; 0x2c
 8004216:	f000 fd5a 	bl	8004cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800421a:	202c      	movs	r0, #44	; 0x2c
 800421c:	f000 fd71 	bl	8004d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8004220:	bf00      	nop
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40001c00 	.word	0x40001c00
 800422c:	58024400 	.word	0x58024400

08004230 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08a      	sub	sp, #40	; 0x28
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004238:	f107 0314 	add.w	r3, r7, #20
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	609a      	str	r2, [r3, #8]
 8004244:	60da      	str	r2, [r3, #12]
 8004246:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a25      	ldr	r2, [pc, #148]	; (80042e4 <HAL_TIM_MspPostInit+0xb4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d120      	bne.n	8004294 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004252:	4b25      	ldr	r3, [pc, #148]	; (80042e8 <HAL_TIM_MspPostInit+0xb8>)
 8004254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004258:	4a23      	ldr	r2, [pc, #140]	; (80042e8 <HAL_TIM_MspPostInit+0xb8>)
 800425a:	f043 0302 	orr.w	r3, r3, #2
 800425e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004262:	4b21      	ldr	r3, [pc, #132]	; (80042e8 <HAL_TIM_MspPostInit+0xb8>)
 8004264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004270:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004276:	2302      	movs	r3, #2
 8004278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800427e:	2300      	movs	r3, #0
 8004280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8004282:	2302      	movs	r3, #2
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004286:	f107 0314 	add.w	r3, r7, #20
 800428a:	4619      	mov	r1, r3
 800428c:	4817      	ldr	r0, [pc, #92]	; (80042ec <HAL_TIM_MspPostInit+0xbc>)
 800428e:	f003 fb8d 	bl	80079ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004292:	e023      	b.n	80042dc <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM15)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a15      	ldr	r2, [pc, #84]	; (80042f0 <HAL_TIM_MspPostInit+0xc0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d11e      	bne.n	80042dc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800429e:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <HAL_TIM_MspPostInit+0xb8>)
 80042a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042a4:	4a10      	ldr	r2, [pc, #64]	; (80042e8 <HAL_TIM_MspPostInit+0xb8>)
 80042a6:	f043 0310 	orr.w	r3, r3, #16
 80042aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042ae:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <HAL_TIM_MspPostInit+0xb8>)
 80042b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80042bc:	2360      	movs	r3, #96	; 0x60
 80042be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c0:	2302      	movs	r3, #2
 80042c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c8:	2300      	movs	r3, #0
 80042ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80042cc:	2304      	movs	r3, #4
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042d0:	f107 0314 	add.w	r3, r7, #20
 80042d4:	4619      	mov	r1, r3
 80042d6:	4807      	ldr	r0, [pc, #28]	; (80042f4 <HAL_TIM_MspPostInit+0xc4>)
 80042d8:	f003 fb68 	bl	80079ac <HAL_GPIO_Init>
}
 80042dc:	bf00      	nop
 80042de:	3728      	adds	r7, #40	; 0x28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40001800 	.word	0x40001800
 80042e8:	58024400 	.word	0x58024400
 80042ec:	58020400 	.word	0x58020400
 80042f0:	40014000 	.word	0x40014000
 80042f4:	58021000 	.word	0x58021000

080042f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b0b6      	sub	sp, #216	; 0xd8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004300:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	605a      	str	r2, [r3, #4]
 800430a:	609a      	str	r2, [r3, #8]
 800430c:	60da      	str	r2, [r3, #12]
 800430e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004310:	f107 0310 	add.w	r3, r7, #16
 8004314:	22b4      	movs	r2, #180	; 0xb4
 8004316:	2100      	movs	r1, #0
 8004318:	4618      	mov	r0, r3
 800431a:	f009 fc31 	bl	800db80 <memset>
  if(huart->Instance==USART1)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a57      	ldr	r2, [pc, #348]	; (8004480 <HAL_UART_MspInit+0x188>)
 8004324:	4293      	cmp	r3, r2
 8004326:	f040 80a7 	bne.w	8004478 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800432a:	2301      	movs	r3, #1
 800432c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800432e:	2300      	movs	r3, #0
 8004330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004334:	f107 0310 	add.w	r3, r7, #16
 8004338:	4618      	mov	r0, r3
 800433a:	f004 fc6d 	bl	8008c18 <HAL_RCCEx_PeriphCLKConfig>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004344:	f7fc ffb2 	bl	80012ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004348:	4b4e      	ldr	r3, [pc, #312]	; (8004484 <HAL_UART_MspInit+0x18c>)
 800434a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800434e:	4a4d      	ldr	r2, [pc, #308]	; (8004484 <HAL_UART_MspInit+0x18c>)
 8004350:	f043 0310 	orr.w	r3, r3, #16
 8004354:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004358:	4b4a      	ldr	r3, [pc, #296]	; (8004484 <HAL_UART_MspInit+0x18c>)
 800435a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800435e:	f003 0310 	and.w	r3, r3, #16
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004366:	4b47      	ldr	r3, [pc, #284]	; (8004484 <HAL_UART_MspInit+0x18c>)
 8004368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800436c:	4a45      	ldr	r2, [pc, #276]	; (8004484 <HAL_UART_MspInit+0x18c>)
 800436e:	f043 0301 	orr.w	r3, r3, #1
 8004372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004376:	4b43      	ldr	r3, [pc, #268]	; (8004484 <HAL_UART_MspInit+0x18c>)
 8004378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004384:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004388:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438c:	2302      	movs	r3, #2
 800438e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004392:	2300      	movs	r3, #0
 8004394:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004398:	2300      	movs	r3, #0
 800439a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800439e:	2307      	movs	r3, #7
 80043a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80043a8:	4619      	mov	r1, r3
 80043aa:	4837      	ldr	r0, [pc, #220]	; (8004488 <HAL_UART_MspInit+0x190>)
 80043ac:	f003 fafe 	bl	80079ac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80043b0:	4b36      	ldr	r3, [pc, #216]	; (800448c <HAL_UART_MspInit+0x194>)
 80043b2:	4a37      	ldr	r2, [pc, #220]	; (8004490 <HAL_UART_MspInit+0x198>)
 80043b4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80043b6:	4b35      	ldr	r3, [pc, #212]	; (800448c <HAL_UART_MspInit+0x194>)
 80043b8:	2229      	movs	r2, #41	; 0x29
 80043ba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043bc:	4b33      	ldr	r3, [pc, #204]	; (800448c <HAL_UART_MspInit+0x194>)
 80043be:	2200      	movs	r2, #0
 80043c0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043c2:	4b32      	ldr	r3, [pc, #200]	; (800448c <HAL_UART_MspInit+0x194>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043c8:	4b30      	ldr	r3, [pc, #192]	; (800448c <HAL_UART_MspInit+0x194>)
 80043ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043ce:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043d0:	4b2e      	ldr	r3, [pc, #184]	; (800448c <HAL_UART_MspInit+0x194>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043d6:	4b2d      	ldr	r3, [pc, #180]	; (800448c <HAL_UART_MspInit+0x194>)
 80043d8:	2200      	movs	r2, #0
 80043da:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80043dc:	4b2b      	ldr	r3, [pc, #172]	; (800448c <HAL_UART_MspInit+0x194>)
 80043de:	2200      	movs	r2, #0
 80043e0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80043e2:	4b2a      	ldr	r3, [pc, #168]	; (800448c <HAL_UART_MspInit+0x194>)
 80043e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043e8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043ea:	4b28      	ldr	r3, [pc, #160]	; (800448c <HAL_UART_MspInit+0x194>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80043f0:	4826      	ldr	r0, [pc, #152]	; (800448c <HAL_UART_MspInit+0x194>)
 80043f2:	f000 fca1 	bl	8004d38 <HAL_DMA_Init>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80043fc:	f7fc ff56 	bl	80012ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a22      	ldr	r2, [pc, #136]	; (800448c <HAL_UART_MspInit+0x194>)
 8004404:	67da      	str	r2, [r3, #124]	; 0x7c
 8004406:	4a21      	ldr	r2, [pc, #132]	; (800448c <HAL_UART_MspInit+0x194>)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 800440c:	4b21      	ldr	r3, [pc, #132]	; (8004494 <HAL_UART_MspInit+0x19c>)
 800440e:	4a22      	ldr	r2, [pc, #136]	; (8004498 <HAL_UART_MspInit+0x1a0>)
 8004410:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004412:	4b20      	ldr	r3, [pc, #128]	; (8004494 <HAL_UART_MspInit+0x19c>)
 8004414:	222a      	movs	r2, #42	; 0x2a
 8004416:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004418:	4b1e      	ldr	r3, [pc, #120]	; (8004494 <HAL_UART_MspInit+0x19c>)
 800441a:	2240      	movs	r2, #64	; 0x40
 800441c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800441e:	4b1d      	ldr	r3, [pc, #116]	; (8004494 <HAL_UART_MspInit+0x19c>)
 8004420:	2200      	movs	r2, #0
 8004422:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004424:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <HAL_UART_MspInit+0x19c>)
 8004426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800442a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800442c:	4b19      	ldr	r3, [pc, #100]	; (8004494 <HAL_UART_MspInit+0x19c>)
 800442e:	2200      	movs	r2, #0
 8004430:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004432:	4b18      	ldr	r3, [pc, #96]	; (8004494 <HAL_UART_MspInit+0x19c>)
 8004434:	2200      	movs	r2, #0
 8004436:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004438:	4b16      	ldr	r3, [pc, #88]	; (8004494 <HAL_UART_MspInit+0x19c>)
 800443a:	2200      	movs	r2, #0
 800443c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800443e:	4b15      	ldr	r3, [pc, #84]	; (8004494 <HAL_UART_MspInit+0x19c>)
 8004440:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004444:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004446:	4b13      	ldr	r3, [pc, #76]	; (8004494 <HAL_UART_MspInit+0x19c>)
 8004448:	2200      	movs	r2, #0
 800444a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800444c:	4811      	ldr	r0, [pc, #68]	; (8004494 <HAL_UART_MspInit+0x19c>)
 800444e:	f000 fc73 	bl	8004d38 <HAL_DMA_Init>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8004458:	f7fc ff28 	bl	80012ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a0d      	ldr	r2, [pc, #52]	; (8004494 <HAL_UART_MspInit+0x19c>)
 8004460:	679a      	str	r2, [r3, #120]	; 0x78
 8004462:	4a0c      	ldr	r2, [pc, #48]	; (8004494 <HAL_UART_MspInit+0x19c>)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004468:	2200      	movs	r2, #0
 800446a:	2100      	movs	r1, #0
 800446c:	2025      	movs	r0, #37	; 0x25
 800446e:	f000 fc2e 	bl	8004cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004472:	2025      	movs	r0, #37	; 0x25
 8004474:	f000 fc45 	bl	8004d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004478:	bf00      	nop
 800447a:	37d8      	adds	r7, #216	; 0xd8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40011000 	.word	0x40011000
 8004484:	58024400 	.word	0x58024400
 8004488:	58020000 	.word	0x58020000
 800448c:	24000580 	.word	0x24000580
 8004490:	40020010 	.word	0x40020010
 8004494:	240005f8 	.word	0x240005f8
 8004498:	40020028 	.word	0x40020028

0800449c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044a0:	e7fe      	b.n	80044a0 <NMI_Handler+0x4>

080044a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044a2:	b480      	push	{r7}
 80044a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044a6:	e7fe      	b.n	80044a6 <HardFault_Handler+0x4>

080044a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044ac:	e7fe      	b.n	80044ac <MemManage_Handler+0x4>

080044ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044ae:	b480      	push	{r7}
 80044b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044b2:	e7fe      	b.n	80044b2 <BusFault_Handler+0x4>

080044b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044b8:	e7fe      	b.n	80044b8 <UsageFault_Handler+0x4>

080044ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044ba:	b480      	push	{r7}
 80044bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044be:	bf00      	nop
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044cc:	bf00      	nop
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044d6:	b480      	push	{r7}
 80044d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044da:	bf00      	nop
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044e8:	f000 faf6 	bl	8004ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044ec:	bf00      	nop
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
	...

08004500 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004504:	4802      	ldr	r0, [pc, #8]	; (8004510 <DMA1_Stream0_IRQHandler+0x10>)
 8004506:	f001 ff3f 	bl	8006388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800450a:	bf00      	nop
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	24000580 	.word	0x24000580

08004514 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004518:	4802      	ldr	r0, [pc, #8]	; (8004524 <DMA1_Stream1_IRQHandler+0x10>)
 800451a:	f001 ff35 	bl	8006388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800451e:	bf00      	nop
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	240005f8 	.word	0x240005f8

08004528 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800452c:	4802      	ldr	r0, [pc, #8]	; (8004538 <USART1_IRQHandler+0x10>)
 800452e:	f007 faf1 	bl	800bb14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004532:	bf00      	nop
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	240004f0 	.word	0x240004f0

0800453c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8004540:	4802      	ldr	r0, [pc, #8]	; (800454c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8004542:	f006 fa57 	bl	800a9f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8004546:	bf00      	nop
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	2400040c 	.word	0x2400040c

08004550 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8004554:	4802      	ldr	r0, [pc, #8]	; (8004560 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8004556:	f006 fa4d 	bl	800a9f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800455a:	bf00      	nop
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	24000458 	.word	0x24000458

08004564 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8004568:	4802      	ldr	r0, [pc, #8]	; (8004574 <TIM15_IRQHandler+0x10>)
 800456a:	f006 fa43 	bl	800a9f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800456e:	bf00      	nop
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	240004a4 	.word	0x240004a4

08004578 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
	return 1;
 800457c:	2301      	movs	r3, #1
}
 800457e:	4618      	mov	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <_kill>:

int _kill(int pid, int sig)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004592:	f009 fabd 	bl	800db10 <__errno>
 8004596:	4603      	mov	r3, r0
 8004598:	2216      	movs	r2, #22
 800459a:	601a      	str	r2, [r3, #0]
	return -1;
 800459c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <_exit>:

void _exit (int status)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80045b0:	f04f 31ff 	mov.w	r1, #4294967295
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff ffe7 	bl	8004588 <_kill>
	while (1) {}		/* Make sure we hang here */
 80045ba:	e7fe      	b.n	80045ba <_exit+0x12>

080045bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045c4:	4a14      	ldr	r2, [pc, #80]	; (8004618 <_sbrk+0x5c>)
 80045c6:	4b15      	ldr	r3, [pc, #84]	; (800461c <_sbrk+0x60>)
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045d0:	4b13      	ldr	r3, [pc, #76]	; (8004620 <_sbrk+0x64>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d102      	bne.n	80045de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045d8:	4b11      	ldr	r3, [pc, #68]	; (8004620 <_sbrk+0x64>)
 80045da:	4a12      	ldr	r2, [pc, #72]	; (8004624 <_sbrk+0x68>)
 80045dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045de:	4b10      	ldr	r3, [pc, #64]	; (8004620 <_sbrk+0x64>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4413      	add	r3, r2
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d207      	bcs.n	80045fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045ec:	f009 fa90 	bl	800db10 <__errno>
 80045f0:	4603      	mov	r3, r0
 80045f2:	220c      	movs	r2, #12
 80045f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045f6:	f04f 33ff 	mov.w	r3, #4294967295
 80045fa:	e009      	b.n	8004610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045fc:	4b08      	ldr	r3, [pc, #32]	; (8004620 <_sbrk+0x64>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004602:	4b07      	ldr	r3, [pc, #28]	; (8004620 <_sbrk+0x64>)
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4413      	add	r3, r2
 800460a:	4a05      	ldr	r2, [pc, #20]	; (8004620 <_sbrk+0x64>)
 800460c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800460e:	68fb      	ldr	r3, [r7, #12]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	24050000 	.word	0x24050000
 800461c:	00000400 	.word	0x00000400
 8004620:	240010e8 	.word	0x240010e8
 8004624:	24001100 	.word	0x24001100

08004628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800462c:	4b32      	ldr	r3, [pc, #200]	; (80046f8 <SystemInit+0xd0>)
 800462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004632:	4a31      	ldr	r2, [pc, #196]	; (80046f8 <SystemInit+0xd0>)
 8004634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800463c:	4b2f      	ldr	r3, [pc, #188]	; (80046fc <SystemInit+0xd4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	2b06      	cmp	r3, #6
 8004646:	d807      	bhi.n	8004658 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004648:	4b2c      	ldr	r3, [pc, #176]	; (80046fc <SystemInit+0xd4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f023 030f 	bic.w	r3, r3, #15
 8004650:	4a2a      	ldr	r2, [pc, #168]	; (80046fc <SystemInit+0xd4>)
 8004652:	f043 0307 	orr.w	r3, r3, #7
 8004656:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004658:	4b29      	ldr	r3, [pc, #164]	; (8004700 <SystemInit+0xd8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a28      	ldr	r2, [pc, #160]	; (8004700 <SystemInit+0xd8>)
 800465e:	f043 0301 	orr.w	r3, r3, #1
 8004662:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004664:	4b26      	ldr	r3, [pc, #152]	; (8004700 <SystemInit+0xd8>)
 8004666:	2200      	movs	r2, #0
 8004668:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800466a:	4b25      	ldr	r3, [pc, #148]	; (8004700 <SystemInit+0xd8>)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	4924      	ldr	r1, [pc, #144]	; (8004700 <SystemInit+0xd8>)
 8004670:	4b24      	ldr	r3, [pc, #144]	; (8004704 <SystemInit+0xdc>)
 8004672:	4013      	ands	r3, r2
 8004674:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004676:	4b21      	ldr	r3, [pc, #132]	; (80046fc <SystemInit+0xd4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d007      	beq.n	8004692 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004682:	4b1e      	ldr	r3, [pc, #120]	; (80046fc <SystemInit+0xd4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f023 030f 	bic.w	r3, r3, #15
 800468a:	4a1c      	ldr	r2, [pc, #112]	; (80046fc <SystemInit+0xd4>)
 800468c:	f043 0307 	orr.w	r3, r3, #7
 8004690:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004692:	4b1b      	ldr	r3, [pc, #108]	; (8004700 <SystemInit+0xd8>)
 8004694:	2200      	movs	r2, #0
 8004696:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004698:	4b19      	ldr	r3, [pc, #100]	; (8004700 <SystemInit+0xd8>)
 800469a:	2200      	movs	r2, #0
 800469c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800469e:	4b18      	ldr	r3, [pc, #96]	; (8004700 <SystemInit+0xd8>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80046a4:	4b16      	ldr	r3, [pc, #88]	; (8004700 <SystemInit+0xd8>)
 80046a6:	4a18      	ldr	r2, [pc, #96]	; (8004708 <SystemInit+0xe0>)
 80046a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80046aa:	4b15      	ldr	r3, [pc, #84]	; (8004700 <SystemInit+0xd8>)
 80046ac:	4a17      	ldr	r2, [pc, #92]	; (800470c <SystemInit+0xe4>)
 80046ae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80046b0:	4b13      	ldr	r3, [pc, #76]	; (8004700 <SystemInit+0xd8>)
 80046b2:	4a17      	ldr	r2, [pc, #92]	; (8004710 <SystemInit+0xe8>)
 80046b4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80046b6:	4b12      	ldr	r3, [pc, #72]	; (8004700 <SystemInit+0xd8>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80046bc:	4b10      	ldr	r3, [pc, #64]	; (8004700 <SystemInit+0xd8>)
 80046be:	4a14      	ldr	r2, [pc, #80]	; (8004710 <SystemInit+0xe8>)
 80046c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80046c2:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <SystemInit+0xd8>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80046c8:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <SystemInit+0xd8>)
 80046ca:	4a11      	ldr	r2, [pc, #68]	; (8004710 <SystemInit+0xe8>)
 80046cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80046ce:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <SystemInit+0xd8>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80046d4:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <SystemInit+0xd8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a09      	ldr	r2, [pc, #36]	; (8004700 <SystemInit+0xd8>)
 80046da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80046e0:	4b07      	ldr	r3, [pc, #28]	; (8004700 <SystemInit+0xd8>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80046e6:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <SystemInit+0xec>)
 80046e8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80046ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80046ee:	bf00      	nop
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	e000ed00 	.word	0xe000ed00
 80046fc:	52002000 	.word	0x52002000
 8004700:	58024400 	.word	0x58024400
 8004704:	eaf6ed7f 	.word	0xeaf6ed7f
 8004708:	02020200 	.word	0x02020200
 800470c:	01ff0000 	.word	0x01ff0000
 8004710:	01010280 	.word	0x01010280
 8004714:	52004000 	.word	0x52004000

08004718 <HAL_TIM_PeriodElapsedCallback>:
#define STEP_PIN_4 GPIO_PIN_9

//int ms=0;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM13) {
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a8f      	ldr	r2, [pc, #572]	; (8004964 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	f040 8118 	bne.w	800495c <HAL_TIM_PeriodElapsedCallback+0x244>
//		ms++;
//		if(ms%100==0) ROS::pub_car_vel();


		/*enc 1*/
		fr.CountNow = 1212/*__HAL_TIM_GetCounter(&htim2)*/;
 800472c:	4b8e      	ldr	r3, [pc, #568]	; (8004968 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800472e:	f240 42bc 	movw	r2, #1212	; 0x4bc
 8004732:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		fr.PIDControl();
 8004736:	488c      	ldr	r0, [pc, #560]	; (8004968 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8004738:	f7fc f826 	bl	8000788 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim2,0);
 800473c:	4b8b      	ldr	r3, [pc, #556]	; (800496c <HAL_TIM_PeriodElapsedCallback+0x254>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2200      	movs	r2, #0
 8004742:	625a      	str	r2, [r3, #36]	; 0x24
		if (fr.PID >= 0) {
 8004744:	4b88      	ldr	r3, [pc, #544]	; (8004968 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8004746:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800474a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800474e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004752:	db0b      	blt.n	800476c <HAL_TIM_PeriodElapsedCallback+0x54>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_SET);
 8004754:	2201      	movs	r2, #1
 8004756:	f44f 7180 	mov.w	r1, #256	; 0x100
 800475a:	4885      	ldr	r0, [pc, #532]	; (8004970 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800475c:	f003 face 	bl	8007cfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_RESET);
 8004760:	2200      	movs	r2, #0
 8004762:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004766:	4882      	ldr	r0, [pc, #520]	; (8004970 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004768:	f003 fac8 	bl	8007cfc <HAL_GPIO_WritePin>
		}
		if (fr.PID < 0) {
 800476c:	4b7e      	ldr	r3, [pc, #504]	; (8004968 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800476e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477a:	d513      	bpl.n	80047a4 <HAL_TIM_PeriodElapsedCallback+0x8c>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_RESET);
 800477c:	2200      	movs	r2, #0
 800477e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004782:	487b      	ldr	r0, [pc, #492]	; (8004970 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004784:	f003 faba 	bl	8007cfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_SET);
 8004788:	2201      	movs	r2, #1
 800478a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800478e:	4878      	ldr	r0, [pc, #480]	; (8004970 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004790:	f003 fab4 	bl	8007cfc <HAL_GPIO_WritePin>
			fr.PID = -fr.PID;
 8004794:	4b74      	ldr	r3, [pc, #464]	; (8004968 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8004796:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800479a:	eeb1 7b47 	vneg.f64	d7, d7
 800479e:	4b72      	ldr	r3, [pc, #456]	; (8004968 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80047a0:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, (int )fr.PID);
 80047a4:	4b70      	ldr	r3, [pc, #448]	; (8004968 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80047a6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80047aa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80047ae:	4b71      	ldr	r3, [pc, #452]	; (8004974 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	ee17 2a90 	vmov	r2, s15
 80047b6:	639a      	str	r2, [r3, #56]	; 0x38

		/*enc 2*/
		fl.CountNow = __HAL_TIM_GetCounter(&htim5);
 80047b8:	4b6f      	ldr	r3, [pc, #444]	; (8004978 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	b29a      	uxth	r2, r3
 80047c0:	4b6e      	ldr	r3, [pc, #440]	; (800497c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80047c2:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		fl.PIDControl();
 80047c6:	486d      	ldr	r0, [pc, #436]	; (800497c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80047c8:	f7fb ffde 	bl	8000788 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim5,0);
 80047cc:	4b6a      	ldr	r3, [pc, #424]	; (8004978 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2200      	movs	r2, #0
 80047d2:	625a      	str	r2, [r3, #36]	; 0x24
		if (fl.PID < 0) {
 80047d4:	4b69      	ldr	r3, [pc, #420]	; (800497c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80047d6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80047da:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80047de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e2:	d50b      	bpl.n	80047fc <HAL_TIM_PeriodElapsedCallback+0xe4>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_SET);
 80047e4:	2201      	movs	r2, #1
 80047e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047ea:	4865      	ldr	r0, [pc, #404]	; (8004980 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80047ec:	f003 fa86 	bl	8007cfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_RESET);
 80047f0:	2200      	movs	r2, #0
 80047f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047f6:	4862      	ldr	r0, [pc, #392]	; (8004980 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80047f8:	f003 fa80 	bl	8007cfc <HAL_GPIO_WritePin>
		}
		if (fl.PID >= 0) {
 80047fc:	4b5f      	ldr	r3, [pc, #380]	; (800497c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80047fe:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004802:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480a:	db13      	blt.n	8004834 <HAL_TIM_PeriodElapsedCallback+0x11c>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_RESET);
 800480c:	2200      	movs	r2, #0
 800480e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004812:	485b      	ldr	r0, [pc, #364]	; (8004980 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004814:	f003 fa72 	bl	8007cfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_SET);
 8004818:	2201      	movs	r2, #1
 800481a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800481e:	4858      	ldr	r0, [pc, #352]	; (8004980 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004820:	f003 fa6c 	bl	8007cfc <HAL_GPIO_WritePin>
			fl.PID = -fl.PID;
 8004824:	4b55      	ldr	r3, [pc, #340]	; (800497c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004826:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800482a:	eeb1 7b47 	vneg.f64	d7, d7
 800482e:	4b53      	ldr	r3, [pc, #332]	; (800497c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004830:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, (int )fl.PID);
 8004834:	4b51      	ldr	r3, [pc, #324]	; (800497c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004836:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800483a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800483e:	4b4d      	ldr	r3, [pc, #308]	; (8004974 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	ee17 2a90 	vmov	r2, s15
 8004846:	635a      	str	r2, [r3, #52]	; 0x34

		/*enc 3*/
		br.CountNow = __HAL_TIM_GetCounter(&htim3);
 8004848:	4b4e      	ldr	r3, [pc, #312]	; (8004984 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	b29a      	uxth	r2, r3
 8004850:	4b4d      	ldr	r3, [pc, #308]	; (8004988 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004852:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		br.PIDControl();
 8004856:	484c      	ldr	r0, [pc, #304]	; (8004988 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004858:	f7fb ff96 	bl	8000788 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim3,0);
 800485c:	4b49      	ldr	r3, [pc, #292]	; (8004984 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2200      	movs	r2, #0
 8004862:	625a      	str	r2, [r3, #36]	; 0x24
		if (br.PID < 0) {
 8004864:	4b48      	ldr	r3, [pc, #288]	; (8004988 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004866:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800486a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800486e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004872:	d509      	bpl.n	8004888 <HAL_TIM_PeriodElapsedCallback+0x170>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_SET);
 8004874:	2201      	movs	r2, #1
 8004876:	2104      	movs	r1, #4
 8004878:	4844      	ldr	r0, [pc, #272]	; (800498c <HAL_TIM_PeriodElapsedCallback+0x274>)
 800487a:	f003 fa3f 	bl	8007cfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_RESET);
 800487e:	2200      	movs	r2, #0
 8004880:	2108      	movs	r1, #8
 8004882:	4842      	ldr	r0, [pc, #264]	; (800498c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004884:	f003 fa3a 	bl	8007cfc <HAL_GPIO_WritePin>
		}
		if (br.PID >= 0) {
 8004888:	4b3f      	ldr	r3, [pc, #252]	; (8004988 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800488a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800488e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004896:	db11      	blt.n	80048bc <HAL_TIM_PeriodElapsedCallback+0x1a4>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_RESET);
 8004898:	2200      	movs	r2, #0
 800489a:	2104      	movs	r1, #4
 800489c:	483b      	ldr	r0, [pc, #236]	; (800498c <HAL_TIM_PeriodElapsedCallback+0x274>)
 800489e:	f003 fa2d 	bl	8007cfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_SET);
 80048a2:	2201      	movs	r2, #1
 80048a4:	2108      	movs	r1, #8
 80048a6:	4839      	ldr	r0, [pc, #228]	; (800498c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80048a8:	f003 fa28 	bl	8007cfc <HAL_GPIO_WritePin>
			br.PID = -br.PID;
 80048ac:	4b36      	ldr	r3, [pc, #216]	; (8004988 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80048ae:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80048b2:	eeb1 7b47 	vneg.f64	d7, d7
 80048b6:	4b34      	ldr	r3, [pc, #208]	; (8004988 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80048b8:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, (int )br.PID);
 80048bc:	4b32      	ldr	r3, [pc, #200]	; (8004988 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80048be:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80048c2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80048c6:	4b32      	ldr	r3, [pc, #200]	; (8004990 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	ee17 2a90 	vmov	r2, s15
 80048ce:	635a      	str	r2, [r3, #52]	; 0x34

		/*enc 4*/
		bl.CountNow = __HAL_TIM_GetCounter(&htim4);
 80048d0:	4b30      	ldr	r3, [pc, #192]	; (8004994 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	4b2f      	ldr	r3, [pc, #188]	; (8004998 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80048da:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		bl.PIDControl();
 80048de:	482e      	ldr	r0, [pc, #184]	; (8004998 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80048e0:	f7fb ff52 	bl	8000788 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim4,0);
 80048e4:	4b2b      	ldr	r3, [pc, #172]	; (8004994 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2200      	movs	r2, #0
 80048ea:	625a      	str	r2, [r3, #36]	; 0x24
		if (bl.PID >= 0) {
 80048ec:	4b2a      	ldr	r3, [pc, #168]	; (8004998 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80048ee:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80048f2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80048f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048fa:	db0a      	blt.n	8004912 <HAL_TIM_PeriodElapsedCallback+0x1fa>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_SET);
 80048fc:	2201      	movs	r2, #1
 80048fe:	2110      	movs	r1, #16
 8004900:	4822      	ldr	r0, [pc, #136]	; (800498c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004902:	f003 f9fb 	bl	8007cfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_RESET);
 8004906:	2200      	movs	r2, #0
 8004908:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800490c:	4823      	ldr	r0, [pc, #140]	; (800499c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800490e:	f003 f9f5 	bl	8007cfc <HAL_GPIO_WritePin>
		}
		if (bl.PID < 0) {
 8004912:	4b21      	ldr	r3, [pc, #132]	; (8004998 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004914:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004918:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800491c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004920:	d512      	bpl.n	8004948 <HAL_TIM_PeriodElapsedCallback+0x230>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_RESET);
 8004922:	2200      	movs	r2, #0
 8004924:	2110      	movs	r1, #16
 8004926:	4819      	ldr	r0, [pc, #100]	; (800498c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004928:	f003 f9e8 	bl	8007cfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_SET);
 800492c:	2201      	movs	r2, #1
 800492e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004932:	481a      	ldr	r0, [pc, #104]	; (800499c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004934:	f003 f9e2 	bl	8007cfc <HAL_GPIO_WritePin>
			bl.PID = -bl.PID;
 8004938:	4b17      	ldr	r3, [pc, #92]	; (8004998 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800493a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800493e:	eeb1 7b47 	vneg.f64	d7, d7
 8004942:	4b15      	ldr	r3, [pc, #84]	; (8004998 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004944:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, (int )bl.PID);
 8004948:	4b13      	ldr	r3, [pc, #76]	; (8004998 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800494a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800494e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004952:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	ee17 2a90 	vmov	r2, s15
 800495a:	639a      	str	r2, [r3, #56]	; 0x38


	}

}
 800495c:	bf00      	nop
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40001c00 	.word	0x40001c00
 8004968:	24000098 	.word	0x24000098
 800496c:	240002dc 	.word	0x240002dc
 8004970:	58020c00 	.word	0x58020c00
 8004974:	2400040c 	.word	0x2400040c
 8004978:	240003c0 	.word	0x240003c0
 800497c:	24000128 	.word	0x24000128
 8004980:	58020400 	.word	0x58020400
 8004984:	24000328 	.word	0x24000328
 8004988:	240001b8 	.word	0x240001b8
 800498c:	58021000 	.word	0x58021000
 8004990:	240004a4 	.word	0x240004a4
 8004994:	24000374 	.word	0x24000374
 8004998:	24000248 	.word	0x24000248
 800499c:	58020800 	.word	0x58020800

080049a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80049a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80049a4:	f7ff fe40 	bl	8004628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049a8:	480c      	ldr	r0, [pc, #48]	; (80049dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80049aa:	490d      	ldr	r1, [pc, #52]	; (80049e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80049ac:	4a0d      	ldr	r2, [pc, #52]	; (80049e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80049ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049b0:	e002      	b.n	80049b8 <LoopCopyDataInit>

080049b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049b6:	3304      	adds	r3, #4

080049b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049bc:	d3f9      	bcc.n	80049b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049be:	4a0a      	ldr	r2, [pc, #40]	; (80049e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80049c0:	4c0a      	ldr	r4, [pc, #40]	; (80049ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80049c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049c4:	e001      	b.n	80049ca <LoopFillZerobss>

080049c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049c8:	3204      	adds	r2, #4

080049ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049cc:	d3fb      	bcc.n	80049c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80049ce:	f009 f8a5 	bl	800db1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049d2:	f7fc f820 	bl	8000a16 <main>
  bx  lr
 80049d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80049d8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80049dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80049e0:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80049e4:	0800e1d0 	.word	0x0800e1d0
  ldr r2, =_sbss
 80049e8:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80049ec:	24001100 	.word	0x24001100

080049f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049f0:	e7fe      	b.n	80049f0 <ADC3_IRQHandler>
	...

080049f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049fa:	2003      	movs	r0, #3
 80049fc:	f000 f95c 	bl	8004cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a00:	f003 ff34 	bl	800886c <HAL_RCC_GetSysClockFreq>
 8004a04:	4602      	mov	r2, r0
 8004a06:	4b15      	ldr	r3, [pc, #84]	; (8004a5c <HAL_Init+0x68>)
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	0a1b      	lsrs	r3, r3, #8
 8004a0c:	f003 030f 	and.w	r3, r3, #15
 8004a10:	4913      	ldr	r1, [pc, #76]	; (8004a60 <HAL_Init+0x6c>)
 8004a12:	5ccb      	ldrb	r3, [r1, r3]
 8004a14:	f003 031f 	and.w	r3, r3, #31
 8004a18:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a1e:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <HAL_Init+0x68>)
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	4a0e      	ldr	r2, [pc, #56]	; (8004a60 <HAL_Init+0x6c>)
 8004a28:	5cd3      	ldrb	r3, [r2, r3]
 8004a2a:	f003 031f 	and.w	r3, r3, #31
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
 8004a34:	4a0b      	ldr	r2, [pc, #44]	; (8004a64 <HAL_Init+0x70>)
 8004a36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a38:	4a0b      	ldr	r2, [pc, #44]	; (8004a68 <HAL_Init+0x74>)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a3e:	200f      	movs	r0, #15
 8004a40:	f000 f814 	bl	8004a6c <HAL_InitTick>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e002      	b.n	8004a54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004a4e:	f7ff fa51 	bl	8003ef4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	58024400 	.word	0x58024400
 8004a60:	0800e170 	.word	0x0800e170
 8004a64:	24000004 	.word	0x24000004
 8004a68:	24000000 	.word	0x24000000

08004a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004a74:	4b15      	ldr	r3, [pc, #84]	; (8004acc <HAL_InitTick+0x60>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e021      	b.n	8004ac4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004a80:	4b13      	ldr	r3, [pc, #76]	; (8004ad0 <HAL_InitTick+0x64>)
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	4b11      	ldr	r3, [pc, #68]	; (8004acc <HAL_InitTick+0x60>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 f941 	bl	8004d1e <HAL_SYSTICK_Config>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e00e      	b.n	8004ac4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b0f      	cmp	r3, #15
 8004aaa:	d80a      	bhi.n	8004ac2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004aac:	2200      	movs	r2, #0
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab4:	f000 f90b 	bl	8004cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ab8:	4a06      	ldr	r2, [pc, #24]	; (8004ad4 <HAL_InitTick+0x68>)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	e000      	b.n	8004ac4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	2400000c 	.word	0x2400000c
 8004ad0:	24000000 	.word	0x24000000
 8004ad4:	24000008 	.word	0x24000008

08004ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004adc:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <HAL_IncTick+0x20>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	4b06      	ldr	r3, [pc, #24]	; (8004afc <HAL_IncTick+0x24>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	4a04      	ldr	r2, [pc, #16]	; (8004afc <HAL_IncTick+0x24>)
 8004aea:	6013      	str	r3, [r2, #0]
}
 8004aec:	bf00      	nop
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	2400000c 	.word	0x2400000c
 8004afc:	240010ec 	.word	0x240010ec

08004b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  return uwTick;
 8004b04:	4b03      	ldr	r3, [pc, #12]	; (8004b14 <HAL_GetTick+0x14>)
 8004b06:	681b      	ldr	r3, [r3, #0]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	240010ec 	.word	0x240010ec

08004b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b28:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <__NVIC_SetPriorityGrouping+0x40>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b34:	4013      	ands	r3, r2
 8004b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b40:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <__NVIC_SetPriorityGrouping+0x44>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b46:	4a04      	ldr	r2, [pc, #16]	; (8004b58 <__NVIC_SetPriorityGrouping+0x40>)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	60d3      	str	r3, [r2, #12]
}
 8004b4c:	bf00      	nop
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	e000ed00 	.word	0xe000ed00
 8004b5c:	05fa0000 	.word	0x05fa0000

08004b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b64:	4b04      	ldr	r3, [pc, #16]	; (8004b78 <__NVIC_GetPriorityGrouping+0x18>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	0a1b      	lsrs	r3, r3, #8
 8004b6a:	f003 0307 	and.w	r3, r3, #7
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	e000ed00 	.word	0xe000ed00

08004b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	4603      	mov	r3, r0
 8004b84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	db0b      	blt.n	8004ba6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b8e:	88fb      	ldrh	r3, [r7, #6]
 8004b90:	f003 021f 	and.w	r2, r3, #31
 8004b94:	4907      	ldr	r1, [pc, #28]	; (8004bb4 <__NVIC_EnableIRQ+0x38>)
 8004b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8004ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	e000e100 	.word	0xe000e100

08004bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	6039      	str	r1, [r7, #0]
 8004bc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	db0a      	blt.n	8004be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	490c      	ldr	r1, [pc, #48]	; (8004c04 <__NVIC_SetPriority+0x4c>)
 8004bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bd6:	0112      	lsls	r2, r2, #4
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	440b      	add	r3, r1
 8004bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004be0:	e00a      	b.n	8004bf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	4908      	ldr	r1, [pc, #32]	; (8004c08 <__NVIC_SetPriority+0x50>)
 8004be8:	88fb      	ldrh	r3, [r7, #6]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	3b04      	subs	r3, #4
 8004bf0:	0112      	lsls	r2, r2, #4
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	761a      	strb	r2, [r3, #24]
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	e000e100 	.word	0xe000e100
 8004c08:	e000ed00 	.word	0xe000ed00

08004c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b089      	sub	sp, #36	; 0x24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	f1c3 0307 	rsb	r3, r3, #7
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	bf28      	it	cs
 8004c2a:	2304      	movcs	r3, #4
 8004c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	3304      	adds	r3, #4
 8004c32:	2b06      	cmp	r3, #6
 8004c34:	d902      	bls.n	8004c3c <NVIC_EncodePriority+0x30>
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	3b03      	subs	r3, #3
 8004c3a:	e000      	b.n	8004c3e <NVIC_EncodePriority+0x32>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c40:	f04f 32ff 	mov.w	r2, #4294967295
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	43da      	mvns	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	401a      	ands	r2, r3
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c54:	f04f 31ff 	mov.w	r1, #4294967295
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5e:	43d9      	mvns	r1, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c64:	4313      	orrs	r3, r2
         );
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3724      	adds	r7, #36	; 0x24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
	...

08004c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c84:	d301      	bcc.n	8004c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c86:	2301      	movs	r3, #1
 8004c88:	e00f      	b.n	8004caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c8a:	4a0a      	ldr	r2, [pc, #40]	; (8004cb4 <SysTick_Config+0x40>)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c92:	210f      	movs	r1, #15
 8004c94:	f04f 30ff 	mov.w	r0, #4294967295
 8004c98:	f7ff ff8e 	bl	8004bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c9c:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <SysTick_Config+0x40>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ca2:	4b04      	ldr	r3, [pc, #16]	; (8004cb4 <SysTick_Config+0x40>)
 8004ca4:	2207      	movs	r2, #7
 8004ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	e000e010 	.word	0xe000e010

08004cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff ff29 	bl	8004b18 <__NVIC_SetPriorityGrouping>
}
 8004cc6:	bf00      	nop
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b086      	sub	sp, #24
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	607a      	str	r2, [r7, #4]
 8004cda:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004cdc:	f7ff ff40 	bl	8004b60 <__NVIC_GetPriorityGrouping>
 8004ce0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	68b9      	ldr	r1, [r7, #8]
 8004ce6:	6978      	ldr	r0, [r7, #20]
 8004ce8:	f7ff ff90 	bl	8004c0c <NVIC_EncodePriority>
 8004cec:	4602      	mov	r2, r0
 8004cee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff ff5f 	bl	8004bb8 <__NVIC_SetPriority>
}
 8004cfa:	bf00      	nop
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b082      	sub	sp, #8
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	4603      	mov	r3, r0
 8004d0a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff ff33 	bl	8004b7c <__NVIC_EnableIRQ>
}
 8004d16:	bf00      	nop
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7ff ffa4 	bl	8004c74 <SysTick_Config>
 8004d2c:	4603      	mov	r3, r0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004d40:	f7ff fede 	bl	8004b00 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e314      	b.n	800537a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a66      	ldr	r2, [pc, #408]	; (8004ef0 <HAL_DMA_Init+0x1b8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d04a      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a65      	ldr	r2, [pc, #404]	; (8004ef4 <HAL_DMA_Init+0x1bc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d045      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a63      	ldr	r2, [pc, #396]	; (8004ef8 <HAL_DMA_Init+0x1c0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d040      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a62      	ldr	r2, [pc, #392]	; (8004efc <HAL_DMA_Init+0x1c4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d03b      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a60      	ldr	r2, [pc, #384]	; (8004f00 <HAL_DMA_Init+0x1c8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d036      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a5f      	ldr	r2, [pc, #380]	; (8004f04 <HAL_DMA_Init+0x1cc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d031      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a5d      	ldr	r2, [pc, #372]	; (8004f08 <HAL_DMA_Init+0x1d0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d02c      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a5c      	ldr	r2, [pc, #368]	; (8004f0c <HAL_DMA_Init+0x1d4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d027      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a5a      	ldr	r2, [pc, #360]	; (8004f10 <HAL_DMA_Init+0x1d8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d022      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a59      	ldr	r2, [pc, #356]	; (8004f14 <HAL_DMA_Init+0x1dc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d01d      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a57      	ldr	r2, [pc, #348]	; (8004f18 <HAL_DMA_Init+0x1e0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d018      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a56      	ldr	r2, [pc, #344]	; (8004f1c <HAL_DMA_Init+0x1e4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d013      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a54      	ldr	r2, [pc, #336]	; (8004f20 <HAL_DMA_Init+0x1e8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00e      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a53      	ldr	r2, [pc, #332]	; (8004f24 <HAL_DMA_Init+0x1ec>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d009      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a51      	ldr	r2, [pc, #324]	; (8004f28 <HAL_DMA_Init+0x1f0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d004      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a50      	ldr	r2, [pc, #320]	; (8004f2c <HAL_DMA_Init+0x1f4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d101      	bne.n	8004df4 <HAL_DMA_Init+0xbc>
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <HAL_DMA_Init+0xbe>
 8004df4:	2300      	movs	r3, #0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 813c 	beq.w	8005074 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a37      	ldr	r2, [pc, #220]	; (8004ef0 <HAL_DMA_Init+0x1b8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d04a      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a36      	ldr	r2, [pc, #216]	; (8004ef4 <HAL_DMA_Init+0x1bc>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d045      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a34      	ldr	r2, [pc, #208]	; (8004ef8 <HAL_DMA_Init+0x1c0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d040      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a33      	ldr	r2, [pc, #204]	; (8004efc <HAL_DMA_Init+0x1c4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d03b      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a31      	ldr	r2, [pc, #196]	; (8004f00 <HAL_DMA_Init+0x1c8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d036      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a30      	ldr	r2, [pc, #192]	; (8004f04 <HAL_DMA_Init+0x1cc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d031      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a2e      	ldr	r2, [pc, #184]	; (8004f08 <HAL_DMA_Init+0x1d0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d02c      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a2d      	ldr	r2, [pc, #180]	; (8004f0c <HAL_DMA_Init+0x1d4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d027      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a2b      	ldr	r2, [pc, #172]	; (8004f10 <HAL_DMA_Init+0x1d8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d022      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a2a      	ldr	r2, [pc, #168]	; (8004f14 <HAL_DMA_Init+0x1dc>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d01d      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a28      	ldr	r2, [pc, #160]	; (8004f18 <HAL_DMA_Init+0x1e0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d018      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a27      	ldr	r2, [pc, #156]	; (8004f1c <HAL_DMA_Init+0x1e4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d013      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a25      	ldr	r2, [pc, #148]	; (8004f20 <HAL_DMA_Init+0x1e8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d00e      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a24      	ldr	r2, [pc, #144]	; (8004f24 <HAL_DMA_Init+0x1ec>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d009      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a22      	ldr	r2, [pc, #136]	; (8004f28 <HAL_DMA_Init+0x1f0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d004      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a21      	ldr	r2, [pc, #132]	; (8004f2c <HAL_DMA_Init+0x1f4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d108      	bne.n	8004ebe <HAL_DMA_Init+0x186>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0201 	bic.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	e007      	b.n	8004ece <HAL_DMA_Init+0x196>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0201 	bic.w	r2, r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ece:	e02f      	b.n	8004f30 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ed0:	f7ff fe16 	bl	8004b00 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b05      	cmp	r3, #5
 8004edc:	d928      	bls.n	8004f30 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2203      	movs	r2, #3
 8004ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e244      	b.n	800537a <HAL_DMA_Init+0x642>
 8004ef0:	40020010 	.word	0x40020010
 8004ef4:	40020028 	.word	0x40020028
 8004ef8:	40020040 	.word	0x40020040
 8004efc:	40020058 	.word	0x40020058
 8004f00:	40020070 	.word	0x40020070
 8004f04:	40020088 	.word	0x40020088
 8004f08:	400200a0 	.word	0x400200a0
 8004f0c:	400200b8 	.word	0x400200b8
 8004f10:	40020410 	.word	0x40020410
 8004f14:	40020428 	.word	0x40020428
 8004f18:	40020440 	.word	0x40020440
 8004f1c:	40020458 	.word	0x40020458
 8004f20:	40020470 	.word	0x40020470
 8004f24:	40020488 	.word	0x40020488
 8004f28:	400204a0 	.word	0x400204a0
 8004f2c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1c8      	bne.n	8004ed0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	4b84      	ldr	r3, [pc, #528]	; (800515c <HAL_DMA_Init+0x424>)
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004f56:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f62:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f6e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d107      	bne.n	8004f94 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2b28      	cmp	r3, #40	; 0x28
 8004f9a:	d903      	bls.n	8004fa4 <HAL_DMA_Init+0x26c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8004fa2:	d91f      	bls.n	8004fe4 <HAL_DMA_Init+0x2ac>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b3e      	cmp	r3, #62	; 0x3e
 8004faa:	d903      	bls.n	8004fb4 <HAL_DMA_Init+0x27c>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2b42      	cmp	r3, #66	; 0x42
 8004fb2:	d917      	bls.n	8004fe4 <HAL_DMA_Init+0x2ac>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2b46      	cmp	r3, #70	; 0x46
 8004fba:	d903      	bls.n	8004fc4 <HAL_DMA_Init+0x28c>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b48      	cmp	r3, #72	; 0x48
 8004fc2:	d90f      	bls.n	8004fe4 <HAL_DMA_Init+0x2ac>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	2b4e      	cmp	r3, #78	; 0x4e
 8004fca:	d903      	bls.n	8004fd4 <HAL_DMA_Init+0x29c>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b52      	cmp	r3, #82	; 0x52
 8004fd2:	d907      	bls.n	8004fe4 <HAL_DMA_Init+0x2ac>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2b73      	cmp	r3, #115	; 0x73
 8004fda:	d905      	bls.n	8004fe8 <HAL_DMA_Init+0x2b0>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b77      	cmp	r3, #119	; 0x77
 8004fe2:	d801      	bhi.n	8004fe8 <HAL_DMA_Init+0x2b0>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <HAL_DMA_Init+0x2b2>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ff4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f023 0307 	bic.w	r3, r3, #7
 800500c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	2b04      	cmp	r3, #4
 800501e:	d117      	bne.n	8005050 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	4313      	orrs	r3, r2
 8005028:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00e      	beq.n	8005050 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f002 fb30 	bl	8007698 <DMA_CheckFifoParam>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d008      	beq.n	8005050 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2240      	movs	r2, #64	; 0x40
 8005042:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e194      	b.n	800537a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f002 fa6b 	bl	8007534 <DMA_CalcBaseAndBitshift>
 800505e:	4603      	mov	r3, r0
 8005060:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005066:	f003 031f 	and.w	r3, r3, #31
 800506a:	223f      	movs	r2, #63	; 0x3f
 800506c:	409a      	lsls	r2, r3
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	609a      	str	r2, [r3, #8]
 8005072:	e0ca      	b.n	800520a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a39      	ldr	r2, [pc, #228]	; (8005160 <HAL_DMA_Init+0x428>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d022      	beq.n	80050c4 <HAL_DMA_Init+0x38c>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a38      	ldr	r2, [pc, #224]	; (8005164 <HAL_DMA_Init+0x42c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d01d      	beq.n	80050c4 <HAL_DMA_Init+0x38c>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a36      	ldr	r2, [pc, #216]	; (8005168 <HAL_DMA_Init+0x430>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d018      	beq.n	80050c4 <HAL_DMA_Init+0x38c>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a35      	ldr	r2, [pc, #212]	; (800516c <HAL_DMA_Init+0x434>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d013      	beq.n	80050c4 <HAL_DMA_Init+0x38c>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a33      	ldr	r2, [pc, #204]	; (8005170 <HAL_DMA_Init+0x438>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00e      	beq.n	80050c4 <HAL_DMA_Init+0x38c>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a32      	ldr	r2, [pc, #200]	; (8005174 <HAL_DMA_Init+0x43c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d009      	beq.n	80050c4 <HAL_DMA_Init+0x38c>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a30      	ldr	r2, [pc, #192]	; (8005178 <HAL_DMA_Init+0x440>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d004      	beq.n	80050c4 <HAL_DMA_Init+0x38c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a2f      	ldr	r2, [pc, #188]	; (800517c <HAL_DMA_Init+0x444>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d101      	bne.n	80050c8 <HAL_DMA_Init+0x390>
 80050c4:	2301      	movs	r3, #1
 80050c6:	e000      	b.n	80050ca <HAL_DMA_Init+0x392>
 80050c8:	2300      	movs	r3, #0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 8094 	beq.w	80051f8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a22      	ldr	r2, [pc, #136]	; (8005160 <HAL_DMA_Init+0x428>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d021      	beq.n	800511e <HAL_DMA_Init+0x3e6>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a21      	ldr	r2, [pc, #132]	; (8005164 <HAL_DMA_Init+0x42c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d01c      	beq.n	800511e <HAL_DMA_Init+0x3e6>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a1f      	ldr	r2, [pc, #124]	; (8005168 <HAL_DMA_Init+0x430>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d017      	beq.n	800511e <HAL_DMA_Init+0x3e6>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a1e      	ldr	r2, [pc, #120]	; (800516c <HAL_DMA_Init+0x434>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d012      	beq.n	800511e <HAL_DMA_Init+0x3e6>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a1c      	ldr	r2, [pc, #112]	; (8005170 <HAL_DMA_Init+0x438>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d00d      	beq.n	800511e <HAL_DMA_Init+0x3e6>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a1b      	ldr	r2, [pc, #108]	; (8005174 <HAL_DMA_Init+0x43c>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d008      	beq.n	800511e <HAL_DMA_Init+0x3e6>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a19      	ldr	r2, [pc, #100]	; (8005178 <HAL_DMA_Init+0x440>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d003      	beq.n	800511e <HAL_DMA_Init+0x3e6>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a18      	ldr	r2, [pc, #96]	; (800517c <HAL_DMA_Init+0x444>)
 800511c:	4293      	cmp	r3, r2
 800511e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	4b11      	ldr	r3, [pc, #68]	; (8005180 <HAL_DMA_Init+0x448>)
 800513c:	4013      	ands	r3, r2
 800513e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	2b40      	cmp	r3, #64	; 0x40
 8005146:	d01d      	beq.n	8005184 <HAL_DMA_Init+0x44c>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	2b80      	cmp	r3, #128	; 0x80
 800514e:	d102      	bne.n	8005156 <HAL_DMA_Init+0x41e>
 8005150:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005154:	e017      	b.n	8005186 <HAL_DMA_Init+0x44e>
 8005156:	2300      	movs	r3, #0
 8005158:	e015      	b.n	8005186 <HAL_DMA_Init+0x44e>
 800515a:	bf00      	nop
 800515c:	fe10803f 	.word	0xfe10803f
 8005160:	58025408 	.word	0x58025408
 8005164:	5802541c 	.word	0x5802541c
 8005168:	58025430 	.word	0x58025430
 800516c:	58025444 	.word	0x58025444
 8005170:	58025458 	.word	0x58025458
 8005174:	5802546c 	.word	0x5802546c
 8005178:	58025480 	.word	0x58025480
 800517c:	58025494 	.word	0x58025494
 8005180:	fffe000f 	.word	0xfffe000f
 8005184:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	68d2      	ldr	r2, [r2, #12]
 800518a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800518c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005194:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800519c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051b4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	461a      	mov	r2, r3
 80051ca:	4b6e      	ldr	r3, [pc, #440]	; (8005384 <HAL_DMA_Init+0x64c>)
 80051cc:	4413      	add	r3, r2
 80051ce:	4a6e      	ldr	r2, [pc, #440]	; (8005388 <HAL_DMA_Init+0x650>)
 80051d0:	fba2 2303 	umull	r2, r3, r2, r3
 80051d4:	091b      	lsrs	r3, r3, #4
 80051d6:	009a      	lsls	r2, r3, #2
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f002 f9a9 	bl	8007534 <DMA_CalcBaseAndBitshift>
 80051e2:	4603      	mov	r3, r0
 80051e4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ea:	f003 031f 	and.w	r3, r3, #31
 80051ee:	2201      	movs	r2, #1
 80051f0:	409a      	lsls	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	605a      	str	r2, [r3, #4]
 80051f6:	e008      	b.n	800520a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2240      	movs	r2, #64	; 0x40
 80051fc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2203      	movs	r2, #3
 8005202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e0b7      	b.n	800537a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a5f      	ldr	r2, [pc, #380]	; (800538c <HAL_DMA_Init+0x654>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d072      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a5d      	ldr	r2, [pc, #372]	; (8005390 <HAL_DMA_Init+0x658>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d06d      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a5c      	ldr	r2, [pc, #368]	; (8005394 <HAL_DMA_Init+0x65c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d068      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a5a      	ldr	r2, [pc, #360]	; (8005398 <HAL_DMA_Init+0x660>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d063      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a59      	ldr	r2, [pc, #356]	; (800539c <HAL_DMA_Init+0x664>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d05e      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a57      	ldr	r2, [pc, #348]	; (80053a0 <HAL_DMA_Init+0x668>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d059      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a56      	ldr	r2, [pc, #344]	; (80053a4 <HAL_DMA_Init+0x66c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d054      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a54      	ldr	r2, [pc, #336]	; (80053a8 <HAL_DMA_Init+0x670>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d04f      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a53      	ldr	r2, [pc, #332]	; (80053ac <HAL_DMA_Init+0x674>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d04a      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a51      	ldr	r2, [pc, #324]	; (80053b0 <HAL_DMA_Init+0x678>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d045      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a50      	ldr	r2, [pc, #320]	; (80053b4 <HAL_DMA_Init+0x67c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d040      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a4e      	ldr	r2, [pc, #312]	; (80053b8 <HAL_DMA_Init+0x680>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d03b      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a4d      	ldr	r2, [pc, #308]	; (80053bc <HAL_DMA_Init+0x684>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d036      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a4b      	ldr	r2, [pc, #300]	; (80053c0 <HAL_DMA_Init+0x688>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d031      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a4a      	ldr	r2, [pc, #296]	; (80053c4 <HAL_DMA_Init+0x68c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d02c      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a48      	ldr	r2, [pc, #288]	; (80053c8 <HAL_DMA_Init+0x690>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d027      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a47      	ldr	r2, [pc, #284]	; (80053cc <HAL_DMA_Init+0x694>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d022      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a45      	ldr	r2, [pc, #276]	; (80053d0 <HAL_DMA_Init+0x698>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d01d      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a44      	ldr	r2, [pc, #272]	; (80053d4 <HAL_DMA_Init+0x69c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d018      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a42      	ldr	r2, [pc, #264]	; (80053d8 <HAL_DMA_Init+0x6a0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d013      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a41      	ldr	r2, [pc, #260]	; (80053dc <HAL_DMA_Init+0x6a4>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00e      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a3f      	ldr	r2, [pc, #252]	; (80053e0 <HAL_DMA_Init+0x6a8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d009      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a3e      	ldr	r2, [pc, #248]	; (80053e4 <HAL_DMA_Init+0x6ac>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d004      	beq.n	80052fa <HAL_DMA_Init+0x5c2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a3c      	ldr	r2, [pc, #240]	; (80053e8 <HAL_DMA_Init+0x6b0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d101      	bne.n	80052fe <HAL_DMA_Init+0x5c6>
 80052fa:	2301      	movs	r3, #1
 80052fc:	e000      	b.n	8005300 <HAL_DMA_Init+0x5c8>
 80052fe:	2300      	movs	r3, #0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d032      	beq.n	800536a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f002 fa43 	bl	8007790 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	2b80      	cmp	r3, #128	; 0x80
 8005310:	d102      	bne.n	8005318 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800532c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d010      	beq.n	8005358 <HAL_DMA_Init+0x620>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2b08      	cmp	r3, #8
 800533c:	d80c      	bhi.n	8005358 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f002 fac0 	bl	80078c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005354:	605a      	str	r2, [r3, #4]
 8005356:	e008      	b.n	800536a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	a7fdabf8 	.word	0xa7fdabf8
 8005388:	cccccccd 	.word	0xcccccccd
 800538c:	40020010 	.word	0x40020010
 8005390:	40020028 	.word	0x40020028
 8005394:	40020040 	.word	0x40020040
 8005398:	40020058 	.word	0x40020058
 800539c:	40020070 	.word	0x40020070
 80053a0:	40020088 	.word	0x40020088
 80053a4:	400200a0 	.word	0x400200a0
 80053a8:	400200b8 	.word	0x400200b8
 80053ac:	40020410 	.word	0x40020410
 80053b0:	40020428 	.word	0x40020428
 80053b4:	40020440 	.word	0x40020440
 80053b8:	40020458 	.word	0x40020458
 80053bc:	40020470 	.word	0x40020470
 80053c0:	40020488 	.word	0x40020488
 80053c4:	400204a0 	.word	0x400204a0
 80053c8:	400204b8 	.word	0x400204b8
 80053cc:	58025408 	.word	0x58025408
 80053d0:	5802541c 	.word	0x5802541c
 80053d4:	58025430 	.word	0x58025430
 80053d8:	58025444 	.word	0x58025444
 80053dc:	58025458 	.word	0x58025458
 80053e0:	5802546c 	.word	0x5802546c
 80053e4:	58025480 	.word	0x58025480
 80053e8:	58025494 	.word	0x58025494

080053ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e226      	b.n	8005856 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800540e:	2b01      	cmp	r3, #1
 8005410:	d101      	bne.n	8005416 <HAL_DMA_Start_IT+0x2a>
 8005412:	2302      	movs	r3, #2
 8005414:	e21f      	b.n	8005856 <HAL_DMA_Start_IT+0x46a>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b01      	cmp	r3, #1
 8005428:	f040 820a 	bne.w	8005840 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a68      	ldr	r2, [pc, #416]	; (80055e0 <HAL_DMA_Start_IT+0x1f4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d04a      	beq.n	80054da <HAL_DMA_Start_IT+0xee>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a66      	ldr	r2, [pc, #408]	; (80055e4 <HAL_DMA_Start_IT+0x1f8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d045      	beq.n	80054da <HAL_DMA_Start_IT+0xee>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a65      	ldr	r2, [pc, #404]	; (80055e8 <HAL_DMA_Start_IT+0x1fc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d040      	beq.n	80054da <HAL_DMA_Start_IT+0xee>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a63      	ldr	r2, [pc, #396]	; (80055ec <HAL_DMA_Start_IT+0x200>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d03b      	beq.n	80054da <HAL_DMA_Start_IT+0xee>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a62      	ldr	r2, [pc, #392]	; (80055f0 <HAL_DMA_Start_IT+0x204>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d036      	beq.n	80054da <HAL_DMA_Start_IT+0xee>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a60      	ldr	r2, [pc, #384]	; (80055f4 <HAL_DMA_Start_IT+0x208>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d031      	beq.n	80054da <HAL_DMA_Start_IT+0xee>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a5f      	ldr	r2, [pc, #380]	; (80055f8 <HAL_DMA_Start_IT+0x20c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d02c      	beq.n	80054da <HAL_DMA_Start_IT+0xee>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a5d      	ldr	r2, [pc, #372]	; (80055fc <HAL_DMA_Start_IT+0x210>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d027      	beq.n	80054da <HAL_DMA_Start_IT+0xee>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a5c      	ldr	r2, [pc, #368]	; (8005600 <HAL_DMA_Start_IT+0x214>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d022      	beq.n	80054da <HAL_DMA_Start_IT+0xee>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a5a      	ldr	r2, [pc, #360]	; (8005604 <HAL_DMA_Start_IT+0x218>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d01d      	beq.n	80054da <HAL_DMA_Start_IT+0xee>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a59      	ldr	r2, [pc, #356]	; (8005608 <HAL_DMA_Start_IT+0x21c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d018      	beq.n	80054da <HAL_DMA_Start_IT+0xee>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a57      	ldr	r2, [pc, #348]	; (800560c <HAL_DMA_Start_IT+0x220>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d013      	beq.n	80054da <HAL_DMA_Start_IT+0xee>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a56      	ldr	r2, [pc, #344]	; (8005610 <HAL_DMA_Start_IT+0x224>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00e      	beq.n	80054da <HAL_DMA_Start_IT+0xee>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a54      	ldr	r2, [pc, #336]	; (8005614 <HAL_DMA_Start_IT+0x228>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d009      	beq.n	80054da <HAL_DMA_Start_IT+0xee>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a53      	ldr	r2, [pc, #332]	; (8005618 <HAL_DMA_Start_IT+0x22c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d004      	beq.n	80054da <HAL_DMA_Start_IT+0xee>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a51      	ldr	r2, [pc, #324]	; (800561c <HAL_DMA_Start_IT+0x230>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d108      	bne.n	80054ec <HAL_DMA_Start_IT+0x100>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0201 	bic.w	r2, r2, #1
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	e007      	b.n	80054fc <HAL_DMA_Start_IT+0x110>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 0201 	bic.w	r2, r2, #1
 80054fa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	68b9      	ldr	r1, [r7, #8]
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f001 fe6a 	bl	80071dc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a34      	ldr	r2, [pc, #208]	; (80055e0 <HAL_DMA_Start_IT+0x1f4>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d04a      	beq.n	80055a8 <HAL_DMA_Start_IT+0x1bc>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a33      	ldr	r2, [pc, #204]	; (80055e4 <HAL_DMA_Start_IT+0x1f8>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d045      	beq.n	80055a8 <HAL_DMA_Start_IT+0x1bc>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a31      	ldr	r2, [pc, #196]	; (80055e8 <HAL_DMA_Start_IT+0x1fc>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d040      	beq.n	80055a8 <HAL_DMA_Start_IT+0x1bc>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a30      	ldr	r2, [pc, #192]	; (80055ec <HAL_DMA_Start_IT+0x200>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d03b      	beq.n	80055a8 <HAL_DMA_Start_IT+0x1bc>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a2e      	ldr	r2, [pc, #184]	; (80055f0 <HAL_DMA_Start_IT+0x204>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d036      	beq.n	80055a8 <HAL_DMA_Start_IT+0x1bc>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a2d      	ldr	r2, [pc, #180]	; (80055f4 <HAL_DMA_Start_IT+0x208>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d031      	beq.n	80055a8 <HAL_DMA_Start_IT+0x1bc>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a2b      	ldr	r2, [pc, #172]	; (80055f8 <HAL_DMA_Start_IT+0x20c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d02c      	beq.n	80055a8 <HAL_DMA_Start_IT+0x1bc>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a2a      	ldr	r2, [pc, #168]	; (80055fc <HAL_DMA_Start_IT+0x210>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d027      	beq.n	80055a8 <HAL_DMA_Start_IT+0x1bc>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a28      	ldr	r2, [pc, #160]	; (8005600 <HAL_DMA_Start_IT+0x214>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d022      	beq.n	80055a8 <HAL_DMA_Start_IT+0x1bc>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a27      	ldr	r2, [pc, #156]	; (8005604 <HAL_DMA_Start_IT+0x218>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d01d      	beq.n	80055a8 <HAL_DMA_Start_IT+0x1bc>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a25      	ldr	r2, [pc, #148]	; (8005608 <HAL_DMA_Start_IT+0x21c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d018      	beq.n	80055a8 <HAL_DMA_Start_IT+0x1bc>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a24      	ldr	r2, [pc, #144]	; (800560c <HAL_DMA_Start_IT+0x220>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d013      	beq.n	80055a8 <HAL_DMA_Start_IT+0x1bc>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a22      	ldr	r2, [pc, #136]	; (8005610 <HAL_DMA_Start_IT+0x224>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00e      	beq.n	80055a8 <HAL_DMA_Start_IT+0x1bc>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a21      	ldr	r2, [pc, #132]	; (8005614 <HAL_DMA_Start_IT+0x228>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d009      	beq.n	80055a8 <HAL_DMA_Start_IT+0x1bc>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a1f      	ldr	r2, [pc, #124]	; (8005618 <HAL_DMA_Start_IT+0x22c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d004      	beq.n	80055a8 <HAL_DMA_Start_IT+0x1bc>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a1e      	ldr	r2, [pc, #120]	; (800561c <HAL_DMA_Start_IT+0x230>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d101      	bne.n	80055ac <HAL_DMA_Start_IT+0x1c0>
 80055a8:	2301      	movs	r3, #1
 80055aa:	e000      	b.n	80055ae <HAL_DMA_Start_IT+0x1c2>
 80055ac:	2300      	movs	r3, #0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d036      	beq.n	8005620 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f023 021e 	bic.w	r2, r3, #30
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f042 0216 	orr.w	r2, r2, #22
 80055c4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d03e      	beq.n	800564c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0208 	orr.w	r2, r2, #8
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	e035      	b.n	800564c <HAL_DMA_Start_IT+0x260>
 80055e0:	40020010 	.word	0x40020010
 80055e4:	40020028 	.word	0x40020028
 80055e8:	40020040 	.word	0x40020040
 80055ec:	40020058 	.word	0x40020058
 80055f0:	40020070 	.word	0x40020070
 80055f4:	40020088 	.word	0x40020088
 80055f8:	400200a0 	.word	0x400200a0
 80055fc:	400200b8 	.word	0x400200b8
 8005600:	40020410 	.word	0x40020410
 8005604:	40020428 	.word	0x40020428
 8005608:	40020440 	.word	0x40020440
 800560c:	40020458 	.word	0x40020458
 8005610:	40020470 	.word	0x40020470
 8005614:	40020488 	.word	0x40020488
 8005618:	400204a0 	.word	0x400204a0
 800561c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f023 020e 	bic.w	r2, r3, #14
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 020a 	orr.w	r2, r2, #10
 8005632:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005638:	2b00      	cmp	r3, #0
 800563a:	d007      	beq.n	800564c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0204 	orr.w	r2, r2, #4
 800564a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a83      	ldr	r2, [pc, #524]	; (8005860 <HAL_DMA_Start_IT+0x474>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d072      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a82      	ldr	r2, [pc, #520]	; (8005864 <HAL_DMA_Start_IT+0x478>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d06d      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a80      	ldr	r2, [pc, #512]	; (8005868 <HAL_DMA_Start_IT+0x47c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d068      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a7f      	ldr	r2, [pc, #508]	; (800586c <HAL_DMA_Start_IT+0x480>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d063      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a7d      	ldr	r2, [pc, #500]	; (8005870 <HAL_DMA_Start_IT+0x484>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d05e      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a7c      	ldr	r2, [pc, #496]	; (8005874 <HAL_DMA_Start_IT+0x488>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d059      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a7a      	ldr	r2, [pc, #488]	; (8005878 <HAL_DMA_Start_IT+0x48c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d054      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a79      	ldr	r2, [pc, #484]	; (800587c <HAL_DMA_Start_IT+0x490>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d04f      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a77      	ldr	r2, [pc, #476]	; (8005880 <HAL_DMA_Start_IT+0x494>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d04a      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a76      	ldr	r2, [pc, #472]	; (8005884 <HAL_DMA_Start_IT+0x498>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d045      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a74      	ldr	r2, [pc, #464]	; (8005888 <HAL_DMA_Start_IT+0x49c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d040      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a73      	ldr	r2, [pc, #460]	; (800588c <HAL_DMA_Start_IT+0x4a0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d03b      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a71      	ldr	r2, [pc, #452]	; (8005890 <HAL_DMA_Start_IT+0x4a4>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d036      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a70      	ldr	r2, [pc, #448]	; (8005894 <HAL_DMA_Start_IT+0x4a8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d031      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a6e      	ldr	r2, [pc, #440]	; (8005898 <HAL_DMA_Start_IT+0x4ac>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d02c      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a6d      	ldr	r2, [pc, #436]	; (800589c <HAL_DMA_Start_IT+0x4b0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d027      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a6b      	ldr	r2, [pc, #428]	; (80058a0 <HAL_DMA_Start_IT+0x4b4>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d022      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a6a      	ldr	r2, [pc, #424]	; (80058a4 <HAL_DMA_Start_IT+0x4b8>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d01d      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a68      	ldr	r2, [pc, #416]	; (80058a8 <HAL_DMA_Start_IT+0x4bc>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d018      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a67      	ldr	r2, [pc, #412]	; (80058ac <HAL_DMA_Start_IT+0x4c0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d013      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a65      	ldr	r2, [pc, #404]	; (80058b0 <HAL_DMA_Start_IT+0x4c4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d00e      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a64      	ldr	r2, [pc, #400]	; (80058b4 <HAL_DMA_Start_IT+0x4c8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d009      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a62      	ldr	r2, [pc, #392]	; (80058b8 <HAL_DMA_Start_IT+0x4cc>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d004      	beq.n	800573c <HAL_DMA_Start_IT+0x350>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a61      	ldr	r2, [pc, #388]	; (80058bc <HAL_DMA_Start_IT+0x4d0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d101      	bne.n	8005740 <HAL_DMA_Start_IT+0x354>
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <HAL_DMA_Start_IT+0x356>
 8005740:	2300      	movs	r3, #0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d01a      	beq.n	800577c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d007      	beq.n	8005764 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800575e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005762:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d007      	beq.n	800577c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005776:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800577a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a37      	ldr	r2, [pc, #220]	; (8005860 <HAL_DMA_Start_IT+0x474>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d04a      	beq.n	800581c <HAL_DMA_Start_IT+0x430>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a36      	ldr	r2, [pc, #216]	; (8005864 <HAL_DMA_Start_IT+0x478>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d045      	beq.n	800581c <HAL_DMA_Start_IT+0x430>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a34      	ldr	r2, [pc, #208]	; (8005868 <HAL_DMA_Start_IT+0x47c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d040      	beq.n	800581c <HAL_DMA_Start_IT+0x430>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a33      	ldr	r2, [pc, #204]	; (800586c <HAL_DMA_Start_IT+0x480>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d03b      	beq.n	800581c <HAL_DMA_Start_IT+0x430>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a31      	ldr	r2, [pc, #196]	; (8005870 <HAL_DMA_Start_IT+0x484>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d036      	beq.n	800581c <HAL_DMA_Start_IT+0x430>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a30      	ldr	r2, [pc, #192]	; (8005874 <HAL_DMA_Start_IT+0x488>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d031      	beq.n	800581c <HAL_DMA_Start_IT+0x430>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a2e      	ldr	r2, [pc, #184]	; (8005878 <HAL_DMA_Start_IT+0x48c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d02c      	beq.n	800581c <HAL_DMA_Start_IT+0x430>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a2d      	ldr	r2, [pc, #180]	; (800587c <HAL_DMA_Start_IT+0x490>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d027      	beq.n	800581c <HAL_DMA_Start_IT+0x430>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a2b      	ldr	r2, [pc, #172]	; (8005880 <HAL_DMA_Start_IT+0x494>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d022      	beq.n	800581c <HAL_DMA_Start_IT+0x430>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a2a      	ldr	r2, [pc, #168]	; (8005884 <HAL_DMA_Start_IT+0x498>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d01d      	beq.n	800581c <HAL_DMA_Start_IT+0x430>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a28      	ldr	r2, [pc, #160]	; (8005888 <HAL_DMA_Start_IT+0x49c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d018      	beq.n	800581c <HAL_DMA_Start_IT+0x430>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a27      	ldr	r2, [pc, #156]	; (800588c <HAL_DMA_Start_IT+0x4a0>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d013      	beq.n	800581c <HAL_DMA_Start_IT+0x430>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a25      	ldr	r2, [pc, #148]	; (8005890 <HAL_DMA_Start_IT+0x4a4>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00e      	beq.n	800581c <HAL_DMA_Start_IT+0x430>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a24      	ldr	r2, [pc, #144]	; (8005894 <HAL_DMA_Start_IT+0x4a8>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d009      	beq.n	800581c <HAL_DMA_Start_IT+0x430>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a22      	ldr	r2, [pc, #136]	; (8005898 <HAL_DMA_Start_IT+0x4ac>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d004      	beq.n	800581c <HAL_DMA_Start_IT+0x430>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a21      	ldr	r2, [pc, #132]	; (800589c <HAL_DMA_Start_IT+0x4b0>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d108      	bne.n	800582e <HAL_DMA_Start_IT+0x442>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0201 	orr.w	r2, r2, #1
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	e012      	b.n	8005854 <HAL_DMA_Start_IT+0x468>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f042 0201 	orr.w	r2, r2, #1
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	e009      	b.n	8005854 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005846:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005854:	7dfb      	ldrb	r3, [r7, #23]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	40020010 	.word	0x40020010
 8005864:	40020028 	.word	0x40020028
 8005868:	40020040 	.word	0x40020040
 800586c:	40020058 	.word	0x40020058
 8005870:	40020070 	.word	0x40020070
 8005874:	40020088 	.word	0x40020088
 8005878:	400200a0 	.word	0x400200a0
 800587c:	400200b8 	.word	0x400200b8
 8005880:	40020410 	.word	0x40020410
 8005884:	40020428 	.word	0x40020428
 8005888:	40020440 	.word	0x40020440
 800588c:	40020458 	.word	0x40020458
 8005890:	40020470 	.word	0x40020470
 8005894:	40020488 	.word	0x40020488
 8005898:	400204a0 	.word	0x400204a0
 800589c:	400204b8 	.word	0x400204b8
 80058a0:	58025408 	.word	0x58025408
 80058a4:	5802541c 	.word	0x5802541c
 80058a8:	58025430 	.word	0x58025430
 80058ac:	58025444 	.word	0x58025444
 80058b0:	58025458 	.word	0x58025458
 80058b4:	5802546c 	.word	0x5802546c
 80058b8:	58025480 	.word	0x58025480
 80058bc:	58025494 	.word	0x58025494

080058c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80058c8:	f7ff f91a 	bl	8004b00 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e2dc      	b.n	8005e92 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d008      	beq.n	80058f6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2280      	movs	r2, #128	; 0x80
 80058e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e2cd      	b.n	8005e92 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a76      	ldr	r2, [pc, #472]	; (8005ad4 <HAL_DMA_Abort+0x214>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d04a      	beq.n	8005996 <HAL_DMA_Abort+0xd6>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a74      	ldr	r2, [pc, #464]	; (8005ad8 <HAL_DMA_Abort+0x218>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d045      	beq.n	8005996 <HAL_DMA_Abort+0xd6>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a73      	ldr	r2, [pc, #460]	; (8005adc <HAL_DMA_Abort+0x21c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d040      	beq.n	8005996 <HAL_DMA_Abort+0xd6>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a71      	ldr	r2, [pc, #452]	; (8005ae0 <HAL_DMA_Abort+0x220>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d03b      	beq.n	8005996 <HAL_DMA_Abort+0xd6>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a70      	ldr	r2, [pc, #448]	; (8005ae4 <HAL_DMA_Abort+0x224>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d036      	beq.n	8005996 <HAL_DMA_Abort+0xd6>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a6e      	ldr	r2, [pc, #440]	; (8005ae8 <HAL_DMA_Abort+0x228>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d031      	beq.n	8005996 <HAL_DMA_Abort+0xd6>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a6d      	ldr	r2, [pc, #436]	; (8005aec <HAL_DMA_Abort+0x22c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d02c      	beq.n	8005996 <HAL_DMA_Abort+0xd6>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a6b      	ldr	r2, [pc, #428]	; (8005af0 <HAL_DMA_Abort+0x230>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d027      	beq.n	8005996 <HAL_DMA_Abort+0xd6>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a6a      	ldr	r2, [pc, #424]	; (8005af4 <HAL_DMA_Abort+0x234>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d022      	beq.n	8005996 <HAL_DMA_Abort+0xd6>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a68      	ldr	r2, [pc, #416]	; (8005af8 <HAL_DMA_Abort+0x238>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d01d      	beq.n	8005996 <HAL_DMA_Abort+0xd6>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a67      	ldr	r2, [pc, #412]	; (8005afc <HAL_DMA_Abort+0x23c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d018      	beq.n	8005996 <HAL_DMA_Abort+0xd6>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a65      	ldr	r2, [pc, #404]	; (8005b00 <HAL_DMA_Abort+0x240>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d013      	beq.n	8005996 <HAL_DMA_Abort+0xd6>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a64      	ldr	r2, [pc, #400]	; (8005b04 <HAL_DMA_Abort+0x244>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00e      	beq.n	8005996 <HAL_DMA_Abort+0xd6>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a62      	ldr	r2, [pc, #392]	; (8005b08 <HAL_DMA_Abort+0x248>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d009      	beq.n	8005996 <HAL_DMA_Abort+0xd6>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a61      	ldr	r2, [pc, #388]	; (8005b0c <HAL_DMA_Abort+0x24c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d004      	beq.n	8005996 <HAL_DMA_Abort+0xd6>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a5f      	ldr	r2, [pc, #380]	; (8005b10 <HAL_DMA_Abort+0x250>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d101      	bne.n	800599a <HAL_DMA_Abort+0xda>
 8005996:	2301      	movs	r3, #1
 8005998:	e000      	b.n	800599c <HAL_DMA_Abort+0xdc>
 800599a:	2300      	movs	r3, #0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d013      	beq.n	80059c8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 021e 	bic.w	r2, r2, #30
 80059ae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695a      	ldr	r2, [r3, #20]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059be:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	e00a      	b.n	80059de <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 020e 	bic.w	r2, r2, #14
 80059d6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a3c      	ldr	r2, [pc, #240]	; (8005ad4 <HAL_DMA_Abort+0x214>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d072      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a3a      	ldr	r2, [pc, #232]	; (8005ad8 <HAL_DMA_Abort+0x218>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d06d      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a39      	ldr	r2, [pc, #228]	; (8005adc <HAL_DMA_Abort+0x21c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d068      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a37      	ldr	r2, [pc, #220]	; (8005ae0 <HAL_DMA_Abort+0x220>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d063      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a36      	ldr	r2, [pc, #216]	; (8005ae4 <HAL_DMA_Abort+0x224>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d05e      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a34      	ldr	r2, [pc, #208]	; (8005ae8 <HAL_DMA_Abort+0x228>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d059      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a33      	ldr	r2, [pc, #204]	; (8005aec <HAL_DMA_Abort+0x22c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d054      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a31      	ldr	r2, [pc, #196]	; (8005af0 <HAL_DMA_Abort+0x230>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d04f      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a30      	ldr	r2, [pc, #192]	; (8005af4 <HAL_DMA_Abort+0x234>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d04a      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a2e      	ldr	r2, [pc, #184]	; (8005af8 <HAL_DMA_Abort+0x238>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d045      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a2d      	ldr	r2, [pc, #180]	; (8005afc <HAL_DMA_Abort+0x23c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d040      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a2b      	ldr	r2, [pc, #172]	; (8005b00 <HAL_DMA_Abort+0x240>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d03b      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a2a      	ldr	r2, [pc, #168]	; (8005b04 <HAL_DMA_Abort+0x244>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d036      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a28      	ldr	r2, [pc, #160]	; (8005b08 <HAL_DMA_Abort+0x248>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d031      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a27      	ldr	r2, [pc, #156]	; (8005b0c <HAL_DMA_Abort+0x24c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d02c      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a25      	ldr	r2, [pc, #148]	; (8005b10 <HAL_DMA_Abort+0x250>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d027      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a24      	ldr	r2, [pc, #144]	; (8005b14 <HAL_DMA_Abort+0x254>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d022      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a22      	ldr	r2, [pc, #136]	; (8005b18 <HAL_DMA_Abort+0x258>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d01d      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a21      	ldr	r2, [pc, #132]	; (8005b1c <HAL_DMA_Abort+0x25c>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d018      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a1f      	ldr	r2, [pc, #124]	; (8005b20 <HAL_DMA_Abort+0x260>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d013      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a1e      	ldr	r2, [pc, #120]	; (8005b24 <HAL_DMA_Abort+0x264>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00e      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a1c      	ldr	r2, [pc, #112]	; (8005b28 <HAL_DMA_Abort+0x268>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d009      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a1b      	ldr	r2, [pc, #108]	; (8005b2c <HAL_DMA_Abort+0x26c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d004      	beq.n	8005ace <HAL_DMA_Abort+0x20e>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a19      	ldr	r2, [pc, #100]	; (8005b30 <HAL_DMA_Abort+0x270>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d132      	bne.n	8005b34 <HAL_DMA_Abort+0x274>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e031      	b.n	8005b36 <HAL_DMA_Abort+0x276>
 8005ad2:	bf00      	nop
 8005ad4:	40020010 	.word	0x40020010
 8005ad8:	40020028 	.word	0x40020028
 8005adc:	40020040 	.word	0x40020040
 8005ae0:	40020058 	.word	0x40020058
 8005ae4:	40020070 	.word	0x40020070
 8005ae8:	40020088 	.word	0x40020088
 8005aec:	400200a0 	.word	0x400200a0
 8005af0:	400200b8 	.word	0x400200b8
 8005af4:	40020410 	.word	0x40020410
 8005af8:	40020428 	.word	0x40020428
 8005afc:	40020440 	.word	0x40020440
 8005b00:	40020458 	.word	0x40020458
 8005b04:	40020470 	.word	0x40020470
 8005b08:	40020488 	.word	0x40020488
 8005b0c:	400204a0 	.word	0x400204a0
 8005b10:	400204b8 	.word	0x400204b8
 8005b14:	58025408 	.word	0x58025408
 8005b18:	5802541c 	.word	0x5802541c
 8005b1c:	58025430 	.word	0x58025430
 8005b20:	58025444 	.word	0x58025444
 8005b24:	58025458 	.word	0x58025458
 8005b28:	5802546c 	.word	0x5802546c
 8005b2c:	58025480 	.word	0x58025480
 8005b30:	58025494 	.word	0x58025494
 8005b34:	2300      	movs	r3, #0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d007      	beq.n	8005b4a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b48:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a6d      	ldr	r2, [pc, #436]	; (8005d04 <HAL_DMA_Abort+0x444>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d04a      	beq.n	8005bea <HAL_DMA_Abort+0x32a>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a6b      	ldr	r2, [pc, #428]	; (8005d08 <HAL_DMA_Abort+0x448>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d045      	beq.n	8005bea <HAL_DMA_Abort+0x32a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a6a      	ldr	r2, [pc, #424]	; (8005d0c <HAL_DMA_Abort+0x44c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d040      	beq.n	8005bea <HAL_DMA_Abort+0x32a>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a68      	ldr	r2, [pc, #416]	; (8005d10 <HAL_DMA_Abort+0x450>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d03b      	beq.n	8005bea <HAL_DMA_Abort+0x32a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a67      	ldr	r2, [pc, #412]	; (8005d14 <HAL_DMA_Abort+0x454>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d036      	beq.n	8005bea <HAL_DMA_Abort+0x32a>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a65      	ldr	r2, [pc, #404]	; (8005d18 <HAL_DMA_Abort+0x458>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d031      	beq.n	8005bea <HAL_DMA_Abort+0x32a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a64      	ldr	r2, [pc, #400]	; (8005d1c <HAL_DMA_Abort+0x45c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d02c      	beq.n	8005bea <HAL_DMA_Abort+0x32a>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a62      	ldr	r2, [pc, #392]	; (8005d20 <HAL_DMA_Abort+0x460>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d027      	beq.n	8005bea <HAL_DMA_Abort+0x32a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a61      	ldr	r2, [pc, #388]	; (8005d24 <HAL_DMA_Abort+0x464>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d022      	beq.n	8005bea <HAL_DMA_Abort+0x32a>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a5f      	ldr	r2, [pc, #380]	; (8005d28 <HAL_DMA_Abort+0x468>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d01d      	beq.n	8005bea <HAL_DMA_Abort+0x32a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a5e      	ldr	r2, [pc, #376]	; (8005d2c <HAL_DMA_Abort+0x46c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d018      	beq.n	8005bea <HAL_DMA_Abort+0x32a>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a5c      	ldr	r2, [pc, #368]	; (8005d30 <HAL_DMA_Abort+0x470>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d013      	beq.n	8005bea <HAL_DMA_Abort+0x32a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a5b      	ldr	r2, [pc, #364]	; (8005d34 <HAL_DMA_Abort+0x474>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d00e      	beq.n	8005bea <HAL_DMA_Abort+0x32a>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a59      	ldr	r2, [pc, #356]	; (8005d38 <HAL_DMA_Abort+0x478>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d009      	beq.n	8005bea <HAL_DMA_Abort+0x32a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a58      	ldr	r2, [pc, #352]	; (8005d3c <HAL_DMA_Abort+0x47c>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d004      	beq.n	8005bea <HAL_DMA_Abort+0x32a>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a56      	ldr	r2, [pc, #344]	; (8005d40 <HAL_DMA_Abort+0x480>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d108      	bne.n	8005bfc <HAL_DMA_Abort+0x33c>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0201 	bic.w	r2, r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	e007      	b.n	8005c0c <HAL_DMA_Abort+0x34c>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0201 	bic.w	r2, r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c0c:	e013      	b.n	8005c36 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c0e:	f7fe ff77 	bl	8004b00 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b05      	cmp	r3, #5
 8005c1a:	d90c      	bls.n	8005c36 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2203      	movs	r2, #3
 8005c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e12d      	b.n	8005e92 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1e5      	bne.n	8005c0e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a2f      	ldr	r2, [pc, #188]	; (8005d04 <HAL_DMA_Abort+0x444>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d04a      	beq.n	8005ce2 <HAL_DMA_Abort+0x422>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a2d      	ldr	r2, [pc, #180]	; (8005d08 <HAL_DMA_Abort+0x448>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d045      	beq.n	8005ce2 <HAL_DMA_Abort+0x422>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a2c      	ldr	r2, [pc, #176]	; (8005d0c <HAL_DMA_Abort+0x44c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d040      	beq.n	8005ce2 <HAL_DMA_Abort+0x422>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a2a      	ldr	r2, [pc, #168]	; (8005d10 <HAL_DMA_Abort+0x450>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d03b      	beq.n	8005ce2 <HAL_DMA_Abort+0x422>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a29      	ldr	r2, [pc, #164]	; (8005d14 <HAL_DMA_Abort+0x454>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d036      	beq.n	8005ce2 <HAL_DMA_Abort+0x422>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a27      	ldr	r2, [pc, #156]	; (8005d18 <HAL_DMA_Abort+0x458>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d031      	beq.n	8005ce2 <HAL_DMA_Abort+0x422>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a26      	ldr	r2, [pc, #152]	; (8005d1c <HAL_DMA_Abort+0x45c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d02c      	beq.n	8005ce2 <HAL_DMA_Abort+0x422>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a24      	ldr	r2, [pc, #144]	; (8005d20 <HAL_DMA_Abort+0x460>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d027      	beq.n	8005ce2 <HAL_DMA_Abort+0x422>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a23      	ldr	r2, [pc, #140]	; (8005d24 <HAL_DMA_Abort+0x464>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d022      	beq.n	8005ce2 <HAL_DMA_Abort+0x422>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a21      	ldr	r2, [pc, #132]	; (8005d28 <HAL_DMA_Abort+0x468>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d01d      	beq.n	8005ce2 <HAL_DMA_Abort+0x422>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a20      	ldr	r2, [pc, #128]	; (8005d2c <HAL_DMA_Abort+0x46c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d018      	beq.n	8005ce2 <HAL_DMA_Abort+0x422>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a1e      	ldr	r2, [pc, #120]	; (8005d30 <HAL_DMA_Abort+0x470>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d013      	beq.n	8005ce2 <HAL_DMA_Abort+0x422>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a1d      	ldr	r2, [pc, #116]	; (8005d34 <HAL_DMA_Abort+0x474>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d00e      	beq.n	8005ce2 <HAL_DMA_Abort+0x422>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a1b      	ldr	r2, [pc, #108]	; (8005d38 <HAL_DMA_Abort+0x478>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d009      	beq.n	8005ce2 <HAL_DMA_Abort+0x422>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a1a      	ldr	r2, [pc, #104]	; (8005d3c <HAL_DMA_Abort+0x47c>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d004      	beq.n	8005ce2 <HAL_DMA_Abort+0x422>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a18      	ldr	r2, [pc, #96]	; (8005d40 <HAL_DMA_Abort+0x480>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d101      	bne.n	8005ce6 <HAL_DMA_Abort+0x426>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e000      	b.n	8005ce8 <HAL_DMA_Abort+0x428>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d02b      	beq.n	8005d44 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf6:	f003 031f 	and.w	r3, r3, #31
 8005cfa:	223f      	movs	r2, #63	; 0x3f
 8005cfc:	409a      	lsls	r2, r3
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	609a      	str	r2, [r3, #8]
 8005d02:	e02a      	b.n	8005d5a <HAL_DMA_Abort+0x49a>
 8005d04:	40020010 	.word	0x40020010
 8005d08:	40020028 	.word	0x40020028
 8005d0c:	40020040 	.word	0x40020040
 8005d10:	40020058 	.word	0x40020058
 8005d14:	40020070 	.word	0x40020070
 8005d18:	40020088 	.word	0x40020088
 8005d1c:	400200a0 	.word	0x400200a0
 8005d20:	400200b8 	.word	0x400200b8
 8005d24:	40020410 	.word	0x40020410
 8005d28:	40020428 	.word	0x40020428
 8005d2c:	40020440 	.word	0x40020440
 8005d30:	40020458 	.word	0x40020458
 8005d34:	40020470 	.word	0x40020470
 8005d38:	40020488 	.word	0x40020488
 8005d3c:	400204a0 	.word	0x400204a0
 8005d40:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d48:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d4e:	f003 031f 	and.w	r3, r3, #31
 8005d52:	2201      	movs	r2, #1
 8005d54:	409a      	lsls	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a4f      	ldr	r2, [pc, #316]	; (8005e9c <HAL_DMA_Abort+0x5dc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d072      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a4d      	ldr	r2, [pc, #308]	; (8005ea0 <HAL_DMA_Abort+0x5e0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d06d      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a4c      	ldr	r2, [pc, #304]	; (8005ea4 <HAL_DMA_Abort+0x5e4>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d068      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a4a      	ldr	r2, [pc, #296]	; (8005ea8 <HAL_DMA_Abort+0x5e8>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d063      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a49      	ldr	r2, [pc, #292]	; (8005eac <HAL_DMA_Abort+0x5ec>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d05e      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a47      	ldr	r2, [pc, #284]	; (8005eb0 <HAL_DMA_Abort+0x5f0>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d059      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a46      	ldr	r2, [pc, #280]	; (8005eb4 <HAL_DMA_Abort+0x5f4>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d054      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a44      	ldr	r2, [pc, #272]	; (8005eb8 <HAL_DMA_Abort+0x5f8>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d04f      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a43      	ldr	r2, [pc, #268]	; (8005ebc <HAL_DMA_Abort+0x5fc>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d04a      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a41      	ldr	r2, [pc, #260]	; (8005ec0 <HAL_DMA_Abort+0x600>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d045      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a40      	ldr	r2, [pc, #256]	; (8005ec4 <HAL_DMA_Abort+0x604>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d040      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a3e      	ldr	r2, [pc, #248]	; (8005ec8 <HAL_DMA_Abort+0x608>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d03b      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a3d      	ldr	r2, [pc, #244]	; (8005ecc <HAL_DMA_Abort+0x60c>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d036      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a3b      	ldr	r2, [pc, #236]	; (8005ed0 <HAL_DMA_Abort+0x610>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d031      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a3a      	ldr	r2, [pc, #232]	; (8005ed4 <HAL_DMA_Abort+0x614>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d02c      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a38      	ldr	r2, [pc, #224]	; (8005ed8 <HAL_DMA_Abort+0x618>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d027      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a37      	ldr	r2, [pc, #220]	; (8005edc <HAL_DMA_Abort+0x61c>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d022      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a35      	ldr	r2, [pc, #212]	; (8005ee0 <HAL_DMA_Abort+0x620>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d01d      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a34      	ldr	r2, [pc, #208]	; (8005ee4 <HAL_DMA_Abort+0x624>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d018      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a32      	ldr	r2, [pc, #200]	; (8005ee8 <HAL_DMA_Abort+0x628>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d013      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a31      	ldr	r2, [pc, #196]	; (8005eec <HAL_DMA_Abort+0x62c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d00e      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a2f      	ldr	r2, [pc, #188]	; (8005ef0 <HAL_DMA_Abort+0x630>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d009      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a2e      	ldr	r2, [pc, #184]	; (8005ef4 <HAL_DMA_Abort+0x634>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d004      	beq.n	8005e4a <HAL_DMA_Abort+0x58a>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a2c      	ldr	r2, [pc, #176]	; (8005ef8 <HAL_DMA_Abort+0x638>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d101      	bne.n	8005e4e <HAL_DMA_Abort+0x58e>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e000      	b.n	8005e50 <HAL_DMA_Abort+0x590>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d015      	beq.n	8005e80 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e5c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00c      	beq.n	8005e80 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e74:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e7e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	40020010 	.word	0x40020010
 8005ea0:	40020028 	.word	0x40020028
 8005ea4:	40020040 	.word	0x40020040
 8005ea8:	40020058 	.word	0x40020058
 8005eac:	40020070 	.word	0x40020070
 8005eb0:	40020088 	.word	0x40020088
 8005eb4:	400200a0 	.word	0x400200a0
 8005eb8:	400200b8 	.word	0x400200b8
 8005ebc:	40020410 	.word	0x40020410
 8005ec0:	40020428 	.word	0x40020428
 8005ec4:	40020440 	.word	0x40020440
 8005ec8:	40020458 	.word	0x40020458
 8005ecc:	40020470 	.word	0x40020470
 8005ed0:	40020488 	.word	0x40020488
 8005ed4:	400204a0 	.word	0x400204a0
 8005ed8:	400204b8 	.word	0x400204b8
 8005edc:	58025408 	.word	0x58025408
 8005ee0:	5802541c 	.word	0x5802541c
 8005ee4:	58025430 	.word	0x58025430
 8005ee8:	58025444 	.word	0x58025444
 8005eec:	58025458 	.word	0x58025458
 8005ef0:	5802546c 	.word	0x5802546c
 8005ef4:	58025480 	.word	0x58025480
 8005ef8:	58025494 	.word	0x58025494

08005efc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e237      	b.n	800637e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d004      	beq.n	8005f24 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2280      	movs	r2, #128	; 0x80
 8005f1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e22c      	b.n	800637e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a5c      	ldr	r2, [pc, #368]	; (800609c <HAL_DMA_Abort_IT+0x1a0>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d04a      	beq.n	8005fc4 <HAL_DMA_Abort_IT+0xc8>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a5b      	ldr	r2, [pc, #364]	; (80060a0 <HAL_DMA_Abort_IT+0x1a4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d045      	beq.n	8005fc4 <HAL_DMA_Abort_IT+0xc8>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a59      	ldr	r2, [pc, #356]	; (80060a4 <HAL_DMA_Abort_IT+0x1a8>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d040      	beq.n	8005fc4 <HAL_DMA_Abort_IT+0xc8>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a58      	ldr	r2, [pc, #352]	; (80060a8 <HAL_DMA_Abort_IT+0x1ac>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d03b      	beq.n	8005fc4 <HAL_DMA_Abort_IT+0xc8>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a56      	ldr	r2, [pc, #344]	; (80060ac <HAL_DMA_Abort_IT+0x1b0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d036      	beq.n	8005fc4 <HAL_DMA_Abort_IT+0xc8>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a55      	ldr	r2, [pc, #340]	; (80060b0 <HAL_DMA_Abort_IT+0x1b4>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d031      	beq.n	8005fc4 <HAL_DMA_Abort_IT+0xc8>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a53      	ldr	r2, [pc, #332]	; (80060b4 <HAL_DMA_Abort_IT+0x1b8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d02c      	beq.n	8005fc4 <HAL_DMA_Abort_IT+0xc8>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a52      	ldr	r2, [pc, #328]	; (80060b8 <HAL_DMA_Abort_IT+0x1bc>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d027      	beq.n	8005fc4 <HAL_DMA_Abort_IT+0xc8>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a50      	ldr	r2, [pc, #320]	; (80060bc <HAL_DMA_Abort_IT+0x1c0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d022      	beq.n	8005fc4 <HAL_DMA_Abort_IT+0xc8>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a4f      	ldr	r2, [pc, #316]	; (80060c0 <HAL_DMA_Abort_IT+0x1c4>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d01d      	beq.n	8005fc4 <HAL_DMA_Abort_IT+0xc8>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a4d      	ldr	r2, [pc, #308]	; (80060c4 <HAL_DMA_Abort_IT+0x1c8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d018      	beq.n	8005fc4 <HAL_DMA_Abort_IT+0xc8>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a4c      	ldr	r2, [pc, #304]	; (80060c8 <HAL_DMA_Abort_IT+0x1cc>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d013      	beq.n	8005fc4 <HAL_DMA_Abort_IT+0xc8>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a4a      	ldr	r2, [pc, #296]	; (80060cc <HAL_DMA_Abort_IT+0x1d0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00e      	beq.n	8005fc4 <HAL_DMA_Abort_IT+0xc8>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a49      	ldr	r2, [pc, #292]	; (80060d0 <HAL_DMA_Abort_IT+0x1d4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d009      	beq.n	8005fc4 <HAL_DMA_Abort_IT+0xc8>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a47      	ldr	r2, [pc, #284]	; (80060d4 <HAL_DMA_Abort_IT+0x1d8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d004      	beq.n	8005fc4 <HAL_DMA_Abort_IT+0xc8>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a46      	ldr	r2, [pc, #280]	; (80060d8 <HAL_DMA_Abort_IT+0x1dc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d101      	bne.n	8005fc8 <HAL_DMA_Abort_IT+0xcc>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e000      	b.n	8005fca <HAL_DMA_Abort_IT+0xce>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 8086 	beq.w	80060dc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2204      	movs	r2, #4
 8005fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a2f      	ldr	r2, [pc, #188]	; (800609c <HAL_DMA_Abort_IT+0x1a0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d04a      	beq.n	8006078 <HAL_DMA_Abort_IT+0x17c>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a2e      	ldr	r2, [pc, #184]	; (80060a0 <HAL_DMA_Abort_IT+0x1a4>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d045      	beq.n	8006078 <HAL_DMA_Abort_IT+0x17c>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a2c      	ldr	r2, [pc, #176]	; (80060a4 <HAL_DMA_Abort_IT+0x1a8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d040      	beq.n	8006078 <HAL_DMA_Abort_IT+0x17c>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a2b      	ldr	r2, [pc, #172]	; (80060a8 <HAL_DMA_Abort_IT+0x1ac>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d03b      	beq.n	8006078 <HAL_DMA_Abort_IT+0x17c>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a29      	ldr	r2, [pc, #164]	; (80060ac <HAL_DMA_Abort_IT+0x1b0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d036      	beq.n	8006078 <HAL_DMA_Abort_IT+0x17c>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a28      	ldr	r2, [pc, #160]	; (80060b0 <HAL_DMA_Abort_IT+0x1b4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d031      	beq.n	8006078 <HAL_DMA_Abort_IT+0x17c>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a26      	ldr	r2, [pc, #152]	; (80060b4 <HAL_DMA_Abort_IT+0x1b8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d02c      	beq.n	8006078 <HAL_DMA_Abort_IT+0x17c>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a25      	ldr	r2, [pc, #148]	; (80060b8 <HAL_DMA_Abort_IT+0x1bc>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d027      	beq.n	8006078 <HAL_DMA_Abort_IT+0x17c>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a23      	ldr	r2, [pc, #140]	; (80060bc <HAL_DMA_Abort_IT+0x1c0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d022      	beq.n	8006078 <HAL_DMA_Abort_IT+0x17c>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a22      	ldr	r2, [pc, #136]	; (80060c0 <HAL_DMA_Abort_IT+0x1c4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d01d      	beq.n	8006078 <HAL_DMA_Abort_IT+0x17c>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a20      	ldr	r2, [pc, #128]	; (80060c4 <HAL_DMA_Abort_IT+0x1c8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d018      	beq.n	8006078 <HAL_DMA_Abort_IT+0x17c>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a1f      	ldr	r2, [pc, #124]	; (80060c8 <HAL_DMA_Abort_IT+0x1cc>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d013      	beq.n	8006078 <HAL_DMA_Abort_IT+0x17c>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a1d      	ldr	r2, [pc, #116]	; (80060cc <HAL_DMA_Abort_IT+0x1d0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00e      	beq.n	8006078 <HAL_DMA_Abort_IT+0x17c>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a1c      	ldr	r2, [pc, #112]	; (80060d0 <HAL_DMA_Abort_IT+0x1d4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d009      	beq.n	8006078 <HAL_DMA_Abort_IT+0x17c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a1a      	ldr	r2, [pc, #104]	; (80060d4 <HAL_DMA_Abort_IT+0x1d8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d004      	beq.n	8006078 <HAL_DMA_Abort_IT+0x17c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a19      	ldr	r2, [pc, #100]	; (80060d8 <HAL_DMA_Abort_IT+0x1dc>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d108      	bne.n	800608a <HAL_DMA_Abort_IT+0x18e>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 0201 	bic.w	r2, r2, #1
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	e178      	b.n	800637c <HAL_DMA_Abort_IT+0x480>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0201 	bic.w	r2, r2, #1
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	e16f      	b.n	800637c <HAL_DMA_Abort_IT+0x480>
 800609c:	40020010 	.word	0x40020010
 80060a0:	40020028 	.word	0x40020028
 80060a4:	40020040 	.word	0x40020040
 80060a8:	40020058 	.word	0x40020058
 80060ac:	40020070 	.word	0x40020070
 80060b0:	40020088 	.word	0x40020088
 80060b4:	400200a0 	.word	0x400200a0
 80060b8:	400200b8 	.word	0x400200b8
 80060bc:	40020410 	.word	0x40020410
 80060c0:	40020428 	.word	0x40020428
 80060c4:	40020440 	.word	0x40020440
 80060c8:	40020458 	.word	0x40020458
 80060cc:	40020470 	.word	0x40020470
 80060d0:	40020488 	.word	0x40020488
 80060d4:	400204a0 	.word	0x400204a0
 80060d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 020e 	bic.w	r2, r2, #14
 80060ea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a6c      	ldr	r2, [pc, #432]	; (80062a4 <HAL_DMA_Abort_IT+0x3a8>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d04a      	beq.n	800618c <HAL_DMA_Abort_IT+0x290>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a6b      	ldr	r2, [pc, #428]	; (80062a8 <HAL_DMA_Abort_IT+0x3ac>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d045      	beq.n	800618c <HAL_DMA_Abort_IT+0x290>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a69      	ldr	r2, [pc, #420]	; (80062ac <HAL_DMA_Abort_IT+0x3b0>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d040      	beq.n	800618c <HAL_DMA_Abort_IT+0x290>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a68      	ldr	r2, [pc, #416]	; (80062b0 <HAL_DMA_Abort_IT+0x3b4>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d03b      	beq.n	800618c <HAL_DMA_Abort_IT+0x290>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a66      	ldr	r2, [pc, #408]	; (80062b4 <HAL_DMA_Abort_IT+0x3b8>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d036      	beq.n	800618c <HAL_DMA_Abort_IT+0x290>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a65      	ldr	r2, [pc, #404]	; (80062b8 <HAL_DMA_Abort_IT+0x3bc>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d031      	beq.n	800618c <HAL_DMA_Abort_IT+0x290>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a63      	ldr	r2, [pc, #396]	; (80062bc <HAL_DMA_Abort_IT+0x3c0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d02c      	beq.n	800618c <HAL_DMA_Abort_IT+0x290>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a62      	ldr	r2, [pc, #392]	; (80062c0 <HAL_DMA_Abort_IT+0x3c4>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d027      	beq.n	800618c <HAL_DMA_Abort_IT+0x290>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a60      	ldr	r2, [pc, #384]	; (80062c4 <HAL_DMA_Abort_IT+0x3c8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d022      	beq.n	800618c <HAL_DMA_Abort_IT+0x290>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a5f      	ldr	r2, [pc, #380]	; (80062c8 <HAL_DMA_Abort_IT+0x3cc>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d01d      	beq.n	800618c <HAL_DMA_Abort_IT+0x290>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a5d      	ldr	r2, [pc, #372]	; (80062cc <HAL_DMA_Abort_IT+0x3d0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d018      	beq.n	800618c <HAL_DMA_Abort_IT+0x290>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a5c      	ldr	r2, [pc, #368]	; (80062d0 <HAL_DMA_Abort_IT+0x3d4>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d013      	beq.n	800618c <HAL_DMA_Abort_IT+0x290>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a5a      	ldr	r2, [pc, #360]	; (80062d4 <HAL_DMA_Abort_IT+0x3d8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00e      	beq.n	800618c <HAL_DMA_Abort_IT+0x290>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a59      	ldr	r2, [pc, #356]	; (80062d8 <HAL_DMA_Abort_IT+0x3dc>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d009      	beq.n	800618c <HAL_DMA_Abort_IT+0x290>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a57      	ldr	r2, [pc, #348]	; (80062dc <HAL_DMA_Abort_IT+0x3e0>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <HAL_DMA_Abort_IT+0x290>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a56      	ldr	r2, [pc, #344]	; (80062e0 <HAL_DMA_Abort_IT+0x3e4>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d108      	bne.n	800619e <HAL_DMA_Abort_IT+0x2a2>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0201 	bic.w	r2, r2, #1
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	e007      	b.n	80061ae <HAL_DMA_Abort_IT+0x2b2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0201 	bic.w	r2, r2, #1
 80061ac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a3c      	ldr	r2, [pc, #240]	; (80062a4 <HAL_DMA_Abort_IT+0x3a8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d072      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a3a      	ldr	r2, [pc, #232]	; (80062a8 <HAL_DMA_Abort_IT+0x3ac>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d06d      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a39      	ldr	r2, [pc, #228]	; (80062ac <HAL_DMA_Abort_IT+0x3b0>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d068      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a37      	ldr	r2, [pc, #220]	; (80062b0 <HAL_DMA_Abort_IT+0x3b4>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d063      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a36      	ldr	r2, [pc, #216]	; (80062b4 <HAL_DMA_Abort_IT+0x3b8>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d05e      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a34      	ldr	r2, [pc, #208]	; (80062b8 <HAL_DMA_Abort_IT+0x3bc>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d059      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a33      	ldr	r2, [pc, #204]	; (80062bc <HAL_DMA_Abort_IT+0x3c0>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d054      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a31      	ldr	r2, [pc, #196]	; (80062c0 <HAL_DMA_Abort_IT+0x3c4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d04f      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a30      	ldr	r2, [pc, #192]	; (80062c4 <HAL_DMA_Abort_IT+0x3c8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d04a      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a2e      	ldr	r2, [pc, #184]	; (80062c8 <HAL_DMA_Abort_IT+0x3cc>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d045      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a2d      	ldr	r2, [pc, #180]	; (80062cc <HAL_DMA_Abort_IT+0x3d0>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d040      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a2b      	ldr	r2, [pc, #172]	; (80062d0 <HAL_DMA_Abort_IT+0x3d4>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d03b      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a2a      	ldr	r2, [pc, #168]	; (80062d4 <HAL_DMA_Abort_IT+0x3d8>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d036      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a28      	ldr	r2, [pc, #160]	; (80062d8 <HAL_DMA_Abort_IT+0x3dc>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d031      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a27      	ldr	r2, [pc, #156]	; (80062dc <HAL_DMA_Abort_IT+0x3e0>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d02c      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a25      	ldr	r2, [pc, #148]	; (80062e0 <HAL_DMA_Abort_IT+0x3e4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d027      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a24      	ldr	r2, [pc, #144]	; (80062e4 <HAL_DMA_Abort_IT+0x3e8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d022      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a22      	ldr	r2, [pc, #136]	; (80062e8 <HAL_DMA_Abort_IT+0x3ec>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d01d      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a21      	ldr	r2, [pc, #132]	; (80062ec <HAL_DMA_Abort_IT+0x3f0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d018      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1f      	ldr	r2, [pc, #124]	; (80062f0 <HAL_DMA_Abort_IT+0x3f4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d013      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a1e      	ldr	r2, [pc, #120]	; (80062f4 <HAL_DMA_Abort_IT+0x3f8>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d00e      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a1c      	ldr	r2, [pc, #112]	; (80062f8 <HAL_DMA_Abort_IT+0x3fc>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d009      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a1b      	ldr	r2, [pc, #108]	; (80062fc <HAL_DMA_Abort_IT+0x400>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d004      	beq.n	800629e <HAL_DMA_Abort_IT+0x3a2>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a19      	ldr	r2, [pc, #100]	; (8006300 <HAL_DMA_Abort_IT+0x404>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d132      	bne.n	8006304 <HAL_DMA_Abort_IT+0x408>
 800629e:	2301      	movs	r3, #1
 80062a0:	e031      	b.n	8006306 <HAL_DMA_Abort_IT+0x40a>
 80062a2:	bf00      	nop
 80062a4:	40020010 	.word	0x40020010
 80062a8:	40020028 	.word	0x40020028
 80062ac:	40020040 	.word	0x40020040
 80062b0:	40020058 	.word	0x40020058
 80062b4:	40020070 	.word	0x40020070
 80062b8:	40020088 	.word	0x40020088
 80062bc:	400200a0 	.word	0x400200a0
 80062c0:	400200b8 	.word	0x400200b8
 80062c4:	40020410 	.word	0x40020410
 80062c8:	40020428 	.word	0x40020428
 80062cc:	40020440 	.word	0x40020440
 80062d0:	40020458 	.word	0x40020458
 80062d4:	40020470 	.word	0x40020470
 80062d8:	40020488 	.word	0x40020488
 80062dc:	400204a0 	.word	0x400204a0
 80062e0:	400204b8 	.word	0x400204b8
 80062e4:	58025408 	.word	0x58025408
 80062e8:	5802541c 	.word	0x5802541c
 80062ec:	58025430 	.word	0x58025430
 80062f0:	58025444 	.word	0x58025444
 80062f4:	58025458 	.word	0x58025458
 80062f8:	5802546c 	.word	0x5802546c
 80062fc:	58025480 	.word	0x58025480
 8006300:	58025494 	.word	0x58025494
 8006304:	2300      	movs	r3, #0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d028      	beq.n	800635c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006318:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800631e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006324:	f003 031f 	and.w	r3, r3, #31
 8006328:	2201      	movs	r2, #1
 800632a:	409a      	lsls	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006338:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00c      	beq.n	800635c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800634c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006350:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800635a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop

08006388 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b08a      	sub	sp, #40	; 0x28
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006394:	4b67      	ldr	r3, [pc, #412]	; (8006534 <HAL_DMA_IRQHandler+0x1ac>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a67      	ldr	r2, [pc, #412]	; (8006538 <HAL_DMA_IRQHandler+0x1b0>)
 800639a:	fba2 2303 	umull	r2, r3, r2, r3
 800639e:	0a9b      	lsrs	r3, r3, #10
 80063a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a5f      	ldr	r2, [pc, #380]	; (800653c <HAL_DMA_IRQHandler+0x1b4>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d04a      	beq.n	800645a <HAL_DMA_IRQHandler+0xd2>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a5d      	ldr	r2, [pc, #372]	; (8006540 <HAL_DMA_IRQHandler+0x1b8>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d045      	beq.n	800645a <HAL_DMA_IRQHandler+0xd2>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a5c      	ldr	r2, [pc, #368]	; (8006544 <HAL_DMA_IRQHandler+0x1bc>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d040      	beq.n	800645a <HAL_DMA_IRQHandler+0xd2>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a5a      	ldr	r2, [pc, #360]	; (8006548 <HAL_DMA_IRQHandler+0x1c0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d03b      	beq.n	800645a <HAL_DMA_IRQHandler+0xd2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a59      	ldr	r2, [pc, #356]	; (800654c <HAL_DMA_IRQHandler+0x1c4>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d036      	beq.n	800645a <HAL_DMA_IRQHandler+0xd2>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a57      	ldr	r2, [pc, #348]	; (8006550 <HAL_DMA_IRQHandler+0x1c8>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d031      	beq.n	800645a <HAL_DMA_IRQHandler+0xd2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a56      	ldr	r2, [pc, #344]	; (8006554 <HAL_DMA_IRQHandler+0x1cc>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d02c      	beq.n	800645a <HAL_DMA_IRQHandler+0xd2>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a54      	ldr	r2, [pc, #336]	; (8006558 <HAL_DMA_IRQHandler+0x1d0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d027      	beq.n	800645a <HAL_DMA_IRQHandler+0xd2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a53      	ldr	r2, [pc, #332]	; (800655c <HAL_DMA_IRQHandler+0x1d4>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d022      	beq.n	800645a <HAL_DMA_IRQHandler+0xd2>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a51      	ldr	r2, [pc, #324]	; (8006560 <HAL_DMA_IRQHandler+0x1d8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d01d      	beq.n	800645a <HAL_DMA_IRQHandler+0xd2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a50      	ldr	r2, [pc, #320]	; (8006564 <HAL_DMA_IRQHandler+0x1dc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d018      	beq.n	800645a <HAL_DMA_IRQHandler+0xd2>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a4e      	ldr	r2, [pc, #312]	; (8006568 <HAL_DMA_IRQHandler+0x1e0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d013      	beq.n	800645a <HAL_DMA_IRQHandler+0xd2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a4d      	ldr	r2, [pc, #308]	; (800656c <HAL_DMA_IRQHandler+0x1e4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d00e      	beq.n	800645a <HAL_DMA_IRQHandler+0xd2>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a4b      	ldr	r2, [pc, #300]	; (8006570 <HAL_DMA_IRQHandler+0x1e8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d009      	beq.n	800645a <HAL_DMA_IRQHandler+0xd2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a4a      	ldr	r2, [pc, #296]	; (8006574 <HAL_DMA_IRQHandler+0x1ec>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d004      	beq.n	800645a <HAL_DMA_IRQHandler+0xd2>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a48      	ldr	r2, [pc, #288]	; (8006578 <HAL_DMA_IRQHandler+0x1f0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d101      	bne.n	800645e <HAL_DMA_IRQHandler+0xd6>
 800645a:	2301      	movs	r3, #1
 800645c:	e000      	b.n	8006460 <HAL_DMA_IRQHandler+0xd8>
 800645e:	2300      	movs	r3, #0
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 842b 	beq.w	8006cbc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800646a:	f003 031f 	and.w	r3, r3, #31
 800646e:	2208      	movs	r2, #8
 8006470:	409a      	lsls	r2, r3
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	4013      	ands	r3, r2
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 80a2 	beq.w	80065c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a2e      	ldr	r2, [pc, #184]	; (800653c <HAL_DMA_IRQHandler+0x1b4>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d04a      	beq.n	800651c <HAL_DMA_IRQHandler+0x194>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a2d      	ldr	r2, [pc, #180]	; (8006540 <HAL_DMA_IRQHandler+0x1b8>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d045      	beq.n	800651c <HAL_DMA_IRQHandler+0x194>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a2b      	ldr	r2, [pc, #172]	; (8006544 <HAL_DMA_IRQHandler+0x1bc>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d040      	beq.n	800651c <HAL_DMA_IRQHandler+0x194>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a2a      	ldr	r2, [pc, #168]	; (8006548 <HAL_DMA_IRQHandler+0x1c0>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d03b      	beq.n	800651c <HAL_DMA_IRQHandler+0x194>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a28      	ldr	r2, [pc, #160]	; (800654c <HAL_DMA_IRQHandler+0x1c4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d036      	beq.n	800651c <HAL_DMA_IRQHandler+0x194>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a27      	ldr	r2, [pc, #156]	; (8006550 <HAL_DMA_IRQHandler+0x1c8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d031      	beq.n	800651c <HAL_DMA_IRQHandler+0x194>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a25      	ldr	r2, [pc, #148]	; (8006554 <HAL_DMA_IRQHandler+0x1cc>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d02c      	beq.n	800651c <HAL_DMA_IRQHandler+0x194>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a24      	ldr	r2, [pc, #144]	; (8006558 <HAL_DMA_IRQHandler+0x1d0>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d027      	beq.n	800651c <HAL_DMA_IRQHandler+0x194>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a22      	ldr	r2, [pc, #136]	; (800655c <HAL_DMA_IRQHandler+0x1d4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d022      	beq.n	800651c <HAL_DMA_IRQHandler+0x194>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a21      	ldr	r2, [pc, #132]	; (8006560 <HAL_DMA_IRQHandler+0x1d8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d01d      	beq.n	800651c <HAL_DMA_IRQHandler+0x194>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a1f      	ldr	r2, [pc, #124]	; (8006564 <HAL_DMA_IRQHandler+0x1dc>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d018      	beq.n	800651c <HAL_DMA_IRQHandler+0x194>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a1e      	ldr	r2, [pc, #120]	; (8006568 <HAL_DMA_IRQHandler+0x1e0>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d013      	beq.n	800651c <HAL_DMA_IRQHandler+0x194>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a1c      	ldr	r2, [pc, #112]	; (800656c <HAL_DMA_IRQHandler+0x1e4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00e      	beq.n	800651c <HAL_DMA_IRQHandler+0x194>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1b      	ldr	r2, [pc, #108]	; (8006570 <HAL_DMA_IRQHandler+0x1e8>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d009      	beq.n	800651c <HAL_DMA_IRQHandler+0x194>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a19      	ldr	r2, [pc, #100]	; (8006574 <HAL_DMA_IRQHandler+0x1ec>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d004      	beq.n	800651c <HAL_DMA_IRQHandler+0x194>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a18      	ldr	r2, [pc, #96]	; (8006578 <HAL_DMA_IRQHandler+0x1f0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d12f      	bne.n	800657c <HAL_DMA_IRQHandler+0x1f4>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b00      	cmp	r3, #0
 8006528:	bf14      	ite	ne
 800652a:	2301      	movne	r3, #1
 800652c:	2300      	moveq	r3, #0
 800652e:	b2db      	uxtb	r3, r3
 8006530:	e02e      	b.n	8006590 <HAL_DMA_IRQHandler+0x208>
 8006532:	bf00      	nop
 8006534:	24000000 	.word	0x24000000
 8006538:	1b4e81b5 	.word	0x1b4e81b5
 800653c:	40020010 	.word	0x40020010
 8006540:	40020028 	.word	0x40020028
 8006544:	40020040 	.word	0x40020040
 8006548:	40020058 	.word	0x40020058
 800654c:	40020070 	.word	0x40020070
 8006550:	40020088 	.word	0x40020088
 8006554:	400200a0 	.word	0x400200a0
 8006558:	400200b8 	.word	0x400200b8
 800655c:	40020410 	.word	0x40020410
 8006560:	40020428 	.word	0x40020428
 8006564:	40020440 	.word	0x40020440
 8006568:	40020458 	.word	0x40020458
 800656c:	40020470 	.word	0x40020470
 8006570:	40020488 	.word	0x40020488
 8006574:	400204a0 	.word	0x400204a0
 8006578:	400204b8 	.word	0x400204b8
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0308 	and.w	r3, r3, #8
 8006586:	2b00      	cmp	r3, #0
 8006588:	bf14      	ite	ne
 800658a:	2301      	movne	r3, #1
 800658c:	2300      	moveq	r3, #0
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b00      	cmp	r3, #0
 8006592:	d015      	beq.n	80065c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0204 	bic.w	r2, r2, #4
 80065a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a8:	f003 031f 	and.w	r3, r3, #31
 80065ac:	2208      	movs	r2, #8
 80065ae:	409a      	lsls	r2, r3
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b8:	f043 0201 	orr.w	r2, r3, #1
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c4:	f003 031f 	and.w	r3, r3, #31
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	fa22 f303 	lsr.w	r3, r2, r3
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d06e      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a69      	ldr	r2, [pc, #420]	; (8006780 <HAL_DMA_IRQHandler+0x3f8>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d04a      	beq.n	8006676 <HAL_DMA_IRQHandler+0x2ee>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a67      	ldr	r2, [pc, #412]	; (8006784 <HAL_DMA_IRQHandler+0x3fc>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d045      	beq.n	8006676 <HAL_DMA_IRQHandler+0x2ee>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a66      	ldr	r2, [pc, #408]	; (8006788 <HAL_DMA_IRQHandler+0x400>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d040      	beq.n	8006676 <HAL_DMA_IRQHandler+0x2ee>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a64      	ldr	r2, [pc, #400]	; (800678c <HAL_DMA_IRQHandler+0x404>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d03b      	beq.n	8006676 <HAL_DMA_IRQHandler+0x2ee>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a63      	ldr	r2, [pc, #396]	; (8006790 <HAL_DMA_IRQHandler+0x408>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d036      	beq.n	8006676 <HAL_DMA_IRQHandler+0x2ee>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a61      	ldr	r2, [pc, #388]	; (8006794 <HAL_DMA_IRQHandler+0x40c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d031      	beq.n	8006676 <HAL_DMA_IRQHandler+0x2ee>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a60      	ldr	r2, [pc, #384]	; (8006798 <HAL_DMA_IRQHandler+0x410>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d02c      	beq.n	8006676 <HAL_DMA_IRQHandler+0x2ee>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a5e      	ldr	r2, [pc, #376]	; (800679c <HAL_DMA_IRQHandler+0x414>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d027      	beq.n	8006676 <HAL_DMA_IRQHandler+0x2ee>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a5d      	ldr	r2, [pc, #372]	; (80067a0 <HAL_DMA_IRQHandler+0x418>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d022      	beq.n	8006676 <HAL_DMA_IRQHandler+0x2ee>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a5b      	ldr	r2, [pc, #364]	; (80067a4 <HAL_DMA_IRQHandler+0x41c>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d01d      	beq.n	8006676 <HAL_DMA_IRQHandler+0x2ee>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a5a      	ldr	r2, [pc, #360]	; (80067a8 <HAL_DMA_IRQHandler+0x420>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d018      	beq.n	8006676 <HAL_DMA_IRQHandler+0x2ee>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a58      	ldr	r2, [pc, #352]	; (80067ac <HAL_DMA_IRQHandler+0x424>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d013      	beq.n	8006676 <HAL_DMA_IRQHandler+0x2ee>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a57      	ldr	r2, [pc, #348]	; (80067b0 <HAL_DMA_IRQHandler+0x428>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d00e      	beq.n	8006676 <HAL_DMA_IRQHandler+0x2ee>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a55      	ldr	r2, [pc, #340]	; (80067b4 <HAL_DMA_IRQHandler+0x42c>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d009      	beq.n	8006676 <HAL_DMA_IRQHandler+0x2ee>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a54      	ldr	r2, [pc, #336]	; (80067b8 <HAL_DMA_IRQHandler+0x430>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d004      	beq.n	8006676 <HAL_DMA_IRQHandler+0x2ee>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a52      	ldr	r2, [pc, #328]	; (80067bc <HAL_DMA_IRQHandler+0x434>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d10a      	bne.n	800668c <HAL_DMA_IRQHandler+0x304>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006680:	2b00      	cmp	r3, #0
 8006682:	bf14      	ite	ne
 8006684:	2301      	movne	r3, #1
 8006686:	2300      	moveq	r3, #0
 8006688:	b2db      	uxtb	r3, r3
 800668a:	e003      	b.n	8006694 <HAL_DMA_IRQHandler+0x30c>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2300      	movs	r3, #0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00d      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800669c:	f003 031f 	and.w	r3, r3, #31
 80066a0:	2201      	movs	r2, #1
 80066a2:	409a      	lsls	r2, r3
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ac:	f043 0202 	orr.w	r2, r3, #2
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b8:	f003 031f 	and.w	r3, r3, #31
 80066bc:	2204      	movs	r2, #4
 80066be:	409a      	lsls	r2, r3
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	4013      	ands	r3, r2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 808f 	beq.w	80067e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a2c      	ldr	r2, [pc, #176]	; (8006780 <HAL_DMA_IRQHandler+0x3f8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d04a      	beq.n	800676a <HAL_DMA_IRQHandler+0x3e2>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a2a      	ldr	r2, [pc, #168]	; (8006784 <HAL_DMA_IRQHandler+0x3fc>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d045      	beq.n	800676a <HAL_DMA_IRQHandler+0x3e2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a29      	ldr	r2, [pc, #164]	; (8006788 <HAL_DMA_IRQHandler+0x400>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d040      	beq.n	800676a <HAL_DMA_IRQHandler+0x3e2>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a27      	ldr	r2, [pc, #156]	; (800678c <HAL_DMA_IRQHandler+0x404>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d03b      	beq.n	800676a <HAL_DMA_IRQHandler+0x3e2>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a26      	ldr	r2, [pc, #152]	; (8006790 <HAL_DMA_IRQHandler+0x408>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d036      	beq.n	800676a <HAL_DMA_IRQHandler+0x3e2>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a24      	ldr	r2, [pc, #144]	; (8006794 <HAL_DMA_IRQHandler+0x40c>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d031      	beq.n	800676a <HAL_DMA_IRQHandler+0x3e2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a23      	ldr	r2, [pc, #140]	; (8006798 <HAL_DMA_IRQHandler+0x410>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d02c      	beq.n	800676a <HAL_DMA_IRQHandler+0x3e2>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a21      	ldr	r2, [pc, #132]	; (800679c <HAL_DMA_IRQHandler+0x414>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d027      	beq.n	800676a <HAL_DMA_IRQHandler+0x3e2>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a20      	ldr	r2, [pc, #128]	; (80067a0 <HAL_DMA_IRQHandler+0x418>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d022      	beq.n	800676a <HAL_DMA_IRQHandler+0x3e2>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a1e      	ldr	r2, [pc, #120]	; (80067a4 <HAL_DMA_IRQHandler+0x41c>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d01d      	beq.n	800676a <HAL_DMA_IRQHandler+0x3e2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a1d      	ldr	r2, [pc, #116]	; (80067a8 <HAL_DMA_IRQHandler+0x420>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d018      	beq.n	800676a <HAL_DMA_IRQHandler+0x3e2>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a1b      	ldr	r2, [pc, #108]	; (80067ac <HAL_DMA_IRQHandler+0x424>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d013      	beq.n	800676a <HAL_DMA_IRQHandler+0x3e2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a1a      	ldr	r2, [pc, #104]	; (80067b0 <HAL_DMA_IRQHandler+0x428>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d00e      	beq.n	800676a <HAL_DMA_IRQHandler+0x3e2>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a18      	ldr	r2, [pc, #96]	; (80067b4 <HAL_DMA_IRQHandler+0x42c>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d009      	beq.n	800676a <HAL_DMA_IRQHandler+0x3e2>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a17      	ldr	r2, [pc, #92]	; (80067b8 <HAL_DMA_IRQHandler+0x430>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d004      	beq.n	800676a <HAL_DMA_IRQHandler+0x3e2>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a15      	ldr	r2, [pc, #84]	; (80067bc <HAL_DMA_IRQHandler+0x434>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d12a      	bne.n	80067c0 <HAL_DMA_IRQHandler+0x438>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0302 	and.w	r3, r3, #2
 8006774:	2b00      	cmp	r3, #0
 8006776:	bf14      	ite	ne
 8006778:	2301      	movne	r3, #1
 800677a:	2300      	moveq	r3, #0
 800677c:	b2db      	uxtb	r3, r3
 800677e:	e023      	b.n	80067c8 <HAL_DMA_IRQHandler+0x440>
 8006780:	40020010 	.word	0x40020010
 8006784:	40020028 	.word	0x40020028
 8006788:	40020040 	.word	0x40020040
 800678c:	40020058 	.word	0x40020058
 8006790:	40020070 	.word	0x40020070
 8006794:	40020088 	.word	0x40020088
 8006798:	400200a0 	.word	0x400200a0
 800679c:	400200b8 	.word	0x400200b8
 80067a0:	40020410 	.word	0x40020410
 80067a4:	40020428 	.word	0x40020428
 80067a8:	40020440 	.word	0x40020440
 80067ac:	40020458 	.word	0x40020458
 80067b0:	40020470 	.word	0x40020470
 80067b4:	40020488 	.word	0x40020488
 80067b8:	400204a0 	.word	0x400204a0
 80067bc:	400204b8 	.word	0x400204b8
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2300      	movs	r3, #0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00d      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d0:	f003 031f 	and.w	r3, r3, #31
 80067d4:	2204      	movs	r2, #4
 80067d6:	409a      	lsls	r2, r3
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e0:	f043 0204 	orr.w	r2, r3, #4
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ec:	f003 031f 	and.w	r3, r3, #31
 80067f0:	2210      	movs	r2, #16
 80067f2:	409a      	lsls	r2, r3
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	4013      	ands	r3, r2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 80a6 	beq.w	800694a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a85      	ldr	r2, [pc, #532]	; (8006a18 <HAL_DMA_IRQHandler+0x690>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d04a      	beq.n	800689e <HAL_DMA_IRQHandler+0x516>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a83      	ldr	r2, [pc, #524]	; (8006a1c <HAL_DMA_IRQHandler+0x694>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d045      	beq.n	800689e <HAL_DMA_IRQHandler+0x516>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a82      	ldr	r2, [pc, #520]	; (8006a20 <HAL_DMA_IRQHandler+0x698>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d040      	beq.n	800689e <HAL_DMA_IRQHandler+0x516>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a80      	ldr	r2, [pc, #512]	; (8006a24 <HAL_DMA_IRQHandler+0x69c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d03b      	beq.n	800689e <HAL_DMA_IRQHandler+0x516>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a7f      	ldr	r2, [pc, #508]	; (8006a28 <HAL_DMA_IRQHandler+0x6a0>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d036      	beq.n	800689e <HAL_DMA_IRQHandler+0x516>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a7d      	ldr	r2, [pc, #500]	; (8006a2c <HAL_DMA_IRQHandler+0x6a4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d031      	beq.n	800689e <HAL_DMA_IRQHandler+0x516>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a7c      	ldr	r2, [pc, #496]	; (8006a30 <HAL_DMA_IRQHandler+0x6a8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d02c      	beq.n	800689e <HAL_DMA_IRQHandler+0x516>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a7a      	ldr	r2, [pc, #488]	; (8006a34 <HAL_DMA_IRQHandler+0x6ac>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d027      	beq.n	800689e <HAL_DMA_IRQHandler+0x516>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a79      	ldr	r2, [pc, #484]	; (8006a38 <HAL_DMA_IRQHandler+0x6b0>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d022      	beq.n	800689e <HAL_DMA_IRQHandler+0x516>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a77      	ldr	r2, [pc, #476]	; (8006a3c <HAL_DMA_IRQHandler+0x6b4>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d01d      	beq.n	800689e <HAL_DMA_IRQHandler+0x516>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a76      	ldr	r2, [pc, #472]	; (8006a40 <HAL_DMA_IRQHandler+0x6b8>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d018      	beq.n	800689e <HAL_DMA_IRQHandler+0x516>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a74      	ldr	r2, [pc, #464]	; (8006a44 <HAL_DMA_IRQHandler+0x6bc>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d013      	beq.n	800689e <HAL_DMA_IRQHandler+0x516>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a73      	ldr	r2, [pc, #460]	; (8006a48 <HAL_DMA_IRQHandler+0x6c0>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d00e      	beq.n	800689e <HAL_DMA_IRQHandler+0x516>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a71      	ldr	r2, [pc, #452]	; (8006a4c <HAL_DMA_IRQHandler+0x6c4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d009      	beq.n	800689e <HAL_DMA_IRQHandler+0x516>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a70      	ldr	r2, [pc, #448]	; (8006a50 <HAL_DMA_IRQHandler+0x6c8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d004      	beq.n	800689e <HAL_DMA_IRQHandler+0x516>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a6e      	ldr	r2, [pc, #440]	; (8006a54 <HAL_DMA_IRQHandler+0x6cc>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d10a      	bne.n	80068b4 <HAL_DMA_IRQHandler+0x52c>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0308 	and.w	r3, r3, #8
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	bf14      	ite	ne
 80068ac:	2301      	movne	r3, #1
 80068ae:	2300      	moveq	r3, #0
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	e009      	b.n	80068c8 <HAL_DMA_IRQHandler+0x540>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0304 	and.w	r3, r3, #4
 80068be:	2b00      	cmp	r3, #0
 80068c0:	bf14      	ite	ne
 80068c2:	2301      	movne	r3, #1
 80068c4:	2300      	moveq	r3, #0
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d03e      	beq.n	800694a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d0:	f003 031f 	and.w	r3, r3, #31
 80068d4:	2210      	movs	r2, #16
 80068d6:	409a      	lsls	r2, r3
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d018      	beq.n	800691c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d108      	bne.n	800690a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d024      	beq.n	800694a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	4798      	blx	r3
 8006908:	e01f      	b.n	800694a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800690e:	2b00      	cmp	r3, #0
 8006910:	d01b      	beq.n	800694a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	4798      	blx	r3
 800691a:	e016      	b.n	800694a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006926:	2b00      	cmp	r3, #0
 8006928:	d107      	bne.n	800693a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 0208 	bic.w	r2, r2, #8
 8006938:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694e:	f003 031f 	and.w	r3, r3, #31
 8006952:	2220      	movs	r2, #32
 8006954:	409a      	lsls	r2, r3
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	4013      	ands	r3, r2
 800695a:	2b00      	cmp	r3, #0
 800695c:	f000 8110 	beq.w	8006b80 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a2c      	ldr	r2, [pc, #176]	; (8006a18 <HAL_DMA_IRQHandler+0x690>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d04a      	beq.n	8006a00 <HAL_DMA_IRQHandler+0x678>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a2b      	ldr	r2, [pc, #172]	; (8006a1c <HAL_DMA_IRQHandler+0x694>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d045      	beq.n	8006a00 <HAL_DMA_IRQHandler+0x678>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a29      	ldr	r2, [pc, #164]	; (8006a20 <HAL_DMA_IRQHandler+0x698>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d040      	beq.n	8006a00 <HAL_DMA_IRQHandler+0x678>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a28      	ldr	r2, [pc, #160]	; (8006a24 <HAL_DMA_IRQHandler+0x69c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d03b      	beq.n	8006a00 <HAL_DMA_IRQHandler+0x678>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a26      	ldr	r2, [pc, #152]	; (8006a28 <HAL_DMA_IRQHandler+0x6a0>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d036      	beq.n	8006a00 <HAL_DMA_IRQHandler+0x678>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a25      	ldr	r2, [pc, #148]	; (8006a2c <HAL_DMA_IRQHandler+0x6a4>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d031      	beq.n	8006a00 <HAL_DMA_IRQHandler+0x678>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a23      	ldr	r2, [pc, #140]	; (8006a30 <HAL_DMA_IRQHandler+0x6a8>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d02c      	beq.n	8006a00 <HAL_DMA_IRQHandler+0x678>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a22      	ldr	r2, [pc, #136]	; (8006a34 <HAL_DMA_IRQHandler+0x6ac>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d027      	beq.n	8006a00 <HAL_DMA_IRQHandler+0x678>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a20      	ldr	r2, [pc, #128]	; (8006a38 <HAL_DMA_IRQHandler+0x6b0>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d022      	beq.n	8006a00 <HAL_DMA_IRQHandler+0x678>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a1f      	ldr	r2, [pc, #124]	; (8006a3c <HAL_DMA_IRQHandler+0x6b4>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d01d      	beq.n	8006a00 <HAL_DMA_IRQHandler+0x678>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a1d      	ldr	r2, [pc, #116]	; (8006a40 <HAL_DMA_IRQHandler+0x6b8>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d018      	beq.n	8006a00 <HAL_DMA_IRQHandler+0x678>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a1c      	ldr	r2, [pc, #112]	; (8006a44 <HAL_DMA_IRQHandler+0x6bc>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d013      	beq.n	8006a00 <HAL_DMA_IRQHandler+0x678>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a1a      	ldr	r2, [pc, #104]	; (8006a48 <HAL_DMA_IRQHandler+0x6c0>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d00e      	beq.n	8006a00 <HAL_DMA_IRQHandler+0x678>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a19      	ldr	r2, [pc, #100]	; (8006a4c <HAL_DMA_IRQHandler+0x6c4>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d009      	beq.n	8006a00 <HAL_DMA_IRQHandler+0x678>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a17      	ldr	r2, [pc, #92]	; (8006a50 <HAL_DMA_IRQHandler+0x6c8>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d004      	beq.n	8006a00 <HAL_DMA_IRQHandler+0x678>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a16      	ldr	r2, [pc, #88]	; (8006a54 <HAL_DMA_IRQHandler+0x6cc>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d12b      	bne.n	8006a58 <HAL_DMA_IRQHandler+0x6d0>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0310 	and.w	r3, r3, #16
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	bf14      	ite	ne
 8006a0e:	2301      	movne	r3, #1
 8006a10:	2300      	moveq	r3, #0
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	e02a      	b.n	8006a6c <HAL_DMA_IRQHandler+0x6e4>
 8006a16:	bf00      	nop
 8006a18:	40020010 	.word	0x40020010
 8006a1c:	40020028 	.word	0x40020028
 8006a20:	40020040 	.word	0x40020040
 8006a24:	40020058 	.word	0x40020058
 8006a28:	40020070 	.word	0x40020070
 8006a2c:	40020088 	.word	0x40020088
 8006a30:	400200a0 	.word	0x400200a0
 8006a34:	400200b8 	.word	0x400200b8
 8006a38:	40020410 	.word	0x40020410
 8006a3c:	40020428 	.word	0x40020428
 8006a40:	40020440 	.word	0x40020440
 8006a44:	40020458 	.word	0x40020458
 8006a48:	40020470 	.word	0x40020470
 8006a4c:	40020488 	.word	0x40020488
 8006a50:	400204a0 	.word	0x400204a0
 8006a54:	400204b8 	.word	0x400204b8
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	bf14      	ite	ne
 8006a66:	2301      	movne	r3, #1
 8006a68:	2300      	moveq	r3, #0
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 8087 	beq.w	8006b80 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a76:	f003 031f 	and.w	r3, r3, #31
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	409a      	lsls	r2, r3
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b04      	cmp	r3, #4
 8006a8c:	d139      	bne.n	8006b02 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 0216 	bic.w	r2, r2, #22
 8006a9c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	695a      	ldr	r2, [r3, #20]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006aac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d103      	bne.n	8006abe <HAL_DMA_IRQHandler+0x736>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d007      	beq.n	8006ace <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 0208 	bic.w	r2, r2, #8
 8006acc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad2:	f003 031f 	and.w	r3, r3, #31
 8006ad6:	223f      	movs	r2, #63	; 0x3f
 8006ad8:	409a      	lsls	r2, r3
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 834a 	beq.w	800718c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	4798      	blx	r3
          }
          return;
 8006b00:	e344      	b.n	800718c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d018      	beq.n	8006b42 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d108      	bne.n	8006b30 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d02c      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	4798      	blx	r3
 8006b2e:	e027      	b.n	8006b80 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d023      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	4798      	blx	r3
 8006b40:	e01e      	b.n	8006b80 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10f      	bne.n	8006b70 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 0210 	bic.w	r2, r2, #16
 8006b5e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d003      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 8306 	beq.w	8007196 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 8088 	beq.w	8006ca8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2204      	movs	r2, #4
 8006b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a7a      	ldr	r2, [pc, #488]	; (8006d90 <HAL_DMA_IRQHandler+0xa08>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d04a      	beq.n	8006c40 <HAL_DMA_IRQHandler+0x8b8>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a79      	ldr	r2, [pc, #484]	; (8006d94 <HAL_DMA_IRQHandler+0xa0c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d045      	beq.n	8006c40 <HAL_DMA_IRQHandler+0x8b8>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a77      	ldr	r2, [pc, #476]	; (8006d98 <HAL_DMA_IRQHandler+0xa10>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d040      	beq.n	8006c40 <HAL_DMA_IRQHandler+0x8b8>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a76      	ldr	r2, [pc, #472]	; (8006d9c <HAL_DMA_IRQHandler+0xa14>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d03b      	beq.n	8006c40 <HAL_DMA_IRQHandler+0x8b8>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a74      	ldr	r2, [pc, #464]	; (8006da0 <HAL_DMA_IRQHandler+0xa18>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d036      	beq.n	8006c40 <HAL_DMA_IRQHandler+0x8b8>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a73      	ldr	r2, [pc, #460]	; (8006da4 <HAL_DMA_IRQHandler+0xa1c>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d031      	beq.n	8006c40 <HAL_DMA_IRQHandler+0x8b8>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a71      	ldr	r2, [pc, #452]	; (8006da8 <HAL_DMA_IRQHandler+0xa20>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d02c      	beq.n	8006c40 <HAL_DMA_IRQHandler+0x8b8>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a70      	ldr	r2, [pc, #448]	; (8006dac <HAL_DMA_IRQHandler+0xa24>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d027      	beq.n	8006c40 <HAL_DMA_IRQHandler+0x8b8>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a6e      	ldr	r2, [pc, #440]	; (8006db0 <HAL_DMA_IRQHandler+0xa28>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d022      	beq.n	8006c40 <HAL_DMA_IRQHandler+0x8b8>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a6d      	ldr	r2, [pc, #436]	; (8006db4 <HAL_DMA_IRQHandler+0xa2c>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d01d      	beq.n	8006c40 <HAL_DMA_IRQHandler+0x8b8>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a6b      	ldr	r2, [pc, #428]	; (8006db8 <HAL_DMA_IRQHandler+0xa30>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d018      	beq.n	8006c40 <HAL_DMA_IRQHandler+0x8b8>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a6a      	ldr	r2, [pc, #424]	; (8006dbc <HAL_DMA_IRQHandler+0xa34>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d013      	beq.n	8006c40 <HAL_DMA_IRQHandler+0x8b8>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a68      	ldr	r2, [pc, #416]	; (8006dc0 <HAL_DMA_IRQHandler+0xa38>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d00e      	beq.n	8006c40 <HAL_DMA_IRQHandler+0x8b8>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a67      	ldr	r2, [pc, #412]	; (8006dc4 <HAL_DMA_IRQHandler+0xa3c>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d009      	beq.n	8006c40 <HAL_DMA_IRQHandler+0x8b8>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a65      	ldr	r2, [pc, #404]	; (8006dc8 <HAL_DMA_IRQHandler+0xa40>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d004      	beq.n	8006c40 <HAL_DMA_IRQHandler+0x8b8>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a64      	ldr	r2, [pc, #400]	; (8006dcc <HAL_DMA_IRQHandler+0xa44>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d108      	bne.n	8006c52 <HAL_DMA_IRQHandler+0x8ca>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f022 0201 	bic.w	r2, r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	e007      	b.n	8006c62 <HAL_DMA_IRQHandler+0x8da>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0201 	bic.w	r2, r2, #1
 8006c60:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	3301      	adds	r3, #1
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d307      	bcc.n	8006c7e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1f2      	bne.n	8006c62 <HAL_DMA_IRQHandler+0x8da>
 8006c7c:	e000      	b.n	8006c80 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006c7e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d004      	beq.n	8006c98 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2203      	movs	r2, #3
 8006c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006c96:	e003      	b.n	8006ca0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 8272 	beq.w	8007196 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	4798      	blx	r3
 8006cba:	e26c      	b.n	8007196 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a43      	ldr	r2, [pc, #268]	; (8006dd0 <HAL_DMA_IRQHandler+0xa48>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d022      	beq.n	8006d0c <HAL_DMA_IRQHandler+0x984>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a42      	ldr	r2, [pc, #264]	; (8006dd4 <HAL_DMA_IRQHandler+0xa4c>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d01d      	beq.n	8006d0c <HAL_DMA_IRQHandler+0x984>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a40      	ldr	r2, [pc, #256]	; (8006dd8 <HAL_DMA_IRQHandler+0xa50>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d018      	beq.n	8006d0c <HAL_DMA_IRQHandler+0x984>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a3f      	ldr	r2, [pc, #252]	; (8006ddc <HAL_DMA_IRQHandler+0xa54>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d013      	beq.n	8006d0c <HAL_DMA_IRQHandler+0x984>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a3d      	ldr	r2, [pc, #244]	; (8006de0 <HAL_DMA_IRQHandler+0xa58>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d00e      	beq.n	8006d0c <HAL_DMA_IRQHandler+0x984>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a3c      	ldr	r2, [pc, #240]	; (8006de4 <HAL_DMA_IRQHandler+0xa5c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d009      	beq.n	8006d0c <HAL_DMA_IRQHandler+0x984>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a3a      	ldr	r2, [pc, #232]	; (8006de8 <HAL_DMA_IRQHandler+0xa60>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d004      	beq.n	8006d0c <HAL_DMA_IRQHandler+0x984>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a39      	ldr	r2, [pc, #228]	; (8006dec <HAL_DMA_IRQHandler+0xa64>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d101      	bne.n	8006d10 <HAL_DMA_IRQHandler+0x988>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e000      	b.n	8006d12 <HAL_DMA_IRQHandler+0x98a>
 8006d10:	2300      	movs	r3, #0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f000 823f 	beq.w	8007196 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d24:	f003 031f 	and.w	r3, r3, #31
 8006d28:	2204      	movs	r2, #4
 8006d2a:	409a      	lsls	r2, r3
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	4013      	ands	r3, r2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 80cd 	beq.w	8006ed0 <HAL_DMA_IRQHandler+0xb48>
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f003 0304 	and.w	r3, r3, #4
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 80c7 	beq.w	8006ed0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d46:	f003 031f 	and.w	r3, r3, #31
 8006d4a:	2204      	movs	r2, #4
 8006d4c:	409a      	lsls	r2, r3
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d049      	beq.n	8006df0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d109      	bne.n	8006d7a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 8210 	beq.w	8007190 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d78:	e20a      	b.n	8007190 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f000 8206 	beq.w	8007190 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d8c:	e200      	b.n	8007190 <HAL_DMA_IRQHandler+0xe08>
 8006d8e:	bf00      	nop
 8006d90:	40020010 	.word	0x40020010
 8006d94:	40020028 	.word	0x40020028
 8006d98:	40020040 	.word	0x40020040
 8006d9c:	40020058 	.word	0x40020058
 8006da0:	40020070 	.word	0x40020070
 8006da4:	40020088 	.word	0x40020088
 8006da8:	400200a0 	.word	0x400200a0
 8006dac:	400200b8 	.word	0x400200b8
 8006db0:	40020410 	.word	0x40020410
 8006db4:	40020428 	.word	0x40020428
 8006db8:	40020440 	.word	0x40020440
 8006dbc:	40020458 	.word	0x40020458
 8006dc0:	40020470 	.word	0x40020470
 8006dc4:	40020488 	.word	0x40020488
 8006dc8:	400204a0 	.word	0x400204a0
 8006dcc:	400204b8 	.word	0x400204b8
 8006dd0:	58025408 	.word	0x58025408
 8006dd4:	5802541c 	.word	0x5802541c
 8006dd8:	58025430 	.word	0x58025430
 8006ddc:	58025444 	.word	0x58025444
 8006de0:	58025458 	.word	0x58025458
 8006de4:	5802546c 	.word	0x5802546c
 8006de8:	58025480 	.word	0x58025480
 8006dec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f003 0320 	and.w	r3, r3, #32
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d160      	bne.n	8006ebc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a7f      	ldr	r2, [pc, #508]	; (8006ffc <HAL_DMA_IRQHandler+0xc74>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d04a      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xb12>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a7d      	ldr	r2, [pc, #500]	; (8007000 <HAL_DMA_IRQHandler+0xc78>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d045      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xb12>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a7c      	ldr	r2, [pc, #496]	; (8007004 <HAL_DMA_IRQHandler+0xc7c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d040      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xb12>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a7a      	ldr	r2, [pc, #488]	; (8007008 <HAL_DMA_IRQHandler+0xc80>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d03b      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xb12>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a79      	ldr	r2, [pc, #484]	; (800700c <HAL_DMA_IRQHandler+0xc84>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d036      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xb12>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a77      	ldr	r2, [pc, #476]	; (8007010 <HAL_DMA_IRQHandler+0xc88>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d031      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xb12>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a76      	ldr	r2, [pc, #472]	; (8007014 <HAL_DMA_IRQHandler+0xc8c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d02c      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xb12>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a74      	ldr	r2, [pc, #464]	; (8007018 <HAL_DMA_IRQHandler+0xc90>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d027      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xb12>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a73      	ldr	r2, [pc, #460]	; (800701c <HAL_DMA_IRQHandler+0xc94>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d022      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xb12>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a71      	ldr	r2, [pc, #452]	; (8007020 <HAL_DMA_IRQHandler+0xc98>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d01d      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xb12>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a70      	ldr	r2, [pc, #448]	; (8007024 <HAL_DMA_IRQHandler+0xc9c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d018      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xb12>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a6e      	ldr	r2, [pc, #440]	; (8007028 <HAL_DMA_IRQHandler+0xca0>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d013      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xb12>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a6d      	ldr	r2, [pc, #436]	; (800702c <HAL_DMA_IRQHandler+0xca4>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d00e      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xb12>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a6b      	ldr	r2, [pc, #428]	; (8007030 <HAL_DMA_IRQHandler+0xca8>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d009      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xb12>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a6a      	ldr	r2, [pc, #424]	; (8007034 <HAL_DMA_IRQHandler+0xcac>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d004      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xb12>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a68      	ldr	r2, [pc, #416]	; (8007038 <HAL_DMA_IRQHandler+0xcb0>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d108      	bne.n	8006eac <HAL_DMA_IRQHandler+0xb24>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 0208 	bic.w	r2, r2, #8
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	e007      	b.n	8006ebc <HAL_DMA_IRQHandler+0xb34>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f022 0204 	bic.w	r2, r2, #4
 8006eba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 8165 	beq.w	8007190 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ece:	e15f      	b.n	8007190 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed4:	f003 031f 	and.w	r3, r3, #31
 8006ed8:	2202      	movs	r2, #2
 8006eda:	409a      	lsls	r2, r3
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	4013      	ands	r3, r2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 80c5 	beq.w	8007070 <HAL_DMA_IRQHandler+0xce8>
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 80bf 	beq.w	8007070 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef6:	f003 031f 	and.w	r3, r3, #31
 8006efa:	2202      	movs	r2, #2
 8006efc:	409a      	lsls	r2, r3
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d018      	beq.n	8006f3e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d109      	bne.n	8006f2a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 813a 	beq.w	8007194 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f28:	e134      	b.n	8007194 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 8130 	beq.w	8007194 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f3c:	e12a      	b.n	8007194 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	f003 0320 	and.w	r3, r3, #32
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f040 8089 	bne.w	800705c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a2b      	ldr	r2, [pc, #172]	; (8006ffc <HAL_DMA_IRQHandler+0xc74>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d04a      	beq.n	8006fea <HAL_DMA_IRQHandler+0xc62>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a29      	ldr	r2, [pc, #164]	; (8007000 <HAL_DMA_IRQHandler+0xc78>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d045      	beq.n	8006fea <HAL_DMA_IRQHandler+0xc62>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a28      	ldr	r2, [pc, #160]	; (8007004 <HAL_DMA_IRQHandler+0xc7c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d040      	beq.n	8006fea <HAL_DMA_IRQHandler+0xc62>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a26      	ldr	r2, [pc, #152]	; (8007008 <HAL_DMA_IRQHandler+0xc80>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d03b      	beq.n	8006fea <HAL_DMA_IRQHandler+0xc62>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a25      	ldr	r2, [pc, #148]	; (800700c <HAL_DMA_IRQHandler+0xc84>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d036      	beq.n	8006fea <HAL_DMA_IRQHandler+0xc62>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a23      	ldr	r2, [pc, #140]	; (8007010 <HAL_DMA_IRQHandler+0xc88>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d031      	beq.n	8006fea <HAL_DMA_IRQHandler+0xc62>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a22      	ldr	r2, [pc, #136]	; (8007014 <HAL_DMA_IRQHandler+0xc8c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d02c      	beq.n	8006fea <HAL_DMA_IRQHandler+0xc62>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a20      	ldr	r2, [pc, #128]	; (8007018 <HAL_DMA_IRQHandler+0xc90>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d027      	beq.n	8006fea <HAL_DMA_IRQHandler+0xc62>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a1f      	ldr	r2, [pc, #124]	; (800701c <HAL_DMA_IRQHandler+0xc94>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d022      	beq.n	8006fea <HAL_DMA_IRQHandler+0xc62>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a1d      	ldr	r2, [pc, #116]	; (8007020 <HAL_DMA_IRQHandler+0xc98>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d01d      	beq.n	8006fea <HAL_DMA_IRQHandler+0xc62>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a1c      	ldr	r2, [pc, #112]	; (8007024 <HAL_DMA_IRQHandler+0xc9c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d018      	beq.n	8006fea <HAL_DMA_IRQHandler+0xc62>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a1a      	ldr	r2, [pc, #104]	; (8007028 <HAL_DMA_IRQHandler+0xca0>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d013      	beq.n	8006fea <HAL_DMA_IRQHandler+0xc62>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a19      	ldr	r2, [pc, #100]	; (800702c <HAL_DMA_IRQHandler+0xca4>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d00e      	beq.n	8006fea <HAL_DMA_IRQHandler+0xc62>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a17      	ldr	r2, [pc, #92]	; (8007030 <HAL_DMA_IRQHandler+0xca8>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d009      	beq.n	8006fea <HAL_DMA_IRQHandler+0xc62>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a16      	ldr	r2, [pc, #88]	; (8007034 <HAL_DMA_IRQHandler+0xcac>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d004      	beq.n	8006fea <HAL_DMA_IRQHandler+0xc62>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a14      	ldr	r2, [pc, #80]	; (8007038 <HAL_DMA_IRQHandler+0xcb0>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d128      	bne.n	800703c <HAL_DMA_IRQHandler+0xcb4>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 0214 	bic.w	r2, r2, #20
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	e027      	b.n	800704c <HAL_DMA_IRQHandler+0xcc4>
 8006ffc:	40020010 	.word	0x40020010
 8007000:	40020028 	.word	0x40020028
 8007004:	40020040 	.word	0x40020040
 8007008:	40020058 	.word	0x40020058
 800700c:	40020070 	.word	0x40020070
 8007010:	40020088 	.word	0x40020088
 8007014:	400200a0 	.word	0x400200a0
 8007018:	400200b8 	.word	0x400200b8
 800701c:	40020410 	.word	0x40020410
 8007020:	40020428 	.word	0x40020428
 8007024:	40020440 	.word	0x40020440
 8007028:	40020458 	.word	0x40020458
 800702c:	40020470 	.word	0x40020470
 8007030:	40020488 	.word	0x40020488
 8007034:	400204a0 	.word	0x400204a0
 8007038:	400204b8 	.word	0x400204b8
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 020a 	bic.w	r2, r2, #10
 800704a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007060:	2b00      	cmp	r3, #0
 8007062:	f000 8097 	beq.w	8007194 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800706e:	e091      	b.n	8007194 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007074:	f003 031f 	and.w	r3, r3, #31
 8007078:	2208      	movs	r2, #8
 800707a:	409a      	lsls	r2, r3
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	4013      	ands	r3, r2
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 8088 	beq.w	8007196 <HAL_DMA_IRQHandler+0xe0e>
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	f003 0308 	and.w	r3, r3, #8
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 8082 	beq.w	8007196 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a41      	ldr	r2, [pc, #260]	; (800719c <HAL_DMA_IRQHandler+0xe14>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d04a      	beq.n	8007132 <HAL_DMA_IRQHandler+0xdaa>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a3f      	ldr	r2, [pc, #252]	; (80071a0 <HAL_DMA_IRQHandler+0xe18>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d045      	beq.n	8007132 <HAL_DMA_IRQHandler+0xdaa>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a3e      	ldr	r2, [pc, #248]	; (80071a4 <HAL_DMA_IRQHandler+0xe1c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d040      	beq.n	8007132 <HAL_DMA_IRQHandler+0xdaa>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a3c      	ldr	r2, [pc, #240]	; (80071a8 <HAL_DMA_IRQHandler+0xe20>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d03b      	beq.n	8007132 <HAL_DMA_IRQHandler+0xdaa>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a3b      	ldr	r2, [pc, #236]	; (80071ac <HAL_DMA_IRQHandler+0xe24>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d036      	beq.n	8007132 <HAL_DMA_IRQHandler+0xdaa>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a39      	ldr	r2, [pc, #228]	; (80071b0 <HAL_DMA_IRQHandler+0xe28>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d031      	beq.n	8007132 <HAL_DMA_IRQHandler+0xdaa>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a38      	ldr	r2, [pc, #224]	; (80071b4 <HAL_DMA_IRQHandler+0xe2c>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d02c      	beq.n	8007132 <HAL_DMA_IRQHandler+0xdaa>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a36      	ldr	r2, [pc, #216]	; (80071b8 <HAL_DMA_IRQHandler+0xe30>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d027      	beq.n	8007132 <HAL_DMA_IRQHandler+0xdaa>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a35      	ldr	r2, [pc, #212]	; (80071bc <HAL_DMA_IRQHandler+0xe34>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d022      	beq.n	8007132 <HAL_DMA_IRQHandler+0xdaa>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a33      	ldr	r2, [pc, #204]	; (80071c0 <HAL_DMA_IRQHandler+0xe38>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d01d      	beq.n	8007132 <HAL_DMA_IRQHandler+0xdaa>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a32      	ldr	r2, [pc, #200]	; (80071c4 <HAL_DMA_IRQHandler+0xe3c>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d018      	beq.n	8007132 <HAL_DMA_IRQHandler+0xdaa>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a30      	ldr	r2, [pc, #192]	; (80071c8 <HAL_DMA_IRQHandler+0xe40>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d013      	beq.n	8007132 <HAL_DMA_IRQHandler+0xdaa>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a2f      	ldr	r2, [pc, #188]	; (80071cc <HAL_DMA_IRQHandler+0xe44>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00e      	beq.n	8007132 <HAL_DMA_IRQHandler+0xdaa>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a2d      	ldr	r2, [pc, #180]	; (80071d0 <HAL_DMA_IRQHandler+0xe48>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d009      	beq.n	8007132 <HAL_DMA_IRQHandler+0xdaa>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a2c      	ldr	r2, [pc, #176]	; (80071d4 <HAL_DMA_IRQHandler+0xe4c>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d004      	beq.n	8007132 <HAL_DMA_IRQHandler+0xdaa>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a2a      	ldr	r2, [pc, #168]	; (80071d8 <HAL_DMA_IRQHandler+0xe50>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d108      	bne.n	8007144 <HAL_DMA_IRQHandler+0xdbc>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 021c 	bic.w	r2, r2, #28
 8007140:	601a      	str	r2, [r3, #0]
 8007142:	e007      	b.n	8007154 <HAL_DMA_IRQHandler+0xdcc>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f022 020e 	bic.w	r2, r2, #14
 8007152:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007158:	f003 031f 	and.w	r3, r3, #31
 800715c:	2201      	movs	r2, #1
 800715e:	409a      	lsls	r2, r3
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800717e:	2b00      	cmp	r3, #0
 8007180:	d009      	beq.n	8007196 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	4798      	blx	r3
 800718a:	e004      	b.n	8007196 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800718c:	bf00      	nop
 800718e:	e002      	b.n	8007196 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007190:	bf00      	nop
 8007192:	e000      	b.n	8007196 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007194:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007196:	3728      	adds	r7, #40	; 0x28
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	40020010 	.word	0x40020010
 80071a0:	40020028 	.word	0x40020028
 80071a4:	40020040 	.word	0x40020040
 80071a8:	40020058 	.word	0x40020058
 80071ac:	40020070 	.word	0x40020070
 80071b0:	40020088 	.word	0x40020088
 80071b4:	400200a0 	.word	0x400200a0
 80071b8:	400200b8 	.word	0x400200b8
 80071bc:	40020410 	.word	0x40020410
 80071c0:	40020428 	.word	0x40020428
 80071c4:	40020440 	.word	0x40020440
 80071c8:	40020458 	.word	0x40020458
 80071cc:	40020470 	.word	0x40020470
 80071d0:	40020488 	.word	0x40020488
 80071d4:	400204a0 	.word	0x400204a0
 80071d8:	400204b8 	.word	0x400204b8

080071dc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ee:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a7f      	ldr	r2, [pc, #508]	; (80073f8 <DMA_SetConfig+0x21c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d072      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a7d      	ldr	r2, [pc, #500]	; (80073fc <DMA_SetConfig+0x220>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d06d      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a7c      	ldr	r2, [pc, #496]	; (8007400 <DMA_SetConfig+0x224>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d068      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a7a      	ldr	r2, [pc, #488]	; (8007404 <DMA_SetConfig+0x228>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d063      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a79      	ldr	r2, [pc, #484]	; (8007408 <DMA_SetConfig+0x22c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d05e      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a77      	ldr	r2, [pc, #476]	; (800740c <DMA_SetConfig+0x230>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d059      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a76      	ldr	r2, [pc, #472]	; (8007410 <DMA_SetConfig+0x234>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d054      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a74      	ldr	r2, [pc, #464]	; (8007414 <DMA_SetConfig+0x238>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d04f      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a73      	ldr	r2, [pc, #460]	; (8007418 <DMA_SetConfig+0x23c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d04a      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a71      	ldr	r2, [pc, #452]	; (800741c <DMA_SetConfig+0x240>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d045      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a70      	ldr	r2, [pc, #448]	; (8007420 <DMA_SetConfig+0x244>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d040      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a6e      	ldr	r2, [pc, #440]	; (8007424 <DMA_SetConfig+0x248>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d03b      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a6d      	ldr	r2, [pc, #436]	; (8007428 <DMA_SetConfig+0x24c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d036      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a6b      	ldr	r2, [pc, #428]	; (800742c <DMA_SetConfig+0x250>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d031      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a6a      	ldr	r2, [pc, #424]	; (8007430 <DMA_SetConfig+0x254>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d02c      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a68      	ldr	r2, [pc, #416]	; (8007434 <DMA_SetConfig+0x258>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d027      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a67      	ldr	r2, [pc, #412]	; (8007438 <DMA_SetConfig+0x25c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d022      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a65      	ldr	r2, [pc, #404]	; (800743c <DMA_SetConfig+0x260>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d01d      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a64      	ldr	r2, [pc, #400]	; (8007440 <DMA_SetConfig+0x264>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d018      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a62      	ldr	r2, [pc, #392]	; (8007444 <DMA_SetConfig+0x268>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d013      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a61      	ldr	r2, [pc, #388]	; (8007448 <DMA_SetConfig+0x26c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d00e      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a5f      	ldr	r2, [pc, #380]	; (800744c <DMA_SetConfig+0x270>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d009      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a5e      	ldr	r2, [pc, #376]	; (8007450 <DMA_SetConfig+0x274>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d004      	beq.n	80072e6 <DMA_SetConfig+0x10a>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a5c      	ldr	r2, [pc, #368]	; (8007454 <DMA_SetConfig+0x278>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d101      	bne.n	80072ea <DMA_SetConfig+0x10e>
 80072e6:	2301      	movs	r3, #1
 80072e8:	e000      	b.n	80072ec <DMA_SetConfig+0x110>
 80072ea:	2300      	movs	r3, #0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00d      	beq.n	800730c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80072f8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d004      	beq.n	800730c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800730a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a39      	ldr	r2, [pc, #228]	; (80073f8 <DMA_SetConfig+0x21c>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d04a      	beq.n	80073ac <DMA_SetConfig+0x1d0>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a38      	ldr	r2, [pc, #224]	; (80073fc <DMA_SetConfig+0x220>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d045      	beq.n	80073ac <DMA_SetConfig+0x1d0>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a36      	ldr	r2, [pc, #216]	; (8007400 <DMA_SetConfig+0x224>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d040      	beq.n	80073ac <DMA_SetConfig+0x1d0>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a35      	ldr	r2, [pc, #212]	; (8007404 <DMA_SetConfig+0x228>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d03b      	beq.n	80073ac <DMA_SetConfig+0x1d0>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a33      	ldr	r2, [pc, #204]	; (8007408 <DMA_SetConfig+0x22c>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d036      	beq.n	80073ac <DMA_SetConfig+0x1d0>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a32      	ldr	r2, [pc, #200]	; (800740c <DMA_SetConfig+0x230>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d031      	beq.n	80073ac <DMA_SetConfig+0x1d0>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a30      	ldr	r2, [pc, #192]	; (8007410 <DMA_SetConfig+0x234>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d02c      	beq.n	80073ac <DMA_SetConfig+0x1d0>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a2f      	ldr	r2, [pc, #188]	; (8007414 <DMA_SetConfig+0x238>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d027      	beq.n	80073ac <DMA_SetConfig+0x1d0>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a2d      	ldr	r2, [pc, #180]	; (8007418 <DMA_SetConfig+0x23c>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d022      	beq.n	80073ac <DMA_SetConfig+0x1d0>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a2c      	ldr	r2, [pc, #176]	; (800741c <DMA_SetConfig+0x240>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d01d      	beq.n	80073ac <DMA_SetConfig+0x1d0>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a2a      	ldr	r2, [pc, #168]	; (8007420 <DMA_SetConfig+0x244>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d018      	beq.n	80073ac <DMA_SetConfig+0x1d0>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a29      	ldr	r2, [pc, #164]	; (8007424 <DMA_SetConfig+0x248>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d013      	beq.n	80073ac <DMA_SetConfig+0x1d0>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a27      	ldr	r2, [pc, #156]	; (8007428 <DMA_SetConfig+0x24c>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d00e      	beq.n	80073ac <DMA_SetConfig+0x1d0>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a26      	ldr	r2, [pc, #152]	; (800742c <DMA_SetConfig+0x250>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d009      	beq.n	80073ac <DMA_SetConfig+0x1d0>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a24      	ldr	r2, [pc, #144]	; (8007430 <DMA_SetConfig+0x254>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d004      	beq.n	80073ac <DMA_SetConfig+0x1d0>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a23      	ldr	r2, [pc, #140]	; (8007434 <DMA_SetConfig+0x258>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d101      	bne.n	80073b0 <DMA_SetConfig+0x1d4>
 80073ac:	2301      	movs	r3, #1
 80073ae:	e000      	b.n	80073b2 <DMA_SetConfig+0x1d6>
 80073b0:	2300      	movs	r3, #0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d059      	beq.n	800746a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ba:	f003 031f 	and.w	r3, r3, #31
 80073be:	223f      	movs	r2, #63	; 0x3f
 80073c0:	409a      	lsls	r2, r3
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073d4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	2b40      	cmp	r3, #64	; 0x40
 80073e4:	d138      	bne.n	8007458 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80073f6:	e086      	b.n	8007506 <DMA_SetConfig+0x32a>
 80073f8:	40020010 	.word	0x40020010
 80073fc:	40020028 	.word	0x40020028
 8007400:	40020040 	.word	0x40020040
 8007404:	40020058 	.word	0x40020058
 8007408:	40020070 	.word	0x40020070
 800740c:	40020088 	.word	0x40020088
 8007410:	400200a0 	.word	0x400200a0
 8007414:	400200b8 	.word	0x400200b8
 8007418:	40020410 	.word	0x40020410
 800741c:	40020428 	.word	0x40020428
 8007420:	40020440 	.word	0x40020440
 8007424:	40020458 	.word	0x40020458
 8007428:	40020470 	.word	0x40020470
 800742c:	40020488 	.word	0x40020488
 8007430:	400204a0 	.word	0x400204a0
 8007434:	400204b8 	.word	0x400204b8
 8007438:	58025408 	.word	0x58025408
 800743c:	5802541c 	.word	0x5802541c
 8007440:	58025430 	.word	0x58025430
 8007444:	58025444 	.word	0x58025444
 8007448:	58025458 	.word	0x58025458
 800744c:	5802546c 	.word	0x5802546c
 8007450:	58025480 	.word	0x58025480
 8007454:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	60da      	str	r2, [r3, #12]
}
 8007468:	e04d      	b.n	8007506 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a29      	ldr	r2, [pc, #164]	; (8007514 <DMA_SetConfig+0x338>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d022      	beq.n	80074ba <DMA_SetConfig+0x2de>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a27      	ldr	r2, [pc, #156]	; (8007518 <DMA_SetConfig+0x33c>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d01d      	beq.n	80074ba <DMA_SetConfig+0x2de>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a26      	ldr	r2, [pc, #152]	; (800751c <DMA_SetConfig+0x340>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d018      	beq.n	80074ba <DMA_SetConfig+0x2de>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a24      	ldr	r2, [pc, #144]	; (8007520 <DMA_SetConfig+0x344>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d013      	beq.n	80074ba <DMA_SetConfig+0x2de>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a23      	ldr	r2, [pc, #140]	; (8007524 <DMA_SetConfig+0x348>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d00e      	beq.n	80074ba <DMA_SetConfig+0x2de>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a21      	ldr	r2, [pc, #132]	; (8007528 <DMA_SetConfig+0x34c>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d009      	beq.n	80074ba <DMA_SetConfig+0x2de>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a20      	ldr	r2, [pc, #128]	; (800752c <DMA_SetConfig+0x350>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d004      	beq.n	80074ba <DMA_SetConfig+0x2de>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a1e      	ldr	r2, [pc, #120]	; (8007530 <DMA_SetConfig+0x354>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d101      	bne.n	80074be <DMA_SetConfig+0x2e2>
 80074ba:	2301      	movs	r3, #1
 80074bc:	e000      	b.n	80074c0 <DMA_SetConfig+0x2e4>
 80074be:	2300      	movs	r3, #0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d020      	beq.n	8007506 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c8:	f003 031f 	and.w	r3, r3, #31
 80074cc:	2201      	movs	r2, #1
 80074ce:	409a      	lsls	r2, r3
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	2b40      	cmp	r3, #64	; 0x40
 80074e2:	d108      	bne.n	80074f6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	60da      	str	r2, [r3, #12]
}
 80074f4:	e007      	b.n	8007506 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	60da      	str	r2, [r3, #12]
}
 8007506:	bf00      	nop
 8007508:	371c      	adds	r7, #28
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	58025408 	.word	0x58025408
 8007518:	5802541c 	.word	0x5802541c
 800751c:	58025430 	.word	0x58025430
 8007520:	58025444 	.word	0x58025444
 8007524:	58025458 	.word	0x58025458
 8007528:	5802546c 	.word	0x5802546c
 800752c:	58025480 	.word	0x58025480
 8007530:	58025494 	.word	0x58025494

08007534 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a42      	ldr	r2, [pc, #264]	; (800764c <DMA_CalcBaseAndBitshift+0x118>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d04a      	beq.n	80075dc <DMA_CalcBaseAndBitshift+0xa8>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a41      	ldr	r2, [pc, #260]	; (8007650 <DMA_CalcBaseAndBitshift+0x11c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d045      	beq.n	80075dc <DMA_CalcBaseAndBitshift+0xa8>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a3f      	ldr	r2, [pc, #252]	; (8007654 <DMA_CalcBaseAndBitshift+0x120>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d040      	beq.n	80075dc <DMA_CalcBaseAndBitshift+0xa8>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a3e      	ldr	r2, [pc, #248]	; (8007658 <DMA_CalcBaseAndBitshift+0x124>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d03b      	beq.n	80075dc <DMA_CalcBaseAndBitshift+0xa8>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a3c      	ldr	r2, [pc, #240]	; (800765c <DMA_CalcBaseAndBitshift+0x128>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d036      	beq.n	80075dc <DMA_CalcBaseAndBitshift+0xa8>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a3b      	ldr	r2, [pc, #236]	; (8007660 <DMA_CalcBaseAndBitshift+0x12c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d031      	beq.n	80075dc <DMA_CalcBaseAndBitshift+0xa8>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a39      	ldr	r2, [pc, #228]	; (8007664 <DMA_CalcBaseAndBitshift+0x130>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d02c      	beq.n	80075dc <DMA_CalcBaseAndBitshift+0xa8>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a38      	ldr	r2, [pc, #224]	; (8007668 <DMA_CalcBaseAndBitshift+0x134>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d027      	beq.n	80075dc <DMA_CalcBaseAndBitshift+0xa8>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a36      	ldr	r2, [pc, #216]	; (800766c <DMA_CalcBaseAndBitshift+0x138>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d022      	beq.n	80075dc <DMA_CalcBaseAndBitshift+0xa8>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a35      	ldr	r2, [pc, #212]	; (8007670 <DMA_CalcBaseAndBitshift+0x13c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d01d      	beq.n	80075dc <DMA_CalcBaseAndBitshift+0xa8>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a33      	ldr	r2, [pc, #204]	; (8007674 <DMA_CalcBaseAndBitshift+0x140>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d018      	beq.n	80075dc <DMA_CalcBaseAndBitshift+0xa8>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a32      	ldr	r2, [pc, #200]	; (8007678 <DMA_CalcBaseAndBitshift+0x144>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d013      	beq.n	80075dc <DMA_CalcBaseAndBitshift+0xa8>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a30      	ldr	r2, [pc, #192]	; (800767c <DMA_CalcBaseAndBitshift+0x148>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d00e      	beq.n	80075dc <DMA_CalcBaseAndBitshift+0xa8>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a2f      	ldr	r2, [pc, #188]	; (8007680 <DMA_CalcBaseAndBitshift+0x14c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d009      	beq.n	80075dc <DMA_CalcBaseAndBitshift+0xa8>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a2d      	ldr	r2, [pc, #180]	; (8007684 <DMA_CalcBaseAndBitshift+0x150>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d004      	beq.n	80075dc <DMA_CalcBaseAndBitshift+0xa8>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a2c      	ldr	r2, [pc, #176]	; (8007688 <DMA_CalcBaseAndBitshift+0x154>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d101      	bne.n	80075e0 <DMA_CalcBaseAndBitshift+0xac>
 80075dc:	2301      	movs	r3, #1
 80075de:	e000      	b.n	80075e2 <DMA_CalcBaseAndBitshift+0xae>
 80075e0:	2300      	movs	r3, #0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d024      	beq.n	8007630 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	3b10      	subs	r3, #16
 80075ee:	4a27      	ldr	r2, [pc, #156]	; (800768c <DMA_CalcBaseAndBitshift+0x158>)
 80075f0:	fba2 2303 	umull	r2, r3, r2, r3
 80075f4:	091b      	lsrs	r3, r3, #4
 80075f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f003 0307 	and.w	r3, r3, #7
 80075fe:	4a24      	ldr	r2, [pc, #144]	; (8007690 <DMA_CalcBaseAndBitshift+0x15c>)
 8007600:	5cd3      	ldrb	r3, [r2, r3]
 8007602:	461a      	mov	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2b03      	cmp	r3, #3
 800760c:	d908      	bls.n	8007620 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	461a      	mov	r2, r3
 8007614:	4b1f      	ldr	r3, [pc, #124]	; (8007694 <DMA_CalcBaseAndBitshift+0x160>)
 8007616:	4013      	ands	r3, r2
 8007618:	1d1a      	adds	r2, r3, #4
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	659a      	str	r2, [r3, #88]	; 0x58
 800761e:	e00d      	b.n	800763c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	461a      	mov	r2, r3
 8007626:	4b1b      	ldr	r3, [pc, #108]	; (8007694 <DMA_CalcBaseAndBitshift+0x160>)
 8007628:	4013      	ands	r3, r2
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	6593      	str	r3, [r2, #88]	; 0x58
 800762e:	e005      	b.n	800763c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	40020010 	.word	0x40020010
 8007650:	40020028 	.word	0x40020028
 8007654:	40020040 	.word	0x40020040
 8007658:	40020058 	.word	0x40020058
 800765c:	40020070 	.word	0x40020070
 8007660:	40020088 	.word	0x40020088
 8007664:	400200a0 	.word	0x400200a0
 8007668:	400200b8 	.word	0x400200b8
 800766c:	40020410 	.word	0x40020410
 8007670:	40020428 	.word	0x40020428
 8007674:	40020440 	.word	0x40020440
 8007678:	40020458 	.word	0x40020458
 800767c:	40020470 	.word	0x40020470
 8007680:	40020488 	.word	0x40020488
 8007684:	400204a0 	.word	0x400204a0
 8007688:	400204b8 	.word	0x400204b8
 800768c:	aaaaaaab 	.word	0xaaaaaaab
 8007690:	0800e180 	.word	0x0800e180
 8007694:	fffffc00 	.word	0xfffffc00

08007698 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d120      	bne.n	80076ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b0:	2b03      	cmp	r3, #3
 80076b2:	d858      	bhi.n	8007766 <DMA_CheckFifoParam+0xce>
 80076b4:	a201      	add	r2, pc, #4	; (adr r2, 80076bc <DMA_CheckFifoParam+0x24>)
 80076b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ba:	bf00      	nop
 80076bc:	080076cd 	.word	0x080076cd
 80076c0:	080076df 	.word	0x080076df
 80076c4:	080076cd 	.word	0x080076cd
 80076c8:	08007767 	.word	0x08007767
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d048      	beq.n	800776a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076dc:	e045      	b.n	800776a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076e6:	d142      	bne.n	800776e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076ec:	e03f      	b.n	800776e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076f6:	d123      	bne.n	8007740 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fc:	2b03      	cmp	r3, #3
 80076fe:	d838      	bhi.n	8007772 <DMA_CheckFifoParam+0xda>
 8007700:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <DMA_CheckFifoParam+0x70>)
 8007702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007706:	bf00      	nop
 8007708:	08007719 	.word	0x08007719
 800770c:	0800771f 	.word	0x0800771f
 8007710:	08007719 	.word	0x08007719
 8007714:	08007731 	.word	0x08007731
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	73fb      	strb	r3, [r7, #15]
        break;
 800771c:	e030      	b.n	8007780 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007722:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d025      	beq.n	8007776 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800772e:	e022      	b.n	8007776 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007738:	d11f      	bne.n	800777a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800773e:	e01c      	b.n	800777a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007744:	2b02      	cmp	r3, #2
 8007746:	d902      	bls.n	800774e <DMA_CheckFifoParam+0xb6>
 8007748:	2b03      	cmp	r3, #3
 800774a:	d003      	beq.n	8007754 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800774c:	e018      	b.n	8007780 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	73fb      	strb	r3, [r7, #15]
        break;
 8007752:	e015      	b.n	8007780 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00e      	beq.n	800777e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	73fb      	strb	r3, [r7, #15]
    break;
 8007764:	e00b      	b.n	800777e <DMA_CheckFifoParam+0xe6>
        break;
 8007766:	bf00      	nop
 8007768:	e00a      	b.n	8007780 <DMA_CheckFifoParam+0xe8>
        break;
 800776a:	bf00      	nop
 800776c:	e008      	b.n	8007780 <DMA_CheckFifoParam+0xe8>
        break;
 800776e:	bf00      	nop
 8007770:	e006      	b.n	8007780 <DMA_CheckFifoParam+0xe8>
        break;
 8007772:	bf00      	nop
 8007774:	e004      	b.n	8007780 <DMA_CheckFifoParam+0xe8>
        break;
 8007776:	bf00      	nop
 8007778:	e002      	b.n	8007780 <DMA_CheckFifoParam+0xe8>
        break;
 800777a:	bf00      	nop
 800777c:	e000      	b.n	8007780 <DMA_CheckFifoParam+0xe8>
    break;
 800777e:	bf00      	nop
    }
  }

  return status;
 8007780:	7bfb      	ldrb	r3, [r7, #15]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop

08007790 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a38      	ldr	r2, [pc, #224]	; (8007884 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d022      	beq.n	80077ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a36      	ldr	r2, [pc, #216]	; (8007888 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d01d      	beq.n	80077ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a35      	ldr	r2, [pc, #212]	; (800788c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d018      	beq.n	80077ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a33      	ldr	r2, [pc, #204]	; (8007890 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d013      	beq.n	80077ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a32      	ldr	r2, [pc, #200]	; (8007894 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d00e      	beq.n	80077ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a30      	ldr	r2, [pc, #192]	; (8007898 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d009      	beq.n	80077ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a2f      	ldr	r2, [pc, #188]	; (800789c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d004      	beq.n	80077ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a2d      	ldr	r2, [pc, #180]	; (80078a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d101      	bne.n	80077f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80077ee:	2301      	movs	r3, #1
 80077f0:	e000      	b.n	80077f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80077f2:	2300      	movs	r3, #0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d01a      	beq.n	800782e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	3b08      	subs	r3, #8
 8007800:	4a28      	ldr	r2, [pc, #160]	; (80078a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007802:	fba2 2303 	umull	r2, r3, r2, r3
 8007806:	091b      	lsrs	r3, r3, #4
 8007808:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	4b26      	ldr	r3, [pc, #152]	; (80078a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800780e:	4413      	add	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	461a      	mov	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a24      	ldr	r2, [pc, #144]	; (80078ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800781c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f003 031f 	and.w	r3, r3, #31
 8007824:	2201      	movs	r2, #1
 8007826:	409a      	lsls	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800782c:	e024      	b.n	8007878 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	3b10      	subs	r3, #16
 8007836:	4a1e      	ldr	r2, [pc, #120]	; (80078b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007838:	fba2 2303 	umull	r2, r3, r2, r3
 800783c:	091b      	lsrs	r3, r3, #4
 800783e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	4a1c      	ldr	r2, [pc, #112]	; (80078b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d806      	bhi.n	8007856 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	4a1b      	ldr	r2, [pc, #108]	; (80078b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d902      	bls.n	8007856 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	3308      	adds	r3, #8
 8007854:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	4b18      	ldr	r3, [pc, #96]	; (80078bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800785a:	4413      	add	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	461a      	mov	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a16      	ldr	r2, [pc, #88]	; (80078c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007868:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f003 031f 	and.w	r3, r3, #31
 8007870:	2201      	movs	r2, #1
 8007872:	409a      	lsls	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007878:	bf00      	nop
 800787a:	3714      	adds	r7, #20
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	58025408 	.word	0x58025408
 8007888:	5802541c 	.word	0x5802541c
 800788c:	58025430 	.word	0x58025430
 8007890:	58025444 	.word	0x58025444
 8007894:	58025458 	.word	0x58025458
 8007898:	5802546c 	.word	0x5802546c
 800789c:	58025480 	.word	0x58025480
 80078a0:	58025494 	.word	0x58025494
 80078a4:	cccccccd 	.word	0xcccccccd
 80078a8:	16009600 	.word	0x16009600
 80078ac:	58025880 	.word	0x58025880
 80078b0:	aaaaaaab 	.word	0xaaaaaaab
 80078b4:	400204b8 	.word	0x400204b8
 80078b8:	4002040f 	.word	0x4002040f
 80078bc:	10008200 	.word	0x10008200
 80078c0:	40020880 	.word	0x40020880

080078c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d04a      	beq.n	8007970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b08      	cmp	r3, #8
 80078de:	d847      	bhi.n	8007970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a25      	ldr	r2, [pc, #148]	; (800797c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d022      	beq.n	8007930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a24      	ldr	r2, [pc, #144]	; (8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d01d      	beq.n	8007930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a22      	ldr	r2, [pc, #136]	; (8007984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d018      	beq.n	8007930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a21      	ldr	r2, [pc, #132]	; (8007988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d013      	beq.n	8007930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a1f      	ldr	r2, [pc, #124]	; (800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d00e      	beq.n	8007930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a1e      	ldr	r2, [pc, #120]	; (8007990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d009      	beq.n	8007930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a1c      	ldr	r2, [pc, #112]	; (8007994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d004      	beq.n	8007930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a1b      	ldr	r2, [pc, #108]	; (8007998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d101      	bne.n	8007934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007930:	2301      	movs	r3, #1
 8007932:	e000      	b.n	8007936 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007934:	2300      	movs	r3, #0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00a      	beq.n	8007950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	4b17      	ldr	r3, [pc, #92]	; (800799c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800793e:	4413      	add	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	461a      	mov	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a15      	ldr	r2, [pc, #84]	; (80079a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800794c:	671a      	str	r2, [r3, #112]	; 0x70
 800794e:	e009      	b.n	8007964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	4b14      	ldr	r3, [pc, #80]	; (80079a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007954:	4413      	add	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	461a      	mov	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a11      	ldr	r2, [pc, #68]	; (80079a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007962:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	3b01      	subs	r3, #1
 8007968:	2201      	movs	r2, #1
 800796a:	409a      	lsls	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007970:	bf00      	nop
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr
 800797c:	58025408 	.word	0x58025408
 8007980:	5802541c 	.word	0x5802541c
 8007984:	58025430 	.word	0x58025430
 8007988:	58025444 	.word	0x58025444
 800798c:	58025458 	.word	0x58025458
 8007990:	5802546c 	.word	0x5802546c
 8007994:	58025480 	.word	0x58025480
 8007998:	58025494 	.word	0x58025494
 800799c:	1600963f 	.word	0x1600963f
 80079a0:	58025940 	.word	0x58025940
 80079a4:	1000823f 	.word	0x1000823f
 80079a8:	40020940 	.word	0x40020940

080079ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b089      	sub	sp, #36	; 0x24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80079b6:	2300      	movs	r3, #0
 80079b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80079ba:	4b86      	ldr	r3, [pc, #536]	; (8007bd4 <HAL_GPIO_Init+0x228>)
 80079bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80079be:	e18c      	b.n	8007cda <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	2101      	movs	r1, #1
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	fa01 f303 	lsl.w	r3, r1, r3
 80079cc:	4013      	ands	r3, r2
 80079ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 817e 	beq.w	8007cd4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	f003 0303 	and.w	r3, r3, #3
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d005      	beq.n	80079f0 <HAL_GPIO_Init+0x44>
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f003 0303 	and.w	r3, r3, #3
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d130      	bne.n	8007a52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	005b      	lsls	r3, r3, #1
 80079fa:	2203      	movs	r2, #3
 80079fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007a00:	43db      	mvns	r3, r3
 8007a02:	69ba      	ldr	r2, [r7, #24]
 8007a04:	4013      	ands	r3, r2
 8007a06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	68da      	ldr	r2, [r3, #12]
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	005b      	lsls	r3, r3, #1
 8007a10:	fa02 f303 	lsl.w	r3, r2, r3
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	69ba      	ldr	r2, [r7, #24]
 8007a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a26:	2201      	movs	r2, #1
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2e:	43db      	mvns	r3, r3
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	4013      	ands	r3, r2
 8007a34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	091b      	lsrs	r3, r3, #4
 8007a3c:	f003 0201 	and.w	r2, r3, #1
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	fa02 f303 	lsl.w	r3, r2, r3
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	69ba      	ldr	r2, [r7, #24]
 8007a50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f003 0303 	and.w	r3, r3, #3
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d017      	beq.n	8007a8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	005b      	lsls	r3, r3, #1
 8007a68:	2203      	movs	r2, #3
 8007a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6e:	43db      	mvns	r3, r3
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	4013      	ands	r3, r2
 8007a74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	689a      	ldr	r2, [r3, #8]
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	005b      	lsls	r3, r3, #1
 8007a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f003 0303 	and.w	r3, r3, #3
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d123      	bne.n	8007ae2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	08da      	lsrs	r2, r3, #3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	3208      	adds	r2, #8
 8007aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	f003 0307 	and.w	r3, r3, #7
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	220f      	movs	r2, #15
 8007ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab6:	43db      	mvns	r3, r3
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	4013      	ands	r3, r2
 8007abc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	691a      	ldr	r2, [r3, #16]
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	f003 0307 	and.w	r3, r3, #7
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ace:	69ba      	ldr	r2, [r7, #24]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	08da      	lsrs	r2, r3, #3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	3208      	adds	r2, #8
 8007adc:	69b9      	ldr	r1, [r7, #24]
 8007ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	005b      	lsls	r3, r3, #1
 8007aec:	2203      	movs	r2, #3
 8007aee:	fa02 f303 	lsl.w	r3, r2, r3
 8007af2:	43db      	mvns	r3, r3
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	4013      	ands	r3, r2
 8007af8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f003 0203 	and.w	r2, r3, #3
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	69ba      	ldr	r2, [r7, #24]
 8007b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 80d8 	beq.w	8007cd4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b24:	4b2c      	ldr	r3, [pc, #176]	; (8007bd8 <HAL_GPIO_Init+0x22c>)
 8007b26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b2a:	4a2b      	ldr	r2, [pc, #172]	; (8007bd8 <HAL_GPIO_Init+0x22c>)
 8007b2c:	f043 0302 	orr.w	r3, r3, #2
 8007b30:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007b34:	4b28      	ldr	r3, [pc, #160]	; (8007bd8 <HAL_GPIO_Init+0x22c>)
 8007b36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b3a:	f003 0302 	and.w	r3, r3, #2
 8007b3e:	60fb      	str	r3, [r7, #12]
 8007b40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b42:	4a26      	ldr	r2, [pc, #152]	; (8007bdc <HAL_GPIO_Init+0x230>)
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	089b      	lsrs	r3, r3, #2
 8007b48:	3302      	adds	r3, #2
 8007b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	f003 0303 	and.w	r3, r3, #3
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	220f      	movs	r2, #15
 8007b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5e:	43db      	mvns	r3, r3
 8007b60:	69ba      	ldr	r2, [r7, #24]
 8007b62:	4013      	ands	r3, r2
 8007b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a1d      	ldr	r2, [pc, #116]	; (8007be0 <HAL_GPIO_Init+0x234>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d04a      	beq.n	8007c04 <HAL_GPIO_Init+0x258>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a1c      	ldr	r2, [pc, #112]	; (8007be4 <HAL_GPIO_Init+0x238>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d02b      	beq.n	8007bce <HAL_GPIO_Init+0x222>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a1b      	ldr	r2, [pc, #108]	; (8007be8 <HAL_GPIO_Init+0x23c>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d025      	beq.n	8007bca <HAL_GPIO_Init+0x21e>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a1a      	ldr	r2, [pc, #104]	; (8007bec <HAL_GPIO_Init+0x240>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d01f      	beq.n	8007bc6 <HAL_GPIO_Init+0x21a>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a19      	ldr	r2, [pc, #100]	; (8007bf0 <HAL_GPIO_Init+0x244>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d019      	beq.n	8007bc2 <HAL_GPIO_Init+0x216>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a18      	ldr	r2, [pc, #96]	; (8007bf4 <HAL_GPIO_Init+0x248>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d013      	beq.n	8007bbe <HAL_GPIO_Init+0x212>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a17      	ldr	r2, [pc, #92]	; (8007bf8 <HAL_GPIO_Init+0x24c>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d00d      	beq.n	8007bba <HAL_GPIO_Init+0x20e>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a16      	ldr	r2, [pc, #88]	; (8007bfc <HAL_GPIO_Init+0x250>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d007      	beq.n	8007bb6 <HAL_GPIO_Init+0x20a>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a15      	ldr	r2, [pc, #84]	; (8007c00 <HAL_GPIO_Init+0x254>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d101      	bne.n	8007bb2 <HAL_GPIO_Init+0x206>
 8007bae:	2309      	movs	r3, #9
 8007bb0:	e029      	b.n	8007c06 <HAL_GPIO_Init+0x25a>
 8007bb2:	230a      	movs	r3, #10
 8007bb4:	e027      	b.n	8007c06 <HAL_GPIO_Init+0x25a>
 8007bb6:	2307      	movs	r3, #7
 8007bb8:	e025      	b.n	8007c06 <HAL_GPIO_Init+0x25a>
 8007bba:	2306      	movs	r3, #6
 8007bbc:	e023      	b.n	8007c06 <HAL_GPIO_Init+0x25a>
 8007bbe:	2305      	movs	r3, #5
 8007bc0:	e021      	b.n	8007c06 <HAL_GPIO_Init+0x25a>
 8007bc2:	2304      	movs	r3, #4
 8007bc4:	e01f      	b.n	8007c06 <HAL_GPIO_Init+0x25a>
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e01d      	b.n	8007c06 <HAL_GPIO_Init+0x25a>
 8007bca:	2302      	movs	r3, #2
 8007bcc:	e01b      	b.n	8007c06 <HAL_GPIO_Init+0x25a>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e019      	b.n	8007c06 <HAL_GPIO_Init+0x25a>
 8007bd2:	bf00      	nop
 8007bd4:	58000080 	.word	0x58000080
 8007bd8:	58024400 	.word	0x58024400
 8007bdc:	58000400 	.word	0x58000400
 8007be0:	58020000 	.word	0x58020000
 8007be4:	58020400 	.word	0x58020400
 8007be8:	58020800 	.word	0x58020800
 8007bec:	58020c00 	.word	0x58020c00
 8007bf0:	58021000 	.word	0x58021000
 8007bf4:	58021400 	.word	0x58021400
 8007bf8:	58021800 	.word	0x58021800
 8007bfc:	58021c00 	.word	0x58021c00
 8007c00:	58022400 	.word	0x58022400
 8007c04:	2300      	movs	r3, #0
 8007c06:	69fa      	ldr	r2, [r7, #28]
 8007c08:	f002 0203 	and.w	r2, r2, #3
 8007c0c:	0092      	lsls	r2, r2, #2
 8007c0e:	4093      	lsls	r3, r2
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c16:	4938      	ldr	r1, [pc, #224]	; (8007cf8 <HAL_GPIO_Init+0x34c>)
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	089b      	lsrs	r3, r3, #2
 8007c1c:	3302      	adds	r3, #2
 8007c1e:	69ba      	ldr	r2, [r7, #24]
 8007c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	43db      	mvns	r3, r3
 8007c30:	69ba      	ldr	r2, [r7, #24]
 8007c32:	4013      	ands	r3, r2
 8007c34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007c4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	43db      	mvns	r3, r3
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	4013      	ands	r3, r2
 8007c62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d003      	beq.n	8007c78 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007c78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	43db      	mvns	r3, r3
 8007c8a:	69ba      	ldr	r2, [r7, #24]
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	69ba      	ldr	r2, [r7, #24]
 8007ca8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	43db      	mvns	r3, r3
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d003      	beq.n	8007cce <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f47f ae6b 	bne.w	80079c0 <HAL_GPIO_Init+0x14>
  }
}
 8007cea:	bf00      	nop
 8007cec:	bf00      	nop
 8007cee:	3724      	adds	r7, #36	; 0x24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	58000400 	.word	0x58000400

08007cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	460b      	mov	r3, r1
 8007d06:	807b      	strh	r3, [r7, #2]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d0c:	787b      	ldrb	r3, [r7, #1]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d003      	beq.n	8007d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d12:	887a      	ldrh	r2, [r7, #2]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007d18:	e003      	b.n	8007d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007d1a:	887b      	ldrh	r3, [r7, #2]
 8007d1c:	041a      	lsls	r2, r3, #16
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	619a      	str	r2, [r3, #24]
}
 8007d22:	bf00      	nop
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
	...

08007d30 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007d38:	4b19      	ldr	r3, [pc, #100]	; (8007da0 <HAL_PWREx_ConfigSupply+0x70>)
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f003 0304 	and.w	r3, r3, #4
 8007d40:	2b04      	cmp	r3, #4
 8007d42:	d00a      	beq.n	8007d5a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007d44:	4b16      	ldr	r3, [pc, #88]	; (8007da0 <HAL_PWREx_ConfigSupply+0x70>)
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	f003 0307 	and.w	r3, r3, #7
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d001      	beq.n	8007d56 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e01f      	b.n	8007d96 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	e01d      	b.n	8007d96 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007d5a:	4b11      	ldr	r3, [pc, #68]	; (8007da0 <HAL_PWREx_ConfigSupply+0x70>)
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	f023 0207 	bic.w	r2, r3, #7
 8007d62:	490f      	ldr	r1, [pc, #60]	; (8007da0 <HAL_PWREx_ConfigSupply+0x70>)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007d6a:	f7fc fec9 	bl	8004b00 <HAL_GetTick>
 8007d6e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d70:	e009      	b.n	8007d86 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007d72:	f7fc fec5 	bl	8004b00 <HAL_GetTick>
 8007d76:	4602      	mov	r2, r0
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d80:	d901      	bls.n	8007d86 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e007      	b.n	8007d96 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d86:	4b06      	ldr	r3, [pc, #24]	; (8007da0 <HAL_PWREx_ConfigSupply+0x70>)
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d92:	d1ee      	bne.n	8007d72 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	58024800 	.word	0x58024800

08007da4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08c      	sub	sp, #48	; 0x30
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e39d      	b.n	80084f2 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f000 8087 	beq.w	8007ed2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dc4:	4b88      	ldr	r3, [pc, #544]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007dce:	4b86      	ldr	r3, [pc, #536]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd6:	2b10      	cmp	r3, #16
 8007dd8:	d007      	beq.n	8007dea <HAL_RCC_OscConfig+0x46>
 8007dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ddc:	2b18      	cmp	r3, #24
 8007dde:	d110      	bne.n	8007e02 <HAL_RCC_OscConfig+0x5e>
 8007de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de2:	f003 0303 	and.w	r3, r3, #3
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d10b      	bne.n	8007e02 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dea:	4b7f      	ldr	r3, [pc, #508]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d06c      	beq.n	8007ed0 <HAL_RCC_OscConfig+0x12c>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d168      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e377      	b.n	80084f2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e0a:	d106      	bne.n	8007e1a <HAL_RCC_OscConfig+0x76>
 8007e0c:	4b76      	ldr	r3, [pc, #472]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a75      	ldr	r2, [pc, #468]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e16:	6013      	str	r3, [r2, #0]
 8007e18:	e02e      	b.n	8007e78 <HAL_RCC_OscConfig+0xd4>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10c      	bne.n	8007e3c <HAL_RCC_OscConfig+0x98>
 8007e22:	4b71      	ldr	r3, [pc, #452]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a70      	ldr	r2, [pc, #448]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e2c:	6013      	str	r3, [r2, #0]
 8007e2e:	4b6e      	ldr	r3, [pc, #440]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a6d      	ldr	r2, [pc, #436]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007e34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e38:	6013      	str	r3, [r2, #0]
 8007e3a:	e01d      	b.n	8007e78 <HAL_RCC_OscConfig+0xd4>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e44:	d10c      	bne.n	8007e60 <HAL_RCC_OscConfig+0xbc>
 8007e46:	4b68      	ldr	r3, [pc, #416]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a67      	ldr	r2, [pc, #412]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e50:	6013      	str	r3, [r2, #0]
 8007e52:	4b65      	ldr	r3, [pc, #404]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a64      	ldr	r2, [pc, #400]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e5c:	6013      	str	r3, [r2, #0]
 8007e5e:	e00b      	b.n	8007e78 <HAL_RCC_OscConfig+0xd4>
 8007e60:	4b61      	ldr	r3, [pc, #388]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a60      	ldr	r2, [pc, #384]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e6a:	6013      	str	r3, [r2, #0]
 8007e6c:	4b5e      	ldr	r3, [pc, #376]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a5d      	ldr	r2, [pc, #372]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d013      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e80:	f7fc fe3e 	bl	8004b00 <HAL_GetTick>
 8007e84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e86:	e008      	b.n	8007e9a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e88:	f7fc fe3a 	bl	8004b00 <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	2b64      	cmp	r3, #100	; 0x64
 8007e94:	d901      	bls.n	8007e9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e32b      	b.n	80084f2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e9a:	4b53      	ldr	r3, [pc, #332]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d0f0      	beq.n	8007e88 <HAL_RCC_OscConfig+0xe4>
 8007ea6:	e014      	b.n	8007ed2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ea8:	f7fc fe2a 	bl	8004b00 <HAL_GetTick>
 8007eac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007eae:	e008      	b.n	8007ec2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007eb0:	f7fc fe26 	bl	8004b00 <HAL_GetTick>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	2b64      	cmp	r3, #100	; 0x64
 8007ebc:	d901      	bls.n	8007ec2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e317      	b.n	80084f2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ec2:	4b49      	ldr	r3, [pc, #292]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1f0      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x10c>
 8007ece:	e000      	b.n	8007ed2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 808c 	beq.w	8007ff8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ee0:	4b41      	ldr	r3, [pc, #260]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ee8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007eea:	4b3f      	ldr	r3, [pc, #252]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eee:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d007      	beq.n	8007f06 <HAL_RCC_OscConfig+0x162>
 8007ef6:	6a3b      	ldr	r3, [r7, #32]
 8007ef8:	2b18      	cmp	r3, #24
 8007efa:	d137      	bne.n	8007f6c <HAL_RCC_OscConfig+0x1c8>
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	f003 0303 	and.w	r3, r3, #3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d132      	bne.n	8007f6c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f06:	4b38      	ldr	r3, [pc, #224]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0304 	and.w	r3, r3, #4
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d005      	beq.n	8007f1e <HAL_RCC_OscConfig+0x17a>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d101      	bne.n	8007f1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e2e9      	b.n	80084f2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f1e:	4b32      	ldr	r3, [pc, #200]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f023 0219 	bic.w	r2, r3, #25
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	492f      	ldr	r1, [pc, #188]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007f30:	f7fc fde6 	bl	8004b00 <HAL_GetTick>
 8007f34:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f36:	e008      	b.n	8007f4a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f38:	f7fc fde2 	bl	8004b00 <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d901      	bls.n	8007f4a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e2d3      	b.n	80084f2 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f4a:	4b27      	ldr	r3, [pc, #156]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0304 	and.w	r3, r3, #4
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d0f0      	beq.n	8007f38 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f56:	4b24      	ldr	r3, [pc, #144]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	061b      	lsls	r3, r3, #24
 8007f64:	4920      	ldr	r1, [pc, #128]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f6a:	e045      	b.n	8007ff8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d026      	beq.n	8007fc2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f74:	4b1c      	ldr	r3, [pc, #112]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f023 0219 	bic.w	r2, r3, #25
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	4919      	ldr	r1, [pc, #100]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007f82:	4313      	orrs	r3, r2
 8007f84:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f86:	f7fc fdbb 	bl	8004b00 <HAL_GetTick>
 8007f8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f8c:	e008      	b.n	8007fa0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f8e:	f7fc fdb7 	bl	8004b00 <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d901      	bls.n	8007fa0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e2a8      	b.n	80084f2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fa0:	4b11      	ldr	r3, [pc, #68]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0304 	and.w	r3, r3, #4
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d0f0      	beq.n	8007f8e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fac:	4b0e      	ldr	r3, [pc, #56]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	061b      	lsls	r3, r3, #24
 8007fba:	490b      	ldr	r1, [pc, #44]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	604b      	str	r3, [r1, #4]
 8007fc0:	e01a      	b.n	8007ff8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007fc2:	4b09      	ldr	r3, [pc, #36]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a08      	ldr	r2, [pc, #32]	; (8007fe8 <HAL_RCC_OscConfig+0x244>)
 8007fc8:	f023 0301 	bic.w	r3, r3, #1
 8007fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fce:	f7fc fd97 	bl	8004b00 <HAL_GetTick>
 8007fd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007fd4:	e00a      	b.n	8007fec <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fd6:	f7fc fd93 	bl	8004b00 <HAL_GetTick>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d903      	bls.n	8007fec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e284      	b.n	80084f2 <HAL_RCC_OscConfig+0x74e>
 8007fe8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007fec:	4b96      	ldr	r3, [pc, #600]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0304 	and.w	r3, r3, #4
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1ee      	bne.n	8007fd6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0310 	and.w	r3, r3, #16
 8008000:	2b00      	cmp	r3, #0
 8008002:	d06a      	beq.n	80080da <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008004:	4b90      	ldr	r3, [pc, #576]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800800c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800800e:	4b8e      	ldr	r3, [pc, #568]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 8008010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008012:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	2b08      	cmp	r3, #8
 8008018:	d007      	beq.n	800802a <HAL_RCC_OscConfig+0x286>
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	2b18      	cmp	r3, #24
 800801e:	d11b      	bne.n	8008058 <HAL_RCC_OscConfig+0x2b4>
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f003 0303 	and.w	r3, r3, #3
 8008026:	2b01      	cmp	r3, #1
 8008028:	d116      	bne.n	8008058 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800802a:	4b87      	ldr	r3, [pc, #540]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008032:	2b00      	cmp	r3, #0
 8008034:	d005      	beq.n	8008042 <HAL_RCC_OscConfig+0x29e>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	2b80      	cmp	r3, #128	; 0x80
 800803c:	d001      	beq.n	8008042 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e257      	b.n	80084f2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008042:	4b81      	ldr	r3, [pc, #516]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	061b      	lsls	r3, r3, #24
 8008050:	497d      	ldr	r1, [pc, #500]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 8008052:	4313      	orrs	r3, r2
 8008054:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008056:	e040      	b.n	80080da <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	69db      	ldr	r3, [r3, #28]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d023      	beq.n	80080a8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008060:	4b79      	ldr	r3, [pc, #484]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a78      	ldr	r2, [pc, #480]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 8008066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800806a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800806c:	f7fc fd48 	bl	8004b00 <HAL_GetTick>
 8008070:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008072:	e008      	b.n	8008086 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008074:	f7fc fd44 	bl	8004b00 <HAL_GetTick>
 8008078:	4602      	mov	r2, r0
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	2b02      	cmp	r3, #2
 8008080:	d901      	bls.n	8008086 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e235      	b.n	80084f2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008086:	4b70      	ldr	r3, [pc, #448]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0f0      	beq.n	8008074 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008092:	4b6d      	ldr	r3, [pc, #436]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	061b      	lsls	r3, r3, #24
 80080a0:	4969      	ldr	r1, [pc, #420]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	60cb      	str	r3, [r1, #12]
 80080a6:	e018      	b.n	80080da <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80080a8:	4b67      	ldr	r3, [pc, #412]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a66      	ldr	r2, [pc, #408]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 80080ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b4:	f7fc fd24 	bl	8004b00 <HAL_GetTick>
 80080b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080ba:	e008      	b.n	80080ce <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80080bc:	f7fc fd20 	bl	8004b00 <HAL_GetTick>
 80080c0:	4602      	mov	r2, r0
 80080c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d901      	bls.n	80080ce <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e211      	b.n	80084f2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080ce:	4b5e      	ldr	r3, [pc, #376]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1f0      	bne.n	80080bc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 0308 	and.w	r3, r3, #8
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d036      	beq.n	8008154 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d019      	beq.n	8008122 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080ee:	4b56      	ldr	r3, [pc, #344]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 80080f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080f2:	4a55      	ldr	r2, [pc, #340]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 80080f4:	f043 0301 	orr.w	r3, r3, #1
 80080f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080fa:	f7fc fd01 	bl	8004b00 <HAL_GetTick>
 80080fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008100:	e008      	b.n	8008114 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008102:	f7fc fcfd 	bl	8004b00 <HAL_GetTick>
 8008106:	4602      	mov	r2, r0
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	2b02      	cmp	r3, #2
 800810e:	d901      	bls.n	8008114 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e1ee      	b.n	80084f2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008114:	4b4c      	ldr	r3, [pc, #304]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 8008116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008118:	f003 0302 	and.w	r3, r3, #2
 800811c:	2b00      	cmp	r3, #0
 800811e:	d0f0      	beq.n	8008102 <HAL_RCC_OscConfig+0x35e>
 8008120:	e018      	b.n	8008154 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008122:	4b49      	ldr	r3, [pc, #292]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 8008124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008126:	4a48      	ldr	r2, [pc, #288]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 8008128:	f023 0301 	bic.w	r3, r3, #1
 800812c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800812e:	f7fc fce7 	bl	8004b00 <HAL_GetTick>
 8008132:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008134:	e008      	b.n	8008148 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008136:	f7fc fce3 	bl	8004b00 <HAL_GetTick>
 800813a:	4602      	mov	r2, r0
 800813c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	2b02      	cmp	r3, #2
 8008142:	d901      	bls.n	8008148 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008144:	2303      	movs	r3, #3
 8008146:	e1d4      	b.n	80084f2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008148:	4b3f      	ldr	r3, [pc, #252]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 800814a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800814c:	f003 0302 	and.w	r3, r3, #2
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1f0      	bne.n	8008136 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 0320 	and.w	r3, r3, #32
 800815c:	2b00      	cmp	r3, #0
 800815e:	d036      	beq.n	80081ce <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d019      	beq.n	800819c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008168:	4b37      	ldr	r3, [pc, #220]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a36      	ldr	r2, [pc, #216]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 800816e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008172:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008174:	f7fc fcc4 	bl	8004b00 <HAL_GetTick>
 8008178:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800817a:	e008      	b.n	800818e <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800817c:	f7fc fcc0 	bl	8004b00 <HAL_GetTick>
 8008180:	4602      	mov	r2, r0
 8008182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008184:	1ad3      	subs	r3, r2, r3
 8008186:	2b02      	cmp	r3, #2
 8008188:	d901      	bls.n	800818e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	e1b1      	b.n	80084f2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800818e:	4b2e      	ldr	r3, [pc, #184]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d0f0      	beq.n	800817c <HAL_RCC_OscConfig+0x3d8>
 800819a:	e018      	b.n	80081ce <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800819c:	4b2a      	ldr	r3, [pc, #168]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a29      	ldr	r2, [pc, #164]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 80081a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081a8:	f7fc fcaa 	bl	8004b00 <HAL_GetTick>
 80081ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081ae:	e008      	b.n	80081c2 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80081b0:	f7fc fca6 	bl	8004b00 <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d901      	bls.n	80081c2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e197      	b.n	80084f2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081c2:	4b21      	ldr	r3, [pc, #132]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1f0      	bne.n	80081b0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0304 	and.w	r3, r3, #4
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f000 8086 	beq.w	80082e8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80081dc:	4b1b      	ldr	r3, [pc, #108]	; (800824c <HAL_RCC_OscConfig+0x4a8>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a1a      	ldr	r2, [pc, #104]	; (800824c <HAL_RCC_OscConfig+0x4a8>)
 80081e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081e8:	f7fc fc8a 	bl	8004b00 <HAL_GetTick>
 80081ec:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081ee:	e008      	b.n	8008202 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80081f0:	f7fc fc86 	bl	8004b00 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	2b64      	cmp	r3, #100	; 0x64
 80081fc:	d901      	bls.n	8008202 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e177      	b.n	80084f2 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008202:	4b12      	ldr	r3, [pc, #72]	; (800824c <HAL_RCC_OscConfig+0x4a8>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0f0      	beq.n	80081f0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d106      	bne.n	8008224 <HAL_RCC_OscConfig+0x480>
 8008216:	4b0c      	ldr	r3, [pc, #48]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 8008218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800821a:	4a0b      	ldr	r2, [pc, #44]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 800821c:	f043 0301 	orr.w	r3, r3, #1
 8008220:	6713      	str	r3, [r2, #112]	; 0x70
 8008222:	e032      	b.n	800828a <HAL_RCC_OscConfig+0x4e6>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d111      	bne.n	8008250 <HAL_RCC_OscConfig+0x4ac>
 800822c:	4b06      	ldr	r3, [pc, #24]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 800822e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008230:	4a05      	ldr	r2, [pc, #20]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 8008232:	f023 0301 	bic.w	r3, r3, #1
 8008236:	6713      	str	r3, [r2, #112]	; 0x70
 8008238:	4b03      	ldr	r3, [pc, #12]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 800823a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800823c:	4a02      	ldr	r2, [pc, #8]	; (8008248 <HAL_RCC_OscConfig+0x4a4>)
 800823e:	f023 0304 	bic.w	r3, r3, #4
 8008242:	6713      	str	r3, [r2, #112]	; 0x70
 8008244:	e021      	b.n	800828a <HAL_RCC_OscConfig+0x4e6>
 8008246:	bf00      	nop
 8008248:	58024400 	.word	0x58024400
 800824c:	58024800 	.word	0x58024800
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	2b05      	cmp	r3, #5
 8008256:	d10c      	bne.n	8008272 <HAL_RCC_OscConfig+0x4ce>
 8008258:	4b83      	ldr	r3, [pc, #524]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 800825a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800825c:	4a82      	ldr	r2, [pc, #520]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 800825e:	f043 0304 	orr.w	r3, r3, #4
 8008262:	6713      	str	r3, [r2, #112]	; 0x70
 8008264:	4b80      	ldr	r3, [pc, #512]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 8008266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008268:	4a7f      	ldr	r2, [pc, #508]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 800826a:	f043 0301 	orr.w	r3, r3, #1
 800826e:	6713      	str	r3, [r2, #112]	; 0x70
 8008270:	e00b      	b.n	800828a <HAL_RCC_OscConfig+0x4e6>
 8008272:	4b7d      	ldr	r3, [pc, #500]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 8008274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008276:	4a7c      	ldr	r2, [pc, #496]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 8008278:	f023 0301 	bic.w	r3, r3, #1
 800827c:	6713      	str	r3, [r2, #112]	; 0x70
 800827e:	4b7a      	ldr	r3, [pc, #488]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 8008280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008282:	4a79      	ldr	r2, [pc, #484]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 8008284:	f023 0304 	bic.w	r3, r3, #4
 8008288:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d015      	beq.n	80082be <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008292:	f7fc fc35 	bl	8004b00 <HAL_GetTick>
 8008296:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008298:	e00a      	b.n	80082b0 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800829a:	f7fc fc31 	bl	8004b00 <HAL_GetTick>
 800829e:	4602      	mov	r2, r0
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d901      	bls.n	80082b0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e120      	b.n	80084f2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082b0:	4b6d      	ldr	r3, [pc, #436]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 80082b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082b4:	f003 0302 	and.w	r3, r3, #2
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d0ee      	beq.n	800829a <HAL_RCC_OscConfig+0x4f6>
 80082bc:	e014      	b.n	80082e8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082be:	f7fc fc1f 	bl	8004b00 <HAL_GetTick>
 80082c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082c4:	e00a      	b.n	80082dc <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082c6:	f7fc fc1b 	bl	8004b00 <HAL_GetTick>
 80082ca:	4602      	mov	r2, r0
 80082cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d901      	bls.n	80082dc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	e10a      	b.n	80084f2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082dc:	4b62      	ldr	r3, [pc, #392]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 80082de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e0:	f003 0302 	and.w	r3, r3, #2
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1ee      	bne.n	80082c6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 80ff 	beq.w	80084f0 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80082f2:	4b5d      	ldr	r3, [pc, #372]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082fa:	2b18      	cmp	r3, #24
 80082fc:	f000 80ba 	beq.w	8008474 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008304:	2b02      	cmp	r3, #2
 8008306:	f040 8095 	bne.w	8008434 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800830a:	4b57      	ldr	r3, [pc, #348]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a56      	ldr	r2, [pc, #344]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 8008310:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008316:	f7fc fbf3 	bl	8004b00 <HAL_GetTick>
 800831a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800831c:	e008      	b.n	8008330 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800831e:	f7fc fbef 	bl	8004b00 <HAL_GetTick>
 8008322:	4602      	mov	r2, r0
 8008324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	2b02      	cmp	r3, #2
 800832a:	d901      	bls.n	8008330 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e0e0      	b.n	80084f2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008330:	4b4d      	ldr	r3, [pc, #308]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1f0      	bne.n	800831e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800833c:	4b4a      	ldr	r3, [pc, #296]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 800833e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008340:	4b4a      	ldr	r3, [pc, #296]	; (800846c <HAL_RCC_OscConfig+0x6c8>)
 8008342:	4013      	ands	r3, r2
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800834c:	0112      	lsls	r2, r2, #4
 800834e:	430a      	orrs	r2, r1
 8008350:	4945      	ldr	r1, [pc, #276]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 8008352:	4313      	orrs	r3, r2
 8008354:	628b      	str	r3, [r1, #40]	; 0x28
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835a:	3b01      	subs	r3, #1
 800835c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008364:	3b01      	subs	r3, #1
 8008366:	025b      	lsls	r3, r3, #9
 8008368:	b29b      	uxth	r3, r3
 800836a:	431a      	orrs	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008370:	3b01      	subs	r3, #1
 8008372:	041b      	lsls	r3, r3, #16
 8008374:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008378:	431a      	orrs	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800837e:	3b01      	subs	r3, #1
 8008380:	061b      	lsls	r3, r3, #24
 8008382:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008386:	4938      	ldr	r1, [pc, #224]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 8008388:	4313      	orrs	r3, r2
 800838a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800838c:	4b36      	ldr	r3, [pc, #216]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 800838e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008390:	4a35      	ldr	r2, [pc, #212]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 8008392:	f023 0301 	bic.w	r3, r3, #1
 8008396:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008398:	4b33      	ldr	r3, [pc, #204]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 800839a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800839c:	4b34      	ldr	r3, [pc, #208]	; (8008470 <HAL_RCC_OscConfig+0x6cc>)
 800839e:	4013      	ands	r3, r2
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80083a4:	00d2      	lsls	r2, r2, #3
 80083a6:	4930      	ldr	r1, [pc, #192]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 80083a8:	4313      	orrs	r3, r2
 80083aa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80083ac:	4b2e      	ldr	r3, [pc, #184]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 80083ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b0:	f023 020c 	bic.w	r2, r3, #12
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b8:	492b      	ldr	r1, [pc, #172]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80083be:	4b2a      	ldr	r3, [pc, #168]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 80083c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c2:	f023 0202 	bic.w	r2, r3, #2
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ca:	4927      	ldr	r1, [pc, #156]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 80083cc:	4313      	orrs	r3, r2
 80083ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80083d0:	4b25      	ldr	r3, [pc, #148]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 80083d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d4:	4a24      	ldr	r2, [pc, #144]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 80083d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083dc:	4b22      	ldr	r3, [pc, #136]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 80083de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e0:	4a21      	ldr	r2, [pc, #132]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 80083e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80083e8:	4b1f      	ldr	r3, [pc, #124]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 80083ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ec:	4a1e      	ldr	r2, [pc, #120]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 80083ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80083f4:	4b1c      	ldr	r3, [pc, #112]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 80083f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f8:	4a1b      	ldr	r2, [pc, #108]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 80083fa:	f043 0301 	orr.w	r3, r3, #1
 80083fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008400:	4b19      	ldr	r3, [pc, #100]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a18      	ldr	r2, [pc, #96]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 8008406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800840a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800840c:	f7fc fb78 	bl	8004b00 <HAL_GetTick>
 8008410:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008412:	e008      	b.n	8008426 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008414:	f7fc fb74 	bl	8004b00 <HAL_GetTick>
 8008418:	4602      	mov	r2, r0
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	2b02      	cmp	r3, #2
 8008420:	d901      	bls.n	8008426 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e065      	b.n	80084f2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008426:	4b10      	ldr	r3, [pc, #64]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800842e:	2b00      	cmp	r3, #0
 8008430:	d0f0      	beq.n	8008414 <HAL_RCC_OscConfig+0x670>
 8008432:	e05d      	b.n	80084f0 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008434:	4b0c      	ldr	r3, [pc, #48]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a0b      	ldr	r2, [pc, #44]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 800843a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800843e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008440:	f7fc fb5e 	bl	8004b00 <HAL_GetTick>
 8008444:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008446:	e008      	b.n	800845a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008448:	f7fc fb5a 	bl	8004b00 <HAL_GetTick>
 800844c:	4602      	mov	r2, r0
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	2b02      	cmp	r3, #2
 8008454:	d901      	bls.n	800845a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e04b      	b.n	80084f2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800845a:	4b03      	ldr	r3, [pc, #12]	; (8008468 <HAL_RCC_OscConfig+0x6c4>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1f0      	bne.n	8008448 <HAL_RCC_OscConfig+0x6a4>
 8008466:	e043      	b.n	80084f0 <HAL_RCC_OscConfig+0x74c>
 8008468:	58024400 	.word	0x58024400
 800846c:	fffffc0c 	.word	0xfffffc0c
 8008470:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008474:	4b21      	ldr	r3, [pc, #132]	; (80084fc <HAL_RCC_OscConfig+0x758>)
 8008476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008478:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800847a:	4b20      	ldr	r3, [pc, #128]	; (80084fc <HAL_RCC_OscConfig+0x758>)
 800847c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008484:	2b01      	cmp	r3, #1
 8008486:	d031      	beq.n	80084ec <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	f003 0203 	and.w	r2, r3, #3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008492:	429a      	cmp	r2, r3
 8008494:	d12a      	bne.n	80084ec <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	091b      	lsrs	r3, r3, #4
 800849a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d122      	bne.n	80084ec <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d11a      	bne.n	80084ec <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	0a5b      	lsrs	r3, r3, #9
 80084ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d111      	bne.n	80084ec <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	0c1b      	lsrs	r3, r3, #16
 80084cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d108      	bne.n	80084ec <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	0e1b      	lsrs	r3, r3, #24
 80084de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d001      	beq.n	80084f0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	e000      	b.n	80084f2 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3730      	adds	r7, #48	; 0x30
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	58024400 	.word	0x58024400

08008500 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	e19c      	b.n	800884e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008514:	4b8a      	ldr	r3, [pc, #552]	; (8008740 <HAL_RCC_ClockConfig+0x240>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 030f 	and.w	r3, r3, #15
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	429a      	cmp	r2, r3
 8008520:	d910      	bls.n	8008544 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008522:	4b87      	ldr	r3, [pc, #540]	; (8008740 <HAL_RCC_ClockConfig+0x240>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f023 020f 	bic.w	r2, r3, #15
 800852a:	4985      	ldr	r1, [pc, #532]	; (8008740 <HAL_RCC_ClockConfig+0x240>)
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	4313      	orrs	r3, r2
 8008530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008532:	4b83      	ldr	r3, [pc, #524]	; (8008740 <HAL_RCC_ClockConfig+0x240>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 030f 	and.w	r3, r3, #15
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	429a      	cmp	r2, r3
 800853e:	d001      	beq.n	8008544 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e184      	b.n	800884e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 0304 	and.w	r3, r3, #4
 800854c:	2b00      	cmp	r3, #0
 800854e:	d010      	beq.n	8008572 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	691a      	ldr	r2, [r3, #16]
 8008554:	4b7b      	ldr	r3, [pc, #492]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800855c:	429a      	cmp	r2, r3
 800855e:	d908      	bls.n	8008572 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008560:	4b78      	ldr	r3, [pc, #480]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 8008562:	699b      	ldr	r3, [r3, #24]
 8008564:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	4975      	ldr	r1, [pc, #468]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 800856e:	4313      	orrs	r3, r2
 8008570:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0308 	and.w	r3, r3, #8
 800857a:	2b00      	cmp	r3, #0
 800857c:	d010      	beq.n	80085a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	695a      	ldr	r2, [r3, #20]
 8008582:	4b70      	ldr	r3, [pc, #448]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 8008584:	69db      	ldr	r3, [r3, #28]
 8008586:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800858a:	429a      	cmp	r2, r3
 800858c:	d908      	bls.n	80085a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800858e:	4b6d      	ldr	r3, [pc, #436]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 8008590:	69db      	ldr	r3, [r3, #28]
 8008592:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	496a      	ldr	r1, [pc, #424]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 800859c:	4313      	orrs	r3, r2
 800859e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 0310 	and.w	r3, r3, #16
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d010      	beq.n	80085ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	699a      	ldr	r2, [r3, #24]
 80085b0:	4b64      	ldr	r3, [pc, #400]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 80085b2:	69db      	ldr	r3, [r3, #28]
 80085b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d908      	bls.n	80085ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80085bc:	4b61      	ldr	r3, [pc, #388]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 80085be:	69db      	ldr	r3, [r3, #28]
 80085c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	495e      	ldr	r1, [pc, #376]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 80085ca:	4313      	orrs	r3, r2
 80085cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 0320 	and.w	r3, r3, #32
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d010      	beq.n	80085fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	69da      	ldr	r2, [r3, #28]
 80085de:	4b59      	ldr	r3, [pc, #356]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 80085e0:	6a1b      	ldr	r3, [r3, #32]
 80085e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d908      	bls.n	80085fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80085ea:	4b56      	ldr	r3, [pc, #344]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	69db      	ldr	r3, [r3, #28]
 80085f6:	4953      	ldr	r1, [pc, #332]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0302 	and.w	r3, r3, #2
 8008604:	2b00      	cmp	r3, #0
 8008606:	d010      	beq.n	800862a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	68da      	ldr	r2, [r3, #12]
 800860c:	4b4d      	ldr	r3, [pc, #308]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	f003 030f 	and.w	r3, r3, #15
 8008614:	429a      	cmp	r2, r3
 8008616:	d908      	bls.n	800862a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008618:	4b4a      	ldr	r3, [pc, #296]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	f023 020f 	bic.w	r2, r3, #15
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	4947      	ldr	r1, [pc, #284]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 8008626:	4313      	orrs	r3, r2
 8008628:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	2b00      	cmp	r3, #0
 8008634:	d055      	beq.n	80086e2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008636:	4b43      	ldr	r3, [pc, #268]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	4940      	ldr	r1, [pc, #256]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 8008644:	4313      	orrs	r3, r2
 8008646:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	2b02      	cmp	r3, #2
 800864e:	d107      	bne.n	8008660 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008650:	4b3c      	ldr	r3, [pc, #240]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d121      	bne.n	80086a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e0f6      	b.n	800884e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	2b03      	cmp	r3, #3
 8008666:	d107      	bne.n	8008678 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008668:	4b36      	ldr	r3, [pc, #216]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d115      	bne.n	80086a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	e0ea      	b.n	800884e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d107      	bne.n	8008690 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008680:	4b30      	ldr	r3, [pc, #192]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008688:	2b00      	cmp	r3, #0
 800868a:	d109      	bne.n	80086a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	e0de      	b.n	800884e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008690:	4b2c      	ldr	r3, [pc, #176]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0304 	and.w	r3, r3, #4
 8008698:	2b00      	cmp	r3, #0
 800869a:	d101      	bne.n	80086a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e0d6      	b.n	800884e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086a0:	4b28      	ldr	r3, [pc, #160]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	f023 0207 	bic.w	r2, r3, #7
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	4925      	ldr	r1, [pc, #148]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 80086ae:	4313      	orrs	r3, r2
 80086b0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086b2:	f7fc fa25 	bl	8004b00 <HAL_GetTick>
 80086b6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086b8:	e00a      	b.n	80086d0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086ba:	f7fc fa21 	bl	8004b00 <HAL_GetTick>
 80086be:	4602      	mov	r2, r0
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d901      	bls.n	80086d0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e0be      	b.n	800884e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086d0:	4b1c      	ldr	r3, [pc, #112]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	00db      	lsls	r3, r3, #3
 80086de:	429a      	cmp	r2, r3
 80086e0:	d1eb      	bne.n	80086ba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f003 0302 	and.w	r3, r3, #2
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d010      	beq.n	8008710 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	68da      	ldr	r2, [r3, #12]
 80086f2:	4b14      	ldr	r3, [pc, #80]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	f003 030f 	and.w	r3, r3, #15
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d208      	bcs.n	8008710 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086fe:	4b11      	ldr	r3, [pc, #68]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	f023 020f 	bic.w	r2, r3, #15
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	490e      	ldr	r1, [pc, #56]	; (8008744 <HAL_RCC_ClockConfig+0x244>)
 800870c:	4313      	orrs	r3, r2
 800870e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008710:	4b0b      	ldr	r3, [pc, #44]	; (8008740 <HAL_RCC_ClockConfig+0x240>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 030f 	and.w	r3, r3, #15
 8008718:	683a      	ldr	r2, [r7, #0]
 800871a:	429a      	cmp	r2, r3
 800871c:	d214      	bcs.n	8008748 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800871e:	4b08      	ldr	r3, [pc, #32]	; (8008740 <HAL_RCC_ClockConfig+0x240>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f023 020f 	bic.w	r2, r3, #15
 8008726:	4906      	ldr	r1, [pc, #24]	; (8008740 <HAL_RCC_ClockConfig+0x240>)
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	4313      	orrs	r3, r2
 800872c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800872e:	4b04      	ldr	r3, [pc, #16]	; (8008740 <HAL_RCC_ClockConfig+0x240>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 030f 	and.w	r3, r3, #15
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	429a      	cmp	r2, r3
 800873a:	d005      	beq.n	8008748 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e086      	b.n	800884e <HAL_RCC_ClockConfig+0x34e>
 8008740:	52002000 	.word	0x52002000
 8008744:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 0304 	and.w	r3, r3, #4
 8008750:	2b00      	cmp	r3, #0
 8008752:	d010      	beq.n	8008776 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	691a      	ldr	r2, [r3, #16]
 8008758:	4b3f      	ldr	r3, [pc, #252]	; (8008858 <HAL_RCC_ClockConfig+0x358>)
 800875a:	699b      	ldr	r3, [r3, #24]
 800875c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008760:	429a      	cmp	r2, r3
 8008762:	d208      	bcs.n	8008776 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008764:	4b3c      	ldr	r3, [pc, #240]	; (8008858 <HAL_RCC_ClockConfig+0x358>)
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	4939      	ldr	r1, [pc, #228]	; (8008858 <HAL_RCC_ClockConfig+0x358>)
 8008772:	4313      	orrs	r3, r2
 8008774:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0308 	and.w	r3, r3, #8
 800877e:	2b00      	cmp	r3, #0
 8008780:	d010      	beq.n	80087a4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	695a      	ldr	r2, [r3, #20]
 8008786:	4b34      	ldr	r3, [pc, #208]	; (8008858 <HAL_RCC_ClockConfig+0x358>)
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800878e:	429a      	cmp	r2, r3
 8008790:	d208      	bcs.n	80087a4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008792:	4b31      	ldr	r3, [pc, #196]	; (8008858 <HAL_RCC_ClockConfig+0x358>)
 8008794:	69db      	ldr	r3, [r3, #28]
 8008796:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	492e      	ldr	r1, [pc, #184]	; (8008858 <HAL_RCC_ClockConfig+0x358>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 0310 	and.w	r3, r3, #16
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d010      	beq.n	80087d2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	699a      	ldr	r2, [r3, #24]
 80087b4:	4b28      	ldr	r3, [pc, #160]	; (8008858 <HAL_RCC_ClockConfig+0x358>)
 80087b6:	69db      	ldr	r3, [r3, #28]
 80087b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087bc:	429a      	cmp	r2, r3
 80087be:	d208      	bcs.n	80087d2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80087c0:	4b25      	ldr	r3, [pc, #148]	; (8008858 <HAL_RCC_ClockConfig+0x358>)
 80087c2:	69db      	ldr	r3, [r3, #28]
 80087c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	4922      	ldr	r1, [pc, #136]	; (8008858 <HAL_RCC_ClockConfig+0x358>)
 80087ce:	4313      	orrs	r3, r2
 80087d0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0320 	and.w	r3, r3, #32
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d010      	beq.n	8008800 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	69da      	ldr	r2, [r3, #28]
 80087e2:	4b1d      	ldr	r3, [pc, #116]	; (8008858 <HAL_RCC_ClockConfig+0x358>)
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d208      	bcs.n	8008800 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80087ee:	4b1a      	ldr	r3, [pc, #104]	; (8008858 <HAL_RCC_ClockConfig+0x358>)
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	69db      	ldr	r3, [r3, #28]
 80087fa:	4917      	ldr	r1, [pc, #92]	; (8008858 <HAL_RCC_ClockConfig+0x358>)
 80087fc:	4313      	orrs	r3, r2
 80087fe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008800:	f000 f834 	bl	800886c <HAL_RCC_GetSysClockFreq>
 8008804:	4602      	mov	r2, r0
 8008806:	4b14      	ldr	r3, [pc, #80]	; (8008858 <HAL_RCC_ClockConfig+0x358>)
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	0a1b      	lsrs	r3, r3, #8
 800880c:	f003 030f 	and.w	r3, r3, #15
 8008810:	4912      	ldr	r1, [pc, #72]	; (800885c <HAL_RCC_ClockConfig+0x35c>)
 8008812:	5ccb      	ldrb	r3, [r1, r3]
 8008814:	f003 031f 	and.w	r3, r3, #31
 8008818:	fa22 f303 	lsr.w	r3, r2, r3
 800881c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800881e:	4b0e      	ldr	r3, [pc, #56]	; (8008858 <HAL_RCC_ClockConfig+0x358>)
 8008820:	699b      	ldr	r3, [r3, #24]
 8008822:	f003 030f 	and.w	r3, r3, #15
 8008826:	4a0d      	ldr	r2, [pc, #52]	; (800885c <HAL_RCC_ClockConfig+0x35c>)
 8008828:	5cd3      	ldrb	r3, [r2, r3]
 800882a:	f003 031f 	and.w	r3, r3, #31
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	fa22 f303 	lsr.w	r3, r2, r3
 8008834:	4a0a      	ldr	r2, [pc, #40]	; (8008860 <HAL_RCC_ClockConfig+0x360>)
 8008836:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008838:	4a0a      	ldr	r2, [pc, #40]	; (8008864 <HAL_RCC_ClockConfig+0x364>)
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800883e:	4b0a      	ldr	r3, [pc, #40]	; (8008868 <HAL_RCC_ClockConfig+0x368>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4618      	mov	r0, r3
 8008844:	f7fc f912 	bl	8004a6c <HAL_InitTick>
 8008848:	4603      	mov	r3, r0
 800884a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800884c:	7bfb      	ldrb	r3, [r7, #15]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3718      	adds	r7, #24
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	58024400 	.word	0x58024400
 800885c:	0800e170 	.word	0x0800e170
 8008860:	24000004 	.word	0x24000004
 8008864:	24000000 	.word	0x24000000
 8008868:	24000008 	.word	0x24000008

0800886c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800886c:	b480      	push	{r7}
 800886e:	b089      	sub	sp, #36	; 0x24
 8008870:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008872:	4bb3      	ldr	r3, [pc, #716]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800887a:	2b18      	cmp	r3, #24
 800887c:	f200 8155 	bhi.w	8008b2a <HAL_RCC_GetSysClockFreq+0x2be>
 8008880:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008886:	bf00      	nop
 8008888:	080088ed 	.word	0x080088ed
 800888c:	08008b2b 	.word	0x08008b2b
 8008890:	08008b2b 	.word	0x08008b2b
 8008894:	08008b2b 	.word	0x08008b2b
 8008898:	08008b2b 	.word	0x08008b2b
 800889c:	08008b2b 	.word	0x08008b2b
 80088a0:	08008b2b 	.word	0x08008b2b
 80088a4:	08008b2b 	.word	0x08008b2b
 80088a8:	08008913 	.word	0x08008913
 80088ac:	08008b2b 	.word	0x08008b2b
 80088b0:	08008b2b 	.word	0x08008b2b
 80088b4:	08008b2b 	.word	0x08008b2b
 80088b8:	08008b2b 	.word	0x08008b2b
 80088bc:	08008b2b 	.word	0x08008b2b
 80088c0:	08008b2b 	.word	0x08008b2b
 80088c4:	08008b2b 	.word	0x08008b2b
 80088c8:	08008919 	.word	0x08008919
 80088cc:	08008b2b 	.word	0x08008b2b
 80088d0:	08008b2b 	.word	0x08008b2b
 80088d4:	08008b2b 	.word	0x08008b2b
 80088d8:	08008b2b 	.word	0x08008b2b
 80088dc:	08008b2b 	.word	0x08008b2b
 80088e0:	08008b2b 	.word	0x08008b2b
 80088e4:	08008b2b 	.word	0x08008b2b
 80088e8:	0800891f 	.word	0x0800891f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088ec:	4b94      	ldr	r3, [pc, #592]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0320 	and.w	r3, r3, #32
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d009      	beq.n	800890c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088f8:	4b91      	ldr	r3, [pc, #580]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	08db      	lsrs	r3, r3, #3
 80088fe:	f003 0303 	and.w	r3, r3, #3
 8008902:	4a90      	ldr	r2, [pc, #576]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008904:	fa22 f303 	lsr.w	r3, r2, r3
 8008908:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800890a:	e111      	b.n	8008b30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800890c:	4b8d      	ldr	r3, [pc, #564]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800890e:	61bb      	str	r3, [r7, #24]
    break;
 8008910:	e10e      	b.n	8008b30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008912:	4b8d      	ldr	r3, [pc, #564]	; (8008b48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008914:	61bb      	str	r3, [r7, #24]
    break;
 8008916:	e10b      	b.n	8008b30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008918:	4b8c      	ldr	r3, [pc, #560]	; (8008b4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800891a:	61bb      	str	r3, [r7, #24]
    break;
 800891c:	e108      	b.n	8008b30 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800891e:	4b88      	ldr	r3, [pc, #544]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008922:	f003 0303 	and.w	r3, r3, #3
 8008926:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008928:	4b85      	ldr	r3, [pc, #532]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800892a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892c:	091b      	lsrs	r3, r3, #4
 800892e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008932:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008934:	4b82      	ldr	r3, [pc, #520]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008938:	f003 0301 	and.w	r3, r3, #1
 800893c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800893e:	4b80      	ldr	r3, [pc, #512]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008942:	08db      	lsrs	r3, r3, #3
 8008944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	fb02 f303 	mul.w	r3, r2, r3
 800894e:	ee07 3a90 	vmov	s15, r3
 8008952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008956:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	2b00      	cmp	r3, #0
 800895e:	f000 80e1 	beq.w	8008b24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	2b02      	cmp	r3, #2
 8008966:	f000 8083 	beq.w	8008a70 <HAL_RCC_GetSysClockFreq+0x204>
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	2b02      	cmp	r3, #2
 800896e:	f200 80a1 	bhi.w	8008ab4 <HAL_RCC_GetSysClockFreq+0x248>
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d003      	beq.n	8008980 <HAL_RCC_GetSysClockFreq+0x114>
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	2b01      	cmp	r3, #1
 800897c:	d056      	beq.n	8008a2c <HAL_RCC_GetSysClockFreq+0x1c0>
 800897e:	e099      	b.n	8008ab4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008980:	4b6f      	ldr	r3, [pc, #444]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0320 	and.w	r3, r3, #32
 8008988:	2b00      	cmp	r3, #0
 800898a:	d02d      	beq.n	80089e8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800898c:	4b6c      	ldr	r3, [pc, #432]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	08db      	lsrs	r3, r3, #3
 8008992:	f003 0303 	and.w	r3, r3, #3
 8008996:	4a6b      	ldr	r2, [pc, #428]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008998:	fa22 f303 	lsr.w	r3, r2, r3
 800899c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	ee07 3a90 	vmov	s15, r3
 80089a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	ee07 3a90 	vmov	s15, r3
 80089ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089b6:	4b62      	ldr	r3, [pc, #392]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089be:	ee07 3a90 	vmov	s15, r3
 80089c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80089ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008b50 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80089e6:	e087      	b.n	8008af8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	ee07 3a90 	vmov	s15, r3
 80089ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008b54 <HAL_RCC_GetSysClockFreq+0x2e8>
 80089f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089fa:	4b51      	ldr	r3, [pc, #324]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a02:	ee07 3a90 	vmov	s15, r3
 8008a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a0e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008b50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a2a:	e065      	b.n	8008af8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	ee07 3a90 	vmov	s15, r3
 8008a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a36:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008b58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a3e:	4b40      	ldr	r3, [pc, #256]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a46:	ee07 3a90 	vmov	s15, r3
 8008a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a52:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008b50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a6e:	e043      	b.n	8008af8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	ee07 3a90 	vmov	s15, r3
 8008a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a7a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008b5c <HAL_RCC_GetSysClockFreq+0x2f0>
 8008a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a82:	4b2f      	ldr	r3, [pc, #188]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8a:	ee07 3a90 	vmov	s15, r3
 8008a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a92:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a96:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008b50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ab2:	e021      	b.n	8008af8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	ee07 3a90 	vmov	s15, r3
 8008aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008abe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008b58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ac6:	4b1e      	ldr	r3, [pc, #120]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ace:	ee07 3a90 	vmov	s15, r3
 8008ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ad6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ada:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008b50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008af6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008af8:	4b11      	ldr	r3, [pc, #68]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008afc:	0a5b      	lsrs	r3, r3, #9
 8008afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b02:	3301      	adds	r3, #1
 8008b04:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	ee07 3a90 	vmov	s15, r3
 8008b0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b10:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b1c:	ee17 3a90 	vmov	r3, s15
 8008b20:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008b22:	e005      	b.n	8008b30 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008b24:	2300      	movs	r3, #0
 8008b26:	61bb      	str	r3, [r7, #24]
    break;
 8008b28:	e002      	b.n	8008b30 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008b2a:	4b07      	ldr	r3, [pc, #28]	; (8008b48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008b2c:	61bb      	str	r3, [r7, #24]
    break;
 8008b2e:	bf00      	nop
  }

  return sysclockfreq;
 8008b30:	69bb      	ldr	r3, [r7, #24]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3724      	adds	r7, #36	; 0x24
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	58024400 	.word	0x58024400
 8008b44:	03d09000 	.word	0x03d09000
 8008b48:	003d0900 	.word	0x003d0900
 8008b4c:	007a1200 	.word	0x007a1200
 8008b50:	46000000 	.word	0x46000000
 8008b54:	4c742400 	.word	0x4c742400
 8008b58:	4a742400 	.word	0x4a742400
 8008b5c:	4af42400 	.word	0x4af42400

08008b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008b66:	f7ff fe81 	bl	800886c <HAL_RCC_GetSysClockFreq>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	4b10      	ldr	r3, [pc, #64]	; (8008bb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	0a1b      	lsrs	r3, r3, #8
 8008b72:	f003 030f 	and.w	r3, r3, #15
 8008b76:	490f      	ldr	r1, [pc, #60]	; (8008bb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b78:	5ccb      	ldrb	r3, [r1, r3]
 8008b7a:	f003 031f 	and.w	r3, r3, #31
 8008b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b84:	4b0a      	ldr	r3, [pc, #40]	; (8008bb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	f003 030f 	and.w	r3, r3, #15
 8008b8c:	4a09      	ldr	r2, [pc, #36]	; (8008bb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b8e:	5cd3      	ldrb	r3, [r2, r3]
 8008b90:	f003 031f 	and.w	r3, r3, #31
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	fa22 f303 	lsr.w	r3, r2, r3
 8008b9a:	4a07      	ldr	r2, [pc, #28]	; (8008bb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8008b9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b9e:	4a07      	ldr	r2, [pc, #28]	; (8008bbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008ba4:	4b04      	ldr	r3, [pc, #16]	; (8008bb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	58024400 	.word	0x58024400
 8008bb4:	0800e170 	.word	0x0800e170
 8008bb8:	24000004 	.word	0x24000004
 8008bbc:	24000000 	.word	0x24000000

08008bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008bc4:	f7ff ffcc 	bl	8008b60 <HAL_RCC_GetHCLKFreq>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	4b06      	ldr	r3, [pc, #24]	; (8008be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bcc:	69db      	ldr	r3, [r3, #28]
 8008bce:	091b      	lsrs	r3, r3, #4
 8008bd0:	f003 0307 	and.w	r3, r3, #7
 8008bd4:	4904      	ldr	r1, [pc, #16]	; (8008be8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008bd6:	5ccb      	ldrb	r3, [r1, r3]
 8008bd8:	f003 031f 	and.w	r3, r3, #31
 8008bdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	58024400 	.word	0x58024400
 8008be8:	0800e170 	.word	0x0800e170

08008bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008bf0:	f7ff ffb6 	bl	8008b60 <HAL_RCC_GetHCLKFreq>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	4b06      	ldr	r3, [pc, #24]	; (8008c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bf8:	69db      	ldr	r3, [r3, #28]
 8008bfa:	0a1b      	lsrs	r3, r3, #8
 8008bfc:	f003 0307 	and.w	r3, r3, #7
 8008c00:	4904      	ldr	r1, [pc, #16]	; (8008c14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c02:	5ccb      	ldrb	r3, [r1, r3]
 8008c04:	f003 031f 	and.w	r3, r3, #31
 8008c08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	58024400 	.word	0x58024400
 8008c14:	0800e170 	.word	0x0800e170

08008c18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b086      	sub	sp, #24
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008c20:	2300      	movs	r3, #0
 8008c22:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c24:	2300      	movs	r3, #0
 8008c26:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d03f      	beq.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c3c:	d02a      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008c3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c42:	d824      	bhi.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008c44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c48:	d018      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008c4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c4e:	d81e      	bhi.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d003      	beq.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008c54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c58:	d007      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008c5a:	e018      	b.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c5c:	4ba4      	ldr	r3, [pc, #656]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c60:	4aa3      	ldr	r2, [pc, #652]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008c68:	e015      	b.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	3304      	adds	r3, #4
 8008c6e:	2102      	movs	r1, #2
 8008c70:	4618      	mov	r0, r3
 8008c72:	f001 f989 	bl	8009f88 <RCCEx_PLL2_Config>
 8008c76:	4603      	mov	r3, r0
 8008c78:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008c7a:	e00c      	b.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	3324      	adds	r3, #36	; 0x24
 8008c80:	2102      	movs	r1, #2
 8008c82:	4618      	mov	r0, r3
 8008c84:	f001 fa32 	bl	800a0ec <RCCEx_PLL3_Config>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008c8c:	e003      	b.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	75fb      	strb	r3, [r7, #23]
      break;
 8008c92:	e000      	b.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008c94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c96:	7dfb      	ldrb	r3, [r7, #23]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d109      	bne.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008c9c:	4b94      	ldr	r3, [pc, #592]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ca8:	4991      	ldr	r1, [pc, #580]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008caa:	4313      	orrs	r3, r2
 8008cac:	650b      	str	r3, [r1, #80]	; 0x50
 8008cae:	e001      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cb0:	7dfb      	ldrb	r3, [r7, #23]
 8008cb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d03d      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc4:	2b04      	cmp	r3, #4
 8008cc6:	d826      	bhi.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008cc8:	a201      	add	r2, pc, #4	; (adr r2, 8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cce:	bf00      	nop
 8008cd0:	08008ce5 	.word	0x08008ce5
 8008cd4:	08008cf3 	.word	0x08008cf3
 8008cd8:	08008d05 	.word	0x08008d05
 8008cdc:	08008d1d 	.word	0x08008d1d
 8008ce0:	08008d1d 	.word	0x08008d1d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ce4:	4b82      	ldr	r3, [pc, #520]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce8:	4a81      	ldr	r2, [pc, #516]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cf0:	e015      	b.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	3304      	adds	r3, #4
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f001 f945 	bl	8009f88 <RCCEx_PLL2_Config>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d02:	e00c      	b.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	3324      	adds	r3, #36	; 0x24
 8008d08:	2100      	movs	r1, #0
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f001 f9ee 	bl	800a0ec <RCCEx_PLL3_Config>
 8008d10:	4603      	mov	r3, r0
 8008d12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d14:	e003      	b.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	75fb      	strb	r3, [r7, #23]
      break;
 8008d1a:	e000      	b.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008d1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d1e:	7dfb      	ldrb	r3, [r7, #23]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d109      	bne.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d24:	4b72      	ldr	r3, [pc, #456]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d28:	f023 0207 	bic.w	r2, r3, #7
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d30:	496f      	ldr	r1, [pc, #444]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d32:	4313      	orrs	r3, r2
 8008d34:	650b      	str	r3, [r1, #80]	; 0x50
 8008d36:	e001      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d38:	7dfb      	ldrb	r3, [r7, #23]
 8008d3a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d051      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008d4e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008d52:	d036      	beq.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008d54:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008d58:	d830      	bhi.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008d5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d5e:	d032      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8008d60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d64:	d82a      	bhi.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008d66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d6a:	d02e      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008d6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d70:	d824      	bhi.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d76:	d018      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d7c:	d81e      	bhi.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8008d82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d86:	d007      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008d88:	e018      	b.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d8a:	4b59      	ldr	r3, [pc, #356]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8e:	4a58      	ldr	r2, [pc, #352]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d96:	e019      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	3304      	adds	r3, #4
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f001 f8f2 	bl	8009f88 <RCCEx_PLL2_Config>
 8008da4:	4603      	mov	r3, r0
 8008da6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008da8:	e010      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	3324      	adds	r3, #36	; 0x24
 8008dae:	2100      	movs	r1, #0
 8008db0:	4618      	mov	r0, r3
 8008db2:	f001 f99b 	bl	800a0ec <RCCEx_PLL3_Config>
 8008db6:	4603      	mov	r3, r0
 8008db8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008dba:	e007      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8008dc0:	e004      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008dc2:	bf00      	nop
 8008dc4:	e002      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008dc6:	bf00      	nop
 8008dc8:	e000      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008dca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dcc:	7dfb      	ldrb	r3, [r7, #23]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10a      	bne.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008dd2:	4b47      	ldr	r3, [pc, #284]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dd6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008de0:	4943      	ldr	r1, [pc, #268]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008de2:	4313      	orrs	r3, r2
 8008de4:	658b      	str	r3, [r1, #88]	; 0x58
 8008de6:	e001      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de8:	7dfb      	ldrb	r3, [r7, #23]
 8008dea:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d051      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008dfe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008e02:	d036      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008e04:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008e08:	d830      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008e0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e0e:	d032      	beq.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8008e10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e14:	d82a      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008e16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e1a:	d02e      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008e1c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e20:	d824      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008e22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e26:	d018      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008e28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e2c:	d81e      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008e32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e36:	d007      	beq.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008e38:	e018      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e3a:	4b2d      	ldr	r3, [pc, #180]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3e:	4a2c      	ldr	r2, [pc, #176]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e46:	e019      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	3304      	adds	r3, #4
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f001 f89a 	bl	8009f88 <RCCEx_PLL2_Config>
 8008e54:	4603      	mov	r3, r0
 8008e56:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008e58:	e010      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	3324      	adds	r3, #36	; 0x24
 8008e5e:	2100      	movs	r1, #0
 8008e60:	4618      	mov	r0, r3
 8008e62:	f001 f943 	bl	800a0ec <RCCEx_PLL3_Config>
 8008e66:	4603      	mov	r3, r0
 8008e68:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e6a:	e007      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8008e70:	e004      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008e72:	bf00      	nop
 8008e74:	e002      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008e76:	bf00      	nop
 8008e78:	e000      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10a      	bne.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008e82:	4b1b      	ldr	r3, [pc, #108]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e86:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e90:	4917      	ldr	r1, [pc, #92]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e92:	4313      	orrs	r3, r2
 8008e94:	658b      	str	r3, [r1, #88]	; 0x58
 8008e96:	e001      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e98:	7dfb      	ldrb	r3, [r7, #23]
 8008e9a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d035      	beq.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eac:	2b30      	cmp	r3, #48	; 0x30
 8008eae:	d01c      	beq.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008eb0:	2b30      	cmp	r3, #48	; 0x30
 8008eb2:	d817      	bhi.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008eb4:	2b20      	cmp	r3, #32
 8008eb6:	d00c      	beq.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008eb8:	2b20      	cmp	r3, #32
 8008eba:	d813      	bhi.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d019      	beq.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8008ec0:	2b10      	cmp	r3, #16
 8008ec2:	d10f      	bne.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ec4:	4b0a      	ldr	r3, [pc, #40]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec8:	4a09      	ldr	r2, [pc, #36]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ece:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008ed0:	e011      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	3304      	adds	r3, #4
 8008ed6:	2102      	movs	r1, #2
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f001 f855 	bl	8009f88 <RCCEx_PLL2_Config>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008ee2:	e008      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ee8:	e005      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8008eea:	bf00      	nop
 8008eec:	e003      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008eee:	bf00      	nop
 8008ef0:	58024400 	.word	0x58024400
      break;
 8008ef4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ef6:	7dfb      	ldrb	r3, [r7, #23]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d109      	bne.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008efc:	4ba3      	ldr	r3, [pc, #652]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f08:	49a0      	ldr	r1, [pc, #640]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008f0e:	e001      	b.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f10:	7dfb      	ldrb	r3, [r7, #23]
 8008f12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d047      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f28:	d030      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008f2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f2e:	d82a      	bhi.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008f30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f34:	d02c      	beq.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008f36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f3a:	d824      	bhi.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f40:	d018      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f46:	d81e      	bhi.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d003      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f50:	d007      	beq.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008f52:	e018      	b.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f54:	4b8d      	ldr	r3, [pc, #564]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f58:	4a8c      	ldr	r2, [pc, #560]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008f60:	e017      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	3304      	adds	r3, #4
 8008f66:	2100      	movs	r1, #0
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f001 f80d 	bl	8009f88 <RCCEx_PLL2_Config>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008f72:	e00e      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	3324      	adds	r3, #36	; 0x24
 8008f78:	2100      	movs	r1, #0
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f001 f8b6 	bl	800a0ec <RCCEx_PLL3_Config>
 8008f80:	4603      	mov	r3, r0
 8008f82:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008f84:	e005      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	75fb      	strb	r3, [r7, #23]
      break;
 8008f8a:	e002      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008f8c:	bf00      	nop
 8008f8e:	e000      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f92:	7dfb      	ldrb	r3, [r7, #23]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d109      	bne.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008f98:	4b7c      	ldr	r3, [pc, #496]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f9c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fa4:	4979      	ldr	r1, [pc, #484]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	650b      	str	r3, [r1, #80]	; 0x50
 8008faa:	e001      	b.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fac:	7dfb      	ldrb	r3, [r7, #23]
 8008fae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d049      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fc4:	d02e      	beq.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8008fc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fca:	d828      	bhi.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008fcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008fd0:	d02a      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008fd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008fd6:	d822      	bhi.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008fd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008fdc:	d026      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008fde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008fe2:	d81c      	bhi.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008fe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fe8:	d010      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008fea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fee:	d816      	bhi.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d01d      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ff8:	d111      	bne.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	2101      	movs	r1, #1
 8009000:	4618      	mov	r0, r3
 8009002:	f000 ffc1 	bl	8009f88 <RCCEx_PLL2_Config>
 8009006:	4603      	mov	r3, r0
 8009008:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800900a:	e012      	b.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	3324      	adds	r3, #36	; 0x24
 8009010:	2101      	movs	r1, #1
 8009012:	4618      	mov	r0, r3
 8009014:	f001 f86a 	bl	800a0ec <RCCEx_PLL3_Config>
 8009018:	4603      	mov	r3, r0
 800901a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800901c:	e009      	b.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	75fb      	strb	r3, [r7, #23]
      break;
 8009022:	e006      	b.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009024:	bf00      	nop
 8009026:	e004      	b.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009028:	bf00      	nop
 800902a:	e002      	b.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800902c:	bf00      	nop
 800902e:	e000      	b.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009032:	7dfb      	ldrb	r3, [r7, #23]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d109      	bne.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009038:	4b54      	ldr	r3, [pc, #336]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800903a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800903c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009044:	4951      	ldr	r1, [pc, #324]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009046:	4313      	orrs	r3, r2
 8009048:	650b      	str	r3, [r1, #80]	; 0x50
 800904a:	e001      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800904c:	7dfb      	ldrb	r3, [r7, #23]
 800904e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d04b      	beq.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009062:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009066:	d02e      	beq.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009068:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800906c:	d828      	bhi.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800906e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009072:	d02a      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009078:	d822      	bhi.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800907a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800907e:	d026      	beq.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009080:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009084:	d81c      	bhi.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800908a:	d010      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x496>
 800908c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009090:	d816      	bhi.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009092:	2b00      	cmp	r3, #0
 8009094:	d01d      	beq.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800909a:	d111      	bne.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	3304      	adds	r3, #4
 80090a0:	2101      	movs	r1, #1
 80090a2:	4618      	mov	r0, r3
 80090a4:	f000 ff70 	bl	8009f88 <RCCEx_PLL2_Config>
 80090a8:	4603      	mov	r3, r0
 80090aa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80090ac:	e012      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	3324      	adds	r3, #36	; 0x24
 80090b2:	2101      	movs	r1, #1
 80090b4:	4618      	mov	r0, r3
 80090b6:	f001 f819 	bl	800a0ec <RCCEx_PLL3_Config>
 80090ba:	4603      	mov	r3, r0
 80090bc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80090be:	e009      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	75fb      	strb	r3, [r7, #23]
      break;
 80090c4:	e006      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80090c6:	bf00      	nop
 80090c8:	e004      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80090ca:	bf00      	nop
 80090cc:	e002      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80090ce:	bf00      	nop
 80090d0:	e000      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80090d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090d4:	7dfb      	ldrb	r3, [r7, #23]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10a      	bne.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80090da:	4b2c      	ldr	r3, [pc, #176]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80090dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80090e8:	4928      	ldr	r1, [pc, #160]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80090ea:	4313      	orrs	r3, r2
 80090ec:	658b      	str	r3, [r1, #88]	; 0x58
 80090ee:	e001      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090f0:	7dfb      	ldrb	r3, [r7, #23]
 80090f2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d02f      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009108:	d00e      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800910a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800910e:	d814      	bhi.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009110:	2b00      	cmp	r3, #0
 8009112:	d015      	beq.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009114:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009118:	d10f      	bne.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800911a:	4b1c      	ldr	r3, [pc, #112]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800911c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911e:	4a1b      	ldr	r2, [pc, #108]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009124:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009126:	e00c      	b.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	3304      	adds	r3, #4
 800912c:	2101      	movs	r1, #1
 800912e:	4618      	mov	r0, r3
 8009130:	f000 ff2a 	bl	8009f88 <RCCEx_PLL2_Config>
 8009134:	4603      	mov	r3, r0
 8009136:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009138:	e003      	b.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	75fb      	strb	r3, [r7, #23]
      break;
 800913e:	e000      	b.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009140:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009142:	7dfb      	ldrb	r3, [r7, #23]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d109      	bne.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009148:	4b10      	ldr	r3, [pc, #64]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800914a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800914c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009154:	490d      	ldr	r1, [pc, #52]	; (800918c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009156:	4313      	orrs	r3, r2
 8009158:	650b      	str	r3, [r1, #80]	; 0x50
 800915a:	e001      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800915c:	7dfb      	ldrb	r3, [r7, #23]
 800915e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d034      	beq.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009170:	2b03      	cmp	r3, #3
 8009172:	d81d      	bhi.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009174:	a201      	add	r2, pc, #4	; (adr r2, 800917c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917a:	bf00      	nop
 800917c:	080091b7 	.word	0x080091b7
 8009180:	08009191 	.word	0x08009191
 8009184:	0800919f 	.word	0x0800919f
 8009188:	080091b7 	.word	0x080091b7
 800918c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009190:	4bb1      	ldr	r3, [pc, #708]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009194:	4ab0      	ldr	r2, [pc, #704]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800919a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800919c:	e00c      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	3304      	adds	r3, #4
 80091a2:	2102      	movs	r1, #2
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 feef 	bl	8009f88 <RCCEx_PLL2_Config>
 80091aa:	4603      	mov	r3, r0
 80091ac:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80091ae:	e003      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	75fb      	strb	r3, [r7, #23]
      break;
 80091b4:	e000      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 80091b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091b8:	7dfb      	ldrb	r3, [r7, #23]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d109      	bne.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80091be:	4ba6      	ldr	r3, [pc, #664]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80091c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091c2:	f023 0203 	bic.w	r2, r3, #3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ca:	49a3      	ldr	r1, [pc, #652]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80091cc:	4313      	orrs	r3, r2
 80091ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 80091d0:	e001      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d2:	7dfb      	ldrb	r3, [r7, #23]
 80091d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f000 8086 	beq.w	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80091e4:	4b9d      	ldr	r3, [pc, #628]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a9c      	ldr	r2, [pc, #624]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80091ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80091f0:	f7fb fc86 	bl	8004b00 <HAL_GetTick>
 80091f4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091f6:	e009      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091f8:	f7fb fc82 	bl	8004b00 <HAL_GetTick>
 80091fc:	4602      	mov	r2, r0
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	2b64      	cmp	r3, #100	; 0x64
 8009204:	d902      	bls.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8009206:	2303      	movs	r3, #3
 8009208:	75fb      	strb	r3, [r7, #23]
        break;
 800920a:	e005      	b.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800920c:	4b93      	ldr	r3, [pc, #588]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009214:	2b00      	cmp	r3, #0
 8009216:	d0ef      	beq.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8009218:	7dfb      	ldrb	r3, [r7, #23]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d166      	bne.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800921e:	4b8e      	ldr	r3, [pc, #568]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009220:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009228:	4053      	eors	r3, r2
 800922a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800922e:	2b00      	cmp	r3, #0
 8009230:	d013      	beq.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009232:	4b89      	ldr	r3, [pc, #548]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800923a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800923c:	4b86      	ldr	r3, [pc, #536]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800923e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009240:	4a85      	ldr	r2, [pc, #532]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009246:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009248:	4b83      	ldr	r3, [pc, #524]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800924a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800924c:	4a82      	ldr	r2, [pc, #520]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800924e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009252:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009254:	4a80      	ldr	r2, [pc, #512]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009264:	d115      	bne.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009266:	f7fb fc4b 	bl	8004b00 <HAL_GetTick>
 800926a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800926c:	e00b      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800926e:	f7fb fc47 	bl	8004b00 <HAL_GetTick>
 8009272:	4602      	mov	r2, r0
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	f241 3288 	movw	r2, #5000	; 0x1388
 800927c:	4293      	cmp	r3, r2
 800927e:	d902      	bls.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8009280:	2303      	movs	r3, #3
 8009282:	75fb      	strb	r3, [r7, #23]
            break;
 8009284:	e005      	b.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009286:	4b74      	ldr	r3, [pc, #464]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800928a:	f003 0302 	and.w	r3, r3, #2
 800928e:	2b00      	cmp	r3, #0
 8009290:	d0ed      	beq.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8009292:	7dfb      	ldrb	r3, [r7, #23]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d126      	bne.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800929e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092a6:	d10d      	bne.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80092a8:	4b6b      	ldr	r3, [pc, #428]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092b6:	0919      	lsrs	r1, r3, #4
 80092b8:	4b69      	ldr	r3, [pc, #420]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80092ba:	400b      	ands	r3, r1
 80092bc:	4966      	ldr	r1, [pc, #408]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092be:	4313      	orrs	r3, r2
 80092c0:	610b      	str	r3, [r1, #16]
 80092c2:	e005      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80092c4:	4b64      	ldr	r3, [pc, #400]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	4a63      	ldr	r2, [pc, #396]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80092ce:	6113      	str	r3, [r2, #16]
 80092d0:	4b61      	ldr	r3, [pc, #388]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092de:	495e      	ldr	r1, [pc, #376]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092e0:	4313      	orrs	r3, r2
 80092e2:	670b      	str	r3, [r1, #112]	; 0x70
 80092e4:	e004      	b.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80092e6:	7dfb      	ldrb	r3, [r7, #23]
 80092e8:	75bb      	strb	r3, [r7, #22]
 80092ea:	e001      	b.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ec:	7dfb      	ldrb	r3, [r7, #23]
 80092ee:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d07e      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009300:	2b28      	cmp	r3, #40	; 0x28
 8009302:	d867      	bhi.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8009304:	a201      	add	r2, pc, #4	; (adr r2, 800930c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8009306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930a:	bf00      	nop
 800930c:	080093db 	.word	0x080093db
 8009310:	080093d5 	.word	0x080093d5
 8009314:	080093d5 	.word	0x080093d5
 8009318:	080093d5 	.word	0x080093d5
 800931c:	080093d5 	.word	0x080093d5
 8009320:	080093d5 	.word	0x080093d5
 8009324:	080093d5 	.word	0x080093d5
 8009328:	080093d5 	.word	0x080093d5
 800932c:	080093b1 	.word	0x080093b1
 8009330:	080093d5 	.word	0x080093d5
 8009334:	080093d5 	.word	0x080093d5
 8009338:	080093d5 	.word	0x080093d5
 800933c:	080093d5 	.word	0x080093d5
 8009340:	080093d5 	.word	0x080093d5
 8009344:	080093d5 	.word	0x080093d5
 8009348:	080093d5 	.word	0x080093d5
 800934c:	080093c3 	.word	0x080093c3
 8009350:	080093d5 	.word	0x080093d5
 8009354:	080093d5 	.word	0x080093d5
 8009358:	080093d5 	.word	0x080093d5
 800935c:	080093d5 	.word	0x080093d5
 8009360:	080093d5 	.word	0x080093d5
 8009364:	080093d5 	.word	0x080093d5
 8009368:	080093d5 	.word	0x080093d5
 800936c:	080093db 	.word	0x080093db
 8009370:	080093d5 	.word	0x080093d5
 8009374:	080093d5 	.word	0x080093d5
 8009378:	080093d5 	.word	0x080093d5
 800937c:	080093d5 	.word	0x080093d5
 8009380:	080093d5 	.word	0x080093d5
 8009384:	080093d5 	.word	0x080093d5
 8009388:	080093d5 	.word	0x080093d5
 800938c:	080093db 	.word	0x080093db
 8009390:	080093d5 	.word	0x080093d5
 8009394:	080093d5 	.word	0x080093d5
 8009398:	080093d5 	.word	0x080093d5
 800939c:	080093d5 	.word	0x080093d5
 80093a0:	080093d5 	.word	0x080093d5
 80093a4:	080093d5 	.word	0x080093d5
 80093a8:	080093d5 	.word	0x080093d5
 80093ac:	080093db 	.word	0x080093db
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	3304      	adds	r3, #4
 80093b4:	2101      	movs	r1, #1
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 fde6 	bl	8009f88 <RCCEx_PLL2_Config>
 80093bc:	4603      	mov	r3, r0
 80093be:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80093c0:	e00c      	b.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	3324      	adds	r3, #36	; 0x24
 80093c6:	2101      	movs	r1, #1
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 fe8f 	bl	800a0ec <RCCEx_PLL3_Config>
 80093ce:	4603      	mov	r3, r0
 80093d0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80093d2:	e003      	b.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	75fb      	strb	r3, [r7, #23]
      break;
 80093d8:	e000      	b.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 80093da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093dc:	7dfb      	ldrb	r3, [r7, #23]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d109      	bne.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80093e2:	4b1d      	ldr	r3, [pc, #116]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80093e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093e6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093ee:	491a      	ldr	r1, [pc, #104]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80093f0:	4313      	orrs	r3, r2
 80093f2:	654b      	str	r3, [r1, #84]	; 0x54
 80093f4:	e001      	b.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f6:	7dfb      	ldrb	r3, [r7, #23]
 80093f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 0302 	and.w	r3, r3, #2
 8009402:	2b00      	cmp	r3, #0
 8009404:	d03e      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800940a:	2b05      	cmp	r3, #5
 800940c:	d820      	bhi.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800940e:	a201      	add	r2, pc, #4	; (adr r2, 8009414 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8009410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009414:	08009465 	.word	0x08009465
 8009418:	0800942d 	.word	0x0800942d
 800941c:	0800943f 	.word	0x0800943f
 8009420:	08009465 	.word	0x08009465
 8009424:	08009465 	.word	0x08009465
 8009428:	08009465 	.word	0x08009465
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	3304      	adds	r3, #4
 8009430:	2101      	movs	r1, #1
 8009432:	4618      	mov	r0, r3
 8009434:	f000 fda8 	bl	8009f88 <RCCEx_PLL2_Config>
 8009438:	4603      	mov	r3, r0
 800943a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800943c:	e013      	b.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	3324      	adds	r3, #36	; 0x24
 8009442:	2101      	movs	r1, #1
 8009444:	4618      	mov	r0, r3
 8009446:	f000 fe51 	bl	800a0ec <RCCEx_PLL3_Config>
 800944a:	4603      	mov	r3, r0
 800944c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800944e:	e00a      	b.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	75fb      	strb	r3, [r7, #23]
      break;
 8009454:	e007      	b.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8009456:	bf00      	nop
 8009458:	58024400 	.word	0x58024400
 800945c:	58024800 	.word	0x58024800
 8009460:	00ffffcf 	.word	0x00ffffcf
      break;
 8009464:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009466:	7dfb      	ldrb	r3, [r7, #23]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d109      	bne.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800946c:	4b9f      	ldr	r3, [pc, #636]	; (80096ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800946e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009470:	f023 0207 	bic.w	r2, r3, #7
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009478:	499c      	ldr	r1, [pc, #624]	; (80096ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800947a:	4313      	orrs	r3, r2
 800947c:	654b      	str	r3, [r1, #84]	; 0x54
 800947e:	e001      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009480:	7dfb      	ldrb	r3, [r7, #23]
 8009482:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0304 	and.w	r3, r3, #4
 800948c:	2b00      	cmp	r3, #0
 800948e:	d039      	beq.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009496:	2b05      	cmp	r3, #5
 8009498:	d820      	bhi.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800949a:	a201      	add	r2, pc, #4	; (adr r2, 80094a0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800949c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a0:	080094e3 	.word	0x080094e3
 80094a4:	080094b9 	.word	0x080094b9
 80094a8:	080094cb 	.word	0x080094cb
 80094ac:	080094e3 	.word	0x080094e3
 80094b0:	080094e3 	.word	0x080094e3
 80094b4:	080094e3 	.word	0x080094e3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	3304      	adds	r3, #4
 80094bc:	2101      	movs	r1, #1
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 fd62 	bl	8009f88 <RCCEx_PLL2_Config>
 80094c4:	4603      	mov	r3, r0
 80094c6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80094c8:	e00c      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	3324      	adds	r3, #36	; 0x24
 80094ce:	2101      	movs	r1, #1
 80094d0:	4618      	mov	r0, r3
 80094d2:	f000 fe0b 	bl	800a0ec <RCCEx_PLL3_Config>
 80094d6:	4603      	mov	r3, r0
 80094d8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80094da:	e003      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	75fb      	strb	r3, [r7, #23]
      break;
 80094e0:	e000      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80094e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094e4:	7dfb      	ldrb	r3, [r7, #23]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10a      	bne.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094ea:	4b80      	ldr	r3, [pc, #512]	; (80096ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80094ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ee:	f023 0207 	bic.w	r2, r3, #7
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094f8:	497c      	ldr	r1, [pc, #496]	; (80096ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80094fa:	4313      	orrs	r3, r2
 80094fc:	658b      	str	r3, [r1, #88]	; 0x58
 80094fe:	e001      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009500:	7dfb      	ldrb	r3, [r7, #23]
 8009502:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f003 0320 	and.w	r3, r3, #32
 800950c:	2b00      	cmp	r3, #0
 800950e:	d04b      	beq.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009516:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800951a:	d02e      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x962>
 800951c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009520:	d828      	bhi.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009526:	d02a      	beq.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800952c:	d822      	bhi.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800952e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009532:	d026      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009534:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009538:	d81c      	bhi.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800953a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800953e:	d010      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8009540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009544:	d816      	bhi.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009546:	2b00      	cmp	r3, #0
 8009548:	d01d      	beq.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800954a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800954e:	d111      	bne.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	3304      	adds	r3, #4
 8009554:	2100      	movs	r1, #0
 8009556:	4618      	mov	r0, r3
 8009558:	f000 fd16 	bl	8009f88 <RCCEx_PLL2_Config>
 800955c:	4603      	mov	r3, r0
 800955e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009560:	e012      	b.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	3324      	adds	r3, #36	; 0x24
 8009566:	2102      	movs	r1, #2
 8009568:	4618      	mov	r0, r3
 800956a:	f000 fdbf 	bl	800a0ec <RCCEx_PLL3_Config>
 800956e:	4603      	mov	r3, r0
 8009570:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009572:	e009      	b.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	75fb      	strb	r3, [r7, #23]
      break;
 8009578:	e006      	b.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800957a:	bf00      	nop
 800957c:	e004      	b.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800957e:	bf00      	nop
 8009580:	e002      	b.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009582:	bf00      	nop
 8009584:	e000      	b.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009586:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009588:	7dfb      	ldrb	r3, [r7, #23]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10a      	bne.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800958e:	4b57      	ldr	r3, [pc, #348]	; (80096ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009592:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800959c:	4953      	ldr	r1, [pc, #332]	; (80096ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800959e:	4313      	orrs	r3, r2
 80095a0:	654b      	str	r3, [r1, #84]	; 0x54
 80095a2:	e001      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095a4:	7dfb      	ldrb	r3, [r7, #23]
 80095a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d04b      	beq.n	800964c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80095be:	d02e      	beq.n	800961e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80095c0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80095c4:	d828      	bhi.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80095c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095ca:	d02a      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80095cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095d0:	d822      	bhi.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80095d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80095d6:	d026      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80095d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80095dc:	d81c      	bhi.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80095de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095e2:	d010      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80095e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095e8:	d816      	bhi.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d01d      	beq.n	800962a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80095ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095f2:	d111      	bne.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	3304      	adds	r3, #4
 80095f8:	2100      	movs	r1, #0
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 fcc4 	bl	8009f88 <RCCEx_PLL2_Config>
 8009600:	4603      	mov	r3, r0
 8009602:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009604:	e012      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	3324      	adds	r3, #36	; 0x24
 800960a:	2102      	movs	r1, #2
 800960c:	4618      	mov	r0, r3
 800960e:	f000 fd6d 	bl	800a0ec <RCCEx_PLL3_Config>
 8009612:	4603      	mov	r3, r0
 8009614:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009616:	e009      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	75fb      	strb	r3, [r7, #23]
      break;
 800961c:	e006      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800961e:	bf00      	nop
 8009620:	e004      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009622:	bf00      	nop
 8009624:	e002      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009626:	bf00      	nop
 8009628:	e000      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800962a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800962c:	7dfb      	ldrb	r3, [r7, #23]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d10a      	bne.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009632:	4b2e      	ldr	r3, [pc, #184]	; (80096ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009636:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009640:	492a      	ldr	r1, [pc, #168]	; (80096ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009642:	4313      	orrs	r3, r2
 8009644:	658b      	str	r3, [r1, #88]	; 0x58
 8009646:	e001      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009648:	7dfb      	ldrb	r3, [r7, #23]
 800964a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009654:	2b00      	cmp	r3, #0
 8009656:	d04d      	beq.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800965e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009662:	d02e      	beq.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8009664:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009668:	d828      	bhi.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800966a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800966e:	d02a      	beq.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8009670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009674:	d822      	bhi.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009676:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800967a:	d026      	beq.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800967c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009680:	d81c      	bhi.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009682:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009686:	d010      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8009688:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800968c:	d816      	bhi.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800968e:	2b00      	cmp	r3, #0
 8009690:	d01d      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8009692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009696:	d111      	bne.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	3304      	adds	r3, #4
 800969c:	2100      	movs	r1, #0
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 fc72 	bl	8009f88 <RCCEx_PLL2_Config>
 80096a4:	4603      	mov	r3, r0
 80096a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80096a8:	e012      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	3324      	adds	r3, #36	; 0x24
 80096ae:	2102      	movs	r1, #2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 fd1b 	bl	800a0ec <RCCEx_PLL3_Config>
 80096b6:	4603      	mov	r3, r0
 80096b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80096ba:	e009      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	75fb      	strb	r3, [r7, #23]
      break;
 80096c0:	e006      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80096c2:	bf00      	nop
 80096c4:	e004      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80096c6:	bf00      	nop
 80096c8:	e002      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80096ca:	bf00      	nop
 80096cc:	e000      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80096ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096d0:	7dfb      	ldrb	r3, [r7, #23]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d10c      	bne.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80096d6:	4b05      	ldr	r3, [pc, #20]	; (80096ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80096d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80096e4:	4901      	ldr	r1, [pc, #4]	; (80096ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80096e6:	4313      	orrs	r3, r2
 80096e8:	658b      	str	r3, [r1, #88]	; 0x58
 80096ea:	e003      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80096ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f0:	7dfb      	ldrb	r3, [r7, #23]
 80096f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 0308 	and.w	r3, r3, #8
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d018      	beq.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009708:	d10a      	bne.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	3324      	adds	r3, #36	; 0x24
 800970e:	2102      	movs	r1, #2
 8009710:	4618      	mov	r0, r3
 8009712:	f000 fceb 	bl	800a0ec <RCCEx_PLL3_Config>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d001      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009720:	4b8a      	ldr	r3, [pc, #552]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009724:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800972c:	4987      	ldr	r1, [pc, #540]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800972e:	4313      	orrs	r3, r2
 8009730:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 0310 	and.w	r3, r3, #16
 800973a:	2b00      	cmp	r3, #0
 800973c:	d01a      	beq.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009748:	d10a      	bne.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	3324      	adds	r3, #36	; 0x24
 800974e:	2102      	movs	r1, #2
 8009750:	4618      	mov	r0, r3
 8009752:	f000 fccb 	bl	800a0ec <RCCEx_PLL3_Config>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d001      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009760:	4b7a      	ldr	r3, [pc, #488]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009764:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800976e:	4977      	ldr	r1, [pc, #476]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009770:	4313      	orrs	r3, r2
 8009772:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d034      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009786:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800978a:	d01d      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800978c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009790:	d817      	bhi.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8009792:	2b00      	cmp	r3, #0
 8009794:	d003      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800979a:	d009      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800979c:	e011      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	3304      	adds	r3, #4
 80097a2:	2100      	movs	r1, #0
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 fbef 	bl	8009f88 <RCCEx_PLL2_Config>
 80097aa:	4603      	mov	r3, r0
 80097ac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80097ae:	e00c      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	3324      	adds	r3, #36	; 0x24
 80097b4:	2102      	movs	r1, #2
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 fc98 	bl	800a0ec <RCCEx_PLL3_Config>
 80097bc:	4603      	mov	r3, r0
 80097be:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80097c0:	e003      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	75fb      	strb	r3, [r7, #23]
      break;
 80097c6:	e000      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80097c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097ca:	7dfb      	ldrb	r3, [r7, #23]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d10a      	bne.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80097d0:	4b5e      	ldr	r3, [pc, #376]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097de:	495b      	ldr	r1, [pc, #364]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097e0:	4313      	orrs	r3, r2
 80097e2:	658b      	str	r3, [r1, #88]	; 0x58
 80097e4:	e001      	b.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097e6:	7dfb      	ldrb	r3, [r7, #23]
 80097e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d033      	beq.n	800985e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009800:	d01c      	beq.n	800983c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009802:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009806:	d816      	bhi.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009808:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800980c:	d003      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800980e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009812:	d007      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009814:	e00f      	b.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009816:	4b4d      	ldr	r3, [pc, #308]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981a:	4a4c      	ldr	r2, [pc, #304]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800981c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009820:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009822:	e00c      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	3324      	adds	r3, #36	; 0x24
 8009828:	2101      	movs	r1, #1
 800982a:	4618      	mov	r0, r3
 800982c:	f000 fc5e 	bl	800a0ec <RCCEx_PLL3_Config>
 8009830:	4603      	mov	r3, r0
 8009832:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009834:	e003      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	75fb      	strb	r3, [r7, #23]
      break;
 800983a:	e000      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800983c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800983e:	7dfb      	ldrb	r3, [r7, #23]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d10a      	bne.n	800985a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009844:	4b41      	ldr	r3, [pc, #260]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009848:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009852:	493e      	ldr	r1, [pc, #248]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009854:	4313      	orrs	r3, r2
 8009856:	654b      	str	r3, [r1, #84]	; 0x54
 8009858:	e001      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800985a:	7dfb      	ldrb	r3, [r7, #23]
 800985c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009866:	2b00      	cmp	r3, #0
 8009868:	d029      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800986e:	2b00      	cmp	r3, #0
 8009870:	d003      	beq.n	800987a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009876:	d007      	beq.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009878:	e00f      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800987a:	4b34      	ldr	r3, [pc, #208]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800987c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987e:	4a33      	ldr	r2, [pc, #204]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009884:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009886:	e00b      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	3304      	adds	r3, #4
 800988c:	2102      	movs	r1, #2
 800988e:	4618      	mov	r0, r3
 8009890:	f000 fb7a 	bl	8009f88 <RCCEx_PLL2_Config>
 8009894:	4603      	mov	r3, r0
 8009896:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009898:	e002      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	75fb      	strb	r3, [r7, #23]
      break;
 800989e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d109      	bne.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80098a6:	4b29      	ldr	r3, [pc, #164]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098b2:	4926      	ldr	r1, [pc, #152]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098b4:	4313      	orrs	r3, r2
 80098b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80098b8:	e001      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ba:	7dfb      	ldrb	r3, [r7, #23]
 80098bc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00a      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	3324      	adds	r3, #36	; 0x24
 80098ce:	2102      	movs	r1, #2
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 fc0b 	bl	800a0ec <RCCEx_PLL3_Config>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d001      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d033      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098f4:	d017      	beq.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80098f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098fa:	d811      	bhi.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80098fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009900:	d013      	beq.n	800992a <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8009902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009906:	d80b      	bhi.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009908:	2b00      	cmp	r3, #0
 800990a:	d010      	beq.n	800992e <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800990c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009910:	d106      	bne.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009912:	4b0e      	ldr	r3, [pc, #56]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009916:	4a0d      	ldr	r2, [pc, #52]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800991c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800991e:	e007      	b.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	75fb      	strb	r3, [r7, #23]
      break;
 8009924:	e004      	b.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009926:	bf00      	nop
 8009928:	e002      	b.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800992a:	bf00      	nop
 800992c:	e000      	b.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800992e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009930:	7dfb      	ldrb	r3, [r7, #23]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d10c      	bne.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009936:	4b05      	ldr	r3, [pc, #20]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800993a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009942:	4902      	ldr	r1, [pc, #8]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009944:	4313      	orrs	r3, r2
 8009946:	654b      	str	r3, [r1, #84]	; 0x54
 8009948:	e004      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800994a:	bf00      	nop
 800994c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009950:	7dfb      	ldrb	r3, [r7, #23]
 8009952:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d008      	beq.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009960:	4b29      	ldr	r3, [pc, #164]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009964:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800996c:	4926      	ldr	r1, [pc, #152]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800996e:	4313      	orrs	r3, r2
 8009970:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d008      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800997e:	4b22      	ldr	r3, [pc, #136]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009982:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800998a:	491f      	ldr	r1, [pc, #124]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800998c:	4313      	orrs	r3, r2
 800998e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00d      	beq.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800999c:	4b1a      	ldr	r3, [pc, #104]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	4a19      	ldr	r2, [pc, #100]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80099a6:	6113      	str	r3, [r2, #16]
 80099a8:	4b17      	ldr	r3, [pc, #92]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099aa:	691a      	ldr	r2, [r3, #16]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099b2:	4915      	ldr	r1, [pc, #84]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099b4:	4313      	orrs	r3, r2
 80099b6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	da08      	bge.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80099c0:	4b11      	ldr	r3, [pc, #68]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099cc:	490e      	ldr	r1, [pc, #56]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099ce:	4313      	orrs	r3, r2
 80099d0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d009      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80099de:	4b0a      	ldr	r3, [pc, #40]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099ec:	4906      	ldr	r1, [pc, #24]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099ee:	4313      	orrs	r3, r2
 80099f0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80099f2:	7dbb      	ldrb	r3, [r7, #22]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d101      	bne.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80099f8:	2300      	movs	r3, #0
 80099fa:	e000      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3718      	adds	r7, #24
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	58024400 	.word	0x58024400

08009a0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009a10:	f7ff f8a6 	bl	8008b60 <HAL_RCC_GetHCLKFreq>
 8009a14:	4602      	mov	r2, r0
 8009a16:	4b06      	ldr	r3, [pc, #24]	; (8009a30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009a18:	6a1b      	ldr	r3, [r3, #32]
 8009a1a:	091b      	lsrs	r3, r3, #4
 8009a1c:	f003 0307 	and.w	r3, r3, #7
 8009a20:	4904      	ldr	r1, [pc, #16]	; (8009a34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009a22:	5ccb      	ldrb	r3, [r1, r3]
 8009a24:	f003 031f 	and.w	r3, r3, #31
 8009a28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	58024400 	.word	0x58024400
 8009a34:	0800e170 	.word	0x0800e170

08009a38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b089      	sub	sp, #36	; 0x24
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a40:	4ba1      	ldr	r3, [pc, #644]	; (8009cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a44:	f003 0303 	and.w	r3, r3, #3
 8009a48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009a4a:	4b9f      	ldr	r3, [pc, #636]	; (8009cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a4e:	0b1b      	lsrs	r3, r3, #12
 8009a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009a56:	4b9c      	ldr	r3, [pc, #624]	; (8009cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5a:	091b      	lsrs	r3, r3, #4
 8009a5c:	f003 0301 	and.w	r3, r3, #1
 8009a60:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009a62:	4b99      	ldr	r3, [pc, #612]	; (8009cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a66:	08db      	lsrs	r3, r3, #3
 8009a68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a6c:	693a      	ldr	r2, [r7, #16]
 8009a6e:	fb02 f303 	mul.w	r3, r2, r3
 8009a72:	ee07 3a90 	vmov	s15, r3
 8009a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f000 8111 	beq.w	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	f000 8083 	beq.w	8009b94 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	f200 80a1 	bhi.w	8009bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d003      	beq.n	8009aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d056      	beq.n	8009b50 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009aa2:	e099      	b.n	8009bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009aa4:	4b88      	ldr	r3, [pc, #544]	; (8009cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 0320 	and.w	r3, r3, #32
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d02d      	beq.n	8009b0c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ab0:	4b85      	ldr	r3, [pc, #532]	; (8009cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	08db      	lsrs	r3, r3, #3
 8009ab6:	f003 0303 	and.w	r3, r3, #3
 8009aba:	4a84      	ldr	r2, [pc, #528]	; (8009ccc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009abc:	fa22 f303 	lsr.w	r3, r2, r3
 8009ac0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	ee07 3a90 	vmov	s15, r3
 8009ac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	ee07 3a90 	vmov	s15, r3
 8009ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ada:	4b7b      	ldr	r3, [pc, #492]	; (8009cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ae2:	ee07 3a90 	vmov	s15, r3
 8009ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009aee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b06:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009b0a:	e087      	b.n	8009c1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	ee07 3a90 	vmov	s15, r3
 8009b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b1e:	4b6a      	ldr	r3, [pc, #424]	; (8009cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b26:	ee07 3a90 	vmov	s15, r3
 8009b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b4e:	e065      	b.n	8009c1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	ee07 3a90 	vmov	s15, r3
 8009b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b62:	4b59      	ldr	r3, [pc, #356]	; (8009cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b6a:	ee07 3a90 	vmov	s15, r3
 8009b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b92:	e043      	b.n	8009c1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	ee07 3a90 	vmov	s15, r3
 8009b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009cdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ba6:	4b48      	ldr	r3, [pc, #288]	; (8009cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bae:	ee07 3a90 	vmov	s15, r3
 8009bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bd6:	e021      	b.n	8009c1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	ee07 3a90 	vmov	s15, r3
 8009bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bea:	4b37      	ldr	r3, [pc, #220]	; (8009cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bf2:	ee07 3a90 	vmov	s15, r3
 8009bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bfe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c1a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009c1c:	4b2a      	ldr	r3, [pc, #168]	; (8009cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c20:	0a5b      	lsrs	r3, r3, #9
 8009c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c26:	ee07 3a90 	vmov	s15, r3
 8009c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c36:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c42:	ee17 2a90 	vmov	r2, s15
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009c4a:	4b1f      	ldr	r3, [pc, #124]	; (8009cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c4e:	0c1b      	lsrs	r3, r3, #16
 8009c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c54:	ee07 3a90 	vmov	s15, r3
 8009c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c64:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c70:	ee17 2a90 	vmov	r2, s15
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009c78:	4b13      	ldr	r3, [pc, #76]	; (8009cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c7c:	0e1b      	lsrs	r3, r3, #24
 8009c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c82:	ee07 3a90 	vmov	s15, r3
 8009c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c92:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c9e:	ee17 2a90 	vmov	r2, s15
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009ca6:	e008      	b.n	8009cba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	609a      	str	r2, [r3, #8]
}
 8009cba:	bf00      	nop
 8009cbc:	3724      	adds	r7, #36	; 0x24
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	58024400 	.word	0x58024400
 8009ccc:	03d09000 	.word	0x03d09000
 8009cd0:	46000000 	.word	0x46000000
 8009cd4:	4c742400 	.word	0x4c742400
 8009cd8:	4a742400 	.word	0x4a742400
 8009cdc:	4af42400 	.word	0x4af42400

08009ce0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b089      	sub	sp, #36	; 0x24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ce8:	4ba1      	ldr	r3, [pc, #644]	; (8009f70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cec:	f003 0303 	and.w	r3, r3, #3
 8009cf0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009cf2:	4b9f      	ldr	r3, [pc, #636]	; (8009f70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf6:	0d1b      	lsrs	r3, r3, #20
 8009cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cfc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009cfe:	4b9c      	ldr	r3, [pc, #624]	; (8009f70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d02:	0a1b      	lsrs	r3, r3, #8
 8009d04:	f003 0301 	and.w	r3, r3, #1
 8009d08:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009d0a:	4b99      	ldr	r3, [pc, #612]	; (8009f70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d0e:	08db      	lsrs	r3, r3, #3
 8009d10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	fb02 f303 	mul.w	r3, r2, r3
 8009d1a:	ee07 3a90 	vmov	s15, r3
 8009d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	f000 8111 	beq.w	8009f50 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	f000 8083 	beq.w	8009e3c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	f200 80a1 	bhi.w	8009e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d003      	beq.n	8009d4c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d056      	beq.n	8009df8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009d4a:	e099      	b.n	8009e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d4c:	4b88      	ldr	r3, [pc, #544]	; (8009f70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f003 0320 	and.w	r3, r3, #32
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d02d      	beq.n	8009db4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d58:	4b85      	ldr	r3, [pc, #532]	; (8009f70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	08db      	lsrs	r3, r3, #3
 8009d5e:	f003 0303 	and.w	r3, r3, #3
 8009d62:	4a84      	ldr	r2, [pc, #528]	; (8009f74 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009d64:	fa22 f303 	lsr.w	r3, r2, r3
 8009d68:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	ee07 3a90 	vmov	s15, r3
 8009d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	ee07 3a90 	vmov	s15, r3
 8009d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d82:	4b7b      	ldr	r3, [pc, #492]	; (8009f70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d8a:	ee07 3a90 	vmov	s15, r3
 8009d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d96:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009f78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009db2:	e087      	b.n	8009ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	ee07 3a90 	vmov	s15, r3
 8009dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dbe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dc6:	4b6a      	ldr	r3, [pc, #424]	; (8009f70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dce:	ee07 3a90 	vmov	s15, r3
 8009dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dda:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009f78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009df2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009df6:	e065      	b.n	8009ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	ee07 3a90 	vmov	s15, r3
 8009dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e0a:	4b59      	ldr	r3, [pc, #356]	; (8009f70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e12:	ee07 3a90 	vmov	s15, r3
 8009e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009f78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e3a:	e043      	b.n	8009ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	ee07 3a90 	vmov	s15, r3
 8009e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009f84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e4e:	4b48      	ldr	r3, [pc, #288]	; (8009f70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e56:	ee07 3a90 	vmov	s15, r3
 8009e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e62:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009f78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e7e:	e021      	b.n	8009ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	ee07 3a90 	vmov	s15, r3
 8009e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e92:	4b37      	ldr	r3, [pc, #220]	; (8009f70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e9a:	ee07 3a90 	vmov	s15, r3
 8009e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ea6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009f78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ebe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ec2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009ec4:	4b2a      	ldr	r3, [pc, #168]	; (8009f70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec8:	0a5b      	lsrs	r3, r3, #9
 8009eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ece:	ee07 3a90 	vmov	s15, r3
 8009ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ed6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009eda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ede:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eea:	ee17 2a90 	vmov	r2, s15
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009ef2:	4b1f      	ldr	r3, [pc, #124]	; (8009f70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef6:	0c1b      	lsrs	r3, r3, #16
 8009ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009efc:	ee07 3a90 	vmov	s15, r3
 8009f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f18:	ee17 2a90 	vmov	r2, s15
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009f20:	4b13      	ldr	r3, [pc, #76]	; (8009f70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f24:	0e1b      	lsrs	r3, r3, #24
 8009f26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f2a:	ee07 3a90 	vmov	s15, r3
 8009f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f46:	ee17 2a90 	vmov	r2, s15
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009f4e:	e008      	b.n	8009f62 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	609a      	str	r2, [r3, #8]
}
 8009f62:	bf00      	nop
 8009f64:	3724      	adds	r7, #36	; 0x24
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	58024400 	.word	0x58024400
 8009f74:	03d09000 	.word	0x03d09000
 8009f78:	46000000 	.word	0x46000000
 8009f7c:	4c742400 	.word	0x4c742400
 8009f80:	4a742400 	.word	0x4a742400
 8009f84:	4af42400 	.word	0x4af42400

08009f88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f92:	2300      	movs	r3, #0
 8009f94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f96:	4b53      	ldr	r3, [pc, #332]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 8009f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f9a:	f003 0303 	and.w	r3, r3, #3
 8009f9e:	2b03      	cmp	r3, #3
 8009fa0:	d101      	bne.n	8009fa6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e099      	b.n	800a0da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009fa6:	4b4f      	ldr	r3, [pc, #316]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a4e      	ldr	r2, [pc, #312]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 8009fac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009fb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fb2:	f7fa fda5 	bl	8004b00 <HAL_GetTick>
 8009fb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009fb8:	e008      	b.n	8009fcc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009fba:	f7fa fda1 	bl	8004b00 <HAL_GetTick>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d901      	bls.n	8009fcc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	e086      	b.n	800a0da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009fcc:	4b45      	ldr	r3, [pc, #276]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d1f0      	bne.n	8009fba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009fd8:	4b42      	ldr	r3, [pc, #264]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 8009fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fdc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	031b      	lsls	r3, r3, #12
 8009fe6:	493f      	ldr	r1, [pc, #252]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	628b      	str	r3, [r1, #40]	; 0x28
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	3b01      	subs	r3, #1
 8009ffc:	025b      	lsls	r3, r3, #9
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	431a      	orrs	r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	3b01      	subs	r3, #1
 800a008:	041b      	lsls	r3, r3, #16
 800a00a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a00e:	431a      	orrs	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	3b01      	subs	r3, #1
 800a016:	061b      	lsls	r3, r3, #24
 800a018:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a01c:	4931      	ldr	r1, [pc, #196]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 800a01e:	4313      	orrs	r3, r2
 800a020:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a022:	4b30      	ldr	r3, [pc, #192]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 800a024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a026:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	695b      	ldr	r3, [r3, #20]
 800a02e:	492d      	ldr	r1, [pc, #180]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 800a030:	4313      	orrs	r3, r2
 800a032:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a034:	4b2b      	ldr	r3, [pc, #172]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 800a036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a038:	f023 0220 	bic.w	r2, r3, #32
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	4928      	ldr	r1, [pc, #160]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 800a042:	4313      	orrs	r3, r2
 800a044:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a046:	4b27      	ldr	r3, [pc, #156]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 800a048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04a:	4a26      	ldr	r2, [pc, #152]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 800a04c:	f023 0310 	bic.w	r3, r3, #16
 800a050:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a052:	4b24      	ldr	r3, [pc, #144]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 800a054:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a056:	4b24      	ldr	r3, [pc, #144]	; (800a0e8 <RCCEx_PLL2_Config+0x160>)
 800a058:	4013      	ands	r3, r2
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	69d2      	ldr	r2, [r2, #28]
 800a05e:	00d2      	lsls	r2, r2, #3
 800a060:	4920      	ldr	r1, [pc, #128]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 800a062:	4313      	orrs	r3, r2
 800a064:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a066:	4b1f      	ldr	r3, [pc, #124]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 800a068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06a:	4a1e      	ldr	r2, [pc, #120]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 800a06c:	f043 0310 	orr.w	r3, r3, #16
 800a070:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d106      	bne.n	800a086 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a078:	4b1a      	ldr	r3, [pc, #104]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 800a07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07c:	4a19      	ldr	r2, [pc, #100]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 800a07e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a082:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a084:	e00f      	b.n	800a0a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d106      	bne.n	800a09a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a08c:	4b15      	ldr	r3, [pc, #84]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 800a08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a090:	4a14      	ldr	r2, [pc, #80]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 800a092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a096:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a098:	e005      	b.n	800a0a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a09a:	4b12      	ldr	r3, [pc, #72]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 800a09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09e:	4a11      	ldr	r2, [pc, #68]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 800a0a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a0a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a0a6:	4b0f      	ldr	r3, [pc, #60]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a0e      	ldr	r2, [pc, #56]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 800a0ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a0b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0b2:	f7fa fd25 	bl	8004b00 <HAL_GetTick>
 800a0b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0b8:	e008      	b.n	800a0cc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a0ba:	f7fa fd21 	bl	8004b00 <HAL_GetTick>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	1ad3      	subs	r3, r2, r3
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	d901      	bls.n	800a0cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e006      	b.n	800a0da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0cc:	4b05      	ldr	r3, [pc, #20]	; (800a0e4 <RCCEx_PLL2_Config+0x15c>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d0f0      	beq.n	800a0ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	58024400 	.word	0x58024400
 800a0e8:	ffff0007 	.word	0xffff0007

0800a0ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a0fa:	4b53      	ldr	r3, [pc, #332]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0fe:	f003 0303 	and.w	r3, r3, #3
 800a102:	2b03      	cmp	r3, #3
 800a104:	d101      	bne.n	800a10a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e099      	b.n	800a23e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a10a:	4b4f      	ldr	r3, [pc, #316]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a4e      	ldr	r2, [pc, #312]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a114:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a116:	f7fa fcf3 	bl	8004b00 <HAL_GetTick>
 800a11a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a11c:	e008      	b.n	800a130 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a11e:	f7fa fcef 	bl	8004b00 <HAL_GetTick>
 800a122:	4602      	mov	r2, r0
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	1ad3      	subs	r3, r2, r3
 800a128:	2b02      	cmp	r3, #2
 800a12a:	d901      	bls.n	800a130 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a12c:	2303      	movs	r3, #3
 800a12e:	e086      	b.n	800a23e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a130:	4b45      	ldr	r3, [pc, #276]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1f0      	bne.n	800a11e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a13c:	4b42      	ldr	r3, [pc, #264]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a140:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	051b      	lsls	r3, r3, #20
 800a14a:	493f      	ldr	r1, [pc, #252]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a14c:	4313      	orrs	r3, r2
 800a14e:	628b      	str	r3, [r1, #40]	; 0x28
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	3b01      	subs	r3, #1
 800a156:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	3b01      	subs	r3, #1
 800a160:	025b      	lsls	r3, r3, #9
 800a162:	b29b      	uxth	r3, r3
 800a164:	431a      	orrs	r2, r3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	3b01      	subs	r3, #1
 800a16c:	041b      	lsls	r3, r3, #16
 800a16e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a172:	431a      	orrs	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	3b01      	subs	r3, #1
 800a17a:	061b      	lsls	r3, r3, #24
 800a17c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a180:	4931      	ldr	r1, [pc, #196]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a182:	4313      	orrs	r3, r2
 800a184:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a186:	4b30      	ldr	r3, [pc, #192]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	695b      	ldr	r3, [r3, #20]
 800a192:	492d      	ldr	r1, [pc, #180]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a194:	4313      	orrs	r3, r2
 800a196:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a198:	4b2b      	ldr	r3, [pc, #172]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	699b      	ldr	r3, [r3, #24]
 800a1a4:	4928      	ldr	r1, [pc, #160]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a1aa:	4b27      	ldr	r3, [pc, #156]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ae:	4a26      	ldr	r2, [pc, #152]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a1b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a1b6:	4b24      	ldr	r3, [pc, #144]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a1b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1ba:	4b24      	ldr	r3, [pc, #144]	; (800a24c <RCCEx_PLL3_Config+0x160>)
 800a1bc:	4013      	ands	r3, r2
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	69d2      	ldr	r2, [r2, #28]
 800a1c2:	00d2      	lsls	r2, r2, #3
 800a1c4:	4920      	ldr	r1, [pc, #128]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a1ca:	4b1f      	ldr	r3, [pc, #124]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ce:	4a1e      	ldr	r2, [pc, #120]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a1d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d106      	bne.n	800a1ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a1dc:	4b1a      	ldr	r3, [pc, #104]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e0:	4a19      	ldr	r2, [pc, #100]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a1e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a1e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a1e8:	e00f      	b.n	800a20a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d106      	bne.n	800a1fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a1f0:	4b15      	ldr	r3, [pc, #84]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f4:	4a14      	ldr	r2, [pc, #80]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a1f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a1fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a1fc:	e005      	b.n	800a20a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a1fe:	4b12      	ldr	r3, [pc, #72]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a202:	4a11      	ldr	r2, [pc, #68]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a204:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a208:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a20a:	4b0f      	ldr	r3, [pc, #60]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a0e      	ldr	r2, [pc, #56]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a216:	f7fa fc73 	bl	8004b00 <HAL_GetTick>
 800a21a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a21c:	e008      	b.n	800a230 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a21e:	f7fa fc6f 	bl	8004b00 <HAL_GetTick>
 800a222:	4602      	mov	r2, r0
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	1ad3      	subs	r3, r2, r3
 800a228:	2b02      	cmp	r3, #2
 800a22a:	d901      	bls.n	800a230 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a22c:	2303      	movs	r3, #3
 800a22e:	e006      	b.n	800a23e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a230:	4b05      	ldr	r3, [pc, #20]	; (800a248 <RCCEx_PLL3_Config+0x15c>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d0f0      	beq.n	800a21e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	58024400 	.word	0x58024400
 800a24c:	ffff0007 	.word	0xffff0007

0800a250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d101      	bne.n	800a262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	e049      	b.n	800a2f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d106      	bne.n	800a27c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f7f9 ffb2 	bl	80041e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2202      	movs	r2, #2
 800a280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	3304      	adds	r3, #4
 800a28c:	4619      	mov	r1, r3
 800a28e:	4610      	mov	r0, r2
 800a290:	f000 fe0c 	bl	800aeac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2201      	movs	r2, #1
 800a298:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
	...

0800a300 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a300:	b480      	push	{r7}
 800a302:	b085      	sub	sp, #20
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	2b01      	cmp	r3, #1
 800a312:	d001      	beq.n	800a318 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e05e      	b.n	800a3d6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2202      	movs	r2, #2
 800a31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	68da      	ldr	r2, [r3, #12]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f042 0201 	orr.w	r2, r2, #1
 800a32e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a2b      	ldr	r2, [pc, #172]	; (800a3e4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d02c      	beq.n	800a394 <HAL_TIM_Base_Start_IT+0x94>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a342:	d027      	beq.n	800a394 <HAL_TIM_Base_Start_IT+0x94>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a27      	ldr	r2, [pc, #156]	; (800a3e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d022      	beq.n	800a394 <HAL_TIM_Base_Start_IT+0x94>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a26      	ldr	r2, [pc, #152]	; (800a3ec <HAL_TIM_Base_Start_IT+0xec>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d01d      	beq.n	800a394 <HAL_TIM_Base_Start_IT+0x94>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a24      	ldr	r2, [pc, #144]	; (800a3f0 <HAL_TIM_Base_Start_IT+0xf0>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d018      	beq.n	800a394 <HAL_TIM_Base_Start_IT+0x94>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a23      	ldr	r2, [pc, #140]	; (800a3f4 <HAL_TIM_Base_Start_IT+0xf4>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d013      	beq.n	800a394 <HAL_TIM_Base_Start_IT+0x94>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a21      	ldr	r2, [pc, #132]	; (800a3f8 <HAL_TIM_Base_Start_IT+0xf8>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d00e      	beq.n	800a394 <HAL_TIM_Base_Start_IT+0x94>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a20      	ldr	r2, [pc, #128]	; (800a3fc <HAL_TIM_Base_Start_IT+0xfc>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d009      	beq.n	800a394 <HAL_TIM_Base_Start_IT+0x94>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a1e      	ldr	r2, [pc, #120]	; (800a400 <HAL_TIM_Base_Start_IT+0x100>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d004      	beq.n	800a394 <HAL_TIM_Base_Start_IT+0x94>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a1d      	ldr	r2, [pc, #116]	; (800a404 <HAL_TIM_Base_Start_IT+0x104>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d115      	bne.n	800a3c0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	689a      	ldr	r2, [r3, #8]
 800a39a:	4b1b      	ldr	r3, [pc, #108]	; (800a408 <HAL_TIM_Base_Start_IT+0x108>)
 800a39c:	4013      	ands	r3, r2
 800a39e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2b06      	cmp	r3, #6
 800a3a4:	d015      	beq.n	800a3d2 <HAL_TIM_Base_Start_IT+0xd2>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3ac:	d011      	beq.n	800a3d2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f042 0201 	orr.w	r2, r2, #1
 800a3bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3be:	e008      	b.n	800a3d2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f042 0201 	orr.w	r2, r2, #1
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	e000      	b.n	800a3d4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3714      	adds	r7, #20
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	40010000 	.word	0x40010000
 800a3e8:	40000400 	.word	0x40000400
 800a3ec:	40000800 	.word	0x40000800
 800a3f0:	40000c00 	.word	0x40000c00
 800a3f4:	40010400 	.word	0x40010400
 800a3f8:	40001800 	.word	0x40001800
 800a3fc:	40014000 	.word	0x40014000
 800a400:	4000e000 	.word	0x4000e000
 800a404:	4000e400 	.word	0x4000e400
 800a408:	00010007 	.word	0x00010007

0800a40c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d101      	bne.n	800a41e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	e049      	b.n	800a4b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a424:	b2db      	uxtb	r3, r3
 800a426:	2b00      	cmp	r3, #0
 800a428:	d106      	bne.n	800a438 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f7f9 fe8c 	bl	8004150 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2202      	movs	r2, #2
 800a43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	3304      	adds	r3, #4
 800a448:	4619      	mov	r1, r3
 800a44a:	4610      	mov	r0, r2
 800a44c:	f000 fd2e 	bl	800aeac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2201      	movs	r2, #1
 800a45c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2201      	movs	r2, #1
 800a464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2201      	movs	r2, #1
 800a47c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3708      	adds	r7, #8
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
	...

0800a4bc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d109      	bne.n	800a4e4 <HAL_TIM_PWM_Start_IT+0x28>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	bf14      	ite	ne
 800a4dc:	2301      	movne	r3, #1
 800a4de:	2300      	moveq	r3, #0
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	e03c      	b.n	800a55e <HAL_TIM_PWM_Start_IT+0xa2>
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	2b04      	cmp	r3, #4
 800a4e8:	d109      	bne.n	800a4fe <HAL_TIM_PWM_Start_IT+0x42>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	bf14      	ite	ne
 800a4f6:	2301      	movne	r3, #1
 800a4f8:	2300      	moveq	r3, #0
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	e02f      	b.n	800a55e <HAL_TIM_PWM_Start_IT+0xa2>
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	2b08      	cmp	r3, #8
 800a502:	d109      	bne.n	800a518 <HAL_TIM_PWM_Start_IT+0x5c>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	bf14      	ite	ne
 800a510:	2301      	movne	r3, #1
 800a512:	2300      	moveq	r3, #0
 800a514:	b2db      	uxtb	r3, r3
 800a516:	e022      	b.n	800a55e <HAL_TIM_PWM_Start_IT+0xa2>
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	2b0c      	cmp	r3, #12
 800a51c:	d109      	bne.n	800a532 <HAL_TIM_PWM_Start_IT+0x76>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b01      	cmp	r3, #1
 800a528:	bf14      	ite	ne
 800a52a:	2301      	movne	r3, #1
 800a52c:	2300      	moveq	r3, #0
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	e015      	b.n	800a55e <HAL_TIM_PWM_Start_IT+0xa2>
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2b10      	cmp	r3, #16
 800a536:	d109      	bne.n	800a54c <HAL_TIM_PWM_Start_IT+0x90>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	2b01      	cmp	r3, #1
 800a542:	bf14      	ite	ne
 800a544:	2301      	movne	r3, #1
 800a546:	2300      	moveq	r3, #0
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	e008      	b.n	800a55e <HAL_TIM_PWM_Start_IT+0xa2>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a552:	b2db      	uxtb	r3, r3
 800a554:	2b01      	cmp	r3, #1
 800a556:	bf14      	ite	ne
 800a558:	2301      	movne	r3, #1
 800a55a:	2300      	moveq	r3, #0
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d001      	beq.n	800a566 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	e0f6      	b.n	800a754 <HAL_TIM_PWM_Start_IT+0x298>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d104      	bne.n	800a576 <HAL_TIM_PWM_Start_IT+0xba>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2202      	movs	r2, #2
 800a570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a574:	e023      	b.n	800a5be <HAL_TIM_PWM_Start_IT+0x102>
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b04      	cmp	r3, #4
 800a57a:	d104      	bne.n	800a586 <HAL_TIM_PWM_Start_IT+0xca>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2202      	movs	r2, #2
 800a580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a584:	e01b      	b.n	800a5be <HAL_TIM_PWM_Start_IT+0x102>
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	2b08      	cmp	r3, #8
 800a58a:	d104      	bne.n	800a596 <HAL_TIM_PWM_Start_IT+0xda>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2202      	movs	r2, #2
 800a590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a594:	e013      	b.n	800a5be <HAL_TIM_PWM_Start_IT+0x102>
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	2b0c      	cmp	r3, #12
 800a59a:	d104      	bne.n	800a5a6 <HAL_TIM_PWM_Start_IT+0xea>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2202      	movs	r2, #2
 800a5a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5a4:	e00b      	b.n	800a5be <HAL_TIM_PWM_Start_IT+0x102>
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	2b10      	cmp	r3, #16
 800a5aa:	d104      	bne.n	800a5b6 <HAL_TIM_PWM_Start_IT+0xfa>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5b4:	e003      	b.n	800a5be <HAL_TIM_PWM_Start_IT+0x102>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2202      	movs	r2, #2
 800a5ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	2b0c      	cmp	r3, #12
 800a5c2:	d841      	bhi.n	800a648 <HAL_TIM_PWM_Start_IT+0x18c>
 800a5c4:	a201      	add	r2, pc, #4	; (adr r2, 800a5cc <HAL_TIM_PWM_Start_IT+0x110>)
 800a5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ca:	bf00      	nop
 800a5cc:	0800a601 	.word	0x0800a601
 800a5d0:	0800a649 	.word	0x0800a649
 800a5d4:	0800a649 	.word	0x0800a649
 800a5d8:	0800a649 	.word	0x0800a649
 800a5dc:	0800a613 	.word	0x0800a613
 800a5e0:	0800a649 	.word	0x0800a649
 800a5e4:	0800a649 	.word	0x0800a649
 800a5e8:	0800a649 	.word	0x0800a649
 800a5ec:	0800a625 	.word	0x0800a625
 800a5f0:	0800a649 	.word	0x0800a649
 800a5f4:	0800a649 	.word	0x0800a649
 800a5f8:	0800a649 	.word	0x0800a649
 800a5fc:	0800a637 	.word	0x0800a637
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68da      	ldr	r2, [r3, #12]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f042 0202 	orr.w	r2, r2, #2
 800a60e:	60da      	str	r2, [r3, #12]
      break;
 800a610:	e01d      	b.n	800a64e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68da      	ldr	r2, [r3, #12]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f042 0204 	orr.w	r2, r2, #4
 800a620:	60da      	str	r2, [r3, #12]
      break;
 800a622:	e014      	b.n	800a64e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	68da      	ldr	r2, [r3, #12]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f042 0208 	orr.w	r2, r2, #8
 800a632:	60da      	str	r2, [r3, #12]
      break;
 800a634:	e00b      	b.n	800a64e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68da      	ldr	r2, [r3, #12]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f042 0210 	orr.w	r2, r2, #16
 800a644:	60da      	str	r2, [r3, #12]
      break;
 800a646:	e002      	b.n	800a64e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	73fb      	strb	r3, [r7, #15]
      break;
 800a64c:	bf00      	nop
  }

  if (status == HAL_OK)
 800a64e:	7bfb      	ldrb	r3, [r7, #15]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d17e      	bne.n	800a752 <HAL_TIM_PWM_Start_IT+0x296>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2201      	movs	r2, #1
 800a65a:	6839      	ldr	r1, [r7, #0]
 800a65c:	4618      	mov	r0, r3
 800a65e:	f000 ffa1 	bl	800b5a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a3d      	ldr	r2, [pc, #244]	; (800a75c <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d013      	beq.n	800a694 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a3b      	ldr	r2, [pc, #236]	; (800a760 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d00e      	beq.n	800a694 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a3a      	ldr	r2, [pc, #232]	; (800a764 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d009      	beq.n	800a694 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a38      	ldr	r2, [pc, #224]	; (800a768 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d004      	beq.n	800a694 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a37      	ldr	r2, [pc, #220]	; (800a76c <HAL_TIM_PWM_Start_IT+0x2b0>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d101      	bne.n	800a698 <HAL_TIM_PWM_Start_IT+0x1dc>
 800a694:	2301      	movs	r3, #1
 800a696:	e000      	b.n	800a69a <HAL_TIM_PWM_Start_IT+0x1de>
 800a698:	2300      	movs	r3, #0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d007      	beq.n	800a6ae <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a2a      	ldr	r2, [pc, #168]	; (800a75c <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d02c      	beq.n	800a712 <HAL_TIM_PWM_Start_IT+0x256>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6c0:	d027      	beq.n	800a712 <HAL_TIM_PWM_Start_IT+0x256>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4a2a      	ldr	r2, [pc, #168]	; (800a770 <HAL_TIM_PWM_Start_IT+0x2b4>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d022      	beq.n	800a712 <HAL_TIM_PWM_Start_IT+0x256>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a28      	ldr	r2, [pc, #160]	; (800a774 <HAL_TIM_PWM_Start_IT+0x2b8>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d01d      	beq.n	800a712 <HAL_TIM_PWM_Start_IT+0x256>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a27      	ldr	r2, [pc, #156]	; (800a778 <HAL_TIM_PWM_Start_IT+0x2bc>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d018      	beq.n	800a712 <HAL_TIM_PWM_Start_IT+0x256>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a1e      	ldr	r2, [pc, #120]	; (800a760 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d013      	beq.n	800a712 <HAL_TIM_PWM_Start_IT+0x256>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a23      	ldr	r2, [pc, #140]	; (800a77c <HAL_TIM_PWM_Start_IT+0x2c0>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d00e      	beq.n	800a712 <HAL_TIM_PWM_Start_IT+0x256>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a1a      	ldr	r2, [pc, #104]	; (800a764 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d009      	beq.n	800a712 <HAL_TIM_PWM_Start_IT+0x256>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a1f      	ldr	r2, [pc, #124]	; (800a780 <HAL_TIM_PWM_Start_IT+0x2c4>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d004      	beq.n	800a712 <HAL_TIM_PWM_Start_IT+0x256>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a1d      	ldr	r2, [pc, #116]	; (800a784 <HAL_TIM_PWM_Start_IT+0x2c8>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d115      	bne.n	800a73e <HAL_TIM_PWM_Start_IT+0x282>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	689a      	ldr	r2, [r3, #8]
 800a718:	4b1b      	ldr	r3, [pc, #108]	; (800a788 <HAL_TIM_PWM_Start_IT+0x2cc>)
 800a71a:	4013      	ands	r3, r2
 800a71c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	2b06      	cmp	r3, #6
 800a722:	d015      	beq.n	800a750 <HAL_TIM_PWM_Start_IT+0x294>
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a72a:	d011      	beq.n	800a750 <HAL_TIM_PWM_Start_IT+0x294>
      {
        __HAL_TIM_ENABLE(htim);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f042 0201 	orr.w	r2, r2, #1
 800a73a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a73c:	e008      	b.n	800a750 <HAL_TIM_PWM_Start_IT+0x294>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f042 0201 	orr.w	r2, r2, #1
 800a74c:	601a      	str	r2, [r3, #0]
 800a74e:	e000      	b.n	800a752 <HAL_TIM_PWM_Start_IT+0x296>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a750:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a752:	7bfb      	ldrb	r3, [r7, #15]
}
 800a754:	4618      	mov	r0, r3
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	40010000 	.word	0x40010000
 800a760:	40010400 	.word	0x40010400
 800a764:	40014000 	.word	0x40014000
 800a768:	40014400 	.word	0x40014400
 800a76c:	40014800 	.word	0x40014800
 800a770:	40000400 	.word	0x40000400
 800a774:	40000800 	.word	0x40000800
 800a778:	40000c00 	.word	0x40000c00
 800a77c:	40001800 	.word	0x40001800
 800a780:	4000e000 	.word	0x4000e000
 800a784:	4000e400 	.word	0x4000e400
 800a788:	00010007 	.word	0x00010007

0800a78c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b086      	sub	sp, #24
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d101      	bne.n	800a7a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a79c:	2301      	movs	r3, #1
 800a79e:	e08f      	b.n	800a8c0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d106      	bne.n	800a7ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f7f9 fbbd 	bl	8003f34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2202      	movs	r2, #2
 800a7be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	6899      	ldr	r1, [r3, #8]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	4b3e      	ldr	r3, [pc, #248]	; (800a8c8 <HAL_TIM_Encoder_Init+0x13c>)
 800a7ce:	400b      	ands	r3, r1
 800a7d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	3304      	adds	r3, #4
 800a7da:	4619      	mov	r1, r3
 800a7dc:	4610      	mov	r0, r2
 800a7de:	f000 fb65 	bl	800aeac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	699b      	ldr	r3, [r3, #24]
 800a7f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	6a1b      	ldr	r3, [r3, #32]
 800a7f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	697a      	ldr	r2, [r7, #20]
 800a800:	4313      	orrs	r3, r2
 800a802:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a804:	693a      	ldr	r2, [r7, #16]
 800a806:	4b31      	ldr	r3, [pc, #196]	; (800a8cc <HAL_TIM_Encoder_Init+0x140>)
 800a808:	4013      	ands	r3, r2
 800a80a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	689a      	ldr	r2, [r3, #8]
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	699b      	ldr	r3, [r3, #24]
 800a814:	021b      	lsls	r3, r3, #8
 800a816:	4313      	orrs	r3, r2
 800a818:	693a      	ldr	r2, [r7, #16]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a81e:	693a      	ldr	r2, [r7, #16]
 800a820:	4b2b      	ldr	r3, [pc, #172]	; (800a8d0 <HAL_TIM_Encoder_Init+0x144>)
 800a822:	4013      	ands	r3, r2
 800a824:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a826:	693a      	ldr	r2, [r7, #16]
 800a828:	4b2a      	ldr	r3, [pc, #168]	; (800a8d4 <HAL_TIM_Encoder_Init+0x148>)
 800a82a:	4013      	ands	r3, r2
 800a82c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	68da      	ldr	r2, [r3, #12]
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	69db      	ldr	r3, [r3, #28]
 800a836:	021b      	lsls	r3, r3, #8
 800a838:	4313      	orrs	r3, r2
 800a83a:	693a      	ldr	r2, [r7, #16]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	011a      	lsls	r2, r3, #4
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	6a1b      	ldr	r3, [r3, #32]
 800a84a:	031b      	lsls	r3, r3, #12
 800a84c:	4313      	orrs	r3, r2
 800a84e:	693a      	ldr	r2, [r7, #16]
 800a850:	4313      	orrs	r3, r2
 800a852:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a85a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a862:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	695b      	ldr	r3, [r3, #20]
 800a86c:	011b      	lsls	r3, r3, #4
 800a86e:	4313      	orrs	r3, r2
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	4313      	orrs	r3, r2
 800a874:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	697a      	ldr	r2, [r7, #20]
 800a87c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	693a      	ldr	r2, [r7, #16]
 800a884:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2201      	movs	r2, #1
 800a892:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3718      	adds	r7, #24
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	fffebff8 	.word	0xfffebff8
 800a8cc:	fffffcfc 	.word	0xfffffcfc
 800a8d0:	fffff3f3 	.word	0xfffff3f3
 800a8d4:	ffff0f0f 	.word	0xffff0f0f

0800a8d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a8e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a8f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a900:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d110      	bne.n	800a92a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a908:	7bfb      	ldrb	r3, [r7, #15]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d102      	bne.n	800a914 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a90e:	7b7b      	ldrb	r3, [r7, #13]
 800a910:	2b01      	cmp	r3, #1
 800a912:	d001      	beq.n	800a918 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	e069      	b.n	800a9ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2202      	movs	r2, #2
 800a91c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2202      	movs	r2, #2
 800a924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a928:	e031      	b.n	800a98e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	2b04      	cmp	r3, #4
 800a92e:	d110      	bne.n	800a952 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a930:	7bbb      	ldrb	r3, [r7, #14]
 800a932:	2b01      	cmp	r3, #1
 800a934:	d102      	bne.n	800a93c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a936:	7b3b      	ldrb	r3, [r7, #12]
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d001      	beq.n	800a940 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
 800a93e:	e055      	b.n	800a9ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2202      	movs	r2, #2
 800a944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2202      	movs	r2, #2
 800a94c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a950:	e01d      	b.n	800a98e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a952:	7bfb      	ldrb	r3, [r7, #15]
 800a954:	2b01      	cmp	r3, #1
 800a956:	d108      	bne.n	800a96a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a958:	7bbb      	ldrb	r3, [r7, #14]
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d105      	bne.n	800a96a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a95e:	7b7b      	ldrb	r3, [r7, #13]
 800a960:	2b01      	cmp	r3, #1
 800a962:	d102      	bne.n	800a96a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a964:	7b3b      	ldrb	r3, [r7, #12]
 800a966:	2b01      	cmp	r3, #1
 800a968:	d001      	beq.n	800a96e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	e03e      	b.n	800a9ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2202      	movs	r2, #2
 800a972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2202      	movs	r2, #2
 800a97a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2202      	movs	r2, #2
 800a982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2202      	movs	r2, #2
 800a98a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d003      	beq.n	800a99c <HAL_TIM_Encoder_Start+0xc4>
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	2b04      	cmp	r3, #4
 800a998:	d008      	beq.n	800a9ac <HAL_TIM_Encoder_Start+0xd4>
 800a99a:	e00f      	b.n	800a9bc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f000 fdfd 	bl	800b5a4 <TIM_CCxChannelCmd>
      break;
 800a9aa:	e016      	b.n	800a9da <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	2104      	movs	r1, #4
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f000 fdf5 	bl	800b5a4 <TIM_CCxChannelCmd>
      break;
 800a9ba:	e00e      	b.n	800a9da <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	2100      	movs	r1, #0
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f000 fded 	bl	800b5a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	2104      	movs	r1, #4
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f000 fde6 	bl	800b5a4 <TIM_CCxChannelCmd>
      break;
 800a9d8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f042 0201 	orr.w	r2, r2, #1
 800a9e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a9ea:	2300      	movs	r3, #0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	f003 0302 	and.w	r3, r3, #2
 800aa06:	2b02      	cmp	r3, #2
 800aa08:	d122      	bne.n	800aa50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	f003 0302 	and.w	r3, r3, #2
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	d11b      	bne.n	800aa50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f06f 0202 	mvn.w	r2, #2
 800aa20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2201      	movs	r2, #1
 800aa26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	699b      	ldr	r3, [r3, #24]
 800aa2e:	f003 0303 	and.w	r3, r3, #3
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d003      	beq.n	800aa3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 fa1a 	bl	800ae70 <HAL_TIM_IC_CaptureCallback>
 800aa3c:	e005      	b.n	800aa4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fa0c 	bl	800ae5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 fa1d 	bl	800ae84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	691b      	ldr	r3, [r3, #16]
 800aa56:	f003 0304 	and.w	r3, r3, #4
 800aa5a:	2b04      	cmp	r3, #4
 800aa5c:	d122      	bne.n	800aaa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	2b04      	cmp	r3, #4
 800aa6a:	d11b      	bne.n	800aaa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f06f 0204 	mvn.w	r2, #4
 800aa74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2202      	movs	r2, #2
 800aa7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	699b      	ldr	r3, [r3, #24]
 800aa82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d003      	beq.n	800aa92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 f9f0 	bl	800ae70 <HAL_TIM_IC_CaptureCallback>
 800aa90:	e005      	b.n	800aa9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 f9e2 	bl	800ae5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 f9f3 	bl	800ae84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	691b      	ldr	r3, [r3, #16]
 800aaaa:	f003 0308 	and.w	r3, r3, #8
 800aaae:	2b08      	cmp	r3, #8
 800aab0:	d122      	bne.n	800aaf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	f003 0308 	and.w	r3, r3, #8
 800aabc:	2b08      	cmp	r3, #8
 800aabe:	d11b      	bne.n	800aaf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f06f 0208 	mvn.w	r2, #8
 800aac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2204      	movs	r2, #4
 800aace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	69db      	ldr	r3, [r3, #28]
 800aad6:	f003 0303 	and.w	r3, r3, #3
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d003      	beq.n	800aae6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 f9c6 	bl	800ae70 <HAL_TIM_IC_CaptureCallback>
 800aae4:	e005      	b.n	800aaf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 f9b8 	bl	800ae5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f9c9 	bl	800ae84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	f003 0310 	and.w	r3, r3, #16
 800ab02:	2b10      	cmp	r3, #16
 800ab04:	d122      	bne.n	800ab4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	f003 0310 	and.w	r3, r3, #16
 800ab10:	2b10      	cmp	r3, #16
 800ab12:	d11b      	bne.n	800ab4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f06f 0210 	mvn.w	r2, #16
 800ab1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2208      	movs	r2, #8
 800ab22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	69db      	ldr	r3, [r3, #28]
 800ab2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d003      	beq.n	800ab3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f99c 	bl	800ae70 <HAL_TIM_IC_CaptureCallback>
 800ab38:	e005      	b.n	800ab46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 f98e 	bl	800ae5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 f99f 	bl	800ae84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	f003 0301 	and.w	r3, r3, #1
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d10e      	bne.n	800ab78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	f003 0301 	and.w	r3, r3, #1
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d107      	bne.n	800ab78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f06f 0201 	mvn.w	r2, #1
 800ab70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f7f9 fdd0 	bl	8004718 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab82:	2b80      	cmp	r3, #128	; 0x80
 800ab84:	d10e      	bne.n	800aba4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab90:	2b80      	cmp	r3, #128	; 0x80
 800ab92:	d107      	bne.n	800aba4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ab9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 fe6c 	bl	800b87c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abb2:	d10e      	bne.n	800abd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abbe:	2b80      	cmp	r3, #128	; 0x80
 800abc0:	d107      	bne.n	800abd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800abca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 fe5f 	bl	800b890 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	691b      	ldr	r3, [r3, #16]
 800abd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abdc:	2b40      	cmp	r3, #64	; 0x40
 800abde:	d10e      	bne.n	800abfe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abea:	2b40      	cmp	r3, #64	; 0x40
 800abec:	d107      	bne.n	800abfe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800abf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 f94d 	bl	800ae98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	691b      	ldr	r3, [r3, #16]
 800ac04:	f003 0320 	and.w	r3, r3, #32
 800ac08:	2b20      	cmp	r3, #32
 800ac0a:	d10e      	bne.n	800ac2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	f003 0320 	and.w	r3, r3, #32
 800ac16:	2b20      	cmp	r3, #32
 800ac18:	d107      	bne.n	800ac2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f06f 0220 	mvn.w	r2, #32
 800ac22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 fe1f 	bl	800b868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac2a:	bf00      	nop
 800ac2c:	3708      	adds	r7, #8
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
	...

0800ac34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b086      	sub	sp, #24
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	60b9      	str	r1, [r7, #8]
 800ac3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d101      	bne.n	800ac52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ac4e:	2302      	movs	r3, #2
 800ac50:	e0ff      	b.n	800ae52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b14      	cmp	r3, #20
 800ac5e:	f200 80f0 	bhi.w	800ae42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ac62:	a201      	add	r2, pc, #4	; (adr r2, 800ac68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ac64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac68:	0800acbd 	.word	0x0800acbd
 800ac6c:	0800ae43 	.word	0x0800ae43
 800ac70:	0800ae43 	.word	0x0800ae43
 800ac74:	0800ae43 	.word	0x0800ae43
 800ac78:	0800acfd 	.word	0x0800acfd
 800ac7c:	0800ae43 	.word	0x0800ae43
 800ac80:	0800ae43 	.word	0x0800ae43
 800ac84:	0800ae43 	.word	0x0800ae43
 800ac88:	0800ad3f 	.word	0x0800ad3f
 800ac8c:	0800ae43 	.word	0x0800ae43
 800ac90:	0800ae43 	.word	0x0800ae43
 800ac94:	0800ae43 	.word	0x0800ae43
 800ac98:	0800ad7f 	.word	0x0800ad7f
 800ac9c:	0800ae43 	.word	0x0800ae43
 800aca0:	0800ae43 	.word	0x0800ae43
 800aca4:	0800ae43 	.word	0x0800ae43
 800aca8:	0800adc1 	.word	0x0800adc1
 800acac:	0800ae43 	.word	0x0800ae43
 800acb0:	0800ae43 	.word	0x0800ae43
 800acb4:	0800ae43 	.word	0x0800ae43
 800acb8:	0800ae01 	.word	0x0800ae01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	68b9      	ldr	r1, [r7, #8]
 800acc2:	4618      	mov	r0, r3
 800acc4:	f000 f998 	bl	800aff8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	699a      	ldr	r2, [r3, #24]
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f042 0208 	orr.w	r2, r2, #8
 800acd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	699a      	ldr	r2, [r3, #24]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f022 0204 	bic.w	r2, r2, #4
 800ace6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	6999      	ldr	r1, [r3, #24]
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	691a      	ldr	r2, [r3, #16]
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	430a      	orrs	r2, r1
 800acf8:	619a      	str	r2, [r3, #24]
      break;
 800acfa:	e0a5      	b.n	800ae48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	68b9      	ldr	r1, [r7, #8]
 800ad02:	4618      	mov	r0, r3
 800ad04:	f000 fa08 	bl	800b118 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	699a      	ldr	r2, [r3, #24]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	699a      	ldr	r2, [r3, #24]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	6999      	ldr	r1, [r3, #24]
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	021a      	lsls	r2, r3, #8
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	430a      	orrs	r2, r1
 800ad3a:	619a      	str	r2, [r3, #24]
      break;
 800ad3c:	e084      	b.n	800ae48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	68b9      	ldr	r1, [r7, #8]
 800ad44:	4618      	mov	r0, r3
 800ad46:	f000 fa71 	bl	800b22c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	69da      	ldr	r2, [r3, #28]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f042 0208 	orr.w	r2, r2, #8
 800ad58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	69da      	ldr	r2, [r3, #28]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f022 0204 	bic.w	r2, r2, #4
 800ad68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	69d9      	ldr	r1, [r3, #28]
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	691a      	ldr	r2, [r3, #16]
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	430a      	orrs	r2, r1
 800ad7a:	61da      	str	r2, [r3, #28]
      break;
 800ad7c:	e064      	b.n	800ae48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	68b9      	ldr	r1, [r7, #8]
 800ad84:	4618      	mov	r0, r3
 800ad86:	f000 fad9 	bl	800b33c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	69da      	ldr	r2, [r3, #28]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	69da      	ldr	r2, [r3, #28]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ada8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	69d9      	ldr	r1, [r3, #28]
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	691b      	ldr	r3, [r3, #16]
 800adb4:	021a      	lsls	r2, r3, #8
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	430a      	orrs	r2, r1
 800adbc:	61da      	str	r2, [r3, #28]
      break;
 800adbe:	e043      	b.n	800ae48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	68b9      	ldr	r1, [r7, #8]
 800adc6:	4618      	mov	r0, r3
 800adc8:	f000 fb22 	bl	800b410 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f042 0208 	orr.w	r2, r2, #8
 800adda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f022 0204 	bic.w	r2, r2, #4
 800adea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	691a      	ldr	r2, [r3, #16]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	430a      	orrs	r2, r1
 800adfc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800adfe:	e023      	b.n	800ae48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	68b9      	ldr	r1, [r7, #8]
 800ae06:	4618      	mov	r0, r3
 800ae08:	f000 fb66 	bl	800b4d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	021a      	lsls	r2, r3, #8
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	430a      	orrs	r2, r1
 800ae3e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ae40:	e002      	b.n	800ae48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ae42:	2301      	movs	r3, #1
 800ae44:	75fb      	strb	r3, [r7, #23]
      break;
 800ae46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae50:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3718      	adds	r7, #24
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop

0800ae5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae64:	bf00      	nop
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae78:	bf00      	nop
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae8c:	bf00      	nop
 800ae8e:	370c      	adds	r7, #12
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aea0:	bf00      	nop
 800aea2:	370c      	adds	r7, #12
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a44      	ldr	r2, [pc, #272]	; (800afd0 <TIM_Base_SetConfig+0x124>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d013      	beq.n	800aeec <TIM_Base_SetConfig+0x40>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeca:	d00f      	beq.n	800aeec <TIM_Base_SetConfig+0x40>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4a41      	ldr	r2, [pc, #260]	; (800afd4 <TIM_Base_SetConfig+0x128>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d00b      	beq.n	800aeec <TIM_Base_SetConfig+0x40>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a40      	ldr	r2, [pc, #256]	; (800afd8 <TIM_Base_SetConfig+0x12c>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d007      	beq.n	800aeec <TIM_Base_SetConfig+0x40>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a3f      	ldr	r2, [pc, #252]	; (800afdc <TIM_Base_SetConfig+0x130>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d003      	beq.n	800aeec <TIM_Base_SetConfig+0x40>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a3e      	ldr	r2, [pc, #248]	; (800afe0 <TIM_Base_SetConfig+0x134>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d108      	bne.n	800aefe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a33      	ldr	r2, [pc, #204]	; (800afd0 <TIM_Base_SetConfig+0x124>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d027      	beq.n	800af56 <TIM_Base_SetConfig+0xaa>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af0c:	d023      	beq.n	800af56 <TIM_Base_SetConfig+0xaa>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4a30      	ldr	r2, [pc, #192]	; (800afd4 <TIM_Base_SetConfig+0x128>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d01f      	beq.n	800af56 <TIM_Base_SetConfig+0xaa>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4a2f      	ldr	r2, [pc, #188]	; (800afd8 <TIM_Base_SetConfig+0x12c>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d01b      	beq.n	800af56 <TIM_Base_SetConfig+0xaa>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4a2e      	ldr	r2, [pc, #184]	; (800afdc <TIM_Base_SetConfig+0x130>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d017      	beq.n	800af56 <TIM_Base_SetConfig+0xaa>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4a2d      	ldr	r2, [pc, #180]	; (800afe0 <TIM_Base_SetConfig+0x134>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d013      	beq.n	800af56 <TIM_Base_SetConfig+0xaa>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4a2c      	ldr	r2, [pc, #176]	; (800afe4 <TIM_Base_SetConfig+0x138>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d00f      	beq.n	800af56 <TIM_Base_SetConfig+0xaa>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a2b      	ldr	r2, [pc, #172]	; (800afe8 <TIM_Base_SetConfig+0x13c>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d00b      	beq.n	800af56 <TIM_Base_SetConfig+0xaa>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	4a2a      	ldr	r2, [pc, #168]	; (800afec <TIM_Base_SetConfig+0x140>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d007      	beq.n	800af56 <TIM_Base_SetConfig+0xaa>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4a29      	ldr	r2, [pc, #164]	; (800aff0 <TIM_Base_SetConfig+0x144>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d003      	beq.n	800af56 <TIM_Base_SetConfig+0xaa>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4a28      	ldr	r2, [pc, #160]	; (800aff4 <TIM_Base_SetConfig+0x148>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d108      	bne.n	800af68 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	4313      	orrs	r3, r2
 800af66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	695b      	ldr	r3, [r3, #20]
 800af72:	4313      	orrs	r3, r2
 800af74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	689a      	ldr	r2, [r3, #8]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4a10      	ldr	r2, [pc, #64]	; (800afd0 <TIM_Base_SetConfig+0x124>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d00f      	beq.n	800afb4 <TIM_Base_SetConfig+0x108>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	4a12      	ldr	r2, [pc, #72]	; (800afe0 <TIM_Base_SetConfig+0x134>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d00b      	beq.n	800afb4 <TIM_Base_SetConfig+0x108>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4a11      	ldr	r2, [pc, #68]	; (800afe4 <TIM_Base_SetConfig+0x138>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d007      	beq.n	800afb4 <TIM_Base_SetConfig+0x108>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	4a10      	ldr	r2, [pc, #64]	; (800afe8 <TIM_Base_SetConfig+0x13c>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d003      	beq.n	800afb4 <TIM_Base_SetConfig+0x108>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4a0f      	ldr	r2, [pc, #60]	; (800afec <TIM_Base_SetConfig+0x140>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d103      	bne.n	800afbc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	691a      	ldr	r2, [r3, #16]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	615a      	str	r2, [r3, #20]
}
 800afc2:	bf00      	nop
 800afc4:	3714      	adds	r7, #20
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	40010000 	.word	0x40010000
 800afd4:	40000400 	.word	0x40000400
 800afd8:	40000800 	.word	0x40000800
 800afdc:	40000c00 	.word	0x40000c00
 800afe0:	40010400 	.word	0x40010400
 800afe4:	40014000 	.word	0x40014000
 800afe8:	40014400 	.word	0x40014400
 800afec:	40014800 	.word	0x40014800
 800aff0:	4000e000 	.word	0x4000e000
 800aff4:	4000e400 	.word	0x4000e400

0800aff8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aff8:	b480      	push	{r7}
 800affa:	b087      	sub	sp, #28
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a1b      	ldr	r3, [r3, #32]
 800b006:	f023 0201 	bic.w	r2, r3, #1
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a1b      	ldr	r3, [r3, #32]
 800b012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	699b      	ldr	r3, [r3, #24]
 800b01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b020:	68fa      	ldr	r2, [r7, #12]
 800b022:	4b37      	ldr	r3, [pc, #220]	; (800b100 <TIM_OC1_SetConfig+0x108>)
 800b024:	4013      	ands	r3, r2
 800b026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f023 0303 	bic.w	r3, r3, #3
 800b02e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	4313      	orrs	r3, r2
 800b038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	f023 0302 	bic.w	r3, r3, #2
 800b040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	697a      	ldr	r2, [r7, #20]
 800b048:	4313      	orrs	r3, r2
 800b04a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	4a2d      	ldr	r2, [pc, #180]	; (800b104 <TIM_OC1_SetConfig+0x10c>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d00f      	beq.n	800b074 <TIM_OC1_SetConfig+0x7c>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	4a2c      	ldr	r2, [pc, #176]	; (800b108 <TIM_OC1_SetConfig+0x110>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d00b      	beq.n	800b074 <TIM_OC1_SetConfig+0x7c>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4a2b      	ldr	r2, [pc, #172]	; (800b10c <TIM_OC1_SetConfig+0x114>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d007      	beq.n	800b074 <TIM_OC1_SetConfig+0x7c>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4a2a      	ldr	r2, [pc, #168]	; (800b110 <TIM_OC1_SetConfig+0x118>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d003      	beq.n	800b074 <TIM_OC1_SetConfig+0x7c>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	4a29      	ldr	r2, [pc, #164]	; (800b114 <TIM_OC1_SetConfig+0x11c>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d10c      	bne.n	800b08e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	f023 0308 	bic.w	r3, r3, #8
 800b07a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	697a      	ldr	r2, [r7, #20]
 800b082:	4313      	orrs	r3, r2
 800b084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	f023 0304 	bic.w	r3, r3, #4
 800b08c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a1c      	ldr	r2, [pc, #112]	; (800b104 <TIM_OC1_SetConfig+0x10c>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d00f      	beq.n	800b0b6 <TIM_OC1_SetConfig+0xbe>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a1b      	ldr	r2, [pc, #108]	; (800b108 <TIM_OC1_SetConfig+0x110>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d00b      	beq.n	800b0b6 <TIM_OC1_SetConfig+0xbe>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4a1a      	ldr	r2, [pc, #104]	; (800b10c <TIM_OC1_SetConfig+0x114>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d007      	beq.n	800b0b6 <TIM_OC1_SetConfig+0xbe>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a19      	ldr	r2, [pc, #100]	; (800b110 <TIM_OC1_SetConfig+0x118>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d003      	beq.n	800b0b6 <TIM_OC1_SetConfig+0xbe>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	4a18      	ldr	r2, [pc, #96]	; (800b114 <TIM_OC1_SetConfig+0x11c>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d111      	bne.n	800b0da <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b0c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	695b      	ldr	r3, [r3, #20]
 800b0ca:	693a      	ldr	r2, [r7, #16]
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	699b      	ldr	r3, [r3, #24]
 800b0d4:	693a      	ldr	r2, [r7, #16]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	693a      	ldr	r2, [r7, #16]
 800b0de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	685a      	ldr	r2, [r3, #4]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	697a      	ldr	r2, [r7, #20]
 800b0f2:	621a      	str	r2, [r3, #32]
}
 800b0f4:	bf00      	nop
 800b0f6:	371c      	adds	r7, #28
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	fffeff8f 	.word	0xfffeff8f
 800b104:	40010000 	.word	0x40010000
 800b108:	40010400 	.word	0x40010400
 800b10c:	40014000 	.word	0x40014000
 800b110:	40014400 	.word	0x40014400
 800b114:	40014800 	.word	0x40014800

0800b118 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b118:	b480      	push	{r7}
 800b11a:	b087      	sub	sp, #28
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6a1b      	ldr	r3, [r3, #32]
 800b126:	f023 0210 	bic.w	r2, r3, #16
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a1b      	ldr	r3, [r3, #32]
 800b132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	699b      	ldr	r3, [r3, #24]
 800b13e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	4b34      	ldr	r3, [pc, #208]	; (800b214 <TIM_OC2_SetConfig+0xfc>)
 800b144:	4013      	ands	r3, r2
 800b146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b14e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	021b      	lsls	r3, r3, #8
 800b156:	68fa      	ldr	r2, [r7, #12]
 800b158:	4313      	orrs	r3, r2
 800b15a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	f023 0320 	bic.w	r3, r3, #32
 800b162:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	011b      	lsls	r3, r3, #4
 800b16a:	697a      	ldr	r2, [r7, #20]
 800b16c:	4313      	orrs	r3, r2
 800b16e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4a29      	ldr	r2, [pc, #164]	; (800b218 <TIM_OC2_SetConfig+0x100>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d003      	beq.n	800b180 <TIM_OC2_SetConfig+0x68>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	4a28      	ldr	r2, [pc, #160]	; (800b21c <TIM_OC2_SetConfig+0x104>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d10d      	bne.n	800b19c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	011b      	lsls	r3, r3, #4
 800b18e:	697a      	ldr	r2, [r7, #20]
 800b190:	4313      	orrs	r3, r2
 800b192:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b19a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4a1e      	ldr	r2, [pc, #120]	; (800b218 <TIM_OC2_SetConfig+0x100>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d00f      	beq.n	800b1c4 <TIM_OC2_SetConfig+0xac>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	4a1d      	ldr	r2, [pc, #116]	; (800b21c <TIM_OC2_SetConfig+0x104>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d00b      	beq.n	800b1c4 <TIM_OC2_SetConfig+0xac>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a1c      	ldr	r2, [pc, #112]	; (800b220 <TIM_OC2_SetConfig+0x108>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d007      	beq.n	800b1c4 <TIM_OC2_SetConfig+0xac>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a1b      	ldr	r2, [pc, #108]	; (800b224 <TIM_OC2_SetConfig+0x10c>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d003      	beq.n	800b1c4 <TIM_OC2_SetConfig+0xac>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a1a      	ldr	r2, [pc, #104]	; (800b228 <TIM_OC2_SetConfig+0x110>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d113      	bne.n	800b1ec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	695b      	ldr	r3, [r3, #20]
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	693a      	ldr	r2, [r7, #16]
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	699b      	ldr	r3, [r3, #24]
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	693a      	ldr	r2, [r7, #16]
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	693a      	ldr	r2, [r7, #16]
 800b1f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	685a      	ldr	r2, [r3, #4]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	697a      	ldr	r2, [r7, #20]
 800b204:	621a      	str	r2, [r3, #32]
}
 800b206:	bf00      	nop
 800b208:	371c      	adds	r7, #28
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop
 800b214:	feff8fff 	.word	0xfeff8fff
 800b218:	40010000 	.word	0x40010000
 800b21c:	40010400 	.word	0x40010400
 800b220:	40014000 	.word	0x40014000
 800b224:	40014400 	.word	0x40014400
 800b228:	40014800 	.word	0x40014800

0800b22c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b087      	sub	sp, #28
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6a1b      	ldr	r3, [r3, #32]
 800b23a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6a1b      	ldr	r3, [r3, #32]
 800b246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	69db      	ldr	r3, [r3, #28]
 800b252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	4b33      	ldr	r3, [pc, #204]	; (800b324 <TIM_OC3_SetConfig+0xf8>)
 800b258:	4013      	ands	r3, r2
 800b25a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f023 0303 	bic.w	r3, r3, #3
 800b262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	68fa      	ldr	r2, [r7, #12]
 800b26a:	4313      	orrs	r3, r2
 800b26c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	021b      	lsls	r3, r3, #8
 800b27c:	697a      	ldr	r2, [r7, #20]
 800b27e:	4313      	orrs	r3, r2
 800b280:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4a28      	ldr	r2, [pc, #160]	; (800b328 <TIM_OC3_SetConfig+0xfc>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d003      	beq.n	800b292 <TIM_OC3_SetConfig+0x66>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	4a27      	ldr	r2, [pc, #156]	; (800b32c <TIM_OC3_SetConfig+0x100>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d10d      	bne.n	800b2ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b298:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	68db      	ldr	r3, [r3, #12]
 800b29e:	021b      	lsls	r3, r3, #8
 800b2a0:	697a      	ldr	r2, [r7, #20]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b2ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a1d      	ldr	r2, [pc, #116]	; (800b328 <TIM_OC3_SetConfig+0xfc>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d00f      	beq.n	800b2d6 <TIM_OC3_SetConfig+0xaa>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a1c      	ldr	r2, [pc, #112]	; (800b32c <TIM_OC3_SetConfig+0x100>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d00b      	beq.n	800b2d6 <TIM_OC3_SetConfig+0xaa>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a1b      	ldr	r2, [pc, #108]	; (800b330 <TIM_OC3_SetConfig+0x104>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d007      	beq.n	800b2d6 <TIM_OC3_SetConfig+0xaa>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a1a      	ldr	r2, [pc, #104]	; (800b334 <TIM_OC3_SetConfig+0x108>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d003      	beq.n	800b2d6 <TIM_OC3_SetConfig+0xaa>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a19      	ldr	r2, [pc, #100]	; (800b338 <TIM_OC3_SetConfig+0x10c>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d113      	bne.n	800b2fe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	695b      	ldr	r3, [r3, #20]
 800b2ea:	011b      	lsls	r3, r3, #4
 800b2ec:	693a      	ldr	r2, [r7, #16]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	699b      	ldr	r3, [r3, #24]
 800b2f6:	011b      	lsls	r3, r3, #4
 800b2f8:	693a      	ldr	r2, [r7, #16]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	693a      	ldr	r2, [r7, #16]
 800b302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	68fa      	ldr	r2, [r7, #12]
 800b308:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	685a      	ldr	r2, [r3, #4]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	697a      	ldr	r2, [r7, #20]
 800b316:	621a      	str	r2, [r3, #32]
}
 800b318:	bf00      	nop
 800b31a:	371c      	adds	r7, #28
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr
 800b324:	fffeff8f 	.word	0xfffeff8f
 800b328:	40010000 	.word	0x40010000
 800b32c:	40010400 	.word	0x40010400
 800b330:	40014000 	.word	0x40014000
 800b334:	40014400 	.word	0x40014400
 800b338:	40014800 	.word	0x40014800

0800b33c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b087      	sub	sp, #28
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a1b      	ldr	r3, [r3, #32]
 800b34a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6a1b      	ldr	r3, [r3, #32]
 800b356:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	69db      	ldr	r3, [r3, #28]
 800b362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b364:	68fa      	ldr	r2, [r7, #12]
 800b366:	4b24      	ldr	r3, [pc, #144]	; (800b3f8 <TIM_OC4_SetConfig+0xbc>)
 800b368:	4013      	ands	r3, r2
 800b36a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	021b      	lsls	r3, r3, #8
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	4313      	orrs	r3, r2
 800b37e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b386:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	031b      	lsls	r3, r3, #12
 800b38e:	693a      	ldr	r2, [r7, #16]
 800b390:	4313      	orrs	r3, r2
 800b392:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4a19      	ldr	r2, [pc, #100]	; (800b3fc <TIM_OC4_SetConfig+0xc0>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d00f      	beq.n	800b3bc <TIM_OC4_SetConfig+0x80>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4a18      	ldr	r2, [pc, #96]	; (800b400 <TIM_OC4_SetConfig+0xc4>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d00b      	beq.n	800b3bc <TIM_OC4_SetConfig+0x80>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4a17      	ldr	r2, [pc, #92]	; (800b404 <TIM_OC4_SetConfig+0xc8>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d007      	beq.n	800b3bc <TIM_OC4_SetConfig+0x80>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	4a16      	ldr	r2, [pc, #88]	; (800b408 <TIM_OC4_SetConfig+0xcc>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d003      	beq.n	800b3bc <TIM_OC4_SetConfig+0x80>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	4a15      	ldr	r2, [pc, #84]	; (800b40c <TIM_OC4_SetConfig+0xd0>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d109      	bne.n	800b3d0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	695b      	ldr	r3, [r3, #20]
 800b3c8:	019b      	lsls	r3, r3, #6
 800b3ca:	697a      	ldr	r2, [r7, #20]
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	697a      	ldr	r2, [r7, #20]
 800b3d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	685a      	ldr	r2, [r3, #4]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	693a      	ldr	r2, [r7, #16]
 800b3e8:	621a      	str	r2, [r3, #32]
}
 800b3ea:	bf00      	nop
 800b3ec:	371c      	adds	r7, #28
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr
 800b3f6:	bf00      	nop
 800b3f8:	feff8fff 	.word	0xfeff8fff
 800b3fc:	40010000 	.word	0x40010000
 800b400:	40010400 	.word	0x40010400
 800b404:	40014000 	.word	0x40014000
 800b408:	40014400 	.word	0x40014400
 800b40c:	40014800 	.word	0x40014800

0800b410 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b410:	b480      	push	{r7}
 800b412:	b087      	sub	sp, #28
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6a1b      	ldr	r3, [r3, #32]
 800b42a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	4b21      	ldr	r3, [pc, #132]	; (800b4c0 <TIM_OC5_SetConfig+0xb0>)
 800b43c:	4013      	ands	r3, r2
 800b43e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	68fa      	ldr	r2, [r7, #12]
 800b446:	4313      	orrs	r3, r2
 800b448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b450:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	689b      	ldr	r3, [r3, #8]
 800b456:	041b      	lsls	r3, r3, #16
 800b458:	693a      	ldr	r2, [r7, #16]
 800b45a:	4313      	orrs	r3, r2
 800b45c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	4a18      	ldr	r2, [pc, #96]	; (800b4c4 <TIM_OC5_SetConfig+0xb4>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d00f      	beq.n	800b486 <TIM_OC5_SetConfig+0x76>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4a17      	ldr	r2, [pc, #92]	; (800b4c8 <TIM_OC5_SetConfig+0xb8>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d00b      	beq.n	800b486 <TIM_OC5_SetConfig+0x76>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4a16      	ldr	r2, [pc, #88]	; (800b4cc <TIM_OC5_SetConfig+0xbc>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d007      	beq.n	800b486 <TIM_OC5_SetConfig+0x76>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4a15      	ldr	r2, [pc, #84]	; (800b4d0 <TIM_OC5_SetConfig+0xc0>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d003      	beq.n	800b486 <TIM_OC5_SetConfig+0x76>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4a14      	ldr	r2, [pc, #80]	; (800b4d4 <TIM_OC5_SetConfig+0xc4>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d109      	bne.n	800b49a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b48c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	695b      	ldr	r3, [r3, #20]
 800b492:	021b      	lsls	r3, r3, #8
 800b494:	697a      	ldr	r2, [r7, #20]
 800b496:	4313      	orrs	r3, r2
 800b498:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	697a      	ldr	r2, [r7, #20]
 800b49e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	685a      	ldr	r2, [r3, #4]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	693a      	ldr	r2, [r7, #16]
 800b4b2:	621a      	str	r2, [r3, #32]
}
 800b4b4:	bf00      	nop
 800b4b6:	371c      	adds	r7, #28
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr
 800b4c0:	fffeff8f 	.word	0xfffeff8f
 800b4c4:	40010000 	.word	0x40010000
 800b4c8:	40010400 	.word	0x40010400
 800b4cc:	40014000 	.word	0x40014000
 800b4d0:	40014400 	.word	0x40014400
 800b4d4:	40014800 	.word	0x40014800

0800b4d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b087      	sub	sp, #28
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a1b      	ldr	r3, [r3, #32]
 800b4e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6a1b      	ldr	r3, [r3, #32]
 800b4f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	4b22      	ldr	r3, [pc, #136]	; (800b58c <TIM_OC6_SetConfig+0xb4>)
 800b504:	4013      	ands	r3, r2
 800b506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	021b      	lsls	r3, r3, #8
 800b50e:	68fa      	ldr	r2, [r7, #12]
 800b510:	4313      	orrs	r3, r2
 800b512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b51a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	689b      	ldr	r3, [r3, #8]
 800b520:	051b      	lsls	r3, r3, #20
 800b522:	693a      	ldr	r2, [r7, #16]
 800b524:	4313      	orrs	r3, r2
 800b526:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	4a19      	ldr	r2, [pc, #100]	; (800b590 <TIM_OC6_SetConfig+0xb8>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d00f      	beq.n	800b550 <TIM_OC6_SetConfig+0x78>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4a18      	ldr	r2, [pc, #96]	; (800b594 <TIM_OC6_SetConfig+0xbc>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d00b      	beq.n	800b550 <TIM_OC6_SetConfig+0x78>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4a17      	ldr	r2, [pc, #92]	; (800b598 <TIM_OC6_SetConfig+0xc0>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d007      	beq.n	800b550 <TIM_OC6_SetConfig+0x78>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4a16      	ldr	r2, [pc, #88]	; (800b59c <TIM_OC6_SetConfig+0xc4>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d003      	beq.n	800b550 <TIM_OC6_SetConfig+0x78>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	4a15      	ldr	r2, [pc, #84]	; (800b5a0 <TIM_OC6_SetConfig+0xc8>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d109      	bne.n	800b564 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b556:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	695b      	ldr	r3, [r3, #20]
 800b55c:	029b      	lsls	r3, r3, #10
 800b55e:	697a      	ldr	r2, [r7, #20]
 800b560:	4313      	orrs	r3, r2
 800b562:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	697a      	ldr	r2, [r7, #20]
 800b568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	685a      	ldr	r2, [r3, #4]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	693a      	ldr	r2, [r7, #16]
 800b57c:	621a      	str	r2, [r3, #32]
}
 800b57e:	bf00      	nop
 800b580:	371c      	adds	r7, #28
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	feff8fff 	.word	0xfeff8fff
 800b590:	40010000 	.word	0x40010000
 800b594:	40010400 	.word	0x40010400
 800b598:	40014000 	.word	0x40014000
 800b59c:	40014400 	.word	0x40014400
 800b5a0:	40014800 	.word	0x40014800

0800b5a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b087      	sub	sp, #28
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	60b9      	str	r1, [r7, #8]
 800b5ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	f003 031f 	and.w	r3, r3, #31
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b5bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	6a1a      	ldr	r2, [r3, #32]
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	43db      	mvns	r3, r3
 800b5c6:	401a      	ands	r2, r3
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6a1a      	ldr	r2, [r3, #32]
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	f003 031f 	and.w	r3, r3, #31
 800b5d6:	6879      	ldr	r1, [r7, #4]
 800b5d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b5dc:	431a      	orrs	r2, r3
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	621a      	str	r2, [r3, #32]
}
 800b5e2:	bf00      	nop
 800b5e4:	371c      	adds	r7, #28
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr
	...

0800b5f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b085      	sub	sp, #20
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b600:	2b01      	cmp	r3, #1
 800b602:	d101      	bne.n	800b608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b604:	2302      	movs	r3, #2
 800b606:	e077      	b.n	800b6f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2201      	movs	r2, #1
 800b60c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2202      	movs	r2, #2
 800b614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a35      	ldr	r2, [pc, #212]	; (800b704 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d004      	beq.n	800b63c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4a34      	ldr	r2, [pc, #208]	; (800b708 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d108      	bne.n	800b64e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b642:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b654:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	4313      	orrs	r3, r2
 800b65e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a25      	ldr	r2, [pc, #148]	; (800b704 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d02c      	beq.n	800b6cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b67a:	d027      	beq.n	800b6cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a22      	ldr	r2, [pc, #136]	; (800b70c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d022      	beq.n	800b6cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4a21      	ldr	r2, [pc, #132]	; (800b710 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d01d      	beq.n	800b6cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4a1f      	ldr	r2, [pc, #124]	; (800b714 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d018      	beq.n	800b6cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a1a      	ldr	r2, [pc, #104]	; (800b708 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d013      	beq.n	800b6cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a1b      	ldr	r2, [pc, #108]	; (800b718 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d00e      	beq.n	800b6cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a1a      	ldr	r2, [pc, #104]	; (800b71c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d009      	beq.n	800b6cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a18      	ldr	r2, [pc, #96]	; (800b720 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d004      	beq.n	800b6cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a17      	ldr	r2, [pc, #92]	; (800b724 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d10c      	bne.n	800b6e6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	68ba      	ldr	r2, [r7, #8]
 800b6da:	4313      	orrs	r3, r2
 800b6dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	68ba      	ldr	r2, [r7, #8]
 800b6e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3714      	adds	r7, #20
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr
 800b704:	40010000 	.word	0x40010000
 800b708:	40010400 	.word	0x40010400
 800b70c:	40000400 	.word	0x40000400
 800b710:	40000800 	.word	0x40000800
 800b714:	40000c00 	.word	0x40000c00
 800b718:	40001800 	.word	0x40001800
 800b71c:	40014000 	.word	0x40014000
 800b720:	4000e000 	.word	0x4000e000
 800b724:	4000e400 	.word	0x4000e400

0800b728 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b728:	b480      	push	{r7}
 800b72a:	b085      	sub	sp, #20
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b732:	2300      	movs	r3, #0
 800b734:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d101      	bne.n	800b744 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b740:	2302      	movs	r3, #2
 800b742:	e087      	b.n	800b854 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2201      	movs	r2, #1
 800b748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	4313      	orrs	r3, r2
 800b758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	4313      	orrs	r3, r2
 800b766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	4313      	orrs	r3, r2
 800b774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4313      	orrs	r3, r2
 800b782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	691b      	ldr	r3, [r3, #16]
 800b78e:	4313      	orrs	r3, r2
 800b790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	695b      	ldr	r3, [r3, #20]
 800b79c:	4313      	orrs	r3, r2
 800b79e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	699b      	ldr	r3, [r3, #24]
 800b7b8:	041b      	lsls	r3, r3, #16
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a27      	ldr	r2, [pc, #156]	; (800b860 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d004      	beq.n	800b7d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a25      	ldr	r2, [pc, #148]	; (800b864 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d106      	bne.n	800b7e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	69db      	ldr	r3, [r3, #28]
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4a1e      	ldr	r2, [pc, #120]	; (800b860 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d004      	beq.n	800b7f4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4a1d      	ldr	r2, [pc, #116]	; (800b864 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d126      	bne.n	800b842 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7fe:	051b      	lsls	r3, r3, #20
 800b800:	4313      	orrs	r3, r2
 800b802:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	6a1b      	ldr	r3, [r3, #32]
 800b80e:	4313      	orrs	r3, r2
 800b810:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81c:	4313      	orrs	r3, r2
 800b81e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a0e      	ldr	r2, [pc, #56]	; (800b860 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d004      	beq.n	800b834 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a0d      	ldr	r2, [pc, #52]	; (800b864 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d106      	bne.n	800b842 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83e:	4313      	orrs	r3, r2
 800b840:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	68fa      	ldr	r2, [r7, #12]
 800b848:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3714      	adds	r7, #20
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr
 800b860:	40010000 	.word	0x40010000
 800b864:	40010400 	.word	0x40010400

0800b868 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b870:	bf00      	nop
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b884:	bf00      	nop
 800b886:	370c      	adds	r7, #12
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b898:	bf00      	nop
 800b89a:	370c      	adds	r7, #12
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d101      	bne.n	800b8b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	e042      	b.n	800b93c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d106      	bne.n	800b8ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f7f8 fd15 	bl	80042f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2224      	movs	r2, #36	; 0x24
 800b8d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f022 0201 	bic.w	r2, r2, #1
 800b8e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 fcdc 	bl	800c2a4 <UART_SetConfig>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d101      	bne.n	800b8f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e022      	b.n	800b93c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d002      	beq.n	800b904 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f001 fb3c 	bl	800cf7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	685a      	ldr	r2, [r3, #4]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b912:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	689a      	ldr	r2, [r3, #8]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b922:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f042 0201 	orr.w	r2, r2, #1
 800b932:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f001 fbc3 	bl	800d0c0 <UART_CheckIdleState>
 800b93a:	4603      	mov	r3, r0
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3708      	adds	r7, #8
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b08a      	sub	sp, #40	; 0x28
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	4613      	mov	r3, r2
 800b950:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b958:	2b20      	cmp	r3, #32
 800b95a:	d17a      	bne.n	800ba52 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d002      	beq.n	800b968 <HAL_UART_Transmit_DMA+0x24>
 800b962:	88fb      	ldrh	r3, [r7, #6]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d101      	bne.n	800b96c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b968:	2301      	movs	r3, #1
 800b96a:	e073      	b.n	800ba54 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b972:	2b01      	cmp	r3, #1
 800b974:	d101      	bne.n	800b97a <HAL_UART_Transmit_DMA+0x36>
 800b976:	2302      	movs	r3, #2
 800b978:	e06c      	b.n	800ba54 <HAL_UART_Transmit_DMA+0x110>
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2201      	movs	r2, #1
 800b97e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	68ba      	ldr	r2, [r7, #8]
 800b986:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	88fa      	ldrh	r2, [r7, #6]
 800b98c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	88fa      	ldrh	r2, [r7, #6]
 800b994:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2221      	movs	r2, #33	; 0x21
 800b9a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d02c      	beq.n	800ba0a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9b4:	4a29      	ldr	r2, [pc, #164]	; (800ba5c <HAL_UART_Transmit_DMA+0x118>)
 800b9b6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9bc:	4a28      	ldr	r2, [pc, #160]	; (800ba60 <HAL_UART_Transmit_DMA+0x11c>)
 800b9be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9c4:	4a27      	ldr	r2, [pc, #156]	; (800ba64 <HAL_UART_Transmit_DMA+0x120>)
 800b9c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9d8:	4619      	mov	r1, r3
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	3328      	adds	r3, #40	; 0x28
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	88fb      	ldrh	r3, [r7, #6]
 800b9e4:	f7f9 fd02 	bl	80053ec <HAL_DMA_Start_IT>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00d      	beq.n	800ba0a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2210      	movs	r2, #16
 800b9f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2220      	movs	r2, #32
 800ba02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800ba06:	2301      	movs	r3, #1
 800ba08:	e024      	b.n	800ba54 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2240      	movs	r2, #64	; 0x40
 800ba10:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2200      	movs	r2, #0
 800ba16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	3308      	adds	r3, #8
 800ba20:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	e853 3f00 	ldrex	r3, [r3]
 800ba28:	613b      	str	r3, [r7, #16]
   return(result);
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba30:	627b      	str	r3, [r7, #36]	; 0x24
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	3308      	adds	r3, #8
 800ba38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba3a:	623a      	str	r2, [r7, #32]
 800ba3c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba3e:	69f9      	ldr	r1, [r7, #28]
 800ba40:	6a3a      	ldr	r2, [r7, #32]
 800ba42:	e841 2300 	strex	r3, r2, [r1]
 800ba46:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d1e5      	bne.n	800ba1a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	e000      	b.n	800ba54 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800ba52:	2302      	movs	r3, #2
  }
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3728      	adds	r7, #40	; 0x28
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	0800d589 	.word	0x0800d589
 800ba60:	0800d61f 	.word	0x0800d61f
 800ba64:	0800d795 	.word	0x0800d795

0800ba68 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b08a      	sub	sp, #40	; 0x28
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	4613      	mov	r3, r2
 800ba74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba7c:	2b20      	cmp	r3, #32
 800ba7e:	d142      	bne.n	800bb06 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d002      	beq.n	800ba8c <HAL_UART_Receive_DMA+0x24>
 800ba86:	88fb      	ldrh	r3, [r7, #6]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d101      	bne.n	800ba90 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e03b      	b.n	800bb08 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d101      	bne.n	800ba9e <HAL_UART_Receive_DMA+0x36>
 800ba9a:	2302      	movs	r3, #2
 800ba9c:	e034      	b.n	800bb08 <HAL_UART_Receive_DMA+0xa0>
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2201      	movs	r2, #1
 800baa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2200      	movs	r2, #0
 800baaa:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4a17      	ldr	r2, [pc, #92]	; (800bb10 <HAL_UART_Receive_DMA+0xa8>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d01f      	beq.n	800baf6 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d018      	beq.n	800baf6 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	e853 3f00 	ldrex	r3, [r3]
 800bad0:	613b      	str	r3, [r7, #16]
   return(result);
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bad8:	627b      	str	r3, [r7, #36]	; 0x24
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	461a      	mov	r2, r3
 800bae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae2:	623b      	str	r3, [r7, #32]
 800bae4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae6:	69f9      	ldr	r1, [r7, #28]
 800bae8:	6a3a      	ldr	r2, [r7, #32]
 800baea:	e841 2300 	strex	r3, r2, [r1]
 800baee:	61bb      	str	r3, [r7, #24]
   return(result);
 800baf0:	69bb      	ldr	r3, [r7, #24]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d1e6      	bne.n	800bac4 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800baf6:	88fb      	ldrh	r3, [r7, #6]
 800baf8:	461a      	mov	r2, r3
 800bafa:	68b9      	ldr	r1, [r7, #8]
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f001 fbf3 	bl	800d2e8 <UART_Start_Receive_DMA>
 800bb02:	4603      	mov	r3, r0
 800bb04:	e000      	b.n	800bb08 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bb06:	2302      	movs	r3, #2
  }
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3728      	adds	r7, #40	; 0x28
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	58000c00 	.word	0x58000c00

0800bb14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b0ba      	sub	sp, #232	; 0xe8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	69db      	ldr	r3, [r3, #28]
 800bb22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bb3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bb3e:	f640 030f 	movw	r3, #2063	; 0x80f
 800bb42:	4013      	ands	r3, r2
 800bb44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bb48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d11b      	bne.n	800bb88 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb54:	f003 0320 	and.w	r3, r3, #32
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d015      	beq.n	800bb88 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bb5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb60:	f003 0320 	and.w	r3, r3, #32
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d105      	bne.n	800bb74 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bb68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d009      	beq.n	800bb88 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f000 835a 	beq.w	800c232 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	4798      	blx	r3
      }
      return;
 800bb86:	e354      	b.n	800c232 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bb88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f000 811f 	beq.w	800bdd0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bb92:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bb96:	4b8b      	ldr	r3, [pc, #556]	; (800bdc4 <HAL_UART_IRQHandler+0x2b0>)
 800bb98:	4013      	ands	r3, r2
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d106      	bne.n	800bbac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bb9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bba2:	4b89      	ldr	r3, [pc, #548]	; (800bdc8 <HAL_UART_IRQHandler+0x2b4>)
 800bba4:	4013      	ands	r3, r2
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f000 8112 	beq.w	800bdd0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bbac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbb0:	f003 0301 	and.w	r3, r3, #1
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d011      	beq.n	800bbdc <HAL_UART_IRQHandler+0xc8>
 800bbb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00b      	beq.n	800bbdc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2201      	movs	r2, #1
 800bbca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbd2:	f043 0201 	orr.w	r2, r3, #1
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bbdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbe0:	f003 0302 	and.w	r3, r3, #2
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d011      	beq.n	800bc0c <HAL_UART_IRQHandler+0xf8>
 800bbe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbec:	f003 0301 	and.w	r3, r3, #1
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d00b      	beq.n	800bc0c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2202      	movs	r2, #2
 800bbfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc02:	f043 0204 	orr.w	r2, r3, #4
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc10:	f003 0304 	and.w	r3, r3, #4
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d011      	beq.n	800bc3c <HAL_UART_IRQHandler+0x128>
 800bc18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc1c:	f003 0301 	and.w	r3, r3, #1
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d00b      	beq.n	800bc3c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2204      	movs	r2, #4
 800bc2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc32:	f043 0202 	orr.w	r2, r3, #2
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bc3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc40:	f003 0308 	and.w	r3, r3, #8
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d017      	beq.n	800bc78 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc4c:	f003 0320 	and.w	r3, r3, #32
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d105      	bne.n	800bc60 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bc54:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bc58:	4b5a      	ldr	r3, [pc, #360]	; (800bdc4 <HAL_UART_IRQHandler+0x2b0>)
 800bc5a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d00b      	beq.n	800bc78 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2208      	movs	r2, #8
 800bc66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc6e:	f043 0208 	orr.w	r2, r3, #8
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bc78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d012      	beq.n	800bcaa <HAL_UART_IRQHandler+0x196>
 800bc84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00c      	beq.n	800bcaa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bca0:	f043 0220 	orr.w	r2, r3, #32
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f000 82c0 	beq.w	800c236 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bcb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcba:	f003 0320 	and.w	r3, r3, #32
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d013      	beq.n	800bcea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bcc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcc6:	f003 0320 	and.w	r3, r3, #32
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d105      	bne.n	800bcda <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bcce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d007      	beq.n	800bcea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d003      	beq.n	800bcea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcf0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcfe:	2b40      	cmp	r3, #64	; 0x40
 800bd00:	d005      	beq.n	800bd0e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bd02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd06:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d04f      	beq.n	800bdae <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f001 fbd4 	bl	800d4bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd1e:	2b40      	cmp	r3, #64	; 0x40
 800bd20:	d141      	bne.n	800bda6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	3308      	adds	r3, #8
 800bd28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bd30:	e853 3f00 	ldrex	r3, [r3]
 800bd34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bd38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	3308      	adds	r3, #8
 800bd4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bd4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bd52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bd5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bd5e:	e841 2300 	strex	r3, r2, [r1]
 800bd62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bd66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1d9      	bne.n	800bd22 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d013      	beq.n	800bd9e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd7a:	4a14      	ldr	r2, [pc, #80]	; (800bdcc <HAL_UART_IRQHandler+0x2b8>)
 800bd7c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7fa f8ba 	bl	8005efc <HAL_DMA_Abort_IT>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d017      	beq.n	800bdbe <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bd98:	4610      	mov	r0, r2
 800bd9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd9c:	e00f      	b.n	800bdbe <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 fa6a 	bl	800c278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bda4:	e00b      	b.n	800bdbe <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 fa66 	bl	800c278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdac:	e007      	b.n	800bdbe <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f000 fa62 	bl	800c278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bdbc:	e23b      	b.n	800c236 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdbe:	bf00      	nop
    return;
 800bdc0:	e239      	b.n	800c236 <HAL_UART_IRQHandler+0x722>
 800bdc2:	bf00      	nop
 800bdc4:	10000001 	.word	0x10000001
 800bdc8:	04000120 	.word	0x04000120
 800bdcc:	0800d815 	.word	0x0800d815

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	f040 81ce 	bne.w	800c176 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bdda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdde:	f003 0310 	and.w	r3, r3, #16
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	f000 81c7 	beq.w	800c176 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bde8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdec:	f003 0310 	and.w	r3, r3, #16
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f000 81c0 	beq.w	800c176 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	2210      	movs	r2, #16
 800bdfc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be08:	2b40      	cmp	r3, #64	; 0x40
 800be0a:	f040 813b 	bne.w	800c084 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a8b      	ldr	r2, [pc, #556]	; (800c044 <HAL_UART_IRQHandler+0x530>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d059      	beq.n	800bece <HAL_UART_IRQHandler+0x3ba>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4a89      	ldr	r2, [pc, #548]	; (800c048 <HAL_UART_IRQHandler+0x534>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d053      	beq.n	800bece <HAL_UART_IRQHandler+0x3ba>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a87      	ldr	r2, [pc, #540]	; (800c04c <HAL_UART_IRQHandler+0x538>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d04d      	beq.n	800bece <HAL_UART_IRQHandler+0x3ba>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a85      	ldr	r2, [pc, #532]	; (800c050 <HAL_UART_IRQHandler+0x53c>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d047      	beq.n	800bece <HAL_UART_IRQHandler+0x3ba>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4a83      	ldr	r2, [pc, #524]	; (800c054 <HAL_UART_IRQHandler+0x540>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d041      	beq.n	800bece <HAL_UART_IRQHandler+0x3ba>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a81      	ldr	r2, [pc, #516]	; (800c058 <HAL_UART_IRQHandler+0x544>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d03b      	beq.n	800bece <HAL_UART_IRQHandler+0x3ba>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a7f      	ldr	r2, [pc, #508]	; (800c05c <HAL_UART_IRQHandler+0x548>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d035      	beq.n	800bece <HAL_UART_IRQHandler+0x3ba>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a7d      	ldr	r2, [pc, #500]	; (800c060 <HAL_UART_IRQHandler+0x54c>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d02f      	beq.n	800bece <HAL_UART_IRQHandler+0x3ba>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a7b      	ldr	r2, [pc, #492]	; (800c064 <HAL_UART_IRQHandler+0x550>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d029      	beq.n	800bece <HAL_UART_IRQHandler+0x3ba>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a79      	ldr	r2, [pc, #484]	; (800c068 <HAL_UART_IRQHandler+0x554>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d023      	beq.n	800bece <HAL_UART_IRQHandler+0x3ba>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a77      	ldr	r2, [pc, #476]	; (800c06c <HAL_UART_IRQHandler+0x558>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d01d      	beq.n	800bece <HAL_UART_IRQHandler+0x3ba>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4a75      	ldr	r2, [pc, #468]	; (800c070 <HAL_UART_IRQHandler+0x55c>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d017      	beq.n	800bece <HAL_UART_IRQHandler+0x3ba>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a73      	ldr	r2, [pc, #460]	; (800c074 <HAL_UART_IRQHandler+0x560>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d011      	beq.n	800bece <HAL_UART_IRQHandler+0x3ba>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a71      	ldr	r2, [pc, #452]	; (800c078 <HAL_UART_IRQHandler+0x564>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d00b      	beq.n	800bece <HAL_UART_IRQHandler+0x3ba>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a6f      	ldr	r2, [pc, #444]	; (800c07c <HAL_UART_IRQHandler+0x568>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d005      	beq.n	800bece <HAL_UART_IRQHandler+0x3ba>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a6d      	ldr	r2, [pc, #436]	; (800c080 <HAL_UART_IRQHandler+0x56c>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d105      	bne.n	800beda <HAL_UART_IRQHandler+0x3c6>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	e004      	b.n	800bee4 <HAL_UART_IRQHandler+0x3d0>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bee8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800beec:	2b00      	cmp	r3, #0
 800beee:	f000 81a4 	beq.w	800c23a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bef8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800befc:	429a      	cmp	r2, r3
 800befe:	f080 819c 	bcs.w	800c23a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf10:	69db      	ldr	r3, [r3, #28]
 800bf12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf16:	f000 8086 	beq.w	800c026 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf26:	e853 3f00 	ldrex	r3, [r3]
 800bf2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bf2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	461a      	mov	r2, r3
 800bf40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bf44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf48:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf4c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bf50:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bf54:	e841 2300 	strex	r3, r2, [r1]
 800bf58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bf5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d1da      	bne.n	800bf1a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	3308      	adds	r3, #8
 800bf6a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf6e:	e853 3f00 	ldrex	r3, [r3]
 800bf72:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bf74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf76:	f023 0301 	bic.w	r3, r3, #1
 800bf7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	3308      	adds	r3, #8
 800bf84:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bf88:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bf8c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf8e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bf90:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bf94:	e841 2300 	strex	r3, r2, [r1]
 800bf98:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bf9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d1e1      	bne.n	800bf64 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	3308      	adds	r3, #8
 800bfa6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfaa:	e853 3f00 	ldrex	r3, [r3]
 800bfae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bfb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	3308      	adds	r3, #8
 800bfc0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bfc4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bfc6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bfca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bfcc:	e841 2300 	strex	r3, r2, [r1]
 800bfd0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bfd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1e3      	bne.n	800bfa0 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2220      	movs	r2, #32
 800bfdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfee:	e853 3f00 	ldrex	r3, [r3]
 800bff2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bff6:	f023 0310 	bic.w	r3, r3, #16
 800bffa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	461a      	mov	r2, r3
 800c004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c008:	65bb      	str	r3, [r7, #88]	; 0x58
 800c00a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c00c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c00e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c010:	e841 2300 	strex	r3, r2, [r1]
 800c014:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d1e4      	bne.n	800bfe6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c020:	4618      	mov	r0, r3
 800c022:	f7f9 fc4d 	bl	80058c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c032:	b29b      	uxth	r3, r3
 800c034:	1ad3      	subs	r3, r2, r3
 800c036:	b29b      	uxth	r3, r3
 800c038:	4619      	mov	r1, r3
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 f926 	bl	800c28c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c040:	e0fb      	b.n	800c23a <HAL_UART_IRQHandler+0x726>
 800c042:	bf00      	nop
 800c044:	40020010 	.word	0x40020010
 800c048:	40020028 	.word	0x40020028
 800c04c:	40020040 	.word	0x40020040
 800c050:	40020058 	.word	0x40020058
 800c054:	40020070 	.word	0x40020070
 800c058:	40020088 	.word	0x40020088
 800c05c:	400200a0 	.word	0x400200a0
 800c060:	400200b8 	.word	0x400200b8
 800c064:	40020410 	.word	0x40020410
 800c068:	40020428 	.word	0x40020428
 800c06c:	40020440 	.word	0x40020440
 800c070:	40020458 	.word	0x40020458
 800c074:	40020470 	.word	0x40020470
 800c078:	40020488 	.word	0x40020488
 800c07c:	400204a0 	.word	0x400204a0
 800c080:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c090:	b29b      	uxth	r3, r3
 800c092:	1ad3      	subs	r3, r2, r3
 800c094:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c09e:	b29b      	uxth	r3, r3
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	f000 80cc 	beq.w	800c23e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c0a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	f000 80c7 	beq.w	800c23e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b8:	e853 3f00 	ldrex	r3, [r3]
 800c0bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c0c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c0d2:	647b      	str	r3, [r7, #68]	; 0x44
 800c0d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c0d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0da:	e841 2300 	strex	r3, r2, [r1]
 800c0de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c0e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d1e4      	bne.n	800c0b0 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	3308      	adds	r3, #8
 800c0ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f0:	e853 3f00 	ldrex	r3, [r3]
 800c0f4:	623b      	str	r3, [r7, #32]
   return(result);
 800c0f6:	6a3a      	ldr	r2, [r7, #32]
 800c0f8:	4b54      	ldr	r3, [pc, #336]	; (800c24c <HAL_UART_IRQHandler+0x738>)
 800c0fa:	4013      	ands	r3, r2
 800c0fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	3308      	adds	r3, #8
 800c106:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c10a:	633a      	str	r2, [r7, #48]	; 0x30
 800c10c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c10e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c112:	e841 2300 	strex	r3, r2, [r1]
 800c116:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d1e3      	bne.n	800c0e6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2220      	movs	r2, #32
 800c122:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	e853 3f00 	ldrex	r3, [r3]
 800c13e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f023 0310 	bic.w	r3, r3, #16
 800c146:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	461a      	mov	r2, r3
 800c150:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c154:	61fb      	str	r3, [r7, #28]
 800c156:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c158:	69b9      	ldr	r1, [r7, #24]
 800c15a:	69fa      	ldr	r2, [r7, #28]
 800c15c:	e841 2300 	strex	r3, r2, [r1]
 800c160:	617b      	str	r3, [r7, #20]
   return(result);
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1e4      	bne.n	800c132 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c168:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c16c:	4619      	mov	r1, r3
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 f88c 	bl	800c28c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c174:	e063      	b.n	800c23e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c17a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d00e      	beq.n	800c1a0 <HAL_UART_IRQHandler+0x68c>
 800c182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d008      	beq.n	800c1a0 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c196:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f001 fb7c 	bl	800d896 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c19e:	e051      	b.n	800c244 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c1a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d014      	beq.n	800c1d6 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c1ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d105      	bne.n	800c1c4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c1b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d008      	beq.n	800c1d6 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d03a      	beq.n	800c242 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	4798      	blx	r3
    }
    return;
 800c1d4:	e035      	b.n	800c242 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c1d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d009      	beq.n	800c1f6 <HAL_UART_IRQHandler+0x6e2>
 800c1e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d003      	beq.n	800c1f6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f001 fb26 	bl	800d840 <UART_EndTransmit_IT>
    return;
 800c1f4:	e026      	b.n	800c244 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c1f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d009      	beq.n	800c216 <HAL_UART_IRQHandler+0x702>
 800c202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c206:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d003      	beq.n	800c216 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f001 fb55 	bl	800d8be <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c214:	e016      	b.n	800c244 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c21a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d010      	beq.n	800c244 <HAL_UART_IRQHandler+0x730>
 800c222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c226:	2b00      	cmp	r3, #0
 800c228:	da0c      	bge.n	800c244 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f001 fb3d 	bl	800d8aa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c230:	e008      	b.n	800c244 <HAL_UART_IRQHandler+0x730>
      return;
 800c232:	bf00      	nop
 800c234:	e006      	b.n	800c244 <HAL_UART_IRQHandler+0x730>
    return;
 800c236:	bf00      	nop
 800c238:	e004      	b.n	800c244 <HAL_UART_IRQHandler+0x730>
      return;
 800c23a:	bf00      	nop
 800c23c:	e002      	b.n	800c244 <HAL_UART_IRQHandler+0x730>
      return;
 800c23e:	bf00      	nop
 800c240:	e000      	b.n	800c244 <HAL_UART_IRQHandler+0x730>
    return;
 800c242:	bf00      	nop
  }
}
 800c244:	37e8      	adds	r7, #232	; 0xe8
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	effffffe 	.word	0xeffffffe

0800c250 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c258:	bf00      	nop
 800c25a:	370c      	adds	r7, #12
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c26c:	bf00      	nop
 800c26e:	370c      	adds	r7, #12
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr

0800c278 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c280:	bf00      	nop
 800c282:	370c      	adds	r7, #12
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	460b      	mov	r3, r1
 800c296:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c298:	bf00      	nop
 800c29a:	370c      	adds	r7, #12
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr

0800c2a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c2a8:	b092      	sub	sp, #72	; 0x48
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	689a      	ldr	r2, [r3, #8]
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	691b      	ldr	r3, [r3, #16]
 800c2bc:	431a      	orrs	r2, r3
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	695b      	ldr	r3, [r3, #20]
 800c2c2:	431a      	orrs	r2, r3
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	69db      	ldr	r3, [r3, #28]
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	4bbe      	ldr	r3, [pc, #760]	; (800c5cc <UART_SetConfig+0x328>)
 800c2d4:	4013      	ands	r3, r2
 800c2d6:	697a      	ldr	r2, [r7, #20]
 800c2d8:	6812      	ldr	r2, [r2, #0]
 800c2da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c2dc:	430b      	orrs	r3, r1
 800c2de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	68da      	ldr	r2, [r3, #12]
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	430a      	orrs	r2, r1
 800c2f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	699b      	ldr	r3, [r3, #24]
 800c2fa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4ab3      	ldr	r2, [pc, #716]	; (800c5d0 <UART_SetConfig+0x32c>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d004      	beq.n	800c310 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	6a1b      	ldr	r3, [r3, #32]
 800c30a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c30c:	4313      	orrs	r3, r2
 800c30e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	689a      	ldr	r2, [r3, #8]
 800c316:	4baf      	ldr	r3, [pc, #700]	; (800c5d4 <UART_SetConfig+0x330>)
 800c318:	4013      	ands	r3, r2
 800c31a:	697a      	ldr	r2, [r7, #20]
 800c31c:	6812      	ldr	r2, [r2, #0]
 800c31e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c320:	430b      	orrs	r3, r1
 800c322:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c32a:	f023 010f 	bic.w	r1, r3, #15
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	430a      	orrs	r2, r1
 800c338:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4aa6      	ldr	r2, [pc, #664]	; (800c5d8 <UART_SetConfig+0x334>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d177      	bne.n	800c434 <UART_SetConfig+0x190>
 800c344:	4ba5      	ldr	r3, [pc, #660]	; (800c5dc <UART_SetConfig+0x338>)
 800c346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c348:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c34c:	2b28      	cmp	r3, #40	; 0x28
 800c34e:	d86d      	bhi.n	800c42c <UART_SetConfig+0x188>
 800c350:	a201      	add	r2, pc, #4	; (adr r2, 800c358 <UART_SetConfig+0xb4>)
 800c352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c356:	bf00      	nop
 800c358:	0800c3fd 	.word	0x0800c3fd
 800c35c:	0800c42d 	.word	0x0800c42d
 800c360:	0800c42d 	.word	0x0800c42d
 800c364:	0800c42d 	.word	0x0800c42d
 800c368:	0800c42d 	.word	0x0800c42d
 800c36c:	0800c42d 	.word	0x0800c42d
 800c370:	0800c42d 	.word	0x0800c42d
 800c374:	0800c42d 	.word	0x0800c42d
 800c378:	0800c405 	.word	0x0800c405
 800c37c:	0800c42d 	.word	0x0800c42d
 800c380:	0800c42d 	.word	0x0800c42d
 800c384:	0800c42d 	.word	0x0800c42d
 800c388:	0800c42d 	.word	0x0800c42d
 800c38c:	0800c42d 	.word	0x0800c42d
 800c390:	0800c42d 	.word	0x0800c42d
 800c394:	0800c42d 	.word	0x0800c42d
 800c398:	0800c40d 	.word	0x0800c40d
 800c39c:	0800c42d 	.word	0x0800c42d
 800c3a0:	0800c42d 	.word	0x0800c42d
 800c3a4:	0800c42d 	.word	0x0800c42d
 800c3a8:	0800c42d 	.word	0x0800c42d
 800c3ac:	0800c42d 	.word	0x0800c42d
 800c3b0:	0800c42d 	.word	0x0800c42d
 800c3b4:	0800c42d 	.word	0x0800c42d
 800c3b8:	0800c415 	.word	0x0800c415
 800c3bc:	0800c42d 	.word	0x0800c42d
 800c3c0:	0800c42d 	.word	0x0800c42d
 800c3c4:	0800c42d 	.word	0x0800c42d
 800c3c8:	0800c42d 	.word	0x0800c42d
 800c3cc:	0800c42d 	.word	0x0800c42d
 800c3d0:	0800c42d 	.word	0x0800c42d
 800c3d4:	0800c42d 	.word	0x0800c42d
 800c3d8:	0800c41d 	.word	0x0800c41d
 800c3dc:	0800c42d 	.word	0x0800c42d
 800c3e0:	0800c42d 	.word	0x0800c42d
 800c3e4:	0800c42d 	.word	0x0800c42d
 800c3e8:	0800c42d 	.word	0x0800c42d
 800c3ec:	0800c42d 	.word	0x0800c42d
 800c3f0:	0800c42d 	.word	0x0800c42d
 800c3f4:	0800c42d 	.word	0x0800c42d
 800c3f8:	0800c425 	.word	0x0800c425
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c402:	e326      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c404:	2304      	movs	r3, #4
 800c406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c40a:	e322      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c40c:	2308      	movs	r3, #8
 800c40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c412:	e31e      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c414:	2310      	movs	r3, #16
 800c416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c41a:	e31a      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c41c:	2320      	movs	r3, #32
 800c41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c422:	e316      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c424:	2340      	movs	r3, #64	; 0x40
 800c426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c42a:	e312      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c42c:	2380      	movs	r3, #128	; 0x80
 800c42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c432:	e30e      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a69      	ldr	r2, [pc, #420]	; (800c5e0 <UART_SetConfig+0x33c>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d130      	bne.n	800c4a0 <UART_SetConfig+0x1fc>
 800c43e:	4b67      	ldr	r3, [pc, #412]	; (800c5dc <UART_SetConfig+0x338>)
 800c440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c442:	f003 0307 	and.w	r3, r3, #7
 800c446:	2b05      	cmp	r3, #5
 800c448:	d826      	bhi.n	800c498 <UART_SetConfig+0x1f4>
 800c44a:	a201      	add	r2, pc, #4	; (adr r2, 800c450 <UART_SetConfig+0x1ac>)
 800c44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c450:	0800c469 	.word	0x0800c469
 800c454:	0800c471 	.word	0x0800c471
 800c458:	0800c479 	.word	0x0800c479
 800c45c:	0800c481 	.word	0x0800c481
 800c460:	0800c489 	.word	0x0800c489
 800c464:	0800c491 	.word	0x0800c491
 800c468:	2300      	movs	r3, #0
 800c46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c46e:	e2f0      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c470:	2304      	movs	r3, #4
 800c472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c476:	e2ec      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c478:	2308      	movs	r3, #8
 800c47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c47e:	e2e8      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c480:	2310      	movs	r3, #16
 800c482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c486:	e2e4      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c488:	2320      	movs	r3, #32
 800c48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c48e:	e2e0      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c490:	2340      	movs	r3, #64	; 0x40
 800c492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c496:	e2dc      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c498:	2380      	movs	r3, #128	; 0x80
 800c49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c49e:	e2d8      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4a4f      	ldr	r2, [pc, #316]	; (800c5e4 <UART_SetConfig+0x340>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d130      	bne.n	800c50c <UART_SetConfig+0x268>
 800c4aa:	4b4c      	ldr	r3, [pc, #304]	; (800c5dc <UART_SetConfig+0x338>)
 800c4ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4ae:	f003 0307 	and.w	r3, r3, #7
 800c4b2:	2b05      	cmp	r3, #5
 800c4b4:	d826      	bhi.n	800c504 <UART_SetConfig+0x260>
 800c4b6:	a201      	add	r2, pc, #4	; (adr r2, 800c4bc <UART_SetConfig+0x218>)
 800c4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4bc:	0800c4d5 	.word	0x0800c4d5
 800c4c0:	0800c4dd 	.word	0x0800c4dd
 800c4c4:	0800c4e5 	.word	0x0800c4e5
 800c4c8:	0800c4ed 	.word	0x0800c4ed
 800c4cc:	0800c4f5 	.word	0x0800c4f5
 800c4d0:	0800c4fd 	.word	0x0800c4fd
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4da:	e2ba      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c4dc:	2304      	movs	r3, #4
 800c4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4e2:	e2b6      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c4e4:	2308      	movs	r3, #8
 800c4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ea:	e2b2      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c4ec:	2310      	movs	r3, #16
 800c4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4f2:	e2ae      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c4f4:	2320      	movs	r3, #32
 800c4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4fa:	e2aa      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c4fc:	2340      	movs	r3, #64	; 0x40
 800c4fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c502:	e2a6      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c504:	2380      	movs	r3, #128	; 0x80
 800c506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c50a:	e2a2      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a35      	ldr	r2, [pc, #212]	; (800c5e8 <UART_SetConfig+0x344>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d130      	bne.n	800c578 <UART_SetConfig+0x2d4>
 800c516:	4b31      	ldr	r3, [pc, #196]	; (800c5dc <UART_SetConfig+0x338>)
 800c518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c51a:	f003 0307 	and.w	r3, r3, #7
 800c51e:	2b05      	cmp	r3, #5
 800c520:	d826      	bhi.n	800c570 <UART_SetConfig+0x2cc>
 800c522:	a201      	add	r2, pc, #4	; (adr r2, 800c528 <UART_SetConfig+0x284>)
 800c524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c528:	0800c541 	.word	0x0800c541
 800c52c:	0800c549 	.word	0x0800c549
 800c530:	0800c551 	.word	0x0800c551
 800c534:	0800c559 	.word	0x0800c559
 800c538:	0800c561 	.word	0x0800c561
 800c53c:	0800c569 	.word	0x0800c569
 800c540:	2300      	movs	r3, #0
 800c542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c546:	e284      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c548:	2304      	movs	r3, #4
 800c54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c54e:	e280      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c550:	2308      	movs	r3, #8
 800c552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c556:	e27c      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c558:	2310      	movs	r3, #16
 800c55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c55e:	e278      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c560:	2320      	movs	r3, #32
 800c562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c566:	e274      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c568:	2340      	movs	r3, #64	; 0x40
 800c56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c56e:	e270      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c570:	2380      	movs	r3, #128	; 0x80
 800c572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c576:	e26c      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4a1b      	ldr	r2, [pc, #108]	; (800c5ec <UART_SetConfig+0x348>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d142      	bne.n	800c608 <UART_SetConfig+0x364>
 800c582:	4b16      	ldr	r3, [pc, #88]	; (800c5dc <UART_SetConfig+0x338>)
 800c584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c586:	f003 0307 	and.w	r3, r3, #7
 800c58a:	2b05      	cmp	r3, #5
 800c58c:	d838      	bhi.n	800c600 <UART_SetConfig+0x35c>
 800c58e:	a201      	add	r2, pc, #4	; (adr r2, 800c594 <UART_SetConfig+0x2f0>)
 800c590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c594:	0800c5ad 	.word	0x0800c5ad
 800c598:	0800c5b5 	.word	0x0800c5b5
 800c59c:	0800c5bd 	.word	0x0800c5bd
 800c5a0:	0800c5c5 	.word	0x0800c5c5
 800c5a4:	0800c5f1 	.word	0x0800c5f1
 800c5a8:	0800c5f9 	.word	0x0800c5f9
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5b2:	e24e      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c5b4:	2304      	movs	r3, #4
 800c5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ba:	e24a      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c5bc:	2308      	movs	r3, #8
 800c5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5c2:	e246      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c5c4:	2310      	movs	r3, #16
 800c5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ca:	e242      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c5cc:	cfff69f3 	.word	0xcfff69f3
 800c5d0:	58000c00 	.word	0x58000c00
 800c5d4:	11fff4ff 	.word	0x11fff4ff
 800c5d8:	40011000 	.word	0x40011000
 800c5dc:	58024400 	.word	0x58024400
 800c5e0:	40004400 	.word	0x40004400
 800c5e4:	40004800 	.word	0x40004800
 800c5e8:	40004c00 	.word	0x40004c00
 800c5ec:	40005000 	.word	0x40005000
 800c5f0:	2320      	movs	r3, #32
 800c5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5f6:	e22c      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c5f8:	2340      	movs	r3, #64	; 0x40
 800c5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5fe:	e228      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c600:	2380      	movs	r3, #128	; 0x80
 800c602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c606:	e224      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4ab1      	ldr	r2, [pc, #708]	; (800c8d4 <UART_SetConfig+0x630>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d176      	bne.n	800c700 <UART_SetConfig+0x45c>
 800c612:	4bb1      	ldr	r3, [pc, #708]	; (800c8d8 <UART_SetConfig+0x634>)
 800c614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c616:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c61a:	2b28      	cmp	r3, #40	; 0x28
 800c61c:	d86c      	bhi.n	800c6f8 <UART_SetConfig+0x454>
 800c61e:	a201      	add	r2, pc, #4	; (adr r2, 800c624 <UART_SetConfig+0x380>)
 800c620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c624:	0800c6c9 	.word	0x0800c6c9
 800c628:	0800c6f9 	.word	0x0800c6f9
 800c62c:	0800c6f9 	.word	0x0800c6f9
 800c630:	0800c6f9 	.word	0x0800c6f9
 800c634:	0800c6f9 	.word	0x0800c6f9
 800c638:	0800c6f9 	.word	0x0800c6f9
 800c63c:	0800c6f9 	.word	0x0800c6f9
 800c640:	0800c6f9 	.word	0x0800c6f9
 800c644:	0800c6d1 	.word	0x0800c6d1
 800c648:	0800c6f9 	.word	0x0800c6f9
 800c64c:	0800c6f9 	.word	0x0800c6f9
 800c650:	0800c6f9 	.word	0x0800c6f9
 800c654:	0800c6f9 	.word	0x0800c6f9
 800c658:	0800c6f9 	.word	0x0800c6f9
 800c65c:	0800c6f9 	.word	0x0800c6f9
 800c660:	0800c6f9 	.word	0x0800c6f9
 800c664:	0800c6d9 	.word	0x0800c6d9
 800c668:	0800c6f9 	.word	0x0800c6f9
 800c66c:	0800c6f9 	.word	0x0800c6f9
 800c670:	0800c6f9 	.word	0x0800c6f9
 800c674:	0800c6f9 	.word	0x0800c6f9
 800c678:	0800c6f9 	.word	0x0800c6f9
 800c67c:	0800c6f9 	.word	0x0800c6f9
 800c680:	0800c6f9 	.word	0x0800c6f9
 800c684:	0800c6e1 	.word	0x0800c6e1
 800c688:	0800c6f9 	.word	0x0800c6f9
 800c68c:	0800c6f9 	.word	0x0800c6f9
 800c690:	0800c6f9 	.word	0x0800c6f9
 800c694:	0800c6f9 	.word	0x0800c6f9
 800c698:	0800c6f9 	.word	0x0800c6f9
 800c69c:	0800c6f9 	.word	0x0800c6f9
 800c6a0:	0800c6f9 	.word	0x0800c6f9
 800c6a4:	0800c6e9 	.word	0x0800c6e9
 800c6a8:	0800c6f9 	.word	0x0800c6f9
 800c6ac:	0800c6f9 	.word	0x0800c6f9
 800c6b0:	0800c6f9 	.word	0x0800c6f9
 800c6b4:	0800c6f9 	.word	0x0800c6f9
 800c6b8:	0800c6f9 	.word	0x0800c6f9
 800c6bc:	0800c6f9 	.word	0x0800c6f9
 800c6c0:	0800c6f9 	.word	0x0800c6f9
 800c6c4:	0800c6f1 	.word	0x0800c6f1
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ce:	e1c0      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c6d0:	2304      	movs	r3, #4
 800c6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6d6:	e1bc      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c6d8:	2308      	movs	r3, #8
 800c6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6de:	e1b8      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c6e0:	2310      	movs	r3, #16
 800c6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6e6:	e1b4      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c6e8:	2320      	movs	r3, #32
 800c6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ee:	e1b0      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c6f0:	2340      	movs	r3, #64	; 0x40
 800c6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6f6:	e1ac      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c6f8:	2380      	movs	r3, #128	; 0x80
 800c6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6fe:	e1a8      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4a75      	ldr	r2, [pc, #468]	; (800c8dc <UART_SetConfig+0x638>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d130      	bne.n	800c76c <UART_SetConfig+0x4c8>
 800c70a:	4b73      	ldr	r3, [pc, #460]	; (800c8d8 <UART_SetConfig+0x634>)
 800c70c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c70e:	f003 0307 	and.w	r3, r3, #7
 800c712:	2b05      	cmp	r3, #5
 800c714:	d826      	bhi.n	800c764 <UART_SetConfig+0x4c0>
 800c716:	a201      	add	r2, pc, #4	; (adr r2, 800c71c <UART_SetConfig+0x478>)
 800c718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c71c:	0800c735 	.word	0x0800c735
 800c720:	0800c73d 	.word	0x0800c73d
 800c724:	0800c745 	.word	0x0800c745
 800c728:	0800c74d 	.word	0x0800c74d
 800c72c:	0800c755 	.word	0x0800c755
 800c730:	0800c75d 	.word	0x0800c75d
 800c734:	2300      	movs	r3, #0
 800c736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c73a:	e18a      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c73c:	2304      	movs	r3, #4
 800c73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c742:	e186      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c744:	2308      	movs	r3, #8
 800c746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c74a:	e182      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c74c:	2310      	movs	r3, #16
 800c74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c752:	e17e      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c754:	2320      	movs	r3, #32
 800c756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c75a:	e17a      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c75c:	2340      	movs	r3, #64	; 0x40
 800c75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c762:	e176      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c764:	2380      	movs	r3, #128	; 0x80
 800c766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c76a:	e172      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a5b      	ldr	r2, [pc, #364]	; (800c8e0 <UART_SetConfig+0x63c>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d130      	bne.n	800c7d8 <UART_SetConfig+0x534>
 800c776:	4b58      	ldr	r3, [pc, #352]	; (800c8d8 <UART_SetConfig+0x634>)
 800c778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c77a:	f003 0307 	and.w	r3, r3, #7
 800c77e:	2b05      	cmp	r3, #5
 800c780:	d826      	bhi.n	800c7d0 <UART_SetConfig+0x52c>
 800c782:	a201      	add	r2, pc, #4	; (adr r2, 800c788 <UART_SetConfig+0x4e4>)
 800c784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c788:	0800c7a1 	.word	0x0800c7a1
 800c78c:	0800c7a9 	.word	0x0800c7a9
 800c790:	0800c7b1 	.word	0x0800c7b1
 800c794:	0800c7b9 	.word	0x0800c7b9
 800c798:	0800c7c1 	.word	0x0800c7c1
 800c79c:	0800c7c9 	.word	0x0800c7c9
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7a6:	e154      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c7a8:	2304      	movs	r3, #4
 800c7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ae:	e150      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c7b0:	2308      	movs	r3, #8
 800c7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7b6:	e14c      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c7b8:	2310      	movs	r3, #16
 800c7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7be:	e148      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c7c0:	2320      	movs	r3, #32
 800c7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7c6:	e144      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c7c8:	2340      	movs	r3, #64	; 0x40
 800c7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ce:	e140      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c7d0:	2380      	movs	r3, #128	; 0x80
 800c7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7d6:	e13c      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4a41      	ldr	r2, [pc, #260]	; (800c8e4 <UART_SetConfig+0x640>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	f040 8082 	bne.w	800c8e8 <UART_SetConfig+0x644>
 800c7e4:	4b3c      	ldr	r3, [pc, #240]	; (800c8d8 <UART_SetConfig+0x634>)
 800c7e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c7ec:	2b28      	cmp	r3, #40	; 0x28
 800c7ee:	d86d      	bhi.n	800c8cc <UART_SetConfig+0x628>
 800c7f0:	a201      	add	r2, pc, #4	; (adr r2, 800c7f8 <UART_SetConfig+0x554>)
 800c7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7f6:	bf00      	nop
 800c7f8:	0800c89d 	.word	0x0800c89d
 800c7fc:	0800c8cd 	.word	0x0800c8cd
 800c800:	0800c8cd 	.word	0x0800c8cd
 800c804:	0800c8cd 	.word	0x0800c8cd
 800c808:	0800c8cd 	.word	0x0800c8cd
 800c80c:	0800c8cd 	.word	0x0800c8cd
 800c810:	0800c8cd 	.word	0x0800c8cd
 800c814:	0800c8cd 	.word	0x0800c8cd
 800c818:	0800c8a5 	.word	0x0800c8a5
 800c81c:	0800c8cd 	.word	0x0800c8cd
 800c820:	0800c8cd 	.word	0x0800c8cd
 800c824:	0800c8cd 	.word	0x0800c8cd
 800c828:	0800c8cd 	.word	0x0800c8cd
 800c82c:	0800c8cd 	.word	0x0800c8cd
 800c830:	0800c8cd 	.word	0x0800c8cd
 800c834:	0800c8cd 	.word	0x0800c8cd
 800c838:	0800c8ad 	.word	0x0800c8ad
 800c83c:	0800c8cd 	.word	0x0800c8cd
 800c840:	0800c8cd 	.word	0x0800c8cd
 800c844:	0800c8cd 	.word	0x0800c8cd
 800c848:	0800c8cd 	.word	0x0800c8cd
 800c84c:	0800c8cd 	.word	0x0800c8cd
 800c850:	0800c8cd 	.word	0x0800c8cd
 800c854:	0800c8cd 	.word	0x0800c8cd
 800c858:	0800c8b5 	.word	0x0800c8b5
 800c85c:	0800c8cd 	.word	0x0800c8cd
 800c860:	0800c8cd 	.word	0x0800c8cd
 800c864:	0800c8cd 	.word	0x0800c8cd
 800c868:	0800c8cd 	.word	0x0800c8cd
 800c86c:	0800c8cd 	.word	0x0800c8cd
 800c870:	0800c8cd 	.word	0x0800c8cd
 800c874:	0800c8cd 	.word	0x0800c8cd
 800c878:	0800c8bd 	.word	0x0800c8bd
 800c87c:	0800c8cd 	.word	0x0800c8cd
 800c880:	0800c8cd 	.word	0x0800c8cd
 800c884:	0800c8cd 	.word	0x0800c8cd
 800c888:	0800c8cd 	.word	0x0800c8cd
 800c88c:	0800c8cd 	.word	0x0800c8cd
 800c890:	0800c8cd 	.word	0x0800c8cd
 800c894:	0800c8cd 	.word	0x0800c8cd
 800c898:	0800c8c5 	.word	0x0800c8c5
 800c89c:	2301      	movs	r3, #1
 800c89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8a2:	e0d6      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c8a4:	2304      	movs	r3, #4
 800c8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8aa:	e0d2      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c8ac:	2308      	movs	r3, #8
 800c8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8b2:	e0ce      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c8b4:	2310      	movs	r3, #16
 800c8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ba:	e0ca      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c8bc:	2320      	movs	r3, #32
 800c8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8c2:	e0c6      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c8c4:	2340      	movs	r3, #64	; 0x40
 800c8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ca:	e0c2      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c8cc:	2380      	movs	r3, #128	; 0x80
 800c8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8d2:	e0be      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c8d4:	40011400 	.word	0x40011400
 800c8d8:	58024400 	.word	0x58024400
 800c8dc:	40007800 	.word	0x40007800
 800c8e0:	40007c00 	.word	0x40007c00
 800c8e4:	40011800 	.word	0x40011800
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4aad      	ldr	r2, [pc, #692]	; (800cba4 <UART_SetConfig+0x900>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d176      	bne.n	800c9e0 <UART_SetConfig+0x73c>
 800c8f2:	4bad      	ldr	r3, [pc, #692]	; (800cba8 <UART_SetConfig+0x904>)
 800c8f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c8fa:	2b28      	cmp	r3, #40	; 0x28
 800c8fc:	d86c      	bhi.n	800c9d8 <UART_SetConfig+0x734>
 800c8fe:	a201      	add	r2, pc, #4	; (adr r2, 800c904 <UART_SetConfig+0x660>)
 800c900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c904:	0800c9a9 	.word	0x0800c9a9
 800c908:	0800c9d9 	.word	0x0800c9d9
 800c90c:	0800c9d9 	.word	0x0800c9d9
 800c910:	0800c9d9 	.word	0x0800c9d9
 800c914:	0800c9d9 	.word	0x0800c9d9
 800c918:	0800c9d9 	.word	0x0800c9d9
 800c91c:	0800c9d9 	.word	0x0800c9d9
 800c920:	0800c9d9 	.word	0x0800c9d9
 800c924:	0800c9b1 	.word	0x0800c9b1
 800c928:	0800c9d9 	.word	0x0800c9d9
 800c92c:	0800c9d9 	.word	0x0800c9d9
 800c930:	0800c9d9 	.word	0x0800c9d9
 800c934:	0800c9d9 	.word	0x0800c9d9
 800c938:	0800c9d9 	.word	0x0800c9d9
 800c93c:	0800c9d9 	.word	0x0800c9d9
 800c940:	0800c9d9 	.word	0x0800c9d9
 800c944:	0800c9b9 	.word	0x0800c9b9
 800c948:	0800c9d9 	.word	0x0800c9d9
 800c94c:	0800c9d9 	.word	0x0800c9d9
 800c950:	0800c9d9 	.word	0x0800c9d9
 800c954:	0800c9d9 	.word	0x0800c9d9
 800c958:	0800c9d9 	.word	0x0800c9d9
 800c95c:	0800c9d9 	.word	0x0800c9d9
 800c960:	0800c9d9 	.word	0x0800c9d9
 800c964:	0800c9c1 	.word	0x0800c9c1
 800c968:	0800c9d9 	.word	0x0800c9d9
 800c96c:	0800c9d9 	.word	0x0800c9d9
 800c970:	0800c9d9 	.word	0x0800c9d9
 800c974:	0800c9d9 	.word	0x0800c9d9
 800c978:	0800c9d9 	.word	0x0800c9d9
 800c97c:	0800c9d9 	.word	0x0800c9d9
 800c980:	0800c9d9 	.word	0x0800c9d9
 800c984:	0800c9c9 	.word	0x0800c9c9
 800c988:	0800c9d9 	.word	0x0800c9d9
 800c98c:	0800c9d9 	.word	0x0800c9d9
 800c990:	0800c9d9 	.word	0x0800c9d9
 800c994:	0800c9d9 	.word	0x0800c9d9
 800c998:	0800c9d9 	.word	0x0800c9d9
 800c99c:	0800c9d9 	.word	0x0800c9d9
 800c9a0:	0800c9d9 	.word	0x0800c9d9
 800c9a4:	0800c9d1 	.word	0x0800c9d1
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ae:	e050      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c9b0:	2304      	movs	r3, #4
 800c9b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9b6:	e04c      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c9b8:	2308      	movs	r3, #8
 800c9ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9be:	e048      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c9c0:	2310      	movs	r3, #16
 800c9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9c6:	e044      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c9c8:	2320      	movs	r3, #32
 800c9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ce:	e040      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c9d0:	2340      	movs	r3, #64	; 0x40
 800c9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9d6:	e03c      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c9d8:	2380      	movs	r3, #128	; 0x80
 800c9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9de:	e038      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4a71      	ldr	r2, [pc, #452]	; (800cbac <UART_SetConfig+0x908>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d130      	bne.n	800ca4c <UART_SetConfig+0x7a8>
 800c9ea:	4b6f      	ldr	r3, [pc, #444]	; (800cba8 <UART_SetConfig+0x904>)
 800c9ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9ee:	f003 0307 	and.w	r3, r3, #7
 800c9f2:	2b05      	cmp	r3, #5
 800c9f4:	d826      	bhi.n	800ca44 <UART_SetConfig+0x7a0>
 800c9f6:	a201      	add	r2, pc, #4	; (adr r2, 800c9fc <UART_SetConfig+0x758>)
 800c9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9fc:	0800ca15 	.word	0x0800ca15
 800ca00:	0800ca1d 	.word	0x0800ca1d
 800ca04:	0800ca25 	.word	0x0800ca25
 800ca08:	0800ca2d 	.word	0x0800ca2d
 800ca0c:	0800ca35 	.word	0x0800ca35
 800ca10:	0800ca3d 	.word	0x0800ca3d
 800ca14:	2302      	movs	r3, #2
 800ca16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca1a:	e01a      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800ca1c:	2304      	movs	r3, #4
 800ca1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca22:	e016      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800ca24:	2308      	movs	r3, #8
 800ca26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca2a:	e012      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800ca2c:	2310      	movs	r3, #16
 800ca2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca32:	e00e      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800ca34:	2320      	movs	r3, #32
 800ca36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca3a:	e00a      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800ca3c:	2340      	movs	r3, #64	; 0x40
 800ca3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca42:	e006      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800ca44:	2380      	movs	r3, #128	; 0x80
 800ca46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca4a:	e002      	b.n	800ca52 <UART_SetConfig+0x7ae>
 800ca4c:	2380      	movs	r3, #128	; 0x80
 800ca4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4a55      	ldr	r2, [pc, #340]	; (800cbac <UART_SetConfig+0x908>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	f040 80f8 	bne.w	800cc4e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ca5e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ca62:	2b20      	cmp	r3, #32
 800ca64:	dc46      	bgt.n	800caf4 <UART_SetConfig+0x850>
 800ca66:	2b02      	cmp	r3, #2
 800ca68:	db75      	blt.n	800cb56 <UART_SetConfig+0x8b2>
 800ca6a:	3b02      	subs	r3, #2
 800ca6c:	2b1e      	cmp	r3, #30
 800ca6e:	d872      	bhi.n	800cb56 <UART_SetConfig+0x8b2>
 800ca70:	a201      	add	r2, pc, #4	; (adr r2, 800ca78 <UART_SetConfig+0x7d4>)
 800ca72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca76:	bf00      	nop
 800ca78:	0800cafb 	.word	0x0800cafb
 800ca7c:	0800cb57 	.word	0x0800cb57
 800ca80:	0800cb03 	.word	0x0800cb03
 800ca84:	0800cb57 	.word	0x0800cb57
 800ca88:	0800cb57 	.word	0x0800cb57
 800ca8c:	0800cb57 	.word	0x0800cb57
 800ca90:	0800cb13 	.word	0x0800cb13
 800ca94:	0800cb57 	.word	0x0800cb57
 800ca98:	0800cb57 	.word	0x0800cb57
 800ca9c:	0800cb57 	.word	0x0800cb57
 800caa0:	0800cb57 	.word	0x0800cb57
 800caa4:	0800cb57 	.word	0x0800cb57
 800caa8:	0800cb57 	.word	0x0800cb57
 800caac:	0800cb57 	.word	0x0800cb57
 800cab0:	0800cb23 	.word	0x0800cb23
 800cab4:	0800cb57 	.word	0x0800cb57
 800cab8:	0800cb57 	.word	0x0800cb57
 800cabc:	0800cb57 	.word	0x0800cb57
 800cac0:	0800cb57 	.word	0x0800cb57
 800cac4:	0800cb57 	.word	0x0800cb57
 800cac8:	0800cb57 	.word	0x0800cb57
 800cacc:	0800cb57 	.word	0x0800cb57
 800cad0:	0800cb57 	.word	0x0800cb57
 800cad4:	0800cb57 	.word	0x0800cb57
 800cad8:	0800cb57 	.word	0x0800cb57
 800cadc:	0800cb57 	.word	0x0800cb57
 800cae0:	0800cb57 	.word	0x0800cb57
 800cae4:	0800cb57 	.word	0x0800cb57
 800cae8:	0800cb57 	.word	0x0800cb57
 800caec:	0800cb57 	.word	0x0800cb57
 800caf0:	0800cb49 	.word	0x0800cb49
 800caf4:	2b40      	cmp	r3, #64	; 0x40
 800caf6:	d02a      	beq.n	800cb4e <UART_SetConfig+0x8aa>
 800caf8:	e02d      	b.n	800cb56 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cafa:	f7fc ff87 	bl	8009a0c <HAL_RCCEx_GetD3PCLK1Freq>
 800cafe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb00:	e02f      	b.n	800cb62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7fc ff96 	bl	8009a38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb10:	e027      	b.n	800cb62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb12:	f107 0318 	add.w	r3, r7, #24
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7fd f8e2 	bl	8009ce0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb1c:	69fb      	ldr	r3, [r7, #28]
 800cb1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb20:	e01f      	b.n	800cb62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb22:	4b21      	ldr	r3, [pc, #132]	; (800cba8 <UART_SetConfig+0x904>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f003 0320 	and.w	r3, r3, #32
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d009      	beq.n	800cb42 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb2e:	4b1e      	ldr	r3, [pc, #120]	; (800cba8 <UART_SetConfig+0x904>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	08db      	lsrs	r3, r3, #3
 800cb34:	f003 0303 	and.w	r3, r3, #3
 800cb38:	4a1d      	ldr	r2, [pc, #116]	; (800cbb0 <UART_SetConfig+0x90c>)
 800cb3a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb40:	e00f      	b.n	800cb62 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cb42:	4b1b      	ldr	r3, [pc, #108]	; (800cbb0 <UART_SetConfig+0x90c>)
 800cb44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb46:	e00c      	b.n	800cb62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cb48:	4b1a      	ldr	r3, [pc, #104]	; (800cbb4 <UART_SetConfig+0x910>)
 800cb4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb4c:	e009      	b.n	800cb62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb54:	e005      	b.n	800cb62 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cb56:	2300      	movs	r3, #0
 800cb58:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cb60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cb62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	f000 81ee 	beq.w	800cf46 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb6e:	4a12      	ldr	r2, [pc, #72]	; (800cbb8 <UART_SetConfig+0x914>)
 800cb70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb74:	461a      	mov	r2, r3
 800cb76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb78:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb7c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	685a      	ldr	r2, [r3, #4]
 800cb82:	4613      	mov	r3, r2
 800cb84:	005b      	lsls	r3, r3, #1
 800cb86:	4413      	add	r3, r2
 800cb88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d305      	bcc.n	800cb9a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d910      	bls.n	800cbbc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cba0:	e1d1      	b.n	800cf46 <UART_SetConfig+0xca2>
 800cba2:	bf00      	nop
 800cba4:	40011c00 	.word	0x40011c00
 800cba8:	58024400 	.word	0x58024400
 800cbac:	58000c00 	.word	0x58000c00
 800cbb0:	03d09000 	.word	0x03d09000
 800cbb4:	003d0900 	.word	0x003d0900
 800cbb8:	0800e188 	.word	0x0800e188
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	60bb      	str	r3, [r7, #8]
 800cbc2:	60fa      	str	r2, [r7, #12]
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc8:	4ac0      	ldr	r2, [pc, #768]	; (800cecc <UART_SetConfig+0xc28>)
 800cbca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbce:	b29b      	uxth	r3, r3
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	603b      	str	r3, [r7, #0]
 800cbd4:	607a      	str	r2, [r7, #4]
 800cbd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cbde:	f7f3 fb9f 	bl	8000320 <__aeabi_uldivmod>
 800cbe2:	4602      	mov	r2, r0
 800cbe4:	460b      	mov	r3, r1
 800cbe6:	4610      	mov	r0, r2
 800cbe8:	4619      	mov	r1, r3
 800cbea:	f04f 0200 	mov.w	r2, #0
 800cbee:	f04f 0300 	mov.w	r3, #0
 800cbf2:	020b      	lsls	r3, r1, #8
 800cbf4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cbf8:	0202      	lsls	r2, r0, #8
 800cbfa:	6979      	ldr	r1, [r7, #20]
 800cbfc:	6849      	ldr	r1, [r1, #4]
 800cbfe:	0849      	lsrs	r1, r1, #1
 800cc00:	2000      	movs	r0, #0
 800cc02:	460c      	mov	r4, r1
 800cc04:	4605      	mov	r5, r0
 800cc06:	eb12 0804 	adds.w	r8, r2, r4
 800cc0a:	eb43 0905 	adc.w	r9, r3, r5
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	2200      	movs	r2, #0
 800cc14:	469a      	mov	sl, r3
 800cc16:	4693      	mov	fp, r2
 800cc18:	4652      	mov	r2, sl
 800cc1a:	465b      	mov	r3, fp
 800cc1c:	4640      	mov	r0, r8
 800cc1e:	4649      	mov	r1, r9
 800cc20:	f7f3 fb7e 	bl	8000320 <__aeabi_uldivmod>
 800cc24:	4602      	mov	r2, r0
 800cc26:	460b      	mov	r3, r1
 800cc28:	4613      	mov	r3, r2
 800cc2a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc32:	d308      	bcc.n	800cc46 <UART_SetConfig+0x9a2>
 800cc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc3a:	d204      	bcs.n	800cc46 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc42:	60da      	str	r2, [r3, #12]
 800cc44:	e17f      	b.n	800cf46 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800cc46:	2301      	movs	r3, #1
 800cc48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cc4c:	e17b      	b.n	800cf46 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	69db      	ldr	r3, [r3, #28]
 800cc52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc56:	f040 80bd 	bne.w	800cdd4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800cc5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cc5e:	2b20      	cmp	r3, #32
 800cc60:	dc48      	bgt.n	800ccf4 <UART_SetConfig+0xa50>
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	db7b      	blt.n	800cd5e <UART_SetConfig+0xaba>
 800cc66:	2b20      	cmp	r3, #32
 800cc68:	d879      	bhi.n	800cd5e <UART_SetConfig+0xaba>
 800cc6a:	a201      	add	r2, pc, #4	; (adr r2, 800cc70 <UART_SetConfig+0x9cc>)
 800cc6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc70:	0800ccfb 	.word	0x0800ccfb
 800cc74:	0800cd03 	.word	0x0800cd03
 800cc78:	0800cd5f 	.word	0x0800cd5f
 800cc7c:	0800cd5f 	.word	0x0800cd5f
 800cc80:	0800cd0b 	.word	0x0800cd0b
 800cc84:	0800cd5f 	.word	0x0800cd5f
 800cc88:	0800cd5f 	.word	0x0800cd5f
 800cc8c:	0800cd5f 	.word	0x0800cd5f
 800cc90:	0800cd1b 	.word	0x0800cd1b
 800cc94:	0800cd5f 	.word	0x0800cd5f
 800cc98:	0800cd5f 	.word	0x0800cd5f
 800cc9c:	0800cd5f 	.word	0x0800cd5f
 800cca0:	0800cd5f 	.word	0x0800cd5f
 800cca4:	0800cd5f 	.word	0x0800cd5f
 800cca8:	0800cd5f 	.word	0x0800cd5f
 800ccac:	0800cd5f 	.word	0x0800cd5f
 800ccb0:	0800cd2b 	.word	0x0800cd2b
 800ccb4:	0800cd5f 	.word	0x0800cd5f
 800ccb8:	0800cd5f 	.word	0x0800cd5f
 800ccbc:	0800cd5f 	.word	0x0800cd5f
 800ccc0:	0800cd5f 	.word	0x0800cd5f
 800ccc4:	0800cd5f 	.word	0x0800cd5f
 800ccc8:	0800cd5f 	.word	0x0800cd5f
 800cccc:	0800cd5f 	.word	0x0800cd5f
 800ccd0:	0800cd5f 	.word	0x0800cd5f
 800ccd4:	0800cd5f 	.word	0x0800cd5f
 800ccd8:	0800cd5f 	.word	0x0800cd5f
 800ccdc:	0800cd5f 	.word	0x0800cd5f
 800cce0:	0800cd5f 	.word	0x0800cd5f
 800cce4:	0800cd5f 	.word	0x0800cd5f
 800cce8:	0800cd5f 	.word	0x0800cd5f
 800ccec:	0800cd5f 	.word	0x0800cd5f
 800ccf0:	0800cd51 	.word	0x0800cd51
 800ccf4:	2b40      	cmp	r3, #64	; 0x40
 800ccf6:	d02e      	beq.n	800cd56 <UART_SetConfig+0xab2>
 800ccf8:	e031      	b.n	800cd5e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ccfa:	f7fb ff61 	bl	8008bc0 <HAL_RCC_GetPCLK1Freq>
 800ccfe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd00:	e033      	b.n	800cd6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd02:	f7fb ff73 	bl	8008bec <HAL_RCC_GetPCLK2Freq>
 800cd06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd08:	e02f      	b.n	800cd6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7fc fe92 	bl	8009a38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd18:	e027      	b.n	800cd6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd1a:	f107 0318 	add.w	r3, r7, #24
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7fc ffde 	bl	8009ce0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd24:	69fb      	ldr	r3, [r7, #28]
 800cd26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd28:	e01f      	b.n	800cd6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd2a:	4b69      	ldr	r3, [pc, #420]	; (800ced0 <UART_SetConfig+0xc2c>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f003 0320 	and.w	r3, r3, #32
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d009      	beq.n	800cd4a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd36:	4b66      	ldr	r3, [pc, #408]	; (800ced0 <UART_SetConfig+0xc2c>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	08db      	lsrs	r3, r3, #3
 800cd3c:	f003 0303 	and.w	r3, r3, #3
 800cd40:	4a64      	ldr	r2, [pc, #400]	; (800ced4 <UART_SetConfig+0xc30>)
 800cd42:	fa22 f303 	lsr.w	r3, r2, r3
 800cd46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd48:	e00f      	b.n	800cd6a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800cd4a:	4b62      	ldr	r3, [pc, #392]	; (800ced4 <UART_SetConfig+0xc30>)
 800cd4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd4e:	e00c      	b.n	800cd6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd50:	4b61      	ldr	r3, [pc, #388]	; (800ced8 <UART_SetConfig+0xc34>)
 800cd52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd54:	e009      	b.n	800cd6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd5c:	e005      	b.n	800cd6a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cd62:	2301      	movs	r3, #1
 800cd64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cd68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cd6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	f000 80ea 	beq.w	800cf46 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd76:	4a55      	ldr	r2, [pc, #340]	; (800cecc <UART_SetConfig+0xc28>)
 800cd78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd7c:	461a      	mov	r2, r3
 800cd7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd80:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd84:	005a      	lsls	r2, r3, #1
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	085b      	lsrs	r3, r3, #1
 800cd8c:	441a      	add	r2, r3
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd96:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9a:	2b0f      	cmp	r3, #15
 800cd9c:	d916      	bls.n	800cdcc <UART_SetConfig+0xb28>
 800cd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cda4:	d212      	bcs.n	800cdcc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda8:	b29b      	uxth	r3, r3
 800cdaa:	f023 030f 	bic.w	r3, r3, #15
 800cdae:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb2:	085b      	lsrs	r3, r3, #1
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	f003 0307 	and.w	r3, r3, #7
 800cdba:	b29a      	uxth	r2, r3
 800cdbc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cdbe:	4313      	orrs	r3, r2
 800cdc0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cdc8:	60da      	str	r2, [r3, #12]
 800cdca:	e0bc      	b.n	800cf46 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cdd2:	e0b8      	b.n	800cf46 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cdd4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cdd8:	2b20      	cmp	r3, #32
 800cdda:	dc4b      	bgt.n	800ce74 <UART_SetConfig+0xbd0>
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	f2c0 8087 	blt.w	800cef0 <UART_SetConfig+0xc4c>
 800cde2:	2b20      	cmp	r3, #32
 800cde4:	f200 8084 	bhi.w	800cef0 <UART_SetConfig+0xc4c>
 800cde8:	a201      	add	r2, pc, #4	; (adr r2, 800cdf0 <UART_SetConfig+0xb4c>)
 800cdea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdee:	bf00      	nop
 800cdf0:	0800ce7b 	.word	0x0800ce7b
 800cdf4:	0800ce83 	.word	0x0800ce83
 800cdf8:	0800cef1 	.word	0x0800cef1
 800cdfc:	0800cef1 	.word	0x0800cef1
 800ce00:	0800ce8b 	.word	0x0800ce8b
 800ce04:	0800cef1 	.word	0x0800cef1
 800ce08:	0800cef1 	.word	0x0800cef1
 800ce0c:	0800cef1 	.word	0x0800cef1
 800ce10:	0800ce9b 	.word	0x0800ce9b
 800ce14:	0800cef1 	.word	0x0800cef1
 800ce18:	0800cef1 	.word	0x0800cef1
 800ce1c:	0800cef1 	.word	0x0800cef1
 800ce20:	0800cef1 	.word	0x0800cef1
 800ce24:	0800cef1 	.word	0x0800cef1
 800ce28:	0800cef1 	.word	0x0800cef1
 800ce2c:	0800cef1 	.word	0x0800cef1
 800ce30:	0800ceab 	.word	0x0800ceab
 800ce34:	0800cef1 	.word	0x0800cef1
 800ce38:	0800cef1 	.word	0x0800cef1
 800ce3c:	0800cef1 	.word	0x0800cef1
 800ce40:	0800cef1 	.word	0x0800cef1
 800ce44:	0800cef1 	.word	0x0800cef1
 800ce48:	0800cef1 	.word	0x0800cef1
 800ce4c:	0800cef1 	.word	0x0800cef1
 800ce50:	0800cef1 	.word	0x0800cef1
 800ce54:	0800cef1 	.word	0x0800cef1
 800ce58:	0800cef1 	.word	0x0800cef1
 800ce5c:	0800cef1 	.word	0x0800cef1
 800ce60:	0800cef1 	.word	0x0800cef1
 800ce64:	0800cef1 	.word	0x0800cef1
 800ce68:	0800cef1 	.word	0x0800cef1
 800ce6c:	0800cef1 	.word	0x0800cef1
 800ce70:	0800cee3 	.word	0x0800cee3
 800ce74:	2b40      	cmp	r3, #64	; 0x40
 800ce76:	d037      	beq.n	800cee8 <UART_SetConfig+0xc44>
 800ce78:	e03a      	b.n	800cef0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce7a:	f7fb fea1 	bl	8008bc0 <HAL_RCC_GetPCLK1Freq>
 800ce7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ce80:	e03c      	b.n	800cefc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ce82:	f7fb feb3 	bl	8008bec <HAL_RCC_GetPCLK2Freq>
 800ce86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ce88:	e038      	b.n	800cefc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7fc fdd2 	bl	8009a38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ce94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce98:	e030      	b.n	800cefc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce9a:	f107 0318 	add.w	r3, r7, #24
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7fc ff1e 	bl	8009ce0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cea8:	e028      	b.n	800cefc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ceaa:	4b09      	ldr	r3, [pc, #36]	; (800ced0 <UART_SetConfig+0xc2c>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f003 0320 	and.w	r3, r3, #32
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d012      	beq.n	800cedc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ceb6:	4b06      	ldr	r3, [pc, #24]	; (800ced0 <UART_SetConfig+0xc2c>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	08db      	lsrs	r3, r3, #3
 800cebc:	f003 0303 	and.w	r3, r3, #3
 800cec0:	4a04      	ldr	r2, [pc, #16]	; (800ced4 <UART_SetConfig+0xc30>)
 800cec2:	fa22 f303 	lsr.w	r3, r2, r3
 800cec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cec8:	e018      	b.n	800cefc <UART_SetConfig+0xc58>
 800ceca:	bf00      	nop
 800cecc:	0800e188 	.word	0x0800e188
 800ced0:	58024400 	.word	0x58024400
 800ced4:	03d09000 	.word	0x03d09000
 800ced8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800cedc:	4b24      	ldr	r3, [pc, #144]	; (800cf70 <UART_SetConfig+0xccc>)
 800cede:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cee0:	e00c      	b.n	800cefc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cee2:	4b24      	ldr	r3, [pc, #144]	; (800cf74 <UART_SetConfig+0xcd0>)
 800cee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cee6:	e009      	b.n	800cefc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cee8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ceec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceee:	e005      	b.n	800cefc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800cef0:	2300      	movs	r3, #0
 800cef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cef4:	2301      	movs	r3, #1
 800cef6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cefa:	bf00      	nop
    }

    if (pclk != 0U)
 800cefc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d021      	beq.n	800cf46 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf06:	4a1c      	ldr	r2, [pc, #112]	; (800cf78 <UART_SetConfig+0xcd4>)
 800cf08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf10:	fbb3 f2f2 	udiv	r2, r3, r2
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	685b      	ldr	r3, [r3, #4]
 800cf18:	085b      	lsrs	r3, r3, #1
 800cf1a:	441a      	add	r2, r3
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf24:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf28:	2b0f      	cmp	r3, #15
 800cf2a:	d909      	bls.n	800cf40 <UART_SetConfig+0xc9c>
 800cf2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf32:	d205      	bcs.n	800cf40 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cf34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf36:	b29a      	uxth	r2, r3
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	60da      	str	r2, [r3, #12]
 800cf3e:	e002      	b.n	800cf46 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cf40:	2301      	movs	r3, #1
 800cf42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	2201      	movs	r2, #1
 800cf4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	2201      	movs	r2, #1
 800cf52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cf62:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3748      	adds	r7, #72	; 0x48
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cf70:	03d09000 	.word	0x03d09000
 800cf74:	003d0900 	.word	0x003d0900
 800cf78:	0800e188 	.word	0x0800e188

0800cf7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b083      	sub	sp, #12
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf88:	f003 0301 	and.w	r3, r3, #1
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d00a      	beq.n	800cfa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	685b      	ldr	r3, [r3, #4]
 800cf96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	430a      	orrs	r2, r1
 800cfa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfaa:	f003 0302 	and.w	r3, r3, #2
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00a      	beq.n	800cfc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	430a      	orrs	r2, r1
 800cfc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfcc:	f003 0304 	and.w	r3, r3, #4
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d00a      	beq.n	800cfea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	430a      	orrs	r2, r1
 800cfe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfee:	f003 0308 	and.w	r3, r3, #8
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d00a      	beq.n	800d00c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	430a      	orrs	r2, r1
 800d00a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d010:	f003 0310 	and.w	r3, r3, #16
 800d014:	2b00      	cmp	r3, #0
 800d016:	d00a      	beq.n	800d02e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	689b      	ldr	r3, [r3, #8]
 800d01e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	430a      	orrs	r2, r1
 800d02c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d032:	f003 0320 	and.w	r3, r3, #32
 800d036:	2b00      	cmp	r3, #0
 800d038:	d00a      	beq.n	800d050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	689b      	ldr	r3, [r3, #8]
 800d040:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	430a      	orrs	r2, r1
 800d04e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d01a      	beq.n	800d092 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	685b      	ldr	r3, [r3, #4]
 800d062:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	430a      	orrs	r2, r1
 800d070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d07a:	d10a      	bne.n	800d092 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	430a      	orrs	r2, r1
 800d090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00a      	beq.n	800d0b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	430a      	orrs	r2, r1
 800d0b2:	605a      	str	r2, [r3, #4]
  }
}
 800d0b4:	bf00      	nop
 800d0b6:	370c      	adds	r7, #12
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr

0800d0c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b086      	sub	sp, #24
 800d0c4:	af02      	add	r7, sp, #8
 800d0c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d0d0:	f7f7 fd16 	bl	8004b00 <HAL_GetTick>
 800d0d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f003 0308 	and.w	r3, r3, #8
 800d0e0:	2b08      	cmp	r3, #8
 800d0e2:	d10e      	bne.n	800d102 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d0e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d0e8:	9300      	str	r3, [sp, #0]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 f82f 	bl	800d156 <UART_WaitOnFlagUntilTimeout>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d001      	beq.n	800d102 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d0fe:	2303      	movs	r3, #3
 800d100:	e025      	b.n	800d14e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f003 0304 	and.w	r3, r3, #4
 800d10c:	2b04      	cmp	r3, #4
 800d10e:	d10e      	bne.n	800d12e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d114:	9300      	str	r3, [sp, #0]
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2200      	movs	r2, #0
 800d11a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f000 f819 	bl	800d156 <UART_WaitOnFlagUntilTimeout>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	d001      	beq.n	800d12e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d12a:	2303      	movs	r3, #3
 800d12c:	e00f      	b.n	800d14e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2220      	movs	r2, #32
 800d132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2220      	movs	r2, #32
 800d13a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2200      	movs	r2, #0
 800d148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d14c:	2300      	movs	r3, #0
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3710      	adds	r7, #16
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}

0800d156 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d156:	b580      	push	{r7, lr}
 800d158:	b09c      	sub	sp, #112	; 0x70
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	60f8      	str	r0, [r7, #12]
 800d15e:	60b9      	str	r1, [r7, #8]
 800d160:	603b      	str	r3, [r7, #0]
 800d162:	4613      	mov	r3, r2
 800d164:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d166:	e0a9      	b.n	800d2bc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d168:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d16e:	f000 80a5 	beq.w	800d2bc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d172:	f7f7 fcc5 	bl	8004b00 <HAL_GetTick>
 800d176:	4602      	mov	r2, r0
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	1ad3      	subs	r3, r2, r3
 800d17c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d17e:	429a      	cmp	r2, r3
 800d180:	d302      	bcc.n	800d188 <UART_WaitOnFlagUntilTimeout+0x32>
 800d182:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d184:	2b00      	cmp	r3, #0
 800d186:	d140      	bne.n	800d20a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d18e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d190:	e853 3f00 	ldrex	r3, [r3]
 800d194:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d198:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d19c:	667b      	str	r3, [r7, #100]	; 0x64
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d1a8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d1ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d1ae:	e841 2300 	strex	r3, r2, [r1]
 800d1b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d1b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d1e6      	bne.n	800d188 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	3308      	adds	r3, #8
 800d1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1c4:	e853 3f00 	ldrex	r3, [r3]
 800d1c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1cc:	f023 0301 	bic.w	r3, r3, #1
 800d1d0:	663b      	str	r3, [r7, #96]	; 0x60
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	3308      	adds	r3, #8
 800d1d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d1da:	64ba      	str	r2, [r7, #72]	; 0x48
 800d1dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d1e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1e2:	e841 2300 	strex	r3, r2, [r1]
 800d1e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d1e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d1e5      	bne.n	800d1ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2220      	movs	r2, #32
 800d1f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2220      	movs	r2, #32
 800d1fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2200      	movs	r2, #0
 800d202:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d206:	2303      	movs	r3, #3
 800d208:	e069      	b.n	800d2de <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f003 0304 	and.w	r3, r3, #4
 800d214:	2b00      	cmp	r3, #0
 800d216:	d051      	beq.n	800d2bc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	69db      	ldr	r3, [r3, #28]
 800d21e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d226:	d149      	bne.n	800d2bc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d230:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23a:	e853 3f00 	ldrex	r3, [r3]
 800d23e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d242:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d246:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	461a      	mov	r2, r3
 800d24e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d250:	637b      	str	r3, [r7, #52]	; 0x34
 800d252:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d254:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d258:	e841 2300 	strex	r3, r2, [r1]
 800d25c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d260:	2b00      	cmp	r3, #0
 800d262:	d1e6      	bne.n	800d232 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	3308      	adds	r3, #8
 800d26a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	e853 3f00 	ldrex	r3, [r3]
 800d272:	613b      	str	r3, [r7, #16]
   return(result);
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	f023 0301 	bic.w	r3, r3, #1
 800d27a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	3308      	adds	r3, #8
 800d282:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d284:	623a      	str	r2, [r7, #32]
 800d286:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d288:	69f9      	ldr	r1, [r7, #28]
 800d28a:	6a3a      	ldr	r2, [r7, #32]
 800d28c:	e841 2300 	strex	r3, r2, [r1]
 800d290:	61bb      	str	r3, [r7, #24]
   return(result);
 800d292:	69bb      	ldr	r3, [r7, #24]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d1e5      	bne.n	800d264 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	2220      	movs	r2, #32
 800d29c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	2220      	movs	r2, #32
 800d2a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2220      	movs	r2, #32
 800d2ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d2b8:	2303      	movs	r3, #3
 800d2ba:	e010      	b.n	800d2de <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	69da      	ldr	r2, [r3, #28]
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	4013      	ands	r3, r2
 800d2c6:	68ba      	ldr	r2, [r7, #8]
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	bf0c      	ite	eq
 800d2cc:	2301      	moveq	r3, #1
 800d2ce:	2300      	movne	r3, #0
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	79fb      	ldrb	r3, [r7, #7]
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	f43f af46 	beq.w	800d168 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d2dc:	2300      	movs	r3, #0
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3770      	adds	r7, #112	; 0x70
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
	...

0800d2e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b096      	sub	sp, #88	; 0x58
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	60f8      	str	r0, [r7, #12]
 800d2f0:	60b9      	str	r1, [r7, #8]
 800d2f2:	4613      	mov	r3, r2
 800d2f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	68ba      	ldr	r2, [r7, #8]
 800d2fa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	88fa      	ldrh	r2, [r7, #6]
 800d300:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2200      	movs	r2, #0
 800d308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2222      	movs	r2, #34	; 0x22
 800d310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d02c      	beq.n	800d376 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d320:	4a42      	ldr	r2, [pc, #264]	; (800d42c <UART_Start_Receive_DMA+0x144>)
 800d322:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d328:	4a41      	ldr	r2, [pc, #260]	; (800d430 <UART_Start_Receive_DMA+0x148>)
 800d32a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d330:	4a40      	ldr	r2, [pc, #256]	; (800d434 <UART_Start_Receive_DMA+0x14c>)
 800d332:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d338:	2200      	movs	r2, #0
 800d33a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	3324      	adds	r3, #36	; 0x24
 800d346:	4619      	mov	r1, r3
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d34c:	461a      	mov	r2, r3
 800d34e:	88fb      	ldrh	r3, [r7, #6]
 800d350:	f7f8 f84c 	bl	80053ec <HAL_DMA_Start_IT>
 800d354:	4603      	mov	r3, r0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d00d      	beq.n	800d376 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2210      	movs	r2, #16
 800d35e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2200      	movs	r2, #0
 800d366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2220      	movs	r2, #32
 800d36e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d372:	2301      	movs	r3, #1
 800d374:	e055      	b.n	800d422 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2200      	movs	r2, #0
 800d37a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	691b      	ldr	r3, [r3, #16]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d018      	beq.n	800d3b8 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d38c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d38e:	e853 3f00 	ldrex	r3, [r3]
 800d392:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d39a:	657b      	str	r3, [r7, #84]	; 0x54
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3a6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d3aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3ac:	e841 2300 	strex	r3, r2, [r1]
 800d3b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d3b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d1e6      	bne.n	800d386 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	3308      	adds	r3, #8
 800d3be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c2:	e853 3f00 	ldrex	r3, [r3]
 800d3c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ca:	f043 0301 	orr.w	r3, r3, #1
 800d3ce:	653b      	str	r3, [r7, #80]	; 0x50
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	3308      	adds	r3, #8
 800d3d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d3d8:	637a      	str	r2, [r7, #52]	; 0x34
 800d3da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d3de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3e0:	e841 2300 	strex	r3, r2, [r1]
 800d3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d1e5      	bne.n	800d3b8 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	3308      	adds	r3, #8
 800d3f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	e853 3f00 	ldrex	r3, [r3]
 800d3fa:	613b      	str	r3, [r7, #16]
   return(result);
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d402:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	3308      	adds	r3, #8
 800d40a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d40c:	623a      	str	r2, [r7, #32]
 800d40e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d410:	69f9      	ldr	r1, [r7, #28]
 800d412:	6a3a      	ldr	r2, [r7, #32]
 800d414:	e841 2300 	strex	r3, r2, [r1]
 800d418:	61bb      	str	r3, [r7, #24]
   return(result);
 800d41a:	69bb      	ldr	r3, [r7, #24]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d1e5      	bne.n	800d3ec <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d420:	2300      	movs	r3, #0
}
 800d422:	4618      	mov	r0, r3
 800d424:	3758      	adds	r7, #88	; 0x58
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	bf00      	nop
 800d42c:	0800d63b 	.word	0x0800d63b
 800d430:	0800d75d 	.word	0x0800d75d
 800d434:	0800d795 	.word	0x0800d795

0800d438 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d438:	b480      	push	{r7}
 800d43a:	b08f      	sub	sp, #60	; 0x3c
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d446:	6a3b      	ldr	r3, [r7, #32]
 800d448:	e853 3f00 	ldrex	r3, [r3]
 800d44c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d44e:	69fb      	ldr	r3, [r7, #28]
 800d450:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d454:	637b      	str	r3, [r7, #52]	; 0x34
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	461a      	mov	r2, r3
 800d45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d45e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d460:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d462:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d466:	e841 2300 	strex	r3, r2, [r1]
 800d46a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d1e6      	bne.n	800d440 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	3308      	adds	r3, #8
 800d478:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	e853 3f00 	ldrex	r3, [r3]
 800d480:	60bb      	str	r3, [r7, #8]
   return(result);
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d488:	633b      	str	r3, [r7, #48]	; 0x30
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	3308      	adds	r3, #8
 800d490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d492:	61ba      	str	r2, [r7, #24]
 800d494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d496:	6979      	ldr	r1, [r7, #20]
 800d498:	69ba      	ldr	r2, [r7, #24]
 800d49a:	e841 2300 	strex	r3, r2, [r1]
 800d49e:	613b      	str	r3, [r7, #16]
   return(result);
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d1e5      	bne.n	800d472 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2220      	movs	r2, #32
 800d4aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d4ae:	bf00      	nop
 800d4b0:	373c      	adds	r7, #60	; 0x3c
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b8:	4770      	bx	lr
	...

0800d4bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b095      	sub	sp, #84	; 0x54
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4cc:	e853 3f00 	ldrex	r3, [r3]
 800d4d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d4d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	461a      	mov	r2, r3
 800d4e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4e2:	643b      	str	r3, [r7, #64]	; 0x40
 800d4e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d4e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4ea:	e841 2300 	strex	r3, r2, [r1]
 800d4ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d1e6      	bne.n	800d4c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	3308      	adds	r3, #8
 800d4fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4fe:	6a3b      	ldr	r3, [r7, #32]
 800d500:	e853 3f00 	ldrex	r3, [r3]
 800d504:	61fb      	str	r3, [r7, #28]
   return(result);
 800d506:	69fa      	ldr	r2, [r7, #28]
 800d508:	4b1e      	ldr	r3, [pc, #120]	; (800d584 <UART_EndRxTransfer+0xc8>)
 800d50a:	4013      	ands	r3, r2
 800d50c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	3308      	adds	r3, #8
 800d514:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d516:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d518:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d51a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d51c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d51e:	e841 2300 	strex	r3, r2, [r1]
 800d522:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d526:	2b00      	cmp	r3, #0
 800d528:	d1e5      	bne.n	800d4f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d118      	bne.n	800d564 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	e853 3f00 	ldrex	r3, [r3]
 800d53e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	f023 0310 	bic.w	r3, r3, #16
 800d546:	647b      	str	r3, [r7, #68]	; 0x44
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	461a      	mov	r2, r3
 800d54e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d550:	61bb      	str	r3, [r7, #24]
 800d552:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d554:	6979      	ldr	r1, [r7, #20]
 800d556:	69ba      	ldr	r2, [r7, #24]
 800d558:	e841 2300 	strex	r3, r2, [r1]
 800d55c:	613b      	str	r3, [r7, #16]
   return(result);
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d1e6      	bne.n	800d532 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2220      	movs	r2, #32
 800d568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2200      	movs	r2, #0
 800d570:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2200      	movs	r2, #0
 800d576:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d578:	bf00      	nop
 800d57a:	3754      	adds	r7, #84	; 0x54
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr
 800d584:	effffffe 	.word	0xeffffffe

0800d588 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b090      	sub	sp, #64	; 0x40
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d594:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	69db      	ldr	r3, [r3, #28]
 800d59a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d59e:	d037      	beq.n	800d610 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d5a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	3308      	adds	r3, #8
 800d5ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b2:	e853 3f00 	ldrex	r3, [r3]
 800d5b6:	623b      	str	r3, [r7, #32]
   return(result);
 800d5b8:	6a3b      	ldr	r3, [r7, #32]
 800d5ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5be:	63bb      	str	r3, [r7, #56]	; 0x38
 800d5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	3308      	adds	r3, #8
 800d5c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5c8:	633a      	str	r2, [r7, #48]	; 0x30
 800d5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d5ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5d0:	e841 2300 	strex	r3, r2, [r1]
 800d5d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d1e5      	bne.n	800d5a8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	e853 3f00 	ldrex	r3, [r3]
 800d5e8:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5f0:	637b      	str	r3, [r7, #52]	; 0x34
 800d5f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5fa:	61fb      	str	r3, [r7, #28]
 800d5fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5fe:	69b9      	ldr	r1, [r7, #24]
 800d600:	69fa      	ldr	r2, [r7, #28]
 800d602:	e841 2300 	strex	r3, r2, [r1]
 800d606:	617b      	str	r3, [r7, #20]
   return(result);
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d1e6      	bne.n	800d5dc <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d60e:	e002      	b.n	800d616 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d610:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d612:	f7f5 fde7 	bl	80031e4 <HAL_UART_TxCpltCallback>
}
 800d616:	bf00      	nop
 800d618:	3740      	adds	r7, #64	; 0x40
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}

0800d61e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d61e:	b580      	push	{r7, lr}
 800d620:	b084      	sub	sp, #16
 800d622:	af00      	add	r7, sp, #0
 800d624:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d62a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d62c:	68f8      	ldr	r0, [r7, #12]
 800d62e:	f7fe fe0f 	bl	800c250 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d632:	bf00      	nop
 800d634:	3710      	adds	r7, #16
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}

0800d63a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b09c      	sub	sp, #112	; 0x70
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d646:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	69db      	ldr	r3, [r3, #28]
 800d64c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d650:	d071      	beq.n	800d736 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d654:	2200      	movs	r2, #0
 800d656:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d65a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d662:	e853 3f00 	ldrex	r3, [r3]
 800d666:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d66a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d66e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	461a      	mov	r2, r3
 800d676:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d678:	65bb      	str	r3, [r7, #88]	; 0x58
 800d67a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d67c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d67e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d680:	e841 2300 	strex	r3, r2, [r1]
 800d684:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d1e6      	bne.n	800d65a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d68c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	3308      	adds	r3, #8
 800d692:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d696:	e853 3f00 	ldrex	r3, [r3]
 800d69a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d69c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d69e:	f023 0301 	bic.w	r3, r3, #1
 800d6a2:	667b      	str	r3, [r7, #100]	; 0x64
 800d6a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	3308      	adds	r3, #8
 800d6aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d6ac:	647a      	str	r2, [r7, #68]	; 0x44
 800d6ae:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d6b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d6b4:	e841 2300 	strex	r3, r2, [r1]
 800d6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d6ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d1e5      	bne.n	800d68c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d6c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	3308      	adds	r3, #8
 800d6c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ca:	e853 3f00 	ldrex	r3, [r3]
 800d6ce:	623b      	str	r3, [r7, #32]
   return(result);
 800d6d0:	6a3b      	ldr	r3, [r7, #32]
 800d6d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6d6:	663b      	str	r3, [r7, #96]	; 0x60
 800d6d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	3308      	adds	r3, #8
 800d6de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d6e0:	633a      	str	r2, [r7, #48]	; 0x30
 800d6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d6e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6e8:	e841 2300 	strex	r3, r2, [r1]
 800d6ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d1e5      	bne.n	800d6c0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d6f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6f6:	2220      	movs	r2, #32
 800d6f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d700:	2b01      	cmp	r3, #1
 800d702:	d118      	bne.n	800d736 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	e853 3f00 	ldrex	r3, [r3]
 800d710:	60fb      	str	r3, [r7, #12]
   return(result);
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	f023 0310 	bic.w	r3, r3, #16
 800d718:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d71a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	461a      	mov	r2, r3
 800d720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d722:	61fb      	str	r3, [r7, #28]
 800d724:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d726:	69b9      	ldr	r1, [r7, #24]
 800d728:	69fa      	ldr	r2, [r7, #28]
 800d72a:	e841 2300 	strex	r3, r2, [r1]
 800d72e:	617b      	str	r3, [r7, #20]
   return(result);
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d1e6      	bne.n	800d704 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d73a:	2b01      	cmp	r3, #1
 800d73c:	d107      	bne.n	800d74e <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d73e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d740:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d744:	4619      	mov	r1, r3
 800d746:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d748:	f7fe fda0 	bl	800c28c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d74c:	e002      	b.n	800d754 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800d74e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d750:	f7f5 fd5a 	bl	8003208 <HAL_UART_RxCpltCallback>
}
 800d754:	bf00      	nop
 800d756:	3770      	adds	r7, #112	; 0x70
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}

0800d75c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d768:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d76e:	2b01      	cmp	r3, #1
 800d770:	d109      	bne.n	800d786 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d778:	085b      	lsrs	r3, r3, #1
 800d77a:	b29b      	uxth	r3, r3
 800d77c:	4619      	mov	r1, r3
 800d77e:	68f8      	ldr	r0, [r7, #12]
 800d780:	f7fe fd84 	bl	800c28c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d784:	e002      	b.n	800d78c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d786:	68f8      	ldr	r0, [r7, #12]
 800d788:	f7fe fd6c 	bl	800c264 <HAL_UART_RxHalfCpltCallback>
}
 800d78c:	bf00      	nop
 800d78e:	3710      	adds	r7, #16
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b086      	sub	sp, #24
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7a8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7b0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	689b      	ldr	r3, [r3, #8]
 800d7b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7bc:	2b80      	cmp	r3, #128	; 0x80
 800d7be:	d109      	bne.n	800d7d4 <UART_DMAError+0x40>
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	2b21      	cmp	r3, #33	; 0x21
 800d7c4:	d106      	bne.n	800d7d4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d7ce:	6978      	ldr	r0, [r7, #20]
 800d7d0:	f7ff fe32 	bl	800d438 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	689b      	ldr	r3, [r3, #8]
 800d7da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7de:	2b40      	cmp	r3, #64	; 0x40
 800d7e0:	d109      	bne.n	800d7f6 <UART_DMAError+0x62>
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2b22      	cmp	r3, #34	; 0x22
 800d7e6:	d106      	bne.n	800d7f6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d7f0:	6978      	ldr	r0, [r7, #20]
 800d7f2:	f7ff fe63 	bl	800d4bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7fc:	f043 0210 	orr.w	r2, r3, #16
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d806:	6978      	ldr	r0, [r7, #20]
 800d808:	f7fe fd36 	bl	800c278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d80c:	bf00      	nop
 800d80e:	3718      	adds	r7, #24
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b084      	sub	sp, #16
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d820:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	2200      	movs	r2, #0
 800d826:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	2200      	movs	r2, #0
 800d82e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d832:	68f8      	ldr	r0, [r7, #12]
 800d834:	f7fe fd20 	bl	800c278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d838:	bf00      	nop
 800d83a:	3710      	adds	r7, #16
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b088      	sub	sp, #32
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	e853 3f00 	ldrex	r3, [r3]
 800d854:	60bb      	str	r3, [r7, #8]
   return(result);
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d85c:	61fb      	str	r3, [r7, #28]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	461a      	mov	r2, r3
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	61bb      	str	r3, [r7, #24]
 800d868:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d86a:	6979      	ldr	r1, [r7, #20]
 800d86c:	69ba      	ldr	r2, [r7, #24]
 800d86e:	e841 2300 	strex	r3, r2, [r1]
 800d872:	613b      	str	r3, [r7, #16]
   return(result);
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d1e6      	bne.n	800d848 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2220      	movs	r2, #32
 800d87e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2200      	movs	r2, #0
 800d886:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f7f5 fcab 	bl	80031e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d88e:	bf00      	nop
 800d890:	3720      	adds	r7, #32
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}

0800d896 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d896:	b480      	push	{r7}
 800d898:	b083      	sub	sp, #12
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d89e:	bf00      	nop
 800d8a0:	370c      	adds	r7, #12
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr

0800d8aa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d8aa:	b480      	push	{r7}
 800d8ac:	b083      	sub	sp, #12
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d8b2:	bf00      	nop
 800d8b4:	370c      	adds	r7, #12
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr

0800d8be <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d8be:	b480      	push	{r7}
 800d8c0:	b083      	sub	sp, #12
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d8c6:	bf00      	nop
 800d8c8:	370c      	adds	r7, #12
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr

0800d8d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d8d2:	b480      	push	{r7}
 800d8d4:	b085      	sub	sp, #20
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d101      	bne.n	800d8e8 <HAL_UARTEx_DisableFifoMode+0x16>
 800d8e4:	2302      	movs	r3, #2
 800d8e6:	e027      	b.n	800d938 <HAL_UARTEx_DisableFifoMode+0x66>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2224      	movs	r2, #36	; 0x24
 800d8f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f022 0201 	bic.w	r2, r2, #1
 800d90e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d916:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2200      	movs	r2, #0
 800d91c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	68fa      	ldr	r2, [r7, #12]
 800d924:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2220      	movs	r2, #32
 800d92a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2200      	movs	r2, #0
 800d932:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d936:	2300      	movs	r3, #0
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3714      	adds	r7, #20
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr

0800d944 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d954:	2b01      	cmp	r3, #1
 800d956:	d101      	bne.n	800d95c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d958:	2302      	movs	r3, #2
 800d95a:	e02d      	b.n	800d9b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2201      	movs	r2, #1
 800d960:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2224      	movs	r2, #36	; 0x24
 800d968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	f022 0201 	bic.w	r2, r2, #1
 800d982:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	689b      	ldr	r3, [r3, #8]
 800d98a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	683a      	ldr	r2, [r7, #0]
 800d994:	430a      	orrs	r2, r1
 800d996:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f000 f84f 	bl	800da3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	68fa      	ldr	r2, [r7, #12]
 800d9a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2220      	movs	r2, #32
 800d9aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d9b6:	2300      	movs	r3, #0
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3710      	adds	r7, #16
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b084      	sub	sp, #16
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d101      	bne.n	800d9d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d9d4:	2302      	movs	r3, #2
 800d9d6:	e02d      	b.n	800da34 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2201      	movs	r2, #1
 800d9dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2224      	movs	r2, #36	; 0x24
 800d9e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	681a      	ldr	r2, [r3, #0]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f022 0201 	bic.w	r2, r2, #1
 800d9fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	689b      	ldr	r3, [r3, #8]
 800da06:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	683a      	ldr	r2, [r7, #0]
 800da10:	430a      	orrs	r2, r1
 800da12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f000 f811 	bl	800da3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	68fa      	ldr	r2, [r7, #12]
 800da20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2220      	movs	r2, #32
 800da26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2200      	movs	r2, #0
 800da2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800da32:	2300      	movs	r3, #0
}
 800da34:	4618      	mov	r0, r3
 800da36:	3710      	adds	r7, #16
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b085      	sub	sp, #20
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d108      	bne.n	800da5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2201      	movs	r2, #1
 800da50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2201      	movs	r2, #1
 800da58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800da5c:	e031      	b.n	800dac2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800da5e:	2310      	movs	r3, #16
 800da60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800da62:	2310      	movs	r3, #16
 800da64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	689b      	ldr	r3, [r3, #8]
 800da6c:	0e5b      	lsrs	r3, r3, #25
 800da6e:	b2db      	uxtb	r3, r3
 800da70:	f003 0307 	and.w	r3, r3, #7
 800da74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	689b      	ldr	r3, [r3, #8]
 800da7c:	0f5b      	lsrs	r3, r3, #29
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	f003 0307 	and.w	r3, r3, #7
 800da84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da86:	7bbb      	ldrb	r3, [r7, #14]
 800da88:	7b3a      	ldrb	r2, [r7, #12]
 800da8a:	4911      	ldr	r1, [pc, #68]	; (800dad0 <UARTEx_SetNbDataToProcess+0x94>)
 800da8c:	5c8a      	ldrb	r2, [r1, r2]
 800da8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800da92:	7b3a      	ldrb	r2, [r7, #12]
 800da94:	490f      	ldr	r1, [pc, #60]	; (800dad4 <UARTEx_SetNbDataToProcess+0x98>)
 800da96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da98:	fb93 f3f2 	sdiv	r3, r3, r2
 800da9c:	b29a      	uxth	r2, r3
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800daa4:	7bfb      	ldrb	r3, [r7, #15]
 800daa6:	7b7a      	ldrb	r2, [r7, #13]
 800daa8:	4909      	ldr	r1, [pc, #36]	; (800dad0 <UARTEx_SetNbDataToProcess+0x94>)
 800daaa:	5c8a      	ldrb	r2, [r1, r2]
 800daac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dab0:	7b7a      	ldrb	r2, [r7, #13]
 800dab2:	4908      	ldr	r1, [pc, #32]	; (800dad4 <UARTEx_SetNbDataToProcess+0x98>)
 800dab4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dab6:	fb93 f3f2 	sdiv	r3, r3, r2
 800daba:	b29a      	uxth	r2, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dac2:	bf00      	nop
 800dac4:	3714      	adds	r7, #20
 800dac6:	46bd      	mov	sp, r7
 800dac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dacc:	4770      	bx	lr
 800dace:	bf00      	nop
 800dad0:	0800e1a0 	.word	0x0800e1a0
 800dad4:	0800e1a8 	.word	0x0800e1a8

0800dad8 <__cxa_pure_virtual>:
 800dad8:	b508      	push	{r3, lr}
 800dada:	f000 f80d 	bl	800daf8 <_ZSt9terminatev>

0800dade <_ZN10__cxxabiv111__terminateEPFvvE>:
 800dade:	b508      	push	{r3, lr}
 800dae0:	4780      	blx	r0
 800dae2:	f000 f80e 	bl	800db02 <abort>
	...

0800dae8 <_ZSt13get_terminatev>:
 800dae8:	4b02      	ldr	r3, [pc, #8]	; (800daf4 <_ZSt13get_terminatev+0xc>)
 800daea:	6818      	ldr	r0, [r3, #0]
 800daec:	f3bf 8f5b 	dmb	ish
 800daf0:	4770      	bx	lr
 800daf2:	bf00      	nop
 800daf4:	24000010 	.word	0x24000010

0800daf8 <_ZSt9terminatev>:
 800daf8:	b508      	push	{r3, lr}
 800dafa:	f7ff fff5 	bl	800dae8 <_ZSt13get_terminatev>
 800dafe:	f7ff ffee 	bl	800dade <_ZN10__cxxabiv111__terminateEPFvvE>

0800db02 <abort>:
 800db02:	b508      	push	{r3, lr}
 800db04:	2006      	movs	r0, #6
 800db06:	f000 f873 	bl	800dbf0 <raise>
 800db0a:	2001      	movs	r0, #1
 800db0c:	f7f6 fd4c 	bl	80045a8 <_exit>

0800db10 <__errno>:
 800db10:	4b01      	ldr	r3, [pc, #4]	; (800db18 <__errno+0x8>)
 800db12:	6818      	ldr	r0, [r3, #0]
 800db14:	4770      	bx	lr
 800db16:	bf00      	nop
 800db18:	24000014 	.word	0x24000014

0800db1c <__libc_init_array>:
 800db1c:	b570      	push	{r4, r5, r6, lr}
 800db1e:	4d0d      	ldr	r5, [pc, #52]	; (800db54 <__libc_init_array+0x38>)
 800db20:	4c0d      	ldr	r4, [pc, #52]	; (800db58 <__libc_init_array+0x3c>)
 800db22:	1b64      	subs	r4, r4, r5
 800db24:	10a4      	asrs	r4, r4, #2
 800db26:	2600      	movs	r6, #0
 800db28:	42a6      	cmp	r6, r4
 800db2a:	d109      	bne.n	800db40 <__libc_init_array+0x24>
 800db2c:	4d0b      	ldr	r5, [pc, #44]	; (800db5c <__libc_init_array+0x40>)
 800db2e:	4c0c      	ldr	r4, [pc, #48]	; (800db60 <__libc_init_array+0x44>)
 800db30:	f000 f9b0 	bl	800de94 <_init>
 800db34:	1b64      	subs	r4, r4, r5
 800db36:	10a4      	asrs	r4, r4, #2
 800db38:	2600      	movs	r6, #0
 800db3a:	42a6      	cmp	r6, r4
 800db3c:	d105      	bne.n	800db4a <__libc_init_array+0x2e>
 800db3e:	bd70      	pop	{r4, r5, r6, pc}
 800db40:	f855 3b04 	ldr.w	r3, [r5], #4
 800db44:	4798      	blx	r3
 800db46:	3601      	adds	r6, #1
 800db48:	e7ee      	b.n	800db28 <__libc_init_array+0xc>
 800db4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800db4e:	4798      	blx	r3
 800db50:	3601      	adds	r6, #1
 800db52:	e7f2      	b.n	800db3a <__libc_init_array+0x1e>
 800db54:	0800e1b8 	.word	0x0800e1b8
 800db58:	0800e1b8 	.word	0x0800e1b8
 800db5c:	0800e1b8 	.word	0x0800e1b8
 800db60:	0800e1cc 	.word	0x0800e1cc

0800db64 <memcpy>:
 800db64:	440a      	add	r2, r1
 800db66:	4291      	cmp	r1, r2
 800db68:	f100 33ff 	add.w	r3, r0, #4294967295
 800db6c:	d100      	bne.n	800db70 <memcpy+0xc>
 800db6e:	4770      	bx	lr
 800db70:	b510      	push	{r4, lr}
 800db72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db76:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db7a:	4291      	cmp	r1, r2
 800db7c:	d1f9      	bne.n	800db72 <memcpy+0xe>
 800db7e:	bd10      	pop	{r4, pc}

0800db80 <memset>:
 800db80:	4402      	add	r2, r0
 800db82:	4603      	mov	r3, r0
 800db84:	4293      	cmp	r3, r2
 800db86:	d100      	bne.n	800db8a <memset+0xa>
 800db88:	4770      	bx	lr
 800db8a:	f803 1b01 	strb.w	r1, [r3], #1
 800db8e:	e7f9      	b.n	800db84 <memset+0x4>

0800db90 <realloc>:
 800db90:	4b02      	ldr	r3, [pc, #8]	; (800db9c <realloc+0xc>)
 800db92:	460a      	mov	r2, r1
 800db94:	4601      	mov	r1, r0
 800db96:	6818      	ldr	r0, [r3, #0]
 800db98:	f000 b8da 	b.w	800dd50 <_realloc_r>
 800db9c:	24000014 	.word	0x24000014

0800dba0 <_raise_r>:
 800dba0:	291f      	cmp	r1, #31
 800dba2:	b538      	push	{r3, r4, r5, lr}
 800dba4:	4604      	mov	r4, r0
 800dba6:	460d      	mov	r5, r1
 800dba8:	d904      	bls.n	800dbb4 <_raise_r+0x14>
 800dbaa:	2316      	movs	r3, #22
 800dbac:	6003      	str	r3, [r0, #0]
 800dbae:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb2:	bd38      	pop	{r3, r4, r5, pc}
 800dbb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dbb6:	b112      	cbz	r2, 800dbbe <_raise_r+0x1e>
 800dbb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbbc:	b94b      	cbnz	r3, 800dbd2 <_raise_r+0x32>
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	f000 f830 	bl	800dc24 <_getpid_r>
 800dbc4:	462a      	mov	r2, r5
 800dbc6:	4601      	mov	r1, r0
 800dbc8:	4620      	mov	r0, r4
 800dbca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbce:	f000 b817 	b.w	800dc00 <_kill_r>
 800dbd2:	2b01      	cmp	r3, #1
 800dbd4:	d00a      	beq.n	800dbec <_raise_r+0x4c>
 800dbd6:	1c59      	adds	r1, r3, #1
 800dbd8:	d103      	bne.n	800dbe2 <_raise_r+0x42>
 800dbda:	2316      	movs	r3, #22
 800dbdc:	6003      	str	r3, [r0, #0]
 800dbde:	2001      	movs	r0, #1
 800dbe0:	e7e7      	b.n	800dbb2 <_raise_r+0x12>
 800dbe2:	2400      	movs	r4, #0
 800dbe4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dbe8:	4628      	mov	r0, r5
 800dbea:	4798      	blx	r3
 800dbec:	2000      	movs	r0, #0
 800dbee:	e7e0      	b.n	800dbb2 <_raise_r+0x12>

0800dbf0 <raise>:
 800dbf0:	4b02      	ldr	r3, [pc, #8]	; (800dbfc <raise+0xc>)
 800dbf2:	4601      	mov	r1, r0
 800dbf4:	6818      	ldr	r0, [r3, #0]
 800dbf6:	f7ff bfd3 	b.w	800dba0 <_raise_r>
 800dbfa:	bf00      	nop
 800dbfc:	24000014 	.word	0x24000014

0800dc00 <_kill_r>:
 800dc00:	b538      	push	{r3, r4, r5, lr}
 800dc02:	4d07      	ldr	r5, [pc, #28]	; (800dc20 <_kill_r+0x20>)
 800dc04:	2300      	movs	r3, #0
 800dc06:	4604      	mov	r4, r0
 800dc08:	4608      	mov	r0, r1
 800dc0a:	4611      	mov	r1, r2
 800dc0c:	602b      	str	r3, [r5, #0]
 800dc0e:	f7f6 fcbb 	bl	8004588 <_kill>
 800dc12:	1c43      	adds	r3, r0, #1
 800dc14:	d102      	bne.n	800dc1c <_kill_r+0x1c>
 800dc16:	682b      	ldr	r3, [r5, #0]
 800dc18:	b103      	cbz	r3, 800dc1c <_kill_r+0x1c>
 800dc1a:	6023      	str	r3, [r4, #0]
 800dc1c:	bd38      	pop	{r3, r4, r5, pc}
 800dc1e:	bf00      	nop
 800dc20:	240010f8 	.word	0x240010f8

0800dc24 <_getpid_r>:
 800dc24:	f7f6 bca8 	b.w	8004578 <_getpid>

0800dc28 <sbrk_aligned>:
 800dc28:	b570      	push	{r4, r5, r6, lr}
 800dc2a:	4e0e      	ldr	r6, [pc, #56]	; (800dc64 <sbrk_aligned+0x3c>)
 800dc2c:	460c      	mov	r4, r1
 800dc2e:	6831      	ldr	r1, [r6, #0]
 800dc30:	4605      	mov	r5, r0
 800dc32:	b911      	cbnz	r1, 800dc3a <sbrk_aligned+0x12>
 800dc34:	f000 f8bc 	bl	800ddb0 <_sbrk_r>
 800dc38:	6030      	str	r0, [r6, #0]
 800dc3a:	4621      	mov	r1, r4
 800dc3c:	4628      	mov	r0, r5
 800dc3e:	f000 f8b7 	bl	800ddb0 <_sbrk_r>
 800dc42:	1c43      	adds	r3, r0, #1
 800dc44:	d00a      	beq.n	800dc5c <sbrk_aligned+0x34>
 800dc46:	1cc4      	adds	r4, r0, #3
 800dc48:	f024 0403 	bic.w	r4, r4, #3
 800dc4c:	42a0      	cmp	r0, r4
 800dc4e:	d007      	beq.n	800dc60 <sbrk_aligned+0x38>
 800dc50:	1a21      	subs	r1, r4, r0
 800dc52:	4628      	mov	r0, r5
 800dc54:	f000 f8ac 	bl	800ddb0 <_sbrk_r>
 800dc58:	3001      	adds	r0, #1
 800dc5a:	d101      	bne.n	800dc60 <sbrk_aligned+0x38>
 800dc5c:	f04f 34ff 	mov.w	r4, #4294967295
 800dc60:	4620      	mov	r0, r4
 800dc62:	bd70      	pop	{r4, r5, r6, pc}
 800dc64:	240010f4 	.word	0x240010f4

0800dc68 <_malloc_r>:
 800dc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc6c:	1ccd      	adds	r5, r1, #3
 800dc6e:	f025 0503 	bic.w	r5, r5, #3
 800dc72:	3508      	adds	r5, #8
 800dc74:	2d0c      	cmp	r5, #12
 800dc76:	bf38      	it	cc
 800dc78:	250c      	movcc	r5, #12
 800dc7a:	2d00      	cmp	r5, #0
 800dc7c:	4607      	mov	r7, r0
 800dc7e:	db01      	blt.n	800dc84 <_malloc_r+0x1c>
 800dc80:	42a9      	cmp	r1, r5
 800dc82:	d905      	bls.n	800dc90 <_malloc_r+0x28>
 800dc84:	230c      	movs	r3, #12
 800dc86:	603b      	str	r3, [r7, #0]
 800dc88:	2600      	movs	r6, #0
 800dc8a:	4630      	mov	r0, r6
 800dc8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc90:	4e2e      	ldr	r6, [pc, #184]	; (800dd4c <_malloc_r+0xe4>)
 800dc92:	f000 f89d 	bl	800ddd0 <__malloc_lock>
 800dc96:	6833      	ldr	r3, [r6, #0]
 800dc98:	461c      	mov	r4, r3
 800dc9a:	bb34      	cbnz	r4, 800dcea <_malloc_r+0x82>
 800dc9c:	4629      	mov	r1, r5
 800dc9e:	4638      	mov	r0, r7
 800dca0:	f7ff ffc2 	bl	800dc28 <sbrk_aligned>
 800dca4:	1c43      	adds	r3, r0, #1
 800dca6:	4604      	mov	r4, r0
 800dca8:	d14d      	bne.n	800dd46 <_malloc_r+0xde>
 800dcaa:	6834      	ldr	r4, [r6, #0]
 800dcac:	4626      	mov	r6, r4
 800dcae:	2e00      	cmp	r6, #0
 800dcb0:	d140      	bne.n	800dd34 <_malloc_r+0xcc>
 800dcb2:	6823      	ldr	r3, [r4, #0]
 800dcb4:	4631      	mov	r1, r6
 800dcb6:	4638      	mov	r0, r7
 800dcb8:	eb04 0803 	add.w	r8, r4, r3
 800dcbc:	f000 f878 	bl	800ddb0 <_sbrk_r>
 800dcc0:	4580      	cmp	r8, r0
 800dcc2:	d13a      	bne.n	800dd3a <_malloc_r+0xd2>
 800dcc4:	6821      	ldr	r1, [r4, #0]
 800dcc6:	3503      	adds	r5, #3
 800dcc8:	1a6d      	subs	r5, r5, r1
 800dcca:	f025 0503 	bic.w	r5, r5, #3
 800dcce:	3508      	adds	r5, #8
 800dcd0:	2d0c      	cmp	r5, #12
 800dcd2:	bf38      	it	cc
 800dcd4:	250c      	movcc	r5, #12
 800dcd6:	4629      	mov	r1, r5
 800dcd8:	4638      	mov	r0, r7
 800dcda:	f7ff ffa5 	bl	800dc28 <sbrk_aligned>
 800dcde:	3001      	adds	r0, #1
 800dce0:	d02b      	beq.n	800dd3a <_malloc_r+0xd2>
 800dce2:	6823      	ldr	r3, [r4, #0]
 800dce4:	442b      	add	r3, r5
 800dce6:	6023      	str	r3, [r4, #0]
 800dce8:	e00e      	b.n	800dd08 <_malloc_r+0xa0>
 800dcea:	6822      	ldr	r2, [r4, #0]
 800dcec:	1b52      	subs	r2, r2, r5
 800dcee:	d41e      	bmi.n	800dd2e <_malloc_r+0xc6>
 800dcf0:	2a0b      	cmp	r2, #11
 800dcf2:	d916      	bls.n	800dd22 <_malloc_r+0xba>
 800dcf4:	1961      	adds	r1, r4, r5
 800dcf6:	42a3      	cmp	r3, r4
 800dcf8:	6025      	str	r5, [r4, #0]
 800dcfa:	bf18      	it	ne
 800dcfc:	6059      	strne	r1, [r3, #4]
 800dcfe:	6863      	ldr	r3, [r4, #4]
 800dd00:	bf08      	it	eq
 800dd02:	6031      	streq	r1, [r6, #0]
 800dd04:	5162      	str	r2, [r4, r5]
 800dd06:	604b      	str	r3, [r1, #4]
 800dd08:	4638      	mov	r0, r7
 800dd0a:	f104 060b 	add.w	r6, r4, #11
 800dd0e:	f000 f865 	bl	800dddc <__malloc_unlock>
 800dd12:	f026 0607 	bic.w	r6, r6, #7
 800dd16:	1d23      	adds	r3, r4, #4
 800dd18:	1af2      	subs	r2, r6, r3
 800dd1a:	d0b6      	beq.n	800dc8a <_malloc_r+0x22>
 800dd1c:	1b9b      	subs	r3, r3, r6
 800dd1e:	50a3      	str	r3, [r4, r2]
 800dd20:	e7b3      	b.n	800dc8a <_malloc_r+0x22>
 800dd22:	6862      	ldr	r2, [r4, #4]
 800dd24:	42a3      	cmp	r3, r4
 800dd26:	bf0c      	ite	eq
 800dd28:	6032      	streq	r2, [r6, #0]
 800dd2a:	605a      	strne	r2, [r3, #4]
 800dd2c:	e7ec      	b.n	800dd08 <_malloc_r+0xa0>
 800dd2e:	4623      	mov	r3, r4
 800dd30:	6864      	ldr	r4, [r4, #4]
 800dd32:	e7b2      	b.n	800dc9a <_malloc_r+0x32>
 800dd34:	4634      	mov	r4, r6
 800dd36:	6876      	ldr	r6, [r6, #4]
 800dd38:	e7b9      	b.n	800dcae <_malloc_r+0x46>
 800dd3a:	230c      	movs	r3, #12
 800dd3c:	603b      	str	r3, [r7, #0]
 800dd3e:	4638      	mov	r0, r7
 800dd40:	f000 f84c 	bl	800dddc <__malloc_unlock>
 800dd44:	e7a1      	b.n	800dc8a <_malloc_r+0x22>
 800dd46:	6025      	str	r5, [r4, #0]
 800dd48:	e7de      	b.n	800dd08 <_malloc_r+0xa0>
 800dd4a:	bf00      	nop
 800dd4c:	240010f0 	.word	0x240010f0

0800dd50 <_realloc_r>:
 800dd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd54:	4680      	mov	r8, r0
 800dd56:	4614      	mov	r4, r2
 800dd58:	460e      	mov	r6, r1
 800dd5a:	b921      	cbnz	r1, 800dd66 <_realloc_r+0x16>
 800dd5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd60:	4611      	mov	r1, r2
 800dd62:	f7ff bf81 	b.w	800dc68 <_malloc_r>
 800dd66:	b92a      	cbnz	r2, 800dd74 <_realloc_r+0x24>
 800dd68:	f000 f83e 	bl	800dde8 <_free_r>
 800dd6c:	4625      	mov	r5, r4
 800dd6e:	4628      	mov	r0, r5
 800dd70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd74:	f000 f884 	bl	800de80 <_malloc_usable_size_r>
 800dd78:	4284      	cmp	r4, r0
 800dd7a:	4607      	mov	r7, r0
 800dd7c:	d802      	bhi.n	800dd84 <_realloc_r+0x34>
 800dd7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dd82:	d812      	bhi.n	800ddaa <_realloc_r+0x5a>
 800dd84:	4621      	mov	r1, r4
 800dd86:	4640      	mov	r0, r8
 800dd88:	f7ff ff6e 	bl	800dc68 <_malloc_r>
 800dd8c:	4605      	mov	r5, r0
 800dd8e:	2800      	cmp	r0, #0
 800dd90:	d0ed      	beq.n	800dd6e <_realloc_r+0x1e>
 800dd92:	42bc      	cmp	r4, r7
 800dd94:	4622      	mov	r2, r4
 800dd96:	4631      	mov	r1, r6
 800dd98:	bf28      	it	cs
 800dd9a:	463a      	movcs	r2, r7
 800dd9c:	f7ff fee2 	bl	800db64 <memcpy>
 800dda0:	4631      	mov	r1, r6
 800dda2:	4640      	mov	r0, r8
 800dda4:	f000 f820 	bl	800dde8 <_free_r>
 800dda8:	e7e1      	b.n	800dd6e <_realloc_r+0x1e>
 800ddaa:	4635      	mov	r5, r6
 800ddac:	e7df      	b.n	800dd6e <_realloc_r+0x1e>
	...

0800ddb0 <_sbrk_r>:
 800ddb0:	b538      	push	{r3, r4, r5, lr}
 800ddb2:	4d06      	ldr	r5, [pc, #24]	; (800ddcc <_sbrk_r+0x1c>)
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	4604      	mov	r4, r0
 800ddb8:	4608      	mov	r0, r1
 800ddba:	602b      	str	r3, [r5, #0]
 800ddbc:	f7f6 fbfe 	bl	80045bc <_sbrk>
 800ddc0:	1c43      	adds	r3, r0, #1
 800ddc2:	d102      	bne.n	800ddca <_sbrk_r+0x1a>
 800ddc4:	682b      	ldr	r3, [r5, #0]
 800ddc6:	b103      	cbz	r3, 800ddca <_sbrk_r+0x1a>
 800ddc8:	6023      	str	r3, [r4, #0]
 800ddca:	bd38      	pop	{r3, r4, r5, pc}
 800ddcc:	240010f8 	.word	0x240010f8

0800ddd0 <__malloc_lock>:
 800ddd0:	4801      	ldr	r0, [pc, #4]	; (800ddd8 <__malloc_lock+0x8>)
 800ddd2:	f000 b85d 	b.w	800de90 <__retarget_lock_acquire_recursive>
 800ddd6:	bf00      	nop
 800ddd8:	240010fc 	.word	0x240010fc

0800dddc <__malloc_unlock>:
 800dddc:	4801      	ldr	r0, [pc, #4]	; (800dde4 <__malloc_unlock+0x8>)
 800ddde:	f000 b858 	b.w	800de92 <__retarget_lock_release_recursive>
 800dde2:	bf00      	nop
 800dde4:	240010fc 	.word	0x240010fc

0800dde8 <_free_r>:
 800dde8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddea:	2900      	cmp	r1, #0
 800ddec:	d044      	beq.n	800de78 <_free_r+0x90>
 800ddee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddf2:	9001      	str	r0, [sp, #4]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	f1a1 0404 	sub.w	r4, r1, #4
 800ddfa:	bfb8      	it	lt
 800ddfc:	18e4      	addlt	r4, r4, r3
 800ddfe:	f7ff ffe7 	bl	800ddd0 <__malloc_lock>
 800de02:	4a1e      	ldr	r2, [pc, #120]	; (800de7c <_free_r+0x94>)
 800de04:	9801      	ldr	r0, [sp, #4]
 800de06:	6813      	ldr	r3, [r2, #0]
 800de08:	b933      	cbnz	r3, 800de18 <_free_r+0x30>
 800de0a:	6063      	str	r3, [r4, #4]
 800de0c:	6014      	str	r4, [r2, #0]
 800de0e:	b003      	add	sp, #12
 800de10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de14:	f7ff bfe2 	b.w	800dddc <__malloc_unlock>
 800de18:	42a3      	cmp	r3, r4
 800de1a:	d908      	bls.n	800de2e <_free_r+0x46>
 800de1c:	6825      	ldr	r5, [r4, #0]
 800de1e:	1961      	adds	r1, r4, r5
 800de20:	428b      	cmp	r3, r1
 800de22:	bf01      	itttt	eq
 800de24:	6819      	ldreq	r1, [r3, #0]
 800de26:	685b      	ldreq	r3, [r3, #4]
 800de28:	1949      	addeq	r1, r1, r5
 800de2a:	6021      	streq	r1, [r4, #0]
 800de2c:	e7ed      	b.n	800de0a <_free_r+0x22>
 800de2e:	461a      	mov	r2, r3
 800de30:	685b      	ldr	r3, [r3, #4]
 800de32:	b10b      	cbz	r3, 800de38 <_free_r+0x50>
 800de34:	42a3      	cmp	r3, r4
 800de36:	d9fa      	bls.n	800de2e <_free_r+0x46>
 800de38:	6811      	ldr	r1, [r2, #0]
 800de3a:	1855      	adds	r5, r2, r1
 800de3c:	42a5      	cmp	r5, r4
 800de3e:	d10b      	bne.n	800de58 <_free_r+0x70>
 800de40:	6824      	ldr	r4, [r4, #0]
 800de42:	4421      	add	r1, r4
 800de44:	1854      	adds	r4, r2, r1
 800de46:	42a3      	cmp	r3, r4
 800de48:	6011      	str	r1, [r2, #0]
 800de4a:	d1e0      	bne.n	800de0e <_free_r+0x26>
 800de4c:	681c      	ldr	r4, [r3, #0]
 800de4e:	685b      	ldr	r3, [r3, #4]
 800de50:	6053      	str	r3, [r2, #4]
 800de52:	4421      	add	r1, r4
 800de54:	6011      	str	r1, [r2, #0]
 800de56:	e7da      	b.n	800de0e <_free_r+0x26>
 800de58:	d902      	bls.n	800de60 <_free_r+0x78>
 800de5a:	230c      	movs	r3, #12
 800de5c:	6003      	str	r3, [r0, #0]
 800de5e:	e7d6      	b.n	800de0e <_free_r+0x26>
 800de60:	6825      	ldr	r5, [r4, #0]
 800de62:	1961      	adds	r1, r4, r5
 800de64:	428b      	cmp	r3, r1
 800de66:	bf04      	itt	eq
 800de68:	6819      	ldreq	r1, [r3, #0]
 800de6a:	685b      	ldreq	r3, [r3, #4]
 800de6c:	6063      	str	r3, [r4, #4]
 800de6e:	bf04      	itt	eq
 800de70:	1949      	addeq	r1, r1, r5
 800de72:	6021      	streq	r1, [r4, #0]
 800de74:	6054      	str	r4, [r2, #4]
 800de76:	e7ca      	b.n	800de0e <_free_r+0x26>
 800de78:	b003      	add	sp, #12
 800de7a:	bd30      	pop	{r4, r5, pc}
 800de7c:	240010f0 	.word	0x240010f0

0800de80 <_malloc_usable_size_r>:
 800de80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de84:	1f18      	subs	r0, r3, #4
 800de86:	2b00      	cmp	r3, #0
 800de88:	bfbc      	itt	lt
 800de8a:	580b      	ldrlt	r3, [r1, r0]
 800de8c:	18c0      	addlt	r0, r0, r3
 800de8e:	4770      	bx	lr

0800de90 <__retarget_lock_acquire_recursive>:
 800de90:	4770      	bx	lr

0800de92 <__retarget_lock_release_recursive>:
 800de92:	4770      	bx	lr

0800de94 <_init>:
 800de94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de96:	bf00      	nop
 800de98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de9a:	bc08      	pop	{r3}
 800de9c:	469e      	mov	lr, r3
 800de9e:	4770      	bx	lr

0800dea0 <_fini>:
 800dea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dea2:	bf00      	nop
 800dea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dea6:	bc08      	pop	{r3}
 800dea8:	469e      	mov	lr, r3
 800deaa:	4770      	bx	lr
