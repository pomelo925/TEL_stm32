
TEL_STM_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc14  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  0800dee4  0800dee4  0001dee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e1e8  0800e1e8  0001e1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000014  0800e1f0  0800e1f0  0001e1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e204  0800e204  0001e204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800e208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001088  24000078  0800e280  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001100  0800e280  00021100  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026bea  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000448b  00000000  00000000  00046c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001588  00000000  00000000  0004b120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001428  00000000  00000000  0004c6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035b02  00000000  00000000  0004dad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cf8c  00000000  00000000  000835d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153d86  00000000  00000000  000a055e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f42e4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005e4c  00000000  00000000  001f4334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800decc 	.word	0x0800decc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800decc 	.word	0x0800decc

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00

0800067c <_Z13DC_motor_initv>:
DC_motor fr(25000,10,0.1,0.0005,512,13.2,200);
DC_motor fl(25000,10,0.1,0.0005,512,13.2,200);
DC_motor br(25000,10,0.1,0.0005,512,13.2,200);
DC_motor bl(25000,10,0.1,0.0005,512,13.2,200);

void DC_motor_init(){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8000680:	2100      	movs	r1, #0
 8000682:	481a      	ldr	r0, [pc, #104]	; (80006ec <_Z13DC_motor_initv+0x70>)
 8000684:	f00a f944 	bl	800a910 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8000688:	2104      	movs	r1, #4
 800068a:	4818      	ldr	r0, [pc, #96]	; (80006ec <_Z13DC_motor_initv+0x70>)
 800068c:	f00a f940 	bl	800a910 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 8000690:	2100      	movs	r1, #0
 8000692:	4817      	ldr	r0, [pc, #92]	; (80006f0 <_Z13DC_motor_initv+0x74>)
 8000694:	f00a f93c 	bl	800a910 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 8000698:	2104      	movs	r1, #4
 800069a:	4815      	ldr	r0, [pc, #84]	; (80006f0 <_Z13DC_motor_initv+0x74>)
 800069c:	f00a f938 	bl	800a910 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80006a0:	2100      	movs	r1, #0
 80006a2:	4814      	ldr	r0, [pc, #80]	; (80006f4 <_Z13DC_motor_initv+0x78>)
 80006a4:	f00a f934 	bl	800a910 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80006a8:	2104      	movs	r1, #4
 80006aa:	4812      	ldr	r0, [pc, #72]	; (80006f4 <_Z13DC_motor_initv+0x78>)
 80006ac:	f00a f930 	bl	800a910 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	4811      	ldr	r0, [pc, #68]	; (80006f8 <_Z13DC_motor_initv+0x7c>)
 80006b4:	f00a f92c 	bl	800a910 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80006b8:	2104      	movs	r1, #4
 80006ba:	480f      	ldr	r0, [pc, #60]	; (80006f8 <_Z13DC_motor_initv+0x7c>)
 80006bc:	f00a f928 	bl	800a910 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim13);
 80006c0:	480e      	ldr	r0, [pc, #56]	; (80006fc <_Z13DC_motor_initv+0x80>)
 80006c2:	f009 fe39 	bl	800a338 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_2);
 80006c6:	2104      	movs	r1, #4
 80006c8:	480d      	ldr	r0, [pc, #52]	; (8000700 <_Z13DC_motor_initv+0x84>)
 80006ca:	f009 ff13 	bl	800a4f4 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 80006ce:	2100      	movs	r1, #0
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <_Z13DC_motor_initv+0x84>)
 80006d2:	f009 ff0f 	bl	800a4f4 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_2);
 80006d6:	2104      	movs	r1, #4
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <_Z13DC_motor_initv+0x88>)
 80006da:	f009 ff0b 	bl	800a4f4 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 80006de:	2100      	movs	r1, #0
 80006e0:	4808      	ldr	r0, [pc, #32]	; (8000704 <_Z13DC_motor_initv+0x88>)
 80006e2:	f009 ff07 	bl	800a4f4 <HAL_TIM_PWM_Start_IT>
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	240002dc 	.word	0x240002dc
 80006f0:	240003c0 	.word	0x240003c0
 80006f4:	24000328 	.word	0x24000328
 80006f8:	24000374 	.word	0x24000374
 80006fc:	24000458 	.word	0x24000458
 8000700:	2400040c 	.word	0x2400040c
 8000704:	240004a4 	.word	0x240004a4

08000708 <_ZN8DC_motorC1Eddddddd>:


DC_motor::DC_motor(double p, double i, double d, double time, double res, double ratio, double limit){
 8000708:	b480      	push	{r7}
 800070a:	b091      	sub	sp, #68	; 0x44
 800070c:	af00      	add	r7, sp, #0
 800070e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000710:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 8000714:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 8000718:	ed87 2b08 	vstr	d2, [r7, #32]
 800071c:	ed87 3b06 	vstr	d3, [r7, #24]
 8000720:	ed87 4b04 	vstr	d4, [r7, #16]
 8000724:	ed87 5b02 	vstr	d5, [r7, #8]
 8000728:	ed87 6b00 	vstr	d6, [r7]
 800072c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800072e:	2200      	movs	r2, #0
 8000730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	this->p = p;
 8000734:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000736:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800073a:	e9c1 2300 	strd	r2, r3, [r1]
	this->i = i;
 800073e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000740:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000744:	e9c1 2304 	strd	r2, r3, [r1, #16]
	this->d = d;
 8000748:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800074a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800074e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	this->time = time;
 8000752:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000758:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	this->res_encoder = res;
 800075c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800075e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000762:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	this->sr_ratio = ratio;
 8000766:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000768:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800076c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	this->I_limit=limit;
 8000770:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000772:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000776:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
}
 800077a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800077c:	4618      	mov	r0, r3
 800077e:	3744      	adds	r7, #68	; 0x44
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <_ZN8DC_motor10PIDControlEv>:

void DC_motor::PIDControl(void){
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

	pid_check++;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000796:	1c5a      	adds	r2, r3, #1
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	temp = error;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	rps_now = (double) CountNow / 4 / res_encoder / sr_ratio / time;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80007b0:	ee07 3a90 	vmov	s15, r3
 80007b4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007b8:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80007bc:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80007c6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80007d0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80007da:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	error = rps_goal - rps_now;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80007f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	P = p * error;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	ed93 6b00 	vldr	d6, [r3]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8000806:	ee26 7b07 	vmul.f64	d7, d6, d7
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	ed83 7b02 	vstr	d7, [r3, #8]
	sum = i * error * time;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	ed93 6b04 	vldr	d6, [r3, #16]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800081c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8000826:	ee26 7b07 	vmul.f64	d7, d6, d7
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	I = I + sum;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	ed93 6b06 	vldr	d6, [r3, #24]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800083c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	ed83 7b06 	vstr	d7, [r3, #24]
	if (rps_now == 0) {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800084c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000854:	d106      	bne.n	8000864 <_ZN8DC_motor10PIDControlEv+0xdc>
		I = 0;
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	f04f 0200 	mov.w	r2, #0
 800085c:	f04f 0300 	mov.w	r3, #0
 8000860:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}
	if (I >= I_limit) {
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	ed93 6b06 	vldr	d6, [r3, #24]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 8000870:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000878:	db05      	blt.n	8000886 <_ZN8DC_motor10PIDControlEv+0xfe>
		I = I_limit;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8000880:	6879      	ldr	r1, [r7, #4]
 8000882:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}
	if (I < -I_limit) {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	ed93 6b06 	vldr	d6, [r3, #24]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 8000892:	eeb1 7b47 	vneg.f64	d7, d7
 8000896:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089e:	d507      	bpl.n	80008b0 <_ZN8DC_motor10PIDControlEv+0x128>
		I = -I_limit;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 80008a6:	eeb1 7b47 	vneg.f64	d7, d7
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	ed83 7b06 	vstr	d7, [r3, #24]
	}
	D = d * (error - temp) / time;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	ed93 6b08 	vldr	d6, [r3, #32]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 80008c2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80008c6:	ee26 5b07 	vmul.f64	d5, d6, d7
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80008d0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	PID = P + I + D;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	ed93 6b02 	vldr	d6, [r3, #8]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	ed93 7b06 	vldr	d7, [r3, #24]
 80008e6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80008f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <_Z41__static_initialization_and_destruction_0ii>:
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d148      	bne.n	80009aa <_Z41__static_initialization_and_destruction_0ii+0xa2>
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800091e:	4293      	cmp	r3, r2
 8000920:	d143      	bne.n	80009aa <_Z41__static_initialization_and_destruction_0ii+0xa2>
DC_motor fr(25000,10,0.1,0.0005,512,13.2,200);
 8000922:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80009b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000926:	ed9f 5b26 	vldr	d5, [pc, #152]	; 80009c0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 800092a:	ed9f 4b27 	vldr	d4, [pc, #156]	; 80009c8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 800092e:	ed9f 3b28 	vldr	d3, [pc, #160]	; 80009d0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000932:	ed9f 2b29 	vldr	d2, [pc, #164]	; 80009d8 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8000936:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 800093a:	ed9f 0b29 	vldr	d0, [pc, #164]	; 80009e0 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 800093e:	482a      	ldr	r0, [pc, #168]	; (80009e8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8000940:	f7ff fee2 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
DC_motor fl(25000,10,0.1,0.0005,512,13.2,200);
 8000944:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80009b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000948:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 80009c0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 800094c:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 80009c8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000950:	ed9f 3b1f 	vldr	d3, [pc, #124]	; 80009d0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000954:	ed9f 2b20 	vldr	d2, [pc, #128]	; 80009d8 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8000958:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 800095c:	ed9f 0b20 	vldr	d0, [pc, #128]	; 80009e0 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 8000960:	4822      	ldr	r0, [pc, #136]	; (80009ec <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8000962:	f7ff fed1 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
DC_motor br(25000,10,0.1,0.0005,512,13.2,200);
 8000966:	ed9f 6b14 	vldr	d6, [pc, #80]	; 80009b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800096a:	ed9f 5b15 	vldr	d5, [pc, #84]	; 80009c0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 800096e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80009c8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000972:	ed9f 3b17 	vldr	d3, [pc, #92]	; 80009d0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000976:	ed9f 2b18 	vldr	d2, [pc, #96]	; 80009d8 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 800097a:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 800097e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80009e0 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 8000982:	481b      	ldr	r0, [pc, #108]	; (80009f0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8000984:	f7ff fec0 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
DC_motor bl(25000,10,0.1,0.0005,512,13.2,200);
 8000988:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80009b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800098c:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 80009c0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000990:	ed9f 4b0d 	vldr	d4, [pc, #52]	; 80009c8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000994:	ed9f 3b0e 	vldr	d3, [pc, #56]	; 80009d0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000998:	ed9f 2b0f 	vldr	d2, [pc, #60]	; 80009d8 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 800099c:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 80009a0:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80009e0 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 80009a4:	4813      	ldr	r0, [pc, #76]	; (80009f4 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80009a6:	f7ff feaf 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	f3af 8000 	nop.w
 80009b8:	00000000 	.word	0x00000000
 80009bc:	40690000 	.word	0x40690000
 80009c0:	66666666 	.word	0x66666666
 80009c4:	402a6666 	.word	0x402a6666
 80009c8:	00000000 	.word	0x00000000
 80009cc:	40800000 	.word	0x40800000
 80009d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80009d4:	3f40624d 	.word	0x3f40624d
 80009d8:	9999999a 	.word	0x9999999a
 80009dc:	3fb99999 	.word	0x3fb99999
 80009e0:	00000000 	.word	0x00000000
 80009e4:	40d86a00 	.word	0x40d86a00
 80009e8:	24000098 	.word	0x24000098
 80009ec:	24000128 	.word	0x24000128
 80009f0:	240001b8 	.word	0x240001b8
 80009f4:	24000248 	.word	0x24000248

080009f8 <_GLOBAL__sub_I_fr>:
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a00:	2001      	movs	r0, #1
 8000a02:	f7ff ff81 	bl	8000908 <_Z41__static_initialization_and_destruction_0ii>
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <_Z10debug_loopv>:
#include "debug.h"

bool debug_mode;
void debug_loop(){
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1a:	f004 f807 	bl	8004a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1e:	f000 f817 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a22:	f000 fb55 	bl	80010d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a26:	f000 f883 	bl	8000b30 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a2a:	f000 f8d5 	bl	8000bd8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a2e:	f000 f929 	bl	8000c84 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000a32:	f000 f97d 	bl	8000d30 <MX_TIM5_Init>
  MX_TIM12_Init();
 8000a36:	f000 f9d1 	bl	8000ddc <MX_TIM12_Init>
  MX_TIM13_Init();
 8000a3a:	f000 fa1f 	bl	8000e7c <MX_TIM13_Init>
  MX_TIM15_Init();
 8000a3e:	f000 fa41 	bl	8000ec4 <MX_TIM15_Init>
  MX_DMA_Init();
 8000a42:	f000 fb1d 	bl	8001080 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a46:	f000 facf 	bl	8000fe8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000a4a:	f000 fc35 	bl	80012b8 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <main+0x38>

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b09c      	sub	sp, #112	; 0x70
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5a:	224c      	movs	r2, #76	; 0x4c
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f00d f8aa 	bl	800dbb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2220      	movs	r2, #32
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f00d f8a4 	bl	800dbb8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a70:	2002      	movs	r0, #2
 8000a72:	f007 f979 	bl	8007d68 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b2c      	ldr	r3, [pc, #176]	; (8000b2c <SystemClock_Config+0xdc>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a82:	4a2a      	ldr	r2, [pc, #168]	; (8000b2c <SystemClock_Config+0xdc>)
 8000a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a88:	6193      	str	r3, [r2, #24]
 8000a8a:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <SystemClock_Config+0xdc>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a96:	bf00      	nop
 8000a98:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <SystemClock_Config+0xdc>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aa4:	d1f8      	bne.n	8000a98 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000abc:	232a      	movs	r3, #42	; 0x2a
 8000abe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000acc:	230c      	movs	r3, #12
 8000ace:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000adc:	4618      	mov	r0, r3
 8000ade:	f007 f97d 	bl	8007ddc <HAL_RCC_OscConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ae8:	f000 fbe0 	bl	80012ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aec:	233f      	movs	r3, #63	; 0x3f
 8000aee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af0:	2303      	movs	r3, #3
 8000af2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000af4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000af8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000afa:	2308      	movs	r3, #8
 8000afc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000afe:	2340      	movs	r3, #64	; 0x40
 8000b00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b02:	2340      	movs	r3, #64	; 0x40
 8000b04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b0a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b0c:	2340      	movs	r3, #64	; 0x40
 8000b0e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2102      	movs	r1, #2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f007 fd0f 	bl	8008538 <HAL_RCC_ClockConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b20:	f000 fbc4 	bl	80012ac <Error_Handler>
  }
}
 8000b24:	bf00      	nop
 8000b26:	3770      	adds	r7, #112	; 0x70
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	58024800 	.word	0x58024800

08000b30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	2224      	movs	r2, #36	; 0x24
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f00d f83a 	bl	800dbb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b44:	463b      	mov	r3, r7
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <MX_TIM2_Init+0xa4>)
 8000b50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b56:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <MX_TIM2_Init+0xa4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <MX_TIM2_Init+0xa4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <MX_TIM2_Init+0xa4>)
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295
 8000b68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <MX_TIM2_Init+0xa4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <MX_TIM2_Init+0xa4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <MX_TIM2_Init+0xa4>)
 8000ba2:	f009 fe0f 	bl	800a7c4 <HAL_TIM_Encoder_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000bac:	f000 fb7e 	bl	80012ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bb8:	463b      	mov	r3, r7
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_TIM2_Init+0xa4>)
 8000bbe:	f00a fd33 	bl	800b628 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000bc8:	f000 fb70 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	3730      	adds	r7, #48	; 0x30
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	240002dc 	.word	0x240002dc

08000bd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	; 0x30
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	2224      	movs	r2, #36	; 0x24
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f00c ffe6 	bl	800dbb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bec:	463b      	mov	r3, r7
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <MX_TIM3_Init+0xa4>)
 8000bf8:	4a21      	ldr	r2, [pc, #132]	; (8000c80 <MX_TIM3_Init+0xa8>)
 8000bfa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <MX_TIM3_Init+0xa4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c02:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <MX_TIM3_Init+0xa4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c08:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <MX_TIM3_Init+0xa4>)
 8000c0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c10:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_TIM3_Init+0xa4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <MX_TIM3_Init+0xa4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c24:	2301      	movs	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c34:	2301      	movs	r3, #1
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	4619      	mov	r1, r3
 8000c46:	480d      	ldr	r0, [pc, #52]	; (8000c7c <MX_TIM3_Init+0xa4>)
 8000c48:	f009 fdbc 	bl	800a7c4 <HAL_TIM_Encoder_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c52:	f000 fb2b 	bl	80012ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c5e:	463b      	mov	r3, r7
 8000c60:	4619      	mov	r1, r3
 8000c62:	4806      	ldr	r0, [pc, #24]	; (8000c7c <MX_TIM3_Init+0xa4>)
 8000c64:	f00a fce0 	bl	800b628 <HAL_TIMEx_MasterConfigSynchronization>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c6e:	f000 fb1d 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	3730      	adds	r7, #48	; 0x30
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	24000328 	.word	0x24000328
 8000c80:	40000400 	.word	0x40000400

08000c84 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08c      	sub	sp, #48	; 0x30
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	2224      	movs	r2, #36	; 0x24
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f00c ff90 	bl	800dbb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ca2:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <MX_TIM4_Init+0xa4>)
 8000ca4:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <MX_TIM4_Init+0xa8>)
 8000ca6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <MX_TIM4_Init+0xa4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cae:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <MX_TIM4_Init+0xa4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <MX_TIM4_Init+0xa4>)
 8000cb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <MX_TIM4_Init+0xa4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <MX_TIM4_Init+0xa4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480d      	ldr	r0, [pc, #52]	; (8000d28 <MX_TIM4_Init+0xa4>)
 8000cf4:	f009 fd66 	bl	800a7c4 <HAL_TIM_Encoder_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000cfe:	f000 fad5 	bl	80012ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4806      	ldr	r0, [pc, #24]	; (8000d28 <MX_TIM4_Init+0xa4>)
 8000d10:	f00a fc8a 	bl	800b628 <HAL_TIMEx_MasterConfigSynchronization>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d1a:	f000 fac7 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	3730      	adds	r7, #48	; 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	24000374 	.word	0x24000374
 8000d2c:	40000800 	.word	0x40000800

08000d30 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	; 0x30
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	2224      	movs	r2, #36	; 0x24
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f00c ff3a 	bl	800dbb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d44:	463b      	mov	r3, r7
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <MX_TIM5_Init+0xa4>)
 8000d50:	4a21      	ldr	r2, [pc, #132]	; (8000dd8 <MX_TIM5_Init+0xa8>)
 8000d52:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d54:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <MX_TIM5_Init+0xa4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <MX_TIM5_Init+0xa4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000d60:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <MX_TIM5_Init+0xa4>)
 8000d62:	f04f 32ff 	mov.w	r2, #4294967295
 8000d66:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_TIM5_Init+0xa4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <MX_TIM5_Init+0xa4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d74:	2301      	movs	r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <MX_TIM5_Init+0xa4>)
 8000da0:	f009 fd10 	bl	800a7c4 <HAL_TIM_Encoder_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000daa:	f000 fa7f 	bl	80012ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dae:	2300      	movs	r3, #0
 8000db0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000db6:	463b      	mov	r3, r7
 8000db8:	4619      	mov	r1, r3
 8000dba:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <MX_TIM5_Init+0xa4>)
 8000dbc:	f00a fc34 	bl	800b628 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000dc6:	f000 fa71 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	3730      	adds	r7, #48	; 0x30
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	240003c0 	.word	0x240003c0
 8000dd8:	40000c00 	.word	0x40000c00

08000ddc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	615a      	str	r2, [r3, #20]
 8000df2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <MX_TIM12_Init+0x98>)
 8000df6:	4a20      	ldr	r2, [pc, #128]	; (8000e78 <MX_TIM12_Init+0x9c>)
 8000df8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <MX_TIM12_Init+0x98>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e00:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <MX_TIM12_Init+0x98>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000e06:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <MX_TIM12_Init+0x98>)
 8000e08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e0c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <MX_TIM12_Init+0x98>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <MX_TIM12_Init+0x98>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000e1a:	4816      	ldr	r0, [pc, #88]	; (8000e74 <MX_TIM12_Init+0x98>)
 8000e1c:	f009 fb12 	bl	800a444 <HAL_TIM_PWM_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000e26:	f000 fa41 	bl	80012ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e2a:	2360      	movs	r3, #96	; 0x60
 8000e2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480c      	ldr	r0, [pc, #48]	; (8000e74 <MX_TIM12_Init+0x98>)
 8000e42:	f009 ff13 	bl	800ac6c <HAL_TIM_PWM_ConfigChannel>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000e4c:	f000 fa2e 	bl	80012ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2204      	movs	r2, #4
 8000e54:	4619      	mov	r1, r3
 8000e56:	4807      	ldr	r0, [pc, #28]	; (8000e74 <MX_TIM12_Init+0x98>)
 8000e58:	f009 ff08 	bl	800ac6c <HAL_TIM_PWM_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8000e62:	f000 fa23 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000e66:	4803      	ldr	r0, [pc, #12]	; (8000e74 <MX_TIM12_Init+0x98>)
 8000e68:	f003 f9f6 	bl	8004258 <HAL_TIM_MspPostInit>

}
 8000e6c:	bf00      	nop
 8000e6e:	3720      	adds	r7, #32
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	2400040c 	.word	0x2400040c
 8000e78:	40001800 	.word	0x40001800

08000e7c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_TIM13_Init+0x40>)
 8000e82:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <MX_TIM13_Init+0x44>)
 8000e84:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 63;
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <MX_TIM13_Init+0x40>)
 8000e88:	223f      	movs	r2, #63	; 0x3f
 8000e8a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_TIM13_Init+0x40>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <MX_TIM13_Init+0x40>)
 8000e94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e98:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_TIM13_Init+0x40>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_TIM13_Init+0x40>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_TIM13_Init+0x40>)
 8000ea8:	f009 f9ee 	bl	800a288 <HAL_TIM_Base_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8000eb2:	f000 f9fb 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	24000458 	.word	0x24000458
 8000ec0:	40001c00 	.word	0x40001c00

08000ec4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b098      	sub	sp, #96	; 0x60
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]
 8000ee6:	615a      	str	r2, [r3, #20]
 8000ee8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2234      	movs	r2, #52	; 0x34
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f00c fe61 	bl	800dbb8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000ef6:	4b3a      	ldr	r3, [pc, #232]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000ef8:	4a3a      	ldr	r2, [pc, #232]	; (8000fe4 <MX_TIM15_Init+0x120>)
 8000efa:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000efc:	4b38      	ldr	r3, [pc, #224]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f02:	4b37      	ldr	r3, [pc, #220]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000f08:	4b35      	ldr	r3, [pc, #212]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000f0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f0e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f10:	4b33      	ldr	r3, [pc, #204]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f16:	4b32      	ldr	r3, [pc, #200]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1c:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f22:	482f      	ldr	r0, [pc, #188]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000f24:	f009 fa8e 	bl	800a444 <HAL_TIM_PWM_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000f2e:	f000 f9bd 	bl	80012ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4827      	ldr	r0, [pc, #156]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000f42:	f00a fb71 	bl	800b628 <HAL_TIMEx_MasterConfigSynchronization>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000f4c:	f000 f9ae 	bl	80012ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f50:	2360      	movs	r3, #96	; 0x60
 8000f52:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f64:	2300      	movs	r3, #0
 8000f66:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f70:	2200      	movs	r2, #0
 8000f72:	4619      	mov	r1, r3
 8000f74:	481a      	ldr	r0, [pc, #104]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000f76:	f009 fe79 	bl	800ac6c <HAL_TIM_PWM_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000f80:	f000 f994 	bl	80012ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f88:	2204      	movs	r2, #4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4814      	ldr	r0, [pc, #80]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000f8e:	f009 fe6d 	bl	800ac6c <HAL_TIM_PWM_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000f98:	f000 f988 	bl	80012ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000fc4:	f00a fbcc 	bl	800b760 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000fce:	f000 f96d 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000fd2:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <MX_TIM15_Init+0x11c>)
 8000fd4:	f003 f940 	bl	8004258 <HAL_TIM_MspPostInit>

}
 8000fd8:	bf00      	nop
 8000fda:	3760      	adds	r7, #96	; 0x60
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	240004a4 	.word	0x240004a4
 8000fe4:	40014000 	.word	0x40014000

08000fe8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8000fee:	4a23      	ldr	r2, [pc, #140]	; (800107c <MX_USART1_UART_Init+0x94>)
 8000ff0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8000ff4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800100c:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <MX_USART1_UART_Init+0x90>)
 800100e:	220c      	movs	r2, #12
 8001010:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001012:	4b19      	ldr	r3, [pc, #100]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <MX_USART1_UART_Init+0x90>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800101e:	4b16      	ldr	r3, [pc, #88]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800102a:	4b13      	ldr	r3, [pc, #76]	; (8001078 <MX_USART1_UART_Init+0x90>)
 800102c:	2200      	movs	r2, #0
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001030:	4811      	ldr	r0, [pc, #68]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8001032:	f00a fc53 	bl	800b8dc <HAL_UART_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800103c:	f000 f936 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001040:	2100      	movs	r1, #0
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8001044:	f00c fc9a 	bl	800d97c <HAL_UARTEx_SetTxFifoThreshold>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800104e:	f000 f92d 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001052:	2100      	movs	r1, #0
 8001054:	4808      	ldr	r0, [pc, #32]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8001056:	f00c fccf 	bl	800d9f8 <HAL_UARTEx_SetRxFifoThreshold>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001060:	f000 f924 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <MX_USART1_UART_Init+0x90>)
 8001066:	f00c fc50 	bl	800d90a <HAL_UARTEx_DisableFifoMode>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001070:	f000 f91c 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	240004f0 	.word	0x240004f0
 800107c:	40011000 	.word	0x40011000

08001080 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_DMA_Init+0x4c>)
 8001088:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800108c:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <MX_DMA_Init+0x4c>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <MX_DMA_Init+0x4c>)
 8001098:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	200b      	movs	r0, #11
 80010aa:	f003 fe2c 	bl	8004d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010ae:	200b      	movs	r0, #11
 80010b0:	f003 fe43 	bl	8004d3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2100      	movs	r1, #0
 80010b8:	200c      	movs	r0, #12
 80010ba:	f003 fe24 	bl	8004d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80010be:	200c      	movs	r0, #12
 80010c0:	f003 fe3b 	bl	8004d3a <HAL_NVIC_EnableIRQ>

}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	58024400 	.word	0x58024400

080010d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	; 0x30
 80010d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e6:	4b6b      	ldr	r3, [pc, #428]	; (8001294 <MX_GPIO_Init+0x1c4>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ec:	4a69      	ldr	r2, [pc, #420]	; (8001294 <MX_GPIO_Init+0x1c4>)
 80010ee:	f043 0310 	orr.w	r3, r3, #16
 80010f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f6:	4b67      	ldr	r3, [pc, #412]	; (8001294 <MX_GPIO_Init+0x1c4>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	61bb      	str	r3, [r7, #24]
 8001102:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001104:	4b63      	ldr	r3, [pc, #396]	; (8001294 <MX_GPIO_Init+0x1c4>)
 8001106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110a:	4a62      	ldr	r2, [pc, #392]	; (8001294 <MX_GPIO_Init+0x1c4>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001114:	4b5f      	ldr	r3, [pc, #380]	; (8001294 <MX_GPIO_Init+0x1c4>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001122:	4b5c      	ldr	r3, [pc, #368]	; (8001294 <MX_GPIO_Init+0x1c4>)
 8001124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001128:	4a5a      	ldr	r2, [pc, #360]	; (8001294 <MX_GPIO_Init+0x1c4>)
 800112a:	f043 0320 	orr.w	r3, r3, #32
 800112e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001132:	4b58      	ldr	r3, [pc, #352]	; (8001294 <MX_GPIO_Init+0x1c4>)
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001138:	f003 0320 	and.w	r3, r3, #32
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001140:	4b54      	ldr	r3, [pc, #336]	; (8001294 <MX_GPIO_Init+0x1c4>)
 8001142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001146:	4a53      	ldr	r2, [pc, #332]	; (8001294 <MX_GPIO_Init+0x1c4>)
 8001148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800114c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001150:	4b50      	ldr	r3, [pc, #320]	; (8001294 <MX_GPIO_Init+0x1c4>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	4b4d      	ldr	r3, [pc, #308]	; (8001294 <MX_GPIO_Init+0x1c4>)
 8001160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001164:	4a4b      	ldr	r2, [pc, #300]	; (8001294 <MX_GPIO_Init+0x1c4>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800116e:	4b49      	ldr	r3, [pc, #292]	; (8001294 <MX_GPIO_Init+0x1c4>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117c:	4b45      	ldr	r3, [pc, #276]	; (8001294 <MX_GPIO_Init+0x1c4>)
 800117e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001182:	4a44      	ldr	r2, [pc, #272]	; (8001294 <MX_GPIO_Init+0x1c4>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118c:	4b41      	ldr	r3, [pc, #260]	; (8001294 <MX_GPIO_Init+0x1c4>)
 800118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800119a:	4b3e      	ldr	r3, [pc, #248]	; (8001294 <MX_GPIO_Init+0x1c4>)
 800119c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a0:	4a3c      	ldr	r2, [pc, #240]	; (8001294 <MX_GPIO_Init+0x1c4>)
 80011a2:	f043 0308 	orr.w	r3, r3, #8
 80011a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011aa:	4b3a      	ldr	r3, [pc, #232]	; (8001294 <MX_GPIO_Init+0x1c4>)
 80011ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80011be:	4836      	ldr	r0, [pc, #216]	; (8001298 <MX_GPIO_Init+0x1c8>)
 80011c0:	f006 fdb8 	bl	8007d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_5, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f242 0120 	movw	r1, #8224	; 0x2020
 80011ca:	4834      	ldr	r0, [pc, #208]	; (800129c <MX_GPIO_Init+0x1cc>)
 80011cc:	f006 fdb2 	bl	8007d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
 80011d6:	4832      	ldr	r0, [pc, #200]	; (80012a0 <MX_GPIO_Init+0x1d0>)
 80011d8:	f006 fdac 	bl	8007d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 80011e2:	4830      	ldr	r0, [pc, #192]	; (80012a4 <MX_GPIO_Init+0x1d4>)
 80011e4:	f006 fda6 	bl	8007d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 80011ee:	482e      	ldr	r0, [pc, #184]	; (80012a8 <MX_GPIO_Init+0x1d8>)
 80011f0:	f006 fda0 	bl	8007d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8;
 80011f4:	f44f 738e 	mov.w	r3, #284	; 0x11c
 80011f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	4619      	mov	r1, r3
 800120c:	4822      	ldr	r0, [pc, #136]	; (8001298 <MX_GPIO_Init+0x1c8>)
 800120e:	f006 fbe9 	bl	80079e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8001212:	f242 0320 	movw	r3, #8224	; 0x2020
 8001216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	4619      	mov	r1, r3
 800122a:	481c      	ldr	r0, [pc, #112]	; (800129c <MX_GPIO_Init+0x1cc>)
 800122c:	f006 fbda 	bl	80079e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF9 PF11 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15;
 8001230:	f44f 430b 	mov.w	r3, #35584	; 0x8b00
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	4619      	mov	r1, r3
 8001248:	4815      	ldr	r0, [pc, #84]	; (80012a0 <MX_GPIO_Init+0x1d0>)
 800124a:	f006 fbcb 	bl	80079e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9;
 800124e:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4619      	mov	r1, r3
 8001266:	480f      	ldr	r0, [pc, #60]	; (80012a4 <MX_GPIO_Init+0x1d4>)
 8001268:	f006 fbbc 	bl	80079e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 800126c:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	4808      	ldr	r0, [pc, #32]	; (80012a8 <MX_GPIO_Init+0x1d8>)
 8001286:	f006 fbad 	bl	80079e4 <HAL_GPIO_Init>

}
 800128a:	bf00      	nop
 800128c:	3730      	adds	r7, #48	; 0x30
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	58024400 	.word	0x58024400
 8001298:	58021000 	.word	0x58021000
 800129c:	58020800 	.word	0x58020800
 80012a0:	58021400 	.word	0x58021400
 80012a4:	58020400 	.word	0x58020400
 80012a8:	58020c00 	.word	0x58020c00

080012ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b0:	b672      	cpsid	i
}
 80012b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <Error_Handler+0x8>
	...

080012b8 <main_function>:
#include "debug.h"
#include "ros_main.h"
#include "stm_main.h"


void main_function(){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	ROS::setup();
 80012bc:	f001 ff8c 	bl	80031d8 <_ZN3ROS5setupEv>
	STM::setup();
 80012c0:	f003 f96e 	bl	80045a0 <_ZN3STM5setupEv>

	while(1){
		if(debug_mode) debug_loop();
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <main_function+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <main_function+0x1a>
 80012cc:	f7ff fb9c 	bl	8000a08 <_Z10debug_loopv>
 80012d0:	e7f8      	b.n	80012c4 <main_function+0xc>
		else ROS::loop();
 80012d2:	f001 ff91 	bl	80031f8 <_ZN3ROS4loopEv>
		if(debug_mode) debug_loop();
 80012d6:	e7f5      	b.n	80012c4 <main_function+0xc>
 80012d8:	240002d8 	.word	0x240002d8

080012dc <_ZN8CAR_INFOC1Ev>:

typedef struct{
	double Vx=0;
	double Vy=0;
	double Omega=0;
} CAR_INFO;
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	e9c1 2300 	strd	r2, r3, [r1]
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	f04f 0300 	mov.w	r3, #0
 800130a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	0000      	movs	r0, r0
	...

08001320 <_ZN7MecanumC1Ev>:
#include "mecanum.h"
#include "dc_motor.h"

Mecanum mecanum;

Mecanum::Mecanum(void){
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ffd6 	bl	80012dc <_ZN8CAR_INFOC1Ev>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3318      	adds	r3, #24
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ffd1 	bl	80012dc <_ZN8CAR_INFOC1Ev>
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <_ZN7MecanumC1Ev+0x60>)
 8001342:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	a309      	add	r3, pc, #36	; (adr r3, 8001370 <_ZN7MecanumC1Ev+0x50>)
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	a308      	add	r3, pc, #32	; (adr r3, 8001378 <_ZN7MecanumC1Ev+0x58>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	DC_motor_init();
 800135e:	f7ff f98d 	bl	800067c <_Z13DC_motor_initv>
}
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	f3af 8000 	nop.w
 8001370:	cccccccd 	.word	0xcccccccd
 8001374:	4020cccc 	.word	0x4020cccc
 8001378:	39581062 	.word	0x39581062
 800137c:	400d48b4 	.word	0x400d48b4
 8001380:	40270000 	.word	0x40270000

08001384 <_ZN7Mecanum3runEv>:

// calculate wheel (-> PID) -> calculate car -> pub
void Mecanum::run(void){
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	tf2_wheel_speed();
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 f807 	bl	80013a0 <_ZN7Mecanum15tf2_wheel_speedEv>
	tf2_car_speed();
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f894 	bl	80014c0 <_ZN7Mecanum13tf2_car_speedEv>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_ZN7Mecanum15tf2_wheel_speedEv>:

// alter wheel speed
void Mecanum::tf2_wheel_speed(void){
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	fr.rps_goal = (CAR_Goal.Vy - CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	ed93 6b02 	vldr	d6, [r3, #8]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	ed93 7b00 	vldr	d7, [r3]
 80013b4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	ed93 5b04 	vldr	d5, [r3, #16]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80013ca:	ee34 7b07 	vadd.f64	d7, d4, d7
 80013ce:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013d2:	ee36 5b07 	vadd.f64	d5, d6, d7
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80013dc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013e0:	4b32      	ldr	r3, [pc, #200]	; (80014ac <_ZN7Mecanum15tf2_wheel_speedEv+0x10c>)
 80013e2:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	fl.rps_goal = (CAR_Goal.Vy + CAR_Goal.Vx - CAR_Goal.Omega*(a+b) )/radius;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	ed93 6b02 	vldr	d6, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	ed93 7b00 	vldr	d7, [r3]
 80013f2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	ed93 5b04 	vldr	d5, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001408:	ee34 7b07 	vadd.f64	d7, d4, d7
 800140c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001410:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 800141a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800141e:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <_ZN7Mecanum15tf2_wheel_speedEv+0x110>)
 8001420:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	bl.rps_goal = (CAR_Goal.Vy - CAR_Goal.Vx - CAR_Goal.Omega*(a+b) )/radius;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	ed93 6b02 	vldr	d6, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	ed93 7b00 	vldr	d7, [r3]
 8001430:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	ed93 5b04 	vldr	d5, [r3, #16]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001446:	ee34 7b07 	vadd.f64	d7, d4, d7
 800144a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800144e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8001458:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <_ZN7Mecanum15tf2_wheel_speedEv+0x114>)
 800145e:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	br.rps_goal = (CAR_Goal.Vy + CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	ed93 6b02 	vldr	d6, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	ed93 7b00 	vldr	d7, [r3]
 800146e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	ed93 5b04 	vldr	d5, [r3, #16]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001484:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001488:	ee25 7b07 	vmul.f64	d7, d5, d7
 800148c:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8001496:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <_ZN7Mecanum15tf2_wheel_speedEv+0x118>)
 800149c:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	24000098 	.word	0x24000098
 80014b0:	24000128 	.word	0x24000128
 80014b4:	24000248 	.word	0x24000248
 80014b8:	240001b8 	.word	0x240001b8
 80014bc:	00000000 	.word	0x00000000

080014c0 <_ZN7Mecanum13tf2_car_speedEv>:


// give current car speed
void Mecanum::tf2_car_speed(void){
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	CAR_Now.Vx = (1/4)*radius*(fl.rps_now + fr.rps_now + bl.rps_now + br.rps_now);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80014ce:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80015a8 <_ZN7Mecanum13tf2_car_speedEv+0xe8>
 80014d2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80014d6:	4b36      	ldr	r3, [pc, #216]	; (80015b0 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 80014d8:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 80014dc:	4b35      	ldr	r3, [pc, #212]	; (80015b4 <_ZN7Mecanum13tf2_car_speedEv+0xf4>)
 80014de:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80014e2:	ee35 5b07 	vadd.f64	d5, d5, d7
 80014e6:	4b34      	ldr	r3, [pc, #208]	; (80015b8 <_ZN7Mecanum13tf2_car_speedEv+0xf8>)
 80014e8:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80014ec:	ee35 5b07 	vadd.f64	d5, d5, d7
 80014f0:	4b32      	ldr	r3, [pc, #200]	; (80015bc <_ZN7Mecanum13tf2_car_speedEv+0xfc>)
 80014f2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80014f6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80014fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	ed83 7b06 	vstr	d7, [r3, #24]
	CAR_Now.Vy = (1/4)*radius*(-fl.rps_now + fr.rps_now + bl.rps_now - br.rps_now);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800150a:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80015a8 <_ZN7Mecanum13tf2_car_speedEv+0xe8>
 800150e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001512:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <_ZN7Mecanum13tf2_car_speedEv+0xf4>)
 8001514:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001518:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 800151a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800151e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001522:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <_ZN7Mecanum13tf2_car_speedEv+0xf8>)
 8001524:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001528:	ee35 5b07 	vadd.f64	d5, d5, d7
 800152c:	4b23      	ldr	r3, [pc, #140]	; (80015bc <_ZN7Mecanum13tf2_car_speedEv+0xfc>)
 800152e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001532:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001536:	ee26 7b07 	vmul.f64	d7, d6, d7
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	ed83 7b08 	vstr	d7, [r3, #32]
	CAR_Now.Omega = (1/4)*radius*(1/(a+b))*(-fl.rps_now + fr.rps_now - bl.rps_now + br.rps_now);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001546:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80015a8 <_ZN7Mecanum13tf2_car_speedEv+0xe8>
 800154a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800155a:	ee35 5b07 	vadd.f64	d5, d5, d7
 800155e:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8001562:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001566:	ee26 6b07 	vmul.f64	d6, d6, d7
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <_ZN7Mecanum13tf2_car_speedEv+0xf4>)
 800156c:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 8001572:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001576:	ee35 5b47 	vsub.f64	d5, d5, d7
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <_ZN7Mecanum13tf2_car_speedEv+0xf8>)
 800157c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001580:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <_ZN7Mecanum13tf2_car_speedEv+0xfc>)
 8001586:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800158a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800158e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	f3af 8000 	nop.w
	...
 80015b0:	24000128 	.word	0x24000128
 80015b4:	24000098 	.word	0x24000098
 80015b8:	24000248 	.word	0x24000248
 80015bc:	240001b8 	.word	0x240001b8

080015c0 <_Z41__static_initialization_and_destruction_0ii>:
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d107      	bne.n	80015e0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d102      	bne.n	80015e0 <_Z41__static_initialization_and_destruction_0ii+0x20>
Mecanum mecanum;
 80015da:	4803      	ldr	r0, [pc, #12]	; (80015e8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80015dc:	f7ff fea0 	bl	8001320 <_ZN7MecanumC1Ev>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	24000670 	.word	0x24000670

080015ec <_GLOBAL__sub_I_mecanum>:
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015f4:	2001      	movs	r0, #1
 80015f6:	f7ff ffe3 	bl	80015c0 <_Z41__static_initialization_and_destruction_0ii>
 80015fa:	bd80      	pop	{r7, pc}

080015fc <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <_ZN3ros3MsgC1Ev+0x1c>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	0800e198 	.word	0x0800e198

08001640 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
      data()
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ffe8 	bl	8001620 <_ZN3ros3MsgC1Ev>
 8001650:	4a06      	ldr	r2, [pc, #24]	; (800166c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3304      	adds	r3, #4
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ffce 	bl	80015fc <_ZN3ros4TimeC1Ev>
    {
    }
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	0800e180 	.word	0x0800e180

08001670 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6859      	ldr	r1, [r3, #4]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	4413      	add	r3, r2
 8001688:	b2ca      	uxtb	r2, r1
 800168a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	0a19      	lsrs	r1, r3, #8
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	3301      	adds	r3, #1
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	4413      	add	r3, r2
 800169a:	b2ca      	uxtb	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	0c19      	lsrs	r1, r3, #16
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3302      	adds	r3, #2
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	b2ca      	uxtb	r2, r1
 80016ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	0e19      	lsrs	r1, r3, #24
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	3303      	adds	r3, #3
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	4413      	add	r3, r2
 80016be:	b2ca      	uxtb	r2, r1
 80016c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	3304      	adds	r3, #4
 80016c6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6899      	ldr	r1, [r3, #8]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	4413      	add	r3, r2
 80016d2:	b2ca      	uxtb	r2, r1
 80016d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	0a19      	lsrs	r1, r3, #8
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	3301      	adds	r3, #1
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	b2ca      	uxtb	r2, r1
 80016e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	0c19      	lsrs	r1, r3, #16
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3302      	adds	r3, #2
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	4413      	add	r3, r2
 80016f6:	b2ca      	uxtb	r2, r1
 80016f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	0e19      	lsrs	r1, r3, #24
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3303      	adds	r3, #3
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	4413      	add	r3, r2
 8001708:	b2ca      	uxtb	r2, r1
 800170a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	3304      	adds	r3, #4
 8001710:	60fb      	str	r3, [r7, #12]
      return offset;
 8001712:	68fb      	ldr	r3, [r7, #12]
    }
 8001714:	4618      	mov	r0, r3
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	4413      	add	r3, r2
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	3301      	adds	r3, #1
 8001744:	6839      	ldr	r1, [r7, #0]
 8001746:	440b      	add	r3, r1
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	431a      	orrs	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	3302      	adds	r3, #2
 800175a:	6839      	ldr	r1, [r7, #0]
 800175c:	440b      	add	r3, r1
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	041b      	lsls	r3, r3, #16
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	3303      	adds	r3, #3
 8001770:	6839      	ldr	r1, [r7, #0]
 8001772:	440b      	add	r3, r1
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	061b      	lsls	r3, r3, #24
 8001778:	431a      	orrs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3304      	adds	r3, #4
 8001782:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3301      	adds	r3, #1
 800179a:	6839      	ldr	r1, [r7, #0]
 800179c:	440b      	add	r3, r1
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3302      	adds	r3, #2
 80017b0:	6839      	ldr	r1, [r7, #0]
 80017b2:	440b      	add	r3, r1
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	041b      	lsls	r3, r3, #16
 80017b8:	431a      	orrs	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3303      	adds	r3, #3
 80017c6:	6839      	ldr	r1, [r7, #0]
 80017c8:	440b      	add	r3, r1
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	061b      	lsls	r3, r3, #24
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3304      	adds	r3, #4
 80017d8:	60fb      	str	r3, [r7, #12]
     return offset;
 80017da:	68fb      	ldr	r3, [r7, #12]
    }
 80017dc:	4618      	mov	r0, r3
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	0800dee4 	.word	0x0800dee4

08001804 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	0800def4 	.word	0x0800def4

08001820 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fef8 	bl	8001620 <_ZN3ros3MsgC1Ev>
 8001830:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	809a      	strh	r2, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a09      	ldr	r2, [pc, #36]	; (8001864 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a06      	ldr	r2, [pc, #24]	; (8001864 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800184c:	611a      	str	r2, [r3, #16]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
    {
    }
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	0800e168 	.word	0x0800e168
 8001864:	0800df18 	.word	0x0800df18

08001868 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	8899      	ldrh	r1, [r3, #4]
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	4413      	add	r3, r2
 8001880:	b2ca      	uxtb	r2, r1
 8001882:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	889b      	ldrh	r3, [r3, #4]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	b299      	uxth	r1, r3
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	3301      	adds	r3, #1
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	4413      	add	r3, r2
 8001894:	b2ca      	uxtb	r2, r1
 8001896:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	3302      	adds	r3, #2
 800189c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fd34 	bl	8000310 <strlen>
 80018a8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	69b9      	ldr	r1, [r7, #24]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f001 fcce 	bl	8003254 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	3304      	adds	r3, #4
 80018bc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	18d0      	adds	r0, r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4619      	mov	r1, r3
 80018cc:	f00c f966 	bl	800db9c <memcpy>
      offset += length_topic_name;
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	4413      	add	r3, r2
 80018d6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fd17 	bl	8000310 <strlen>
 80018e2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	4413      	add	r3, r2
 80018ea:	6979      	ldr	r1, [r7, #20]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f001 fcb1 	bl	8003254 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	18d0      	adds	r0, r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4619      	mov	r1, r3
 8001906:	f00c f949 	bl	800db9c <memcpy>
      offset += length_message_type;
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	4413      	add	r3, r2
 8001910:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fcfa 	bl	8000310 <strlen>
 800191c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	4413      	add	r3, r2
 8001924:	6939      	ldr	r1, [r7, #16]
 8001926:	4618      	mov	r0, r3
 8001928:	f001 fc94 	bl	8003254 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	3304      	adds	r3, #4
 8001930:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	18d0      	adds	r0, r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4619      	mov	r1, r3
 8001940:	f00c f92c 	bl	800db9c <memcpy>
      offset += length_md5sum;
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4413      	add	r3, r2
 800194a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001952:	68f9      	ldr	r1, [r7, #12]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	4413      	add	r3, r2
 800195a:	b2ca      	uxtb	r2, r1
 800195c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	0a19      	lsrs	r1, r3, #8
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3301      	adds	r3, #1
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	4413      	add	r3, r2
 800196a:	b2ca      	uxtb	r2, r1
 800196c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	0c19      	lsrs	r1, r3, #16
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3302      	adds	r3, #2
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	4413      	add	r3, r2
 800197a:	b2ca      	uxtb	r2, r1
 800197c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	0e19      	lsrs	r1, r3, #24
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3303      	adds	r3, #3
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	4413      	add	r3, r2
 800198a:	b2ca      	uxtb	r2, r1
 800198c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3304      	adds	r3, #4
 8001992:	61fb      	str	r3, [r7, #28]
      return offset;
 8001994:	69fb      	ldr	r3, [r7, #28]
    }
 8001996:	4618      	mov	r0, r3
 8001998:	3720      	adds	r7, #32
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800199e:	b580      	push	{r7, lr}
 80019a0:	b08a      	sub	sp, #40	; 0x28
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	4413      	add	r3, r2
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	889b      	ldrh	r3, [r3, #4]
 80019be:	b21a      	sxth	r2, r3
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	3301      	adds	r3, #1
 80019c4:	6839      	ldr	r1, [r7, #0]
 80019c6:	440b      	add	r3, r1
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	4313      	orrs	r3, r2
 80019d0:	b21b      	sxth	r3, r3
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	3302      	adds	r3, #2
 80019dc:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	441a      	add	r2, r3
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4611      	mov	r1, r2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f001 fc50 	bl	8003290 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	3304      	adds	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	4413      	add	r3, r2
 8001a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d20c      	bcs.n	8001a20 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	441a      	add	r2, r3
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	6839      	ldr	r1, [r7, #0]
 8001a12:	440b      	add	r3, r1
 8001a14:	7812      	ldrb	r2, [r2, #0]
 8001a16:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1e:	e7ec      	b.n	80019fa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	4413      	add	r3, r2
 8001a26:	3b01      	subs	r3, #1
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	441a      	add	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	4413      	add	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	441a      	add	r2, r3
 8001a4a:	f107 0310 	add.w	r3, r7, #16
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f001 fc1d 	bl	8003290 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	623b      	str	r3, [r7, #32]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	4413      	add	r3, r2
 8001a66:	6a3a      	ldr	r2, [r7, #32]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d20c      	bcs.n	8001a86 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	441a      	add	r2, r3
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	6839      	ldr	r1, [r7, #0]
 8001a78:	440b      	add	r3, r1
 8001a7a:	7812      	ldrb	r2, [r2, #0]
 8001a7c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	3301      	adds	r3, #1
 8001a82:	623b      	str	r3, [r7, #32]
 8001a84:	e7ec      	b.n	8001a60 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	4413      	add	r3, r2
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	441a      	add	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	441a      	add	r2, r3
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f001 fbea 	bl	8003290 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	3304      	adds	r3, #4
 8001ac0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4413      	add	r3, r2
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d20c      	bcs.n	8001aec <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	441a      	add	r2, r3
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	6839      	ldr	r1, [r7, #0]
 8001ade:	440b      	add	r3, r1
 8001ae0:	7812      	ldrb	r2, [r2, #0]
 8001ae2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	61fb      	str	r3, [r7, #28]
 8001aea:	e7ec      	b.n	8001ac6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4413      	add	r3, r2
 8001af2:	3b01      	subs	r3, #1
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	441a      	add	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	6839      	ldr	r1, [r7, #0]
 8001b1a:	440a      	add	r2, r1
 8001b1c:	7812      	ldrb	r2, [r2, #0]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	3301      	adds	r3, #1
 8001b28:	6839      	ldr	r1, [r7, #0]
 8001b2a:	440b      	add	r3, r1
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	4313      	orrs	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	3302      	adds	r3, #2
 8001b3a:	6839      	ldr	r1, [r7, #0]
 8001b3c:	440b      	add	r3, r1
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	041b      	lsls	r3, r3, #16
 8001b42:	4313      	orrs	r3, r2
 8001b44:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	3303      	adds	r3, #3
 8001b4c:	6839      	ldr	r1, [r7, #0]
 8001b4e:	440b      	add	r3, r1
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	061b      	lsls	r3, r3, #24
 8001b54:	4313      	orrs	r3, r2
 8001b56:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	3304      	adds	r3, #4
 8001b62:	61bb      	str	r3, [r7, #24]
     return offset;
 8001b64:	69bb      	ldr	r3, [r7, #24]
    }
 8001b66:	4618      	mov	r0, r3
 8001b68:	3728      	adds	r7, #40	; 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	0800df1c 	.word	0x0800df1c

08001b8c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	0800df38 	.word	0x0800df38

08001ba8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fd34 	bl	8001620 <_ZN3ros3MsgC1Ev>
 8001bb8:	4a06      	ldr	r2, [pc, #24]	; (8001bd4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	711a      	strb	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001bc8:	609a      	str	r2, [r3, #8]
    {
    }
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	0800e150 	.word	0x0800e150
 8001bd8:	0800df18 	.word	0x0800df18

08001bdc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	4413      	add	r3, r2
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	7912      	ldrb	r2, [r2, #4]
 8001bf4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fb85 	bl	8000310 <strlen>
 8001c06:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	68b9      	ldr	r1, [r7, #8]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f001 fb1f 	bl	8003254 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	18d0      	adds	r0, r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f00b ffb7 	bl	800db9c <memcpy>
      offset += length_msg;
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4413      	add	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
      return offset;
 8001c36:	68fb      	ldr	r3, [r7, #12]
    }
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	781a      	ldrb	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	441a      	add	r2, r3
 8001c66:	f107 030c 	add.w	r3, r7, #12
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f001 fb0f 	bl	8003290 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	3304      	adds	r3, #4
 8001c76:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4413      	add	r3, r2
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d20c      	bcs.n	8001ca2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	441a      	add	r2, r3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	6839      	ldr	r1, [r7, #0]
 8001c94:	440b      	add	r3, r1
 8001c96:	7812      	ldrb	r2, [r2, #0]
 8001c98:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	e7ec      	b.n	8001c7c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	4413      	add	r3, r2
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	441a      	add	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
     return offset;
 8001cc6:	693b      	ldr	r3, [r7, #16]
    }
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	0800df5c 	.word	0x0800df5c

08001cec <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	0800df70 	.word	0x0800df70

08001d08 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fc84 	bl	8001620 <_ZN3ros3MsgC1Ev>
 8001d18:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	61da      	str	r2, [r3, #28]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	0800e138 	.word	0x0800e138

08001d50 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6859      	ldr	r1, [r3, #4]
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	b2ca      	uxtb	r2, r1
 8001d6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	0a19      	lsrs	r1, r3, #8
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	3301      	adds	r3, #1
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	4413      	add	r3, r2
 8001d7a:	b2ca      	uxtb	r2, r1
 8001d7c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	0c19      	lsrs	r1, r3, #16
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	3302      	adds	r3, #2
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	b2ca      	uxtb	r2, r1
 8001d8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	0e19      	lsrs	r1, r3, #24
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	3303      	adds	r3, #3
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	b2ca      	uxtb	r2, r1
 8001da0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	3304      	adds	r3, #4
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	6a3a      	ldr	r2, [r7, #32]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d22b      	bcs.n	8001e0e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001dc4:	6939      	ldr	r1, [r7, #16]
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b2ca      	uxtb	r2, r1
 8001dce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	0a19      	lsrs	r1, r3, #8
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	b2ca      	uxtb	r2, r1
 8001dde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	0c19      	lsrs	r1, r3, #16
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	3302      	adds	r3, #2
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	b2ca      	uxtb	r2, r1
 8001dee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	0e19      	lsrs	r1, r3, #24
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	3303      	adds	r3, #3
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	b2ca      	uxtb	r2, r1
 8001dfe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	3304      	adds	r3, #4
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	623b      	str	r3, [r7, #32]
 8001e0c:	e7ce      	b.n	8001dac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6919      	ldr	r1, [r3, #16]
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	b2ca      	uxtb	r2, r1
 8001e1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	0a19      	lsrs	r1, r3, #8
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	3301      	adds	r3, #1
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	4413      	add	r3, r2
 8001e2a:	b2ca      	uxtb	r2, r1
 8001e2c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	0c19      	lsrs	r1, r3, #16
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	3302      	adds	r3, #2
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	b2ca      	uxtb	r2, r1
 8001e3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	0e19      	lsrs	r1, r3, #24
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	3303      	adds	r3, #3
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	b2ca      	uxtb	r2, r1
 8001e50:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	3304      	adds	r3, #4
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61fb      	str	r3, [r7, #28]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	69fa      	ldr	r2, [r7, #28]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d22b      	bcs.n	8001ebe <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001e74:	68f9      	ldr	r1, [r7, #12]
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	b2ca      	uxtb	r2, r1
 8001e7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	0a19      	lsrs	r1, r3, #8
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	3301      	adds	r3, #1
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	b2ca      	uxtb	r2, r1
 8001e8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	0c19      	lsrs	r1, r3, #16
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	3302      	adds	r3, #2
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	b2ca      	uxtb	r2, r1
 8001e9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	0e19      	lsrs	r1, r3, #24
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	3303      	adds	r3, #3
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	b2ca      	uxtb	r2, r1
 8001eae:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	61fb      	str	r3, [r7, #28]
 8001ebc:	e7ce      	b.n	8001e5c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69d9      	ldr	r1, [r3, #28]
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	b2ca      	uxtb	r2, r1
 8001eca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	0a19      	lsrs	r1, r3, #8
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	4413      	add	r3, r2
 8001eda:	b2ca      	uxtb	r2, r1
 8001edc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	0c19      	lsrs	r1, r3, #16
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	b2ca      	uxtb	r2, r1
 8001eee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	0e19      	lsrs	r1, r3, #24
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	3303      	adds	r3, #3
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	b2ca      	uxtb	r2, r1
 8001f00:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	3304      	adds	r3, #4
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61bb      	str	r3, [r7, #24]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d228      	bcs.n	8001f68 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe f9f4 	bl	8000310 <strlen>
 8001f28:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	6979      	ldr	r1, [r7, #20]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f001 f98e 	bl	8003254 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	18d0      	adds	r0, r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	4619      	mov	r1, r3
 8001f54:	f00b fe22 	bl	800db9c <memcpy>
      offset += length_stringsi;
 8001f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	3301      	adds	r3, #1
 8001f64:	61bb      	str	r3, [r7, #24]
 8001f66:	e7d1      	b.n	8001f0c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3728      	adds	r7, #40	; 0x28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b08e      	sub	sp, #56	; 0x38
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	4413      	add	r3, r2
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	4413      	add	r3, r2
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	6a3a      	ldr	r2, [r7, #32]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	041b      	lsls	r3, r3, #16
 8001fa8:	6a3a      	ldr	r2, [r7, #32]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb0:	3303      	adds	r3, #3
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	061b      	lsls	r3, r3, #24
 8001fba:	6a3a      	ldr	r2, [r7, #32]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc2:	3304      	adds	r3, #4
 8001fc4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	6a3a      	ldr	r2, [r7, #32]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d90a      	bls.n	8001fe6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4610      	mov	r0, r2
 8001fdc:	f00b fdf4 	bl	800dbc8 <realloc>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a3a      	ldr	r2, [r7, #32]
 8001fea:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001fec:	2300      	movs	r3, #0
 8001fee:	633b      	str	r3, [r7, #48]	; 0x30
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d236      	bcs.n	8002068 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002002:	6839      	ldr	r1, [r7, #0]
 8002004:	440a      	add	r2, r1
 8002006:	7812      	ldrb	r2, [r2, #0]
 8002008:	4313      	orrs	r3, r2
 800200a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002010:	3301      	adds	r3, #1
 8002012:	6839      	ldr	r1, [r7, #0]
 8002014:	440b      	add	r3, r1
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	021b      	lsls	r3, r3, #8
 800201a:	4313      	orrs	r3, r2
 800201c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002022:	3302      	adds	r3, #2
 8002024:	6839      	ldr	r1, [r7, #0]
 8002026:	440b      	add	r3, r1
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	041b      	lsls	r3, r3, #16
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002034:	3303      	adds	r3, #3
 8002036:	6839      	ldr	r1, [r7, #0]
 8002038:	440b      	add	r3, r1
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	061b      	lsls	r3, r3, #24
 800203e:	4313      	orrs	r3, r2
 8002040:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800204a:	3304      	adds	r3, #4
 800204c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	3208      	adds	r2, #8
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002062:	3301      	adds	r3, #1
 8002064:	633b      	str	r3, [r7, #48]	; 0x30
 8002066:	e7c3      	b.n	8001ff0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	4413      	add	r3, r2
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002074:	3301      	adds	r3, #1
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	4413      	add	r3, r2
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	69fa      	ldr	r2, [r7, #28]
 8002080:	4313      	orrs	r3, r2
 8002082:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002086:	3302      	adds	r3, #2
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	4413      	add	r3, r2
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	041b      	lsls	r3, r3, #16
 8002090:	69fa      	ldr	r2, [r7, #28]
 8002092:	4313      	orrs	r3, r2
 8002094:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002098:	3303      	adds	r3, #3
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	4413      	add	r3, r2
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	061b      	lsls	r3, r3, #24
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80020a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020aa:	3304      	adds	r3, #4
 80020ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d90a      	bls.n	80020ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699a      	ldr	r2, [r3, #24]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4619      	mov	r1, r3
 80020c2:	4610      	mov	r0, r2
 80020c4:	f00b fd80 	bl	800dbc8 <realloc>
 80020c8:	4602      	mov	r2, r0
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69fa      	ldr	r2, [r7, #28]
 80020d2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80020d4:	2300      	movs	r3, #0
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020de:	429a      	cmp	r2, r3
 80020e0:	d236      	bcs.n	8002150 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020ea:	6839      	ldr	r1, [r7, #0]
 80020ec:	440a      	add	r2, r1
 80020ee:	7812      	ldrb	r2, [r2, #0]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f8:	3301      	adds	r3, #1
 80020fa:	6839      	ldr	r1, [r7, #0]
 80020fc:	440b      	add	r3, r1
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210a:	3302      	adds	r3, #2
 800210c:	6839      	ldr	r1, [r7, #0]
 800210e:	440b      	add	r3, r1
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	041b      	lsls	r3, r3, #16
 8002114:	4313      	orrs	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211c:	3303      	adds	r3, #3
 800211e:	6839      	ldr	r1, [r7, #0]
 8002120:	440b      	add	r3, r1
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	061b      	lsls	r3, r3, #24
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002132:	3304      	adds	r3, #4
 8002134:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699a      	ldr	r2, [r3, #24]
 800213a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	3214      	adds	r2, #20
 8002144:	6812      	ldr	r2, [r2, #0]
 8002146:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214a:	3301      	adds	r3, #1
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800214e:	e7c3      	b.n	80020d8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	4413      	add	r3, r2
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800215a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800215c:	3301      	adds	r3, #1
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	4413      	add	r3, r2
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800216c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216e:	3302      	adds	r3, #2
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	4413      	add	r3, r2
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	041b      	lsls	r3, r3, #16
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800217e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002180:	3303      	adds	r3, #3
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	4413      	add	r3, r2
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	061b      	lsls	r3, r3, #24
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002192:	3304      	adds	r3, #4
 8002194:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	429a      	cmp	r2, r3
 800219e:	d90a      	bls.n	80021b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4619      	mov	r1, r3
 80021aa:	4610      	mov	r0, r2
 80021ac:	f00b fd0c 	bl	800dbc8 <realloc>
 80021b0:	4602      	mov	r2, r0
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80021bc:	2300      	movs	r3, #0
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d23f      	bcs.n	800224a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80021ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	441a      	add	r2, r3
 80021d0:	f107 030c 	add.w	r3, r7, #12
 80021d4:	4611      	mov	r1, r2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f001 f85a 	bl	8003290 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021de:	3304      	adds	r3, #4
 80021e0:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80021e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
 80021e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4413      	add	r3, r2
 80021ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d20c      	bcs.n	800220c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	441a      	add	r2, r3
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	3b01      	subs	r3, #1
 80021fc:	6839      	ldr	r1, [r7, #0]
 80021fe:	440b      	add	r3, r1
 8002200:	7812      	ldrb	r2, [r2, #0]
 8002202:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	3301      	adds	r3, #1
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
 800220a:	e7ec      	b.n	80021e6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800220c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4413      	add	r3, r2
 8002212:	3b01      	subs	r3, #1
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	4413      	add	r3, r2
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800221c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221e:	3b01      	subs	r3, #1
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	441a      	add	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4413      	add	r3, r2
 800222e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	3220      	adds	r2, #32
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002244:	3301      	adds	r3, #1
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
 8002248:	e7ba      	b.n	80021c0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800224a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800224c:	4618      	mov	r0, r3
 800224e:	3738      	adds	r7, #56	; 0x38
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	4b03      	ldr	r3, [pc, #12]	; (800226c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	0800e08c 	.word	0x0800e08c

08002270 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	0800df94 	.word	0x0800df94

0800228c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	611a      	str	r2, [r3, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
  }
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a42      	ldr	r2, [pc, #264]	; (80023f0 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d068      	beq.n	80023bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a40      	ldr	r2, [pc, #256]	; (80023f4 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d061      	beq.n	80023bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a3d      	ldr	r2, [pc, #244]	; (80023f8 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d05a      	beq.n	80023bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a3b      	ldr	r2, [pc, #236]	; (80023fc <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d053      	beq.n	80023bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a38      	ldr	r2, [pc, #224]	; (8002400 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d04c      	beq.n	80023bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a36      	ldr	r2, [pc, #216]	; (8002404 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d045      	beq.n	80023bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a33      	ldr	r2, [pc, #204]	; (8002408 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d03e      	beq.n	80023bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a31      	ldr	r2, [pc, #196]	; (800240c <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d037      	beq.n	80023bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a2e      	ldr	r2, [pc, #184]	; (8002410 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d030      	beq.n	80023bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a2c      	ldr	r2, [pc, #176]	; (8002414 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d029      	beq.n	80023bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a29      	ldr	r2, [pc, #164]	; (8002418 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d022      	beq.n	80023bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a27      	ldr	r2, [pc, #156]	; (800241c <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d01b      	beq.n	80023bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a24      	ldr	r2, [pc, #144]	; (8002420 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d014      	beq.n	80023bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a22      	ldr	r2, [pc, #136]	; (8002424 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d00d      	beq.n	80023bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a1f      	ldr	r2, [pc, #124]	; (8002428 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d006      	beq.n	80023bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a1d      	ldr	r2, [pc, #116]	; (800242c <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d109      	bne.n	80023d0 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80023ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ce:	e008      	b.n	80023e2 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80023de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40020010 	.word	0x40020010
 80023f4:	40020028 	.word	0x40020028
 80023f8:	40020040 	.word	0x40020040
 80023fc:	40020058 	.word	0x40020058
 8002400:	40020070 	.word	0x40020070
 8002404:	40020088 	.word	0x40020088
 8002408:	400200a0 	.word	0x400200a0
 800240c:	400200b8 	.word	0x400200b8
 8002410:	40020410 	.word	0x40020410
 8002414:	40020428 	.word	0x40020428
 8002418:	40020440 	.word	0x40020440
 800241c:	40020458 	.word	0x40020458
 8002420:	40020470 	.word	0x40020470
 8002424:	40020488 	.word	0x40020488
 8002428:	400204a0 	.word	0x400204a0
 800242c:	400204b8 	.word	0x400204b8

08002430 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <_ZN13STM32HardwareC1Ev+0x34>)
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	240004f0 	.word	0x240004f0

08002468 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f804 	bl	800247e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3304      	adds	r3, #4
 800248e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002492:	4619      	mov	r1, r3
 8002494:	f009 fb04 	bl	800baa0 <HAL_UART_Receive_DMA>
    }
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <_ZN13STM32Hardware4readEv>:

    int read(){
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295
 80024ac:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ff0d 	bl	80022d4 <_ZN13STM32Hardware10getRdmaIndEv>
 80024ba:	4603      	mov	r3, r0
 80024bc:	429c      	cmp	r4, r3
 80024be:	bf14      	ite	ne
 80024c0:	2301      	movne	r3, #1
 80024c2:	2300      	moveq	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d012      	beq.n	80024f0 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80024d0:	1c59      	adds	r1, r3, #1
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	4413      	add	r3, r2
 80024dc:	791b      	ldrb	r3, [r3, #4]
 80024de:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80024e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80024f0:	68fb      	ldr	r3, [r7, #12]
    }
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd90      	pop	{r4, r7, pc}
	...

080024fc <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800250c:	2b20      	cmp	r3, #32
 800250e:	d108      	bne.n	8002522 <_ZN13STM32Hardware5flushEv+0x26>
 8002510:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	f083 0301 	eor.w	r3, r3, #1
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <_ZN13STM32Hardware5flushEv+0x26>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <_ZN13STM32Hardware5flushEv+0x28>
 8002522:	2300      	movs	r3, #0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d03f      	beq.n	80025a8 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <_ZN13STM32Hardware5flushEv+0xb4>)
 800252a:	2201      	movs	r2, #1
 800252c:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800253a:	429a      	cmp	r2, r3
 800253c:	d031      	beq.n	80025a2 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800254a:	429a      	cmp	r2, r3
 800254c:	d20a      	bcs.n	8002564 <_ZN13STM32Hardware5flushEv+0x68>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002554:	b29a      	uxth	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800255c:	b29b      	uxth	r3, r3
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	b29b      	uxth	r3, r3
 8002562:	e006      	b.n	8002572 <_ZN13STM32Hardware5flushEv+0x76>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800256a:	b29b      	uxth	r3, r3
 800256c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002570:	b29b      	uxth	r3, r3
 8002572:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800257e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	89fa      	ldrh	r2, [r7, #14]
 8002588:	4619      	mov	r1, r3
 800258a:	f009 f9f7 	bl	800b97c <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002594:	89fb      	ldrh	r3, [r7, #14]
 8002596:	4413      	add	r3, r2
 8002598:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80025a2:	4b03      	ldr	r3, [pc, #12]	; (80025b0 <_ZN13STM32Hardware5flushEv+0xb4>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
      }
    }
 80025a8:	bf00      	nop
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	240006b8 	.word	0x240006b8

080025b4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
      int n = length;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ca:	bfa8      	it	ge
 80025cc:	f44f 7300 	movge.w	r3, #512	; 0x200
 80025d0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80025d8:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	4293      	cmp	r3, r2
 80025e0:	bf28      	it	cs
 80025e2:	4613      	movcs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80025ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4413      	add	r3, r2
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	68b9      	ldr	r1, [r7, #8]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f00b facf 	bl	800db9c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	4413      	add	r3, r2
 8002608:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	429a      	cmp	r2, r3
 8002618:	d00b      	beq.n	8002632 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	18d1      	adds	r1, r2, r3
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	461a      	mov	r2, r3
 800262e:	f00b fab5 	bl	800db9c <memcpy>
      }

      flush();
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f7ff ff62 	bl	80024fc <_ZN13STM32Hardware5flushEv>
    }
 8002638:	bf00      	nop
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	f002 fa76 	bl	8004b38 <HAL_GetTick>
 800264c:	4603      	mov	r3, r0
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe ffdc 	bl	8001620 <_ZN3ros3MsgC1Ev>
 8002668:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	0800e0f4 	.word	0x0800e0f4

080026a8 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80026a8:	b480      	push	{r7}
 80026aa:	b08b      	sub	sp, #44	; 0x2c
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80026bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80026c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026c6:	6838      	ldr	r0, [r7, #0]
 80026c8:	4401      	add	r1, r0
 80026ca:	b2d3      	uxtb	r3, r2
 80026cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80026ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	0a02      	lsrs	r2, r0, #8
 80026dc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80026e0:	0a0b      	lsrs	r3, r1, #8
 80026e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026e4:	3101      	adds	r1, #1
 80026e6:	6838      	ldr	r0, [r7, #0]
 80026e8:	4401      	add	r1, r0
 80026ea:	b2d3      	uxtb	r3, r2
 80026ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80026ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	0c02      	lsrs	r2, r0, #16
 80026fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002700:	0c0b      	lsrs	r3, r1, #16
 8002702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002704:	3102      	adds	r1, #2
 8002706:	6838      	ldr	r0, [r7, #0]
 8002708:	4401      	add	r1, r0
 800270a:	b2d3      	uxtb	r3, r2
 800270c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800270e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	0e02      	lsrs	r2, r0, #24
 800271c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002720:	0e0b      	lsrs	r3, r1, #24
 8002722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002724:	3103      	adds	r1, #3
 8002726:	6838      	ldr	r0, [r7, #0]
 8002728:	4401      	add	r1, r0
 800272a:	b2d3      	uxtb	r3, r2
 800272c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800272e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	000a      	movs	r2, r1
 800273c:	2300      	movs	r3, #0
 800273e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002740:	3104      	adds	r1, #4
 8002742:	6838      	ldr	r0, [r7, #0]
 8002744:	4401      	add	r1, r0
 8002746:	b2d3      	uxtb	r3, r2
 8002748:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800274a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	0a0a      	lsrs	r2, r1, #8
 8002758:	2300      	movs	r3, #0
 800275a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800275c:	3105      	adds	r1, #5
 800275e:	6838      	ldr	r0, [r7, #0]
 8002760:	4401      	add	r1, r0
 8002762:	b2d3      	uxtb	r3, r2
 8002764:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002766:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	0c0a      	lsrs	r2, r1, #16
 8002774:	2300      	movs	r3, #0
 8002776:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002778:	3106      	adds	r1, #6
 800277a:	6838      	ldr	r0, [r7, #0]
 800277c:	4401      	add	r1, r0
 800277e:	b2d3      	uxtb	r3, r2
 8002780:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002782:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	0e0a      	lsrs	r2, r1, #24
 8002790:	2300      	movs	r3, #0
 8002792:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002794:	3107      	adds	r1, #7
 8002796:	6838      	ldr	r0, [r7, #0]
 8002798:	4401      	add	r1, r0
 800279a:	b2d3      	uxtb	r3, r2
 800279c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	3308      	adds	r3, #8
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80027aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80027ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80027b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027b4:	6838      	ldr	r0, [r7, #0]
 80027b6:	4401      	add	r1, r0
 80027b8:	b2d3      	uxtb	r3, r2
 80027ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80027bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	0a02      	lsrs	r2, r0, #8
 80027ca:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80027ce:	0a0b      	lsrs	r3, r1, #8
 80027d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027d2:	3101      	adds	r1, #1
 80027d4:	6838      	ldr	r0, [r7, #0]
 80027d6:	4401      	add	r1, r0
 80027d8:	b2d3      	uxtb	r3, r2
 80027da:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80027dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	0c02      	lsrs	r2, r0, #16
 80027ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80027ee:	0c0b      	lsrs	r3, r1, #16
 80027f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027f2:	3102      	adds	r1, #2
 80027f4:	6838      	ldr	r0, [r7, #0]
 80027f6:	4401      	add	r1, r0
 80027f8:	b2d3      	uxtb	r3, r2
 80027fa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80027fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	0e02      	lsrs	r2, r0, #24
 800280a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800280e:	0e0b      	lsrs	r3, r1, #24
 8002810:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002812:	3103      	adds	r1, #3
 8002814:	6838      	ldr	r0, [r7, #0]
 8002816:	4401      	add	r1, r0
 8002818:	b2d3      	uxtb	r3, r2
 800281a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800281c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	000a      	movs	r2, r1
 800282a:	2300      	movs	r3, #0
 800282c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800282e:	3104      	adds	r1, #4
 8002830:	6838      	ldr	r0, [r7, #0]
 8002832:	4401      	add	r1, r0
 8002834:	b2d3      	uxtb	r3, r2
 8002836:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002838:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	0a0a      	lsrs	r2, r1, #8
 8002846:	2300      	movs	r3, #0
 8002848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800284a:	3105      	adds	r1, #5
 800284c:	6838      	ldr	r0, [r7, #0]
 800284e:	4401      	add	r1, r0
 8002850:	b2d3      	uxtb	r3, r2
 8002852:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002854:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	0c0a      	lsrs	r2, r1, #16
 8002862:	2300      	movs	r3, #0
 8002864:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002866:	3106      	adds	r1, #6
 8002868:	6838      	ldr	r0, [r7, #0]
 800286a:	4401      	add	r1, r0
 800286c:	b2d3      	uxtb	r3, r2
 800286e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002870:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	0e0a      	lsrs	r2, r1, #24
 800287e:	2300      	movs	r3, #0
 8002880:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002882:	3107      	adds	r1, #7
 8002884:	6838      	ldr	r0, [r7, #0]
 8002886:	4401      	add	r1, r0
 8002888:	b2d3      	uxtb	r3, r2
 800288a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	3308      	adds	r3, #8
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002898:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800289c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028a2:	6838      	ldr	r0, [r7, #0]
 80028a4:	4401      	add	r1, r0
 80028a6:	b2d3      	uxtb	r3, r2
 80028a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80028aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	0a02      	lsrs	r2, r0, #8
 80028b8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80028bc:	0a0b      	lsrs	r3, r1, #8
 80028be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c0:	3101      	adds	r1, #1
 80028c2:	6838      	ldr	r0, [r7, #0]
 80028c4:	4401      	add	r1, r0
 80028c6:	b2d3      	uxtb	r3, r2
 80028c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80028ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	0c02      	lsrs	r2, r0, #16
 80028d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80028dc:	0c0b      	lsrs	r3, r1, #16
 80028de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028e0:	3102      	adds	r1, #2
 80028e2:	6838      	ldr	r0, [r7, #0]
 80028e4:	4401      	add	r1, r0
 80028e6:	b2d3      	uxtb	r3, r2
 80028e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80028ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	0e02      	lsrs	r2, r0, #24
 80028f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80028fc:	0e0b      	lsrs	r3, r1, #24
 80028fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002900:	3103      	adds	r1, #3
 8002902:	6838      	ldr	r0, [r7, #0]
 8002904:	4401      	add	r1, r0
 8002906:	b2d3      	uxtb	r3, r2
 8002908:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800290a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	000a      	movs	r2, r1
 8002918:	2300      	movs	r3, #0
 800291a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800291c:	3104      	adds	r1, #4
 800291e:	6838      	ldr	r0, [r7, #0]
 8002920:	4401      	add	r1, r0
 8002922:	b2d3      	uxtb	r3, r2
 8002924:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002926:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	0a0a      	lsrs	r2, r1, #8
 8002934:	2300      	movs	r3, #0
 8002936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002938:	3105      	adds	r1, #5
 800293a:	6838      	ldr	r0, [r7, #0]
 800293c:	4401      	add	r1, r0
 800293e:	b2d3      	uxtb	r3, r2
 8002940:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002942:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	f04f 0300 	mov.w	r3, #0
 800294e:	0c0a      	lsrs	r2, r1, #16
 8002950:	2300      	movs	r3, #0
 8002952:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002954:	3106      	adds	r1, #6
 8002956:	6838      	ldr	r0, [r7, #0]
 8002958:	4401      	add	r1, r0
 800295a:	b2d3      	uxtb	r3, r2
 800295c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800295e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	0e0a      	lsrs	r2, r1, #24
 800296c:	2300      	movs	r3, #0
 800296e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002970:	3107      	adds	r1, #7
 8002972:	6838      	ldr	r0, [r7, #0]
 8002974:	4401      	add	r1, r0
 8002976:	b2d3      	uxtb	r3, r2
 8002978:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	3308      	adds	r3, #8
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002982:	4618      	mov	r0, r3
 8002984:	372c      	adds	r7, #44	; 0x2c
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800298e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002992:	b0eb      	sub	sp, #428	; 0x1ac
 8002994:	af00      	add	r7, sp, #0
 8002996:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800299a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029b0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029b4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80029b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029bc:	4413      	add	r3, r2
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2200      	movs	r2, #0
 80029c4:	461c      	mov	r4, r3
 80029c6:	4615      	mov	r5, r2
 80029c8:	ea40 0804 	orr.w	r8, r0, r4
 80029cc:	ea41 0905 	orr.w	r9, r1, r5
 80029d0:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029d4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029d8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029e2:	4413      	add	r3, r2
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2200      	movs	r2, #0
 80029ea:	469a      	mov	sl, r3
 80029ec:	4693      	mov	fp, r2
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80029fa:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80029fe:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002a02:	ea40 0402 	orr.w	r4, r0, r2
 8002a06:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002a0a:	430b      	orrs	r3, r1
 8002a0c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002a10:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002a14:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a18:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a1c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a20:	1c9a      	adds	r2, r3, #2
 8002a22:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a26:	4413      	add	r3, r2
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002a32:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002a42:	464c      	mov	r4, r9
 8002a44:	0423      	lsls	r3, r4, #16
 8002a46:	4644      	mov	r4, r8
 8002a48:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002a4c:	4644      	mov	r4, r8
 8002a4e:	0422      	lsls	r2, r4, #16
 8002a50:	ea40 0402 	orr.w	r4, r0, r2
 8002a54:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002a5e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002a62:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a66:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a6a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a6e:	1cda      	adds	r2, r3, #3
 8002a70:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a74:	4413      	add	r3, r2
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002a80:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002a84:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002a88:	4623      	mov	r3, r4
 8002a8a:	0a1b      	lsrs	r3, r3, #8
 8002a8c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002a90:	4623      	mov	r3, r4
 8002a92:	061b      	lsls	r3, r3, #24
 8002a94:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002a98:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002a9c:	4623      	mov	r3, r4
 8002a9e:	4303      	orrs	r3, r0
 8002aa0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002aa4:	462b      	mov	r3, r5
 8002aa6:	430b      	orrs	r3, r1
 8002aa8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002aac:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002ab0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002ab4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ab8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002abc:	1d1a      	adds	r2, r3, #4
 8002abe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ac2:	4413      	add	r3, r2
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002ace:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002ade:	0023      	movs	r3, r4
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	ea40 0402 	orr.w	r4, r0, r2
 8002ae6:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002aea:	430b      	orrs	r3, r1
 8002aec:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002af0:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002af4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002af8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002afc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b00:	1d5a      	adds	r2, r3, #5
 8002b02:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b06:	4413      	add	r3, r2
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002b12:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002b22:	0223      	lsls	r3, r4, #8
 8002b24:	2200      	movs	r2, #0
 8002b26:	ea40 0402 	orr.w	r4, r0, r2
 8002b2a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002b34:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002b38:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002b3c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b40:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b44:	1d9a      	adds	r2, r3, #6
 8002b46:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b4a:	4413      	add	r3, r2
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2200      	movs	r2, #0
 8002b52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002b56:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002b66:	0423      	lsls	r3, r4, #16
 8002b68:	2200      	movs	r2, #0
 8002b6a:	ea40 0402 	orr.w	r4, r0, r2
 8002b6e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002b72:	430b      	orrs	r3, r1
 8002b74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b78:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002b7c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002b80:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b84:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b88:	1dda      	adds	r2, r3, #7
 8002b8a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b8e:	4413      	add	r3, r2
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2200      	movs	r2, #0
 8002b96:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002b9a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002baa:	0623      	lsls	r3, r4, #24
 8002bac:	2200      	movs	r2, #0
 8002bae:	ea40 0402 	orr.w	r4, r0, r2
 8002bb2:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002bb6:	430b      	orrs	r3, r1
 8002bb8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002bbc:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002bc0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002bc4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002bc8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002bcc:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002bd0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bd4:	3308      	adds	r3, #8
 8002bd6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002be6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002bea:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002bee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bf2:	4413      	add	r3, r2
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002bfe:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002c02:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002c06:	4623      	mov	r3, r4
 8002c08:	4303      	orrs	r3, r0
 8002c0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002c0e:	462b      	mov	r3, r5
 8002c10:	430b      	orrs	r3, r1
 8002c12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c16:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002c1a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c1e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c22:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c2c:	4413      	add	r3, r2
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2200      	movs	r2, #0
 8002c34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002c38:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002c48:	464c      	mov	r4, r9
 8002c4a:	0223      	lsls	r3, r4, #8
 8002c4c:	4644      	mov	r4, r8
 8002c4e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002c52:	4644      	mov	r4, r8
 8002c54:	0222      	lsls	r2, r4, #8
 8002c56:	ea40 0402 	orr.w	r4, r0, r2
 8002c5a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002c5e:	430b      	orrs	r3, r1
 8002c60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002c64:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002c68:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c6c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c70:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c74:	1c9a      	adds	r2, r3, #2
 8002c76:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c7a:	4413      	add	r3, r2
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2200      	movs	r2, #0
 8002c82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002c96:	464c      	mov	r4, r9
 8002c98:	0423      	lsls	r3, r4, #16
 8002c9a:	4644      	mov	r4, r8
 8002c9c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002ca0:	4644      	mov	r4, r8
 8002ca2:	0422      	lsls	r2, r4, #16
 8002ca4:	ea40 0402 	orr.w	r4, r0, r2
 8002ca8:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002cac:	430b      	orrs	r3, r1
 8002cae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cb2:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002cb6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002cba:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002cbe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cc2:	1cda      	adds	r2, r3, #3
 8002cc4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cc8:	4413      	add	r3, r2
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cd4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002cd8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002cdc:	4623      	mov	r3, r4
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002ce4:	4623      	mov	r3, r4
 8002ce6:	061b      	lsls	r3, r3, #24
 8002ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cec:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002cf0:	4623      	mov	r3, r4
 8002cf2:	4303      	orrs	r3, r0
 8002cf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cf8:	462b      	mov	r3, r5
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d00:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002d04:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002d08:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d0c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d10:	1d1a      	adds	r2, r3, #4
 8002d12:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d16:	4413      	add	r3, r2
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d22:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002d32:	0023      	movs	r3, r4
 8002d34:	2200      	movs	r2, #0
 8002d36:	ea40 0402 	orr.w	r4, r0, r2
 8002d3a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002d44:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002d48:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002d4c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d50:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d54:	1d5a      	adds	r2, r3, #5
 8002d56:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d5a:	4413      	add	r3, r2
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2200      	movs	r2, #0
 8002d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d66:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002d76:	0223      	lsls	r3, r4, #8
 8002d78:	2200      	movs	r2, #0
 8002d7a:	ea40 0402 	orr.w	r4, r0, r2
 8002d7e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002d82:	430b      	orrs	r3, r1
 8002d84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d88:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002d8c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002d90:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d94:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d98:	1d9a      	adds	r2, r3, #6
 8002d9a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d9e:	4413      	add	r3, r2
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2200      	movs	r2, #0
 8002da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002daa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002dba:	0423      	lsls	r3, r4, #16
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	ea40 0402 	orr.w	r4, r0, r2
 8002dc2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002dc6:	430b      	orrs	r3, r1
 8002dc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002dcc:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002dd0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002dd4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002dd8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ddc:	1dda      	adds	r2, r3, #7
 8002dde:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002de2:	4413      	add	r3, r2
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2200      	movs	r2, #0
 8002dea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002dee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002dfe:	0623      	lsls	r3, r4, #24
 8002e00:	2200      	movs	r2, #0
 8002e02:	ea40 0402 	orr.w	r4, r0, r2
 8002e06:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002e0a:	430b      	orrs	r3, r1
 8002e0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002e10:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002e14:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002e18:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002e1c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002e20:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002e24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e28:	3308      	adds	r3, #8
 8002e2a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e3a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e3e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002e42:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e46:	4413      	add	r3, r2
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e52:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e56:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002e5a:	4623      	mov	r3, r4
 8002e5c:	4303      	orrs	r3, r0
 8002e5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e60:	462b      	mov	r3, r5
 8002e62:	430b      	orrs	r3, r1
 8002e64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e66:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002e6a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e6e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e72:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e7c:	4413      	add	r3, r2
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2200      	movs	r2, #0
 8002e84:	673b      	str	r3, [r7, #112]	; 0x70
 8002e86:	677a      	str	r2, [r7, #116]	; 0x74
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e94:	464c      	mov	r4, r9
 8002e96:	0223      	lsls	r3, r4, #8
 8002e98:	4644      	mov	r4, r8
 8002e9a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002e9e:	4644      	mov	r4, r8
 8002ea0:	0222      	lsls	r2, r4, #8
 8002ea2:	ea40 0402 	orr.w	r4, r0, r2
 8002ea6:	66bc      	str	r4, [r7, #104]	; 0x68
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002eac:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002eb0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002eb4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002eb8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ebc:	1c9a      	adds	r2, r3, #2
 8002ebe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ec2:	4413      	add	r3, r2
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2200      	movs	r2, #0
 8002eca:	663b      	str	r3, [r7, #96]	; 0x60
 8002ecc:	667a      	str	r2, [r7, #100]	; 0x64
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002eda:	464c      	mov	r4, r9
 8002edc:	0423      	lsls	r3, r4, #16
 8002ede:	4644      	mov	r4, r8
 8002ee0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002ee4:	4644      	mov	r4, r8
 8002ee6:	0422      	lsls	r2, r4, #16
 8002ee8:	ea40 0402 	orr.w	r4, r0, r2
 8002eec:	65bc      	str	r4, [r7, #88]	; 0x58
 8002eee:	430b      	orrs	r3, r1
 8002ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ef2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002ef6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002efa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002efe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f02:	1cda      	adds	r2, r3, #3
 8002f04:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f08:	4413      	add	r3, r2
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2200      	movs	r2, #0
 8002f10:	653b      	str	r3, [r7, #80]	; 0x50
 8002f12:	657a      	str	r2, [r7, #84]	; 0x54
 8002f14:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002f18:	4623      	mov	r3, r4
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f1e:	4623      	mov	r3, r4
 8002f20:	061b      	lsls	r3, r3, #24
 8002f22:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f24:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002f28:	4623      	mov	r3, r4
 8002f2a:	4303      	orrs	r3, r0
 8002f2c:	643b      	str	r3, [r7, #64]	; 0x40
 8002f2e:	462b      	mov	r3, r5
 8002f30:	430b      	orrs	r3, r1
 8002f32:	647b      	str	r3, [r7, #68]	; 0x44
 8002f34:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002f38:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002f3c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f40:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f44:	1d1a      	adds	r2, r3, #4
 8002f46:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f4a:	4413      	add	r3, r2
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2200      	movs	r2, #0
 8002f52:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002f60:	0023      	movs	r3, r4
 8002f62:	2200      	movs	r2, #0
 8002f64:	ea40 0402 	orr.w	r4, r0, r2
 8002f68:	633c      	str	r4, [r7, #48]	; 0x30
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f6e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002f72:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002f76:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f7a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f7e:	1d5a      	adds	r2, r3, #5
 8002f80:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f84:	4413      	add	r3, r2
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002f9a:	0223      	lsls	r3, r4, #8
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	ea40 0402 	orr.w	r4, r0, r2
 8002fa2:	623c      	str	r4, [r7, #32]
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002fac:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002fb0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002fb4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fb8:	3306      	adds	r3, #6
 8002fba:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002fbe:	4413      	add	r3, r2
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	61fa      	str	r2, [r7, #28]
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	69bc      	ldr	r4, [r7, #24]
 8002fd4:	0423      	lsls	r3, r4, #16
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	ea40 0402 	orr.w	r4, r0, r2
 8002fdc:	613c      	str	r4, [r7, #16]
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002fe6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002fea:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002fee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ff2:	3307      	adds	r3, #7
 8002ff4:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002ff8:	4413      	add	r3, r2
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2200      	movs	r2, #0
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	60fa      	str	r2, [r7, #12]
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	68bc      	ldr	r4, [r7, #8]
 800300e:	0623      	lsls	r3, r4, #24
 8003010:	2200      	movs	r2, #0
 8003012:	ea40 0402 	orr.w	r4, r0, r2
 8003016:	603c      	str	r4, [r7, #0]
 8003018:	430b      	orrs	r3, r1
 800301a:	607b      	str	r3, [r7, #4]
 800301c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003020:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003024:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003028:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 800302c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003030:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003034:	3308      	adds	r3, #8
 8003036:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 800303a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 800303e:	4618      	mov	r0, r3
 8003040:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003044:	46bd      	mov	sp, r7
 8003046:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800304a:	4770      	bx	lr

0800304c <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	4b03      	ldr	r3, [pc, #12]	; (8003064 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	0800dfb8 	.word	0x0800dfb8

08003068 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	4b03      	ldr	r3, [pc, #12]	; (8003080 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	0800dfcc 	.word	0x0800dfcc

08003084 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
      data(0)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe fac6 	bl	8001620 <_ZN3ros3MsgC1Ev>
 8003094:	4a05      	ldr	r2, [pc, #20]	; (80030ac <_ZN8std_msgs4BoolC1Ev+0x28>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	711a      	strb	r2, [r3, #4]
    {
    }
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	0800e0dc 	.word	0x0800e0dc

080030b0 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	791b      	ldrb	r3, [r3, #4]
 80030c2:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	4413      	add	r3, r2
 80030ca:	7a3a      	ldrb	r2, [r7, #8]
 80030cc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	3301      	adds	r3, #1
 80030d2:	60fb      	str	r3, [r7, #12]
      return offset;
 80030d4:	68fb      	ldr	r3, [r7, #12]
    }
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80030e2:	b480      	push	{r7}
 80030e4:	b085      	sub	sp, #20
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 80030f0:	2300      	movs	r3, #0
 80030f2:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80030f4:	7a3a      	ldrb	r2, [r7, #8]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6839      	ldr	r1, [r7, #0]
 80030fa:	440b      	add	r3, r1
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	4313      	orrs	r3, r2
 8003100:	b2db      	uxtb	r3, r3
 8003102:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8003104:	7a3a      	ldrb	r2, [r7, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3301      	adds	r3, #1
 800310e:	60fb      	str	r3, [r7, #12]
     return offset;
 8003110:	68fb      	ldr	r3, [r7, #12]
    }
 8003112:	4618      	mov	r0, r3
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
	...

08003120 <_ZN8std_msgs4Bool7getTypeEv>:

    const char * getType(){ return "std_msgs/Bool"; };
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	4b03      	ldr	r3, [pc, #12]	; (8003138 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 800312a:	4618      	mov	r0, r3
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	0800dff0 	.word	0x0800dff0

0800313c <_ZN8std_msgs4Bool6getMD5Ev>:
    const char * getMD5(){ return "8b94c1b53db61fb6aed406028ad6332a"; };
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 8003146:	4618      	mov	r0, r3
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	0800e000 	.word	0x0800e000

08003158 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE>:
ros::Subscriber<geometry_msgs::Point> scara_sub("scara_toSTM", ROS::scara_callback);

ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
//ros::Publisher scara_pub("scara_fromSTM", &scara_state);

void ROS::scara_callback(const geometry_msgs::Point &msgs){
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	scara.ARM_Goal.Px = msgs.x;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003166:	490b      	ldr	r1, [pc, #44]	; (8003194 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003168:	e9c1 2300 	strd	r2, r3, [r1]
	scara.ARM_Goal.Py = msgs.y;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003172:	4908      	ldr	r1, [pc, #32]	; (8003194 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003174:	e9c1 2302 	strd	r2, r3, [r1, #8]
	scara.ARM_Goal.Pz = msgs.z;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800317e:	4905      	ldr	r1, [pc, #20]	; (8003194 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003180:	e9c1 2304 	strd	r2, r3, [r1, #16]
	scara.run();
 8003184:	4803      	ldr	r0, [pc, #12]	; (8003194 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003186:	f000 fe95 	bl	8003eb4 <_ZN5SCARA3runEv>
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	240010a8 	.word	0x240010a8

08003198 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE>:

void ROS::mecanum_callback(const geometry_msgs::Point &msgs){
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
	mecanum.CAR_Goal.Vx = msgs.x;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80031a6:	490b      	ldr	r1, [pc, #44]	; (80031d4 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 80031a8:	e9c1 2300 	strd	r2, r3, [r1]
	mecanum.CAR_Goal.Vy = msgs.y;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80031b2:	4908      	ldr	r1, [pc, #32]	; (80031d4 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 80031b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	mecanum.CAR_Goal.Omega = msgs.z;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80031be:	4905      	ldr	r1, [pc, #20]	; (80031d4 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 80031c0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	mecanum.run();
 80031c4:	4803      	ldr	r0, [pc, #12]	; (80031d4 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 80031c6:	f7fe f8dd 	bl	8001384 <_ZN7Mecanum3runEv>
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	24000670 	.word	0x24000670

080031d8 <_ZN3ROS5setupEv>:
//	car_speed.z = mecanum.CAR_Now.Omega;
//	mecanum_pub.publish(&car_speed);
//}


void ROS::setup(void){
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
	nh.initNode();
 80031dc:	4804      	ldr	r0, [pc, #16]	; (80031f0 <_ZN3ROS5setupEv+0x18>)
 80031de:	f000 f941 	bl	8003464 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

    nh.subscribe(mecanum_sub);
 80031e2:	4904      	ldr	r1, [pc, #16]	; (80031f4 <_ZN3ROS5setupEv+0x1c>)
 80031e4:	4802      	ldr	r0, [pc, #8]	; (80031f0 <_ZN3ROS5setupEv+0x18>)
 80031e6:	f000 f95a 	bl	800349e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>

//    nh.advertise(mecanum_pub);
}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	240006bc 	.word	0x240006bc
 80031f4:	24001020 	.word	0x24001020

080031f8 <_ZN3ROS4loopEv>:

void ROS::loop(void){
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
	nh.spinOnce();
 80031fc:	4802      	ldr	r0, [pc, #8]	; (8003208 <_ZN3ROS4loopEv+0x10>)
 80031fe:	f000 f979 	bl	80034f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	240006bc 	.word	0x240006bc

0800320c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003214:	4805      	ldr	r0, [pc, #20]	; (800322c <HAL_UART_TxCpltCallback+0x20>)
 8003216:	f000 fb46 	bl	80038a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800321a:	4603      	mov	r3, r0
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff f96d 	bl	80024fc <_ZN13STM32Hardware5flushEv>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	240006bc 	.word	0x240006bc

08003230 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003238:	4805      	ldr	r0, [pc, #20]	; (8003250 <HAL_UART_RxCpltCallback+0x20>)
 800323a:	f000 fb34 	bl	80038a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800323e:	4603      	mov	r3, r0
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff f91c 	bl	800247e <_ZN13STM32Hardware10reset_rbufEv>
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	240006bc 	.word	0x240006bc

08003254 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2b03      	cmp	r3, #3
 8003266:	d80d      	bhi.n	8003284 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	fa22 f103 	lsr.w	r1, r2, r3
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4413      	add	r3, r2
 8003278:	b2ca      	uxtb	r2, r1
 800327a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3301      	adds	r3, #1
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	e7ee      	b.n	8003262 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d811      	bhi.n	80032ce <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6839      	ldr	r1, [r7, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	440a      	add	r2, r1
 80032b4:	7812      	ldrb	r2, [r2, #0]
 80032b6:	4611      	mov	r1, r2
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	00d2      	lsls	r2, r2, #3
 80032bc:	fa01 f202 	lsl.w	r2, r1, r2
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	3301      	adds	r3, #1
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	e7ea      	b.n	80032a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80032ce:	bf00      	nop
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
	...

080032dc <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	4a04      	ldr	r2, [pc, #16]	; (80032f8 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4618      	mov	r0, r3
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	0800e124 	.word	0x0800e124

080032fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff ffe8 	bl	80032dc <_ZN3ros15NodeHandleBase_C1Ev>
 800330c:	4a3a      	ldr	r2, [pc, #232]	; (80033f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3304      	adds	r3, #4
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff f88a 	bl	8002430 <_ZN13STM32HardwareC1Ev>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800332a:	4618      	mov	r0, r3
 800332c:	f7fe fcec 	bl	8001d08 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	2b18      	cmp	r3, #24
 8003338:	d80b      	bhi.n	8003352 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	2200      	movs	r2, #0
 8003348:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	3301      	adds	r3, #1
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	e7f0      	b.n	8003334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b18      	cmp	r3, #24
 800335a:	d80a      	bhi.n	8003372 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003364:	2100      	movs	r1, #0
 8003366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	3301      	adds	r3, #1
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	e7f1      	b.n	8003356 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800337c:	d20a      	bcs.n	8003394 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003388:	2200      	movs	r2, #0
 800338a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	3301      	adds	r3, #1
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	e7f0      	b.n	8003376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003394:	2300      	movs	r3, #0
 8003396:	60bb      	str	r3, [r7, #8]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800339e:	d20a      	bcs.n	80033b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	4413      	add	r3, r2
 80033a6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80033aa:	2200      	movs	r2, #0
 80033ac:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	3301      	adds	r3, #1
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	e7f0      	b.n	8003398 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4618      	mov	r0, r3
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	0800e0c8 	.word	0x0800e0c8

080033fc <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	4a04      	ldr	r2, [pc, #16]	; (8003418 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	0800e10c 	.word	0x0800e10c

0800341c <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ffe5 	bl	80033fc <_ZN3ros11Subscriber_C1Ev>
 8003432:	4a0b      	ldr	r2, [pc, #44]	; (8003460 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	3310      	adds	r3, #16
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff f90b 	bl	8002658 <_ZN13geometry_msgs5PointC1Ev>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	609a      	str	r2, [r3, #8]
  };
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	0800e0b0 	.word	0x0800e0b0

08003464 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3304      	adds	r3, #4
 8003470:	4618      	mov	r0, r3
 8003472:	f7fe fff9 	bl	8002468 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800349e:	b480      	push	{r7}
 80034a0:	b085      	sub	sp, #20
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b18      	cmp	r3, #24
 80034b0:	dc19      	bgt.n	80034e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80034ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10d      	bne.n	80034de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80034c2:	6839      	ldr	r1, [r7, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80034cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	605a      	str	r2, [r3, #4]
        return true;
 80034da:	2301      	movs	r3, #1
 80034dc:	e004      	b.n	80034e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	3301      	adds	r3, #1
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	e7e2      	b.n	80034ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0xe>
      }
    }
    return false;
 80034e6:	2300      	movs	r3, #0
  }
 80034e8:	4618      	mov	r0, r3
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3304      	adds	r3, #4
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff f89d 	bl	8002640 <_ZN13STM32Hardware4timeEv>
 8003506:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003516:	4293      	cmp	r3, r2
 8003518:	d903      	bls.n	8003522 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003528:	2b00      	cmp	r3, #0
 800352a:	d009      	beq.n	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	429a      	cmp	r2, r3
 8003536:	d903      	bls.n	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003546:	2b00      	cmp	r3, #0
 8003548:	d014      	beq.n	8003574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3304      	adds	r3, #4
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff f876 	bl	8002640 <_ZN13STM32Hardware4timeEv>
 8003554:	4602      	mov	r2, r0
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	1ad2      	subs	r2, r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003560:	429a      	cmp	r2, r3
 8003562:	bf8c      	ite	hi
 8003564:	2301      	movhi	r3, #1
 8003566:	2300      	movls	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800356e:	f06f 0301 	mvn.w	r3, #1
 8003572:	e194      	b.n	800389e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3304      	adds	r3, #4
 8003578:	4618      	mov	r0, r3
 800357a:	f7fe ff91 	bl	80024a0 <_ZN13STM32Hardware4readEv>
 800357e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	f2c0 8174 	blt.w	8003870 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	441a      	add	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800359e:	2b07      	cmp	r3, #7
 80035a0:	d11e      	bne.n	80035e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80035a8:	1c59      	adds	r1, r3, #1
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	b2d1      	uxtb	r1, r2
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	4413      	add	r3, r2
 80035b8:	460a      	mov	r2, r1
 80035ba:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80035c4:	1e5a      	subs	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1b4      	bne.n	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2208      	movs	r2, #8
 80035da:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80035de:	e7af      	b.n	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d128      	bne.n	800363c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2bff      	cmp	r3, #255	; 0xff
 80035ee:	d10d      	bne.n	800360c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f103 0214 	add.w	r2, r3, #20
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800360a:	e799      	b.n	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3304      	adds	r3, #4
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff f815 	bl	8002640 <_ZN13STM32Hardware4timeEv>
 8003616:	4602      	mov	r2, r0
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003620:	4293      	cmp	r3, r2
 8003622:	bf8c      	ite	hi
 8003624:	2301      	movhi	r3, #1
 8003626:	2300      	movls	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d088      	beq.n	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003636:	f06f 0301 	mvn.w	r3, #1
 800363a:	e130      	b.n	800389e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003642:	2b01      	cmp	r3, #1
 8003644:	d118      	bne.n	8003678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2bfe      	cmp	r3, #254	; 0xfe
 800364a:	d107      	bne.n	800365c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800365a:	e771      	b.n	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800366a:	2b00      	cmp	r3, #0
 800366c:	f47f af68 	bne.w	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f924 	bl	80038be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003676:	e763      	b.n	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800367e:	2b02      	cmp	r3, #2
 8003680:	d113      	bne.n	80036aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80036a8:	e74a      	b.n	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d110      	bne.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	021b      	lsls	r3, r3, #8
 80036be:	441a      	add	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80036d4:	e734      	b.n	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d116      	bne.n	800370e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80036e6:	425a      	negs	r2, r3
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	bf58      	it	pl
 80036ee:	4253      	negpl	r3, r2
 80036f0:	2bff      	cmp	r3, #255	; 0xff
 80036f2:	d107      	bne.n	8003704 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003702:	e71d      	b.n	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800370c:	e718      	b.n	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003714:	2b05      	cmp	r3, #5
 8003716:	d10f      	bne.n	8003738 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003736:	e703      	b.n	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800373e:	2b06      	cmp	r3, #6
 8003740:	d117      	bne.n	8003772 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	441a      	add	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2207      	movs	r2, #7
 8003758:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003762:	2b00      	cmp	r3, #0
 8003764:	f47f aeec 	bne.w	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2208      	movs	r2, #8
 800376c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003770:	e6e6      	b.n	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003778:	2b08      	cmp	r3, #8
 800377a:	f47f aee1 	bne.w	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800378c:	425a      	negs	r2, r3
 800378e:	b2db      	uxtb	r3, r3
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	bf58      	it	pl
 8003794:	4253      	negpl	r3, r2
 8003796:	2bff      	cmp	r3, #255	; 0xff
 8003798:	f47f aed2 	bne.w	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d110      	bne.n	80037c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f889 	bl	80038be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f8a4 	bl	80038fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80037c2:	f04f 33ff 	mov.w	r3, #4294967295
 80037c6:	e06a      	b.n	800389e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80037ce:	2b0a      	cmp	r3, #10
 80037d0:	d107      	bne.n	80037e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80037d8:	4619      	mov	r1, r3
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f96c 	bl	8003ab8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80037e0:	e6ae      	b.n	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80037e8:	2b06      	cmp	r3, #6
 80037ea:	d10e      	bne.n	800380a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80037f8:	4619      	mov	r1, r3
 80037fa:	4610      	mov	r0, r2
 80037fc:	f7fe fbb9 	bl	8001f72 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003808:	e69a      	b.n	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003810:	2b0b      	cmp	r3, #11
 8003812:	d104      	bne.n	800381e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800381c:	e690      	b.n	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003824:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800382e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003832:	2b00      	cmp	r3, #0
 8003834:	f43f ae84 	beq.w	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800383e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003848:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003852:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f202 2222 	addw	r2, r2, #546	; 0x222
 800385c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800386a:	4611      	mov	r1, r2
 800386c:	4798      	blx	r3
    while (true)
 800386e:	e667      	b.n	8003540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003870:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00f      	beq.n	800389c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800388a:	4293      	cmp	r3, r2
 800388c:	d906      	bls.n	800389c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f815 	bl	80038be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 800389c:	2300      	movs	r3, #0
  }
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
    return &hardware_;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3304      	adds	r3, #4
  }
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80038be:	b580      	push	{r7, lr}
 80038c0:	b086      	sub	sp, #24
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80038c6:	f107 030c 	add.w	r3, r7, #12
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fd feb8 	bl	8001640 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f107 020c 	add.w	r2, r7, #12
 80038da:	210a      	movs	r1, #10
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	4798      	blx	r3
    rt_time = hardware_.time();
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3304      	adds	r3, #4
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fe feab 	bl	8002640 <_ZN13STM32Hardware4timeEv>
 80038ea:	4602      	mov	r2, r0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80038f2:	bf00      	nop
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80038fa:	b590      	push	{r4, r7, lr}
 80038fc:	b08b      	sub	sp, #44	; 0x2c
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003902:	f107 030c 	add.w	r3, r7, #12
 8003906:	4618      	mov	r0, r3
 8003908:	f7fd ff8a 	bl	8001820 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800390c:	2300      	movs	r3, #0
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	2b18      	cmp	r3, #24
 8003914:	dc63      	bgt.n	80039de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d056      	beq.n	80039d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	b29b      	uxth	r3, r3
 800393a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	6859      	ldr	r1, [r3, #4]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3308      	adds	r3, #8
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4608      	mov	r0, r1
 8003976:	4798      	blx	r3
 8003978:	4603      	mov	r3, r0
 800397a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	6859      	ldr	r1, [r3, #4]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	330c      	adds	r3, #12
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4608      	mov	r0, r1
 80039a4:	4798      	blx	r3
 80039a6:	4603      	mov	r3, r0
 80039a8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80039aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039ae:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681c      	ldr	r4, [r3, #0]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fe fc78 	bl	80022ba <_ZN3ros9Publisher15getEndpointTypeEv>
 80039ca:	4601      	mov	r1, r0
 80039cc:	f107 030c 	add.w	r3, r7, #12
 80039d0:	461a      	mov	r2, r3
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	3301      	adds	r3, #1
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
 80039dc:	e798      	b.n	8003910 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80039de:	2300      	movs	r3, #0
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	2b18      	cmp	r3, #24
 80039e6:	dc5f      	bgt.n	8003aa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ec:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d053      	beq.n	8003aa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3308      	adds	r3, #8
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4608      	mov	r0, r1
 8003a3a:	4798      	blx	r3
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a44:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a50:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4608      	mov	r0, r1
 8003a60:	4798      	blx	r3
 8003a62:	4603      	mov	r3, r0
 8003a64:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003a66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a6a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681c      	ldr	r4, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a76:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a82:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4608      	mov	r0, r1
 8003a92:	4798      	blx	r3
 8003a94:	4601      	mov	r1, r0
 8003a96:	f107 030c 	add.w	r3, r7, #12
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa6:	e79c      	b.n	80039e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003ab0:	bf00      	nop
 8003ab2:	372c      	adds	r7, #44	; 0x2c
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd90      	pop	{r4, r7, pc}

08003ab8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003ac2:	f107 0308 	add.w	r3, r7, #8
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fd fdba 	bl	8001640 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe fdb5 	bl	8002640 <_ZN13STM32Hardware4timeEv>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003ae2:	f107 0308 	add.w	r3, r7, #8
 8003ae6:	6839      	ldr	r1, [r7, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fd fe19 	bl	8001720 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	4915      	ldr	r1, [pc, #84]	; (8003b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003af4:	fba1 1303 	umull	r1, r3, r1, r3
 8003af8:	099b      	lsrs	r3, r3, #6
 8003afa:	4413      	add	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003afe:	6939      	ldr	r1, [r7, #16]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003b04:	fba3 0302 	umull	r0, r3, r3, r2
 8003b08:	099b      	lsrs	r3, r3, #6
 8003b0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b0e:	fb00 f303 	mul.w	r3, r0, r3
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	4a0d      	ldr	r2, [pc, #52]	; (8003b4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	440b      	add	r3, r1
 8003b1c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003b1e:	f107 0308 	add.w	r3, r7, #8
 8003b22:	3304      	adds	r3, #4
 8003b24:	4619      	mov	r1, r3
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f8a6 	bl	8003c78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fe fd85 	bl	8002640 <_ZN13STM32Hardware4timeEv>
 8003b36:	4602      	mov	r2, r0
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003b3e:	bf00      	nop
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	10624dd3 	.word	0x10624dd3
 8003b4c:	000f4240 	.word	0x000f4240

08003b50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b63      	cmp	r3, #99	; 0x63
 8003b60:	dd09      	ble.n	8003b76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003b68:	f083 0301 	eor.w	r3, r3, #1
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e079      	b.n	8003c6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003b82:	3207      	adds	r2, #7
 8003b84:	4611      	mov	r1, r2
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	4798      	blx	r3
 8003b8a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	22ff      	movs	r2, #255	; 0xff
 8003b90:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	22fe      	movs	r2, #254	; 0xfe
 8003b98:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	0a1b      	lsrs	r3, r3, #8
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003bc2:	4413      	add	r3, r2
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	b21b      	sxth	r3, r3
 8003bde:	121b      	asrs	r3, r3, #8
 8003be0:	b21b      	sxth	r3, r3
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003bee:	2305      	movs	r3, #5
 8003bf0:	61bb      	str	r3, [r7, #24]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	3306      	adds	r3, #6
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	dc0d      	bgt.n	8003c18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	4413      	add	r3, r2
 8003c02:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	3301      	adds	r3, #1
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	e7ec      	b.n	8003bf2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	3307      	adds	r3, #7
 8003c1c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	425a      	negs	r2, r3
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	bf58      	it	pl
 8003c28:	4253      	negpl	r3, r2
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	1c59      	adds	r1, r3, #1
 8003c30:	6179      	str	r1, [r7, #20]
 8003c32:	43d2      	mvns	r2, r2
 8003c34:	b2d1      	uxtb	r1, r2
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4413      	add	r3, r2
 8003c3a:	460a      	mov	r2, r1
 8003c3c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c46:	dc0a      	bgt.n	8003c5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1d18      	adds	r0, r3, #4
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4619      	mov	r1, r3
 8003c56:	f7fe fcad 	bl	80025b4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	e005      	b.n	8003c6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003c5e:	4905      	ldr	r1, [pc, #20]	; (8003c74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 f849 	bl	8003cf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003c66:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	0800e024 	.word	0x0800e024

08003c78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3304      	adds	r3, #4
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe fcda 	bl	8002640 <_ZN13STM32Hardware4timeEv>
 8003c8c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4915      	ldr	r1, [pc, #84]	; (8003cec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003c96:	fba1 1303 	umull	r1, r3, r1, r3
 8003c9a:	099b      	lsrs	r3, r3, #6
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	1e5a      	subs	r2, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	6859      	ldr	r1, [r3, #4]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003cae:	fba3 0302 	umull	r0, r3, r3, r2
 8003cb2:	099b      	lsrs	r3, r3, #6
 8003cb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cb8:	fb00 f303 	mul.w	r3, r0, r3
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	4a0c      	ldr	r2, [pc, #48]	; (8003cf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8003cc0:	fb02 f303 	mul.w	r3, r2, r3
 8003cc4:	1aca      	subs	r2, r1, r3
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003cc8:	4413      	add	r3, r2
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4610      	mov	r0, r2
 8003ce0:	f7fc fca0 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003ce4:	bf00      	nop
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	10624dd3 	.word	0x10624dd3
 8003cf0:	000f4240 	.word	0x000f4240
 8003cf4:	3b9aca00 	.word	0x3b9aca00

08003cf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	2103      	movs	r1, #3
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f804 	bl	8003d14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003d0c:	bf00      	nop
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	607a      	str	r2, [r7, #4]
 8003d20:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003d22:	f107 0314 	add.w	r3, r7, #20
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fd ff3e 	bl	8001ba8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003d2c:	7afb      	ldrb	r3, [r7, #11]
 8003d2e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f107 0214 	add.w	r2, r7, #20
 8003d3e:	2107      	movs	r1, #7
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	4798      	blx	r3
  }
 8003d44:	bf00      	nop
 8003d46:	3720      	adds	r7, #32
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <_Z41__static_initialization_and_destruction_0ii>:
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d11f      	bne.n	8003d9c <_Z41__static_initialization_and_destruction_0ii+0x50>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d11a      	bne.n	8003d9c <_Z41__static_initialization_and_destruction_0ii+0x50>
ros::NodeHandle nh;
 8003d66:	480f      	ldr	r0, [pc, #60]	; (8003da4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003d68:	f7ff fac8 	bl	80032fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Bool scara_state;
 8003d6c:	480e      	ldr	r0, [pc, #56]	; (8003da8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003d6e:	f7ff f989 	bl	8003084 <_ZN8std_msgs4BoolC1Ev>
geometry_msgs::Point car_speed;
 8003d72:	480e      	ldr	r0, [pc, #56]	; (8003dac <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003d74:	f7fe fc70 	bl	8002658 <_ZN13geometry_msgs5PointC1Ev>
ros::Subscriber<geometry_msgs::Point> mecanum_sub("mecanum_toSTM", ROS::mecanum_callback);
 8003d78:	2301      	movs	r3, #1
 8003d7a:	4a0d      	ldr	r2, [pc, #52]	; (8003db0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003d7c:	490d      	ldr	r1, [pc, #52]	; (8003db4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003d7e:	480e      	ldr	r0, [pc, #56]	; (8003db8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003d80:	f7ff fb4c 	bl	800341c <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<geometry_msgs::Point> scara_sub("scara_toSTM", ROS::scara_callback);
 8003d84:	2301      	movs	r3, #1
 8003d86:	4a0d      	ldr	r2, [pc, #52]	; (8003dbc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003d88:	490d      	ldr	r1, [pc, #52]	; (8003dc0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003d8a:	480e      	ldr	r0, [pc, #56]	; (8003dc4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003d8c:	f7ff fb46 	bl	800341c <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
 8003d90:	2300      	movs	r3, #0
 8003d92:	4a06      	ldr	r2, [pc, #24]	; (8003dac <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003d94:	490c      	ldr	r1, [pc, #48]	; (8003dc8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003d96:	480d      	ldr	r0, [pc, #52]	; (8003dcc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003d98:	f7fe fa78 	bl	800228c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003d9c:	bf00      	nop
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	240006bc 	.word	0x240006bc
 8003da8:	24000ff8 	.word	0x24000ff8
 8003dac:	24001000 	.word	0x24001000
 8003db0:	08003199 	.word	0x08003199
 8003db4:	0800e060 	.word	0x0800e060
 8003db8:	24001020 	.word	0x24001020
 8003dbc:	08003159 	.word	0x08003159
 8003dc0:	0800e070 	.word	0x0800e070
 8003dc4:	24001058 	.word	0x24001058
 8003dc8:	0800e07c 	.word	0x0800e07c
 8003dcc:	24001090 	.word	0x24001090

08003dd0 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3310      	adds	r3, #16
 8003dde:	6839      	ldr	r1, [r7, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fe fdd4 	bl	800298e <_ZN13geometry_msgs5Point11deserializeEPh>
    this->cb_(msg);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	3210      	adds	r2, #16
 8003dee:	4610      	mov	r0, r2
 8003df0:	4798      	blx	r3
  }
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8003e06:	4618      	mov	r0, r3
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b082      	sub	sp, #8
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3310      	adds	r3, #16
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff f914 	bl	800304c <_ZN13geometry_msgs5Point7getTypeEv>
 8003e24:	4603      	mov	r3, r0
  }
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3310      	adds	r3, #16
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff f914 	bl	8003068 <_ZN13geometry_msgs5Point6getMD5Ev>
 8003e40:	4603      	mov	r3, r0
  }
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
    return configured_;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003e58:	4618      	mov	r0, r3
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <_GLOBAL__sub_I_nh>:
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	f7ff ff6d 	bl	8003d4c <_Z41__static_initialization_and_destruction_0ii>
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <_ZN8ARM_INFOC1Ev>:
	double Py;
	double Pz;

	// pub to ROS //
	bool is_finished = false;
} ARM_INFO;
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	761a      	strb	r2, [r3, #24]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4618      	mov	r0, r3
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <_ZN5SCARAC1Ev>:

class SCARA{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff ffea 	bl	8003e74 <_ZN8ARM_INFOC1Ev>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3320      	adds	r3, #32
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff ffe5 	bl	8003e74 <_ZN8ARM_INFOC1Ev>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <_ZN5SCARA3runEv>:
#include "scara.h"
#include "stepper.h"

SCARA scara;

void SCARA::run(void){
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
	SCARA::tf2_arm_angle();
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f804 	bl	8003eca <_ZN5SCARA13tf2_arm_angleEv>
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <_ZN5SCARA13tf2_arm_angleEv>:


void SCARA::tf2_arm_angle(void){
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]


}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
	...

08003ee0 <_Z41__static_initialization_and_destruction_0ii>:
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d107      	bne.n	8003f00 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d102      	bne.n	8003f00 <_Z41__static_initialization_and_destruction_0ii+0x20>
SCARA scara;
 8003efa:	4803      	ldr	r0, [pc, #12]	; (8003f08 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003efc:	f7ff ffc8 	bl	8003e90 <_ZN5SCARAC1Ev>
}
 8003f00:	bf00      	nop
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	240010a8 	.word	0x240010a8

08003f0c <_GLOBAL__sub_I_scara>:
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f14:	2001      	movs	r0, #1
 8003f16:	f7ff ffe3 	bl	8003ee0 <_Z41__static_initialization_and_destruction_0ii>
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f22:	4b0d      	ldr	r3, [pc, #52]	; (8003f58 <HAL_MspInit+0x3c>)
 8003f24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f28:	4a0b      	ldr	r2, [pc, #44]	; (8003f58 <HAL_MspInit+0x3c>)
 8003f2a:	f043 0302 	orr.w	r3, r3, #2
 8003f2e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f32:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <HAL_MspInit+0x3c>)
 8003f34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	607b      	str	r3, [r7, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003f40:	2200      	movs	r2, #0
 8003f42:	2100      	movs	r1, #0
 8003f44:	2005      	movs	r0, #5
 8003f46:	f000 fede 	bl	8004d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003f4a:	2005      	movs	r0, #5
 8003f4c:	f000 fef5 	bl	8004d3a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	58024400 	.word	0x58024400

08003f5c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b090      	sub	sp, #64	; 0x40
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	609a      	str	r2, [r3, #8]
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7c:	d14e      	bne.n	800401c <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f7e:	4b77      	ldr	r3, [pc, #476]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 8003f80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f84:	4a75      	ldr	r2, [pc, #468]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f8e:	4b73      	ldr	r3, [pc, #460]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 8003f90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f9c:	4b6f      	ldr	r3, [pc, #444]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 8003f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fa2:	4a6e      	ldr	r2, [pc, #440]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 8003fa4:	f043 0301 	orr.w	r3, r3, #1
 8003fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fac:	4b6b      	ldr	r3, [pc, #428]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 8003fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fba:	4b68      	ldr	r3, [pc, #416]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 8003fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fc0:	4a66      	ldr	r2, [pc, #408]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 8003fc2:	f043 0302 	orr.w	r3, r3, #2
 8003fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fca:	4b64      	ldr	r3, [pc, #400]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 8003fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	623b      	str	r3, [r7, #32]
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003fd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fea:	2301      	movs	r3, #1
 8003fec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	485a      	ldr	r0, [pc, #360]	; (8004160 <HAL_TIM_Encoder_MspInit+0x204>)
 8003ff6:	f003 fcf5 	bl	80079e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003ffa:	2308      	movs	r3, #8
 8003ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffe:	2302      	movs	r3, #2
 8004000:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004002:	2300      	movs	r3, #0
 8004004:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004006:	2300      	movs	r3, #0
 8004008:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800400a:	2301      	movs	r3, #1
 800400c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800400e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004012:	4619      	mov	r1, r3
 8004014:	4853      	ldr	r0, [pc, #332]	; (8004164 <HAL_TIM_Encoder_MspInit+0x208>)
 8004016:	f003 fce5 	bl	80079e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800401a:	e09b      	b.n	8004154 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a51      	ldr	r2, [pc, #324]	; (8004168 <HAL_TIM_Encoder_MspInit+0x20c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d12e      	bne.n	8004084 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004026:	4b4d      	ldr	r3, [pc, #308]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 8004028:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800402c:	4a4b      	ldr	r2, [pc, #300]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 800402e:	f043 0302 	orr.w	r3, r3, #2
 8004032:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004036:	4b49      	ldr	r3, [pc, #292]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 8004038:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	61fb      	str	r3, [r7, #28]
 8004042:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004044:	4b45      	ldr	r3, [pc, #276]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 8004046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800404a:	4a44      	ldr	r2, [pc, #272]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 800404c:	f043 0302 	orr.w	r3, r3, #2
 8004050:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004054:	4b41      	ldr	r3, [pc, #260]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 8004056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004062:	2330      	movs	r3, #48	; 0x30
 8004064:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004066:	2302      	movs	r3, #2
 8004068:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406a:	2300      	movs	r3, #0
 800406c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800406e:	2300      	movs	r3, #0
 8004070:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004072:	2302      	movs	r3, #2
 8004074:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004076:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800407a:	4619      	mov	r1, r3
 800407c:	4839      	ldr	r0, [pc, #228]	; (8004164 <HAL_TIM_Encoder_MspInit+0x208>)
 800407e:	f003 fcb1 	bl	80079e4 <HAL_GPIO_Init>
}
 8004082:	e067      	b.n	8004154 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a38      	ldr	r2, [pc, #224]	; (800416c <HAL_TIM_Encoder_MspInit+0x210>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d12f      	bne.n	80040ee <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800408e:	4b33      	ldr	r3, [pc, #204]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 8004090:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004094:	4a31      	ldr	r2, [pc, #196]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 8004096:	f043 0304 	orr.w	r3, r3, #4
 800409a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800409e:	4b2f      	ldr	r3, [pc, #188]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 80040a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040ac:	4b2b      	ldr	r3, [pc, #172]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 80040ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040b2:	4a2a      	ldr	r2, [pc, #168]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 80040b4:	f043 0308 	orr.w	r3, r3, #8
 80040b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040bc:	4b27      	ldr	r3, [pc, #156]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 80040be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80040ca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80040ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d0:	2302      	movs	r3, #2
 80040d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d8:	2300      	movs	r3, #0
 80040da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80040dc:	2302      	movs	r3, #2
 80040de:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040e4:	4619      	mov	r1, r3
 80040e6:	4822      	ldr	r0, [pc, #136]	; (8004170 <HAL_TIM_Encoder_MspInit+0x214>)
 80040e8:	f003 fc7c 	bl	80079e4 <HAL_GPIO_Init>
}
 80040ec:	e032      	b.n	8004154 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a20      	ldr	r2, [pc, #128]	; (8004174 <HAL_TIM_Encoder_MspInit+0x218>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d12d      	bne.n	8004154 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80040f8:	4b18      	ldr	r3, [pc, #96]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 80040fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040fe:	4a17      	ldr	r2, [pc, #92]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 8004100:	f043 0308 	orr.w	r3, r3, #8
 8004104:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004108:	4b14      	ldr	r3, [pc, #80]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 800410a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004116:	4b11      	ldr	r3, [pc, #68]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 8004118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800411c:	4a0f      	ldr	r2, [pc, #60]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 800411e:	f043 0301 	orr.w	r3, r3, #1
 8004122:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004126:	4b0d      	ldr	r3, [pc, #52]	; (800415c <HAL_TIM_Encoder_MspInit+0x200>)
 8004128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	60bb      	str	r3, [r7, #8]
 8004132:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004134:	2303      	movs	r3, #3
 8004136:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004138:	2302      	movs	r3, #2
 800413a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413c:	2300      	movs	r3, #0
 800413e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004140:	2300      	movs	r3, #0
 8004142:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004144:	2302      	movs	r3, #2
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004148:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800414c:	4619      	mov	r1, r3
 800414e:	4804      	ldr	r0, [pc, #16]	; (8004160 <HAL_TIM_Encoder_MspInit+0x204>)
 8004150:	f003 fc48 	bl	80079e4 <HAL_GPIO_Init>
}
 8004154:	bf00      	nop
 8004156:	3740      	adds	r7, #64	; 0x40
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	58024400 	.word	0x58024400
 8004160:	58020000 	.word	0x58020000
 8004164:	58020400 	.word	0x58020400
 8004168:	40000400 	.word	0x40000400
 800416c:	40000800 	.word	0x40000800
 8004170:	58020c00 	.word	0x58020c00
 8004174:	40000c00 	.word	0x40000c00

08004178 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a1d      	ldr	r2, [pc, #116]	; (80041fc <HAL_TIM_PWM_MspInit+0x84>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d117      	bne.n	80041ba <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800418a:	4b1d      	ldr	r3, [pc, #116]	; (8004200 <HAL_TIM_PWM_MspInit+0x88>)
 800418c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004190:	4a1b      	ldr	r2, [pc, #108]	; (8004200 <HAL_TIM_PWM_MspInit+0x88>)
 8004192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004196:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800419a:	4b19      	ldr	r3, [pc, #100]	; (8004200 <HAL_TIM_PWM_MspInit+0x88>)
 800419c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80041a8:	2200      	movs	r2, #0
 80041aa:	2100      	movs	r1, #0
 80041ac:	202b      	movs	r0, #43	; 0x2b
 80041ae:	f000 fdaa 	bl	8004d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80041b2:	202b      	movs	r0, #43	; 0x2b
 80041b4:	f000 fdc1 	bl	8004d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80041b8:	e01b      	b.n	80041f2 <HAL_TIM_PWM_MspInit+0x7a>
  else if(htim_pwm->Instance==TIM15)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a11      	ldr	r2, [pc, #68]	; (8004204 <HAL_TIM_PWM_MspInit+0x8c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d116      	bne.n	80041f2 <HAL_TIM_PWM_MspInit+0x7a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80041c4:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <HAL_TIM_PWM_MspInit+0x88>)
 80041c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041ca:	4a0d      	ldr	r2, [pc, #52]	; (8004200 <HAL_TIM_PWM_MspInit+0x88>)
 80041cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80041d4:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <HAL_TIM_PWM_MspInit+0x88>)
 80041d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041de:	60bb      	str	r3, [r7, #8]
 80041e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80041e2:	2200      	movs	r2, #0
 80041e4:	2100      	movs	r1, #0
 80041e6:	2074      	movs	r0, #116	; 0x74
 80041e8:	f000 fd8d 	bl	8004d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80041ec:	2074      	movs	r0, #116	; 0x74
 80041ee:	f000 fda4 	bl	8004d3a <HAL_NVIC_EnableIRQ>
}
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40001800 	.word	0x40001800
 8004200:	58024400 	.word	0x58024400
 8004204:	40014000 	.word	0x40014000

08004208 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a0e      	ldr	r2, [pc, #56]	; (8004250 <HAL_TIM_Base_MspInit+0x48>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d116      	bne.n	8004248 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800421a:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <HAL_TIM_Base_MspInit+0x4c>)
 800421c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004220:	4a0c      	ldr	r2, [pc, #48]	; (8004254 <HAL_TIM_Base_MspInit+0x4c>)
 8004222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004226:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800422a:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <HAL_TIM_Base_MspInit+0x4c>)
 800422c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004238:	2200      	movs	r2, #0
 800423a:	2100      	movs	r1, #0
 800423c:	202c      	movs	r0, #44	; 0x2c
 800423e:	f000 fd62 	bl	8004d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004242:	202c      	movs	r0, #44	; 0x2c
 8004244:	f000 fd79 	bl	8004d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8004248:	bf00      	nop
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40001c00 	.word	0x40001c00
 8004254:	58024400 	.word	0x58024400

08004258 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08a      	sub	sp, #40	; 0x28
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004260:	f107 0314 	add.w	r3, r7, #20
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	605a      	str	r2, [r3, #4]
 800426a:	609a      	str	r2, [r3, #8]
 800426c:	60da      	str	r2, [r3, #12]
 800426e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a25      	ldr	r2, [pc, #148]	; (800430c <HAL_TIM_MspPostInit+0xb4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d120      	bne.n	80042bc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800427a:	4b25      	ldr	r3, [pc, #148]	; (8004310 <HAL_TIM_MspPostInit+0xb8>)
 800427c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004280:	4a23      	ldr	r2, [pc, #140]	; (8004310 <HAL_TIM_MspPostInit+0xb8>)
 8004282:	f043 0302 	orr.w	r3, r3, #2
 8004286:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800428a:	4b21      	ldr	r3, [pc, #132]	; (8004310 <HAL_TIM_MspPostInit+0xb8>)
 800428c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004298:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800429c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800429e:	2302      	movs	r3, #2
 80042a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042a6:	2300      	movs	r3, #0
 80042a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80042aa:	2302      	movs	r3, #2
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ae:	f107 0314 	add.w	r3, r7, #20
 80042b2:	4619      	mov	r1, r3
 80042b4:	4817      	ldr	r0, [pc, #92]	; (8004314 <HAL_TIM_MspPostInit+0xbc>)
 80042b6:	f003 fb95 	bl	80079e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80042ba:	e023      	b.n	8004304 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM15)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a15      	ldr	r2, [pc, #84]	; (8004318 <HAL_TIM_MspPostInit+0xc0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d11e      	bne.n	8004304 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042c6:	4b12      	ldr	r3, [pc, #72]	; (8004310 <HAL_TIM_MspPostInit+0xb8>)
 80042c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042cc:	4a10      	ldr	r2, [pc, #64]	; (8004310 <HAL_TIM_MspPostInit+0xb8>)
 80042ce:	f043 0310 	orr.w	r3, r3, #16
 80042d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042d6:	4b0e      	ldr	r3, [pc, #56]	; (8004310 <HAL_TIM_MspPostInit+0xb8>)
 80042d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80042e4:	2360      	movs	r3, #96	; 0x60
 80042e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e8:	2302      	movs	r3, #2
 80042ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f0:	2300      	movs	r3, #0
 80042f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80042f4:	2304      	movs	r3, #4
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042f8:	f107 0314 	add.w	r3, r7, #20
 80042fc:	4619      	mov	r1, r3
 80042fe:	4807      	ldr	r0, [pc, #28]	; (800431c <HAL_TIM_MspPostInit+0xc4>)
 8004300:	f003 fb70 	bl	80079e4 <HAL_GPIO_Init>
}
 8004304:	bf00      	nop
 8004306:	3728      	adds	r7, #40	; 0x28
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40001800 	.word	0x40001800
 8004310:	58024400 	.word	0x58024400
 8004314:	58020400 	.word	0x58020400
 8004318:	40014000 	.word	0x40014000
 800431c:	58021000 	.word	0x58021000

08004320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b0b6      	sub	sp, #216	; 0xd8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004328:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	605a      	str	r2, [r3, #4]
 8004332:	609a      	str	r2, [r3, #8]
 8004334:	60da      	str	r2, [r3, #12]
 8004336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004338:	f107 0310 	add.w	r3, r7, #16
 800433c:	22b4      	movs	r2, #180	; 0xb4
 800433e:	2100      	movs	r1, #0
 8004340:	4618      	mov	r0, r3
 8004342:	f009 fc39 	bl	800dbb8 <memset>
  if(huart->Instance==USART1)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a57      	ldr	r2, [pc, #348]	; (80044a8 <HAL_UART_MspInit+0x188>)
 800434c:	4293      	cmp	r3, r2
 800434e:	f040 80a7 	bne.w	80044a0 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004352:	2301      	movs	r3, #1
 8004354:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004356:	2300      	movs	r3, #0
 8004358:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800435c:	f107 0310 	add.w	r3, r7, #16
 8004360:	4618      	mov	r0, r3
 8004362:	f004 fc75 	bl	8008c50 <HAL_RCCEx_PeriphCLKConfig>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800436c:	f7fc ff9e 	bl	80012ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004370:	4b4e      	ldr	r3, [pc, #312]	; (80044ac <HAL_UART_MspInit+0x18c>)
 8004372:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004376:	4a4d      	ldr	r2, [pc, #308]	; (80044ac <HAL_UART_MspInit+0x18c>)
 8004378:	f043 0310 	orr.w	r3, r3, #16
 800437c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004380:	4b4a      	ldr	r3, [pc, #296]	; (80044ac <HAL_UART_MspInit+0x18c>)
 8004382:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800438e:	4b47      	ldr	r3, [pc, #284]	; (80044ac <HAL_UART_MspInit+0x18c>)
 8004390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004394:	4a45      	ldr	r2, [pc, #276]	; (80044ac <HAL_UART_MspInit+0x18c>)
 8004396:	f043 0301 	orr.w	r3, r3, #1
 800439a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800439e:	4b43      	ldr	r3, [pc, #268]	; (80044ac <HAL_UART_MspInit+0x18c>)
 80043a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	60bb      	str	r3, [r7, #8]
 80043aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80043ac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80043b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b4:	2302      	movs	r3, #2
 80043b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c0:	2300      	movs	r3, #0
 80043c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043c6:	2307      	movs	r3, #7
 80043c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80043d0:	4619      	mov	r1, r3
 80043d2:	4837      	ldr	r0, [pc, #220]	; (80044b0 <HAL_UART_MspInit+0x190>)
 80043d4:	f003 fb06 	bl	80079e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80043d8:	4b36      	ldr	r3, [pc, #216]	; (80044b4 <HAL_UART_MspInit+0x194>)
 80043da:	4a37      	ldr	r2, [pc, #220]	; (80044b8 <HAL_UART_MspInit+0x198>)
 80043dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80043de:	4b35      	ldr	r3, [pc, #212]	; (80044b4 <HAL_UART_MspInit+0x194>)
 80043e0:	2229      	movs	r2, #41	; 0x29
 80043e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043e4:	4b33      	ldr	r3, [pc, #204]	; (80044b4 <HAL_UART_MspInit+0x194>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043ea:	4b32      	ldr	r3, [pc, #200]	; (80044b4 <HAL_UART_MspInit+0x194>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043f0:	4b30      	ldr	r3, [pc, #192]	; (80044b4 <HAL_UART_MspInit+0x194>)
 80043f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043f8:	4b2e      	ldr	r3, [pc, #184]	; (80044b4 <HAL_UART_MspInit+0x194>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043fe:	4b2d      	ldr	r3, [pc, #180]	; (80044b4 <HAL_UART_MspInit+0x194>)
 8004400:	2200      	movs	r2, #0
 8004402:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004404:	4b2b      	ldr	r3, [pc, #172]	; (80044b4 <HAL_UART_MspInit+0x194>)
 8004406:	2200      	movs	r2, #0
 8004408:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800440a:	4b2a      	ldr	r3, [pc, #168]	; (80044b4 <HAL_UART_MspInit+0x194>)
 800440c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004410:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004412:	4b28      	ldr	r3, [pc, #160]	; (80044b4 <HAL_UART_MspInit+0x194>)
 8004414:	2200      	movs	r2, #0
 8004416:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004418:	4826      	ldr	r0, [pc, #152]	; (80044b4 <HAL_UART_MspInit+0x194>)
 800441a:	f000 fca9 	bl	8004d70 <HAL_DMA_Init>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8004424:	f7fc ff42 	bl	80012ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a22      	ldr	r2, [pc, #136]	; (80044b4 <HAL_UART_MspInit+0x194>)
 800442c:	67da      	str	r2, [r3, #124]	; 0x7c
 800442e:	4a21      	ldr	r2, [pc, #132]	; (80044b4 <HAL_UART_MspInit+0x194>)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8004434:	4b21      	ldr	r3, [pc, #132]	; (80044bc <HAL_UART_MspInit+0x19c>)
 8004436:	4a22      	ldr	r2, [pc, #136]	; (80044c0 <HAL_UART_MspInit+0x1a0>)
 8004438:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800443a:	4b20      	ldr	r3, [pc, #128]	; (80044bc <HAL_UART_MspInit+0x19c>)
 800443c:	222a      	movs	r2, #42	; 0x2a
 800443e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004440:	4b1e      	ldr	r3, [pc, #120]	; (80044bc <HAL_UART_MspInit+0x19c>)
 8004442:	2240      	movs	r2, #64	; 0x40
 8004444:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004446:	4b1d      	ldr	r3, [pc, #116]	; (80044bc <HAL_UART_MspInit+0x19c>)
 8004448:	2200      	movs	r2, #0
 800444a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800444c:	4b1b      	ldr	r3, [pc, #108]	; (80044bc <HAL_UART_MspInit+0x19c>)
 800444e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004452:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004454:	4b19      	ldr	r3, [pc, #100]	; (80044bc <HAL_UART_MspInit+0x19c>)
 8004456:	2200      	movs	r2, #0
 8004458:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800445a:	4b18      	ldr	r3, [pc, #96]	; (80044bc <HAL_UART_MspInit+0x19c>)
 800445c:	2200      	movs	r2, #0
 800445e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004460:	4b16      	ldr	r3, [pc, #88]	; (80044bc <HAL_UART_MspInit+0x19c>)
 8004462:	2200      	movs	r2, #0
 8004464:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004466:	4b15      	ldr	r3, [pc, #84]	; (80044bc <HAL_UART_MspInit+0x19c>)
 8004468:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800446c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800446e:	4b13      	ldr	r3, [pc, #76]	; (80044bc <HAL_UART_MspInit+0x19c>)
 8004470:	2200      	movs	r2, #0
 8004472:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004474:	4811      	ldr	r0, [pc, #68]	; (80044bc <HAL_UART_MspInit+0x19c>)
 8004476:	f000 fc7b 	bl	8004d70 <HAL_DMA_Init>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8004480:	f7fc ff14 	bl	80012ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a0d      	ldr	r2, [pc, #52]	; (80044bc <HAL_UART_MspInit+0x19c>)
 8004488:	679a      	str	r2, [r3, #120]	; 0x78
 800448a:	4a0c      	ldr	r2, [pc, #48]	; (80044bc <HAL_UART_MspInit+0x19c>)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004490:	2200      	movs	r2, #0
 8004492:	2100      	movs	r1, #0
 8004494:	2025      	movs	r0, #37	; 0x25
 8004496:	f000 fc36 	bl	8004d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800449a:	2025      	movs	r0, #37	; 0x25
 800449c:	f000 fc4d 	bl	8004d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80044a0:	bf00      	nop
 80044a2:	37d8      	adds	r7, #216	; 0xd8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40011000 	.word	0x40011000
 80044ac:	58024400 	.word	0x58024400
 80044b0:	58020000 	.word	0x58020000
 80044b4:	24000580 	.word	0x24000580
 80044b8:	40020010 	.word	0x40020010
 80044bc:	240005f8 	.word	0x240005f8
 80044c0:	40020028 	.word	0x40020028

080044c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044c8:	e7fe      	b.n	80044c8 <NMI_Handler+0x4>

080044ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044ca:	b480      	push	{r7}
 80044cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044ce:	e7fe      	b.n	80044ce <HardFault_Handler+0x4>

080044d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044d4:	e7fe      	b.n	80044d4 <MemManage_Handler+0x4>

080044d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044d6:	b480      	push	{r7}
 80044d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044da:	e7fe      	b.n	80044da <BusFault_Handler+0x4>

080044dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044e0:	e7fe      	b.n	80044e0 <UsageFault_Handler+0x4>

080044e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044e2:	b480      	push	{r7}
 80044e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044e6:	bf00      	nop
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044fe:	b480      	push	{r7}
 8004500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004502:	bf00      	nop
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004510:	f000 fafe 	bl	8004b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004514:	bf00      	nop
 8004516:	bd80      	pop	{r7, pc}

08004518 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800451c:	bf00      	nop
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
	...

08004528 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800452c:	4802      	ldr	r0, [pc, #8]	; (8004538 <DMA1_Stream0_IRQHandler+0x10>)
 800452e:	f001 ff47 	bl	80063c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004532:	bf00      	nop
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	24000580 	.word	0x24000580

0800453c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004540:	4802      	ldr	r0, [pc, #8]	; (800454c <DMA1_Stream1_IRQHandler+0x10>)
 8004542:	f001 ff3d 	bl	80063c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004546:	bf00      	nop
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	240005f8 	.word	0x240005f8

08004550 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004554:	4802      	ldr	r0, [pc, #8]	; (8004560 <USART1_IRQHandler+0x10>)
 8004556:	f007 faf9 	bl	800bb4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800455a:	bf00      	nop
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	240004f0 	.word	0x240004f0

08004564 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8004568:	4802      	ldr	r0, [pc, #8]	; (8004574 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800456a:	f006 fa5f 	bl	800aa2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800456e:	bf00      	nop
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	2400040c 	.word	0x2400040c

08004578 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800457c:	4802      	ldr	r0, [pc, #8]	; (8004588 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800457e:	f006 fa55 	bl	800aa2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004582:	bf00      	nop
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	24000458 	.word	0x24000458

0800458c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8004590:	4802      	ldr	r0, [pc, #8]	; (800459c <TIM15_IRQHandler+0x10>)
 8004592:	f006 fa4b 	bl	800aa2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8004596:	bf00      	nop
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	240004a4 	.word	0x240004a4

080045a0 <_ZN3STM5setupEv>:
#include "stm_main.h"
#include "dc_motor.h"

void STM::setup(void){
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
	DC_motor_init();
 80045a4:	f7fc f86a 	bl	800067c <_Z13DC_motor_initv>
}
 80045a8:	bf00      	nop
 80045aa:	bd80      	pop	{r7, pc}

080045ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
	return 1;
 80045b0:	2301      	movs	r3, #1
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <_kill>:

int _kill(int pid, int sig)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80045c6:	f009 fabf 	bl	800db48 <__errno>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2216      	movs	r2, #22
 80045ce:	601a      	str	r2, [r3, #0]
	return -1;
 80045d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <_exit>:

void _exit (int status)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80045e4:	f04f 31ff 	mov.w	r1, #4294967295
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff ffe7 	bl	80045bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80045ee:	e7fe      	b.n	80045ee <_exit+0x12>

080045f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045f8:	4a14      	ldr	r2, [pc, #80]	; (800464c <_sbrk+0x5c>)
 80045fa:	4b15      	ldr	r3, [pc, #84]	; (8004650 <_sbrk+0x60>)
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004604:	4b13      	ldr	r3, [pc, #76]	; (8004654 <_sbrk+0x64>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d102      	bne.n	8004612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800460c:	4b11      	ldr	r3, [pc, #68]	; (8004654 <_sbrk+0x64>)
 800460e:	4a12      	ldr	r2, [pc, #72]	; (8004658 <_sbrk+0x68>)
 8004610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004612:	4b10      	ldr	r3, [pc, #64]	; (8004654 <_sbrk+0x64>)
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4413      	add	r3, r2
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	429a      	cmp	r2, r3
 800461e:	d207      	bcs.n	8004630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004620:	f009 fa92 	bl	800db48 <__errno>
 8004624:	4603      	mov	r3, r0
 8004626:	220c      	movs	r2, #12
 8004628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800462a:	f04f 33ff 	mov.w	r3, #4294967295
 800462e:	e009      	b.n	8004644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004630:	4b08      	ldr	r3, [pc, #32]	; (8004654 <_sbrk+0x64>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004636:	4b07      	ldr	r3, [pc, #28]	; (8004654 <_sbrk+0x64>)
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4413      	add	r3, r2
 800463e:	4a05      	ldr	r2, [pc, #20]	; (8004654 <_sbrk+0x64>)
 8004640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004642:	68fb      	ldr	r3, [r7, #12]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	24050000 	.word	0x24050000
 8004650:	00000400 	.word	0x00000400
 8004654:	240010e8 	.word	0x240010e8
 8004658:	24001100 	.word	0x24001100

0800465c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004660:	4b32      	ldr	r3, [pc, #200]	; (800472c <SystemInit+0xd0>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004666:	4a31      	ldr	r2, [pc, #196]	; (800472c <SystemInit+0xd0>)
 8004668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800466c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004670:	4b2f      	ldr	r3, [pc, #188]	; (8004730 <SystemInit+0xd4>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 030f 	and.w	r3, r3, #15
 8004678:	2b06      	cmp	r3, #6
 800467a:	d807      	bhi.n	800468c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800467c:	4b2c      	ldr	r3, [pc, #176]	; (8004730 <SystemInit+0xd4>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f023 030f 	bic.w	r3, r3, #15
 8004684:	4a2a      	ldr	r2, [pc, #168]	; (8004730 <SystemInit+0xd4>)
 8004686:	f043 0307 	orr.w	r3, r3, #7
 800468a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800468c:	4b29      	ldr	r3, [pc, #164]	; (8004734 <SystemInit+0xd8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a28      	ldr	r2, [pc, #160]	; (8004734 <SystemInit+0xd8>)
 8004692:	f043 0301 	orr.w	r3, r3, #1
 8004696:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004698:	4b26      	ldr	r3, [pc, #152]	; (8004734 <SystemInit+0xd8>)
 800469a:	2200      	movs	r2, #0
 800469c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800469e:	4b25      	ldr	r3, [pc, #148]	; (8004734 <SystemInit+0xd8>)
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4924      	ldr	r1, [pc, #144]	; (8004734 <SystemInit+0xd8>)
 80046a4:	4b24      	ldr	r3, [pc, #144]	; (8004738 <SystemInit+0xdc>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80046aa:	4b21      	ldr	r3, [pc, #132]	; (8004730 <SystemInit+0xd4>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d007      	beq.n	80046c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80046b6:	4b1e      	ldr	r3, [pc, #120]	; (8004730 <SystemInit+0xd4>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f023 030f 	bic.w	r3, r3, #15
 80046be:	4a1c      	ldr	r2, [pc, #112]	; (8004730 <SystemInit+0xd4>)
 80046c0:	f043 0307 	orr.w	r3, r3, #7
 80046c4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80046c6:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <SystemInit+0xd8>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80046cc:	4b19      	ldr	r3, [pc, #100]	; (8004734 <SystemInit+0xd8>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80046d2:	4b18      	ldr	r3, [pc, #96]	; (8004734 <SystemInit+0xd8>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80046d8:	4b16      	ldr	r3, [pc, #88]	; (8004734 <SystemInit+0xd8>)
 80046da:	4a18      	ldr	r2, [pc, #96]	; (800473c <SystemInit+0xe0>)
 80046dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80046de:	4b15      	ldr	r3, [pc, #84]	; (8004734 <SystemInit+0xd8>)
 80046e0:	4a17      	ldr	r2, [pc, #92]	; (8004740 <SystemInit+0xe4>)
 80046e2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80046e4:	4b13      	ldr	r3, [pc, #76]	; (8004734 <SystemInit+0xd8>)
 80046e6:	4a17      	ldr	r2, [pc, #92]	; (8004744 <SystemInit+0xe8>)
 80046e8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80046ea:	4b12      	ldr	r3, [pc, #72]	; (8004734 <SystemInit+0xd8>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80046f0:	4b10      	ldr	r3, [pc, #64]	; (8004734 <SystemInit+0xd8>)
 80046f2:	4a14      	ldr	r2, [pc, #80]	; (8004744 <SystemInit+0xe8>)
 80046f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80046f6:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <SystemInit+0xd8>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80046fc:	4b0d      	ldr	r3, [pc, #52]	; (8004734 <SystemInit+0xd8>)
 80046fe:	4a11      	ldr	r2, [pc, #68]	; (8004744 <SystemInit+0xe8>)
 8004700:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004702:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <SystemInit+0xd8>)
 8004704:	2200      	movs	r2, #0
 8004706:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <SystemInit+0xd8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a09      	ldr	r2, [pc, #36]	; (8004734 <SystemInit+0xd8>)
 800470e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004712:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004714:	4b07      	ldr	r3, [pc, #28]	; (8004734 <SystemInit+0xd8>)
 8004716:	2200      	movs	r2, #0
 8004718:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <SystemInit+0xec>)
 800471c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004720:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004722:	bf00      	nop
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	e000ed00 	.word	0xe000ed00
 8004730:	52002000 	.word	0x52002000
 8004734:	58024400 	.word	0x58024400
 8004738:	eaf6ed7f 	.word	0xeaf6ed7f
 800473c:	02020200 	.word	0x02020200
 8004740:	01ff0000 	.word	0x01ff0000
 8004744:	01010280 	.word	0x01010280
 8004748:	52004000 	.word	0x52004000

0800474c <HAL_TIM_PeriodElapsedCallback>:
#define STEP_PIN_4 GPIO_PIN_9

//int ms=0;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM13) {
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a90      	ldr	r2, [pc, #576]	; (800499c <HAL_TIM_PeriodElapsedCallback+0x250>)
 800475a:	4293      	cmp	r3, r2
 800475c:	f040 811a 	bne.w	8004994 <HAL_TIM_PeriodElapsedCallback+0x248>
//		ms++;
//		if(ms%100==0) ROS::pub_car_vel();


		/*enc 1*/
		fr.CountNow = __HAL_TIM_GetCounter(&htim2);
 8004760:	4b8f      	ldr	r3, [pc, #572]	; (80049a0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	b29a      	uxth	r2, r3
 8004768:	4b8e      	ldr	r3, [pc, #568]	; (80049a4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800476a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		fr.PIDControl();
 800476e:	488d      	ldr	r0, [pc, #564]	; (80049a4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004770:	f7fc f80a 	bl	8000788 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim2,0);
 8004774:	4b8a      	ldr	r3, [pc, #552]	; (80049a0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2200      	movs	r2, #0
 800477a:	625a      	str	r2, [r3, #36]	; 0x24
		if (fr.PID >= 0) {
 800477c:	4b89      	ldr	r3, [pc, #548]	; (80049a4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800477e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004782:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478a:	db0b      	blt.n	80047a4 <HAL_TIM_PeriodElapsedCallback+0x58>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_SET);
 800478c:	2201      	movs	r2, #1
 800478e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004792:	4885      	ldr	r0, [pc, #532]	; (80049a8 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8004794:	f003 face 	bl	8007d34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_RESET);
 8004798:	2200      	movs	r2, #0
 800479a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800479e:	4882      	ldr	r0, [pc, #520]	; (80049a8 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80047a0:	f003 fac8 	bl	8007d34 <HAL_GPIO_WritePin>
		}
		if (fr.PID < 0) {
 80047a4:	4b7f      	ldr	r3, [pc, #508]	; (80049a4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80047a6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80047aa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80047ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b2:	d513      	bpl.n	80047dc <HAL_TIM_PeriodElapsedCallback+0x90>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_RESET);
 80047b4:	2200      	movs	r2, #0
 80047b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047ba:	487b      	ldr	r0, [pc, #492]	; (80049a8 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80047bc:	f003 faba 	bl	8007d34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_SET);
 80047c0:	2201      	movs	r2, #1
 80047c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047c6:	4878      	ldr	r0, [pc, #480]	; (80049a8 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80047c8:	f003 fab4 	bl	8007d34 <HAL_GPIO_WritePin>
			fr.PID = -fr.PID;
 80047cc:	4b75      	ldr	r3, [pc, #468]	; (80049a4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80047ce:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80047d2:	eeb1 7b47 	vneg.f64	d7, d7
 80047d6:	4b73      	ldr	r3, [pc, #460]	; (80049a4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80047d8:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, (int )fr.PID);
 80047dc:	4b71      	ldr	r3, [pc, #452]	; (80049a4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80047de:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80047e2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80047e6:	4b71      	ldr	r3, [pc, #452]	; (80049ac <HAL_TIM_PeriodElapsedCallback+0x260>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	ee17 2a90 	vmov	r2, s15
 80047ee:	639a      	str	r2, [r3, #56]	; 0x38

		/*enc 2*/
		fl.CountNow = __HAL_TIM_GetCounter(&htim5);
 80047f0:	4b6f      	ldr	r3, [pc, #444]	; (80049b0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	4b6e      	ldr	r3, [pc, #440]	; (80049b4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80047fa:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		fl.PIDControl();
 80047fe:	486d      	ldr	r0, [pc, #436]	; (80049b4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004800:	f7fb ffc2 	bl	8000788 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim5,0);
 8004804:	4b6a      	ldr	r3, [pc, #424]	; (80049b0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2200      	movs	r2, #0
 800480a:	625a      	str	r2, [r3, #36]	; 0x24
		if (fl.PID < 0) {
 800480c:	4b69      	ldr	r3, [pc, #420]	; (80049b4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800480e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004812:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800481a:	d50b      	bpl.n	8004834 <HAL_TIM_PeriodElapsedCallback+0xe8>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_SET);
 800481c:	2201      	movs	r2, #1
 800481e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004822:	4865      	ldr	r0, [pc, #404]	; (80049b8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004824:	f003 fa86 	bl	8007d34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_RESET);
 8004828:	2200      	movs	r2, #0
 800482a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800482e:	4862      	ldr	r0, [pc, #392]	; (80049b8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004830:	f003 fa80 	bl	8007d34 <HAL_GPIO_WritePin>
		}
		if (fl.PID >= 0) {
 8004834:	4b5f      	ldr	r3, [pc, #380]	; (80049b4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004836:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800483a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800483e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004842:	db13      	blt.n	800486c <HAL_TIM_PeriodElapsedCallback+0x120>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_RESET);
 8004844:	2200      	movs	r2, #0
 8004846:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800484a:	485b      	ldr	r0, [pc, #364]	; (80049b8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800484c:	f003 fa72 	bl	8007d34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_SET);
 8004850:	2201      	movs	r2, #1
 8004852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004856:	4858      	ldr	r0, [pc, #352]	; (80049b8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004858:	f003 fa6c 	bl	8007d34 <HAL_GPIO_WritePin>
			fl.PID = -fl.PID;
 800485c:	4b55      	ldr	r3, [pc, #340]	; (80049b4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800485e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004862:	eeb1 7b47 	vneg.f64	d7, d7
 8004866:	4b53      	ldr	r3, [pc, #332]	; (80049b4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004868:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, (int )fl.PID);
 800486c:	4b51      	ldr	r3, [pc, #324]	; (80049b4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800486e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004872:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004876:	4b4d      	ldr	r3, [pc, #308]	; (80049ac <HAL_TIM_PeriodElapsedCallback+0x260>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	ee17 2a90 	vmov	r2, s15
 800487e:	635a      	str	r2, [r3, #52]	; 0x34

		/*enc 3*/
		br.CountNow = __HAL_TIM_GetCounter(&htim3);
 8004880:	4b4e      	ldr	r3, [pc, #312]	; (80049bc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	b29a      	uxth	r2, r3
 8004888:	4b4d      	ldr	r3, [pc, #308]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800488a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		br.PIDControl();
 800488e:	484c      	ldr	r0, [pc, #304]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004890:	f7fb ff7a 	bl	8000788 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim3,0);
 8004894:	4b49      	ldr	r3, [pc, #292]	; (80049bc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2200      	movs	r2, #0
 800489a:	625a      	str	r2, [r3, #36]	; 0x24
		if (br.PID < 0) {
 800489c:	4b48      	ldr	r3, [pc, #288]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800489e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80048a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80048a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048aa:	d509      	bpl.n	80048c0 <HAL_TIM_PeriodElapsedCallback+0x174>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_SET);
 80048ac:	2201      	movs	r2, #1
 80048ae:	2104      	movs	r1, #4
 80048b0:	4844      	ldr	r0, [pc, #272]	; (80049c4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80048b2:	f003 fa3f 	bl	8007d34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_RESET);
 80048b6:	2200      	movs	r2, #0
 80048b8:	2108      	movs	r1, #8
 80048ba:	4842      	ldr	r0, [pc, #264]	; (80049c4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80048bc:	f003 fa3a 	bl	8007d34 <HAL_GPIO_WritePin>
		}
		if (br.PID >= 0) {
 80048c0:	4b3f      	ldr	r3, [pc, #252]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80048c2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80048c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80048ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ce:	db11      	blt.n	80048f4 <HAL_TIM_PeriodElapsedCallback+0x1a8>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_RESET);
 80048d0:	2200      	movs	r2, #0
 80048d2:	2104      	movs	r1, #4
 80048d4:	483b      	ldr	r0, [pc, #236]	; (80049c4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80048d6:	f003 fa2d 	bl	8007d34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_SET);
 80048da:	2201      	movs	r2, #1
 80048dc:	2108      	movs	r1, #8
 80048de:	4839      	ldr	r0, [pc, #228]	; (80049c4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80048e0:	f003 fa28 	bl	8007d34 <HAL_GPIO_WritePin>
			br.PID = -br.PID;
 80048e4:	4b36      	ldr	r3, [pc, #216]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80048e6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80048ea:	eeb1 7b47 	vneg.f64	d7, d7
 80048ee:	4b34      	ldr	r3, [pc, #208]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80048f0:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, (int )br.PID);
 80048f4:	4b32      	ldr	r3, [pc, #200]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80048f6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80048fa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80048fe:	4b32      	ldr	r3, [pc, #200]	; (80049c8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	ee17 2a90 	vmov	r2, s15
 8004906:	635a      	str	r2, [r3, #52]	; 0x34

		/*enc 4*/
		bl.CountNow = __HAL_TIM_GetCounter(&htim4);
 8004908:	4b30      	ldr	r3, [pc, #192]	; (80049cc <HAL_TIM_PeriodElapsedCallback+0x280>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	b29a      	uxth	r2, r3
 8004910:	4b2f      	ldr	r3, [pc, #188]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004912:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		bl.PIDControl();
 8004916:	482e      	ldr	r0, [pc, #184]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004918:	f7fb ff36 	bl	8000788 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim4,0);
 800491c:	4b2b      	ldr	r3, [pc, #172]	; (80049cc <HAL_TIM_PeriodElapsedCallback+0x280>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2200      	movs	r2, #0
 8004922:	625a      	str	r2, [r3, #36]	; 0x24
		if (bl.PID >= 0) {
 8004924:	4b2a      	ldr	r3, [pc, #168]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004926:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800492a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800492e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004932:	db0a      	blt.n	800494a <HAL_TIM_PeriodElapsedCallback+0x1fe>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_SET);
 8004934:	2201      	movs	r2, #1
 8004936:	2110      	movs	r1, #16
 8004938:	4822      	ldr	r0, [pc, #136]	; (80049c4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800493a:	f003 f9fb 	bl	8007d34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_RESET);
 800493e:	2200      	movs	r2, #0
 8004940:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004944:	4823      	ldr	r0, [pc, #140]	; (80049d4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004946:	f003 f9f5 	bl	8007d34 <HAL_GPIO_WritePin>
		}
		if (bl.PID < 0) {
 800494a:	4b21      	ldr	r3, [pc, #132]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800494c:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004950:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004958:	d512      	bpl.n	8004980 <HAL_TIM_PeriodElapsedCallback+0x234>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_RESET);
 800495a:	2200      	movs	r2, #0
 800495c:	2110      	movs	r1, #16
 800495e:	4819      	ldr	r0, [pc, #100]	; (80049c4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8004960:	f003 f9e8 	bl	8007d34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_SET);
 8004964:	2201      	movs	r2, #1
 8004966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800496a:	481a      	ldr	r0, [pc, #104]	; (80049d4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800496c:	f003 f9e2 	bl	8007d34 <HAL_GPIO_WritePin>
			bl.PID = -bl.PID;
 8004970:	4b17      	ldr	r3, [pc, #92]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004972:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004976:	eeb1 7b47 	vneg.f64	d7, d7
 800497a:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800497c:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, (int )bl.PID);
 8004980:	4b13      	ldr	r3, [pc, #76]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004982:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004986:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800498a:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	ee17 2a90 	vmov	r2, s15
 8004992:	639a      	str	r2, [r3, #56]	; 0x38


	}

}
 8004994:	bf00      	nop
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40001c00 	.word	0x40001c00
 80049a0:	240002dc 	.word	0x240002dc
 80049a4:	24000098 	.word	0x24000098
 80049a8:	58020c00 	.word	0x58020c00
 80049ac:	2400040c 	.word	0x2400040c
 80049b0:	240003c0 	.word	0x240003c0
 80049b4:	24000128 	.word	0x24000128
 80049b8:	58020400 	.word	0x58020400
 80049bc:	24000328 	.word	0x24000328
 80049c0:	240001b8 	.word	0x240001b8
 80049c4:	58021000 	.word	0x58021000
 80049c8:	240004a4 	.word	0x240004a4
 80049cc:	24000374 	.word	0x24000374
 80049d0:	24000248 	.word	0x24000248
 80049d4:	58020800 	.word	0x58020800

080049d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80049d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80049dc:	f7ff fe3e 	bl	800465c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049e0:	480c      	ldr	r0, [pc, #48]	; (8004a14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80049e2:	490d      	ldr	r1, [pc, #52]	; (8004a18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80049e4:	4a0d      	ldr	r2, [pc, #52]	; (8004a1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80049e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049e8:	e002      	b.n	80049f0 <LoopCopyDataInit>

080049ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049ee:	3304      	adds	r3, #4

080049f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049f4:	d3f9      	bcc.n	80049ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049f6:	4a0a      	ldr	r2, [pc, #40]	; (8004a20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80049f8:	4c0a      	ldr	r4, [pc, #40]	; (8004a24 <LoopFillZerobss+0x22>)
  movs r3, #0
 80049fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049fc:	e001      	b.n	8004a02 <LoopFillZerobss>

080049fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a00:	3204      	adds	r2, #4

08004a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a04:	d3fb      	bcc.n	80049fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a06:	f009 f8a5 	bl	800db54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a0a:	f7fc f804 	bl	8000a16 <main>
  bx  lr
 8004a0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004a10:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004a14:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004a18:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8004a1c:	0800e208 	.word	0x0800e208
  ldr r2, =_sbss
 8004a20:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8004a24:	24001100 	.word	0x24001100

08004a28 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a28:	e7fe      	b.n	8004a28 <ADC3_IRQHandler>
	...

08004a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a32:	2003      	movs	r0, #3
 8004a34:	f000 f95c 	bl	8004cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a38:	f003 ff34 	bl	80088a4 <HAL_RCC_GetSysClockFreq>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	4b15      	ldr	r3, [pc, #84]	; (8004a94 <HAL_Init+0x68>)
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	0a1b      	lsrs	r3, r3, #8
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	4913      	ldr	r1, [pc, #76]	; (8004a98 <HAL_Init+0x6c>)
 8004a4a:	5ccb      	ldrb	r3, [r1, r3]
 8004a4c:	f003 031f 	and.w	r3, r3, #31
 8004a50:	fa22 f303 	lsr.w	r3, r2, r3
 8004a54:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a56:	4b0f      	ldr	r3, [pc, #60]	; (8004a94 <HAL_Init+0x68>)
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	4a0e      	ldr	r2, [pc, #56]	; (8004a98 <HAL_Init+0x6c>)
 8004a60:	5cd3      	ldrb	r3, [r2, r3]
 8004a62:	f003 031f 	and.w	r3, r3, #31
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6c:	4a0b      	ldr	r2, [pc, #44]	; (8004a9c <HAL_Init+0x70>)
 8004a6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a70:	4a0b      	ldr	r2, [pc, #44]	; (8004aa0 <HAL_Init+0x74>)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a76:	200f      	movs	r0, #15
 8004a78:	f000 f814 	bl	8004aa4 <HAL_InitTick>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e002      	b.n	8004a8c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004a86:	f7ff fa49 	bl	8003f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	58024400 	.word	0x58024400
 8004a98:	0800e1a8 	.word	0x0800e1a8
 8004a9c:	24000004 	.word	0x24000004
 8004aa0:	24000000 	.word	0x24000000

08004aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004aac:	4b15      	ldr	r3, [pc, #84]	; (8004b04 <HAL_InitTick+0x60>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e021      	b.n	8004afc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004ab8:	4b13      	ldr	r3, [pc, #76]	; (8004b08 <HAL_InitTick+0x64>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	4b11      	ldr	r3, [pc, #68]	; (8004b04 <HAL_InitTick+0x60>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 f941 	bl	8004d56 <HAL_SYSTICK_Config>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e00e      	b.n	8004afc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b0f      	cmp	r3, #15
 8004ae2:	d80a      	bhi.n	8004afa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aec:	f000 f90b 	bl	8004d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004af0:	4a06      	ldr	r2, [pc, #24]	; (8004b0c <HAL_InitTick+0x68>)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	e000      	b.n	8004afc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	2400000c 	.word	0x2400000c
 8004b08:	24000000 	.word	0x24000000
 8004b0c:	24000008 	.word	0x24000008

08004b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004b14:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <HAL_IncTick+0x20>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <HAL_IncTick+0x24>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4413      	add	r3, r2
 8004b20:	4a04      	ldr	r2, [pc, #16]	; (8004b34 <HAL_IncTick+0x24>)
 8004b22:	6013      	str	r3, [r2, #0]
}
 8004b24:	bf00      	nop
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	2400000c 	.word	0x2400000c
 8004b34:	240010ec 	.word	0x240010ec

08004b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b3c:	4b03      	ldr	r3, [pc, #12]	; (8004b4c <HAL_GetTick+0x14>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	240010ec 	.word	0x240010ec

08004b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b60:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <__NVIC_SetPriorityGrouping+0x40>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <__NVIC_SetPriorityGrouping+0x44>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b7e:	4a04      	ldr	r2, [pc, #16]	; (8004b90 <__NVIC_SetPriorityGrouping+0x40>)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	60d3      	str	r3, [r2, #12]
}
 8004b84:	bf00      	nop
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	e000ed00 	.word	0xe000ed00
 8004b94:	05fa0000 	.word	0x05fa0000

08004b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b9c:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	0a1b      	lsrs	r3, r3, #8
 8004ba2:	f003 0307 	and.w	r3, r3, #7
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	e000ed00 	.word	0xe000ed00

08004bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	db0b      	blt.n	8004bde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bc6:	88fb      	ldrh	r3, [r7, #6]
 8004bc8:	f003 021f 	and.w	r2, r3, #31
 8004bcc:	4907      	ldr	r1, [pc, #28]	; (8004bec <__NVIC_EnableIRQ+0x38>)
 8004bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	2001      	movs	r0, #1
 8004bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8004bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	e000e100 	.word	0xe000e100

08004bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	6039      	str	r1, [r7, #0]
 8004bfa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	db0a      	blt.n	8004c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	490c      	ldr	r1, [pc, #48]	; (8004c3c <__NVIC_SetPriority+0x4c>)
 8004c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c0e:	0112      	lsls	r2, r2, #4
 8004c10:	b2d2      	uxtb	r2, r2
 8004c12:	440b      	add	r3, r1
 8004c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c18:	e00a      	b.n	8004c30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	4908      	ldr	r1, [pc, #32]	; (8004c40 <__NVIC_SetPriority+0x50>)
 8004c20:	88fb      	ldrh	r3, [r7, #6]
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	3b04      	subs	r3, #4
 8004c28:	0112      	lsls	r2, r2, #4
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	761a      	strb	r2, [r3, #24]
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	e000e100 	.word	0xe000e100
 8004c40:	e000ed00 	.word	0xe000ed00

08004c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b089      	sub	sp, #36	; 0x24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f1c3 0307 	rsb	r3, r3, #7
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	bf28      	it	cs
 8004c62:	2304      	movcs	r3, #4
 8004c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	2b06      	cmp	r3, #6
 8004c6c:	d902      	bls.n	8004c74 <NVIC_EncodePriority+0x30>
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3b03      	subs	r3, #3
 8004c72:	e000      	b.n	8004c76 <NVIC_EncodePriority+0x32>
 8004c74:	2300      	movs	r3, #0
 8004c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c78:	f04f 32ff 	mov.w	r2, #4294967295
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	43da      	mvns	r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	401a      	ands	r2, r3
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	fa01 f303 	lsl.w	r3, r1, r3
 8004c96:	43d9      	mvns	r1, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c9c:	4313      	orrs	r3, r2
         );
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3724      	adds	r7, #36	; 0x24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
	...

08004cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cbc:	d301      	bcc.n	8004cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e00f      	b.n	8004ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cc2:	4a0a      	ldr	r2, [pc, #40]	; (8004cec <SysTick_Config+0x40>)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cca:	210f      	movs	r1, #15
 8004ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd0:	f7ff ff8e 	bl	8004bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cd4:	4b05      	ldr	r3, [pc, #20]	; (8004cec <SysTick_Config+0x40>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cda:	4b04      	ldr	r3, [pc, #16]	; (8004cec <SysTick_Config+0x40>)
 8004cdc:	2207      	movs	r2, #7
 8004cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	e000e010 	.word	0xe000e010

08004cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7ff ff29 	bl	8004b50 <__NVIC_SetPriorityGrouping>
}
 8004cfe:	bf00      	nop
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b086      	sub	sp, #24
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	607a      	str	r2, [r7, #4]
 8004d12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d14:	f7ff ff40 	bl	8004b98 <__NVIC_GetPriorityGrouping>
 8004d18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	68b9      	ldr	r1, [r7, #8]
 8004d1e:	6978      	ldr	r0, [r7, #20]
 8004d20:	f7ff ff90 	bl	8004c44 <NVIC_EncodePriority>
 8004d24:	4602      	mov	r2, r0
 8004d26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff ff5f 	bl	8004bf0 <__NVIC_SetPriority>
}
 8004d32:	bf00      	nop
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b082      	sub	sp, #8
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	4603      	mov	r3, r0
 8004d42:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff ff33 	bl	8004bb4 <__NVIC_EnableIRQ>
}
 8004d4e:	bf00      	nop
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff ffa4 	bl	8004cac <SysTick_Config>
 8004d64:	4603      	mov	r3, r0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004d78:	f7ff fede 	bl	8004b38 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e314      	b.n	80053b2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a66      	ldr	r2, [pc, #408]	; (8004f28 <HAL_DMA_Init+0x1b8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d04a      	beq.n	8004e28 <HAL_DMA_Init+0xb8>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a65      	ldr	r2, [pc, #404]	; (8004f2c <HAL_DMA_Init+0x1bc>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d045      	beq.n	8004e28 <HAL_DMA_Init+0xb8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a63      	ldr	r2, [pc, #396]	; (8004f30 <HAL_DMA_Init+0x1c0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d040      	beq.n	8004e28 <HAL_DMA_Init+0xb8>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a62      	ldr	r2, [pc, #392]	; (8004f34 <HAL_DMA_Init+0x1c4>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d03b      	beq.n	8004e28 <HAL_DMA_Init+0xb8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a60      	ldr	r2, [pc, #384]	; (8004f38 <HAL_DMA_Init+0x1c8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d036      	beq.n	8004e28 <HAL_DMA_Init+0xb8>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a5f      	ldr	r2, [pc, #380]	; (8004f3c <HAL_DMA_Init+0x1cc>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d031      	beq.n	8004e28 <HAL_DMA_Init+0xb8>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a5d      	ldr	r2, [pc, #372]	; (8004f40 <HAL_DMA_Init+0x1d0>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d02c      	beq.n	8004e28 <HAL_DMA_Init+0xb8>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a5c      	ldr	r2, [pc, #368]	; (8004f44 <HAL_DMA_Init+0x1d4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d027      	beq.n	8004e28 <HAL_DMA_Init+0xb8>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a5a      	ldr	r2, [pc, #360]	; (8004f48 <HAL_DMA_Init+0x1d8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d022      	beq.n	8004e28 <HAL_DMA_Init+0xb8>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a59      	ldr	r2, [pc, #356]	; (8004f4c <HAL_DMA_Init+0x1dc>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d01d      	beq.n	8004e28 <HAL_DMA_Init+0xb8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a57      	ldr	r2, [pc, #348]	; (8004f50 <HAL_DMA_Init+0x1e0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d018      	beq.n	8004e28 <HAL_DMA_Init+0xb8>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a56      	ldr	r2, [pc, #344]	; (8004f54 <HAL_DMA_Init+0x1e4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d013      	beq.n	8004e28 <HAL_DMA_Init+0xb8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a54      	ldr	r2, [pc, #336]	; (8004f58 <HAL_DMA_Init+0x1e8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00e      	beq.n	8004e28 <HAL_DMA_Init+0xb8>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a53      	ldr	r2, [pc, #332]	; (8004f5c <HAL_DMA_Init+0x1ec>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d009      	beq.n	8004e28 <HAL_DMA_Init+0xb8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a51      	ldr	r2, [pc, #324]	; (8004f60 <HAL_DMA_Init+0x1f0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d004      	beq.n	8004e28 <HAL_DMA_Init+0xb8>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a50      	ldr	r2, [pc, #320]	; (8004f64 <HAL_DMA_Init+0x1f4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d101      	bne.n	8004e2c <HAL_DMA_Init+0xbc>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e000      	b.n	8004e2e <HAL_DMA_Init+0xbe>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 813c 	beq.w	80050ac <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a37      	ldr	r2, [pc, #220]	; (8004f28 <HAL_DMA_Init+0x1b8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d04a      	beq.n	8004ee4 <HAL_DMA_Init+0x174>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a36      	ldr	r2, [pc, #216]	; (8004f2c <HAL_DMA_Init+0x1bc>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d045      	beq.n	8004ee4 <HAL_DMA_Init+0x174>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a34      	ldr	r2, [pc, #208]	; (8004f30 <HAL_DMA_Init+0x1c0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d040      	beq.n	8004ee4 <HAL_DMA_Init+0x174>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a33      	ldr	r2, [pc, #204]	; (8004f34 <HAL_DMA_Init+0x1c4>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d03b      	beq.n	8004ee4 <HAL_DMA_Init+0x174>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a31      	ldr	r2, [pc, #196]	; (8004f38 <HAL_DMA_Init+0x1c8>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d036      	beq.n	8004ee4 <HAL_DMA_Init+0x174>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a30      	ldr	r2, [pc, #192]	; (8004f3c <HAL_DMA_Init+0x1cc>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d031      	beq.n	8004ee4 <HAL_DMA_Init+0x174>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a2e      	ldr	r2, [pc, #184]	; (8004f40 <HAL_DMA_Init+0x1d0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d02c      	beq.n	8004ee4 <HAL_DMA_Init+0x174>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a2d      	ldr	r2, [pc, #180]	; (8004f44 <HAL_DMA_Init+0x1d4>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d027      	beq.n	8004ee4 <HAL_DMA_Init+0x174>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a2b      	ldr	r2, [pc, #172]	; (8004f48 <HAL_DMA_Init+0x1d8>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d022      	beq.n	8004ee4 <HAL_DMA_Init+0x174>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a2a      	ldr	r2, [pc, #168]	; (8004f4c <HAL_DMA_Init+0x1dc>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d01d      	beq.n	8004ee4 <HAL_DMA_Init+0x174>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a28      	ldr	r2, [pc, #160]	; (8004f50 <HAL_DMA_Init+0x1e0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d018      	beq.n	8004ee4 <HAL_DMA_Init+0x174>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a27      	ldr	r2, [pc, #156]	; (8004f54 <HAL_DMA_Init+0x1e4>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d013      	beq.n	8004ee4 <HAL_DMA_Init+0x174>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a25      	ldr	r2, [pc, #148]	; (8004f58 <HAL_DMA_Init+0x1e8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00e      	beq.n	8004ee4 <HAL_DMA_Init+0x174>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a24      	ldr	r2, [pc, #144]	; (8004f5c <HAL_DMA_Init+0x1ec>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d009      	beq.n	8004ee4 <HAL_DMA_Init+0x174>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a22      	ldr	r2, [pc, #136]	; (8004f60 <HAL_DMA_Init+0x1f0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d004      	beq.n	8004ee4 <HAL_DMA_Init+0x174>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a21      	ldr	r2, [pc, #132]	; (8004f64 <HAL_DMA_Init+0x1f4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d108      	bne.n	8004ef6 <HAL_DMA_Init+0x186>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0201 	bic.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	e007      	b.n	8004f06 <HAL_DMA_Init+0x196>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0201 	bic.w	r2, r2, #1
 8004f04:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f06:	e02f      	b.n	8004f68 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f08:	f7ff fe16 	bl	8004b38 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b05      	cmp	r3, #5
 8004f14:	d928      	bls.n	8004f68 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2203      	movs	r2, #3
 8004f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e244      	b.n	80053b2 <HAL_DMA_Init+0x642>
 8004f28:	40020010 	.word	0x40020010
 8004f2c:	40020028 	.word	0x40020028
 8004f30:	40020040 	.word	0x40020040
 8004f34:	40020058 	.word	0x40020058
 8004f38:	40020070 	.word	0x40020070
 8004f3c:	40020088 	.word	0x40020088
 8004f40:	400200a0 	.word	0x400200a0
 8004f44:	400200b8 	.word	0x400200b8
 8004f48:	40020410 	.word	0x40020410
 8004f4c:	40020428 	.word	0x40020428
 8004f50:	40020440 	.word	0x40020440
 8004f54:	40020458 	.word	0x40020458
 8004f58:	40020470 	.word	0x40020470
 8004f5c:	40020488 	.word	0x40020488
 8004f60:	400204a0 	.word	0x400204a0
 8004f64:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1c8      	bne.n	8004f08 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4b84      	ldr	r3, [pc, #528]	; (8005194 <HAL_DMA_Init+0x424>)
 8004f82:	4013      	ands	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004f8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f9a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fa6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d107      	bne.n	8004fcc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b28      	cmp	r3, #40	; 0x28
 8004fd2:	d903      	bls.n	8004fdc <HAL_DMA_Init+0x26c>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8004fda:	d91f      	bls.n	800501c <HAL_DMA_Init+0x2ac>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b3e      	cmp	r3, #62	; 0x3e
 8004fe2:	d903      	bls.n	8004fec <HAL_DMA_Init+0x27c>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b42      	cmp	r3, #66	; 0x42
 8004fea:	d917      	bls.n	800501c <HAL_DMA_Init+0x2ac>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b46      	cmp	r3, #70	; 0x46
 8004ff2:	d903      	bls.n	8004ffc <HAL_DMA_Init+0x28c>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2b48      	cmp	r3, #72	; 0x48
 8004ffa:	d90f      	bls.n	800501c <HAL_DMA_Init+0x2ac>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b4e      	cmp	r3, #78	; 0x4e
 8005002:	d903      	bls.n	800500c <HAL_DMA_Init+0x29c>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b52      	cmp	r3, #82	; 0x52
 800500a:	d907      	bls.n	800501c <HAL_DMA_Init+0x2ac>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b73      	cmp	r3, #115	; 0x73
 8005012:	d905      	bls.n	8005020 <HAL_DMA_Init+0x2b0>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b77      	cmp	r3, #119	; 0x77
 800501a:	d801      	bhi.n	8005020 <HAL_DMA_Init+0x2b0>
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <HAL_DMA_Init+0x2b2>
 8005020:	2300      	movs	r3, #0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800502c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f023 0307 	bic.w	r3, r3, #7
 8005044:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	2b04      	cmp	r3, #4
 8005056:	d117      	bne.n	8005088 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	4313      	orrs	r3, r2
 8005060:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00e      	beq.n	8005088 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f002 fb30 	bl	80076d0 <DMA_CheckFifoParam>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d008      	beq.n	8005088 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2240      	movs	r2, #64	; 0x40
 800507a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e194      	b.n	80053b2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f002 fa6b 	bl	800756c <DMA_CalcBaseAndBitshift>
 8005096:	4603      	mov	r3, r0
 8005098:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800509e:	f003 031f 	and.w	r3, r3, #31
 80050a2:	223f      	movs	r2, #63	; 0x3f
 80050a4:	409a      	lsls	r2, r3
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	609a      	str	r2, [r3, #8]
 80050aa:	e0ca      	b.n	8005242 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a39      	ldr	r2, [pc, #228]	; (8005198 <HAL_DMA_Init+0x428>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d022      	beq.n	80050fc <HAL_DMA_Init+0x38c>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a38      	ldr	r2, [pc, #224]	; (800519c <HAL_DMA_Init+0x42c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d01d      	beq.n	80050fc <HAL_DMA_Init+0x38c>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a36      	ldr	r2, [pc, #216]	; (80051a0 <HAL_DMA_Init+0x430>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d018      	beq.n	80050fc <HAL_DMA_Init+0x38c>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a35      	ldr	r2, [pc, #212]	; (80051a4 <HAL_DMA_Init+0x434>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d013      	beq.n	80050fc <HAL_DMA_Init+0x38c>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a33      	ldr	r2, [pc, #204]	; (80051a8 <HAL_DMA_Init+0x438>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00e      	beq.n	80050fc <HAL_DMA_Init+0x38c>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a32      	ldr	r2, [pc, #200]	; (80051ac <HAL_DMA_Init+0x43c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d009      	beq.n	80050fc <HAL_DMA_Init+0x38c>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a30      	ldr	r2, [pc, #192]	; (80051b0 <HAL_DMA_Init+0x440>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d004      	beq.n	80050fc <HAL_DMA_Init+0x38c>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a2f      	ldr	r2, [pc, #188]	; (80051b4 <HAL_DMA_Init+0x444>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d101      	bne.n	8005100 <HAL_DMA_Init+0x390>
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <HAL_DMA_Init+0x392>
 8005100:	2300      	movs	r3, #0
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 8094 	beq.w	8005230 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a22      	ldr	r2, [pc, #136]	; (8005198 <HAL_DMA_Init+0x428>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d021      	beq.n	8005156 <HAL_DMA_Init+0x3e6>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a21      	ldr	r2, [pc, #132]	; (800519c <HAL_DMA_Init+0x42c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d01c      	beq.n	8005156 <HAL_DMA_Init+0x3e6>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a1f      	ldr	r2, [pc, #124]	; (80051a0 <HAL_DMA_Init+0x430>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d017      	beq.n	8005156 <HAL_DMA_Init+0x3e6>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a1e      	ldr	r2, [pc, #120]	; (80051a4 <HAL_DMA_Init+0x434>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d012      	beq.n	8005156 <HAL_DMA_Init+0x3e6>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a1c      	ldr	r2, [pc, #112]	; (80051a8 <HAL_DMA_Init+0x438>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00d      	beq.n	8005156 <HAL_DMA_Init+0x3e6>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a1b      	ldr	r2, [pc, #108]	; (80051ac <HAL_DMA_Init+0x43c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d008      	beq.n	8005156 <HAL_DMA_Init+0x3e6>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a19      	ldr	r2, [pc, #100]	; (80051b0 <HAL_DMA_Init+0x440>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d003      	beq.n	8005156 <HAL_DMA_Init+0x3e6>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a18      	ldr	r2, [pc, #96]	; (80051b4 <HAL_DMA_Init+0x444>)
 8005154:	4293      	cmp	r3, r2
 8005156:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4b11      	ldr	r3, [pc, #68]	; (80051b8 <HAL_DMA_Init+0x448>)
 8005174:	4013      	ands	r3, r2
 8005176:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	2b40      	cmp	r3, #64	; 0x40
 800517e:	d01d      	beq.n	80051bc <HAL_DMA_Init+0x44c>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	2b80      	cmp	r3, #128	; 0x80
 8005186:	d102      	bne.n	800518e <HAL_DMA_Init+0x41e>
 8005188:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800518c:	e017      	b.n	80051be <HAL_DMA_Init+0x44e>
 800518e:	2300      	movs	r3, #0
 8005190:	e015      	b.n	80051be <HAL_DMA_Init+0x44e>
 8005192:	bf00      	nop
 8005194:	fe10803f 	.word	0xfe10803f
 8005198:	58025408 	.word	0x58025408
 800519c:	5802541c 	.word	0x5802541c
 80051a0:	58025430 	.word	0x58025430
 80051a4:	58025444 	.word	0x58025444
 80051a8:	58025458 	.word	0x58025458
 80051ac:	5802546c 	.word	0x5802546c
 80051b0:	58025480 	.word	0x58025480
 80051b4:	58025494 	.word	0x58025494
 80051b8:	fffe000f 	.word	0xfffe000f
 80051bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	68d2      	ldr	r2, [r2, #12]
 80051c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80051cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	461a      	mov	r2, r3
 8005202:	4b6e      	ldr	r3, [pc, #440]	; (80053bc <HAL_DMA_Init+0x64c>)
 8005204:	4413      	add	r3, r2
 8005206:	4a6e      	ldr	r2, [pc, #440]	; (80053c0 <HAL_DMA_Init+0x650>)
 8005208:	fba2 2303 	umull	r2, r3, r2, r3
 800520c:	091b      	lsrs	r3, r3, #4
 800520e:	009a      	lsls	r2, r3, #2
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f002 f9a9 	bl	800756c <DMA_CalcBaseAndBitshift>
 800521a:	4603      	mov	r3, r0
 800521c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005222:	f003 031f 	and.w	r3, r3, #31
 8005226:	2201      	movs	r2, #1
 8005228:	409a      	lsls	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	605a      	str	r2, [r3, #4]
 800522e:	e008      	b.n	8005242 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2240      	movs	r2, #64	; 0x40
 8005234:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2203      	movs	r2, #3
 800523a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e0b7      	b.n	80053b2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a5f      	ldr	r2, [pc, #380]	; (80053c4 <HAL_DMA_Init+0x654>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d072      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a5d      	ldr	r2, [pc, #372]	; (80053c8 <HAL_DMA_Init+0x658>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d06d      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a5c      	ldr	r2, [pc, #368]	; (80053cc <HAL_DMA_Init+0x65c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d068      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a5a      	ldr	r2, [pc, #360]	; (80053d0 <HAL_DMA_Init+0x660>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d063      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a59      	ldr	r2, [pc, #356]	; (80053d4 <HAL_DMA_Init+0x664>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d05e      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a57      	ldr	r2, [pc, #348]	; (80053d8 <HAL_DMA_Init+0x668>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d059      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a56      	ldr	r2, [pc, #344]	; (80053dc <HAL_DMA_Init+0x66c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d054      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a54      	ldr	r2, [pc, #336]	; (80053e0 <HAL_DMA_Init+0x670>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d04f      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a53      	ldr	r2, [pc, #332]	; (80053e4 <HAL_DMA_Init+0x674>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d04a      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a51      	ldr	r2, [pc, #324]	; (80053e8 <HAL_DMA_Init+0x678>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d045      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a50      	ldr	r2, [pc, #320]	; (80053ec <HAL_DMA_Init+0x67c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d040      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a4e      	ldr	r2, [pc, #312]	; (80053f0 <HAL_DMA_Init+0x680>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d03b      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a4d      	ldr	r2, [pc, #308]	; (80053f4 <HAL_DMA_Init+0x684>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d036      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a4b      	ldr	r2, [pc, #300]	; (80053f8 <HAL_DMA_Init+0x688>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d031      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a4a      	ldr	r2, [pc, #296]	; (80053fc <HAL_DMA_Init+0x68c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d02c      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a48      	ldr	r2, [pc, #288]	; (8005400 <HAL_DMA_Init+0x690>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d027      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a47      	ldr	r2, [pc, #284]	; (8005404 <HAL_DMA_Init+0x694>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d022      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a45      	ldr	r2, [pc, #276]	; (8005408 <HAL_DMA_Init+0x698>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d01d      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a44      	ldr	r2, [pc, #272]	; (800540c <HAL_DMA_Init+0x69c>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d018      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a42      	ldr	r2, [pc, #264]	; (8005410 <HAL_DMA_Init+0x6a0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d013      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a41      	ldr	r2, [pc, #260]	; (8005414 <HAL_DMA_Init+0x6a4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00e      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a3f      	ldr	r2, [pc, #252]	; (8005418 <HAL_DMA_Init+0x6a8>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d009      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a3e      	ldr	r2, [pc, #248]	; (800541c <HAL_DMA_Init+0x6ac>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d004      	beq.n	8005332 <HAL_DMA_Init+0x5c2>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a3c      	ldr	r2, [pc, #240]	; (8005420 <HAL_DMA_Init+0x6b0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d101      	bne.n	8005336 <HAL_DMA_Init+0x5c6>
 8005332:	2301      	movs	r3, #1
 8005334:	e000      	b.n	8005338 <HAL_DMA_Init+0x5c8>
 8005336:	2300      	movs	r3, #0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d032      	beq.n	80053a2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f002 fa43 	bl	80077c8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	2b80      	cmp	r3, #128	; 0x80
 8005348:	d102      	bne.n	8005350 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005364:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d010      	beq.n	8005390 <HAL_DMA_Init+0x620>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b08      	cmp	r3, #8
 8005374:	d80c      	bhi.n	8005390 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f002 fac0 	bl	80078fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800538c:	605a      	str	r2, [r3, #4]
 800538e:	e008      	b.n	80053a2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	a7fdabf8 	.word	0xa7fdabf8
 80053c0:	cccccccd 	.word	0xcccccccd
 80053c4:	40020010 	.word	0x40020010
 80053c8:	40020028 	.word	0x40020028
 80053cc:	40020040 	.word	0x40020040
 80053d0:	40020058 	.word	0x40020058
 80053d4:	40020070 	.word	0x40020070
 80053d8:	40020088 	.word	0x40020088
 80053dc:	400200a0 	.word	0x400200a0
 80053e0:	400200b8 	.word	0x400200b8
 80053e4:	40020410 	.word	0x40020410
 80053e8:	40020428 	.word	0x40020428
 80053ec:	40020440 	.word	0x40020440
 80053f0:	40020458 	.word	0x40020458
 80053f4:	40020470 	.word	0x40020470
 80053f8:	40020488 	.word	0x40020488
 80053fc:	400204a0 	.word	0x400204a0
 8005400:	400204b8 	.word	0x400204b8
 8005404:	58025408 	.word	0x58025408
 8005408:	5802541c 	.word	0x5802541c
 800540c:	58025430 	.word	0x58025430
 8005410:	58025444 	.word	0x58025444
 8005414:	58025458 	.word	0x58025458
 8005418:	5802546c 	.word	0x5802546c
 800541c:	58025480 	.word	0x58025480
 8005420:	58025494 	.word	0x58025494

08005424 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e226      	b.n	800588e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_DMA_Start_IT+0x2a>
 800544a:	2302      	movs	r3, #2
 800544c:	e21f      	b.n	800588e <HAL_DMA_Start_IT+0x46a>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b01      	cmp	r3, #1
 8005460:	f040 820a 	bne.w	8005878 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a68      	ldr	r2, [pc, #416]	; (8005618 <HAL_DMA_Start_IT+0x1f4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d04a      	beq.n	8005512 <HAL_DMA_Start_IT+0xee>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a66      	ldr	r2, [pc, #408]	; (800561c <HAL_DMA_Start_IT+0x1f8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d045      	beq.n	8005512 <HAL_DMA_Start_IT+0xee>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a65      	ldr	r2, [pc, #404]	; (8005620 <HAL_DMA_Start_IT+0x1fc>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d040      	beq.n	8005512 <HAL_DMA_Start_IT+0xee>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a63      	ldr	r2, [pc, #396]	; (8005624 <HAL_DMA_Start_IT+0x200>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d03b      	beq.n	8005512 <HAL_DMA_Start_IT+0xee>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a62      	ldr	r2, [pc, #392]	; (8005628 <HAL_DMA_Start_IT+0x204>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d036      	beq.n	8005512 <HAL_DMA_Start_IT+0xee>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a60      	ldr	r2, [pc, #384]	; (800562c <HAL_DMA_Start_IT+0x208>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d031      	beq.n	8005512 <HAL_DMA_Start_IT+0xee>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a5f      	ldr	r2, [pc, #380]	; (8005630 <HAL_DMA_Start_IT+0x20c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d02c      	beq.n	8005512 <HAL_DMA_Start_IT+0xee>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a5d      	ldr	r2, [pc, #372]	; (8005634 <HAL_DMA_Start_IT+0x210>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d027      	beq.n	8005512 <HAL_DMA_Start_IT+0xee>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a5c      	ldr	r2, [pc, #368]	; (8005638 <HAL_DMA_Start_IT+0x214>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d022      	beq.n	8005512 <HAL_DMA_Start_IT+0xee>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a5a      	ldr	r2, [pc, #360]	; (800563c <HAL_DMA_Start_IT+0x218>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d01d      	beq.n	8005512 <HAL_DMA_Start_IT+0xee>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a59      	ldr	r2, [pc, #356]	; (8005640 <HAL_DMA_Start_IT+0x21c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d018      	beq.n	8005512 <HAL_DMA_Start_IT+0xee>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a57      	ldr	r2, [pc, #348]	; (8005644 <HAL_DMA_Start_IT+0x220>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d013      	beq.n	8005512 <HAL_DMA_Start_IT+0xee>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a56      	ldr	r2, [pc, #344]	; (8005648 <HAL_DMA_Start_IT+0x224>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d00e      	beq.n	8005512 <HAL_DMA_Start_IT+0xee>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a54      	ldr	r2, [pc, #336]	; (800564c <HAL_DMA_Start_IT+0x228>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d009      	beq.n	8005512 <HAL_DMA_Start_IT+0xee>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a53      	ldr	r2, [pc, #332]	; (8005650 <HAL_DMA_Start_IT+0x22c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d004      	beq.n	8005512 <HAL_DMA_Start_IT+0xee>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a51      	ldr	r2, [pc, #324]	; (8005654 <HAL_DMA_Start_IT+0x230>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d108      	bne.n	8005524 <HAL_DMA_Start_IT+0x100>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 0201 	bic.w	r2, r2, #1
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	e007      	b.n	8005534 <HAL_DMA_Start_IT+0x110>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0201 	bic.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	68b9      	ldr	r1, [r7, #8]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f001 fe6a 	bl	8007214 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a34      	ldr	r2, [pc, #208]	; (8005618 <HAL_DMA_Start_IT+0x1f4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d04a      	beq.n	80055e0 <HAL_DMA_Start_IT+0x1bc>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a33      	ldr	r2, [pc, #204]	; (800561c <HAL_DMA_Start_IT+0x1f8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d045      	beq.n	80055e0 <HAL_DMA_Start_IT+0x1bc>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a31      	ldr	r2, [pc, #196]	; (8005620 <HAL_DMA_Start_IT+0x1fc>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d040      	beq.n	80055e0 <HAL_DMA_Start_IT+0x1bc>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a30      	ldr	r2, [pc, #192]	; (8005624 <HAL_DMA_Start_IT+0x200>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d03b      	beq.n	80055e0 <HAL_DMA_Start_IT+0x1bc>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a2e      	ldr	r2, [pc, #184]	; (8005628 <HAL_DMA_Start_IT+0x204>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d036      	beq.n	80055e0 <HAL_DMA_Start_IT+0x1bc>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a2d      	ldr	r2, [pc, #180]	; (800562c <HAL_DMA_Start_IT+0x208>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d031      	beq.n	80055e0 <HAL_DMA_Start_IT+0x1bc>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a2b      	ldr	r2, [pc, #172]	; (8005630 <HAL_DMA_Start_IT+0x20c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d02c      	beq.n	80055e0 <HAL_DMA_Start_IT+0x1bc>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a2a      	ldr	r2, [pc, #168]	; (8005634 <HAL_DMA_Start_IT+0x210>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d027      	beq.n	80055e0 <HAL_DMA_Start_IT+0x1bc>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a28      	ldr	r2, [pc, #160]	; (8005638 <HAL_DMA_Start_IT+0x214>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d022      	beq.n	80055e0 <HAL_DMA_Start_IT+0x1bc>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a27      	ldr	r2, [pc, #156]	; (800563c <HAL_DMA_Start_IT+0x218>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d01d      	beq.n	80055e0 <HAL_DMA_Start_IT+0x1bc>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a25      	ldr	r2, [pc, #148]	; (8005640 <HAL_DMA_Start_IT+0x21c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d018      	beq.n	80055e0 <HAL_DMA_Start_IT+0x1bc>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a24      	ldr	r2, [pc, #144]	; (8005644 <HAL_DMA_Start_IT+0x220>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d013      	beq.n	80055e0 <HAL_DMA_Start_IT+0x1bc>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a22      	ldr	r2, [pc, #136]	; (8005648 <HAL_DMA_Start_IT+0x224>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d00e      	beq.n	80055e0 <HAL_DMA_Start_IT+0x1bc>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a21      	ldr	r2, [pc, #132]	; (800564c <HAL_DMA_Start_IT+0x228>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d009      	beq.n	80055e0 <HAL_DMA_Start_IT+0x1bc>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a1f      	ldr	r2, [pc, #124]	; (8005650 <HAL_DMA_Start_IT+0x22c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d004      	beq.n	80055e0 <HAL_DMA_Start_IT+0x1bc>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a1e      	ldr	r2, [pc, #120]	; (8005654 <HAL_DMA_Start_IT+0x230>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d101      	bne.n	80055e4 <HAL_DMA_Start_IT+0x1c0>
 80055e0:	2301      	movs	r3, #1
 80055e2:	e000      	b.n	80055e6 <HAL_DMA_Start_IT+0x1c2>
 80055e4:	2300      	movs	r3, #0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d036      	beq.n	8005658 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f023 021e 	bic.w	r2, r3, #30
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 0216 	orr.w	r2, r2, #22
 80055fc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	2b00      	cmp	r3, #0
 8005604:	d03e      	beq.n	8005684 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f042 0208 	orr.w	r2, r2, #8
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	e035      	b.n	8005684 <HAL_DMA_Start_IT+0x260>
 8005618:	40020010 	.word	0x40020010
 800561c:	40020028 	.word	0x40020028
 8005620:	40020040 	.word	0x40020040
 8005624:	40020058 	.word	0x40020058
 8005628:	40020070 	.word	0x40020070
 800562c:	40020088 	.word	0x40020088
 8005630:	400200a0 	.word	0x400200a0
 8005634:	400200b8 	.word	0x400200b8
 8005638:	40020410 	.word	0x40020410
 800563c:	40020428 	.word	0x40020428
 8005640:	40020440 	.word	0x40020440
 8005644:	40020458 	.word	0x40020458
 8005648:	40020470 	.word	0x40020470
 800564c:	40020488 	.word	0x40020488
 8005650:	400204a0 	.word	0x400204a0
 8005654:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f023 020e 	bic.w	r2, r3, #14
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 020a 	orr.w	r2, r2, #10
 800566a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005670:	2b00      	cmp	r3, #0
 8005672:	d007      	beq.n	8005684 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0204 	orr.w	r2, r2, #4
 8005682:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a83      	ldr	r2, [pc, #524]	; (8005898 <HAL_DMA_Start_IT+0x474>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d072      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a82      	ldr	r2, [pc, #520]	; (800589c <HAL_DMA_Start_IT+0x478>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d06d      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a80      	ldr	r2, [pc, #512]	; (80058a0 <HAL_DMA_Start_IT+0x47c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d068      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a7f      	ldr	r2, [pc, #508]	; (80058a4 <HAL_DMA_Start_IT+0x480>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d063      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a7d      	ldr	r2, [pc, #500]	; (80058a8 <HAL_DMA_Start_IT+0x484>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d05e      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a7c      	ldr	r2, [pc, #496]	; (80058ac <HAL_DMA_Start_IT+0x488>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d059      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a7a      	ldr	r2, [pc, #488]	; (80058b0 <HAL_DMA_Start_IT+0x48c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d054      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a79      	ldr	r2, [pc, #484]	; (80058b4 <HAL_DMA_Start_IT+0x490>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d04f      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a77      	ldr	r2, [pc, #476]	; (80058b8 <HAL_DMA_Start_IT+0x494>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d04a      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a76      	ldr	r2, [pc, #472]	; (80058bc <HAL_DMA_Start_IT+0x498>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d045      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a74      	ldr	r2, [pc, #464]	; (80058c0 <HAL_DMA_Start_IT+0x49c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d040      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a73      	ldr	r2, [pc, #460]	; (80058c4 <HAL_DMA_Start_IT+0x4a0>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d03b      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a71      	ldr	r2, [pc, #452]	; (80058c8 <HAL_DMA_Start_IT+0x4a4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d036      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a70      	ldr	r2, [pc, #448]	; (80058cc <HAL_DMA_Start_IT+0x4a8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d031      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a6e      	ldr	r2, [pc, #440]	; (80058d0 <HAL_DMA_Start_IT+0x4ac>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d02c      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a6d      	ldr	r2, [pc, #436]	; (80058d4 <HAL_DMA_Start_IT+0x4b0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d027      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a6b      	ldr	r2, [pc, #428]	; (80058d8 <HAL_DMA_Start_IT+0x4b4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d022      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a6a      	ldr	r2, [pc, #424]	; (80058dc <HAL_DMA_Start_IT+0x4b8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d01d      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a68      	ldr	r2, [pc, #416]	; (80058e0 <HAL_DMA_Start_IT+0x4bc>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d018      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a67      	ldr	r2, [pc, #412]	; (80058e4 <HAL_DMA_Start_IT+0x4c0>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d013      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a65      	ldr	r2, [pc, #404]	; (80058e8 <HAL_DMA_Start_IT+0x4c4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00e      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a64      	ldr	r2, [pc, #400]	; (80058ec <HAL_DMA_Start_IT+0x4c8>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d009      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a62      	ldr	r2, [pc, #392]	; (80058f0 <HAL_DMA_Start_IT+0x4cc>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d004      	beq.n	8005774 <HAL_DMA_Start_IT+0x350>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a61      	ldr	r2, [pc, #388]	; (80058f4 <HAL_DMA_Start_IT+0x4d0>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d101      	bne.n	8005778 <HAL_DMA_Start_IT+0x354>
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <HAL_DMA_Start_IT+0x356>
 8005778:	2300      	movs	r3, #0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d01a      	beq.n	80057b4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d007      	beq.n	800579c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800579a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d007      	beq.n	80057b4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057b2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a37      	ldr	r2, [pc, #220]	; (8005898 <HAL_DMA_Start_IT+0x474>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d04a      	beq.n	8005854 <HAL_DMA_Start_IT+0x430>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a36      	ldr	r2, [pc, #216]	; (800589c <HAL_DMA_Start_IT+0x478>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d045      	beq.n	8005854 <HAL_DMA_Start_IT+0x430>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a34      	ldr	r2, [pc, #208]	; (80058a0 <HAL_DMA_Start_IT+0x47c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d040      	beq.n	8005854 <HAL_DMA_Start_IT+0x430>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a33      	ldr	r2, [pc, #204]	; (80058a4 <HAL_DMA_Start_IT+0x480>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d03b      	beq.n	8005854 <HAL_DMA_Start_IT+0x430>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a31      	ldr	r2, [pc, #196]	; (80058a8 <HAL_DMA_Start_IT+0x484>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d036      	beq.n	8005854 <HAL_DMA_Start_IT+0x430>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a30      	ldr	r2, [pc, #192]	; (80058ac <HAL_DMA_Start_IT+0x488>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d031      	beq.n	8005854 <HAL_DMA_Start_IT+0x430>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a2e      	ldr	r2, [pc, #184]	; (80058b0 <HAL_DMA_Start_IT+0x48c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d02c      	beq.n	8005854 <HAL_DMA_Start_IT+0x430>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a2d      	ldr	r2, [pc, #180]	; (80058b4 <HAL_DMA_Start_IT+0x490>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d027      	beq.n	8005854 <HAL_DMA_Start_IT+0x430>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a2b      	ldr	r2, [pc, #172]	; (80058b8 <HAL_DMA_Start_IT+0x494>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d022      	beq.n	8005854 <HAL_DMA_Start_IT+0x430>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a2a      	ldr	r2, [pc, #168]	; (80058bc <HAL_DMA_Start_IT+0x498>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d01d      	beq.n	8005854 <HAL_DMA_Start_IT+0x430>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a28      	ldr	r2, [pc, #160]	; (80058c0 <HAL_DMA_Start_IT+0x49c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d018      	beq.n	8005854 <HAL_DMA_Start_IT+0x430>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a27      	ldr	r2, [pc, #156]	; (80058c4 <HAL_DMA_Start_IT+0x4a0>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d013      	beq.n	8005854 <HAL_DMA_Start_IT+0x430>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a25      	ldr	r2, [pc, #148]	; (80058c8 <HAL_DMA_Start_IT+0x4a4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00e      	beq.n	8005854 <HAL_DMA_Start_IT+0x430>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a24      	ldr	r2, [pc, #144]	; (80058cc <HAL_DMA_Start_IT+0x4a8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d009      	beq.n	8005854 <HAL_DMA_Start_IT+0x430>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a22      	ldr	r2, [pc, #136]	; (80058d0 <HAL_DMA_Start_IT+0x4ac>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d004      	beq.n	8005854 <HAL_DMA_Start_IT+0x430>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a21      	ldr	r2, [pc, #132]	; (80058d4 <HAL_DMA_Start_IT+0x4b0>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d108      	bne.n	8005866 <HAL_DMA_Start_IT+0x442>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0201 	orr.w	r2, r2, #1
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	e012      	b.n	800588c <HAL_DMA_Start_IT+0x468>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0201 	orr.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	e009      	b.n	800588c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800587e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800588c:	7dfb      	ldrb	r3, [r7, #23]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	40020010 	.word	0x40020010
 800589c:	40020028 	.word	0x40020028
 80058a0:	40020040 	.word	0x40020040
 80058a4:	40020058 	.word	0x40020058
 80058a8:	40020070 	.word	0x40020070
 80058ac:	40020088 	.word	0x40020088
 80058b0:	400200a0 	.word	0x400200a0
 80058b4:	400200b8 	.word	0x400200b8
 80058b8:	40020410 	.word	0x40020410
 80058bc:	40020428 	.word	0x40020428
 80058c0:	40020440 	.word	0x40020440
 80058c4:	40020458 	.word	0x40020458
 80058c8:	40020470 	.word	0x40020470
 80058cc:	40020488 	.word	0x40020488
 80058d0:	400204a0 	.word	0x400204a0
 80058d4:	400204b8 	.word	0x400204b8
 80058d8:	58025408 	.word	0x58025408
 80058dc:	5802541c 	.word	0x5802541c
 80058e0:	58025430 	.word	0x58025430
 80058e4:	58025444 	.word	0x58025444
 80058e8:	58025458 	.word	0x58025458
 80058ec:	5802546c 	.word	0x5802546c
 80058f0:	58025480 	.word	0x58025480
 80058f4:	58025494 	.word	0x58025494

080058f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005900:	f7ff f91a 	bl	8004b38 <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e2dc      	b.n	8005eca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d008      	beq.n	800592e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2280      	movs	r2, #128	; 0x80
 8005920:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e2cd      	b.n	8005eca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a76      	ldr	r2, [pc, #472]	; (8005b0c <HAL_DMA_Abort+0x214>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d04a      	beq.n	80059ce <HAL_DMA_Abort+0xd6>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a74      	ldr	r2, [pc, #464]	; (8005b10 <HAL_DMA_Abort+0x218>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d045      	beq.n	80059ce <HAL_DMA_Abort+0xd6>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a73      	ldr	r2, [pc, #460]	; (8005b14 <HAL_DMA_Abort+0x21c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d040      	beq.n	80059ce <HAL_DMA_Abort+0xd6>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a71      	ldr	r2, [pc, #452]	; (8005b18 <HAL_DMA_Abort+0x220>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d03b      	beq.n	80059ce <HAL_DMA_Abort+0xd6>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a70      	ldr	r2, [pc, #448]	; (8005b1c <HAL_DMA_Abort+0x224>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d036      	beq.n	80059ce <HAL_DMA_Abort+0xd6>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a6e      	ldr	r2, [pc, #440]	; (8005b20 <HAL_DMA_Abort+0x228>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d031      	beq.n	80059ce <HAL_DMA_Abort+0xd6>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a6d      	ldr	r2, [pc, #436]	; (8005b24 <HAL_DMA_Abort+0x22c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d02c      	beq.n	80059ce <HAL_DMA_Abort+0xd6>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a6b      	ldr	r2, [pc, #428]	; (8005b28 <HAL_DMA_Abort+0x230>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d027      	beq.n	80059ce <HAL_DMA_Abort+0xd6>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a6a      	ldr	r2, [pc, #424]	; (8005b2c <HAL_DMA_Abort+0x234>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d022      	beq.n	80059ce <HAL_DMA_Abort+0xd6>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a68      	ldr	r2, [pc, #416]	; (8005b30 <HAL_DMA_Abort+0x238>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d01d      	beq.n	80059ce <HAL_DMA_Abort+0xd6>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a67      	ldr	r2, [pc, #412]	; (8005b34 <HAL_DMA_Abort+0x23c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d018      	beq.n	80059ce <HAL_DMA_Abort+0xd6>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a65      	ldr	r2, [pc, #404]	; (8005b38 <HAL_DMA_Abort+0x240>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d013      	beq.n	80059ce <HAL_DMA_Abort+0xd6>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a64      	ldr	r2, [pc, #400]	; (8005b3c <HAL_DMA_Abort+0x244>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00e      	beq.n	80059ce <HAL_DMA_Abort+0xd6>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a62      	ldr	r2, [pc, #392]	; (8005b40 <HAL_DMA_Abort+0x248>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d009      	beq.n	80059ce <HAL_DMA_Abort+0xd6>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a61      	ldr	r2, [pc, #388]	; (8005b44 <HAL_DMA_Abort+0x24c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d004      	beq.n	80059ce <HAL_DMA_Abort+0xd6>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a5f      	ldr	r2, [pc, #380]	; (8005b48 <HAL_DMA_Abort+0x250>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d101      	bne.n	80059d2 <HAL_DMA_Abort+0xda>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <HAL_DMA_Abort+0xdc>
 80059d2:	2300      	movs	r3, #0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d013      	beq.n	8005a00 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 021e 	bic.w	r2, r2, #30
 80059e6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	695a      	ldr	r2, [r3, #20]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059f6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	e00a      	b.n	8005a16 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 020e 	bic.w	r2, r2, #14
 8005a0e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a3c      	ldr	r2, [pc, #240]	; (8005b0c <HAL_DMA_Abort+0x214>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d072      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a3a      	ldr	r2, [pc, #232]	; (8005b10 <HAL_DMA_Abort+0x218>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d06d      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a39      	ldr	r2, [pc, #228]	; (8005b14 <HAL_DMA_Abort+0x21c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d068      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a37      	ldr	r2, [pc, #220]	; (8005b18 <HAL_DMA_Abort+0x220>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d063      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a36      	ldr	r2, [pc, #216]	; (8005b1c <HAL_DMA_Abort+0x224>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d05e      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a34      	ldr	r2, [pc, #208]	; (8005b20 <HAL_DMA_Abort+0x228>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d059      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a33      	ldr	r2, [pc, #204]	; (8005b24 <HAL_DMA_Abort+0x22c>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d054      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a31      	ldr	r2, [pc, #196]	; (8005b28 <HAL_DMA_Abort+0x230>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d04f      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a30      	ldr	r2, [pc, #192]	; (8005b2c <HAL_DMA_Abort+0x234>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d04a      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a2e      	ldr	r2, [pc, #184]	; (8005b30 <HAL_DMA_Abort+0x238>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d045      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a2d      	ldr	r2, [pc, #180]	; (8005b34 <HAL_DMA_Abort+0x23c>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d040      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a2b      	ldr	r2, [pc, #172]	; (8005b38 <HAL_DMA_Abort+0x240>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d03b      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a2a      	ldr	r2, [pc, #168]	; (8005b3c <HAL_DMA_Abort+0x244>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d036      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a28      	ldr	r2, [pc, #160]	; (8005b40 <HAL_DMA_Abort+0x248>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d031      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a27      	ldr	r2, [pc, #156]	; (8005b44 <HAL_DMA_Abort+0x24c>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d02c      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a25      	ldr	r2, [pc, #148]	; (8005b48 <HAL_DMA_Abort+0x250>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d027      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a24      	ldr	r2, [pc, #144]	; (8005b4c <HAL_DMA_Abort+0x254>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d022      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a22      	ldr	r2, [pc, #136]	; (8005b50 <HAL_DMA_Abort+0x258>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d01d      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a21      	ldr	r2, [pc, #132]	; (8005b54 <HAL_DMA_Abort+0x25c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d018      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a1f      	ldr	r2, [pc, #124]	; (8005b58 <HAL_DMA_Abort+0x260>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d013      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a1e      	ldr	r2, [pc, #120]	; (8005b5c <HAL_DMA_Abort+0x264>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00e      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a1c      	ldr	r2, [pc, #112]	; (8005b60 <HAL_DMA_Abort+0x268>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d009      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a1b      	ldr	r2, [pc, #108]	; (8005b64 <HAL_DMA_Abort+0x26c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d004      	beq.n	8005b06 <HAL_DMA_Abort+0x20e>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a19      	ldr	r2, [pc, #100]	; (8005b68 <HAL_DMA_Abort+0x270>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d132      	bne.n	8005b6c <HAL_DMA_Abort+0x274>
 8005b06:	2301      	movs	r3, #1
 8005b08:	e031      	b.n	8005b6e <HAL_DMA_Abort+0x276>
 8005b0a:	bf00      	nop
 8005b0c:	40020010 	.word	0x40020010
 8005b10:	40020028 	.word	0x40020028
 8005b14:	40020040 	.word	0x40020040
 8005b18:	40020058 	.word	0x40020058
 8005b1c:	40020070 	.word	0x40020070
 8005b20:	40020088 	.word	0x40020088
 8005b24:	400200a0 	.word	0x400200a0
 8005b28:	400200b8 	.word	0x400200b8
 8005b2c:	40020410 	.word	0x40020410
 8005b30:	40020428 	.word	0x40020428
 8005b34:	40020440 	.word	0x40020440
 8005b38:	40020458 	.word	0x40020458
 8005b3c:	40020470 	.word	0x40020470
 8005b40:	40020488 	.word	0x40020488
 8005b44:	400204a0 	.word	0x400204a0
 8005b48:	400204b8 	.word	0x400204b8
 8005b4c:	58025408 	.word	0x58025408
 8005b50:	5802541c 	.word	0x5802541c
 8005b54:	58025430 	.word	0x58025430
 8005b58:	58025444 	.word	0x58025444
 8005b5c:	58025458 	.word	0x58025458
 8005b60:	5802546c 	.word	0x5802546c
 8005b64:	58025480 	.word	0x58025480
 8005b68:	58025494 	.word	0x58025494
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d007      	beq.n	8005b82 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b80:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a6d      	ldr	r2, [pc, #436]	; (8005d3c <HAL_DMA_Abort+0x444>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d04a      	beq.n	8005c22 <HAL_DMA_Abort+0x32a>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a6b      	ldr	r2, [pc, #428]	; (8005d40 <HAL_DMA_Abort+0x448>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d045      	beq.n	8005c22 <HAL_DMA_Abort+0x32a>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a6a      	ldr	r2, [pc, #424]	; (8005d44 <HAL_DMA_Abort+0x44c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d040      	beq.n	8005c22 <HAL_DMA_Abort+0x32a>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a68      	ldr	r2, [pc, #416]	; (8005d48 <HAL_DMA_Abort+0x450>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d03b      	beq.n	8005c22 <HAL_DMA_Abort+0x32a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a67      	ldr	r2, [pc, #412]	; (8005d4c <HAL_DMA_Abort+0x454>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d036      	beq.n	8005c22 <HAL_DMA_Abort+0x32a>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a65      	ldr	r2, [pc, #404]	; (8005d50 <HAL_DMA_Abort+0x458>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d031      	beq.n	8005c22 <HAL_DMA_Abort+0x32a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a64      	ldr	r2, [pc, #400]	; (8005d54 <HAL_DMA_Abort+0x45c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d02c      	beq.n	8005c22 <HAL_DMA_Abort+0x32a>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a62      	ldr	r2, [pc, #392]	; (8005d58 <HAL_DMA_Abort+0x460>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d027      	beq.n	8005c22 <HAL_DMA_Abort+0x32a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a61      	ldr	r2, [pc, #388]	; (8005d5c <HAL_DMA_Abort+0x464>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d022      	beq.n	8005c22 <HAL_DMA_Abort+0x32a>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a5f      	ldr	r2, [pc, #380]	; (8005d60 <HAL_DMA_Abort+0x468>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d01d      	beq.n	8005c22 <HAL_DMA_Abort+0x32a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a5e      	ldr	r2, [pc, #376]	; (8005d64 <HAL_DMA_Abort+0x46c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d018      	beq.n	8005c22 <HAL_DMA_Abort+0x32a>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a5c      	ldr	r2, [pc, #368]	; (8005d68 <HAL_DMA_Abort+0x470>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d013      	beq.n	8005c22 <HAL_DMA_Abort+0x32a>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a5b      	ldr	r2, [pc, #364]	; (8005d6c <HAL_DMA_Abort+0x474>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00e      	beq.n	8005c22 <HAL_DMA_Abort+0x32a>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a59      	ldr	r2, [pc, #356]	; (8005d70 <HAL_DMA_Abort+0x478>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d009      	beq.n	8005c22 <HAL_DMA_Abort+0x32a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a58      	ldr	r2, [pc, #352]	; (8005d74 <HAL_DMA_Abort+0x47c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d004      	beq.n	8005c22 <HAL_DMA_Abort+0x32a>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a56      	ldr	r2, [pc, #344]	; (8005d78 <HAL_DMA_Abort+0x480>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d108      	bne.n	8005c34 <HAL_DMA_Abort+0x33c>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0201 	bic.w	r2, r2, #1
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	e007      	b.n	8005c44 <HAL_DMA_Abort+0x34c>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0201 	bic.w	r2, r2, #1
 8005c42:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c44:	e013      	b.n	8005c6e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c46:	f7fe ff77 	bl	8004b38 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b05      	cmp	r3, #5
 8005c52:	d90c      	bls.n	8005c6e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2220      	movs	r2, #32
 8005c58:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2203      	movs	r2, #3
 8005c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e12d      	b.n	8005eca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1e5      	bne.n	8005c46 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a2f      	ldr	r2, [pc, #188]	; (8005d3c <HAL_DMA_Abort+0x444>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d04a      	beq.n	8005d1a <HAL_DMA_Abort+0x422>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a2d      	ldr	r2, [pc, #180]	; (8005d40 <HAL_DMA_Abort+0x448>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d045      	beq.n	8005d1a <HAL_DMA_Abort+0x422>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a2c      	ldr	r2, [pc, #176]	; (8005d44 <HAL_DMA_Abort+0x44c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d040      	beq.n	8005d1a <HAL_DMA_Abort+0x422>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a2a      	ldr	r2, [pc, #168]	; (8005d48 <HAL_DMA_Abort+0x450>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d03b      	beq.n	8005d1a <HAL_DMA_Abort+0x422>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a29      	ldr	r2, [pc, #164]	; (8005d4c <HAL_DMA_Abort+0x454>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d036      	beq.n	8005d1a <HAL_DMA_Abort+0x422>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a27      	ldr	r2, [pc, #156]	; (8005d50 <HAL_DMA_Abort+0x458>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d031      	beq.n	8005d1a <HAL_DMA_Abort+0x422>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a26      	ldr	r2, [pc, #152]	; (8005d54 <HAL_DMA_Abort+0x45c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d02c      	beq.n	8005d1a <HAL_DMA_Abort+0x422>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a24      	ldr	r2, [pc, #144]	; (8005d58 <HAL_DMA_Abort+0x460>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d027      	beq.n	8005d1a <HAL_DMA_Abort+0x422>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a23      	ldr	r2, [pc, #140]	; (8005d5c <HAL_DMA_Abort+0x464>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d022      	beq.n	8005d1a <HAL_DMA_Abort+0x422>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a21      	ldr	r2, [pc, #132]	; (8005d60 <HAL_DMA_Abort+0x468>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d01d      	beq.n	8005d1a <HAL_DMA_Abort+0x422>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a20      	ldr	r2, [pc, #128]	; (8005d64 <HAL_DMA_Abort+0x46c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d018      	beq.n	8005d1a <HAL_DMA_Abort+0x422>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a1e      	ldr	r2, [pc, #120]	; (8005d68 <HAL_DMA_Abort+0x470>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d013      	beq.n	8005d1a <HAL_DMA_Abort+0x422>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a1d      	ldr	r2, [pc, #116]	; (8005d6c <HAL_DMA_Abort+0x474>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d00e      	beq.n	8005d1a <HAL_DMA_Abort+0x422>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a1b      	ldr	r2, [pc, #108]	; (8005d70 <HAL_DMA_Abort+0x478>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d009      	beq.n	8005d1a <HAL_DMA_Abort+0x422>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a1a      	ldr	r2, [pc, #104]	; (8005d74 <HAL_DMA_Abort+0x47c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d004      	beq.n	8005d1a <HAL_DMA_Abort+0x422>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a18      	ldr	r2, [pc, #96]	; (8005d78 <HAL_DMA_Abort+0x480>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d101      	bne.n	8005d1e <HAL_DMA_Abort+0x426>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e000      	b.n	8005d20 <HAL_DMA_Abort+0x428>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d02b      	beq.n	8005d7c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d28:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d2e:	f003 031f 	and.w	r3, r3, #31
 8005d32:	223f      	movs	r2, #63	; 0x3f
 8005d34:	409a      	lsls	r2, r3
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	609a      	str	r2, [r3, #8]
 8005d3a:	e02a      	b.n	8005d92 <HAL_DMA_Abort+0x49a>
 8005d3c:	40020010 	.word	0x40020010
 8005d40:	40020028 	.word	0x40020028
 8005d44:	40020040 	.word	0x40020040
 8005d48:	40020058 	.word	0x40020058
 8005d4c:	40020070 	.word	0x40020070
 8005d50:	40020088 	.word	0x40020088
 8005d54:	400200a0 	.word	0x400200a0
 8005d58:	400200b8 	.word	0x400200b8
 8005d5c:	40020410 	.word	0x40020410
 8005d60:	40020428 	.word	0x40020428
 8005d64:	40020440 	.word	0x40020440
 8005d68:	40020458 	.word	0x40020458
 8005d6c:	40020470 	.word	0x40020470
 8005d70:	40020488 	.word	0x40020488
 8005d74:	400204a0 	.word	0x400204a0
 8005d78:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d80:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d86:	f003 031f 	and.w	r3, r3, #31
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	409a      	lsls	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a4f      	ldr	r2, [pc, #316]	; (8005ed4 <HAL_DMA_Abort+0x5dc>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d072      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a4d      	ldr	r2, [pc, #308]	; (8005ed8 <HAL_DMA_Abort+0x5e0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d06d      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a4c      	ldr	r2, [pc, #304]	; (8005edc <HAL_DMA_Abort+0x5e4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d068      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a4a      	ldr	r2, [pc, #296]	; (8005ee0 <HAL_DMA_Abort+0x5e8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d063      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a49      	ldr	r2, [pc, #292]	; (8005ee4 <HAL_DMA_Abort+0x5ec>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d05e      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a47      	ldr	r2, [pc, #284]	; (8005ee8 <HAL_DMA_Abort+0x5f0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d059      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a46      	ldr	r2, [pc, #280]	; (8005eec <HAL_DMA_Abort+0x5f4>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d054      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a44      	ldr	r2, [pc, #272]	; (8005ef0 <HAL_DMA_Abort+0x5f8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d04f      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a43      	ldr	r2, [pc, #268]	; (8005ef4 <HAL_DMA_Abort+0x5fc>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d04a      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a41      	ldr	r2, [pc, #260]	; (8005ef8 <HAL_DMA_Abort+0x600>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d045      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a40      	ldr	r2, [pc, #256]	; (8005efc <HAL_DMA_Abort+0x604>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d040      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a3e      	ldr	r2, [pc, #248]	; (8005f00 <HAL_DMA_Abort+0x608>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d03b      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a3d      	ldr	r2, [pc, #244]	; (8005f04 <HAL_DMA_Abort+0x60c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d036      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a3b      	ldr	r2, [pc, #236]	; (8005f08 <HAL_DMA_Abort+0x610>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d031      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a3a      	ldr	r2, [pc, #232]	; (8005f0c <HAL_DMA_Abort+0x614>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d02c      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a38      	ldr	r2, [pc, #224]	; (8005f10 <HAL_DMA_Abort+0x618>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d027      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a37      	ldr	r2, [pc, #220]	; (8005f14 <HAL_DMA_Abort+0x61c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d022      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a35      	ldr	r2, [pc, #212]	; (8005f18 <HAL_DMA_Abort+0x620>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d01d      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a34      	ldr	r2, [pc, #208]	; (8005f1c <HAL_DMA_Abort+0x624>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d018      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a32      	ldr	r2, [pc, #200]	; (8005f20 <HAL_DMA_Abort+0x628>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d013      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a31      	ldr	r2, [pc, #196]	; (8005f24 <HAL_DMA_Abort+0x62c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d00e      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a2f      	ldr	r2, [pc, #188]	; (8005f28 <HAL_DMA_Abort+0x630>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d009      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a2e      	ldr	r2, [pc, #184]	; (8005f2c <HAL_DMA_Abort+0x634>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d004      	beq.n	8005e82 <HAL_DMA_Abort+0x58a>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a2c      	ldr	r2, [pc, #176]	; (8005f30 <HAL_DMA_Abort+0x638>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d101      	bne.n	8005e86 <HAL_DMA_Abort+0x58e>
 8005e82:	2301      	movs	r3, #1
 8005e84:	e000      	b.n	8005e88 <HAL_DMA_Abort+0x590>
 8005e86:	2300      	movs	r3, #0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d015      	beq.n	8005eb8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e94:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00c      	beq.n	8005eb8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ea8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005eac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005eb6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3718      	adds	r7, #24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	40020010 	.word	0x40020010
 8005ed8:	40020028 	.word	0x40020028
 8005edc:	40020040 	.word	0x40020040
 8005ee0:	40020058 	.word	0x40020058
 8005ee4:	40020070 	.word	0x40020070
 8005ee8:	40020088 	.word	0x40020088
 8005eec:	400200a0 	.word	0x400200a0
 8005ef0:	400200b8 	.word	0x400200b8
 8005ef4:	40020410 	.word	0x40020410
 8005ef8:	40020428 	.word	0x40020428
 8005efc:	40020440 	.word	0x40020440
 8005f00:	40020458 	.word	0x40020458
 8005f04:	40020470 	.word	0x40020470
 8005f08:	40020488 	.word	0x40020488
 8005f0c:	400204a0 	.word	0x400204a0
 8005f10:	400204b8 	.word	0x400204b8
 8005f14:	58025408 	.word	0x58025408
 8005f18:	5802541c 	.word	0x5802541c
 8005f1c:	58025430 	.word	0x58025430
 8005f20:	58025444 	.word	0x58025444
 8005f24:	58025458 	.word	0x58025458
 8005f28:	5802546c 	.word	0x5802546c
 8005f2c:	58025480 	.word	0x58025480
 8005f30:	58025494 	.word	0x58025494

08005f34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e237      	b.n	80063b6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d004      	beq.n	8005f5c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2280      	movs	r2, #128	; 0x80
 8005f56:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e22c      	b.n	80063b6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a5c      	ldr	r2, [pc, #368]	; (80060d4 <HAL_DMA_Abort_IT+0x1a0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d04a      	beq.n	8005ffc <HAL_DMA_Abort_IT+0xc8>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a5b      	ldr	r2, [pc, #364]	; (80060d8 <HAL_DMA_Abort_IT+0x1a4>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d045      	beq.n	8005ffc <HAL_DMA_Abort_IT+0xc8>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a59      	ldr	r2, [pc, #356]	; (80060dc <HAL_DMA_Abort_IT+0x1a8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d040      	beq.n	8005ffc <HAL_DMA_Abort_IT+0xc8>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a58      	ldr	r2, [pc, #352]	; (80060e0 <HAL_DMA_Abort_IT+0x1ac>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d03b      	beq.n	8005ffc <HAL_DMA_Abort_IT+0xc8>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a56      	ldr	r2, [pc, #344]	; (80060e4 <HAL_DMA_Abort_IT+0x1b0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d036      	beq.n	8005ffc <HAL_DMA_Abort_IT+0xc8>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a55      	ldr	r2, [pc, #340]	; (80060e8 <HAL_DMA_Abort_IT+0x1b4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d031      	beq.n	8005ffc <HAL_DMA_Abort_IT+0xc8>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a53      	ldr	r2, [pc, #332]	; (80060ec <HAL_DMA_Abort_IT+0x1b8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d02c      	beq.n	8005ffc <HAL_DMA_Abort_IT+0xc8>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a52      	ldr	r2, [pc, #328]	; (80060f0 <HAL_DMA_Abort_IT+0x1bc>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d027      	beq.n	8005ffc <HAL_DMA_Abort_IT+0xc8>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a50      	ldr	r2, [pc, #320]	; (80060f4 <HAL_DMA_Abort_IT+0x1c0>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d022      	beq.n	8005ffc <HAL_DMA_Abort_IT+0xc8>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a4f      	ldr	r2, [pc, #316]	; (80060f8 <HAL_DMA_Abort_IT+0x1c4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d01d      	beq.n	8005ffc <HAL_DMA_Abort_IT+0xc8>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a4d      	ldr	r2, [pc, #308]	; (80060fc <HAL_DMA_Abort_IT+0x1c8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d018      	beq.n	8005ffc <HAL_DMA_Abort_IT+0xc8>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a4c      	ldr	r2, [pc, #304]	; (8006100 <HAL_DMA_Abort_IT+0x1cc>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d013      	beq.n	8005ffc <HAL_DMA_Abort_IT+0xc8>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a4a      	ldr	r2, [pc, #296]	; (8006104 <HAL_DMA_Abort_IT+0x1d0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d00e      	beq.n	8005ffc <HAL_DMA_Abort_IT+0xc8>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a49      	ldr	r2, [pc, #292]	; (8006108 <HAL_DMA_Abort_IT+0x1d4>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d009      	beq.n	8005ffc <HAL_DMA_Abort_IT+0xc8>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a47      	ldr	r2, [pc, #284]	; (800610c <HAL_DMA_Abort_IT+0x1d8>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d004      	beq.n	8005ffc <HAL_DMA_Abort_IT+0xc8>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a46      	ldr	r2, [pc, #280]	; (8006110 <HAL_DMA_Abort_IT+0x1dc>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d101      	bne.n	8006000 <HAL_DMA_Abort_IT+0xcc>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e000      	b.n	8006002 <HAL_DMA_Abort_IT+0xce>
 8006000:	2300      	movs	r3, #0
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 8086 	beq.w	8006114 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2204      	movs	r2, #4
 800600c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a2f      	ldr	r2, [pc, #188]	; (80060d4 <HAL_DMA_Abort_IT+0x1a0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d04a      	beq.n	80060b0 <HAL_DMA_Abort_IT+0x17c>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a2e      	ldr	r2, [pc, #184]	; (80060d8 <HAL_DMA_Abort_IT+0x1a4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d045      	beq.n	80060b0 <HAL_DMA_Abort_IT+0x17c>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a2c      	ldr	r2, [pc, #176]	; (80060dc <HAL_DMA_Abort_IT+0x1a8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d040      	beq.n	80060b0 <HAL_DMA_Abort_IT+0x17c>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a2b      	ldr	r2, [pc, #172]	; (80060e0 <HAL_DMA_Abort_IT+0x1ac>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d03b      	beq.n	80060b0 <HAL_DMA_Abort_IT+0x17c>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a29      	ldr	r2, [pc, #164]	; (80060e4 <HAL_DMA_Abort_IT+0x1b0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d036      	beq.n	80060b0 <HAL_DMA_Abort_IT+0x17c>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a28      	ldr	r2, [pc, #160]	; (80060e8 <HAL_DMA_Abort_IT+0x1b4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d031      	beq.n	80060b0 <HAL_DMA_Abort_IT+0x17c>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a26      	ldr	r2, [pc, #152]	; (80060ec <HAL_DMA_Abort_IT+0x1b8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d02c      	beq.n	80060b0 <HAL_DMA_Abort_IT+0x17c>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a25      	ldr	r2, [pc, #148]	; (80060f0 <HAL_DMA_Abort_IT+0x1bc>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d027      	beq.n	80060b0 <HAL_DMA_Abort_IT+0x17c>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a23      	ldr	r2, [pc, #140]	; (80060f4 <HAL_DMA_Abort_IT+0x1c0>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d022      	beq.n	80060b0 <HAL_DMA_Abort_IT+0x17c>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a22      	ldr	r2, [pc, #136]	; (80060f8 <HAL_DMA_Abort_IT+0x1c4>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d01d      	beq.n	80060b0 <HAL_DMA_Abort_IT+0x17c>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a20      	ldr	r2, [pc, #128]	; (80060fc <HAL_DMA_Abort_IT+0x1c8>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d018      	beq.n	80060b0 <HAL_DMA_Abort_IT+0x17c>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a1f      	ldr	r2, [pc, #124]	; (8006100 <HAL_DMA_Abort_IT+0x1cc>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d013      	beq.n	80060b0 <HAL_DMA_Abort_IT+0x17c>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a1d      	ldr	r2, [pc, #116]	; (8006104 <HAL_DMA_Abort_IT+0x1d0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d00e      	beq.n	80060b0 <HAL_DMA_Abort_IT+0x17c>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a1c      	ldr	r2, [pc, #112]	; (8006108 <HAL_DMA_Abort_IT+0x1d4>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d009      	beq.n	80060b0 <HAL_DMA_Abort_IT+0x17c>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a1a      	ldr	r2, [pc, #104]	; (800610c <HAL_DMA_Abort_IT+0x1d8>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d004      	beq.n	80060b0 <HAL_DMA_Abort_IT+0x17c>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a19      	ldr	r2, [pc, #100]	; (8006110 <HAL_DMA_Abort_IT+0x1dc>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d108      	bne.n	80060c2 <HAL_DMA_Abort_IT+0x18e>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0201 	bic.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	e178      	b.n	80063b4 <HAL_DMA_Abort_IT+0x480>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 0201 	bic.w	r2, r2, #1
 80060d0:	601a      	str	r2, [r3, #0]
 80060d2:	e16f      	b.n	80063b4 <HAL_DMA_Abort_IT+0x480>
 80060d4:	40020010 	.word	0x40020010
 80060d8:	40020028 	.word	0x40020028
 80060dc:	40020040 	.word	0x40020040
 80060e0:	40020058 	.word	0x40020058
 80060e4:	40020070 	.word	0x40020070
 80060e8:	40020088 	.word	0x40020088
 80060ec:	400200a0 	.word	0x400200a0
 80060f0:	400200b8 	.word	0x400200b8
 80060f4:	40020410 	.word	0x40020410
 80060f8:	40020428 	.word	0x40020428
 80060fc:	40020440 	.word	0x40020440
 8006100:	40020458 	.word	0x40020458
 8006104:	40020470 	.word	0x40020470
 8006108:	40020488 	.word	0x40020488
 800610c:	400204a0 	.word	0x400204a0
 8006110:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 020e 	bic.w	r2, r2, #14
 8006122:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a6c      	ldr	r2, [pc, #432]	; (80062dc <HAL_DMA_Abort_IT+0x3a8>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d04a      	beq.n	80061c4 <HAL_DMA_Abort_IT+0x290>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a6b      	ldr	r2, [pc, #428]	; (80062e0 <HAL_DMA_Abort_IT+0x3ac>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d045      	beq.n	80061c4 <HAL_DMA_Abort_IT+0x290>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a69      	ldr	r2, [pc, #420]	; (80062e4 <HAL_DMA_Abort_IT+0x3b0>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d040      	beq.n	80061c4 <HAL_DMA_Abort_IT+0x290>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a68      	ldr	r2, [pc, #416]	; (80062e8 <HAL_DMA_Abort_IT+0x3b4>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d03b      	beq.n	80061c4 <HAL_DMA_Abort_IT+0x290>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a66      	ldr	r2, [pc, #408]	; (80062ec <HAL_DMA_Abort_IT+0x3b8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d036      	beq.n	80061c4 <HAL_DMA_Abort_IT+0x290>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a65      	ldr	r2, [pc, #404]	; (80062f0 <HAL_DMA_Abort_IT+0x3bc>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d031      	beq.n	80061c4 <HAL_DMA_Abort_IT+0x290>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a63      	ldr	r2, [pc, #396]	; (80062f4 <HAL_DMA_Abort_IT+0x3c0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d02c      	beq.n	80061c4 <HAL_DMA_Abort_IT+0x290>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a62      	ldr	r2, [pc, #392]	; (80062f8 <HAL_DMA_Abort_IT+0x3c4>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d027      	beq.n	80061c4 <HAL_DMA_Abort_IT+0x290>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a60      	ldr	r2, [pc, #384]	; (80062fc <HAL_DMA_Abort_IT+0x3c8>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d022      	beq.n	80061c4 <HAL_DMA_Abort_IT+0x290>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a5f      	ldr	r2, [pc, #380]	; (8006300 <HAL_DMA_Abort_IT+0x3cc>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d01d      	beq.n	80061c4 <HAL_DMA_Abort_IT+0x290>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a5d      	ldr	r2, [pc, #372]	; (8006304 <HAL_DMA_Abort_IT+0x3d0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d018      	beq.n	80061c4 <HAL_DMA_Abort_IT+0x290>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a5c      	ldr	r2, [pc, #368]	; (8006308 <HAL_DMA_Abort_IT+0x3d4>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d013      	beq.n	80061c4 <HAL_DMA_Abort_IT+0x290>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a5a      	ldr	r2, [pc, #360]	; (800630c <HAL_DMA_Abort_IT+0x3d8>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d00e      	beq.n	80061c4 <HAL_DMA_Abort_IT+0x290>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a59      	ldr	r2, [pc, #356]	; (8006310 <HAL_DMA_Abort_IT+0x3dc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d009      	beq.n	80061c4 <HAL_DMA_Abort_IT+0x290>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a57      	ldr	r2, [pc, #348]	; (8006314 <HAL_DMA_Abort_IT+0x3e0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d004      	beq.n	80061c4 <HAL_DMA_Abort_IT+0x290>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a56      	ldr	r2, [pc, #344]	; (8006318 <HAL_DMA_Abort_IT+0x3e4>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d108      	bne.n	80061d6 <HAL_DMA_Abort_IT+0x2a2>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 0201 	bic.w	r2, r2, #1
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	e007      	b.n	80061e6 <HAL_DMA_Abort_IT+0x2b2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0201 	bic.w	r2, r2, #1
 80061e4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a3c      	ldr	r2, [pc, #240]	; (80062dc <HAL_DMA_Abort_IT+0x3a8>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d072      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a3a      	ldr	r2, [pc, #232]	; (80062e0 <HAL_DMA_Abort_IT+0x3ac>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d06d      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a39      	ldr	r2, [pc, #228]	; (80062e4 <HAL_DMA_Abort_IT+0x3b0>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d068      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a37      	ldr	r2, [pc, #220]	; (80062e8 <HAL_DMA_Abort_IT+0x3b4>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d063      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a36      	ldr	r2, [pc, #216]	; (80062ec <HAL_DMA_Abort_IT+0x3b8>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d05e      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a34      	ldr	r2, [pc, #208]	; (80062f0 <HAL_DMA_Abort_IT+0x3bc>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d059      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a33      	ldr	r2, [pc, #204]	; (80062f4 <HAL_DMA_Abort_IT+0x3c0>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d054      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a31      	ldr	r2, [pc, #196]	; (80062f8 <HAL_DMA_Abort_IT+0x3c4>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d04f      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a30      	ldr	r2, [pc, #192]	; (80062fc <HAL_DMA_Abort_IT+0x3c8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d04a      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a2e      	ldr	r2, [pc, #184]	; (8006300 <HAL_DMA_Abort_IT+0x3cc>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d045      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a2d      	ldr	r2, [pc, #180]	; (8006304 <HAL_DMA_Abort_IT+0x3d0>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d040      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a2b      	ldr	r2, [pc, #172]	; (8006308 <HAL_DMA_Abort_IT+0x3d4>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d03b      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a2a      	ldr	r2, [pc, #168]	; (800630c <HAL_DMA_Abort_IT+0x3d8>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d036      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a28      	ldr	r2, [pc, #160]	; (8006310 <HAL_DMA_Abort_IT+0x3dc>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d031      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a27      	ldr	r2, [pc, #156]	; (8006314 <HAL_DMA_Abort_IT+0x3e0>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d02c      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a25      	ldr	r2, [pc, #148]	; (8006318 <HAL_DMA_Abort_IT+0x3e4>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d027      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a24      	ldr	r2, [pc, #144]	; (800631c <HAL_DMA_Abort_IT+0x3e8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d022      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a22      	ldr	r2, [pc, #136]	; (8006320 <HAL_DMA_Abort_IT+0x3ec>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d01d      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a21      	ldr	r2, [pc, #132]	; (8006324 <HAL_DMA_Abort_IT+0x3f0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d018      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a1f      	ldr	r2, [pc, #124]	; (8006328 <HAL_DMA_Abort_IT+0x3f4>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d013      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a1e      	ldr	r2, [pc, #120]	; (800632c <HAL_DMA_Abort_IT+0x3f8>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d00e      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a1c      	ldr	r2, [pc, #112]	; (8006330 <HAL_DMA_Abort_IT+0x3fc>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d009      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a1b      	ldr	r2, [pc, #108]	; (8006334 <HAL_DMA_Abort_IT+0x400>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d004      	beq.n	80062d6 <HAL_DMA_Abort_IT+0x3a2>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a19      	ldr	r2, [pc, #100]	; (8006338 <HAL_DMA_Abort_IT+0x404>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d132      	bne.n	800633c <HAL_DMA_Abort_IT+0x408>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e031      	b.n	800633e <HAL_DMA_Abort_IT+0x40a>
 80062da:	bf00      	nop
 80062dc:	40020010 	.word	0x40020010
 80062e0:	40020028 	.word	0x40020028
 80062e4:	40020040 	.word	0x40020040
 80062e8:	40020058 	.word	0x40020058
 80062ec:	40020070 	.word	0x40020070
 80062f0:	40020088 	.word	0x40020088
 80062f4:	400200a0 	.word	0x400200a0
 80062f8:	400200b8 	.word	0x400200b8
 80062fc:	40020410 	.word	0x40020410
 8006300:	40020428 	.word	0x40020428
 8006304:	40020440 	.word	0x40020440
 8006308:	40020458 	.word	0x40020458
 800630c:	40020470 	.word	0x40020470
 8006310:	40020488 	.word	0x40020488
 8006314:	400204a0 	.word	0x400204a0
 8006318:	400204b8 	.word	0x400204b8
 800631c:	58025408 	.word	0x58025408
 8006320:	5802541c 	.word	0x5802541c
 8006324:	58025430 	.word	0x58025430
 8006328:	58025444 	.word	0x58025444
 800632c:	58025458 	.word	0x58025458
 8006330:	5802546c 	.word	0x5802546c
 8006334:	58025480 	.word	0x58025480
 8006338:	58025494 	.word	0x58025494
 800633c:	2300      	movs	r3, #0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d028      	beq.n	8006394 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800634c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006350:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006356:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800635c:	f003 031f 	and.w	r3, r3, #31
 8006360:	2201      	movs	r2, #1
 8006362:	409a      	lsls	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006370:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00c      	beq.n	8006394 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006384:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006388:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006392:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop

080063c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b08a      	sub	sp, #40	; 0x28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80063c8:	2300      	movs	r3, #0
 80063ca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80063cc:	4b67      	ldr	r3, [pc, #412]	; (800656c <HAL_DMA_IRQHandler+0x1ac>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a67      	ldr	r2, [pc, #412]	; (8006570 <HAL_DMA_IRQHandler+0x1b0>)
 80063d2:	fba2 2303 	umull	r2, r3, r2, r3
 80063d6:	0a9b      	lsrs	r3, r3, #10
 80063d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063de:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a5f      	ldr	r2, [pc, #380]	; (8006574 <HAL_DMA_IRQHandler+0x1b4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d04a      	beq.n	8006492 <HAL_DMA_IRQHandler+0xd2>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a5d      	ldr	r2, [pc, #372]	; (8006578 <HAL_DMA_IRQHandler+0x1b8>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d045      	beq.n	8006492 <HAL_DMA_IRQHandler+0xd2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a5c      	ldr	r2, [pc, #368]	; (800657c <HAL_DMA_IRQHandler+0x1bc>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d040      	beq.n	8006492 <HAL_DMA_IRQHandler+0xd2>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a5a      	ldr	r2, [pc, #360]	; (8006580 <HAL_DMA_IRQHandler+0x1c0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d03b      	beq.n	8006492 <HAL_DMA_IRQHandler+0xd2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a59      	ldr	r2, [pc, #356]	; (8006584 <HAL_DMA_IRQHandler+0x1c4>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d036      	beq.n	8006492 <HAL_DMA_IRQHandler+0xd2>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a57      	ldr	r2, [pc, #348]	; (8006588 <HAL_DMA_IRQHandler+0x1c8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d031      	beq.n	8006492 <HAL_DMA_IRQHandler+0xd2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a56      	ldr	r2, [pc, #344]	; (800658c <HAL_DMA_IRQHandler+0x1cc>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d02c      	beq.n	8006492 <HAL_DMA_IRQHandler+0xd2>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a54      	ldr	r2, [pc, #336]	; (8006590 <HAL_DMA_IRQHandler+0x1d0>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d027      	beq.n	8006492 <HAL_DMA_IRQHandler+0xd2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a53      	ldr	r2, [pc, #332]	; (8006594 <HAL_DMA_IRQHandler+0x1d4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d022      	beq.n	8006492 <HAL_DMA_IRQHandler+0xd2>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a51      	ldr	r2, [pc, #324]	; (8006598 <HAL_DMA_IRQHandler+0x1d8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d01d      	beq.n	8006492 <HAL_DMA_IRQHandler+0xd2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a50      	ldr	r2, [pc, #320]	; (800659c <HAL_DMA_IRQHandler+0x1dc>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d018      	beq.n	8006492 <HAL_DMA_IRQHandler+0xd2>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a4e      	ldr	r2, [pc, #312]	; (80065a0 <HAL_DMA_IRQHandler+0x1e0>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d013      	beq.n	8006492 <HAL_DMA_IRQHandler+0xd2>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a4d      	ldr	r2, [pc, #308]	; (80065a4 <HAL_DMA_IRQHandler+0x1e4>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00e      	beq.n	8006492 <HAL_DMA_IRQHandler+0xd2>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a4b      	ldr	r2, [pc, #300]	; (80065a8 <HAL_DMA_IRQHandler+0x1e8>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d009      	beq.n	8006492 <HAL_DMA_IRQHandler+0xd2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a4a      	ldr	r2, [pc, #296]	; (80065ac <HAL_DMA_IRQHandler+0x1ec>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d004      	beq.n	8006492 <HAL_DMA_IRQHandler+0xd2>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a48      	ldr	r2, [pc, #288]	; (80065b0 <HAL_DMA_IRQHandler+0x1f0>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d101      	bne.n	8006496 <HAL_DMA_IRQHandler+0xd6>
 8006492:	2301      	movs	r3, #1
 8006494:	e000      	b.n	8006498 <HAL_DMA_IRQHandler+0xd8>
 8006496:	2300      	movs	r3, #0
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 842b 	beq.w	8006cf4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a2:	f003 031f 	and.w	r3, r3, #31
 80064a6:	2208      	movs	r2, #8
 80064a8:	409a      	lsls	r2, r3
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	4013      	ands	r3, r2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 80a2 	beq.w	80065f8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a2e      	ldr	r2, [pc, #184]	; (8006574 <HAL_DMA_IRQHandler+0x1b4>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d04a      	beq.n	8006554 <HAL_DMA_IRQHandler+0x194>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a2d      	ldr	r2, [pc, #180]	; (8006578 <HAL_DMA_IRQHandler+0x1b8>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d045      	beq.n	8006554 <HAL_DMA_IRQHandler+0x194>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a2b      	ldr	r2, [pc, #172]	; (800657c <HAL_DMA_IRQHandler+0x1bc>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d040      	beq.n	8006554 <HAL_DMA_IRQHandler+0x194>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a2a      	ldr	r2, [pc, #168]	; (8006580 <HAL_DMA_IRQHandler+0x1c0>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d03b      	beq.n	8006554 <HAL_DMA_IRQHandler+0x194>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a28      	ldr	r2, [pc, #160]	; (8006584 <HAL_DMA_IRQHandler+0x1c4>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d036      	beq.n	8006554 <HAL_DMA_IRQHandler+0x194>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a27      	ldr	r2, [pc, #156]	; (8006588 <HAL_DMA_IRQHandler+0x1c8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d031      	beq.n	8006554 <HAL_DMA_IRQHandler+0x194>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a25      	ldr	r2, [pc, #148]	; (800658c <HAL_DMA_IRQHandler+0x1cc>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d02c      	beq.n	8006554 <HAL_DMA_IRQHandler+0x194>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a24      	ldr	r2, [pc, #144]	; (8006590 <HAL_DMA_IRQHandler+0x1d0>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d027      	beq.n	8006554 <HAL_DMA_IRQHandler+0x194>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a22      	ldr	r2, [pc, #136]	; (8006594 <HAL_DMA_IRQHandler+0x1d4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d022      	beq.n	8006554 <HAL_DMA_IRQHandler+0x194>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a21      	ldr	r2, [pc, #132]	; (8006598 <HAL_DMA_IRQHandler+0x1d8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d01d      	beq.n	8006554 <HAL_DMA_IRQHandler+0x194>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a1f      	ldr	r2, [pc, #124]	; (800659c <HAL_DMA_IRQHandler+0x1dc>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d018      	beq.n	8006554 <HAL_DMA_IRQHandler+0x194>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a1e      	ldr	r2, [pc, #120]	; (80065a0 <HAL_DMA_IRQHandler+0x1e0>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d013      	beq.n	8006554 <HAL_DMA_IRQHandler+0x194>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a1c      	ldr	r2, [pc, #112]	; (80065a4 <HAL_DMA_IRQHandler+0x1e4>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d00e      	beq.n	8006554 <HAL_DMA_IRQHandler+0x194>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a1b      	ldr	r2, [pc, #108]	; (80065a8 <HAL_DMA_IRQHandler+0x1e8>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d009      	beq.n	8006554 <HAL_DMA_IRQHandler+0x194>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a19      	ldr	r2, [pc, #100]	; (80065ac <HAL_DMA_IRQHandler+0x1ec>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d004      	beq.n	8006554 <HAL_DMA_IRQHandler+0x194>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a18      	ldr	r2, [pc, #96]	; (80065b0 <HAL_DMA_IRQHandler+0x1f0>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d12f      	bne.n	80065b4 <HAL_DMA_IRQHandler+0x1f4>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0304 	and.w	r3, r3, #4
 800655e:	2b00      	cmp	r3, #0
 8006560:	bf14      	ite	ne
 8006562:	2301      	movne	r3, #1
 8006564:	2300      	moveq	r3, #0
 8006566:	b2db      	uxtb	r3, r3
 8006568:	e02e      	b.n	80065c8 <HAL_DMA_IRQHandler+0x208>
 800656a:	bf00      	nop
 800656c:	24000000 	.word	0x24000000
 8006570:	1b4e81b5 	.word	0x1b4e81b5
 8006574:	40020010 	.word	0x40020010
 8006578:	40020028 	.word	0x40020028
 800657c:	40020040 	.word	0x40020040
 8006580:	40020058 	.word	0x40020058
 8006584:	40020070 	.word	0x40020070
 8006588:	40020088 	.word	0x40020088
 800658c:	400200a0 	.word	0x400200a0
 8006590:	400200b8 	.word	0x400200b8
 8006594:	40020410 	.word	0x40020410
 8006598:	40020428 	.word	0x40020428
 800659c:	40020440 	.word	0x40020440
 80065a0:	40020458 	.word	0x40020458
 80065a4:	40020470 	.word	0x40020470
 80065a8:	40020488 	.word	0x40020488
 80065ac:	400204a0 	.word	0x400204a0
 80065b0:	400204b8 	.word	0x400204b8
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b00      	cmp	r3, #0
 80065c0:	bf14      	ite	ne
 80065c2:	2301      	movne	r3, #1
 80065c4:	2300      	moveq	r3, #0
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d015      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 0204 	bic.w	r2, r2, #4
 80065da:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e0:	f003 031f 	and.w	r3, r3, #31
 80065e4:	2208      	movs	r2, #8
 80065e6:	409a      	lsls	r2, r3
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f0:	f043 0201 	orr.w	r2, r3, #1
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fc:	f003 031f 	and.w	r3, r3, #31
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	fa22 f303 	lsr.w	r3, r2, r3
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d06e      	beq.n	80066ec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a69      	ldr	r2, [pc, #420]	; (80067b8 <HAL_DMA_IRQHandler+0x3f8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d04a      	beq.n	80066ae <HAL_DMA_IRQHandler+0x2ee>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a67      	ldr	r2, [pc, #412]	; (80067bc <HAL_DMA_IRQHandler+0x3fc>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d045      	beq.n	80066ae <HAL_DMA_IRQHandler+0x2ee>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a66      	ldr	r2, [pc, #408]	; (80067c0 <HAL_DMA_IRQHandler+0x400>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d040      	beq.n	80066ae <HAL_DMA_IRQHandler+0x2ee>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a64      	ldr	r2, [pc, #400]	; (80067c4 <HAL_DMA_IRQHandler+0x404>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d03b      	beq.n	80066ae <HAL_DMA_IRQHandler+0x2ee>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a63      	ldr	r2, [pc, #396]	; (80067c8 <HAL_DMA_IRQHandler+0x408>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d036      	beq.n	80066ae <HAL_DMA_IRQHandler+0x2ee>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a61      	ldr	r2, [pc, #388]	; (80067cc <HAL_DMA_IRQHandler+0x40c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d031      	beq.n	80066ae <HAL_DMA_IRQHandler+0x2ee>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a60      	ldr	r2, [pc, #384]	; (80067d0 <HAL_DMA_IRQHandler+0x410>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d02c      	beq.n	80066ae <HAL_DMA_IRQHandler+0x2ee>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a5e      	ldr	r2, [pc, #376]	; (80067d4 <HAL_DMA_IRQHandler+0x414>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d027      	beq.n	80066ae <HAL_DMA_IRQHandler+0x2ee>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a5d      	ldr	r2, [pc, #372]	; (80067d8 <HAL_DMA_IRQHandler+0x418>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d022      	beq.n	80066ae <HAL_DMA_IRQHandler+0x2ee>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a5b      	ldr	r2, [pc, #364]	; (80067dc <HAL_DMA_IRQHandler+0x41c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d01d      	beq.n	80066ae <HAL_DMA_IRQHandler+0x2ee>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a5a      	ldr	r2, [pc, #360]	; (80067e0 <HAL_DMA_IRQHandler+0x420>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d018      	beq.n	80066ae <HAL_DMA_IRQHandler+0x2ee>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a58      	ldr	r2, [pc, #352]	; (80067e4 <HAL_DMA_IRQHandler+0x424>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d013      	beq.n	80066ae <HAL_DMA_IRQHandler+0x2ee>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a57      	ldr	r2, [pc, #348]	; (80067e8 <HAL_DMA_IRQHandler+0x428>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d00e      	beq.n	80066ae <HAL_DMA_IRQHandler+0x2ee>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a55      	ldr	r2, [pc, #340]	; (80067ec <HAL_DMA_IRQHandler+0x42c>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d009      	beq.n	80066ae <HAL_DMA_IRQHandler+0x2ee>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a54      	ldr	r2, [pc, #336]	; (80067f0 <HAL_DMA_IRQHandler+0x430>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d004      	beq.n	80066ae <HAL_DMA_IRQHandler+0x2ee>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a52      	ldr	r2, [pc, #328]	; (80067f4 <HAL_DMA_IRQHandler+0x434>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d10a      	bne.n	80066c4 <HAL_DMA_IRQHandler+0x304>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	bf14      	ite	ne
 80066bc:	2301      	movne	r3, #1
 80066be:	2300      	moveq	r3, #0
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	e003      	b.n	80066cc <HAL_DMA_IRQHandler+0x30c>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2300      	movs	r3, #0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00d      	beq.n	80066ec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d4:	f003 031f 	and.w	r3, r3, #31
 80066d8:	2201      	movs	r2, #1
 80066da:	409a      	lsls	r2, r3
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e4:	f043 0202 	orr.w	r2, r3, #2
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f0:	f003 031f 	and.w	r3, r3, #31
 80066f4:	2204      	movs	r2, #4
 80066f6:	409a      	lsls	r2, r3
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	4013      	ands	r3, r2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 808f 	beq.w	8006820 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a2c      	ldr	r2, [pc, #176]	; (80067b8 <HAL_DMA_IRQHandler+0x3f8>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d04a      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x3e2>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a2a      	ldr	r2, [pc, #168]	; (80067bc <HAL_DMA_IRQHandler+0x3fc>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d045      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x3e2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a29      	ldr	r2, [pc, #164]	; (80067c0 <HAL_DMA_IRQHandler+0x400>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d040      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x3e2>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a27      	ldr	r2, [pc, #156]	; (80067c4 <HAL_DMA_IRQHandler+0x404>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d03b      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x3e2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a26      	ldr	r2, [pc, #152]	; (80067c8 <HAL_DMA_IRQHandler+0x408>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d036      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x3e2>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a24      	ldr	r2, [pc, #144]	; (80067cc <HAL_DMA_IRQHandler+0x40c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d031      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x3e2>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a23      	ldr	r2, [pc, #140]	; (80067d0 <HAL_DMA_IRQHandler+0x410>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d02c      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x3e2>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a21      	ldr	r2, [pc, #132]	; (80067d4 <HAL_DMA_IRQHandler+0x414>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d027      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x3e2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a20      	ldr	r2, [pc, #128]	; (80067d8 <HAL_DMA_IRQHandler+0x418>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d022      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x3e2>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a1e      	ldr	r2, [pc, #120]	; (80067dc <HAL_DMA_IRQHandler+0x41c>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d01d      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x3e2>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a1d      	ldr	r2, [pc, #116]	; (80067e0 <HAL_DMA_IRQHandler+0x420>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d018      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x3e2>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a1b      	ldr	r2, [pc, #108]	; (80067e4 <HAL_DMA_IRQHandler+0x424>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d013      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x3e2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a1a      	ldr	r2, [pc, #104]	; (80067e8 <HAL_DMA_IRQHandler+0x428>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d00e      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x3e2>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a18      	ldr	r2, [pc, #96]	; (80067ec <HAL_DMA_IRQHandler+0x42c>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d009      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x3e2>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a17      	ldr	r2, [pc, #92]	; (80067f0 <HAL_DMA_IRQHandler+0x430>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d004      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x3e2>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a15      	ldr	r2, [pc, #84]	; (80067f4 <HAL_DMA_IRQHandler+0x434>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d12a      	bne.n	80067f8 <HAL_DMA_IRQHandler+0x438>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	bf14      	ite	ne
 80067b0:	2301      	movne	r3, #1
 80067b2:	2300      	moveq	r3, #0
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	e023      	b.n	8006800 <HAL_DMA_IRQHandler+0x440>
 80067b8:	40020010 	.word	0x40020010
 80067bc:	40020028 	.word	0x40020028
 80067c0:	40020040 	.word	0x40020040
 80067c4:	40020058 	.word	0x40020058
 80067c8:	40020070 	.word	0x40020070
 80067cc:	40020088 	.word	0x40020088
 80067d0:	400200a0 	.word	0x400200a0
 80067d4:	400200b8 	.word	0x400200b8
 80067d8:	40020410 	.word	0x40020410
 80067dc:	40020428 	.word	0x40020428
 80067e0:	40020440 	.word	0x40020440
 80067e4:	40020458 	.word	0x40020458
 80067e8:	40020470 	.word	0x40020470
 80067ec:	40020488 	.word	0x40020488
 80067f0:	400204a0 	.word	0x400204a0
 80067f4:	400204b8 	.word	0x400204b8
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2300      	movs	r3, #0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00d      	beq.n	8006820 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006808:	f003 031f 	and.w	r3, r3, #31
 800680c:	2204      	movs	r2, #4
 800680e:	409a      	lsls	r2, r3
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006818:	f043 0204 	orr.w	r2, r3, #4
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006824:	f003 031f 	and.w	r3, r3, #31
 8006828:	2210      	movs	r2, #16
 800682a:	409a      	lsls	r2, r3
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	4013      	ands	r3, r2
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 80a6 	beq.w	8006982 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a85      	ldr	r2, [pc, #532]	; (8006a50 <HAL_DMA_IRQHandler+0x690>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d04a      	beq.n	80068d6 <HAL_DMA_IRQHandler+0x516>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a83      	ldr	r2, [pc, #524]	; (8006a54 <HAL_DMA_IRQHandler+0x694>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d045      	beq.n	80068d6 <HAL_DMA_IRQHandler+0x516>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a82      	ldr	r2, [pc, #520]	; (8006a58 <HAL_DMA_IRQHandler+0x698>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d040      	beq.n	80068d6 <HAL_DMA_IRQHandler+0x516>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a80      	ldr	r2, [pc, #512]	; (8006a5c <HAL_DMA_IRQHandler+0x69c>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d03b      	beq.n	80068d6 <HAL_DMA_IRQHandler+0x516>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a7f      	ldr	r2, [pc, #508]	; (8006a60 <HAL_DMA_IRQHandler+0x6a0>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d036      	beq.n	80068d6 <HAL_DMA_IRQHandler+0x516>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a7d      	ldr	r2, [pc, #500]	; (8006a64 <HAL_DMA_IRQHandler+0x6a4>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d031      	beq.n	80068d6 <HAL_DMA_IRQHandler+0x516>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a7c      	ldr	r2, [pc, #496]	; (8006a68 <HAL_DMA_IRQHandler+0x6a8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d02c      	beq.n	80068d6 <HAL_DMA_IRQHandler+0x516>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a7a      	ldr	r2, [pc, #488]	; (8006a6c <HAL_DMA_IRQHandler+0x6ac>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d027      	beq.n	80068d6 <HAL_DMA_IRQHandler+0x516>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a79      	ldr	r2, [pc, #484]	; (8006a70 <HAL_DMA_IRQHandler+0x6b0>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d022      	beq.n	80068d6 <HAL_DMA_IRQHandler+0x516>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a77      	ldr	r2, [pc, #476]	; (8006a74 <HAL_DMA_IRQHandler+0x6b4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d01d      	beq.n	80068d6 <HAL_DMA_IRQHandler+0x516>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a76      	ldr	r2, [pc, #472]	; (8006a78 <HAL_DMA_IRQHandler+0x6b8>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d018      	beq.n	80068d6 <HAL_DMA_IRQHandler+0x516>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a74      	ldr	r2, [pc, #464]	; (8006a7c <HAL_DMA_IRQHandler+0x6bc>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d013      	beq.n	80068d6 <HAL_DMA_IRQHandler+0x516>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a73      	ldr	r2, [pc, #460]	; (8006a80 <HAL_DMA_IRQHandler+0x6c0>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00e      	beq.n	80068d6 <HAL_DMA_IRQHandler+0x516>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a71      	ldr	r2, [pc, #452]	; (8006a84 <HAL_DMA_IRQHandler+0x6c4>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d009      	beq.n	80068d6 <HAL_DMA_IRQHandler+0x516>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a70      	ldr	r2, [pc, #448]	; (8006a88 <HAL_DMA_IRQHandler+0x6c8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d004      	beq.n	80068d6 <HAL_DMA_IRQHandler+0x516>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a6e      	ldr	r2, [pc, #440]	; (8006a8c <HAL_DMA_IRQHandler+0x6cc>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d10a      	bne.n	80068ec <HAL_DMA_IRQHandler+0x52c>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0308 	and.w	r3, r3, #8
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	bf14      	ite	ne
 80068e4:	2301      	movne	r3, #1
 80068e6:	2300      	moveq	r3, #0
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	e009      	b.n	8006900 <HAL_DMA_IRQHandler+0x540>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0304 	and.w	r3, r3, #4
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	bf14      	ite	ne
 80068fa:	2301      	movne	r3, #1
 80068fc:	2300      	moveq	r3, #0
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d03e      	beq.n	8006982 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006908:	f003 031f 	and.w	r3, r3, #31
 800690c:	2210      	movs	r2, #16
 800690e:	409a      	lsls	r2, r3
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d018      	beq.n	8006954 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d108      	bne.n	8006942 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006934:	2b00      	cmp	r3, #0
 8006936:	d024      	beq.n	8006982 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	4798      	blx	r3
 8006940:	e01f      	b.n	8006982 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006946:	2b00      	cmp	r3, #0
 8006948:	d01b      	beq.n	8006982 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	4798      	blx	r3
 8006952:	e016      	b.n	8006982 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695e:	2b00      	cmp	r3, #0
 8006960:	d107      	bne.n	8006972 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0208 	bic.w	r2, r2, #8
 8006970:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006986:	f003 031f 	and.w	r3, r3, #31
 800698a:	2220      	movs	r2, #32
 800698c:	409a      	lsls	r2, r3
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	4013      	ands	r3, r2
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 8110 	beq.w	8006bb8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a2c      	ldr	r2, [pc, #176]	; (8006a50 <HAL_DMA_IRQHandler+0x690>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d04a      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x678>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a2b      	ldr	r2, [pc, #172]	; (8006a54 <HAL_DMA_IRQHandler+0x694>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d045      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x678>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a29      	ldr	r2, [pc, #164]	; (8006a58 <HAL_DMA_IRQHandler+0x698>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d040      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x678>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a28      	ldr	r2, [pc, #160]	; (8006a5c <HAL_DMA_IRQHandler+0x69c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d03b      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x678>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a26      	ldr	r2, [pc, #152]	; (8006a60 <HAL_DMA_IRQHandler+0x6a0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d036      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x678>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a25      	ldr	r2, [pc, #148]	; (8006a64 <HAL_DMA_IRQHandler+0x6a4>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d031      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x678>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a23      	ldr	r2, [pc, #140]	; (8006a68 <HAL_DMA_IRQHandler+0x6a8>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d02c      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x678>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a22      	ldr	r2, [pc, #136]	; (8006a6c <HAL_DMA_IRQHandler+0x6ac>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d027      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x678>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a20      	ldr	r2, [pc, #128]	; (8006a70 <HAL_DMA_IRQHandler+0x6b0>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d022      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x678>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a1f      	ldr	r2, [pc, #124]	; (8006a74 <HAL_DMA_IRQHandler+0x6b4>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d01d      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x678>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a1d      	ldr	r2, [pc, #116]	; (8006a78 <HAL_DMA_IRQHandler+0x6b8>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d018      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x678>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a1c      	ldr	r2, [pc, #112]	; (8006a7c <HAL_DMA_IRQHandler+0x6bc>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d013      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x678>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a1a      	ldr	r2, [pc, #104]	; (8006a80 <HAL_DMA_IRQHandler+0x6c0>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d00e      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x678>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a19      	ldr	r2, [pc, #100]	; (8006a84 <HAL_DMA_IRQHandler+0x6c4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d009      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x678>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a17      	ldr	r2, [pc, #92]	; (8006a88 <HAL_DMA_IRQHandler+0x6c8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d004      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x678>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a16      	ldr	r2, [pc, #88]	; (8006a8c <HAL_DMA_IRQHandler+0x6cc>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d12b      	bne.n	8006a90 <HAL_DMA_IRQHandler+0x6d0>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0310 	and.w	r3, r3, #16
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	bf14      	ite	ne
 8006a46:	2301      	movne	r3, #1
 8006a48:	2300      	moveq	r3, #0
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	e02a      	b.n	8006aa4 <HAL_DMA_IRQHandler+0x6e4>
 8006a4e:	bf00      	nop
 8006a50:	40020010 	.word	0x40020010
 8006a54:	40020028 	.word	0x40020028
 8006a58:	40020040 	.word	0x40020040
 8006a5c:	40020058 	.word	0x40020058
 8006a60:	40020070 	.word	0x40020070
 8006a64:	40020088 	.word	0x40020088
 8006a68:	400200a0 	.word	0x400200a0
 8006a6c:	400200b8 	.word	0x400200b8
 8006a70:	40020410 	.word	0x40020410
 8006a74:	40020428 	.word	0x40020428
 8006a78:	40020440 	.word	0x40020440
 8006a7c:	40020458 	.word	0x40020458
 8006a80:	40020470 	.word	0x40020470
 8006a84:	40020488 	.word	0x40020488
 8006a88:	400204a0 	.word	0x400204a0
 8006a8c:	400204b8 	.word	0x400204b8
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0302 	and.w	r3, r3, #2
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	bf14      	ite	ne
 8006a9e:	2301      	movne	r3, #1
 8006aa0:	2300      	moveq	r3, #0
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 8087 	beq.w	8006bb8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aae:	f003 031f 	and.w	r3, r3, #31
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	409a      	lsls	r2, r3
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b04      	cmp	r3, #4
 8006ac4:	d139      	bne.n	8006b3a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f022 0216 	bic.w	r2, r2, #22
 8006ad4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	695a      	ldr	r2, [r3, #20]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ae4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d103      	bne.n	8006af6 <HAL_DMA_IRQHandler+0x736>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d007      	beq.n	8006b06 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0208 	bic.w	r2, r2, #8
 8006b04:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b0a:	f003 031f 	and.w	r3, r3, #31
 8006b0e:	223f      	movs	r2, #63	; 0x3f
 8006b10:	409a      	lsls	r2, r3
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 834a 	beq.w	80071c4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	4798      	blx	r3
          }
          return;
 8006b38:	e344      	b.n	80071c4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d018      	beq.n	8006b7a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d108      	bne.n	8006b68 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d02c      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	4798      	blx	r3
 8006b66:	e027      	b.n	8006bb8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d023      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	4798      	blx	r3
 8006b78:	e01e      	b.n	8006bb8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d10f      	bne.n	8006ba8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0210 	bic.w	r2, r2, #16
 8006b96:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d003      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 8306 	beq.w	80071ce <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 8088 	beq.w	8006ce0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2204      	movs	r2, #4
 8006bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a7a      	ldr	r2, [pc, #488]	; (8006dc8 <HAL_DMA_IRQHandler+0xa08>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d04a      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x8b8>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a79      	ldr	r2, [pc, #484]	; (8006dcc <HAL_DMA_IRQHandler+0xa0c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d045      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x8b8>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a77      	ldr	r2, [pc, #476]	; (8006dd0 <HAL_DMA_IRQHandler+0xa10>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d040      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x8b8>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a76      	ldr	r2, [pc, #472]	; (8006dd4 <HAL_DMA_IRQHandler+0xa14>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d03b      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x8b8>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a74      	ldr	r2, [pc, #464]	; (8006dd8 <HAL_DMA_IRQHandler+0xa18>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d036      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x8b8>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a73      	ldr	r2, [pc, #460]	; (8006ddc <HAL_DMA_IRQHandler+0xa1c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d031      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x8b8>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a71      	ldr	r2, [pc, #452]	; (8006de0 <HAL_DMA_IRQHandler+0xa20>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d02c      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x8b8>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a70      	ldr	r2, [pc, #448]	; (8006de4 <HAL_DMA_IRQHandler+0xa24>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d027      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x8b8>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a6e      	ldr	r2, [pc, #440]	; (8006de8 <HAL_DMA_IRQHandler+0xa28>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d022      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x8b8>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a6d      	ldr	r2, [pc, #436]	; (8006dec <HAL_DMA_IRQHandler+0xa2c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d01d      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x8b8>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a6b      	ldr	r2, [pc, #428]	; (8006df0 <HAL_DMA_IRQHandler+0xa30>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d018      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x8b8>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a6a      	ldr	r2, [pc, #424]	; (8006df4 <HAL_DMA_IRQHandler+0xa34>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d013      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x8b8>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a68      	ldr	r2, [pc, #416]	; (8006df8 <HAL_DMA_IRQHandler+0xa38>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d00e      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x8b8>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a67      	ldr	r2, [pc, #412]	; (8006dfc <HAL_DMA_IRQHandler+0xa3c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d009      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x8b8>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a65      	ldr	r2, [pc, #404]	; (8006e00 <HAL_DMA_IRQHandler+0xa40>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d004      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x8b8>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a64      	ldr	r2, [pc, #400]	; (8006e04 <HAL_DMA_IRQHandler+0xa44>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d108      	bne.n	8006c8a <HAL_DMA_IRQHandler+0x8ca>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0201 	bic.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	e007      	b.n	8006c9a <HAL_DMA_IRQHandler+0x8da>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 0201 	bic.w	r2, r2, #1
 8006c98:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d307      	bcc.n	8006cb6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1f2      	bne.n	8006c9a <HAL_DMA_IRQHandler+0x8da>
 8006cb4:	e000      	b.n	8006cb8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006cb6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d004      	beq.n	8006cd0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2203      	movs	r2, #3
 8006cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006cce:	e003      	b.n	8006cd8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 8272 	beq.w	80071ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	4798      	blx	r3
 8006cf2:	e26c      	b.n	80071ce <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a43      	ldr	r2, [pc, #268]	; (8006e08 <HAL_DMA_IRQHandler+0xa48>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d022      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x984>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a42      	ldr	r2, [pc, #264]	; (8006e0c <HAL_DMA_IRQHandler+0xa4c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d01d      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x984>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a40      	ldr	r2, [pc, #256]	; (8006e10 <HAL_DMA_IRQHandler+0xa50>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d018      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x984>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a3f      	ldr	r2, [pc, #252]	; (8006e14 <HAL_DMA_IRQHandler+0xa54>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d013      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x984>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a3d      	ldr	r2, [pc, #244]	; (8006e18 <HAL_DMA_IRQHandler+0xa58>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d00e      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x984>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a3c      	ldr	r2, [pc, #240]	; (8006e1c <HAL_DMA_IRQHandler+0xa5c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d009      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x984>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a3a      	ldr	r2, [pc, #232]	; (8006e20 <HAL_DMA_IRQHandler+0xa60>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d004      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x984>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a39      	ldr	r2, [pc, #228]	; (8006e24 <HAL_DMA_IRQHandler+0xa64>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d101      	bne.n	8006d48 <HAL_DMA_IRQHandler+0x988>
 8006d44:	2301      	movs	r3, #1
 8006d46:	e000      	b.n	8006d4a <HAL_DMA_IRQHandler+0x98a>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 823f 	beq.w	80071ce <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d5c:	f003 031f 	and.w	r3, r3, #31
 8006d60:	2204      	movs	r2, #4
 8006d62:	409a      	lsls	r2, r3
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	4013      	ands	r3, r2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 80cd 	beq.w	8006f08 <HAL_DMA_IRQHandler+0xb48>
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 80c7 	beq.w	8006f08 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d7e:	f003 031f 	and.w	r3, r3, #31
 8006d82:	2204      	movs	r2, #4
 8006d84:	409a      	lsls	r2, r3
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d049      	beq.n	8006e28 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d109      	bne.n	8006db2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 8210 	beq.w	80071c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006db0:	e20a      	b.n	80071c8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f000 8206 	beq.w	80071c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dc4:	e200      	b.n	80071c8 <HAL_DMA_IRQHandler+0xe08>
 8006dc6:	bf00      	nop
 8006dc8:	40020010 	.word	0x40020010
 8006dcc:	40020028 	.word	0x40020028
 8006dd0:	40020040 	.word	0x40020040
 8006dd4:	40020058 	.word	0x40020058
 8006dd8:	40020070 	.word	0x40020070
 8006ddc:	40020088 	.word	0x40020088
 8006de0:	400200a0 	.word	0x400200a0
 8006de4:	400200b8 	.word	0x400200b8
 8006de8:	40020410 	.word	0x40020410
 8006dec:	40020428 	.word	0x40020428
 8006df0:	40020440 	.word	0x40020440
 8006df4:	40020458 	.word	0x40020458
 8006df8:	40020470 	.word	0x40020470
 8006dfc:	40020488 	.word	0x40020488
 8006e00:	400204a0 	.word	0x400204a0
 8006e04:	400204b8 	.word	0x400204b8
 8006e08:	58025408 	.word	0x58025408
 8006e0c:	5802541c 	.word	0x5802541c
 8006e10:	58025430 	.word	0x58025430
 8006e14:	58025444 	.word	0x58025444
 8006e18:	58025458 	.word	0x58025458
 8006e1c:	5802546c 	.word	0x5802546c
 8006e20:	58025480 	.word	0x58025480
 8006e24:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f003 0320 	and.w	r3, r3, #32
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d160      	bne.n	8006ef4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a7f      	ldr	r2, [pc, #508]	; (8007034 <HAL_DMA_IRQHandler+0xc74>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d04a      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0xb12>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a7d      	ldr	r2, [pc, #500]	; (8007038 <HAL_DMA_IRQHandler+0xc78>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d045      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0xb12>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a7c      	ldr	r2, [pc, #496]	; (800703c <HAL_DMA_IRQHandler+0xc7c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d040      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0xb12>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a7a      	ldr	r2, [pc, #488]	; (8007040 <HAL_DMA_IRQHandler+0xc80>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d03b      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0xb12>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a79      	ldr	r2, [pc, #484]	; (8007044 <HAL_DMA_IRQHandler+0xc84>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d036      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0xb12>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a77      	ldr	r2, [pc, #476]	; (8007048 <HAL_DMA_IRQHandler+0xc88>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d031      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0xb12>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a76      	ldr	r2, [pc, #472]	; (800704c <HAL_DMA_IRQHandler+0xc8c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d02c      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0xb12>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a74      	ldr	r2, [pc, #464]	; (8007050 <HAL_DMA_IRQHandler+0xc90>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d027      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0xb12>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a73      	ldr	r2, [pc, #460]	; (8007054 <HAL_DMA_IRQHandler+0xc94>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d022      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0xb12>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a71      	ldr	r2, [pc, #452]	; (8007058 <HAL_DMA_IRQHandler+0xc98>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d01d      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0xb12>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a70      	ldr	r2, [pc, #448]	; (800705c <HAL_DMA_IRQHandler+0xc9c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d018      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0xb12>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a6e      	ldr	r2, [pc, #440]	; (8007060 <HAL_DMA_IRQHandler+0xca0>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d013      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0xb12>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a6d      	ldr	r2, [pc, #436]	; (8007064 <HAL_DMA_IRQHandler+0xca4>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d00e      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0xb12>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a6b      	ldr	r2, [pc, #428]	; (8007068 <HAL_DMA_IRQHandler+0xca8>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d009      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0xb12>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a6a      	ldr	r2, [pc, #424]	; (800706c <HAL_DMA_IRQHandler+0xcac>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d004      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0xb12>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a68      	ldr	r2, [pc, #416]	; (8007070 <HAL_DMA_IRQHandler+0xcb0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d108      	bne.n	8006ee4 <HAL_DMA_IRQHandler+0xb24>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f022 0208 	bic.w	r2, r2, #8
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	e007      	b.n	8006ef4 <HAL_DMA_IRQHandler+0xb34>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f022 0204 	bic.w	r2, r2, #4
 8006ef2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 8165 	beq.w	80071c8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f06:	e15f      	b.n	80071c8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f0c:	f003 031f 	and.w	r3, r3, #31
 8006f10:	2202      	movs	r2, #2
 8006f12:	409a      	lsls	r2, r3
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	4013      	ands	r3, r2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 80c5 	beq.w	80070a8 <HAL_DMA_IRQHandler+0xce8>
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 80bf 	beq.w	80070a8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f2e:	f003 031f 	and.w	r3, r3, #31
 8006f32:	2202      	movs	r2, #2
 8006f34:	409a      	lsls	r2, r3
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d018      	beq.n	8006f76 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d109      	bne.n	8006f62 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 813a 	beq.w	80071cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f60:	e134      	b.n	80071cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f000 8130 	beq.w	80071cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f74:	e12a      	b.n	80071cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f003 0320 	and.w	r3, r3, #32
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f040 8089 	bne.w	8007094 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a2b      	ldr	r2, [pc, #172]	; (8007034 <HAL_DMA_IRQHandler+0xc74>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d04a      	beq.n	8007022 <HAL_DMA_IRQHandler+0xc62>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a29      	ldr	r2, [pc, #164]	; (8007038 <HAL_DMA_IRQHandler+0xc78>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d045      	beq.n	8007022 <HAL_DMA_IRQHandler+0xc62>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a28      	ldr	r2, [pc, #160]	; (800703c <HAL_DMA_IRQHandler+0xc7c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d040      	beq.n	8007022 <HAL_DMA_IRQHandler+0xc62>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a26      	ldr	r2, [pc, #152]	; (8007040 <HAL_DMA_IRQHandler+0xc80>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d03b      	beq.n	8007022 <HAL_DMA_IRQHandler+0xc62>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a25      	ldr	r2, [pc, #148]	; (8007044 <HAL_DMA_IRQHandler+0xc84>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d036      	beq.n	8007022 <HAL_DMA_IRQHandler+0xc62>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a23      	ldr	r2, [pc, #140]	; (8007048 <HAL_DMA_IRQHandler+0xc88>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d031      	beq.n	8007022 <HAL_DMA_IRQHandler+0xc62>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a22      	ldr	r2, [pc, #136]	; (800704c <HAL_DMA_IRQHandler+0xc8c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d02c      	beq.n	8007022 <HAL_DMA_IRQHandler+0xc62>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a20      	ldr	r2, [pc, #128]	; (8007050 <HAL_DMA_IRQHandler+0xc90>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d027      	beq.n	8007022 <HAL_DMA_IRQHandler+0xc62>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a1f      	ldr	r2, [pc, #124]	; (8007054 <HAL_DMA_IRQHandler+0xc94>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d022      	beq.n	8007022 <HAL_DMA_IRQHandler+0xc62>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a1d      	ldr	r2, [pc, #116]	; (8007058 <HAL_DMA_IRQHandler+0xc98>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d01d      	beq.n	8007022 <HAL_DMA_IRQHandler+0xc62>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a1c      	ldr	r2, [pc, #112]	; (800705c <HAL_DMA_IRQHandler+0xc9c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d018      	beq.n	8007022 <HAL_DMA_IRQHandler+0xc62>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a1a      	ldr	r2, [pc, #104]	; (8007060 <HAL_DMA_IRQHandler+0xca0>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d013      	beq.n	8007022 <HAL_DMA_IRQHandler+0xc62>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a19      	ldr	r2, [pc, #100]	; (8007064 <HAL_DMA_IRQHandler+0xca4>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d00e      	beq.n	8007022 <HAL_DMA_IRQHandler+0xc62>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a17      	ldr	r2, [pc, #92]	; (8007068 <HAL_DMA_IRQHandler+0xca8>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d009      	beq.n	8007022 <HAL_DMA_IRQHandler+0xc62>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a16      	ldr	r2, [pc, #88]	; (800706c <HAL_DMA_IRQHandler+0xcac>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d004      	beq.n	8007022 <HAL_DMA_IRQHandler+0xc62>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a14      	ldr	r2, [pc, #80]	; (8007070 <HAL_DMA_IRQHandler+0xcb0>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d128      	bne.n	8007074 <HAL_DMA_IRQHandler+0xcb4>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0214 	bic.w	r2, r2, #20
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	e027      	b.n	8007084 <HAL_DMA_IRQHandler+0xcc4>
 8007034:	40020010 	.word	0x40020010
 8007038:	40020028 	.word	0x40020028
 800703c:	40020040 	.word	0x40020040
 8007040:	40020058 	.word	0x40020058
 8007044:	40020070 	.word	0x40020070
 8007048:	40020088 	.word	0x40020088
 800704c:	400200a0 	.word	0x400200a0
 8007050:	400200b8 	.word	0x400200b8
 8007054:	40020410 	.word	0x40020410
 8007058:	40020428 	.word	0x40020428
 800705c:	40020440 	.word	0x40020440
 8007060:	40020458 	.word	0x40020458
 8007064:	40020470 	.word	0x40020470
 8007068:	40020488 	.word	0x40020488
 800706c:	400204a0 	.word	0x400204a0
 8007070:	400204b8 	.word	0x400204b8
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 020a 	bic.w	r2, r2, #10
 8007082:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 8097 	beq.w	80071cc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070a6:	e091      	b.n	80071cc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ac:	f003 031f 	and.w	r3, r3, #31
 80070b0:	2208      	movs	r2, #8
 80070b2:	409a      	lsls	r2, r3
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	4013      	ands	r3, r2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f000 8088 	beq.w	80071ce <HAL_DMA_IRQHandler+0xe0e>
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	f003 0308 	and.w	r3, r3, #8
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 8082 	beq.w	80071ce <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a41      	ldr	r2, [pc, #260]	; (80071d4 <HAL_DMA_IRQHandler+0xe14>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d04a      	beq.n	800716a <HAL_DMA_IRQHandler+0xdaa>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a3f      	ldr	r2, [pc, #252]	; (80071d8 <HAL_DMA_IRQHandler+0xe18>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d045      	beq.n	800716a <HAL_DMA_IRQHandler+0xdaa>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a3e      	ldr	r2, [pc, #248]	; (80071dc <HAL_DMA_IRQHandler+0xe1c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d040      	beq.n	800716a <HAL_DMA_IRQHandler+0xdaa>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a3c      	ldr	r2, [pc, #240]	; (80071e0 <HAL_DMA_IRQHandler+0xe20>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d03b      	beq.n	800716a <HAL_DMA_IRQHandler+0xdaa>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a3b      	ldr	r2, [pc, #236]	; (80071e4 <HAL_DMA_IRQHandler+0xe24>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d036      	beq.n	800716a <HAL_DMA_IRQHandler+0xdaa>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a39      	ldr	r2, [pc, #228]	; (80071e8 <HAL_DMA_IRQHandler+0xe28>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d031      	beq.n	800716a <HAL_DMA_IRQHandler+0xdaa>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a38      	ldr	r2, [pc, #224]	; (80071ec <HAL_DMA_IRQHandler+0xe2c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d02c      	beq.n	800716a <HAL_DMA_IRQHandler+0xdaa>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a36      	ldr	r2, [pc, #216]	; (80071f0 <HAL_DMA_IRQHandler+0xe30>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d027      	beq.n	800716a <HAL_DMA_IRQHandler+0xdaa>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a35      	ldr	r2, [pc, #212]	; (80071f4 <HAL_DMA_IRQHandler+0xe34>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d022      	beq.n	800716a <HAL_DMA_IRQHandler+0xdaa>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a33      	ldr	r2, [pc, #204]	; (80071f8 <HAL_DMA_IRQHandler+0xe38>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d01d      	beq.n	800716a <HAL_DMA_IRQHandler+0xdaa>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a32      	ldr	r2, [pc, #200]	; (80071fc <HAL_DMA_IRQHandler+0xe3c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d018      	beq.n	800716a <HAL_DMA_IRQHandler+0xdaa>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a30      	ldr	r2, [pc, #192]	; (8007200 <HAL_DMA_IRQHandler+0xe40>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d013      	beq.n	800716a <HAL_DMA_IRQHandler+0xdaa>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a2f      	ldr	r2, [pc, #188]	; (8007204 <HAL_DMA_IRQHandler+0xe44>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d00e      	beq.n	800716a <HAL_DMA_IRQHandler+0xdaa>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a2d      	ldr	r2, [pc, #180]	; (8007208 <HAL_DMA_IRQHandler+0xe48>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d009      	beq.n	800716a <HAL_DMA_IRQHandler+0xdaa>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a2c      	ldr	r2, [pc, #176]	; (800720c <HAL_DMA_IRQHandler+0xe4c>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d004      	beq.n	800716a <HAL_DMA_IRQHandler+0xdaa>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a2a      	ldr	r2, [pc, #168]	; (8007210 <HAL_DMA_IRQHandler+0xe50>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d108      	bne.n	800717c <HAL_DMA_IRQHandler+0xdbc>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 021c 	bic.w	r2, r2, #28
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	e007      	b.n	800718c <HAL_DMA_IRQHandler+0xdcc>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 020e 	bic.w	r2, r2, #14
 800718a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007190:	f003 031f 	and.w	r3, r3, #31
 8007194:	2201      	movs	r2, #1
 8007196:	409a      	lsls	r2, r3
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d009      	beq.n	80071ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	4798      	blx	r3
 80071c2:	e004      	b.n	80071ce <HAL_DMA_IRQHandler+0xe0e>
          return;
 80071c4:	bf00      	nop
 80071c6:	e002      	b.n	80071ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071c8:	bf00      	nop
 80071ca:	e000      	b.n	80071ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071cc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80071ce:	3728      	adds	r7, #40	; 0x28
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	40020010 	.word	0x40020010
 80071d8:	40020028 	.word	0x40020028
 80071dc:	40020040 	.word	0x40020040
 80071e0:	40020058 	.word	0x40020058
 80071e4:	40020070 	.word	0x40020070
 80071e8:	40020088 	.word	0x40020088
 80071ec:	400200a0 	.word	0x400200a0
 80071f0:	400200b8 	.word	0x400200b8
 80071f4:	40020410 	.word	0x40020410
 80071f8:	40020428 	.word	0x40020428
 80071fc:	40020440 	.word	0x40020440
 8007200:	40020458 	.word	0x40020458
 8007204:	40020470 	.word	0x40020470
 8007208:	40020488 	.word	0x40020488
 800720c:	400204a0 	.word	0x400204a0
 8007210:	400204b8 	.word	0x400204b8

08007214 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
 8007220:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007226:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a7f      	ldr	r2, [pc, #508]	; (8007430 <DMA_SetConfig+0x21c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d072      	beq.n	800731e <DMA_SetConfig+0x10a>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a7d      	ldr	r2, [pc, #500]	; (8007434 <DMA_SetConfig+0x220>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d06d      	beq.n	800731e <DMA_SetConfig+0x10a>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a7c      	ldr	r2, [pc, #496]	; (8007438 <DMA_SetConfig+0x224>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d068      	beq.n	800731e <DMA_SetConfig+0x10a>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a7a      	ldr	r2, [pc, #488]	; (800743c <DMA_SetConfig+0x228>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d063      	beq.n	800731e <DMA_SetConfig+0x10a>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a79      	ldr	r2, [pc, #484]	; (8007440 <DMA_SetConfig+0x22c>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d05e      	beq.n	800731e <DMA_SetConfig+0x10a>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a77      	ldr	r2, [pc, #476]	; (8007444 <DMA_SetConfig+0x230>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d059      	beq.n	800731e <DMA_SetConfig+0x10a>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a76      	ldr	r2, [pc, #472]	; (8007448 <DMA_SetConfig+0x234>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d054      	beq.n	800731e <DMA_SetConfig+0x10a>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a74      	ldr	r2, [pc, #464]	; (800744c <DMA_SetConfig+0x238>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d04f      	beq.n	800731e <DMA_SetConfig+0x10a>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a73      	ldr	r2, [pc, #460]	; (8007450 <DMA_SetConfig+0x23c>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d04a      	beq.n	800731e <DMA_SetConfig+0x10a>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a71      	ldr	r2, [pc, #452]	; (8007454 <DMA_SetConfig+0x240>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d045      	beq.n	800731e <DMA_SetConfig+0x10a>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a70      	ldr	r2, [pc, #448]	; (8007458 <DMA_SetConfig+0x244>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d040      	beq.n	800731e <DMA_SetConfig+0x10a>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a6e      	ldr	r2, [pc, #440]	; (800745c <DMA_SetConfig+0x248>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d03b      	beq.n	800731e <DMA_SetConfig+0x10a>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a6d      	ldr	r2, [pc, #436]	; (8007460 <DMA_SetConfig+0x24c>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d036      	beq.n	800731e <DMA_SetConfig+0x10a>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a6b      	ldr	r2, [pc, #428]	; (8007464 <DMA_SetConfig+0x250>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d031      	beq.n	800731e <DMA_SetConfig+0x10a>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a6a      	ldr	r2, [pc, #424]	; (8007468 <DMA_SetConfig+0x254>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d02c      	beq.n	800731e <DMA_SetConfig+0x10a>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a68      	ldr	r2, [pc, #416]	; (800746c <DMA_SetConfig+0x258>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d027      	beq.n	800731e <DMA_SetConfig+0x10a>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a67      	ldr	r2, [pc, #412]	; (8007470 <DMA_SetConfig+0x25c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d022      	beq.n	800731e <DMA_SetConfig+0x10a>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a65      	ldr	r2, [pc, #404]	; (8007474 <DMA_SetConfig+0x260>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d01d      	beq.n	800731e <DMA_SetConfig+0x10a>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a64      	ldr	r2, [pc, #400]	; (8007478 <DMA_SetConfig+0x264>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d018      	beq.n	800731e <DMA_SetConfig+0x10a>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a62      	ldr	r2, [pc, #392]	; (800747c <DMA_SetConfig+0x268>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d013      	beq.n	800731e <DMA_SetConfig+0x10a>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a61      	ldr	r2, [pc, #388]	; (8007480 <DMA_SetConfig+0x26c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d00e      	beq.n	800731e <DMA_SetConfig+0x10a>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a5f      	ldr	r2, [pc, #380]	; (8007484 <DMA_SetConfig+0x270>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d009      	beq.n	800731e <DMA_SetConfig+0x10a>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a5e      	ldr	r2, [pc, #376]	; (8007488 <DMA_SetConfig+0x274>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d004      	beq.n	800731e <DMA_SetConfig+0x10a>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a5c      	ldr	r2, [pc, #368]	; (800748c <DMA_SetConfig+0x278>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d101      	bne.n	8007322 <DMA_SetConfig+0x10e>
 800731e:	2301      	movs	r3, #1
 8007320:	e000      	b.n	8007324 <DMA_SetConfig+0x110>
 8007322:	2300      	movs	r3, #0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00d      	beq.n	8007344 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007330:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007336:	2b00      	cmp	r3, #0
 8007338:	d004      	beq.n	8007344 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007342:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a39      	ldr	r2, [pc, #228]	; (8007430 <DMA_SetConfig+0x21c>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d04a      	beq.n	80073e4 <DMA_SetConfig+0x1d0>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a38      	ldr	r2, [pc, #224]	; (8007434 <DMA_SetConfig+0x220>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d045      	beq.n	80073e4 <DMA_SetConfig+0x1d0>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a36      	ldr	r2, [pc, #216]	; (8007438 <DMA_SetConfig+0x224>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d040      	beq.n	80073e4 <DMA_SetConfig+0x1d0>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a35      	ldr	r2, [pc, #212]	; (800743c <DMA_SetConfig+0x228>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d03b      	beq.n	80073e4 <DMA_SetConfig+0x1d0>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a33      	ldr	r2, [pc, #204]	; (8007440 <DMA_SetConfig+0x22c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d036      	beq.n	80073e4 <DMA_SetConfig+0x1d0>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a32      	ldr	r2, [pc, #200]	; (8007444 <DMA_SetConfig+0x230>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d031      	beq.n	80073e4 <DMA_SetConfig+0x1d0>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a30      	ldr	r2, [pc, #192]	; (8007448 <DMA_SetConfig+0x234>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d02c      	beq.n	80073e4 <DMA_SetConfig+0x1d0>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a2f      	ldr	r2, [pc, #188]	; (800744c <DMA_SetConfig+0x238>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d027      	beq.n	80073e4 <DMA_SetConfig+0x1d0>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a2d      	ldr	r2, [pc, #180]	; (8007450 <DMA_SetConfig+0x23c>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d022      	beq.n	80073e4 <DMA_SetConfig+0x1d0>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a2c      	ldr	r2, [pc, #176]	; (8007454 <DMA_SetConfig+0x240>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d01d      	beq.n	80073e4 <DMA_SetConfig+0x1d0>
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a2a      	ldr	r2, [pc, #168]	; (8007458 <DMA_SetConfig+0x244>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d018      	beq.n	80073e4 <DMA_SetConfig+0x1d0>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a29      	ldr	r2, [pc, #164]	; (800745c <DMA_SetConfig+0x248>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d013      	beq.n	80073e4 <DMA_SetConfig+0x1d0>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a27      	ldr	r2, [pc, #156]	; (8007460 <DMA_SetConfig+0x24c>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d00e      	beq.n	80073e4 <DMA_SetConfig+0x1d0>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a26      	ldr	r2, [pc, #152]	; (8007464 <DMA_SetConfig+0x250>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d009      	beq.n	80073e4 <DMA_SetConfig+0x1d0>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a24      	ldr	r2, [pc, #144]	; (8007468 <DMA_SetConfig+0x254>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d004      	beq.n	80073e4 <DMA_SetConfig+0x1d0>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a23      	ldr	r2, [pc, #140]	; (800746c <DMA_SetConfig+0x258>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d101      	bne.n	80073e8 <DMA_SetConfig+0x1d4>
 80073e4:	2301      	movs	r3, #1
 80073e6:	e000      	b.n	80073ea <DMA_SetConfig+0x1d6>
 80073e8:	2300      	movs	r3, #0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d059      	beq.n	80074a2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f2:	f003 031f 	and.w	r3, r3, #31
 80073f6:	223f      	movs	r2, #63	; 0x3f
 80073f8:	409a      	lsls	r2, r3
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800740c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	2b40      	cmp	r3, #64	; 0x40
 800741c:	d138      	bne.n	8007490 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800742e:	e086      	b.n	800753e <DMA_SetConfig+0x32a>
 8007430:	40020010 	.word	0x40020010
 8007434:	40020028 	.word	0x40020028
 8007438:	40020040 	.word	0x40020040
 800743c:	40020058 	.word	0x40020058
 8007440:	40020070 	.word	0x40020070
 8007444:	40020088 	.word	0x40020088
 8007448:	400200a0 	.word	0x400200a0
 800744c:	400200b8 	.word	0x400200b8
 8007450:	40020410 	.word	0x40020410
 8007454:	40020428 	.word	0x40020428
 8007458:	40020440 	.word	0x40020440
 800745c:	40020458 	.word	0x40020458
 8007460:	40020470 	.word	0x40020470
 8007464:	40020488 	.word	0x40020488
 8007468:	400204a0 	.word	0x400204a0
 800746c:	400204b8 	.word	0x400204b8
 8007470:	58025408 	.word	0x58025408
 8007474:	5802541c 	.word	0x5802541c
 8007478:	58025430 	.word	0x58025430
 800747c:	58025444 	.word	0x58025444
 8007480:	58025458 	.word	0x58025458
 8007484:	5802546c 	.word	0x5802546c
 8007488:	58025480 	.word	0x58025480
 800748c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	60da      	str	r2, [r3, #12]
}
 80074a0:	e04d      	b.n	800753e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a29      	ldr	r2, [pc, #164]	; (800754c <DMA_SetConfig+0x338>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d022      	beq.n	80074f2 <DMA_SetConfig+0x2de>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a27      	ldr	r2, [pc, #156]	; (8007550 <DMA_SetConfig+0x33c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d01d      	beq.n	80074f2 <DMA_SetConfig+0x2de>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a26      	ldr	r2, [pc, #152]	; (8007554 <DMA_SetConfig+0x340>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d018      	beq.n	80074f2 <DMA_SetConfig+0x2de>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a24      	ldr	r2, [pc, #144]	; (8007558 <DMA_SetConfig+0x344>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d013      	beq.n	80074f2 <DMA_SetConfig+0x2de>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a23      	ldr	r2, [pc, #140]	; (800755c <DMA_SetConfig+0x348>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d00e      	beq.n	80074f2 <DMA_SetConfig+0x2de>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a21      	ldr	r2, [pc, #132]	; (8007560 <DMA_SetConfig+0x34c>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d009      	beq.n	80074f2 <DMA_SetConfig+0x2de>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a20      	ldr	r2, [pc, #128]	; (8007564 <DMA_SetConfig+0x350>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d004      	beq.n	80074f2 <DMA_SetConfig+0x2de>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a1e      	ldr	r2, [pc, #120]	; (8007568 <DMA_SetConfig+0x354>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d101      	bne.n	80074f6 <DMA_SetConfig+0x2e2>
 80074f2:	2301      	movs	r3, #1
 80074f4:	e000      	b.n	80074f8 <DMA_SetConfig+0x2e4>
 80074f6:	2300      	movs	r3, #0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d020      	beq.n	800753e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007500:	f003 031f 	and.w	r3, r3, #31
 8007504:	2201      	movs	r2, #1
 8007506:	409a      	lsls	r2, r3
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	2b40      	cmp	r3, #64	; 0x40
 800751a:	d108      	bne.n	800752e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	60da      	str	r2, [r3, #12]
}
 800752c:	e007      	b.n	800753e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	60da      	str	r2, [r3, #12]
}
 800753e:	bf00      	nop
 8007540:	371c      	adds	r7, #28
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	58025408 	.word	0x58025408
 8007550:	5802541c 	.word	0x5802541c
 8007554:	58025430 	.word	0x58025430
 8007558:	58025444 	.word	0x58025444
 800755c:	58025458 	.word	0x58025458
 8007560:	5802546c 	.word	0x5802546c
 8007564:	58025480 	.word	0x58025480
 8007568:	58025494 	.word	0x58025494

0800756c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a42      	ldr	r2, [pc, #264]	; (8007684 <DMA_CalcBaseAndBitshift+0x118>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d04a      	beq.n	8007614 <DMA_CalcBaseAndBitshift+0xa8>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a41      	ldr	r2, [pc, #260]	; (8007688 <DMA_CalcBaseAndBitshift+0x11c>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d045      	beq.n	8007614 <DMA_CalcBaseAndBitshift+0xa8>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a3f      	ldr	r2, [pc, #252]	; (800768c <DMA_CalcBaseAndBitshift+0x120>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d040      	beq.n	8007614 <DMA_CalcBaseAndBitshift+0xa8>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a3e      	ldr	r2, [pc, #248]	; (8007690 <DMA_CalcBaseAndBitshift+0x124>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d03b      	beq.n	8007614 <DMA_CalcBaseAndBitshift+0xa8>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a3c      	ldr	r2, [pc, #240]	; (8007694 <DMA_CalcBaseAndBitshift+0x128>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d036      	beq.n	8007614 <DMA_CalcBaseAndBitshift+0xa8>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a3b      	ldr	r2, [pc, #236]	; (8007698 <DMA_CalcBaseAndBitshift+0x12c>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d031      	beq.n	8007614 <DMA_CalcBaseAndBitshift+0xa8>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a39      	ldr	r2, [pc, #228]	; (800769c <DMA_CalcBaseAndBitshift+0x130>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d02c      	beq.n	8007614 <DMA_CalcBaseAndBitshift+0xa8>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a38      	ldr	r2, [pc, #224]	; (80076a0 <DMA_CalcBaseAndBitshift+0x134>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d027      	beq.n	8007614 <DMA_CalcBaseAndBitshift+0xa8>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a36      	ldr	r2, [pc, #216]	; (80076a4 <DMA_CalcBaseAndBitshift+0x138>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d022      	beq.n	8007614 <DMA_CalcBaseAndBitshift+0xa8>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a35      	ldr	r2, [pc, #212]	; (80076a8 <DMA_CalcBaseAndBitshift+0x13c>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d01d      	beq.n	8007614 <DMA_CalcBaseAndBitshift+0xa8>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a33      	ldr	r2, [pc, #204]	; (80076ac <DMA_CalcBaseAndBitshift+0x140>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d018      	beq.n	8007614 <DMA_CalcBaseAndBitshift+0xa8>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a32      	ldr	r2, [pc, #200]	; (80076b0 <DMA_CalcBaseAndBitshift+0x144>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d013      	beq.n	8007614 <DMA_CalcBaseAndBitshift+0xa8>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a30      	ldr	r2, [pc, #192]	; (80076b4 <DMA_CalcBaseAndBitshift+0x148>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d00e      	beq.n	8007614 <DMA_CalcBaseAndBitshift+0xa8>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a2f      	ldr	r2, [pc, #188]	; (80076b8 <DMA_CalcBaseAndBitshift+0x14c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d009      	beq.n	8007614 <DMA_CalcBaseAndBitshift+0xa8>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a2d      	ldr	r2, [pc, #180]	; (80076bc <DMA_CalcBaseAndBitshift+0x150>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d004      	beq.n	8007614 <DMA_CalcBaseAndBitshift+0xa8>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a2c      	ldr	r2, [pc, #176]	; (80076c0 <DMA_CalcBaseAndBitshift+0x154>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d101      	bne.n	8007618 <DMA_CalcBaseAndBitshift+0xac>
 8007614:	2301      	movs	r3, #1
 8007616:	e000      	b.n	800761a <DMA_CalcBaseAndBitshift+0xae>
 8007618:	2300      	movs	r3, #0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d024      	beq.n	8007668 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	b2db      	uxtb	r3, r3
 8007624:	3b10      	subs	r3, #16
 8007626:	4a27      	ldr	r2, [pc, #156]	; (80076c4 <DMA_CalcBaseAndBitshift+0x158>)
 8007628:	fba2 2303 	umull	r2, r3, r2, r3
 800762c:	091b      	lsrs	r3, r3, #4
 800762e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f003 0307 	and.w	r3, r3, #7
 8007636:	4a24      	ldr	r2, [pc, #144]	; (80076c8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007638:	5cd3      	ldrb	r3, [r2, r3]
 800763a:	461a      	mov	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2b03      	cmp	r3, #3
 8007644:	d908      	bls.n	8007658 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	461a      	mov	r2, r3
 800764c:	4b1f      	ldr	r3, [pc, #124]	; (80076cc <DMA_CalcBaseAndBitshift+0x160>)
 800764e:	4013      	ands	r3, r2
 8007650:	1d1a      	adds	r2, r3, #4
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	659a      	str	r2, [r3, #88]	; 0x58
 8007656:	e00d      	b.n	8007674 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	461a      	mov	r2, r3
 800765e:	4b1b      	ldr	r3, [pc, #108]	; (80076cc <DMA_CalcBaseAndBitshift+0x160>)
 8007660:	4013      	ands	r3, r2
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	6593      	str	r3, [r2, #88]	; 0x58
 8007666:	e005      	b.n	8007674 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007678:	4618      	mov	r0, r3
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	40020010 	.word	0x40020010
 8007688:	40020028 	.word	0x40020028
 800768c:	40020040 	.word	0x40020040
 8007690:	40020058 	.word	0x40020058
 8007694:	40020070 	.word	0x40020070
 8007698:	40020088 	.word	0x40020088
 800769c:	400200a0 	.word	0x400200a0
 80076a0:	400200b8 	.word	0x400200b8
 80076a4:	40020410 	.word	0x40020410
 80076a8:	40020428 	.word	0x40020428
 80076ac:	40020440 	.word	0x40020440
 80076b0:	40020458 	.word	0x40020458
 80076b4:	40020470 	.word	0x40020470
 80076b8:	40020488 	.word	0x40020488
 80076bc:	400204a0 	.word	0x400204a0
 80076c0:	400204b8 	.word	0x400204b8
 80076c4:	aaaaaaab 	.word	0xaaaaaaab
 80076c8:	0800e1b8 	.word	0x0800e1b8
 80076cc:	fffffc00 	.word	0xfffffc00

080076d0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076d8:	2300      	movs	r3, #0
 80076da:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d120      	bne.n	8007726 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e8:	2b03      	cmp	r3, #3
 80076ea:	d858      	bhi.n	800779e <DMA_CheckFifoParam+0xce>
 80076ec:	a201      	add	r2, pc, #4	; (adr r2, 80076f4 <DMA_CheckFifoParam+0x24>)
 80076ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f2:	bf00      	nop
 80076f4:	08007705 	.word	0x08007705
 80076f8:	08007717 	.word	0x08007717
 80076fc:	08007705 	.word	0x08007705
 8007700:	0800779f 	.word	0x0800779f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d048      	beq.n	80077a2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007714:	e045      	b.n	80077a2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800771e:	d142      	bne.n	80077a6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007724:	e03f      	b.n	80077a6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800772e:	d123      	bne.n	8007778 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007734:	2b03      	cmp	r3, #3
 8007736:	d838      	bhi.n	80077aa <DMA_CheckFifoParam+0xda>
 8007738:	a201      	add	r2, pc, #4	; (adr r2, 8007740 <DMA_CheckFifoParam+0x70>)
 800773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773e:	bf00      	nop
 8007740:	08007751 	.word	0x08007751
 8007744:	08007757 	.word	0x08007757
 8007748:	08007751 	.word	0x08007751
 800774c:	08007769 	.word	0x08007769
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	73fb      	strb	r3, [r7, #15]
        break;
 8007754:	e030      	b.n	80077b8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d025      	beq.n	80077ae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007766:	e022      	b.n	80077ae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007770:	d11f      	bne.n	80077b2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007776:	e01c      	b.n	80077b2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777c:	2b02      	cmp	r3, #2
 800777e:	d902      	bls.n	8007786 <DMA_CheckFifoParam+0xb6>
 8007780:	2b03      	cmp	r3, #3
 8007782:	d003      	beq.n	800778c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007784:	e018      	b.n	80077b8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	73fb      	strb	r3, [r7, #15]
        break;
 800778a:	e015      	b.n	80077b8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007790:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00e      	beq.n	80077b6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	73fb      	strb	r3, [r7, #15]
    break;
 800779c:	e00b      	b.n	80077b6 <DMA_CheckFifoParam+0xe6>
        break;
 800779e:	bf00      	nop
 80077a0:	e00a      	b.n	80077b8 <DMA_CheckFifoParam+0xe8>
        break;
 80077a2:	bf00      	nop
 80077a4:	e008      	b.n	80077b8 <DMA_CheckFifoParam+0xe8>
        break;
 80077a6:	bf00      	nop
 80077a8:	e006      	b.n	80077b8 <DMA_CheckFifoParam+0xe8>
        break;
 80077aa:	bf00      	nop
 80077ac:	e004      	b.n	80077b8 <DMA_CheckFifoParam+0xe8>
        break;
 80077ae:	bf00      	nop
 80077b0:	e002      	b.n	80077b8 <DMA_CheckFifoParam+0xe8>
        break;
 80077b2:	bf00      	nop
 80077b4:	e000      	b.n	80077b8 <DMA_CheckFifoParam+0xe8>
    break;
 80077b6:	bf00      	nop
    }
  }

  return status;
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop

080077c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a38      	ldr	r2, [pc, #224]	; (80078bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d022      	beq.n	8007826 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a36      	ldr	r2, [pc, #216]	; (80078c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d01d      	beq.n	8007826 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a35      	ldr	r2, [pc, #212]	; (80078c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d018      	beq.n	8007826 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a33      	ldr	r2, [pc, #204]	; (80078c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d013      	beq.n	8007826 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a32      	ldr	r2, [pc, #200]	; (80078cc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d00e      	beq.n	8007826 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a30      	ldr	r2, [pc, #192]	; (80078d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d009      	beq.n	8007826 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a2f      	ldr	r2, [pc, #188]	; (80078d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d004      	beq.n	8007826 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a2d      	ldr	r2, [pc, #180]	; (80078d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d101      	bne.n	800782a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007826:	2301      	movs	r3, #1
 8007828:	e000      	b.n	800782c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800782a:	2300      	movs	r3, #0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d01a      	beq.n	8007866 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	b2db      	uxtb	r3, r3
 8007836:	3b08      	subs	r3, #8
 8007838:	4a28      	ldr	r2, [pc, #160]	; (80078dc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800783a:	fba2 2303 	umull	r2, r3, r2, r3
 800783e:	091b      	lsrs	r3, r3, #4
 8007840:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	4b26      	ldr	r3, [pc, #152]	; (80078e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007846:	4413      	add	r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	461a      	mov	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a24      	ldr	r2, [pc, #144]	; (80078e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007854:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f003 031f 	and.w	r3, r3, #31
 800785c:	2201      	movs	r2, #1
 800785e:	409a      	lsls	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007864:	e024      	b.n	80078b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	b2db      	uxtb	r3, r3
 800786c:	3b10      	subs	r3, #16
 800786e:	4a1e      	ldr	r2, [pc, #120]	; (80078e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007870:	fba2 2303 	umull	r2, r3, r2, r3
 8007874:	091b      	lsrs	r3, r3, #4
 8007876:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	4a1c      	ldr	r2, [pc, #112]	; (80078ec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d806      	bhi.n	800788e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	4a1b      	ldr	r2, [pc, #108]	; (80078f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d902      	bls.n	800788e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	3308      	adds	r3, #8
 800788c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	4b18      	ldr	r3, [pc, #96]	; (80078f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007892:	4413      	add	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	461a      	mov	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a16      	ldr	r2, [pc, #88]	; (80078f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80078a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f003 031f 	and.w	r3, r3, #31
 80078a8:	2201      	movs	r2, #1
 80078aa:	409a      	lsls	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	669a      	str	r2, [r3, #104]	; 0x68
}
 80078b0:	bf00      	nop
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	58025408 	.word	0x58025408
 80078c0:	5802541c 	.word	0x5802541c
 80078c4:	58025430 	.word	0x58025430
 80078c8:	58025444 	.word	0x58025444
 80078cc:	58025458 	.word	0x58025458
 80078d0:	5802546c 	.word	0x5802546c
 80078d4:	58025480 	.word	0x58025480
 80078d8:	58025494 	.word	0x58025494
 80078dc:	cccccccd 	.word	0xcccccccd
 80078e0:	16009600 	.word	0x16009600
 80078e4:	58025880 	.word	0x58025880
 80078e8:	aaaaaaab 	.word	0xaaaaaaab
 80078ec:	400204b8 	.word	0x400204b8
 80078f0:	4002040f 	.word	0x4002040f
 80078f4:	10008200 	.word	0x10008200
 80078f8:	40020880 	.word	0x40020880

080078fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	b2db      	uxtb	r3, r3
 800790a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d04a      	beq.n	80079a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2b08      	cmp	r3, #8
 8007916:	d847      	bhi.n	80079a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a25      	ldr	r2, [pc, #148]	; (80079b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d022      	beq.n	8007968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a24      	ldr	r2, [pc, #144]	; (80079b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d01d      	beq.n	8007968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a22      	ldr	r2, [pc, #136]	; (80079bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d018      	beq.n	8007968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a21      	ldr	r2, [pc, #132]	; (80079c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d013      	beq.n	8007968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a1f      	ldr	r2, [pc, #124]	; (80079c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d00e      	beq.n	8007968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a1e      	ldr	r2, [pc, #120]	; (80079c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d009      	beq.n	8007968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a1c      	ldr	r2, [pc, #112]	; (80079cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d004      	beq.n	8007968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a1b      	ldr	r2, [pc, #108]	; (80079d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d101      	bne.n	800796c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007968:	2301      	movs	r3, #1
 800796a:	e000      	b.n	800796e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800796c:	2300      	movs	r3, #0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00a      	beq.n	8007988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	4b17      	ldr	r3, [pc, #92]	; (80079d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007976:	4413      	add	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	461a      	mov	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a15      	ldr	r2, [pc, #84]	; (80079d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007984:	671a      	str	r2, [r3, #112]	; 0x70
 8007986:	e009      	b.n	800799c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	4b14      	ldr	r3, [pc, #80]	; (80079dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800798c:	4413      	add	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	461a      	mov	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a11      	ldr	r2, [pc, #68]	; (80079e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800799a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	3b01      	subs	r3, #1
 80079a0:	2201      	movs	r2, #1
 80079a2:	409a      	lsls	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80079a8:	bf00      	nop
 80079aa:	3714      	adds	r7, #20
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr
 80079b4:	58025408 	.word	0x58025408
 80079b8:	5802541c 	.word	0x5802541c
 80079bc:	58025430 	.word	0x58025430
 80079c0:	58025444 	.word	0x58025444
 80079c4:	58025458 	.word	0x58025458
 80079c8:	5802546c 	.word	0x5802546c
 80079cc:	58025480 	.word	0x58025480
 80079d0:	58025494 	.word	0x58025494
 80079d4:	1600963f 	.word	0x1600963f
 80079d8:	58025940 	.word	0x58025940
 80079dc:	1000823f 	.word	0x1000823f
 80079e0:	40020940 	.word	0x40020940

080079e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b089      	sub	sp, #36	; 0x24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80079f2:	4b86      	ldr	r3, [pc, #536]	; (8007c0c <HAL_GPIO_Init+0x228>)
 80079f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80079f6:	e18c      	b.n	8007d12 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	2101      	movs	r1, #1
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	fa01 f303 	lsl.w	r3, r1, r3
 8007a04:	4013      	ands	r3, r2
 8007a06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 817e 	beq.w	8007d0c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	f003 0303 	and.w	r3, r3, #3
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d005      	beq.n	8007a28 <HAL_GPIO_Init+0x44>
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f003 0303 	and.w	r3, r3, #3
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d130      	bne.n	8007a8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	005b      	lsls	r3, r3, #1
 8007a32:	2203      	movs	r2, #3
 8007a34:	fa02 f303 	lsl.w	r3, r2, r3
 8007a38:	43db      	mvns	r3, r3
 8007a3a:	69ba      	ldr	r2, [r7, #24]
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	68da      	ldr	r2, [r3, #12]
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	005b      	lsls	r3, r3, #1
 8007a48:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a5e:	2201      	movs	r2, #1
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	fa02 f303 	lsl.w	r3, r2, r3
 8007a66:	43db      	mvns	r3, r3
 8007a68:	69ba      	ldr	r2, [r7, #24]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	091b      	lsrs	r3, r3, #4
 8007a74:	f003 0201 	and.w	r2, r3, #1
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	69ba      	ldr	r2, [r7, #24]
 8007a88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f003 0303 	and.w	r3, r3, #3
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d017      	beq.n	8007ac6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	005b      	lsls	r3, r3, #1
 8007aa0:	2203      	movs	r2, #3
 8007aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa6:	43db      	mvns	r3, r3
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	689a      	ldr	r2, [r3, #8]
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aba:	69ba      	ldr	r2, [r7, #24]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	69ba      	ldr	r2, [r7, #24]
 8007ac4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f003 0303 	and.w	r3, r3, #3
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d123      	bne.n	8007b1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	08da      	lsrs	r2, r3, #3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	3208      	adds	r2, #8
 8007ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	f003 0307 	and.w	r3, r3, #7
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	220f      	movs	r2, #15
 8007aea:	fa02 f303 	lsl.w	r3, r2, r3
 8007aee:	43db      	mvns	r3, r3
 8007af0:	69ba      	ldr	r2, [r7, #24]
 8007af2:	4013      	ands	r3, r2
 8007af4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	691a      	ldr	r2, [r3, #16]
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	f003 0307 	and.w	r3, r3, #7
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	fa02 f303 	lsl.w	r3, r2, r3
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	08da      	lsrs	r2, r3, #3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3208      	adds	r2, #8
 8007b14:	69b9      	ldr	r1, [r7, #24]
 8007b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	005b      	lsls	r3, r3, #1
 8007b24:	2203      	movs	r2, #3
 8007b26:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2a:	43db      	mvns	r3, r3
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	4013      	ands	r3, r2
 8007b30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f003 0203 	and.w	r2, r3, #3
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	005b      	lsls	r3, r3, #1
 8007b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b42:	69ba      	ldr	r2, [r7, #24]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	69ba      	ldr	r2, [r7, #24]
 8007b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f000 80d8 	beq.w	8007d0c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b5c:	4b2c      	ldr	r3, [pc, #176]	; (8007c10 <HAL_GPIO_Init+0x22c>)
 8007b5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b62:	4a2b      	ldr	r2, [pc, #172]	; (8007c10 <HAL_GPIO_Init+0x22c>)
 8007b64:	f043 0302 	orr.w	r3, r3, #2
 8007b68:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007b6c:	4b28      	ldr	r3, [pc, #160]	; (8007c10 <HAL_GPIO_Init+0x22c>)
 8007b6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b72:	f003 0302 	and.w	r3, r3, #2
 8007b76:	60fb      	str	r3, [r7, #12]
 8007b78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b7a:	4a26      	ldr	r2, [pc, #152]	; (8007c14 <HAL_GPIO_Init+0x230>)
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	089b      	lsrs	r3, r3, #2
 8007b80:	3302      	adds	r3, #2
 8007b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	f003 0303 	and.w	r3, r3, #3
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	220f      	movs	r2, #15
 8007b92:	fa02 f303 	lsl.w	r3, r2, r3
 8007b96:	43db      	mvns	r3, r3
 8007b98:	69ba      	ldr	r2, [r7, #24]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a1d      	ldr	r2, [pc, #116]	; (8007c18 <HAL_GPIO_Init+0x234>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d04a      	beq.n	8007c3c <HAL_GPIO_Init+0x258>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a1c      	ldr	r2, [pc, #112]	; (8007c1c <HAL_GPIO_Init+0x238>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d02b      	beq.n	8007c06 <HAL_GPIO_Init+0x222>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a1b      	ldr	r2, [pc, #108]	; (8007c20 <HAL_GPIO_Init+0x23c>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d025      	beq.n	8007c02 <HAL_GPIO_Init+0x21e>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a1a      	ldr	r2, [pc, #104]	; (8007c24 <HAL_GPIO_Init+0x240>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d01f      	beq.n	8007bfe <HAL_GPIO_Init+0x21a>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a19      	ldr	r2, [pc, #100]	; (8007c28 <HAL_GPIO_Init+0x244>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d019      	beq.n	8007bfa <HAL_GPIO_Init+0x216>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a18      	ldr	r2, [pc, #96]	; (8007c2c <HAL_GPIO_Init+0x248>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d013      	beq.n	8007bf6 <HAL_GPIO_Init+0x212>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a17      	ldr	r2, [pc, #92]	; (8007c30 <HAL_GPIO_Init+0x24c>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d00d      	beq.n	8007bf2 <HAL_GPIO_Init+0x20e>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a16      	ldr	r2, [pc, #88]	; (8007c34 <HAL_GPIO_Init+0x250>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d007      	beq.n	8007bee <HAL_GPIO_Init+0x20a>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a15      	ldr	r2, [pc, #84]	; (8007c38 <HAL_GPIO_Init+0x254>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d101      	bne.n	8007bea <HAL_GPIO_Init+0x206>
 8007be6:	2309      	movs	r3, #9
 8007be8:	e029      	b.n	8007c3e <HAL_GPIO_Init+0x25a>
 8007bea:	230a      	movs	r3, #10
 8007bec:	e027      	b.n	8007c3e <HAL_GPIO_Init+0x25a>
 8007bee:	2307      	movs	r3, #7
 8007bf0:	e025      	b.n	8007c3e <HAL_GPIO_Init+0x25a>
 8007bf2:	2306      	movs	r3, #6
 8007bf4:	e023      	b.n	8007c3e <HAL_GPIO_Init+0x25a>
 8007bf6:	2305      	movs	r3, #5
 8007bf8:	e021      	b.n	8007c3e <HAL_GPIO_Init+0x25a>
 8007bfa:	2304      	movs	r3, #4
 8007bfc:	e01f      	b.n	8007c3e <HAL_GPIO_Init+0x25a>
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e01d      	b.n	8007c3e <HAL_GPIO_Init+0x25a>
 8007c02:	2302      	movs	r3, #2
 8007c04:	e01b      	b.n	8007c3e <HAL_GPIO_Init+0x25a>
 8007c06:	2301      	movs	r3, #1
 8007c08:	e019      	b.n	8007c3e <HAL_GPIO_Init+0x25a>
 8007c0a:	bf00      	nop
 8007c0c:	58000080 	.word	0x58000080
 8007c10:	58024400 	.word	0x58024400
 8007c14:	58000400 	.word	0x58000400
 8007c18:	58020000 	.word	0x58020000
 8007c1c:	58020400 	.word	0x58020400
 8007c20:	58020800 	.word	0x58020800
 8007c24:	58020c00 	.word	0x58020c00
 8007c28:	58021000 	.word	0x58021000
 8007c2c:	58021400 	.word	0x58021400
 8007c30:	58021800 	.word	0x58021800
 8007c34:	58021c00 	.word	0x58021c00
 8007c38:	58022400 	.word	0x58022400
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	69fa      	ldr	r2, [r7, #28]
 8007c40:	f002 0203 	and.w	r2, r2, #3
 8007c44:	0092      	lsls	r2, r2, #2
 8007c46:	4093      	lsls	r3, r2
 8007c48:	69ba      	ldr	r2, [r7, #24]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c4e:	4938      	ldr	r1, [pc, #224]	; (8007d30 <HAL_GPIO_Init+0x34c>)
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	089b      	lsrs	r3, r3, #2
 8007c54:	3302      	adds	r3, #2
 8007c56:	69ba      	ldr	r2, [r7, #24]
 8007c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	43db      	mvns	r3, r3
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007c82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	43db      	mvns	r3, r3
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	4013      	ands	r3, r2
 8007c9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d003      	beq.n	8007cb0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007ca8:	69ba      	ldr	r2, [r7, #24]
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007cb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	43db      	mvns	r3, r3
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d003      	beq.n	8007cdc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	69ba      	ldr	r2, [r7, #24]
 8007ce0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	43db      	mvns	r3, r3
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	4013      	ands	r3, r2
 8007cf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007cfe:	69ba      	ldr	r2, [r7, #24]
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	69ba      	ldr	r2, [r7, #24]
 8007d0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	fa22 f303 	lsr.w	r3, r2, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f47f ae6b 	bne.w	80079f8 <HAL_GPIO_Init+0x14>
  }
}
 8007d22:	bf00      	nop
 8007d24:	bf00      	nop
 8007d26:	3724      	adds	r7, #36	; 0x24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	58000400 	.word	0x58000400

08007d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	807b      	strh	r3, [r7, #2]
 8007d40:	4613      	mov	r3, r2
 8007d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d44:	787b      	ldrb	r3, [r7, #1]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d003      	beq.n	8007d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d4a:	887a      	ldrh	r2, [r7, #2]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007d50:	e003      	b.n	8007d5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007d52:	887b      	ldrh	r3, [r7, #2]
 8007d54:	041a      	lsls	r2, r3, #16
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	619a      	str	r2, [r3, #24]
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
	...

08007d68 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007d70:	4b19      	ldr	r3, [pc, #100]	; (8007dd8 <HAL_PWREx_ConfigSupply+0x70>)
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	f003 0304 	and.w	r3, r3, #4
 8007d78:	2b04      	cmp	r3, #4
 8007d7a:	d00a      	beq.n	8007d92 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007d7c:	4b16      	ldr	r3, [pc, #88]	; (8007dd8 <HAL_PWREx_ConfigSupply+0x70>)
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f003 0307 	and.w	r3, r3, #7
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d001      	beq.n	8007d8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e01f      	b.n	8007dce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	e01d      	b.n	8007dce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007d92:	4b11      	ldr	r3, [pc, #68]	; (8007dd8 <HAL_PWREx_ConfigSupply+0x70>)
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f023 0207 	bic.w	r2, r3, #7
 8007d9a:	490f      	ldr	r1, [pc, #60]	; (8007dd8 <HAL_PWREx_ConfigSupply+0x70>)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007da2:	f7fc fec9 	bl	8004b38 <HAL_GetTick>
 8007da6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007da8:	e009      	b.n	8007dbe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007daa:	f7fc fec5 	bl	8004b38 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007db8:	d901      	bls.n	8007dbe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e007      	b.n	8007dce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007dbe:	4b06      	ldr	r3, [pc, #24]	; (8007dd8 <HAL_PWREx_ConfigSupply+0x70>)
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dca:	d1ee      	bne.n	8007daa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	58024800 	.word	0x58024800

08007ddc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b08c      	sub	sp, #48	; 0x30
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e39d      	b.n	800852a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 8087 	beq.w	8007f0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dfc:	4b88      	ldr	r3, [pc, #544]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e06:	4b86      	ldr	r3, [pc, #536]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0e:	2b10      	cmp	r3, #16
 8007e10:	d007      	beq.n	8007e22 <HAL_RCC_OscConfig+0x46>
 8007e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e14:	2b18      	cmp	r3, #24
 8007e16:	d110      	bne.n	8007e3a <HAL_RCC_OscConfig+0x5e>
 8007e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1a:	f003 0303 	and.w	r3, r3, #3
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d10b      	bne.n	8007e3a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e22:	4b7f      	ldr	r3, [pc, #508]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d06c      	beq.n	8007f08 <HAL_RCC_OscConfig+0x12c>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d168      	bne.n	8007f08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e377      	b.n	800852a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e42:	d106      	bne.n	8007e52 <HAL_RCC_OscConfig+0x76>
 8007e44:	4b76      	ldr	r3, [pc, #472]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a75      	ldr	r2, [pc, #468]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e4e:	6013      	str	r3, [r2, #0]
 8007e50:	e02e      	b.n	8007eb0 <HAL_RCC_OscConfig+0xd4>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10c      	bne.n	8007e74 <HAL_RCC_OscConfig+0x98>
 8007e5a:	4b71      	ldr	r3, [pc, #452]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a70      	ldr	r2, [pc, #448]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e64:	6013      	str	r3, [r2, #0]
 8007e66:	4b6e      	ldr	r3, [pc, #440]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a6d      	ldr	r2, [pc, #436]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e70:	6013      	str	r3, [r2, #0]
 8007e72:	e01d      	b.n	8007eb0 <HAL_RCC_OscConfig+0xd4>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e7c:	d10c      	bne.n	8007e98 <HAL_RCC_OscConfig+0xbc>
 8007e7e:	4b68      	ldr	r3, [pc, #416]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a67      	ldr	r2, [pc, #412]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e88:	6013      	str	r3, [r2, #0]
 8007e8a:	4b65      	ldr	r3, [pc, #404]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a64      	ldr	r2, [pc, #400]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	e00b      	b.n	8007eb0 <HAL_RCC_OscConfig+0xd4>
 8007e98:	4b61      	ldr	r3, [pc, #388]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a60      	ldr	r2, [pc, #384]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ea2:	6013      	str	r3, [r2, #0]
 8007ea4:	4b5e      	ldr	r3, [pc, #376]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a5d      	ldr	r2, [pc, #372]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d013      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eb8:	f7fc fe3e 	bl	8004b38 <HAL_GetTick>
 8007ebc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ec0:	f7fc fe3a 	bl	8004b38 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b64      	cmp	r3, #100	; 0x64
 8007ecc:	d901      	bls.n	8007ed2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e32b      	b.n	800852a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ed2:	4b53      	ldr	r3, [pc, #332]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0f0      	beq.n	8007ec0 <HAL_RCC_OscConfig+0xe4>
 8007ede:	e014      	b.n	8007f0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee0:	f7fc fe2a 	bl	8004b38 <HAL_GetTick>
 8007ee4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ee6:	e008      	b.n	8007efa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ee8:	f7fc fe26 	bl	8004b38 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	2b64      	cmp	r3, #100	; 0x64
 8007ef4:	d901      	bls.n	8007efa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e317      	b.n	800852a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007efa:	4b49      	ldr	r3, [pc, #292]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1f0      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x10c>
 8007f06:	e000      	b.n	8007f0a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0302 	and.w	r3, r3, #2
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 808c 	beq.w	8008030 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f18:	4b41      	ldr	r3, [pc, #260]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f20:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f22:	4b3f      	ldr	r3, [pc, #252]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f26:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d007      	beq.n	8007f3e <HAL_RCC_OscConfig+0x162>
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	2b18      	cmp	r3, #24
 8007f32:	d137      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x1c8>
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	f003 0303 	and.w	r3, r3, #3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d132      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f3e:	4b38      	ldr	r3, [pc, #224]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0304 	and.w	r3, r3, #4
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d005      	beq.n	8007f56 <HAL_RCC_OscConfig+0x17a>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e2e9      	b.n	800852a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f56:	4b32      	ldr	r3, [pc, #200]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f023 0219 	bic.w	r2, r3, #25
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	492f      	ldr	r1, [pc, #188]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007f64:	4313      	orrs	r3, r2
 8007f66:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007f68:	f7fc fde6 	bl	8004b38 <HAL_GetTick>
 8007f6c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f6e:	e008      	b.n	8007f82 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f70:	f7fc fde2 	bl	8004b38 <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d901      	bls.n	8007f82 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e2d3      	b.n	800852a <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f82:	4b27      	ldr	r3, [pc, #156]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 0304 	and.w	r3, r3, #4
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d0f0      	beq.n	8007f70 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f8e:	4b24      	ldr	r3, [pc, #144]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	061b      	lsls	r3, r3, #24
 8007f9c:	4920      	ldr	r1, [pc, #128]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fa2:	e045      	b.n	8008030 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d026      	beq.n	8007ffa <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007fac:	4b1c      	ldr	r3, [pc, #112]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f023 0219 	bic.w	r2, r3, #25
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	4919      	ldr	r1, [pc, #100]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fbe:	f7fc fdbb 	bl	8004b38 <HAL_GetTick>
 8007fc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fc4:	e008      	b.n	8007fd8 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fc6:	f7fc fdb7 	bl	8004b38 <HAL_GetTick>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d901      	bls.n	8007fd8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e2a8      	b.n	800852a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fd8:	4b11      	ldr	r3, [pc, #68]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0304 	and.w	r3, r3, #4
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d0f0      	beq.n	8007fc6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fe4:	4b0e      	ldr	r3, [pc, #56]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	061b      	lsls	r3, r3, #24
 8007ff2:	490b      	ldr	r1, [pc, #44]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	604b      	str	r3, [r1, #4]
 8007ff8:	e01a      	b.n	8008030 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ffa:	4b09      	ldr	r3, [pc, #36]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a08      	ldr	r2, [pc, #32]	; (8008020 <HAL_RCC_OscConfig+0x244>)
 8008000:	f023 0301 	bic.w	r3, r3, #1
 8008004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008006:	f7fc fd97 	bl	8004b38 <HAL_GetTick>
 800800a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800800c:	e00a      	b.n	8008024 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800800e:	f7fc fd93 	bl	8004b38 <HAL_GetTick>
 8008012:	4602      	mov	r2, r0
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	2b02      	cmp	r3, #2
 800801a:	d903      	bls.n	8008024 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	e284      	b.n	800852a <HAL_RCC_OscConfig+0x74e>
 8008020:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008024:	4b96      	ldr	r3, [pc, #600]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1ee      	bne.n	800800e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0310 	and.w	r3, r3, #16
 8008038:	2b00      	cmp	r3, #0
 800803a:	d06a      	beq.n	8008112 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800803c:	4b90      	ldr	r3, [pc, #576]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008044:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008046:	4b8e      	ldr	r3, [pc, #568]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 8008048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	2b08      	cmp	r3, #8
 8008050:	d007      	beq.n	8008062 <HAL_RCC_OscConfig+0x286>
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	2b18      	cmp	r3, #24
 8008056:	d11b      	bne.n	8008090 <HAL_RCC_OscConfig+0x2b4>
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	f003 0303 	and.w	r3, r3, #3
 800805e:	2b01      	cmp	r3, #1
 8008060:	d116      	bne.n	8008090 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008062:	4b87      	ldr	r3, [pc, #540]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806a:	2b00      	cmp	r3, #0
 800806c:	d005      	beq.n	800807a <HAL_RCC_OscConfig+0x29e>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	2b80      	cmp	r3, #128	; 0x80
 8008074:	d001      	beq.n	800807a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e257      	b.n	800852a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800807a:	4b81      	ldr	r3, [pc, #516]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	061b      	lsls	r3, r3, #24
 8008088:	497d      	ldr	r1, [pc, #500]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 800808a:	4313      	orrs	r3, r2
 800808c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800808e:	e040      	b.n	8008112 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	69db      	ldr	r3, [r3, #28]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d023      	beq.n	80080e0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008098:	4b79      	ldr	r3, [pc, #484]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a78      	ldr	r2, [pc, #480]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 800809e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080a4:	f7fc fd48 	bl	8004b38 <HAL_GetTick>
 80080a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080aa:	e008      	b.n	80080be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80080ac:	f7fc fd44 	bl	8004b38 <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d901      	bls.n	80080be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e235      	b.n	800852a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080be:	4b70      	ldr	r3, [pc, #448]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d0f0      	beq.n	80080ac <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080ca:	4b6d      	ldr	r3, [pc, #436]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	061b      	lsls	r3, r3, #24
 80080d8:	4969      	ldr	r1, [pc, #420]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 80080da:	4313      	orrs	r3, r2
 80080dc:	60cb      	str	r3, [r1, #12]
 80080de:	e018      	b.n	8008112 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80080e0:	4b67      	ldr	r3, [pc, #412]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a66      	ldr	r2, [pc, #408]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 80080e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ec:	f7fc fd24 	bl	8004b38 <HAL_GetTick>
 80080f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080f2:	e008      	b.n	8008106 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80080f4:	f7fc fd20 	bl	8004b38 <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d901      	bls.n	8008106 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e211      	b.n	800852a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008106:	4b5e      	ldr	r3, [pc, #376]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1f0      	bne.n	80080f4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 0308 	and.w	r3, r3, #8
 800811a:	2b00      	cmp	r3, #0
 800811c:	d036      	beq.n	800818c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d019      	beq.n	800815a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008126:	4b56      	ldr	r3, [pc, #344]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 8008128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800812a:	4a55      	ldr	r2, [pc, #340]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 800812c:	f043 0301 	orr.w	r3, r3, #1
 8008130:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008132:	f7fc fd01 	bl	8004b38 <HAL_GetTick>
 8008136:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008138:	e008      	b.n	800814c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800813a:	f7fc fcfd 	bl	8004b38 <HAL_GetTick>
 800813e:	4602      	mov	r2, r0
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	2b02      	cmp	r3, #2
 8008146:	d901      	bls.n	800814c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008148:	2303      	movs	r3, #3
 800814a:	e1ee      	b.n	800852a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800814c:	4b4c      	ldr	r3, [pc, #304]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 800814e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008150:	f003 0302 	and.w	r3, r3, #2
 8008154:	2b00      	cmp	r3, #0
 8008156:	d0f0      	beq.n	800813a <HAL_RCC_OscConfig+0x35e>
 8008158:	e018      	b.n	800818c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800815a:	4b49      	ldr	r3, [pc, #292]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 800815c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800815e:	4a48      	ldr	r2, [pc, #288]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 8008160:	f023 0301 	bic.w	r3, r3, #1
 8008164:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008166:	f7fc fce7 	bl	8004b38 <HAL_GetTick>
 800816a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800816c:	e008      	b.n	8008180 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800816e:	f7fc fce3 	bl	8004b38 <HAL_GetTick>
 8008172:	4602      	mov	r2, r0
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	2b02      	cmp	r3, #2
 800817a:	d901      	bls.n	8008180 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	e1d4      	b.n	800852a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008180:	4b3f      	ldr	r3, [pc, #252]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 8008182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008184:	f003 0302 	and.w	r3, r3, #2
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1f0      	bne.n	800816e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0320 	and.w	r3, r3, #32
 8008194:	2b00      	cmp	r3, #0
 8008196:	d036      	beq.n	8008206 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d019      	beq.n	80081d4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80081a0:	4b37      	ldr	r3, [pc, #220]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a36      	ldr	r2, [pc, #216]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 80081a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80081aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081ac:	f7fc fcc4 	bl	8004b38 <HAL_GetTick>
 80081b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80081b2:	e008      	b.n	80081c6 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80081b4:	f7fc fcc0 	bl	8004b38 <HAL_GetTick>
 80081b8:	4602      	mov	r2, r0
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d901      	bls.n	80081c6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e1b1      	b.n	800852a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80081c6:	4b2e      	ldr	r3, [pc, #184]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d0f0      	beq.n	80081b4 <HAL_RCC_OscConfig+0x3d8>
 80081d2:	e018      	b.n	8008206 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80081d4:	4b2a      	ldr	r3, [pc, #168]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a29      	ldr	r2, [pc, #164]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 80081da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081e0:	f7fc fcaa 	bl	8004b38 <HAL_GetTick>
 80081e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081e6:	e008      	b.n	80081fa <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80081e8:	f7fc fca6 	bl	8004b38 <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d901      	bls.n	80081fa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e197      	b.n	800852a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081fa:	4b21      	ldr	r3, [pc, #132]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1f0      	bne.n	80081e8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0304 	and.w	r3, r3, #4
 800820e:	2b00      	cmp	r3, #0
 8008210:	f000 8086 	beq.w	8008320 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008214:	4b1b      	ldr	r3, [pc, #108]	; (8008284 <HAL_RCC_OscConfig+0x4a8>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a1a      	ldr	r2, [pc, #104]	; (8008284 <HAL_RCC_OscConfig+0x4a8>)
 800821a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800821e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008220:	f7fc fc8a 	bl	8004b38 <HAL_GetTick>
 8008224:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008226:	e008      	b.n	800823a <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008228:	f7fc fc86 	bl	8004b38 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	2b64      	cmp	r3, #100	; 0x64
 8008234:	d901      	bls.n	800823a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e177      	b.n	800852a <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800823a:	4b12      	ldr	r3, [pc, #72]	; (8008284 <HAL_RCC_OscConfig+0x4a8>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008242:	2b00      	cmp	r3, #0
 8008244:	d0f0      	beq.n	8008228 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d106      	bne.n	800825c <HAL_RCC_OscConfig+0x480>
 800824e:	4b0c      	ldr	r3, [pc, #48]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 8008250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008252:	4a0b      	ldr	r2, [pc, #44]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 8008254:	f043 0301 	orr.w	r3, r3, #1
 8008258:	6713      	str	r3, [r2, #112]	; 0x70
 800825a:	e032      	b.n	80082c2 <HAL_RCC_OscConfig+0x4e6>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d111      	bne.n	8008288 <HAL_RCC_OscConfig+0x4ac>
 8008264:	4b06      	ldr	r3, [pc, #24]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 8008266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008268:	4a05      	ldr	r2, [pc, #20]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 800826a:	f023 0301 	bic.w	r3, r3, #1
 800826e:	6713      	str	r3, [r2, #112]	; 0x70
 8008270:	4b03      	ldr	r3, [pc, #12]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 8008272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008274:	4a02      	ldr	r2, [pc, #8]	; (8008280 <HAL_RCC_OscConfig+0x4a4>)
 8008276:	f023 0304 	bic.w	r3, r3, #4
 800827a:	6713      	str	r3, [r2, #112]	; 0x70
 800827c:	e021      	b.n	80082c2 <HAL_RCC_OscConfig+0x4e6>
 800827e:	bf00      	nop
 8008280:	58024400 	.word	0x58024400
 8008284:	58024800 	.word	0x58024800
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	2b05      	cmp	r3, #5
 800828e:	d10c      	bne.n	80082aa <HAL_RCC_OscConfig+0x4ce>
 8008290:	4b83      	ldr	r3, [pc, #524]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 8008292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008294:	4a82      	ldr	r2, [pc, #520]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 8008296:	f043 0304 	orr.w	r3, r3, #4
 800829a:	6713      	str	r3, [r2, #112]	; 0x70
 800829c:	4b80      	ldr	r3, [pc, #512]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 800829e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082a0:	4a7f      	ldr	r2, [pc, #508]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 80082a2:	f043 0301 	orr.w	r3, r3, #1
 80082a6:	6713      	str	r3, [r2, #112]	; 0x70
 80082a8:	e00b      	b.n	80082c2 <HAL_RCC_OscConfig+0x4e6>
 80082aa:	4b7d      	ldr	r3, [pc, #500]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 80082ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ae:	4a7c      	ldr	r2, [pc, #496]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 80082b0:	f023 0301 	bic.w	r3, r3, #1
 80082b4:	6713      	str	r3, [r2, #112]	; 0x70
 80082b6:	4b7a      	ldr	r3, [pc, #488]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 80082b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ba:	4a79      	ldr	r2, [pc, #484]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 80082bc:	f023 0304 	bic.w	r3, r3, #4
 80082c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d015      	beq.n	80082f6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082ca:	f7fc fc35 	bl	8004b38 <HAL_GetTick>
 80082ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082d0:	e00a      	b.n	80082e8 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082d2:	f7fc fc31 	bl	8004b38 <HAL_GetTick>
 80082d6:	4602      	mov	r2, r0
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d901      	bls.n	80082e8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e120      	b.n	800852a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082e8:	4b6d      	ldr	r3, [pc, #436]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 80082ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ec:	f003 0302 	and.w	r3, r3, #2
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d0ee      	beq.n	80082d2 <HAL_RCC_OscConfig+0x4f6>
 80082f4:	e014      	b.n	8008320 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082f6:	f7fc fc1f 	bl	8004b38 <HAL_GetTick>
 80082fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082fc:	e00a      	b.n	8008314 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082fe:	f7fc fc1b 	bl	8004b38 <HAL_GetTick>
 8008302:	4602      	mov	r2, r0
 8008304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	f241 3288 	movw	r2, #5000	; 0x1388
 800830c:	4293      	cmp	r3, r2
 800830e:	d901      	bls.n	8008314 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008310:	2303      	movs	r3, #3
 8008312:	e10a      	b.n	800852a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008314:	4b62      	ldr	r3, [pc, #392]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 8008316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008318:	f003 0302 	and.w	r3, r3, #2
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1ee      	bne.n	80082fe <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 80ff 	beq.w	8008528 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800832a:	4b5d      	ldr	r3, [pc, #372]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008332:	2b18      	cmp	r3, #24
 8008334:	f000 80ba 	beq.w	80084ac <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833c:	2b02      	cmp	r3, #2
 800833e:	f040 8095 	bne.w	800846c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008342:	4b57      	ldr	r3, [pc, #348]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a56      	ldr	r2, [pc, #344]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 8008348:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800834c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800834e:	f7fc fbf3 	bl	8004b38 <HAL_GetTick>
 8008352:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008354:	e008      	b.n	8008368 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008356:	f7fc fbef 	bl	8004b38 <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	2b02      	cmp	r3, #2
 8008362:	d901      	bls.n	8008368 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e0e0      	b.n	800852a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008368:	4b4d      	ldr	r3, [pc, #308]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1f0      	bne.n	8008356 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008374:	4b4a      	ldr	r3, [pc, #296]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 8008376:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008378:	4b4a      	ldr	r3, [pc, #296]	; (80084a4 <HAL_RCC_OscConfig+0x6c8>)
 800837a:	4013      	ands	r3, r2
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008384:	0112      	lsls	r2, r2, #4
 8008386:	430a      	orrs	r2, r1
 8008388:	4945      	ldr	r1, [pc, #276]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 800838a:	4313      	orrs	r3, r2
 800838c:	628b      	str	r3, [r1, #40]	; 0x28
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008392:	3b01      	subs	r3, #1
 8008394:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800839c:	3b01      	subs	r3, #1
 800839e:	025b      	lsls	r3, r3, #9
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	431a      	orrs	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a8:	3b01      	subs	r3, #1
 80083aa:	041b      	lsls	r3, r3, #16
 80083ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80083b0:	431a      	orrs	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b6:	3b01      	subs	r3, #1
 80083b8:	061b      	lsls	r3, r3, #24
 80083ba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80083be:	4938      	ldr	r1, [pc, #224]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 80083c0:	4313      	orrs	r3, r2
 80083c2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80083c4:	4b36      	ldr	r3, [pc, #216]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 80083c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c8:	4a35      	ldr	r2, [pc, #212]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 80083ca:	f023 0301 	bic.w	r3, r3, #1
 80083ce:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80083d0:	4b33      	ldr	r3, [pc, #204]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 80083d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083d4:	4b34      	ldr	r3, [pc, #208]	; (80084a8 <HAL_RCC_OscConfig+0x6cc>)
 80083d6:	4013      	ands	r3, r2
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80083dc:	00d2      	lsls	r2, r2, #3
 80083de:	4930      	ldr	r1, [pc, #192]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 80083e0:	4313      	orrs	r3, r2
 80083e2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80083e4:	4b2e      	ldr	r3, [pc, #184]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 80083e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e8:	f023 020c 	bic.w	r2, r3, #12
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f0:	492b      	ldr	r1, [pc, #172]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80083f6:	4b2a      	ldr	r3, [pc, #168]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 80083f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fa:	f023 0202 	bic.w	r2, r3, #2
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008402:	4927      	ldr	r1, [pc, #156]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 8008404:	4313      	orrs	r3, r2
 8008406:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008408:	4b25      	ldr	r3, [pc, #148]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 800840a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840c:	4a24      	ldr	r2, [pc, #144]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 800840e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008412:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008414:	4b22      	ldr	r3, [pc, #136]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 8008416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008418:	4a21      	ldr	r2, [pc, #132]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 800841a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800841e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008420:	4b1f      	ldr	r3, [pc, #124]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 8008422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008424:	4a1e      	ldr	r2, [pc, #120]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 8008426:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800842a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800842c:	4b1c      	ldr	r3, [pc, #112]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 800842e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008430:	4a1b      	ldr	r2, [pc, #108]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 8008432:	f043 0301 	orr.w	r3, r3, #1
 8008436:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008438:	4b19      	ldr	r3, [pc, #100]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a18      	ldr	r2, [pc, #96]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 800843e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008444:	f7fc fb78 	bl	8004b38 <HAL_GetTick>
 8008448:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800844a:	e008      	b.n	800845e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800844c:	f7fc fb74 	bl	8004b38 <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	2b02      	cmp	r3, #2
 8008458:	d901      	bls.n	800845e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e065      	b.n	800852a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800845e:	4b10      	ldr	r3, [pc, #64]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d0f0      	beq.n	800844c <HAL_RCC_OscConfig+0x670>
 800846a:	e05d      	b.n	8008528 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800846c:	4b0c      	ldr	r3, [pc, #48]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a0b      	ldr	r2, [pc, #44]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 8008472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008478:	f7fc fb5e 	bl	8004b38 <HAL_GetTick>
 800847c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800847e:	e008      	b.n	8008492 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008480:	f7fc fb5a 	bl	8004b38 <HAL_GetTick>
 8008484:	4602      	mov	r2, r0
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	1ad3      	subs	r3, r2, r3
 800848a:	2b02      	cmp	r3, #2
 800848c:	d901      	bls.n	8008492 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	e04b      	b.n	800852a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008492:	4b03      	ldr	r3, [pc, #12]	; (80084a0 <HAL_RCC_OscConfig+0x6c4>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1f0      	bne.n	8008480 <HAL_RCC_OscConfig+0x6a4>
 800849e:	e043      	b.n	8008528 <HAL_RCC_OscConfig+0x74c>
 80084a0:	58024400 	.word	0x58024400
 80084a4:	fffffc0c 	.word	0xfffffc0c
 80084a8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80084ac:	4b21      	ldr	r3, [pc, #132]	; (8008534 <HAL_RCC_OscConfig+0x758>)
 80084ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80084b2:	4b20      	ldr	r3, [pc, #128]	; (8008534 <HAL_RCC_OscConfig+0x758>)
 80084b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d031      	beq.n	8008524 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	f003 0203 	and.w	r2, r3, #3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d12a      	bne.n	8008524 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	091b      	lsrs	r3, r3, #4
 80084d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084da:	429a      	cmp	r2, r3
 80084dc:	d122      	bne.n	8008524 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d11a      	bne.n	8008524 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	0a5b      	lsrs	r3, r3, #9
 80084f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d111      	bne.n	8008524 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	0c1b      	lsrs	r3, r3, #16
 8008504:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800850e:	429a      	cmp	r2, r3
 8008510:	d108      	bne.n	8008524 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	0e1b      	lsrs	r3, r3, #24
 8008516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008520:	429a      	cmp	r2, r3
 8008522:	d001      	beq.n	8008528 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	e000      	b.n	800852a <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3730      	adds	r7, #48	; 0x30
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	58024400 	.word	0x58024400

08008538 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d101      	bne.n	800854c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	e19c      	b.n	8008886 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800854c:	4b8a      	ldr	r3, [pc, #552]	; (8008778 <HAL_RCC_ClockConfig+0x240>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 030f 	and.w	r3, r3, #15
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	429a      	cmp	r2, r3
 8008558:	d910      	bls.n	800857c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800855a:	4b87      	ldr	r3, [pc, #540]	; (8008778 <HAL_RCC_ClockConfig+0x240>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f023 020f 	bic.w	r2, r3, #15
 8008562:	4985      	ldr	r1, [pc, #532]	; (8008778 <HAL_RCC_ClockConfig+0x240>)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	4313      	orrs	r3, r2
 8008568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800856a:	4b83      	ldr	r3, [pc, #524]	; (8008778 <HAL_RCC_ClockConfig+0x240>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 030f 	and.w	r3, r3, #15
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	429a      	cmp	r2, r3
 8008576:	d001      	beq.n	800857c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e184      	b.n	8008886 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0304 	and.w	r3, r3, #4
 8008584:	2b00      	cmp	r3, #0
 8008586:	d010      	beq.n	80085aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	691a      	ldr	r2, [r3, #16]
 800858c:	4b7b      	ldr	r3, [pc, #492]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008594:	429a      	cmp	r2, r3
 8008596:	d908      	bls.n	80085aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008598:	4b78      	ldr	r3, [pc, #480]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	4975      	ldr	r1, [pc, #468]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0308 	and.w	r3, r3, #8
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d010      	beq.n	80085d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	695a      	ldr	r2, [r3, #20]
 80085ba:	4b70      	ldr	r3, [pc, #448]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 80085bc:	69db      	ldr	r3, [r3, #28]
 80085be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d908      	bls.n	80085d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80085c6:	4b6d      	ldr	r3, [pc, #436]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	496a      	ldr	r1, [pc, #424]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 80085d4:	4313      	orrs	r3, r2
 80085d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0310 	and.w	r3, r3, #16
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d010      	beq.n	8008606 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	699a      	ldr	r2, [r3, #24]
 80085e8:	4b64      	ldr	r3, [pc, #400]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 80085ea:	69db      	ldr	r3, [r3, #28]
 80085ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d908      	bls.n	8008606 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80085f4:	4b61      	ldr	r3, [pc, #388]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 80085f6:	69db      	ldr	r3, [r3, #28]
 80085f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	495e      	ldr	r1, [pc, #376]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 8008602:	4313      	orrs	r3, r2
 8008604:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 0320 	and.w	r3, r3, #32
 800860e:	2b00      	cmp	r3, #0
 8008610:	d010      	beq.n	8008634 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	69da      	ldr	r2, [r3, #28]
 8008616:	4b59      	ldr	r3, [pc, #356]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800861e:	429a      	cmp	r2, r3
 8008620:	d908      	bls.n	8008634 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008622:	4b56      	ldr	r3, [pc, #344]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	4953      	ldr	r1, [pc, #332]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 8008630:	4313      	orrs	r3, r2
 8008632:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0302 	and.w	r3, r3, #2
 800863c:	2b00      	cmp	r3, #0
 800863e:	d010      	beq.n	8008662 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68da      	ldr	r2, [r3, #12]
 8008644:	4b4d      	ldr	r3, [pc, #308]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	f003 030f 	and.w	r3, r3, #15
 800864c:	429a      	cmp	r2, r3
 800864e:	d908      	bls.n	8008662 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008650:	4b4a      	ldr	r3, [pc, #296]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 8008652:	699b      	ldr	r3, [r3, #24]
 8008654:	f023 020f 	bic.w	r2, r3, #15
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	4947      	ldr	r1, [pc, #284]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 800865e:	4313      	orrs	r3, r2
 8008660:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d055      	beq.n	800871a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800866e:	4b43      	ldr	r3, [pc, #268]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	4940      	ldr	r1, [pc, #256]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 800867c:	4313      	orrs	r3, r2
 800867e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	2b02      	cmp	r3, #2
 8008686:	d107      	bne.n	8008698 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008688:	4b3c      	ldr	r3, [pc, #240]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d121      	bne.n	80086d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e0f6      	b.n	8008886 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	2b03      	cmp	r3, #3
 800869e:	d107      	bne.n	80086b0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086a0:	4b36      	ldr	r3, [pc, #216]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d115      	bne.n	80086d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e0ea      	b.n	8008886 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d107      	bne.n	80086c8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086b8:	4b30      	ldr	r3, [pc, #192]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d109      	bne.n	80086d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e0de      	b.n	8008886 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086c8:	4b2c      	ldr	r3, [pc, #176]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0304 	and.w	r3, r3, #4
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d101      	bne.n	80086d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e0d6      	b.n	8008886 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086d8:	4b28      	ldr	r3, [pc, #160]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	f023 0207 	bic.w	r2, r3, #7
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	4925      	ldr	r1, [pc, #148]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086ea:	f7fc fa25 	bl	8004b38 <HAL_GetTick>
 80086ee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086f0:	e00a      	b.n	8008708 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086f2:	f7fc fa21 	bl	8004b38 <HAL_GetTick>
 80086f6:	4602      	mov	r2, r0
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008700:	4293      	cmp	r3, r2
 8008702:	d901      	bls.n	8008708 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	e0be      	b.n	8008886 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008708:	4b1c      	ldr	r3, [pc, #112]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	00db      	lsls	r3, r3, #3
 8008716:	429a      	cmp	r2, r3
 8008718:	d1eb      	bne.n	80086f2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 0302 	and.w	r3, r3, #2
 8008722:	2b00      	cmp	r3, #0
 8008724:	d010      	beq.n	8008748 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68da      	ldr	r2, [r3, #12]
 800872a:	4b14      	ldr	r3, [pc, #80]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 800872c:	699b      	ldr	r3, [r3, #24]
 800872e:	f003 030f 	and.w	r3, r3, #15
 8008732:	429a      	cmp	r2, r3
 8008734:	d208      	bcs.n	8008748 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008736:	4b11      	ldr	r3, [pc, #68]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	f023 020f 	bic.w	r2, r3, #15
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	490e      	ldr	r1, [pc, #56]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 8008744:	4313      	orrs	r3, r2
 8008746:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008748:	4b0b      	ldr	r3, [pc, #44]	; (8008778 <HAL_RCC_ClockConfig+0x240>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 030f 	and.w	r3, r3, #15
 8008750:	683a      	ldr	r2, [r7, #0]
 8008752:	429a      	cmp	r2, r3
 8008754:	d214      	bcs.n	8008780 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008756:	4b08      	ldr	r3, [pc, #32]	; (8008778 <HAL_RCC_ClockConfig+0x240>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f023 020f 	bic.w	r2, r3, #15
 800875e:	4906      	ldr	r1, [pc, #24]	; (8008778 <HAL_RCC_ClockConfig+0x240>)
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	4313      	orrs	r3, r2
 8008764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008766:	4b04      	ldr	r3, [pc, #16]	; (8008778 <HAL_RCC_ClockConfig+0x240>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 030f 	and.w	r3, r3, #15
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	429a      	cmp	r2, r3
 8008772:	d005      	beq.n	8008780 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e086      	b.n	8008886 <HAL_RCC_ClockConfig+0x34e>
 8008778:	52002000 	.word	0x52002000
 800877c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 0304 	and.w	r3, r3, #4
 8008788:	2b00      	cmp	r3, #0
 800878a:	d010      	beq.n	80087ae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	691a      	ldr	r2, [r3, #16]
 8008790:	4b3f      	ldr	r3, [pc, #252]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 8008792:	699b      	ldr	r3, [r3, #24]
 8008794:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008798:	429a      	cmp	r2, r3
 800879a:	d208      	bcs.n	80087ae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800879c:	4b3c      	ldr	r3, [pc, #240]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	4939      	ldr	r1, [pc, #228]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 80087aa:	4313      	orrs	r3, r2
 80087ac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 0308 	and.w	r3, r3, #8
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d010      	beq.n	80087dc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	695a      	ldr	r2, [r3, #20]
 80087be:	4b34      	ldr	r3, [pc, #208]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 80087c0:	69db      	ldr	r3, [r3, #28]
 80087c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d208      	bcs.n	80087dc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80087ca:	4b31      	ldr	r3, [pc, #196]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 80087cc:	69db      	ldr	r3, [r3, #28]
 80087ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	492e      	ldr	r1, [pc, #184]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 80087d8:	4313      	orrs	r3, r2
 80087da:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0310 	and.w	r3, r3, #16
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d010      	beq.n	800880a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	699a      	ldr	r2, [r3, #24]
 80087ec:	4b28      	ldr	r3, [pc, #160]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 80087ee:	69db      	ldr	r3, [r3, #28]
 80087f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d208      	bcs.n	800880a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80087f8:	4b25      	ldr	r3, [pc, #148]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 80087fa:	69db      	ldr	r3, [r3, #28]
 80087fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	4922      	ldr	r1, [pc, #136]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 8008806:	4313      	orrs	r3, r2
 8008808:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0320 	and.w	r3, r3, #32
 8008812:	2b00      	cmp	r3, #0
 8008814:	d010      	beq.n	8008838 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	69da      	ldr	r2, [r3, #28]
 800881a:	4b1d      	ldr	r3, [pc, #116]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008822:	429a      	cmp	r2, r3
 8008824:	d208      	bcs.n	8008838 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008826:	4b1a      	ldr	r3, [pc, #104]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	4917      	ldr	r1, [pc, #92]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 8008834:	4313      	orrs	r3, r2
 8008836:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008838:	f000 f834 	bl	80088a4 <HAL_RCC_GetSysClockFreq>
 800883c:	4602      	mov	r2, r0
 800883e:	4b14      	ldr	r3, [pc, #80]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 8008840:	699b      	ldr	r3, [r3, #24]
 8008842:	0a1b      	lsrs	r3, r3, #8
 8008844:	f003 030f 	and.w	r3, r3, #15
 8008848:	4912      	ldr	r1, [pc, #72]	; (8008894 <HAL_RCC_ClockConfig+0x35c>)
 800884a:	5ccb      	ldrb	r3, [r1, r3]
 800884c:	f003 031f 	and.w	r3, r3, #31
 8008850:	fa22 f303 	lsr.w	r3, r2, r3
 8008854:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008856:	4b0e      	ldr	r3, [pc, #56]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	f003 030f 	and.w	r3, r3, #15
 800885e:	4a0d      	ldr	r2, [pc, #52]	; (8008894 <HAL_RCC_ClockConfig+0x35c>)
 8008860:	5cd3      	ldrb	r3, [r2, r3]
 8008862:	f003 031f 	and.w	r3, r3, #31
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	fa22 f303 	lsr.w	r3, r2, r3
 800886c:	4a0a      	ldr	r2, [pc, #40]	; (8008898 <HAL_RCC_ClockConfig+0x360>)
 800886e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008870:	4a0a      	ldr	r2, [pc, #40]	; (800889c <HAL_RCC_ClockConfig+0x364>)
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008876:	4b0a      	ldr	r3, [pc, #40]	; (80088a0 <HAL_RCC_ClockConfig+0x368>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4618      	mov	r0, r3
 800887c:	f7fc f912 	bl	8004aa4 <HAL_InitTick>
 8008880:	4603      	mov	r3, r0
 8008882:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008884:	7bfb      	ldrb	r3, [r7, #15]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3718      	adds	r7, #24
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	58024400 	.word	0x58024400
 8008894:	0800e1a8 	.word	0x0800e1a8
 8008898:	24000004 	.word	0x24000004
 800889c:	24000000 	.word	0x24000000
 80088a0:	24000008 	.word	0x24000008

080088a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b089      	sub	sp, #36	; 0x24
 80088a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088aa:	4bb3      	ldr	r3, [pc, #716]	; (8008b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088b2:	2b18      	cmp	r3, #24
 80088b4:	f200 8155 	bhi.w	8008b62 <HAL_RCC_GetSysClockFreq+0x2be>
 80088b8:	a201      	add	r2, pc, #4	; (adr r2, 80088c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80088ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088be:	bf00      	nop
 80088c0:	08008925 	.word	0x08008925
 80088c4:	08008b63 	.word	0x08008b63
 80088c8:	08008b63 	.word	0x08008b63
 80088cc:	08008b63 	.word	0x08008b63
 80088d0:	08008b63 	.word	0x08008b63
 80088d4:	08008b63 	.word	0x08008b63
 80088d8:	08008b63 	.word	0x08008b63
 80088dc:	08008b63 	.word	0x08008b63
 80088e0:	0800894b 	.word	0x0800894b
 80088e4:	08008b63 	.word	0x08008b63
 80088e8:	08008b63 	.word	0x08008b63
 80088ec:	08008b63 	.word	0x08008b63
 80088f0:	08008b63 	.word	0x08008b63
 80088f4:	08008b63 	.word	0x08008b63
 80088f8:	08008b63 	.word	0x08008b63
 80088fc:	08008b63 	.word	0x08008b63
 8008900:	08008951 	.word	0x08008951
 8008904:	08008b63 	.word	0x08008b63
 8008908:	08008b63 	.word	0x08008b63
 800890c:	08008b63 	.word	0x08008b63
 8008910:	08008b63 	.word	0x08008b63
 8008914:	08008b63 	.word	0x08008b63
 8008918:	08008b63 	.word	0x08008b63
 800891c:	08008b63 	.word	0x08008b63
 8008920:	08008957 	.word	0x08008957
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008924:	4b94      	ldr	r3, [pc, #592]	; (8008b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 0320 	and.w	r3, r3, #32
 800892c:	2b00      	cmp	r3, #0
 800892e:	d009      	beq.n	8008944 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008930:	4b91      	ldr	r3, [pc, #580]	; (8008b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	08db      	lsrs	r3, r3, #3
 8008936:	f003 0303 	and.w	r3, r3, #3
 800893a:	4a90      	ldr	r2, [pc, #576]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800893c:	fa22 f303 	lsr.w	r3, r2, r3
 8008940:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008942:	e111      	b.n	8008b68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008944:	4b8d      	ldr	r3, [pc, #564]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008946:	61bb      	str	r3, [r7, #24]
    break;
 8008948:	e10e      	b.n	8008b68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800894a:	4b8d      	ldr	r3, [pc, #564]	; (8008b80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800894c:	61bb      	str	r3, [r7, #24]
    break;
 800894e:	e10b      	b.n	8008b68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008950:	4b8c      	ldr	r3, [pc, #560]	; (8008b84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008952:	61bb      	str	r3, [r7, #24]
    break;
 8008954:	e108      	b.n	8008b68 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008956:	4b88      	ldr	r3, [pc, #544]	; (8008b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895a:	f003 0303 	and.w	r3, r3, #3
 800895e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008960:	4b85      	ldr	r3, [pc, #532]	; (8008b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008964:	091b      	lsrs	r3, r3, #4
 8008966:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800896a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800896c:	4b82      	ldr	r3, [pc, #520]	; (8008b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800896e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008970:	f003 0301 	and.w	r3, r3, #1
 8008974:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008976:	4b80      	ldr	r3, [pc, #512]	; (8008b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800897a:	08db      	lsrs	r3, r3, #3
 800897c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	fb02 f303 	mul.w	r3, r2, r3
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	2b00      	cmp	r3, #0
 8008996:	f000 80e1 	beq.w	8008b5c <HAL_RCC_GetSysClockFreq+0x2b8>
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2b02      	cmp	r3, #2
 800899e:	f000 8083 	beq.w	8008aa8 <HAL_RCC_GetSysClockFreq+0x204>
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	f200 80a1 	bhi.w	8008aec <HAL_RCC_GetSysClockFreq+0x248>
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d003      	beq.n	80089b8 <HAL_RCC_GetSysClockFreq+0x114>
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d056      	beq.n	8008a64 <HAL_RCC_GetSysClockFreq+0x1c0>
 80089b6:	e099      	b.n	8008aec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089b8:	4b6f      	ldr	r3, [pc, #444]	; (8008b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0320 	and.w	r3, r3, #32
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d02d      	beq.n	8008a20 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089c4:	4b6c      	ldr	r3, [pc, #432]	; (8008b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	08db      	lsrs	r3, r3, #3
 80089ca:	f003 0303 	and.w	r3, r3, #3
 80089ce:	4a6b      	ldr	r2, [pc, #428]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089d0:	fa22 f303 	lsr.w	r3, r2, r3
 80089d4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	ee07 3a90 	vmov	s15, r3
 80089dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	ee07 3a90 	vmov	s15, r3
 80089e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ee:	4b62      	ldr	r3, [pc, #392]	; (8008b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f6:	ee07 3a90 	vmov	s15, r3
 80089fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a02:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008a1e:	e087      	b.n	8008b30 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	ee07 3a90 	vmov	s15, r3
 8008a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a2a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008b8c <HAL_RCC_GetSysClockFreq+0x2e8>
 8008a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a32:	4b51      	ldr	r3, [pc, #324]	; (8008b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a3a:	ee07 3a90 	vmov	s15, r3
 8008a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a42:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a46:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a62:	e065      	b.n	8008b30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	ee07 3a90 	vmov	s15, r3
 8008a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a6e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008b90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a76:	4b40      	ldr	r3, [pc, #256]	; (8008b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7e:	ee07 3a90 	vmov	s15, r3
 8008a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a8a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aa6:	e043      	b.n	8008b30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	ee07 3a90 	vmov	s15, r3
 8008aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008b94 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aba:	4b2f      	ldr	r3, [pc, #188]	; (8008b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac2:	ee07 3a90 	vmov	s15, r3
 8008ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ace:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aea:	e021      	b.n	8008b30 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	ee07 3a90 	vmov	s15, r3
 8008af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008af6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008b90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008afe:	4b1e      	ldr	r3, [pc, #120]	; (8008b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b06:	ee07 3a90 	vmov	s15, r3
 8008b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b2e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008b30:	4b11      	ldr	r3, [pc, #68]	; (8008b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b34:	0a5b      	lsrs	r3, r3, #9
 8008b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	ee07 3a90 	vmov	s15, r3
 8008b44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b48:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b54:	ee17 3a90 	vmov	r3, s15
 8008b58:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008b5a:	e005      	b.n	8008b68 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	61bb      	str	r3, [r7, #24]
    break;
 8008b60:	e002      	b.n	8008b68 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008b62:	4b07      	ldr	r3, [pc, #28]	; (8008b80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008b64:	61bb      	str	r3, [r7, #24]
    break;
 8008b66:	bf00      	nop
  }

  return sysclockfreq;
 8008b68:	69bb      	ldr	r3, [r7, #24]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3724      	adds	r7, #36	; 0x24
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	58024400 	.word	0x58024400
 8008b7c:	03d09000 	.word	0x03d09000
 8008b80:	003d0900 	.word	0x003d0900
 8008b84:	007a1200 	.word	0x007a1200
 8008b88:	46000000 	.word	0x46000000
 8008b8c:	4c742400 	.word	0x4c742400
 8008b90:	4a742400 	.word	0x4a742400
 8008b94:	4af42400 	.word	0x4af42400

08008b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008b9e:	f7ff fe81 	bl	80088a4 <HAL_RCC_GetSysClockFreq>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	4b10      	ldr	r3, [pc, #64]	; (8008be8 <HAL_RCC_GetHCLKFreq+0x50>)
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	0a1b      	lsrs	r3, r3, #8
 8008baa:	f003 030f 	and.w	r3, r3, #15
 8008bae:	490f      	ldr	r1, [pc, #60]	; (8008bec <HAL_RCC_GetHCLKFreq+0x54>)
 8008bb0:	5ccb      	ldrb	r3, [r1, r3]
 8008bb2:	f003 031f 	and.w	r3, r3, #31
 8008bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8008bba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bbc:	4b0a      	ldr	r3, [pc, #40]	; (8008be8 <HAL_RCC_GetHCLKFreq+0x50>)
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	f003 030f 	and.w	r3, r3, #15
 8008bc4:	4a09      	ldr	r2, [pc, #36]	; (8008bec <HAL_RCC_GetHCLKFreq+0x54>)
 8008bc6:	5cd3      	ldrb	r3, [r2, r3]
 8008bc8:	f003 031f 	and.w	r3, r3, #31
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd2:	4a07      	ldr	r2, [pc, #28]	; (8008bf0 <HAL_RCC_GetHCLKFreq+0x58>)
 8008bd4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008bd6:	4a07      	ldr	r2, [pc, #28]	; (8008bf4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008bdc:	4b04      	ldr	r3, [pc, #16]	; (8008bf0 <HAL_RCC_GetHCLKFreq+0x58>)
 8008bde:	681b      	ldr	r3, [r3, #0]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	58024400 	.word	0x58024400
 8008bec:	0800e1a8 	.word	0x0800e1a8
 8008bf0:	24000004 	.word	0x24000004
 8008bf4:	24000000 	.word	0x24000000

08008bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008bfc:	f7ff ffcc 	bl	8008b98 <HAL_RCC_GetHCLKFreq>
 8008c00:	4602      	mov	r2, r0
 8008c02:	4b06      	ldr	r3, [pc, #24]	; (8008c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c04:	69db      	ldr	r3, [r3, #28]
 8008c06:	091b      	lsrs	r3, r3, #4
 8008c08:	f003 0307 	and.w	r3, r3, #7
 8008c0c:	4904      	ldr	r1, [pc, #16]	; (8008c20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c0e:	5ccb      	ldrb	r3, [r1, r3]
 8008c10:	f003 031f 	and.w	r3, r3, #31
 8008c14:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	58024400 	.word	0x58024400
 8008c20:	0800e1a8 	.word	0x0800e1a8

08008c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008c28:	f7ff ffb6 	bl	8008b98 <HAL_RCC_GetHCLKFreq>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	4b06      	ldr	r3, [pc, #24]	; (8008c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	0a1b      	lsrs	r3, r3, #8
 8008c34:	f003 0307 	and.w	r3, r3, #7
 8008c38:	4904      	ldr	r1, [pc, #16]	; (8008c4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c3a:	5ccb      	ldrb	r3, [r1, r3]
 8008c3c:	f003 031f 	and.w	r3, r3, #31
 8008c40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	58024400 	.word	0x58024400
 8008c4c:	0800e1a8 	.word	0x0800e1a8

08008c50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008c58:	2300      	movs	r3, #0
 8008c5a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d03f      	beq.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c74:	d02a      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008c76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c7a:	d824      	bhi.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008c7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c80:	d018      	beq.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008c82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c86:	d81e      	bhi.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d003      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008c8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c90:	d007      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008c92:	e018      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c94:	4ba4      	ldr	r3, [pc, #656]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c98:	4aa3      	ldr	r2, [pc, #652]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008ca0:	e015      	b.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	3304      	adds	r3, #4
 8008ca6:	2102      	movs	r1, #2
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f001 f989 	bl	8009fc0 <RCCEx_PLL2_Config>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008cb2:	e00c      	b.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3324      	adds	r3, #36	; 0x24
 8008cb8:	2102      	movs	r1, #2
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f001 fa32 	bl	800a124 <RCCEx_PLL3_Config>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008cc4:	e003      	b.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	75fb      	strb	r3, [r7, #23]
      break;
 8008cca:	e000      	b.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cce:	7dfb      	ldrb	r3, [r7, #23]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d109      	bne.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008cd4:	4b94      	ldr	r3, [pc, #592]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ce0:	4991      	ldr	r1, [pc, #580]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	650b      	str	r3, [r1, #80]	; 0x50
 8008ce6:	e001      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
 8008cea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d03d      	beq.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cfc:	2b04      	cmp	r3, #4
 8008cfe:	d826      	bhi.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008d00:	a201      	add	r2, pc, #4	; (adr r2, 8008d08 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d06:	bf00      	nop
 8008d08:	08008d1d 	.word	0x08008d1d
 8008d0c:	08008d2b 	.word	0x08008d2b
 8008d10:	08008d3d 	.word	0x08008d3d
 8008d14:	08008d55 	.word	0x08008d55
 8008d18:	08008d55 	.word	0x08008d55
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d1c:	4b82      	ldr	r3, [pc, #520]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d20:	4a81      	ldr	r2, [pc, #516]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d28:	e015      	b.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	2100      	movs	r1, #0
 8008d30:	4618      	mov	r0, r3
 8008d32:	f001 f945 	bl	8009fc0 <RCCEx_PLL2_Config>
 8008d36:	4603      	mov	r3, r0
 8008d38:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d3a:	e00c      	b.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	3324      	adds	r3, #36	; 0x24
 8008d40:	2100      	movs	r1, #0
 8008d42:	4618      	mov	r0, r3
 8008d44:	f001 f9ee 	bl	800a124 <RCCEx_PLL3_Config>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d4c:	e003      	b.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	75fb      	strb	r3, [r7, #23]
      break;
 8008d52:	e000      	b.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d56:	7dfb      	ldrb	r3, [r7, #23]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d109      	bne.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d5c:	4b72      	ldr	r3, [pc, #456]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d60:	f023 0207 	bic.w	r2, r3, #7
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d68:	496f      	ldr	r1, [pc, #444]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	650b      	str	r3, [r1, #80]	; 0x50
 8008d6e:	e001      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d70:	7dfb      	ldrb	r3, [r7, #23]
 8008d72:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d051      	beq.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008d86:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008d8a:	d036      	beq.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008d8c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008d90:	d830      	bhi.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008d92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d96:	d032      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8008d98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d9c:	d82a      	bhi.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008d9e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008da2:	d02e      	beq.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008da4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008da8:	d824      	bhi.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008dae:	d018      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008db0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008db4:	d81e      	bhi.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d003      	beq.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8008dba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dbe:	d007      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008dc0:	e018      	b.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dc2:	4b59      	ldr	r3, [pc, #356]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc6:	4a58      	ldr	r2, [pc, #352]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008dce:	e019      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f001 f8f2 	bl	8009fc0 <RCCEx_PLL2_Config>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008de0:	e010      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	3324      	adds	r3, #36	; 0x24
 8008de6:	2100      	movs	r1, #0
 8008de8:	4618      	mov	r0, r3
 8008dea:	f001 f99b 	bl	800a124 <RCCEx_PLL3_Config>
 8008dee:	4603      	mov	r3, r0
 8008df0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008df2:	e007      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	75fb      	strb	r3, [r7, #23]
      break;
 8008df8:	e004      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008dfa:	bf00      	nop
 8008dfc:	e002      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008dfe:	bf00      	nop
 8008e00:	e000      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008e02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e04:	7dfb      	ldrb	r3, [r7, #23]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10a      	bne.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008e0a:	4b47      	ldr	r3, [pc, #284]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e0e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008e18:	4943      	ldr	r1, [pc, #268]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	658b      	str	r3, [r1, #88]	; 0x58
 8008e1e:	e001      	b.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
 8008e22:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d051      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e36:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008e3a:	d036      	beq.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008e3c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008e40:	d830      	bhi.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008e42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e46:	d032      	beq.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8008e48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e4c:	d82a      	bhi.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008e4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e52:	d02e      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008e54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e58:	d824      	bhi.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008e5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e5e:	d018      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008e60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e64:	d81e      	bhi.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d003      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008e6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e6e:	d007      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008e70:	e018      	b.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e72:	4b2d      	ldr	r3, [pc, #180]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e76:	4a2c      	ldr	r2, [pc, #176]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e7e:	e019      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	3304      	adds	r3, #4
 8008e84:	2100      	movs	r1, #0
 8008e86:	4618      	mov	r0, r3
 8008e88:	f001 f89a 	bl	8009fc0 <RCCEx_PLL2_Config>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008e90:	e010      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	3324      	adds	r3, #36	; 0x24
 8008e96:	2100      	movs	r1, #0
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f001 f943 	bl	800a124 <RCCEx_PLL3_Config>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ea2:	e007      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ea8:	e004      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008eaa:	bf00      	nop
 8008eac:	e002      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008eae:	bf00      	nop
 8008eb0:	e000      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008eb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008eb4:	7dfb      	ldrb	r3, [r7, #23]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10a      	bne.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008eba:	4b1b      	ldr	r3, [pc, #108]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ebe:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008ec8:	4917      	ldr	r1, [pc, #92]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	658b      	str	r3, [r1, #88]	; 0x58
 8008ece:	e001      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ed0:	7dfb      	ldrb	r3, [r7, #23]
 8008ed2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d035      	beq.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ee4:	2b30      	cmp	r3, #48	; 0x30
 8008ee6:	d01c      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008ee8:	2b30      	cmp	r3, #48	; 0x30
 8008eea:	d817      	bhi.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008eec:	2b20      	cmp	r3, #32
 8008eee:	d00c      	beq.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008ef0:	2b20      	cmp	r3, #32
 8008ef2:	d813      	bhi.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d019      	beq.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8008ef8:	2b10      	cmp	r3, #16
 8008efa:	d10f      	bne.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008efc:	4b0a      	ldr	r3, [pc, #40]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f00:	4a09      	ldr	r2, [pc, #36]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008f08:	e011      	b.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	3304      	adds	r3, #4
 8008f0e:	2102      	movs	r1, #2
 8008f10:	4618      	mov	r0, r3
 8008f12:	f001 f855 	bl	8009fc0 <RCCEx_PLL2_Config>
 8008f16:	4603      	mov	r3, r0
 8008f18:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008f1a:	e008      	b.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f20:	e005      	b.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8008f22:	bf00      	nop
 8008f24:	e003      	b.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008f26:	bf00      	nop
 8008f28:	58024400 	.word	0x58024400
      break;
 8008f2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f2e:	7dfb      	ldrb	r3, [r7, #23]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d109      	bne.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008f34:	4ba3      	ldr	r3, [pc, #652]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f40:	49a0      	ldr	r1, [pc, #640]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f42:	4313      	orrs	r3, r2
 8008f44:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008f46:	e001      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f48:	7dfb      	ldrb	r3, [r7, #23]
 8008f4a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d047      	beq.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f60:	d030      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008f62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f66:	d82a      	bhi.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008f68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f6c:	d02c      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008f6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f72:	d824      	bhi.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f78:	d018      	beq.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f7e:	d81e      	bhi.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f88:	d007      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008f8a:	e018      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f8c:	4b8d      	ldr	r3, [pc, #564]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f90:	4a8c      	ldr	r2, [pc, #560]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008f98:	e017      	b.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	3304      	adds	r3, #4
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f001 f80d 	bl	8009fc0 <RCCEx_PLL2_Config>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008faa:	e00e      	b.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	3324      	adds	r3, #36	; 0x24
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f001 f8b6 	bl	800a124 <RCCEx_PLL3_Config>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008fbc:	e005      	b.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8008fc2:	e002      	b.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008fc4:	bf00      	nop
 8008fc6:	e000      	b.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fca:	7dfb      	ldrb	r3, [r7, #23]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d109      	bne.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008fd0:	4b7c      	ldr	r3, [pc, #496]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fd4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fdc:	4979      	ldr	r1, [pc, #484]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	650b      	str	r3, [r1, #80]	; 0x50
 8008fe2:	e001      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe4:	7dfb      	ldrb	r3, [r7, #23]
 8008fe6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d049      	beq.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ffc:	d02e      	beq.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8008ffe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009002:	d828      	bhi.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009004:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009008:	d02a      	beq.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800900a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800900e:	d822      	bhi.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009010:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009014:	d026      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009016:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800901a:	d81c      	bhi.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800901c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009020:	d010      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009022:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009026:	d816      	bhi.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009028:	2b00      	cmp	r3, #0
 800902a:	d01d      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800902c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009030:	d111      	bne.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	3304      	adds	r3, #4
 8009036:	2101      	movs	r1, #1
 8009038:	4618      	mov	r0, r3
 800903a:	f000 ffc1 	bl	8009fc0 <RCCEx_PLL2_Config>
 800903e:	4603      	mov	r3, r0
 8009040:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009042:	e012      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	3324      	adds	r3, #36	; 0x24
 8009048:	2101      	movs	r1, #1
 800904a:	4618      	mov	r0, r3
 800904c:	f001 f86a 	bl	800a124 <RCCEx_PLL3_Config>
 8009050:	4603      	mov	r3, r0
 8009052:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009054:	e009      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	75fb      	strb	r3, [r7, #23]
      break;
 800905a:	e006      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800905c:	bf00      	nop
 800905e:	e004      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009060:	bf00      	nop
 8009062:	e002      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009064:	bf00      	nop
 8009066:	e000      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009068:	bf00      	nop
    }

    if(ret == HAL_OK)
 800906a:	7dfb      	ldrb	r3, [r7, #23]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d109      	bne.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009070:	4b54      	ldr	r3, [pc, #336]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009074:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800907c:	4951      	ldr	r1, [pc, #324]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800907e:	4313      	orrs	r3, r2
 8009080:	650b      	str	r3, [r1, #80]	; 0x50
 8009082:	e001      	b.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009084:	7dfb      	ldrb	r3, [r7, #23]
 8009086:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d04b      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800909a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800909e:	d02e      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80090a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090a4:	d828      	bhi.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80090a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090aa:	d02a      	beq.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80090ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090b0:	d822      	bhi.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80090b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090b6:	d026      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80090b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090bc:	d81c      	bhi.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80090be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090c2:	d010      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80090c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090c8:	d816      	bhi.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d01d      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80090ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090d2:	d111      	bne.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	3304      	adds	r3, #4
 80090d8:	2101      	movs	r1, #1
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 ff70 	bl	8009fc0 <RCCEx_PLL2_Config>
 80090e0:	4603      	mov	r3, r0
 80090e2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80090e4:	e012      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	3324      	adds	r3, #36	; 0x24
 80090ea:	2101      	movs	r1, #1
 80090ec:	4618      	mov	r0, r3
 80090ee:	f001 f819 	bl	800a124 <RCCEx_PLL3_Config>
 80090f2:	4603      	mov	r3, r0
 80090f4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80090f6:	e009      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	75fb      	strb	r3, [r7, #23]
      break;
 80090fc:	e006      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80090fe:	bf00      	nop
 8009100:	e004      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009102:	bf00      	nop
 8009104:	e002      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009106:	bf00      	nop
 8009108:	e000      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800910a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800910c:	7dfb      	ldrb	r3, [r7, #23]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d10a      	bne.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009112:	4b2c      	ldr	r3, [pc, #176]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009116:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009120:	4928      	ldr	r1, [pc, #160]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009122:	4313      	orrs	r3, r2
 8009124:	658b      	str	r3, [r1, #88]	; 0x58
 8009126:	e001      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009128:	7dfb      	ldrb	r3, [r7, #23]
 800912a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d02f      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800913c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009140:	d00e      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8009142:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009146:	d814      	bhi.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009148:	2b00      	cmp	r3, #0
 800914a:	d015      	beq.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800914c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009150:	d10f      	bne.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009152:	4b1c      	ldr	r3, [pc, #112]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009156:	4a1b      	ldr	r2, [pc, #108]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800915c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800915e:	e00c      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	3304      	adds	r3, #4
 8009164:	2101      	movs	r1, #1
 8009166:	4618      	mov	r0, r3
 8009168:	f000 ff2a 	bl	8009fc0 <RCCEx_PLL2_Config>
 800916c:	4603      	mov	r3, r0
 800916e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009170:	e003      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	75fb      	strb	r3, [r7, #23]
      break;
 8009176:	e000      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009178:	bf00      	nop
    }

    if(ret == HAL_OK)
 800917a:	7dfb      	ldrb	r3, [r7, #23]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d109      	bne.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009180:	4b10      	ldr	r3, [pc, #64]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009184:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800918c:	490d      	ldr	r1, [pc, #52]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800918e:	4313      	orrs	r3, r2
 8009190:	650b      	str	r3, [r1, #80]	; 0x50
 8009192:	e001      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009194:	7dfb      	ldrb	r3, [r7, #23]
 8009196:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d034      	beq.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091a8:	2b03      	cmp	r3, #3
 80091aa:	d81d      	bhi.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80091ac:	a201      	add	r2, pc, #4	; (adr r2, 80091b4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80091ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b2:	bf00      	nop
 80091b4:	080091ef 	.word	0x080091ef
 80091b8:	080091c9 	.word	0x080091c9
 80091bc:	080091d7 	.word	0x080091d7
 80091c0:	080091ef 	.word	0x080091ef
 80091c4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091c8:	4bb1      	ldr	r3, [pc, #708]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80091ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091cc:	4ab0      	ldr	r2, [pc, #704]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80091ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80091d4:	e00c      	b.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	3304      	adds	r3, #4
 80091da:	2102      	movs	r1, #2
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 feef 	bl	8009fc0 <RCCEx_PLL2_Config>
 80091e2:	4603      	mov	r3, r0
 80091e4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80091e6:	e003      	b.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80091e8:	2301      	movs	r3, #1
 80091ea:	75fb      	strb	r3, [r7, #23]
      break;
 80091ec:	e000      	b.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 80091ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091f0:	7dfb      	ldrb	r3, [r7, #23]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d109      	bne.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80091f6:	4ba6      	ldr	r3, [pc, #664]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80091f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091fa:	f023 0203 	bic.w	r2, r3, #3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009202:	49a3      	ldr	r1, [pc, #652]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009204:	4313      	orrs	r3, r2
 8009206:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009208:	e001      	b.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800920a:	7dfb      	ldrb	r3, [r7, #23]
 800920c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009216:	2b00      	cmp	r3, #0
 8009218:	f000 8086 	beq.w	8009328 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800921c:	4b9d      	ldr	r3, [pc, #628]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a9c      	ldr	r2, [pc, #624]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009226:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009228:	f7fb fc86 	bl	8004b38 <HAL_GetTick>
 800922c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800922e:	e009      	b.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009230:	f7fb fc82 	bl	8004b38 <HAL_GetTick>
 8009234:	4602      	mov	r2, r0
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	2b64      	cmp	r3, #100	; 0x64
 800923c:	d902      	bls.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800923e:	2303      	movs	r3, #3
 8009240:	75fb      	strb	r3, [r7, #23]
        break;
 8009242:	e005      	b.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009244:	4b93      	ldr	r3, [pc, #588]	; (8009494 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800924c:	2b00      	cmp	r3, #0
 800924e:	d0ef      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8009250:	7dfb      	ldrb	r3, [r7, #23]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d166      	bne.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009256:	4b8e      	ldr	r3, [pc, #568]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009258:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009260:	4053      	eors	r3, r2
 8009262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009266:	2b00      	cmp	r3, #0
 8009268:	d013      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800926a:	4b89      	ldr	r3, [pc, #548]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800926c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800926e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009272:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009274:	4b86      	ldr	r3, [pc, #536]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009278:	4a85      	ldr	r2, [pc, #532]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800927a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800927e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009280:	4b83      	ldr	r3, [pc, #524]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009284:	4a82      	ldr	r2, [pc, #520]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800928a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800928c:	4a80      	ldr	r2, [pc, #512]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800929c:	d115      	bne.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800929e:	f7fb fc4b 	bl	8004b38 <HAL_GetTick>
 80092a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092a4:	e00b      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092a6:	f7fb fc47 	bl	8004b38 <HAL_GetTick>
 80092aa:	4602      	mov	r2, r0
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d902      	bls.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80092b8:	2303      	movs	r3, #3
 80092ba:	75fb      	strb	r3, [r7, #23]
            break;
 80092bc:	e005      	b.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092be:	4b74      	ldr	r3, [pc, #464]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c2:	f003 0302 	and.w	r3, r3, #2
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d0ed      	beq.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80092ca:	7dfb      	ldrb	r3, [r7, #23]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d126      	bne.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092de:	d10d      	bne.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80092e0:	4b6b      	ldr	r3, [pc, #428]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092ee:	0919      	lsrs	r1, r3, #4
 80092f0:	4b69      	ldr	r3, [pc, #420]	; (8009498 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80092f2:	400b      	ands	r3, r1
 80092f4:	4966      	ldr	r1, [pc, #408]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	610b      	str	r3, [r1, #16]
 80092fa:	e005      	b.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80092fc:	4b64      	ldr	r3, [pc, #400]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	4a63      	ldr	r2, [pc, #396]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009302:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009306:	6113      	str	r3, [r2, #16]
 8009308:	4b61      	ldr	r3, [pc, #388]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800930a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009316:	495e      	ldr	r1, [pc, #376]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009318:	4313      	orrs	r3, r2
 800931a:	670b      	str	r3, [r1, #112]	; 0x70
 800931c:	e004      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800931e:	7dfb      	ldrb	r3, [r7, #23]
 8009320:	75bb      	strb	r3, [r7, #22]
 8009322:	e001      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009324:	7dfb      	ldrb	r3, [r7, #23]
 8009326:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0301 	and.w	r3, r3, #1
 8009330:	2b00      	cmp	r3, #0
 8009332:	d07e      	beq.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009338:	2b28      	cmp	r3, #40	; 0x28
 800933a:	d867      	bhi.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800933c:	a201      	add	r2, pc, #4	; (adr r2, 8009344 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800933e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009342:	bf00      	nop
 8009344:	08009413 	.word	0x08009413
 8009348:	0800940d 	.word	0x0800940d
 800934c:	0800940d 	.word	0x0800940d
 8009350:	0800940d 	.word	0x0800940d
 8009354:	0800940d 	.word	0x0800940d
 8009358:	0800940d 	.word	0x0800940d
 800935c:	0800940d 	.word	0x0800940d
 8009360:	0800940d 	.word	0x0800940d
 8009364:	080093e9 	.word	0x080093e9
 8009368:	0800940d 	.word	0x0800940d
 800936c:	0800940d 	.word	0x0800940d
 8009370:	0800940d 	.word	0x0800940d
 8009374:	0800940d 	.word	0x0800940d
 8009378:	0800940d 	.word	0x0800940d
 800937c:	0800940d 	.word	0x0800940d
 8009380:	0800940d 	.word	0x0800940d
 8009384:	080093fb 	.word	0x080093fb
 8009388:	0800940d 	.word	0x0800940d
 800938c:	0800940d 	.word	0x0800940d
 8009390:	0800940d 	.word	0x0800940d
 8009394:	0800940d 	.word	0x0800940d
 8009398:	0800940d 	.word	0x0800940d
 800939c:	0800940d 	.word	0x0800940d
 80093a0:	0800940d 	.word	0x0800940d
 80093a4:	08009413 	.word	0x08009413
 80093a8:	0800940d 	.word	0x0800940d
 80093ac:	0800940d 	.word	0x0800940d
 80093b0:	0800940d 	.word	0x0800940d
 80093b4:	0800940d 	.word	0x0800940d
 80093b8:	0800940d 	.word	0x0800940d
 80093bc:	0800940d 	.word	0x0800940d
 80093c0:	0800940d 	.word	0x0800940d
 80093c4:	08009413 	.word	0x08009413
 80093c8:	0800940d 	.word	0x0800940d
 80093cc:	0800940d 	.word	0x0800940d
 80093d0:	0800940d 	.word	0x0800940d
 80093d4:	0800940d 	.word	0x0800940d
 80093d8:	0800940d 	.word	0x0800940d
 80093dc:	0800940d 	.word	0x0800940d
 80093e0:	0800940d 	.word	0x0800940d
 80093e4:	08009413 	.word	0x08009413
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	3304      	adds	r3, #4
 80093ec:	2101      	movs	r1, #1
 80093ee:	4618      	mov	r0, r3
 80093f0:	f000 fde6 	bl	8009fc0 <RCCEx_PLL2_Config>
 80093f4:	4603      	mov	r3, r0
 80093f6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80093f8:	e00c      	b.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	3324      	adds	r3, #36	; 0x24
 80093fe:	2101      	movs	r1, #1
 8009400:	4618      	mov	r0, r3
 8009402:	f000 fe8f 	bl	800a124 <RCCEx_PLL3_Config>
 8009406:	4603      	mov	r3, r0
 8009408:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800940a:	e003      	b.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	75fb      	strb	r3, [r7, #23]
      break;
 8009410:	e000      	b.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8009412:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009414:	7dfb      	ldrb	r3, [r7, #23]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d109      	bne.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800941a:	4b1d      	ldr	r3, [pc, #116]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800941c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800941e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009426:	491a      	ldr	r1, [pc, #104]	; (8009490 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009428:	4313      	orrs	r3, r2
 800942a:	654b      	str	r3, [r1, #84]	; 0x54
 800942c:	e001      	b.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800942e:	7dfb      	ldrb	r3, [r7, #23]
 8009430:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 0302 	and.w	r3, r3, #2
 800943a:	2b00      	cmp	r3, #0
 800943c:	d03e      	beq.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009442:	2b05      	cmp	r3, #5
 8009444:	d820      	bhi.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8009446:	a201      	add	r2, pc, #4	; (adr r2, 800944c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8009448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944c:	0800949d 	.word	0x0800949d
 8009450:	08009465 	.word	0x08009465
 8009454:	08009477 	.word	0x08009477
 8009458:	0800949d 	.word	0x0800949d
 800945c:	0800949d 	.word	0x0800949d
 8009460:	0800949d 	.word	0x0800949d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	3304      	adds	r3, #4
 8009468:	2101      	movs	r1, #1
 800946a:	4618      	mov	r0, r3
 800946c:	f000 fda8 	bl	8009fc0 <RCCEx_PLL2_Config>
 8009470:	4603      	mov	r3, r0
 8009472:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009474:	e013      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	3324      	adds	r3, #36	; 0x24
 800947a:	2101      	movs	r1, #1
 800947c:	4618      	mov	r0, r3
 800947e:	f000 fe51 	bl	800a124 <RCCEx_PLL3_Config>
 8009482:	4603      	mov	r3, r0
 8009484:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009486:	e00a      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	75fb      	strb	r3, [r7, #23]
      break;
 800948c:	e007      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800948e:	bf00      	nop
 8009490:	58024400 	.word	0x58024400
 8009494:	58024800 	.word	0x58024800
 8009498:	00ffffcf 	.word	0x00ffffcf
      break;
 800949c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800949e:	7dfb      	ldrb	r3, [r7, #23]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d109      	bne.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80094a4:	4b9f      	ldr	r3, [pc, #636]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80094a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094a8:	f023 0207 	bic.w	r2, r3, #7
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094b0:	499c      	ldr	r1, [pc, #624]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80094b2:	4313      	orrs	r3, r2
 80094b4:	654b      	str	r3, [r1, #84]	; 0x54
 80094b6:	e001      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
 80094ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0304 	and.w	r3, r3, #4
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d039      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094ce:	2b05      	cmp	r3, #5
 80094d0:	d820      	bhi.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80094d2:	a201      	add	r2, pc, #4	; (adr r2, 80094d8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80094d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d8:	0800951b 	.word	0x0800951b
 80094dc:	080094f1 	.word	0x080094f1
 80094e0:	08009503 	.word	0x08009503
 80094e4:	0800951b 	.word	0x0800951b
 80094e8:	0800951b 	.word	0x0800951b
 80094ec:	0800951b 	.word	0x0800951b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	3304      	adds	r3, #4
 80094f4:	2101      	movs	r1, #1
 80094f6:	4618      	mov	r0, r3
 80094f8:	f000 fd62 	bl	8009fc0 <RCCEx_PLL2_Config>
 80094fc:	4603      	mov	r3, r0
 80094fe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009500:	e00c      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	3324      	adds	r3, #36	; 0x24
 8009506:	2101      	movs	r1, #1
 8009508:	4618      	mov	r0, r3
 800950a:	f000 fe0b 	bl	800a124 <RCCEx_PLL3_Config>
 800950e:	4603      	mov	r3, r0
 8009510:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009512:	e003      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	75fb      	strb	r3, [r7, #23]
      break;
 8009518:	e000      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800951a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800951c:	7dfb      	ldrb	r3, [r7, #23]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d10a      	bne.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009522:	4b80      	ldr	r3, [pc, #512]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009526:	f023 0207 	bic.w	r2, r3, #7
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009530:	497c      	ldr	r1, [pc, #496]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009532:	4313      	orrs	r3, r2
 8009534:	658b      	str	r3, [r1, #88]	; 0x58
 8009536:	e001      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009538:	7dfb      	ldrb	r3, [r7, #23]
 800953a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 0320 	and.w	r3, r3, #32
 8009544:	2b00      	cmp	r3, #0
 8009546:	d04b      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800954e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009552:	d02e      	beq.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8009554:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009558:	d828      	bhi.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800955a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800955e:	d02a      	beq.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009564:	d822      	bhi.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009566:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800956a:	d026      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800956c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009570:	d81c      	bhi.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009576:	d010      	beq.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8009578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800957c:	d816      	bhi.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800957e:	2b00      	cmp	r3, #0
 8009580:	d01d      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8009582:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009586:	d111      	bne.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	3304      	adds	r3, #4
 800958c:	2100      	movs	r1, #0
 800958e:	4618      	mov	r0, r3
 8009590:	f000 fd16 	bl	8009fc0 <RCCEx_PLL2_Config>
 8009594:	4603      	mov	r3, r0
 8009596:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009598:	e012      	b.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	3324      	adds	r3, #36	; 0x24
 800959e:	2102      	movs	r1, #2
 80095a0:	4618      	mov	r0, r3
 80095a2:	f000 fdbf 	bl	800a124 <RCCEx_PLL3_Config>
 80095a6:	4603      	mov	r3, r0
 80095a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80095aa:	e009      	b.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	75fb      	strb	r3, [r7, #23]
      break;
 80095b0:	e006      	b.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80095b2:	bf00      	nop
 80095b4:	e004      	b.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80095b6:	bf00      	nop
 80095b8:	e002      	b.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80095ba:	bf00      	nop
 80095bc:	e000      	b.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80095be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095c0:	7dfb      	ldrb	r3, [r7, #23]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10a      	bne.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80095c6:	4b57      	ldr	r3, [pc, #348]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80095c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095d4:	4953      	ldr	r1, [pc, #332]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80095d6:	4313      	orrs	r3, r2
 80095d8:	654b      	str	r3, [r1, #84]	; 0x54
 80095da:	e001      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095dc:	7dfb      	ldrb	r3, [r7, #23]
 80095de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d04b      	beq.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80095f6:	d02e      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80095f8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80095fc:	d828      	bhi.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80095fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009602:	d02a      	beq.n	800965a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009608:	d822      	bhi.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800960a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800960e:	d026      	beq.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009610:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009614:	d81c      	bhi.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800961a:	d010      	beq.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800961c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009620:	d816      	bhi.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009622:	2b00      	cmp	r3, #0
 8009624:	d01d      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800962a:	d111      	bne.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	3304      	adds	r3, #4
 8009630:	2100      	movs	r1, #0
 8009632:	4618      	mov	r0, r3
 8009634:	f000 fcc4 	bl	8009fc0 <RCCEx_PLL2_Config>
 8009638:	4603      	mov	r3, r0
 800963a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800963c:	e012      	b.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	3324      	adds	r3, #36	; 0x24
 8009642:	2102      	movs	r1, #2
 8009644:	4618      	mov	r0, r3
 8009646:	f000 fd6d 	bl	800a124 <RCCEx_PLL3_Config>
 800964a:	4603      	mov	r3, r0
 800964c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800964e:	e009      	b.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	75fb      	strb	r3, [r7, #23]
      break;
 8009654:	e006      	b.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009656:	bf00      	nop
 8009658:	e004      	b.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800965a:	bf00      	nop
 800965c:	e002      	b.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800965e:	bf00      	nop
 8009660:	e000      	b.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009662:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009664:	7dfb      	ldrb	r3, [r7, #23]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d10a      	bne.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800966a:	4b2e      	ldr	r3, [pc, #184]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800966c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800966e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009678:	492a      	ldr	r1, [pc, #168]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800967a:	4313      	orrs	r3, r2
 800967c:	658b      	str	r3, [r1, #88]	; 0x58
 800967e:	e001      	b.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009680:	7dfb      	ldrb	r3, [r7, #23]
 8009682:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800968c:	2b00      	cmp	r3, #0
 800968e:	d04d      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009696:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800969a:	d02e      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800969c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80096a0:	d828      	bhi.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80096a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096a6:	d02a      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80096a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096ac:	d822      	bhi.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80096ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80096b2:	d026      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80096b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80096b8:	d81c      	bhi.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80096ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096be:	d010      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80096c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096c4:	d816      	bhi.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d01d      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80096ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096ce:	d111      	bne.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	3304      	adds	r3, #4
 80096d4:	2100      	movs	r1, #0
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 fc72 	bl	8009fc0 <RCCEx_PLL2_Config>
 80096dc:	4603      	mov	r3, r0
 80096de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80096e0:	e012      	b.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	3324      	adds	r3, #36	; 0x24
 80096e6:	2102      	movs	r1, #2
 80096e8:	4618      	mov	r0, r3
 80096ea:	f000 fd1b 	bl	800a124 <RCCEx_PLL3_Config>
 80096ee:	4603      	mov	r3, r0
 80096f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80096f2:	e009      	b.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	75fb      	strb	r3, [r7, #23]
      break;
 80096f8:	e006      	b.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80096fa:	bf00      	nop
 80096fc:	e004      	b.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80096fe:	bf00      	nop
 8009700:	e002      	b.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009702:	bf00      	nop
 8009704:	e000      	b.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009706:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009708:	7dfb      	ldrb	r3, [r7, #23]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10c      	bne.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800970e:	4b05      	ldr	r3, [pc, #20]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009712:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800971c:	4901      	ldr	r1, [pc, #4]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800971e:	4313      	orrs	r3, r2
 8009720:	658b      	str	r3, [r1, #88]	; 0x58
 8009722:	e003      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009724:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009728:	7dfb      	ldrb	r3, [r7, #23]
 800972a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f003 0308 	and.w	r3, r3, #8
 8009734:	2b00      	cmp	r3, #0
 8009736:	d018      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800973c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009740:	d10a      	bne.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	3324      	adds	r3, #36	; 0x24
 8009746:	2102      	movs	r1, #2
 8009748:	4618      	mov	r0, r3
 800974a:	f000 fceb 	bl	800a124 <RCCEx_PLL3_Config>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d001      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009758:	4b8a      	ldr	r3, [pc, #552]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800975a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800975c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009764:	4987      	ldr	r1, [pc, #540]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009766:	4313      	orrs	r3, r2
 8009768:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f003 0310 	and.w	r3, r3, #16
 8009772:	2b00      	cmp	r3, #0
 8009774:	d01a      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800977c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009780:	d10a      	bne.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	3324      	adds	r3, #36	; 0x24
 8009786:	2102      	movs	r1, #2
 8009788:	4618      	mov	r0, r3
 800978a:	f000 fccb 	bl	800a124 <RCCEx_PLL3_Config>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d001      	beq.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009798:	4b7a      	ldr	r3, [pc, #488]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800979a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800979c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097a6:	4977      	ldr	r1, [pc, #476]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097a8:	4313      	orrs	r3, r2
 80097aa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d034      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097c2:	d01d      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80097c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097c8:	d817      	bhi.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d003      	beq.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80097ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097d2:	d009      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80097d4:	e011      	b.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	3304      	adds	r3, #4
 80097da:	2100      	movs	r1, #0
 80097dc:	4618      	mov	r0, r3
 80097de:	f000 fbef 	bl	8009fc0 <RCCEx_PLL2_Config>
 80097e2:	4603      	mov	r3, r0
 80097e4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80097e6:	e00c      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	3324      	adds	r3, #36	; 0x24
 80097ec:	2102      	movs	r1, #2
 80097ee:	4618      	mov	r0, r3
 80097f0:	f000 fc98 	bl	800a124 <RCCEx_PLL3_Config>
 80097f4:	4603      	mov	r3, r0
 80097f6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80097f8:	e003      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	75fb      	strb	r3, [r7, #23]
      break;
 80097fe:	e000      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009800:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009802:	7dfb      	ldrb	r3, [r7, #23]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10a      	bne.n	800981e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009808:	4b5e      	ldr	r3, [pc, #376]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800980a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800980c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009816:	495b      	ldr	r1, [pc, #364]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009818:	4313      	orrs	r3, r2
 800981a:	658b      	str	r3, [r1, #88]	; 0x58
 800981c:	e001      	b.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800981e:	7dfb      	ldrb	r3, [r7, #23]
 8009820:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800982a:	2b00      	cmp	r3, #0
 800982c:	d033      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009834:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009838:	d01c      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800983a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800983e:	d816      	bhi.n	800986e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009844:	d003      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009846:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800984a:	d007      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800984c:	e00f      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800984e:	4b4d      	ldr	r3, [pc, #308]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009852:	4a4c      	ldr	r2, [pc, #304]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009858:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800985a:	e00c      	b.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	3324      	adds	r3, #36	; 0x24
 8009860:	2101      	movs	r1, #1
 8009862:	4618      	mov	r0, r3
 8009864:	f000 fc5e 	bl	800a124 <RCCEx_PLL3_Config>
 8009868:	4603      	mov	r3, r0
 800986a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800986c:	e003      	b.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	75fb      	strb	r3, [r7, #23]
      break;
 8009872:	e000      	b.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8009874:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009876:	7dfb      	ldrb	r3, [r7, #23]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10a      	bne.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800987c:	4b41      	ldr	r3, [pc, #260]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800987e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009880:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800988a:	493e      	ldr	r1, [pc, #248]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800988c:	4313      	orrs	r3, r2
 800988e:	654b      	str	r3, [r1, #84]	; 0x54
 8009890:	e001      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009892:	7dfb      	ldrb	r3, [r7, #23]
 8009894:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d029      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d003      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80098aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098ae:	d007      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80098b0:	e00f      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098b2:	4b34      	ldr	r3, [pc, #208]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b6:	4a33      	ldr	r2, [pc, #204]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80098be:	e00b      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	3304      	adds	r3, #4
 80098c4:	2102      	movs	r1, #2
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 fb7a 	bl	8009fc0 <RCCEx_PLL2_Config>
 80098cc:	4603      	mov	r3, r0
 80098ce:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80098d0:	e002      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	75fb      	strb	r3, [r7, #23]
      break;
 80098d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098d8:	7dfb      	ldrb	r3, [r7, #23]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d109      	bne.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80098de:	4b29      	ldr	r3, [pc, #164]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ea:	4926      	ldr	r1, [pc, #152]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098ec:	4313      	orrs	r3, r2
 80098ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80098f0:	e001      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098f2:	7dfb      	ldrb	r3, [r7, #23]
 80098f4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00a      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	3324      	adds	r3, #36	; 0x24
 8009906:	2102      	movs	r1, #2
 8009908:	4618      	mov	r0, r3
 800990a:	f000 fc0b 	bl	800a124 <RCCEx_PLL3_Config>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d001      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009920:	2b00      	cmp	r3, #0
 8009922:	d033      	beq.n	800998c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009928:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800992c:	d017      	beq.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800992e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009932:	d811      	bhi.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009938:	d013      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800993a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800993e:	d80b      	bhi.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009940:	2b00      	cmp	r3, #0
 8009942:	d010      	beq.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8009944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009948:	d106      	bne.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800994a:	4b0e      	ldr	r3, [pc, #56]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800994c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994e:	4a0d      	ldr	r2, [pc, #52]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009954:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009956:	e007      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	75fb      	strb	r3, [r7, #23]
      break;
 800995c:	e004      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800995e:	bf00      	nop
 8009960:	e002      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009962:	bf00      	nop
 8009964:	e000      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009966:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009968:	7dfb      	ldrb	r3, [r7, #23]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10c      	bne.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800996e:	4b05      	ldr	r3, [pc, #20]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009972:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800997a:	4902      	ldr	r1, [pc, #8]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800997c:	4313      	orrs	r3, r2
 800997e:	654b      	str	r3, [r1, #84]	; 0x54
 8009980:	e004      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8009982:	bf00      	nop
 8009984:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009988:	7dfb      	ldrb	r3, [r7, #23]
 800998a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009994:	2b00      	cmp	r3, #0
 8009996:	d008      	beq.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009998:	4b29      	ldr	r3, [pc, #164]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800999a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800999c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099a4:	4926      	ldr	r1, [pc, #152]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099a6:	4313      	orrs	r3, r2
 80099a8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d008      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80099b6:	4b22      	ldr	r3, [pc, #136]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099ba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099c2:	491f      	ldr	r1, [pc, #124]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099c4:	4313      	orrs	r3, r2
 80099c6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00d      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80099d4:	4b1a      	ldr	r3, [pc, #104]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	4a19      	ldr	r2, [pc, #100]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80099de:	6113      	str	r3, [r2, #16]
 80099e0:	4b17      	ldr	r3, [pc, #92]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099e2:	691a      	ldr	r2, [r3, #16]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099ea:	4915      	ldr	r1, [pc, #84]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099ec:	4313      	orrs	r3, r2
 80099ee:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	da08      	bge.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80099f8:	4b11      	ldr	r3, [pc, #68]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099fc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a04:	490e      	ldr	r1, [pc, #56]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a06:	4313      	orrs	r3, r2
 8009a08:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d009      	beq.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009a16:	4b0a      	ldr	r3, [pc, #40]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a24:	4906      	ldr	r1, [pc, #24]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a26:	4313      	orrs	r3, r2
 8009a28:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009a2a:	7dbb      	ldrb	r3, [r7, #22]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d101      	bne.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009a30:	2300      	movs	r3, #0
 8009a32:	e000      	b.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3718      	adds	r7, #24
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	58024400 	.word	0x58024400

08009a44 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009a48:	f7ff f8a6 	bl	8008b98 <HAL_RCC_GetHCLKFreq>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	4b06      	ldr	r3, [pc, #24]	; (8009a68 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009a50:	6a1b      	ldr	r3, [r3, #32]
 8009a52:	091b      	lsrs	r3, r3, #4
 8009a54:	f003 0307 	and.w	r3, r3, #7
 8009a58:	4904      	ldr	r1, [pc, #16]	; (8009a6c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009a5a:	5ccb      	ldrb	r3, [r1, r3]
 8009a5c:	f003 031f 	and.w	r3, r3, #31
 8009a60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	58024400 	.word	0x58024400
 8009a6c:	0800e1a8 	.word	0x0800e1a8

08009a70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b089      	sub	sp, #36	; 0x24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a78:	4ba1      	ldr	r3, [pc, #644]	; (8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7c:	f003 0303 	and.w	r3, r3, #3
 8009a80:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009a82:	4b9f      	ldr	r3, [pc, #636]	; (8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a86:	0b1b      	lsrs	r3, r3, #12
 8009a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a8c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009a8e:	4b9c      	ldr	r3, [pc, #624]	; (8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a92:	091b      	lsrs	r3, r3, #4
 8009a94:	f003 0301 	and.w	r3, r3, #1
 8009a98:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009a9a:	4b99      	ldr	r3, [pc, #612]	; (8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a9e:	08db      	lsrs	r3, r3, #3
 8009aa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009aa4:	693a      	ldr	r2, [r7, #16]
 8009aa6:	fb02 f303 	mul.w	r3, r2, r3
 8009aaa:	ee07 3a90 	vmov	s15, r3
 8009aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f000 8111 	beq.w	8009ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	f000 8083 	beq.w	8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	f200 80a1 	bhi.w	8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d003      	beq.n	8009adc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d056      	beq.n	8009b88 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009ada:	e099      	b.n	8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009adc:	4b88      	ldr	r3, [pc, #544]	; (8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f003 0320 	and.w	r3, r3, #32
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d02d      	beq.n	8009b44 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ae8:	4b85      	ldr	r3, [pc, #532]	; (8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	08db      	lsrs	r3, r3, #3
 8009aee:	f003 0303 	and.w	r3, r3, #3
 8009af2:	4a84      	ldr	r2, [pc, #528]	; (8009d04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009af4:	fa22 f303 	lsr.w	r3, r2, r3
 8009af8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	ee07 3a90 	vmov	s15, r3
 8009b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	ee07 3a90 	vmov	s15, r3
 8009b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b12:	4b7b      	ldr	r3, [pc, #492]	; (8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b1a:	ee07 3a90 	vmov	s15, r3
 8009b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009d08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b3e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009b42:	e087      	b.n	8009c54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	ee07 3a90 	vmov	s15, r3
 8009b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009d0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b56:	4b6a      	ldr	r3, [pc, #424]	; (8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b5e:	ee07 3a90 	vmov	s15, r3
 8009b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009d08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b86:	e065      	b.n	8009c54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	ee07 3a90 	vmov	s15, r3
 8009b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009d10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b9a:	4b59      	ldr	r3, [pc, #356]	; (8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ba2:	ee07 3a90 	vmov	s15, r3
 8009ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009d08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bca:	e043      	b.n	8009c54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	ee07 3a90 	vmov	s15, r3
 8009bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009d14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bde:	4b48      	ldr	r3, [pc, #288]	; (8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009be6:	ee07 3a90 	vmov	s15, r3
 8009bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bf2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009d08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c0e:	e021      	b.n	8009c54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	ee07 3a90 	vmov	s15, r3
 8009c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009d10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c22:	4b37      	ldr	r3, [pc, #220]	; (8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c2a:	ee07 3a90 	vmov	s15, r3
 8009c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009d08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009c54:	4b2a      	ldr	r3, [pc, #168]	; (8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c58:	0a5b      	lsrs	r3, r3, #9
 8009c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c5e:	ee07 3a90 	vmov	s15, r3
 8009c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c7a:	ee17 2a90 	vmov	r2, s15
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009c82:	4b1f      	ldr	r3, [pc, #124]	; (8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c86:	0c1b      	lsrs	r3, r3, #16
 8009c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c8c:	ee07 3a90 	vmov	s15, r3
 8009c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ca8:	ee17 2a90 	vmov	r2, s15
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009cb0:	4b13      	ldr	r3, [pc, #76]	; (8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb4:	0e1b      	lsrs	r3, r3, #24
 8009cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cba:	ee07 3a90 	vmov	s15, r3
 8009cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cca:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cd6:	ee17 2a90 	vmov	r2, s15
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009cde:	e008      	b.n	8009cf2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	609a      	str	r2, [r3, #8]
}
 8009cf2:	bf00      	nop
 8009cf4:	3724      	adds	r7, #36	; 0x24
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	58024400 	.word	0x58024400
 8009d04:	03d09000 	.word	0x03d09000
 8009d08:	46000000 	.word	0x46000000
 8009d0c:	4c742400 	.word	0x4c742400
 8009d10:	4a742400 	.word	0x4a742400
 8009d14:	4af42400 	.word	0x4af42400

08009d18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b089      	sub	sp, #36	; 0x24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d20:	4ba1      	ldr	r3, [pc, #644]	; (8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d24:	f003 0303 	and.w	r3, r3, #3
 8009d28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009d2a:	4b9f      	ldr	r3, [pc, #636]	; (8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d2e:	0d1b      	lsrs	r3, r3, #20
 8009d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009d36:	4b9c      	ldr	r3, [pc, #624]	; (8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3a:	0a1b      	lsrs	r3, r3, #8
 8009d3c:	f003 0301 	and.w	r3, r3, #1
 8009d40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009d42:	4b99      	ldr	r3, [pc, #612]	; (8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d46:	08db      	lsrs	r3, r3, #3
 8009d48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d4c:	693a      	ldr	r2, [r7, #16]
 8009d4e:	fb02 f303 	mul.w	r3, r2, r3
 8009d52:	ee07 3a90 	vmov	s15, r3
 8009d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f000 8111 	beq.w	8009f88 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	f000 8083 	beq.w	8009e74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	2b02      	cmp	r3, #2
 8009d72:	f200 80a1 	bhi.w	8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d003      	beq.n	8009d84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d056      	beq.n	8009e30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009d82:	e099      	b.n	8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d84:	4b88      	ldr	r3, [pc, #544]	; (8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 0320 	and.w	r3, r3, #32
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d02d      	beq.n	8009dec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d90:	4b85      	ldr	r3, [pc, #532]	; (8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	08db      	lsrs	r3, r3, #3
 8009d96:	f003 0303 	and.w	r3, r3, #3
 8009d9a:	4a84      	ldr	r2, [pc, #528]	; (8009fac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009da0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	ee07 3a90 	vmov	s15, r3
 8009da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	ee07 3a90 	vmov	s15, r3
 8009db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dba:	4b7b      	ldr	r3, [pc, #492]	; (8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dc2:	ee07 3a90 	vmov	s15, r3
 8009dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dce:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009de6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009dea:	e087      	b.n	8009efc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	ee07 3a90 	vmov	s15, r3
 8009df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009df6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dfe:	4b6a      	ldr	r3, [pc, #424]	; (8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e06:	ee07 3a90 	vmov	s15, r3
 8009e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e12:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e2e:	e065      	b.n	8009efc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	ee07 3a90 	vmov	s15, r3
 8009e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e42:	4b59      	ldr	r3, [pc, #356]	; (8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e4a:	ee07 3a90 	vmov	s15, r3
 8009e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e56:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e72:	e043      	b.n	8009efc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	ee07 3a90 	vmov	s15, r3
 8009e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009fbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e86:	4b48      	ldr	r3, [pc, #288]	; (8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e8e:	ee07 3a90 	vmov	s15, r3
 8009e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009eb6:	e021      	b.n	8009efc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	ee07 3a90 	vmov	s15, r3
 8009ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ec2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eca:	4b37      	ldr	r3, [pc, #220]	; (8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ed2:	ee07 3a90 	vmov	s15, r3
 8009ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ede:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ef6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009efa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009efc:	4b2a      	ldr	r3, [pc, #168]	; (8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f00:	0a5b      	lsrs	r3, r3, #9
 8009f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f06:	ee07 3a90 	vmov	s15, r3
 8009f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f16:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f22:	ee17 2a90 	vmov	r2, s15
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009f2a:	4b1f      	ldr	r3, [pc, #124]	; (8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2e:	0c1b      	lsrs	r3, r3, #16
 8009f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f34:	ee07 3a90 	vmov	s15, r3
 8009f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f44:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f50:	ee17 2a90 	vmov	r2, s15
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009f58:	4b13      	ldr	r3, [pc, #76]	; (8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f5c:	0e1b      	lsrs	r3, r3, #24
 8009f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f62:	ee07 3a90 	vmov	s15, r3
 8009f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f72:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f7e:	ee17 2a90 	vmov	r2, s15
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009f86:	e008      	b.n	8009f9a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	609a      	str	r2, [r3, #8]
}
 8009f9a:	bf00      	nop
 8009f9c:	3724      	adds	r7, #36	; 0x24
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	58024400 	.word	0x58024400
 8009fac:	03d09000 	.word	0x03d09000
 8009fb0:	46000000 	.word	0x46000000
 8009fb4:	4c742400 	.word	0x4c742400
 8009fb8:	4a742400 	.word	0x4a742400
 8009fbc:	4af42400 	.word	0x4af42400

08009fc0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009fce:	4b53      	ldr	r3, [pc, #332]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 8009fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd2:	f003 0303 	and.w	r3, r3, #3
 8009fd6:	2b03      	cmp	r3, #3
 8009fd8:	d101      	bne.n	8009fde <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e099      	b.n	800a112 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009fde:	4b4f      	ldr	r3, [pc, #316]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a4e      	ldr	r2, [pc, #312]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 8009fe4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fea:	f7fa fda5 	bl	8004b38 <HAL_GetTick>
 8009fee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ff0:	e008      	b.n	800a004 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009ff2:	f7fa fda1 	bl	8004b38 <HAL_GetTick>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	1ad3      	subs	r3, r2, r3
 8009ffc:	2b02      	cmp	r3, #2
 8009ffe:	d901      	bls.n	800a004 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a000:	2303      	movs	r3, #3
 800a002:	e086      	b.n	800a112 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a004:	4b45      	ldr	r3, [pc, #276]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d1f0      	bne.n	8009ff2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a010:	4b42      	ldr	r3, [pc, #264]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a014:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	031b      	lsls	r3, r3, #12
 800a01e:	493f      	ldr	r1, [pc, #252]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a020:	4313      	orrs	r3, r2
 800a022:	628b      	str	r3, [r1, #40]	; 0x28
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	3b01      	subs	r3, #1
 800a02a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	3b01      	subs	r3, #1
 800a034:	025b      	lsls	r3, r3, #9
 800a036:	b29b      	uxth	r3, r3
 800a038:	431a      	orrs	r2, r3
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	3b01      	subs	r3, #1
 800a040:	041b      	lsls	r3, r3, #16
 800a042:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a046:	431a      	orrs	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	3b01      	subs	r3, #1
 800a04e:	061b      	lsls	r3, r3, #24
 800a050:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a054:	4931      	ldr	r1, [pc, #196]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a056:	4313      	orrs	r3, r2
 800a058:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a05a:	4b30      	ldr	r3, [pc, #192]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	695b      	ldr	r3, [r3, #20]
 800a066:	492d      	ldr	r1, [pc, #180]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a068:	4313      	orrs	r3, r2
 800a06a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a06c:	4b2b      	ldr	r3, [pc, #172]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a070:	f023 0220 	bic.w	r2, r3, #32
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	699b      	ldr	r3, [r3, #24]
 800a078:	4928      	ldr	r1, [pc, #160]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a07a:	4313      	orrs	r3, r2
 800a07c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a07e:	4b27      	ldr	r3, [pc, #156]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a082:	4a26      	ldr	r2, [pc, #152]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a084:	f023 0310 	bic.w	r3, r3, #16
 800a088:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a08a:	4b24      	ldr	r3, [pc, #144]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a08c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a08e:	4b24      	ldr	r3, [pc, #144]	; (800a120 <RCCEx_PLL2_Config+0x160>)
 800a090:	4013      	ands	r3, r2
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	69d2      	ldr	r2, [r2, #28]
 800a096:	00d2      	lsls	r2, r2, #3
 800a098:	4920      	ldr	r1, [pc, #128]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a09a:	4313      	orrs	r3, r2
 800a09c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a09e:	4b1f      	ldr	r3, [pc, #124]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a2:	4a1e      	ldr	r2, [pc, #120]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a0a4:	f043 0310 	orr.w	r3, r3, #16
 800a0a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d106      	bne.n	800a0be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a0b0:	4b1a      	ldr	r3, [pc, #104]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b4:	4a19      	ldr	r2, [pc, #100]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a0b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0bc:	e00f      	b.n	800a0de <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d106      	bne.n	800a0d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a0c4:	4b15      	ldr	r3, [pc, #84]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c8:	4a14      	ldr	r2, [pc, #80]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a0ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0d0:	e005      	b.n	800a0de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a0d2:	4b12      	ldr	r3, [pc, #72]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d6:	4a11      	ldr	r2, [pc, #68]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a0d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a0dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a0de:	4b0f      	ldr	r3, [pc, #60]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a0e      	ldr	r2, [pc, #56]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a0e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a0e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0ea:	f7fa fd25 	bl	8004b38 <HAL_GetTick>
 800a0ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0f0:	e008      	b.n	800a104 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a0f2:	f7fa fd21 	bl	8004b38 <HAL_GetTick>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	1ad3      	subs	r3, r2, r3
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d901      	bls.n	800a104 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a100:	2303      	movs	r3, #3
 800a102:	e006      	b.n	800a112 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a104:	4b05      	ldr	r3, [pc, #20]	; (800a11c <RCCEx_PLL2_Config+0x15c>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d0f0      	beq.n	800a0f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a110:	7bfb      	ldrb	r3, [r7, #15]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	58024400 	.word	0x58024400
 800a120:	ffff0007 	.word	0xffff0007

0800a124 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a12e:	2300      	movs	r3, #0
 800a130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a132:	4b53      	ldr	r3, [pc, #332]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a136:	f003 0303 	and.w	r3, r3, #3
 800a13a:	2b03      	cmp	r3, #3
 800a13c:	d101      	bne.n	800a142 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e099      	b.n	800a276 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a142:	4b4f      	ldr	r3, [pc, #316]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a4e      	ldr	r2, [pc, #312]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a14c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a14e:	f7fa fcf3 	bl	8004b38 <HAL_GetTick>
 800a152:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a154:	e008      	b.n	800a168 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a156:	f7fa fcef 	bl	8004b38 <HAL_GetTick>
 800a15a:	4602      	mov	r2, r0
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	2b02      	cmp	r3, #2
 800a162:	d901      	bls.n	800a168 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a164:	2303      	movs	r3, #3
 800a166:	e086      	b.n	800a276 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a168:	4b45      	ldr	r3, [pc, #276]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a170:	2b00      	cmp	r3, #0
 800a172:	d1f0      	bne.n	800a156 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a174:	4b42      	ldr	r3, [pc, #264]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a178:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	051b      	lsls	r3, r3, #20
 800a182:	493f      	ldr	r1, [pc, #252]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a184:	4313      	orrs	r3, r2
 800a186:	628b      	str	r3, [r1, #40]	; 0x28
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	3b01      	subs	r3, #1
 800a18e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	3b01      	subs	r3, #1
 800a198:	025b      	lsls	r3, r3, #9
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	431a      	orrs	r2, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	041b      	lsls	r3, r3, #16
 800a1a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a1aa:	431a      	orrs	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	061b      	lsls	r3, r3, #24
 800a1b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a1b8:	4931      	ldr	r1, [pc, #196]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a1be:	4b30      	ldr	r3, [pc, #192]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	695b      	ldr	r3, [r3, #20]
 800a1ca:	492d      	ldr	r1, [pc, #180]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a1d0:	4b2b      	ldr	r3, [pc, #172]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	4928      	ldr	r1, [pc, #160]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a1e2:	4b27      	ldr	r3, [pc, #156]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e6:	4a26      	ldr	r2, [pc, #152]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a1e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a1ee:	4b24      	ldr	r3, [pc, #144]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a1f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1f2:	4b24      	ldr	r3, [pc, #144]	; (800a284 <RCCEx_PLL3_Config+0x160>)
 800a1f4:	4013      	ands	r3, r2
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	69d2      	ldr	r2, [r2, #28]
 800a1fa:	00d2      	lsls	r2, r2, #3
 800a1fc:	4920      	ldr	r1, [pc, #128]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a1fe:	4313      	orrs	r3, r2
 800a200:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a202:	4b1f      	ldr	r3, [pc, #124]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a206:	4a1e      	ldr	r2, [pc, #120]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a20c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d106      	bne.n	800a222 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a214:	4b1a      	ldr	r3, [pc, #104]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a218:	4a19      	ldr	r2, [pc, #100]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a21a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a21e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a220:	e00f      	b.n	800a242 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	2b01      	cmp	r3, #1
 800a226:	d106      	bne.n	800a236 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a228:	4b15      	ldr	r3, [pc, #84]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22c:	4a14      	ldr	r2, [pc, #80]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a22e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a232:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a234:	e005      	b.n	800a242 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a236:	4b12      	ldr	r3, [pc, #72]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23a:	4a11      	ldr	r2, [pc, #68]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a23c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a240:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a242:	4b0f      	ldr	r3, [pc, #60]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a0e      	ldr	r2, [pc, #56]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a24c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a24e:	f7fa fc73 	bl	8004b38 <HAL_GetTick>
 800a252:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a254:	e008      	b.n	800a268 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a256:	f7fa fc6f 	bl	8004b38 <HAL_GetTick>
 800a25a:	4602      	mov	r2, r0
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	1ad3      	subs	r3, r2, r3
 800a260:	2b02      	cmp	r3, #2
 800a262:	d901      	bls.n	800a268 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a264:	2303      	movs	r3, #3
 800a266:	e006      	b.n	800a276 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a268:	4b05      	ldr	r3, [pc, #20]	; (800a280 <RCCEx_PLL3_Config+0x15c>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a270:	2b00      	cmp	r3, #0
 800a272:	d0f0      	beq.n	800a256 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a274:	7bfb      	ldrb	r3, [r7, #15]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	58024400 	.word	0x58024400
 800a284:	ffff0007 	.word	0xffff0007

0800a288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d101      	bne.n	800a29a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	e049      	b.n	800a32e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d106      	bne.n	800a2b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f7f9 ffaa 	bl	8004208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	f000 fe0c 	bl	800aee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
	...

0800a338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a346:	b2db      	uxtb	r3, r3
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d001      	beq.n	800a350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e05e      	b.n	800a40e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2202      	movs	r2, #2
 800a354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	68da      	ldr	r2, [r3, #12]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f042 0201 	orr.w	r2, r2, #1
 800a366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a2b      	ldr	r2, [pc, #172]	; (800a41c <HAL_TIM_Base_Start_IT+0xe4>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d02c      	beq.n	800a3cc <HAL_TIM_Base_Start_IT+0x94>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a37a:	d027      	beq.n	800a3cc <HAL_TIM_Base_Start_IT+0x94>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a27      	ldr	r2, [pc, #156]	; (800a420 <HAL_TIM_Base_Start_IT+0xe8>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d022      	beq.n	800a3cc <HAL_TIM_Base_Start_IT+0x94>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a26      	ldr	r2, [pc, #152]	; (800a424 <HAL_TIM_Base_Start_IT+0xec>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d01d      	beq.n	800a3cc <HAL_TIM_Base_Start_IT+0x94>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a24      	ldr	r2, [pc, #144]	; (800a428 <HAL_TIM_Base_Start_IT+0xf0>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d018      	beq.n	800a3cc <HAL_TIM_Base_Start_IT+0x94>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a23      	ldr	r2, [pc, #140]	; (800a42c <HAL_TIM_Base_Start_IT+0xf4>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d013      	beq.n	800a3cc <HAL_TIM_Base_Start_IT+0x94>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a21      	ldr	r2, [pc, #132]	; (800a430 <HAL_TIM_Base_Start_IT+0xf8>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d00e      	beq.n	800a3cc <HAL_TIM_Base_Start_IT+0x94>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a20      	ldr	r2, [pc, #128]	; (800a434 <HAL_TIM_Base_Start_IT+0xfc>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d009      	beq.n	800a3cc <HAL_TIM_Base_Start_IT+0x94>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a1e      	ldr	r2, [pc, #120]	; (800a438 <HAL_TIM_Base_Start_IT+0x100>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d004      	beq.n	800a3cc <HAL_TIM_Base_Start_IT+0x94>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a1d      	ldr	r2, [pc, #116]	; (800a43c <HAL_TIM_Base_Start_IT+0x104>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d115      	bne.n	800a3f8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	689a      	ldr	r2, [r3, #8]
 800a3d2:	4b1b      	ldr	r3, [pc, #108]	; (800a440 <HAL_TIM_Base_Start_IT+0x108>)
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2b06      	cmp	r3, #6
 800a3dc:	d015      	beq.n	800a40a <HAL_TIM_Base_Start_IT+0xd2>
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3e4:	d011      	beq.n	800a40a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f042 0201 	orr.w	r2, r2, #1
 800a3f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3f6:	e008      	b.n	800a40a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f042 0201 	orr.w	r2, r2, #1
 800a406:	601a      	str	r2, [r3, #0]
 800a408:	e000      	b.n	800a40c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a40a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3714      	adds	r7, #20
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	40010000 	.word	0x40010000
 800a420:	40000400 	.word	0x40000400
 800a424:	40000800 	.word	0x40000800
 800a428:	40000c00 	.word	0x40000c00
 800a42c:	40010400 	.word	0x40010400
 800a430:	40001800 	.word	0x40001800
 800a434:	40014000 	.word	0x40014000
 800a438:	4000e000 	.word	0x4000e000
 800a43c:	4000e400 	.word	0x4000e400
 800a440:	00010007 	.word	0x00010007

0800a444 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d101      	bne.n	800a456 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	e049      	b.n	800a4ea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d106      	bne.n	800a470 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f7f9 fe84 	bl	8004178 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2202      	movs	r2, #2
 800a474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	3304      	adds	r3, #4
 800a480:	4619      	mov	r1, r3
 800a482:	4610      	mov	r0, r2
 800a484:	f000 fd2e 	bl	800aee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3708      	adds	r7, #8
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
	...

0800a4f4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d109      	bne.n	800a51c <HAL_TIM_PWM_Start_IT+0x28>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	2b01      	cmp	r3, #1
 800a512:	bf14      	ite	ne
 800a514:	2301      	movne	r3, #1
 800a516:	2300      	moveq	r3, #0
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	e03c      	b.n	800a596 <HAL_TIM_PWM_Start_IT+0xa2>
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	2b04      	cmp	r3, #4
 800a520:	d109      	bne.n	800a536 <HAL_TIM_PWM_Start_IT+0x42>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	bf14      	ite	ne
 800a52e:	2301      	movne	r3, #1
 800a530:	2300      	moveq	r3, #0
 800a532:	b2db      	uxtb	r3, r3
 800a534:	e02f      	b.n	800a596 <HAL_TIM_PWM_Start_IT+0xa2>
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	2b08      	cmp	r3, #8
 800a53a:	d109      	bne.n	800a550 <HAL_TIM_PWM_Start_IT+0x5c>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a542:	b2db      	uxtb	r3, r3
 800a544:	2b01      	cmp	r3, #1
 800a546:	bf14      	ite	ne
 800a548:	2301      	movne	r3, #1
 800a54a:	2300      	moveq	r3, #0
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	e022      	b.n	800a596 <HAL_TIM_PWM_Start_IT+0xa2>
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	2b0c      	cmp	r3, #12
 800a554:	d109      	bne.n	800a56a <HAL_TIM_PWM_Start_IT+0x76>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	2b01      	cmp	r3, #1
 800a560:	bf14      	ite	ne
 800a562:	2301      	movne	r3, #1
 800a564:	2300      	moveq	r3, #0
 800a566:	b2db      	uxtb	r3, r3
 800a568:	e015      	b.n	800a596 <HAL_TIM_PWM_Start_IT+0xa2>
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	2b10      	cmp	r3, #16
 800a56e:	d109      	bne.n	800a584 <HAL_TIM_PWM_Start_IT+0x90>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a576:	b2db      	uxtb	r3, r3
 800a578:	2b01      	cmp	r3, #1
 800a57a:	bf14      	ite	ne
 800a57c:	2301      	movne	r3, #1
 800a57e:	2300      	moveq	r3, #0
 800a580:	b2db      	uxtb	r3, r3
 800a582:	e008      	b.n	800a596 <HAL_TIM_PWM_Start_IT+0xa2>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	bf14      	ite	ne
 800a590:	2301      	movne	r3, #1
 800a592:	2300      	moveq	r3, #0
 800a594:	b2db      	uxtb	r3, r3
 800a596:	2b00      	cmp	r3, #0
 800a598:	d001      	beq.n	800a59e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e0f6      	b.n	800a78c <HAL_TIM_PWM_Start_IT+0x298>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d104      	bne.n	800a5ae <HAL_TIM_PWM_Start_IT+0xba>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2202      	movs	r2, #2
 800a5a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5ac:	e023      	b.n	800a5f6 <HAL_TIM_PWM_Start_IT+0x102>
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	2b04      	cmp	r3, #4
 800a5b2:	d104      	bne.n	800a5be <HAL_TIM_PWM_Start_IT+0xca>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2202      	movs	r2, #2
 800a5b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5bc:	e01b      	b.n	800a5f6 <HAL_TIM_PWM_Start_IT+0x102>
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	2b08      	cmp	r3, #8
 800a5c2:	d104      	bne.n	800a5ce <HAL_TIM_PWM_Start_IT+0xda>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2202      	movs	r2, #2
 800a5c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5cc:	e013      	b.n	800a5f6 <HAL_TIM_PWM_Start_IT+0x102>
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	2b0c      	cmp	r3, #12
 800a5d2:	d104      	bne.n	800a5de <HAL_TIM_PWM_Start_IT+0xea>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2202      	movs	r2, #2
 800a5d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5dc:	e00b      	b.n	800a5f6 <HAL_TIM_PWM_Start_IT+0x102>
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	2b10      	cmp	r3, #16
 800a5e2:	d104      	bne.n	800a5ee <HAL_TIM_PWM_Start_IT+0xfa>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2202      	movs	r2, #2
 800a5e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5ec:	e003      	b.n	800a5f6 <HAL_TIM_PWM_Start_IT+0x102>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2202      	movs	r2, #2
 800a5f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	2b0c      	cmp	r3, #12
 800a5fa:	d841      	bhi.n	800a680 <HAL_TIM_PWM_Start_IT+0x18c>
 800a5fc:	a201      	add	r2, pc, #4	; (adr r2, 800a604 <HAL_TIM_PWM_Start_IT+0x110>)
 800a5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a602:	bf00      	nop
 800a604:	0800a639 	.word	0x0800a639
 800a608:	0800a681 	.word	0x0800a681
 800a60c:	0800a681 	.word	0x0800a681
 800a610:	0800a681 	.word	0x0800a681
 800a614:	0800a64b 	.word	0x0800a64b
 800a618:	0800a681 	.word	0x0800a681
 800a61c:	0800a681 	.word	0x0800a681
 800a620:	0800a681 	.word	0x0800a681
 800a624:	0800a65d 	.word	0x0800a65d
 800a628:	0800a681 	.word	0x0800a681
 800a62c:	0800a681 	.word	0x0800a681
 800a630:	0800a681 	.word	0x0800a681
 800a634:	0800a66f 	.word	0x0800a66f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	68da      	ldr	r2, [r3, #12]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f042 0202 	orr.w	r2, r2, #2
 800a646:	60da      	str	r2, [r3, #12]
      break;
 800a648:	e01d      	b.n	800a686 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68da      	ldr	r2, [r3, #12]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f042 0204 	orr.w	r2, r2, #4
 800a658:	60da      	str	r2, [r3, #12]
      break;
 800a65a:	e014      	b.n	800a686 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	68da      	ldr	r2, [r3, #12]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f042 0208 	orr.w	r2, r2, #8
 800a66a:	60da      	str	r2, [r3, #12]
      break;
 800a66c:	e00b      	b.n	800a686 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	68da      	ldr	r2, [r3, #12]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f042 0210 	orr.w	r2, r2, #16
 800a67c:	60da      	str	r2, [r3, #12]
      break;
 800a67e:	e002      	b.n	800a686 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a680:	2301      	movs	r3, #1
 800a682:	73fb      	strb	r3, [r7, #15]
      break;
 800a684:	bf00      	nop
  }

  if (status == HAL_OK)
 800a686:	7bfb      	ldrb	r3, [r7, #15]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d17e      	bne.n	800a78a <HAL_TIM_PWM_Start_IT+0x296>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2201      	movs	r2, #1
 800a692:	6839      	ldr	r1, [r7, #0]
 800a694:	4618      	mov	r0, r3
 800a696:	f000 ffa1 	bl	800b5dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a3d      	ldr	r2, [pc, #244]	; (800a794 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d013      	beq.n	800a6cc <HAL_TIM_PWM_Start_IT+0x1d8>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a3b      	ldr	r2, [pc, #236]	; (800a798 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d00e      	beq.n	800a6cc <HAL_TIM_PWM_Start_IT+0x1d8>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a3a      	ldr	r2, [pc, #232]	; (800a79c <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d009      	beq.n	800a6cc <HAL_TIM_PWM_Start_IT+0x1d8>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a38      	ldr	r2, [pc, #224]	; (800a7a0 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d004      	beq.n	800a6cc <HAL_TIM_PWM_Start_IT+0x1d8>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4a37      	ldr	r2, [pc, #220]	; (800a7a4 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d101      	bne.n	800a6d0 <HAL_TIM_PWM_Start_IT+0x1dc>
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e000      	b.n	800a6d2 <HAL_TIM_PWM_Start_IT+0x1de>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d007      	beq.n	800a6e6 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a2a      	ldr	r2, [pc, #168]	; (800a794 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d02c      	beq.n	800a74a <HAL_TIM_PWM_Start_IT+0x256>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6f8:	d027      	beq.n	800a74a <HAL_TIM_PWM_Start_IT+0x256>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a2a      	ldr	r2, [pc, #168]	; (800a7a8 <HAL_TIM_PWM_Start_IT+0x2b4>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d022      	beq.n	800a74a <HAL_TIM_PWM_Start_IT+0x256>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a28      	ldr	r2, [pc, #160]	; (800a7ac <HAL_TIM_PWM_Start_IT+0x2b8>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d01d      	beq.n	800a74a <HAL_TIM_PWM_Start_IT+0x256>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a27      	ldr	r2, [pc, #156]	; (800a7b0 <HAL_TIM_PWM_Start_IT+0x2bc>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d018      	beq.n	800a74a <HAL_TIM_PWM_Start_IT+0x256>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a1e      	ldr	r2, [pc, #120]	; (800a798 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d013      	beq.n	800a74a <HAL_TIM_PWM_Start_IT+0x256>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a23      	ldr	r2, [pc, #140]	; (800a7b4 <HAL_TIM_PWM_Start_IT+0x2c0>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d00e      	beq.n	800a74a <HAL_TIM_PWM_Start_IT+0x256>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a1a      	ldr	r2, [pc, #104]	; (800a79c <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d009      	beq.n	800a74a <HAL_TIM_PWM_Start_IT+0x256>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a1f      	ldr	r2, [pc, #124]	; (800a7b8 <HAL_TIM_PWM_Start_IT+0x2c4>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d004      	beq.n	800a74a <HAL_TIM_PWM_Start_IT+0x256>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a1d      	ldr	r2, [pc, #116]	; (800a7bc <HAL_TIM_PWM_Start_IT+0x2c8>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d115      	bne.n	800a776 <HAL_TIM_PWM_Start_IT+0x282>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	689a      	ldr	r2, [r3, #8]
 800a750:	4b1b      	ldr	r3, [pc, #108]	; (800a7c0 <HAL_TIM_PWM_Start_IT+0x2cc>)
 800a752:	4013      	ands	r3, r2
 800a754:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	2b06      	cmp	r3, #6
 800a75a:	d015      	beq.n	800a788 <HAL_TIM_PWM_Start_IT+0x294>
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a762:	d011      	beq.n	800a788 <HAL_TIM_PWM_Start_IT+0x294>
      {
        __HAL_TIM_ENABLE(htim);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f042 0201 	orr.w	r2, r2, #1
 800a772:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a774:	e008      	b.n	800a788 <HAL_TIM_PWM_Start_IT+0x294>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f042 0201 	orr.w	r2, r2, #1
 800a784:	601a      	str	r2, [r3, #0]
 800a786:	e000      	b.n	800a78a <HAL_TIM_PWM_Start_IT+0x296>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a788:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	40010000 	.word	0x40010000
 800a798:	40010400 	.word	0x40010400
 800a79c:	40014000 	.word	0x40014000
 800a7a0:	40014400 	.word	0x40014400
 800a7a4:	40014800 	.word	0x40014800
 800a7a8:	40000400 	.word	0x40000400
 800a7ac:	40000800 	.word	0x40000800
 800a7b0:	40000c00 	.word	0x40000c00
 800a7b4:	40001800 	.word	0x40001800
 800a7b8:	4000e000 	.word	0x4000e000
 800a7bc:	4000e400 	.word	0x4000e400
 800a7c0:	00010007 	.word	0x00010007

0800a7c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d101      	bne.n	800a7d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e08f      	b.n	800a8f8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d106      	bne.n	800a7f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7f9 fbb5 	bl	8003f5c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2202      	movs	r2, #2
 800a7f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	6899      	ldr	r1, [r3, #8]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	4b3e      	ldr	r3, [pc, #248]	; (800a900 <HAL_TIM_Encoder_Init+0x13c>)
 800a806:	400b      	ands	r3, r1
 800a808:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	3304      	adds	r3, #4
 800a812:	4619      	mov	r1, r3
 800a814:	4610      	mov	r0, r2
 800a816:	f000 fb65 	bl	800aee4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	699b      	ldr	r3, [r3, #24]
 800a828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	6a1b      	ldr	r3, [r3, #32]
 800a830:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	697a      	ldr	r2, [r7, #20]
 800a838:	4313      	orrs	r3, r2
 800a83a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a83c:	693a      	ldr	r2, [r7, #16]
 800a83e:	4b31      	ldr	r3, [pc, #196]	; (800a904 <HAL_TIM_Encoder_Init+0x140>)
 800a840:	4013      	ands	r3, r2
 800a842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	689a      	ldr	r2, [r3, #8]
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	699b      	ldr	r3, [r3, #24]
 800a84c:	021b      	lsls	r3, r3, #8
 800a84e:	4313      	orrs	r3, r2
 800a850:	693a      	ldr	r2, [r7, #16]
 800a852:	4313      	orrs	r3, r2
 800a854:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a856:	693a      	ldr	r2, [r7, #16]
 800a858:	4b2b      	ldr	r3, [pc, #172]	; (800a908 <HAL_TIM_Encoder_Init+0x144>)
 800a85a:	4013      	ands	r3, r2
 800a85c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a85e:	693a      	ldr	r2, [r7, #16]
 800a860:	4b2a      	ldr	r3, [pc, #168]	; (800a90c <HAL_TIM_Encoder_Init+0x148>)
 800a862:	4013      	ands	r3, r2
 800a864:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	68da      	ldr	r2, [r3, #12]
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	69db      	ldr	r3, [r3, #28]
 800a86e:	021b      	lsls	r3, r3, #8
 800a870:	4313      	orrs	r3, r2
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	4313      	orrs	r3, r2
 800a876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	691b      	ldr	r3, [r3, #16]
 800a87c:	011a      	lsls	r2, r3, #4
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	031b      	lsls	r3, r3, #12
 800a884:	4313      	orrs	r3, r2
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	4313      	orrs	r3, r2
 800a88a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a892:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a89a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	685a      	ldr	r2, [r3, #4]
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	695b      	ldr	r3, [r3, #20]
 800a8a4:	011b      	lsls	r3, r3, #4
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	68fa      	ldr	r2, [r7, #12]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	697a      	ldr	r2, [r7, #20]
 800a8b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	693a      	ldr	r2, [r7, #16]
 800a8bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3718      	adds	r7, #24
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	fffebff8 	.word	0xfffebff8
 800a904:	fffffcfc 	.word	0xfffffcfc
 800a908:	fffff3f3 	.word	0xfffff3f3
 800a90c:	ffff0f0f 	.word	0xffff0f0f

0800a910 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a920:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a928:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a930:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a938:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d110      	bne.n	800a962 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a940:	7bfb      	ldrb	r3, [r7, #15]
 800a942:	2b01      	cmp	r3, #1
 800a944:	d102      	bne.n	800a94c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a946:	7b7b      	ldrb	r3, [r7, #13]
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d001      	beq.n	800a950 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	e069      	b.n	800aa24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2202      	movs	r2, #2
 800a954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2202      	movs	r2, #2
 800a95c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a960:	e031      	b.n	800a9c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	2b04      	cmp	r3, #4
 800a966:	d110      	bne.n	800a98a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a968:	7bbb      	ldrb	r3, [r7, #14]
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d102      	bne.n	800a974 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a96e:	7b3b      	ldrb	r3, [r7, #12]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d001      	beq.n	800a978 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	e055      	b.n	800aa24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2202      	movs	r2, #2
 800a97c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2202      	movs	r2, #2
 800a984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a988:	e01d      	b.n	800a9c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a98a:	7bfb      	ldrb	r3, [r7, #15]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d108      	bne.n	800a9a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a990:	7bbb      	ldrb	r3, [r7, #14]
 800a992:	2b01      	cmp	r3, #1
 800a994:	d105      	bne.n	800a9a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a996:	7b7b      	ldrb	r3, [r7, #13]
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d102      	bne.n	800a9a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a99c:	7b3b      	ldrb	r3, [r7, #12]
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d001      	beq.n	800a9a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e03e      	b.n	800aa24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2202      	movs	r2, #2
 800a9aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2202      	movs	r2, #2
 800a9b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2202      	movs	r2, #2
 800a9ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d003      	beq.n	800a9d4 <HAL_TIM_Encoder_Start+0xc4>
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	2b04      	cmp	r3, #4
 800a9d0:	d008      	beq.n	800a9e4 <HAL_TIM_Encoder_Start+0xd4>
 800a9d2:	e00f      	b.n	800a9f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	2100      	movs	r1, #0
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f000 fdfd 	bl	800b5dc <TIM_CCxChannelCmd>
      break;
 800a9e2:	e016      	b.n	800aa12 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	2104      	movs	r1, #4
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f000 fdf5 	bl	800b5dc <TIM_CCxChannelCmd>
      break;
 800a9f2:	e00e      	b.n	800aa12 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f000 fded 	bl	800b5dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	2201      	movs	r2, #1
 800aa08:	2104      	movs	r1, #4
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 fde6 	bl	800b5dc <TIM_CCxChannelCmd>
      break;
 800aa10:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f042 0201 	orr.w	r2, r2, #1
 800aa20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	f003 0302 	and.w	r3, r3, #2
 800aa3e:	2b02      	cmp	r3, #2
 800aa40:	d122      	bne.n	800aa88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	f003 0302 	and.w	r3, r3, #2
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	d11b      	bne.n	800aa88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f06f 0202 	mvn.w	r2, #2
 800aa58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	f003 0303 	and.w	r3, r3, #3
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d003      	beq.n	800aa76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fa1a 	bl	800aea8 <HAL_TIM_IC_CaptureCallback>
 800aa74:	e005      	b.n	800aa82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 fa0c 	bl	800ae94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 fa1d 	bl	800aebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2200      	movs	r2, #0
 800aa86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	f003 0304 	and.w	r3, r3, #4
 800aa92:	2b04      	cmp	r3, #4
 800aa94:	d122      	bne.n	800aadc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	f003 0304 	and.w	r3, r3, #4
 800aaa0:	2b04      	cmp	r3, #4
 800aaa2:	d11b      	bne.n	800aadc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f06f 0204 	mvn.w	r2, #4
 800aaac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2202      	movs	r2, #2
 800aab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	699b      	ldr	r3, [r3, #24]
 800aaba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d003      	beq.n	800aaca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 f9f0 	bl	800aea8 <HAL_TIM_IC_CaptureCallback>
 800aac8:	e005      	b.n	800aad6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 f9e2 	bl	800ae94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 f9f3 	bl	800aebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	f003 0308 	and.w	r3, r3, #8
 800aae6:	2b08      	cmp	r3, #8
 800aae8:	d122      	bne.n	800ab30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	f003 0308 	and.w	r3, r3, #8
 800aaf4:	2b08      	cmp	r3, #8
 800aaf6:	d11b      	bne.n	800ab30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f06f 0208 	mvn.w	r2, #8
 800ab00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2204      	movs	r2, #4
 800ab06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	69db      	ldr	r3, [r3, #28]
 800ab0e:	f003 0303 	and.w	r3, r3, #3
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d003      	beq.n	800ab1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 f9c6 	bl	800aea8 <HAL_TIM_IC_CaptureCallback>
 800ab1c:	e005      	b.n	800ab2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 f9b8 	bl	800ae94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 f9c9 	bl	800aebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	691b      	ldr	r3, [r3, #16]
 800ab36:	f003 0310 	and.w	r3, r3, #16
 800ab3a:	2b10      	cmp	r3, #16
 800ab3c:	d122      	bne.n	800ab84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	f003 0310 	and.w	r3, r3, #16
 800ab48:	2b10      	cmp	r3, #16
 800ab4a:	d11b      	bne.n	800ab84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f06f 0210 	mvn.w	r2, #16
 800ab54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2208      	movs	r2, #8
 800ab5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	69db      	ldr	r3, [r3, #28]
 800ab62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d003      	beq.n	800ab72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 f99c 	bl	800aea8 <HAL_TIM_IC_CaptureCallback>
 800ab70:	e005      	b.n	800ab7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 f98e 	bl	800ae94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 f99f 	bl	800aebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2200      	movs	r2, #0
 800ab82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	f003 0301 	and.w	r3, r3, #1
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d10e      	bne.n	800abb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	f003 0301 	and.w	r3, r3, #1
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d107      	bne.n	800abb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f06f 0201 	mvn.w	r2, #1
 800aba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f7f9 fdce 	bl	800474c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abba:	2b80      	cmp	r3, #128	; 0x80
 800abbc:	d10e      	bne.n	800abdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abc8:	2b80      	cmp	r3, #128	; 0x80
 800abca:	d107      	bne.n	800abdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800abd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fe6c 	bl	800b8b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	691b      	ldr	r3, [r3, #16]
 800abe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abea:	d10e      	bne.n	800ac0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abf6:	2b80      	cmp	r3, #128	; 0x80
 800abf8:	d107      	bne.n	800ac0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 fe5f 	bl	800b8c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac14:	2b40      	cmp	r3, #64	; 0x40
 800ac16:	d10e      	bne.n	800ac36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac22:	2b40      	cmp	r3, #64	; 0x40
 800ac24:	d107      	bne.n	800ac36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 f94d 	bl	800aed0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	f003 0320 	and.w	r3, r3, #32
 800ac40:	2b20      	cmp	r3, #32
 800ac42:	d10e      	bne.n	800ac62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	f003 0320 	and.w	r3, r3, #32
 800ac4e:	2b20      	cmp	r3, #32
 800ac50:	d107      	bne.n	800ac62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f06f 0220 	mvn.w	r2, #32
 800ac5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 fe1f 	bl	800b8a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac62:	bf00      	nop
 800ac64:	3708      	adds	r7, #8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
	...

0800ac6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d101      	bne.n	800ac8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ac86:	2302      	movs	r3, #2
 800ac88:	e0ff      	b.n	800ae8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2b14      	cmp	r3, #20
 800ac96:	f200 80f0 	bhi.w	800ae7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ac9a:	a201      	add	r2, pc, #4	; (adr r2, 800aca0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ac9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca0:	0800acf5 	.word	0x0800acf5
 800aca4:	0800ae7b 	.word	0x0800ae7b
 800aca8:	0800ae7b 	.word	0x0800ae7b
 800acac:	0800ae7b 	.word	0x0800ae7b
 800acb0:	0800ad35 	.word	0x0800ad35
 800acb4:	0800ae7b 	.word	0x0800ae7b
 800acb8:	0800ae7b 	.word	0x0800ae7b
 800acbc:	0800ae7b 	.word	0x0800ae7b
 800acc0:	0800ad77 	.word	0x0800ad77
 800acc4:	0800ae7b 	.word	0x0800ae7b
 800acc8:	0800ae7b 	.word	0x0800ae7b
 800accc:	0800ae7b 	.word	0x0800ae7b
 800acd0:	0800adb7 	.word	0x0800adb7
 800acd4:	0800ae7b 	.word	0x0800ae7b
 800acd8:	0800ae7b 	.word	0x0800ae7b
 800acdc:	0800ae7b 	.word	0x0800ae7b
 800ace0:	0800adf9 	.word	0x0800adf9
 800ace4:	0800ae7b 	.word	0x0800ae7b
 800ace8:	0800ae7b 	.word	0x0800ae7b
 800acec:	0800ae7b 	.word	0x0800ae7b
 800acf0:	0800ae39 	.word	0x0800ae39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68b9      	ldr	r1, [r7, #8]
 800acfa:	4618      	mov	r0, r3
 800acfc:	f000 f998 	bl	800b030 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	699a      	ldr	r2, [r3, #24]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f042 0208 	orr.w	r2, r2, #8
 800ad0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	699a      	ldr	r2, [r3, #24]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f022 0204 	bic.w	r2, r2, #4
 800ad1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	6999      	ldr	r1, [r3, #24]
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	691a      	ldr	r2, [r3, #16]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	430a      	orrs	r2, r1
 800ad30:	619a      	str	r2, [r3, #24]
      break;
 800ad32:	e0a5      	b.n	800ae80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	68b9      	ldr	r1, [r7, #8]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f000 fa08 	bl	800b150 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	699a      	ldr	r2, [r3, #24]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	699a      	ldr	r2, [r3, #24]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	6999      	ldr	r1, [r3, #24]
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	691b      	ldr	r3, [r3, #16]
 800ad6a:	021a      	lsls	r2, r3, #8
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	430a      	orrs	r2, r1
 800ad72:	619a      	str	r2, [r3, #24]
      break;
 800ad74:	e084      	b.n	800ae80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	68b9      	ldr	r1, [r7, #8]
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f000 fa71 	bl	800b264 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	69da      	ldr	r2, [r3, #28]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f042 0208 	orr.w	r2, r2, #8
 800ad90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	69da      	ldr	r2, [r3, #28]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f022 0204 	bic.w	r2, r2, #4
 800ada0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	69d9      	ldr	r1, [r3, #28]
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	691a      	ldr	r2, [r3, #16]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	430a      	orrs	r2, r1
 800adb2:	61da      	str	r2, [r3, #28]
      break;
 800adb4:	e064      	b.n	800ae80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	68b9      	ldr	r1, [r7, #8]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f000 fad9 	bl	800b374 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	69da      	ldr	r2, [r3, #28]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800add0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	69da      	ldr	r2, [r3, #28]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ade0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	69d9      	ldr	r1, [r3, #28]
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	691b      	ldr	r3, [r3, #16]
 800adec:	021a      	lsls	r2, r3, #8
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	430a      	orrs	r2, r1
 800adf4:	61da      	str	r2, [r3, #28]
      break;
 800adf6:	e043      	b.n	800ae80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	68b9      	ldr	r1, [r7, #8]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f000 fb22 	bl	800b448 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f042 0208 	orr.w	r2, r2, #8
 800ae12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f022 0204 	bic.w	r2, r2, #4
 800ae22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	691a      	ldr	r2, [r3, #16]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	430a      	orrs	r2, r1
 800ae34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ae36:	e023      	b.n	800ae80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68b9      	ldr	r1, [r7, #8]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 fb66 	bl	800b510 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	691b      	ldr	r3, [r3, #16]
 800ae6e:	021a      	lsls	r2, r3, #8
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	430a      	orrs	r2, r1
 800ae76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ae78:	e002      	b.n	800ae80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	75fb      	strb	r3, [r7, #23]
      break;
 800ae7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3718      	adds	r7, #24
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop

0800ae94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae9c:	bf00      	nop
 800ae9e:	370c      	adds	r7, #12
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aeb0:	bf00      	nop
 800aeb2:	370c      	adds	r7, #12
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aec4:	bf00      	nop
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aed8:	bf00      	nop
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b085      	sub	sp, #20
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a44      	ldr	r2, [pc, #272]	; (800b008 <TIM_Base_SetConfig+0x124>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d013      	beq.n	800af24 <TIM_Base_SetConfig+0x40>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af02:	d00f      	beq.n	800af24 <TIM_Base_SetConfig+0x40>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	4a41      	ldr	r2, [pc, #260]	; (800b00c <TIM_Base_SetConfig+0x128>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d00b      	beq.n	800af24 <TIM_Base_SetConfig+0x40>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4a40      	ldr	r2, [pc, #256]	; (800b010 <TIM_Base_SetConfig+0x12c>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d007      	beq.n	800af24 <TIM_Base_SetConfig+0x40>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4a3f      	ldr	r2, [pc, #252]	; (800b014 <TIM_Base_SetConfig+0x130>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d003      	beq.n	800af24 <TIM_Base_SetConfig+0x40>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	4a3e      	ldr	r2, [pc, #248]	; (800b018 <TIM_Base_SetConfig+0x134>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d108      	bne.n	800af36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	68fa      	ldr	r2, [r7, #12]
 800af32:	4313      	orrs	r3, r2
 800af34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a33      	ldr	r2, [pc, #204]	; (800b008 <TIM_Base_SetConfig+0x124>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d027      	beq.n	800af8e <TIM_Base_SetConfig+0xaa>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af44:	d023      	beq.n	800af8e <TIM_Base_SetConfig+0xaa>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4a30      	ldr	r2, [pc, #192]	; (800b00c <TIM_Base_SetConfig+0x128>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d01f      	beq.n	800af8e <TIM_Base_SetConfig+0xaa>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4a2f      	ldr	r2, [pc, #188]	; (800b010 <TIM_Base_SetConfig+0x12c>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d01b      	beq.n	800af8e <TIM_Base_SetConfig+0xaa>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a2e      	ldr	r2, [pc, #184]	; (800b014 <TIM_Base_SetConfig+0x130>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d017      	beq.n	800af8e <TIM_Base_SetConfig+0xaa>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4a2d      	ldr	r2, [pc, #180]	; (800b018 <TIM_Base_SetConfig+0x134>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d013      	beq.n	800af8e <TIM_Base_SetConfig+0xaa>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4a2c      	ldr	r2, [pc, #176]	; (800b01c <TIM_Base_SetConfig+0x138>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d00f      	beq.n	800af8e <TIM_Base_SetConfig+0xaa>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4a2b      	ldr	r2, [pc, #172]	; (800b020 <TIM_Base_SetConfig+0x13c>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d00b      	beq.n	800af8e <TIM_Base_SetConfig+0xaa>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4a2a      	ldr	r2, [pc, #168]	; (800b024 <TIM_Base_SetConfig+0x140>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d007      	beq.n	800af8e <TIM_Base_SetConfig+0xaa>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4a29      	ldr	r2, [pc, #164]	; (800b028 <TIM_Base_SetConfig+0x144>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d003      	beq.n	800af8e <TIM_Base_SetConfig+0xaa>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4a28      	ldr	r2, [pc, #160]	; (800b02c <TIM_Base_SetConfig+0x148>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d108      	bne.n	800afa0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	4313      	orrs	r3, r2
 800af9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	695b      	ldr	r3, [r3, #20]
 800afaa:	4313      	orrs	r3, r2
 800afac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	68fa      	ldr	r2, [r7, #12]
 800afb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	689a      	ldr	r2, [r3, #8]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	4a10      	ldr	r2, [pc, #64]	; (800b008 <TIM_Base_SetConfig+0x124>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d00f      	beq.n	800afec <TIM_Base_SetConfig+0x108>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	4a12      	ldr	r2, [pc, #72]	; (800b018 <TIM_Base_SetConfig+0x134>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d00b      	beq.n	800afec <TIM_Base_SetConfig+0x108>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4a11      	ldr	r2, [pc, #68]	; (800b01c <TIM_Base_SetConfig+0x138>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d007      	beq.n	800afec <TIM_Base_SetConfig+0x108>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	4a10      	ldr	r2, [pc, #64]	; (800b020 <TIM_Base_SetConfig+0x13c>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d003      	beq.n	800afec <TIM_Base_SetConfig+0x108>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4a0f      	ldr	r2, [pc, #60]	; (800b024 <TIM_Base_SetConfig+0x140>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d103      	bne.n	800aff4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	691a      	ldr	r2, [r3, #16]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2201      	movs	r2, #1
 800aff8:	615a      	str	r2, [r3, #20]
}
 800affa:	bf00      	nop
 800affc:	3714      	adds	r7, #20
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr
 800b006:	bf00      	nop
 800b008:	40010000 	.word	0x40010000
 800b00c:	40000400 	.word	0x40000400
 800b010:	40000800 	.word	0x40000800
 800b014:	40000c00 	.word	0x40000c00
 800b018:	40010400 	.word	0x40010400
 800b01c:	40014000 	.word	0x40014000
 800b020:	40014400 	.word	0x40014400
 800b024:	40014800 	.word	0x40014800
 800b028:	4000e000 	.word	0x4000e000
 800b02c:	4000e400 	.word	0x4000e400

0800b030 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b030:	b480      	push	{r7}
 800b032:	b087      	sub	sp, #28
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6a1b      	ldr	r3, [r3, #32]
 800b03e:	f023 0201 	bic.w	r2, r3, #1
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a1b      	ldr	r3, [r3, #32]
 800b04a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	699b      	ldr	r3, [r3, #24]
 800b056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b058:	68fa      	ldr	r2, [r7, #12]
 800b05a:	4b37      	ldr	r3, [pc, #220]	; (800b138 <TIM_OC1_SetConfig+0x108>)
 800b05c:	4013      	ands	r3, r2
 800b05e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f023 0303 	bic.w	r3, r3, #3
 800b066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	4313      	orrs	r3, r2
 800b070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	f023 0302 	bic.w	r3, r3, #2
 800b078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	697a      	ldr	r2, [r7, #20]
 800b080:	4313      	orrs	r3, r2
 800b082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	4a2d      	ldr	r2, [pc, #180]	; (800b13c <TIM_OC1_SetConfig+0x10c>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d00f      	beq.n	800b0ac <TIM_OC1_SetConfig+0x7c>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4a2c      	ldr	r2, [pc, #176]	; (800b140 <TIM_OC1_SetConfig+0x110>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d00b      	beq.n	800b0ac <TIM_OC1_SetConfig+0x7c>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	4a2b      	ldr	r2, [pc, #172]	; (800b144 <TIM_OC1_SetConfig+0x114>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d007      	beq.n	800b0ac <TIM_OC1_SetConfig+0x7c>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	4a2a      	ldr	r2, [pc, #168]	; (800b148 <TIM_OC1_SetConfig+0x118>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d003      	beq.n	800b0ac <TIM_OC1_SetConfig+0x7c>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4a29      	ldr	r2, [pc, #164]	; (800b14c <TIM_OC1_SetConfig+0x11c>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d10c      	bne.n	800b0c6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	f023 0308 	bic.w	r3, r3, #8
 800b0b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	697a      	ldr	r2, [r7, #20]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	f023 0304 	bic.w	r3, r3, #4
 800b0c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a1c      	ldr	r2, [pc, #112]	; (800b13c <TIM_OC1_SetConfig+0x10c>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d00f      	beq.n	800b0ee <TIM_OC1_SetConfig+0xbe>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4a1b      	ldr	r2, [pc, #108]	; (800b140 <TIM_OC1_SetConfig+0x110>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d00b      	beq.n	800b0ee <TIM_OC1_SetConfig+0xbe>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4a1a      	ldr	r2, [pc, #104]	; (800b144 <TIM_OC1_SetConfig+0x114>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d007      	beq.n	800b0ee <TIM_OC1_SetConfig+0xbe>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	4a19      	ldr	r2, [pc, #100]	; (800b148 <TIM_OC1_SetConfig+0x118>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d003      	beq.n	800b0ee <TIM_OC1_SetConfig+0xbe>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	4a18      	ldr	r2, [pc, #96]	; (800b14c <TIM_OC1_SetConfig+0x11c>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d111      	bne.n	800b112 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b0fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	695b      	ldr	r3, [r3, #20]
 800b102:	693a      	ldr	r2, [r7, #16]
 800b104:	4313      	orrs	r3, r2
 800b106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	699b      	ldr	r3, [r3, #24]
 800b10c:	693a      	ldr	r2, [r7, #16]
 800b10e:	4313      	orrs	r3, r2
 800b110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	693a      	ldr	r2, [r7, #16]
 800b116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	685a      	ldr	r2, [r3, #4]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	697a      	ldr	r2, [r7, #20]
 800b12a:	621a      	str	r2, [r3, #32]
}
 800b12c:	bf00      	nop
 800b12e:	371c      	adds	r7, #28
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr
 800b138:	fffeff8f 	.word	0xfffeff8f
 800b13c:	40010000 	.word	0x40010000
 800b140:	40010400 	.word	0x40010400
 800b144:	40014000 	.word	0x40014000
 800b148:	40014400 	.word	0x40014400
 800b14c:	40014800 	.word	0x40014800

0800b150 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b150:	b480      	push	{r7}
 800b152:	b087      	sub	sp, #28
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a1b      	ldr	r3, [r3, #32]
 800b15e:	f023 0210 	bic.w	r2, r3, #16
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a1b      	ldr	r3, [r3, #32]
 800b16a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	699b      	ldr	r3, [r3, #24]
 800b176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b178:	68fa      	ldr	r2, [r7, #12]
 800b17a:	4b34      	ldr	r3, [pc, #208]	; (800b24c <TIM_OC2_SetConfig+0xfc>)
 800b17c:	4013      	ands	r3, r2
 800b17e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	021b      	lsls	r3, r3, #8
 800b18e:	68fa      	ldr	r2, [r7, #12]
 800b190:	4313      	orrs	r3, r2
 800b192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	f023 0320 	bic.w	r3, r3, #32
 800b19a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	011b      	lsls	r3, r3, #4
 800b1a2:	697a      	ldr	r2, [r7, #20]
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	4a29      	ldr	r2, [pc, #164]	; (800b250 <TIM_OC2_SetConfig+0x100>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d003      	beq.n	800b1b8 <TIM_OC2_SetConfig+0x68>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	4a28      	ldr	r2, [pc, #160]	; (800b254 <TIM_OC2_SetConfig+0x104>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d10d      	bne.n	800b1d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	011b      	lsls	r3, r3, #4
 800b1c6:	697a      	ldr	r2, [r7, #20]
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4a1e      	ldr	r2, [pc, #120]	; (800b250 <TIM_OC2_SetConfig+0x100>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d00f      	beq.n	800b1fc <TIM_OC2_SetConfig+0xac>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	4a1d      	ldr	r2, [pc, #116]	; (800b254 <TIM_OC2_SetConfig+0x104>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d00b      	beq.n	800b1fc <TIM_OC2_SetConfig+0xac>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	4a1c      	ldr	r2, [pc, #112]	; (800b258 <TIM_OC2_SetConfig+0x108>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d007      	beq.n	800b1fc <TIM_OC2_SetConfig+0xac>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4a1b      	ldr	r2, [pc, #108]	; (800b25c <TIM_OC2_SetConfig+0x10c>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d003      	beq.n	800b1fc <TIM_OC2_SetConfig+0xac>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4a1a      	ldr	r2, [pc, #104]	; (800b260 <TIM_OC2_SetConfig+0x110>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d113      	bne.n	800b224 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b202:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b20a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	695b      	ldr	r3, [r3, #20]
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	693a      	ldr	r2, [r7, #16]
 800b214:	4313      	orrs	r3, r2
 800b216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	699b      	ldr	r3, [r3, #24]
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	693a      	ldr	r2, [r7, #16]
 800b220:	4313      	orrs	r3, r2
 800b222:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	693a      	ldr	r2, [r7, #16]
 800b228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	685a      	ldr	r2, [r3, #4]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	697a      	ldr	r2, [r7, #20]
 800b23c:	621a      	str	r2, [r3, #32]
}
 800b23e:	bf00      	nop
 800b240:	371c      	adds	r7, #28
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop
 800b24c:	feff8fff 	.word	0xfeff8fff
 800b250:	40010000 	.word	0x40010000
 800b254:	40010400 	.word	0x40010400
 800b258:	40014000 	.word	0x40014000
 800b25c:	40014400 	.word	0x40014400
 800b260:	40014800 	.word	0x40014800

0800b264 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b264:	b480      	push	{r7}
 800b266:	b087      	sub	sp, #28
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6a1b      	ldr	r3, [r3, #32]
 800b272:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a1b      	ldr	r3, [r3, #32]
 800b27e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	69db      	ldr	r3, [r3, #28]
 800b28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	4b33      	ldr	r3, [pc, #204]	; (800b35c <TIM_OC3_SetConfig+0xf8>)
 800b290:	4013      	ands	r3, r2
 800b292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f023 0303 	bic.w	r3, r3, #3
 800b29a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b2ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	021b      	lsls	r3, r3, #8
 800b2b4:	697a      	ldr	r2, [r7, #20]
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a28      	ldr	r2, [pc, #160]	; (800b360 <TIM_OC3_SetConfig+0xfc>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d003      	beq.n	800b2ca <TIM_OC3_SetConfig+0x66>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4a27      	ldr	r2, [pc, #156]	; (800b364 <TIM_OC3_SetConfig+0x100>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d10d      	bne.n	800b2e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b2d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	021b      	lsls	r3, r3, #8
 800b2d8:	697a      	ldr	r2, [r7, #20]
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b2e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4a1d      	ldr	r2, [pc, #116]	; (800b360 <TIM_OC3_SetConfig+0xfc>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d00f      	beq.n	800b30e <TIM_OC3_SetConfig+0xaa>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	4a1c      	ldr	r2, [pc, #112]	; (800b364 <TIM_OC3_SetConfig+0x100>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d00b      	beq.n	800b30e <TIM_OC3_SetConfig+0xaa>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4a1b      	ldr	r2, [pc, #108]	; (800b368 <TIM_OC3_SetConfig+0x104>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d007      	beq.n	800b30e <TIM_OC3_SetConfig+0xaa>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4a1a      	ldr	r2, [pc, #104]	; (800b36c <TIM_OC3_SetConfig+0x108>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d003      	beq.n	800b30e <TIM_OC3_SetConfig+0xaa>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a19      	ldr	r2, [pc, #100]	; (800b370 <TIM_OC3_SetConfig+0x10c>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d113      	bne.n	800b336 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b31c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	695b      	ldr	r3, [r3, #20]
 800b322:	011b      	lsls	r3, r3, #4
 800b324:	693a      	ldr	r2, [r7, #16]
 800b326:	4313      	orrs	r3, r2
 800b328:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	699b      	ldr	r3, [r3, #24]
 800b32e:	011b      	lsls	r3, r3, #4
 800b330:	693a      	ldr	r2, [r7, #16]
 800b332:	4313      	orrs	r3, r2
 800b334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	693a      	ldr	r2, [r7, #16]
 800b33a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	68fa      	ldr	r2, [r7, #12]
 800b340:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	685a      	ldr	r2, [r3, #4]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	697a      	ldr	r2, [r7, #20]
 800b34e:	621a      	str	r2, [r3, #32]
}
 800b350:	bf00      	nop
 800b352:	371c      	adds	r7, #28
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr
 800b35c:	fffeff8f 	.word	0xfffeff8f
 800b360:	40010000 	.word	0x40010000
 800b364:	40010400 	.word	0x40010400
 800b368:	40014000 	.word	0x40014000
 800b36c:	40014400 	.word	0x40014400
 800b370:	40014800 	.word	0x40014800

0800b374 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b374:	b480      	push	{r7}
 800b376:	b087      	sub	sp, #28
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a1b      	ldr	r3, [r3, #32]
 800b382:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a1b      	ldr	r3, [r3, #32]
 800b38e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	69db      	ldr	r3, [r3, #28]
 800b39a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	4b24      	ldr	r3, [pc, #144]	; (800b430 <TIM_OC4_SetConfig+0xbc>)
 800b3a0:	4013      	ands	r3, r2
 800b3a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	021b      	lsls	r3, r3, #8
 800b3b2:	68fa      	ldr	r2, [r7, #12]
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b3be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	031b      	lsls	r3, r3, #12
 800b3c6:	693a      	ldr	r2, [r7, #16]
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	4a19      	ldr	r2, [pc, #100]	; (800b434 <TIM_OC4_SetConfig+0xc0>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d00f      	beq.n	800b3f4 <TIM_OC4_SetConfig+0x80>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	4a18      	ldr	r2, [pc, #96]	; (800b438 <TIM_OC4_SetConfig+0xc4>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d00b      	beq.n	800b3f4 <TIM_OC4_SetConfig+0x80>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	4a17      	ldr	r2, [pc, #92]	; (800b43c <TIM_OC4_SetConfig+0xc8>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d007      	beq.n	800b3f4 <TIM_OC4_SetConfig+0x80>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	4a16      	ldr	r2, [pc, #88]	; (800b440 <TIM_OC4_SetConfig+0xcc>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d003      	beq.n	800b3f4 <TIM_OC4_SetConfig+0x80>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	4a15      	ldr	r2, [pc, #84]	; (800b444 <TIM_OC4_SetConfig+0xd0>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d109      	bne.n	800b408 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	695b      	ldr	r3, [r3, #20]
 800b400:	019b      	lsls	r3, r3, #6
 800b402:	697a      	ldr	r2, [r7, #20]
 800b404:	4313      	orrs	r3, r2
 800b406:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	697a      	ldr	r2, [r7, #20]
 800b40c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	685a      	ldr	r2, [r3, #4]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	693a      	ldr	r2, [r7, #16]
 800b420:	621a      	str	r2, [r3, #32]
}
 800b422:	bf00      	nop
 800b424:	371c      	adds	r7, #28
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr
 800b42e:	bf00      	nop
 800b430:	feff8fff 	.word	0xfeff8fff
 800b434:	40010000 	.word	0x40010000
 800b438:	40010400 	.word	0x40010400
 800b43c:	40014000 	.word	0x40014000
 800b440:	40014400 	.word	0x40014400
 800b444:	40014800 	.word	0x40014800

0800b448 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b448:	b480      	push	{r7}
 800b44a:	b087      	sub	sp, #28
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a1b      	ldr	r3, [r3, #32]
 800b456:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a1b      	ldr	r3, [r3, #32]
 800b462:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b46e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	4b21      	ldr	r3, [pc, #132]	; (800b4f8 <TIM_OC5_SetConfig+0xb0>)
 800b474:	4013      	ands	r3, r2
 800b476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	68fa      	ldr	r2, [r7, #12]
 800b47e:	4313      	orrs	r3, r2
 800b480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b488:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	041b      	lsls	r3, r3, #16
 800b490:	693a      	ldr	r2, [r7, #16]
 800b492:	4313      	orrs	r3, r2
 800b494:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a18      	ldr	r2, [pc, #96]	; (800b4fc <TIM_OC5_SetConfig+0xb4>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d00f      	beq.n	800b4be <TIM_OC5_SetConfig+0x76>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a17      	ldr	r2, [pc, #92]	; (800b500 <TIM_OC5_SetConfig+0xb8>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d00b      	beq.n	800b4be <TIM_OC5_SetConfig+0x76>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4a16      	ldr	r2, [pc, #88]	; (800b504 <TIM_OC5_SetConfig+0xbc>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d007      	beq.n	800b4be <TIM_OC5_SetConfig+0x76>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4a15      	ldr	r2, [pc, #84]	; (800b508 <TIM_OC5_SetConfig+0xc0>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d003      	beq.n	800b4be <TIM_OC5_SetConfig+0x76>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	4a14      	ldr	r2, [pc, #80]	; (800b50c <TIM_OC5_SetConfig+0xc4>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d109      	bne.n	800b4d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	695b      	ldr	r3, [r3, #20]
 800b4ca:	021b      	lsls	r3, r3, #8
 800b4cc:	697a      	ldr	r2, [r7, #20]
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	697a      	ldr	r2, [r7, #20]
 800b4d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	68fa      	ldr	r2, [r7, #12]
 800b4dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	685a      	ldr	r2, [r3, #4]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	621a      	str	r2, [r3, #32]
}
 800b4ec:	bf00      	nop
 800b4ee:	371c      	adds	r7, #28
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr
 800b4f8:	fffeff8f 	.word	0xfffeff8f
 800b4fc:	40010000 	.word	0x40010000
 800b500:	40010400 	.word	0x40010400
 800b504:	40014000 	.word	0x40014000
 800b508:	40014400 	.word	0x40014400
 800b50c:	40014800 	.word	0x40014800

0800b510 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b510:	b480      	push	{r7}
 800b512:	b087      	sub	sp, #28
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a1b      	ldr	r3, [r3, #32]
 800b51e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6a1b      	ldr	r3, [r3, #32]
 800b52a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b538:	68fa      	ldr	r2, [r7, #12]
 800b53a:	4b22      	ldr	r3, [pc, #136]	; (800b5c4 <TIM_OC6_SetConfig+0xb4>)
 800b53c:	4013      	ands	r3, r2
 800b53e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	021b      	lsls	r3, r3, #8
 800b546:	68fa      	ldr	r2, [r7, #12]
 800b548:	4313      	orrs	r3, r2
 800b54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	051b      	lsls	r3, r3, #20
 800b55a:	693a      	ldr	r2, [r7, #16]
 800b55c:	4313      	orrs	r3, r2
 800b55e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4a19      	ldr	r2, [pc, #100]	; (800b5c8 <TIM_OC6_SetConfig+0xb8>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d00f      	beq.n	800b588 <TIM_OC6_SetConfig+0x78>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4a18      	ldr	r2, [pc, #96]	; (800b5cc <TIM_OC6_SetConfig+0xbc>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d00b      	beq.n	800b588 <TIM_OC6_SetConfig+0x78>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4a17      	ldr	r2, [pc, #92]	; (800b5d0 <TIM_OC6_SetConfig+0xc0>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d007      	beq.n	800b588 <TIM_OC6_SetConfig+0x78>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4a16      	ldr	r2, [pc, #88]	; (800b5d4 <TIM_OC6_SetConfig+0xc4>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d003      	beq.n	800b588 <TIM_OC6_SetConfig+0x78>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	4a15      	ldr	r2, [pc, #84]	; (800b5d8 <TIM_OC6_SetConfig+0xc8>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d109      	bne.n	800b59c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b58e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	695b      	ldr	r3, [r3, #20]
 800b594:	029b      	lsls	r3, r3, #10
 800b596:	697a      	ldr	r2, [r7, #20]
 800b598:	4313      	orrs	r3, r2
 800b59a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	697a      	ldr	r2, [r7, #20]
 800b5a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	685a      	ldr	r2, [r3, #4]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	693a      	ldr	r2, [r7, #16]
 800b5b4:	621a      	str	r2, [r3, #32]
}
 800b5b6:	bf00      	nop
 800b5b8:	371c      	adds	r7, #28
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr
 800b5c2:	bf00      	nop
 800b5c4:	feff8fff 	.word	0xfeff8fff
 800b5c8:	40010000 	.word	0x40010000
 800b5cc:	40010400 	.word	0x40010400
 800b5d0:	40014000 	.word	0x40014000
 800b5d4:	40014400 	.word	0x40014400
 800b5d8:	40014800 	.word	0x40014800

0800b5dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b087      	sub	sp, #28
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	60f8      	str	r0, [r7, #12]
 800b5e4:	60b9      	str	r1, [r7, #8]
 800b5e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	f003 031f 	and.w	r3, r3, #31
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b5f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	6a1a      	ldr	r2, [r3, #32]
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	43db      	mvns	r3, r3
 800b5fe:	401a      	ands	r2, r3
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6a1a      	ldr	r2, [r3, #32]
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	f003 031f 	and.w	r3, r3, #31
 800b60e:	6879      	ldr	r1, [r7, #4]
 800b610:	fa01 f303 	lsl.w	r3, r1, r3
 800b614:	431a      	orrs	r2, r3
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	621a      	str	r2, [r3, #32]
}
 800b61a:	bf00      	nop
 800b61c:	371c      	adds	r7, #28
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr
	...

0800b628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b628:	b480      	push	{r7}
 800b62a:	b085      	sub	sp, #20
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d101      	bne.n	800b640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b63c:	2302      	movs	r3, #2
 800b63e:	e077      	b.n	800b730 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2201      	movs	r2, #1
 800b644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2202      	movs	r2, #2
 800b64c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	689b      	ldr	r3, [r3, #8]
 800b65e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a35      	ldr	r2, [pc, #212]	; (800b73c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d004      	beq.n	800b674 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a34      	ldr	r2, [pc, #208]	; (800b740 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d108      	bne.n	800b686 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b67a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	4313      	orrs	r3, r2
 800b684:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b68c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	4313      	orrs	r3, r2
 800b696:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a25      	ldr	r2, [pc, #148]	; (800b73c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d02c      	beq.n	800b704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6b2:	d027      	beq.n	800b704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a22      	ldr	r2, [pc, #136]	; (800b744 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d022      	beq.n	800b704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a21      	ldr	r2, [pc, #132]	; (800b748 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d01d      	beq.n	800b704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a1f      	ldr	r2, [pc, #124]	; (800b74c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d018      	beq.n	800b704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a1a      	ldr	r2, [pc, #104]	; (800b740 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d013      	beq.n	800b704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4a1b      	ldr	r2, [pc, #108]	; (800b750 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d00e      	beq.n	800b704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4a1a      	ldr	r2, [pc, #104]	; (800b754 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d009      	beq.n	800b704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a18      	ldr	r2, [pc, #96]	; (800b758 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d004      	beq.n	800b704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	4a17      	ldr	r2, [pc, #92]	; (800b75c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d10c      	bne.n	800b71e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b70a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	68ba      	ldr	r2, [r7, #8]
 800b712:	4313      	orrs	r3, r2
 800b714:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	68ba      	ldr	r2, [r7, #8]
 800b71c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2201      	movs	r2, #1
 800b722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b72e:	2300      	movs	r3, #0
}
 800b730:	4618      	mov	r0, r3
 800b732:	3714      	adds	r7, #20
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr
 800b73c:	40010000 	.word	0x40010000
 800b740:	40010400 	.word	0x40010400
 800b744:	40000400 	.word	0x40000400
 800b748:	40000800 	.word	0x40000800
 800b74c:	40000c00 	.word	0x40000c00
 800b750:	40001800 	.word	0x40001800
 800b754:	40014000 	.word	0x40014000
 800b758:	4000e000 	.word	0x4000e000
 800b75c:	4000e400 	.word	0x4000e400

0800b760 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b760:	b480      	push	{r7}
 800b762:	b085      	sub	sp, #20
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b76a:	2300      	movs	r3, #0
 800b76c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b774:	2b01      	cmp	r3, #1
 800b776:	d101      	bne.n	800b77c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b778:	2302      	movs	r3, #2
 800b77a:	e087      	b.n	800b88c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2201      	movs	r2, #1
 800b780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	4313      	orrs	r3, r2
 800b790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	4313      	orrs	r3, r2
 800b79e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	691b      	ldr	r3, [r3, #16]
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	695b      	ldr	r3, [r3, #20]
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	699b      	ldr	r3, [r3, #24]
 800b7f0:	041b      	lsls	r3, r3, #16
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4a27      	ldr	r2, [pc, #156]	; (800b898 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d004      	beq.n	800b80a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a25      	ldr	r2, [pc, #148]	; (800b89c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d106      	bne.n	800b818 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	69db      	ldr	r3, [r3, #28]
 800b814:	4313      	orrs	r3, r2
 800b816:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4a1e      	ldr	r2, [pc, #120]	; (800b898 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d004      	beq.n	800b82c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a1d      	ldr	r2, [pc, #116]	; (800b89c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d126      	bne.n	800b87a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b836:	051b      	lsls	r3, r3, #20
 800b838:	4313      	orrs	r3, r2
 800b83a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	6a1b      	ldr	r3, [r3, #32]
 800b846:	4313      	orrs	r3, r2
 800b848:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b854:	4313      	orrs	r3, r2
 800b856:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a0e      	ldr	r2, [pc, #56]	; (800b898 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d004      	beq.n	800b86c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a0d      	ldr	r2, [pc, #52]	; (800b89c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d106      	bne.n	800b87a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b876:	4313      	orrs	r3, r2
 800b878:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3714      	adds	r7, #20
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr
 800b898:	40010000 	.word	0x40010000
 800b89c:	40010400 	.word	0x40010400

0800b8a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8a8:	bf00      	nop
 800b8aa:	370c      	adds	r7, #12
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8bc:	bf00      	nop
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b8d0:	bf00      	nop
 800b8d2:	370c      	adds	r7, #12
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr

0800b8dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d101      	bne.n	800b8ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e042      	b.n	800b974 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d106      	bne.n	800b906 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f7f8 fd0d 	bl	8004320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2224      	movs	r2, #36	; 0x24
 800b90a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f022 0201 	bic.w	r2, r2, #1
 800b91c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 fcdc 	bl	800c2dc <UART_SetConfig>
 800b924:	4603      	mov	r3, r0
 800b926:	2b01      	cmp	r3, #1
 800b928:	d101      	bne.n	800b92e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	e022      	b.n	800b974 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b932:	2b00      	cmp	r3, #0
 800b934:	d002      	beq.n	800b93c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f001 fb3c 	bl	800cfb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	685a      	ldr	r2, [r3, #4]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b94a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	689a      	ldr	r2, [r3, #8]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b95a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f042 0201 	orr.w	r2, r2, #1
 800b96a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f001 fbc3 	bl	800d0f8 <UART_CheckIdleState>
 800b972:	4603      	mov	r3, r0
}
 800b974:	4618      	mov	r0, r3
 800b976:	3708      	adds	r7, #8
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b08a      	sub	sp, #40	; 0x28
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	4613      	mov	r3, r2
 800b988:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b990:	2b20      	cmp	r3, #32
 800b992:	d17a      	bne.n	800ba8a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d002      	beq.n	800b9a0 <HAL_UART_Transmit_DMA+0x24>
 800b99a:	88fb      	ldrh	r3, [r7, #6]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d101      	bne.n	800b9a4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e073      	b.n	800ba8c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d101      	bne.n	800b9b2 <HAL_UART_Transmit_DMA+0x36>
 800b9ae:	2302      	movs	r3, #2
 800b9b0:	e06c      	b.n	800ba8c <HAL_UART_Transmit_DMA+0x110>
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	68ba      	ldr	r2, [r7, #8]
 800b9be:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	88fa      	ldrh	r2, [r7, #6]
 800b9c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	88fa      	ldrh	r2, [r7, #6]
 800b9cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2221      	movs	r2, #33	; 0x21
 800b9dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d02c      	beq.n	800ba42 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9ec:	4a29      	ldr	r2, [pc, #164]	; (800ba94 <HAL_UART_Transmit_DMA+0x118>)
 800b9ee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9f4:	4a28      	ldr	r2, [pc, #160]	; (800ba98 <HAL_UART_Transmit_DMA+0x11c>)
 800b9f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9fc:	4a27      	ldr	r2, [pc, #156]	; (800ba9c <HAL_UART_Transmit_DMA+0x120>)
 800b9fe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba04:	2200      	movs	r2, #0
 800ba06:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba10:	4619      	mov	r1, r3
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	3328      	adds	r3, #40	; 0x28
 800ba18:	461a      	mov	r2, r3
 800ba1a:	88fb      	ldrh	r3, [r7, #6]
 800ba1c:	f7f9 fd02 	bl	8005424 <HAL_DMA_Start_IT>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00d      	beq.n	800ba42 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2210      	movs	r2, #16
 800ba2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2200      	movs	r2, #0
 800ba32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2220      	movs	r2, #32
 800ba3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	e024      	b.n	800ba8c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2240      	movs	r2, #64	; 0x40
 800ba48:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	3308      	adds	r3, #8
 800ba58:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	e853 3f00 	ldrex	r3, [r3]
 800ba60:	613b      	str	r3, [r7, #16]
   return(result);
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba68:	627b      	str	r3, [r7, #36]	; 0x24
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	3308      	adds	r3, #8
 800ba70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba72:	623a      	str	r2, [r7, #32]
 800ba74:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba76:	69f9      	ldr	r1, [r7, #28]
 800ba78:	6a3a      	ldr	r2, [r7, #32]
 800ba7a:	e841 2300 	strex	r3, r2, [r1]
 800ba7e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba80:	69bb      	ldr	r3, [r7, #24]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d1e5      	bne.n	800ba52 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800ba86:	2300      	movs	r3, #0
 800ba88:	e000      	b.n	800ba8c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800ba8a:	2302      	movs	r3, #2
  }
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3728      	adds	r7, #40	; 0x28
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	0800d5c1 	.word	0x0800d5c1
 800ba98:	0800d657 	.word	0x0800d657
 800ba9c:	0800d7cd 	.word	0x0800d7cd

0800baa0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b08a      	sub	sp, #40	; 0x28
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	60f8      	str	r0, [r7, #12]
 800baa8:	60b9      	str	r1, [r7, #8]
 800baaa:	4613      	mov	r3, r2
 800baac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bab4:	2b20      	cmp	r3, #32
 800bab6:	d142      	bne.n	800bb3e <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d002      	beq.n	800bac4 <HAL_UART_Receive_DMA+0x24>
 800babe:	88fb      	ldrh	r3, [r7, #6]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d101      	bne.n	800bac8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bac4:	2301      	movs	r3, #1
 800bac6:	e03b      	b.n	800bb40 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d101      	bne.n	800bad6 <HAL_UART_Receive_DMA+0x36>
 800bad2:	2302      	movs	r3, #2
 800bad4:	e034      	b.n	800bb40 <HAL_UART_Receive_DMA+0xa0>
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2201      	movs	r2, #1
 800bada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2200      	movs	r2, #0
 800bae2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a17      	ldr	r2, [pc, #92]	; (800bb48 <HAL_UART_Receive_DMA+0xa8>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d01f      	beq.n	800bb2e <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d018      	beq.n	800bb2e <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	e853 3f00 	ldrex	r3, [r3]
 800bb08:	613b      	str	r3, [r7, #16]
   return(result);
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bb10:	627b      	str	r3, [r7, #36]	; 0x24
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	461a      	mov	r2, r3
 800bb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1a:	623b      	str	r3, [r7, #32]
 800bb1c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb1e:	69f9      	ldr	r1, [r7, #28]
 800bb20:	6a3a      	ldr	r2, [r7, #32]
 800bb22:	e841 2300 	strex	r3, r2, [r1]
 800bb26:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb28:	69bb      	ldr	r3, [r7, #24]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d1e6      	bne.n	800bafc <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bb2e:	88fb      	ldrh	r3, [r7, #6]
 800bb30:	461a      	mov	r2, r3
 800bb32:	68b9      	ldr	r1, [r7, #8]
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f001 fbf3 	bl	800d320 <UART_Start_Receive_DMA>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	e000      	b.n	800bb40 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bb3e:	2302      	movs	r3, #2
  }
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3728      	adds	r7, #40	; 0x28
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	58000c00 	.word	0x58000c00

0800bb4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b0ba      	sub	sp, #232	; 0xe8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	69db      	ldr	r3, [r3, #28]
 800bb5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	689b      	ldr	r3, [r3, #8]
 800bb6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bb72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bb76:	f640 030f 	movw	r3, #2063	; 0x80f
 800bb7a:	4013      	ands	r3, r2
 800bb7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bb80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d11b      	bne.n	800bbc0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb8c:	f003 0320 	and.w	r3, r3, #32
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d015      	beq.n	800bbc0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bb94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb98:	f003 0320 	and.w	r3, r3, #32
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d105      	bne.n	800bbac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d009      	beq.n	800bbc0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	f000 835a 	beq.w	800c26a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	4798      	blx	r3
      }
      return;
 800bbbe:	e354      	b.n	800c26a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bbc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f000 811f 	beq.w	800be08 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bbca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bbce:	4b8b      	ldr	r3, [pc, #556]	; (800bdfc <HAL_UART_IRQHandler+0x2b0>)
 800bbd0:	4013      	ands	r3, r2
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d106      	bne.n	800bbe4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bbd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bbda:	4b89      	ldr	r3, [pc, #548]	; (800be00 <HAL_UART_IRQHandler+0x2b4>)
 800bbdc:	4013      	ands	r3, r2
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f000 8112 	beq.w	800be08 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bbe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbe8:	f003 0301 	and.w	r3, r3, #1
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d011      	beq.n	800bc14 <HAL_UART_IRQHandler+0xc8>
 800bbf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00b      	beq.n	800bc14 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	2201      	movs	r2, #1
 800bc02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc0a:	f043 0201 	orr.w	r2, r3, #1
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc18:	f003 0302 	and.w	r3, r3, #2
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d011      	beq.n	800bc44 <HAL_UART_IRQHandler+0xf8>
 800bc20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc24:	f003 0301 	and.w	r3, r3, #1
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d00b      	beq.n	800bc44 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	2202      	movs	r2, #2
 800bc32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc3a:	f043 0204 	orr.w	r2, r3, #4
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc48:	f003 0304 	and.w	r3, r3, #4
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d011      	beq.n	800bc74 <HAL_UART_IRQHandler+0x128>
 800bc50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc54:	f003 0301 	and.w	r3, r3, #1
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d00b      	beq.n	800bc74 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2204      	movs	r2, #4
 800bc62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc6a:	f043 0202 	orr.w	r2, r3, #2
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bc74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc78:	f003 0308 	and.w	r3, r3, #8
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d017      	beq.n	800bcb0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc84:	f003 0320 	and.w	r3, r3, #32
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d105      	bne.n	800bc98 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bc8c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bc90:	4b5a      	ldr	r3, [pc, #360]	; (800bdfc <HAL_UART_IRQHandler+0x2b0>)
 800bc92:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00b      	beq.n	800bcb0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2208      	movs	r2, #8
 800bc9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bca6:	f043 0208 	orr.w	r2, r3, #8
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bcb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d012      	beq.n	800bce2 <HAL_UART_IRQHandler+0x196>
 800bcbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d00c      	beq.n	800bce2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bcd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcd8:	f043 0220 	orr.w	r2, r3, #32
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f000 82c0 	beq.w	800c26e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bcee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcf2:	f003 0320 	and.w	r3, r3, #32
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d013      	beq.n	800bd22 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bcfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcfe:	f003 0320 	and.w	r3, r3, #32
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d105      	bne.n	800bd12 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bd06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d007      	beq.n	800bd22 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d003      	beq.n	800bd22 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	689b      	ldr	r3, [r3, #8]
 800bd32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd36:	2b40      	cmp	r3, #64	; 0x40
 800bd38:	d005      	beq.n	800bd46 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bd3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d04f      	beq.n	800bde6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f001 fbd4 	bl	800d4f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd56:	2b40      	cmp	r3, #64	; 0x40
 800bd58:	d141      	bne.n	800bdde <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	3308      	adds	r3, #8
 800bd60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bd68:	e853 3f00 	ldrex	r3, [r3]
 800bd6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bd70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	3308      	adds	r3, #8
 800bd82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bd86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bd8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bd92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bd96:	e841 2300 	strex	r3, r2, [r1]
 800bd9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bd9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d1d9      	bne.n	800bd5a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d013      	beq.n	800bdd6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdb2:	4a14      	ldr	r2, [pc, #80]	; (800be04 <HAL_UART_IRQHandler+0x2b8>)
 800bdb4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7fa f8ba 	bl	8005f34 <HAL_DMA_Abort_IT>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d017      	beq.n	800bdf6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bdd0:	4610      	mov	r0, r2
 800bdd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdd4:	e00f      	b.n	800bdf6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 fa6a 	bl	800c2b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bddc:	e00b      	b.n	800bdf6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 fa66 	bl	800c2b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bde4:	e007      	b.n	800bdf6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 fa62 	bl	800c2b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bdf4:	e23b      	b.n	800c26e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdf6:	bf00      	nop
    return;
 800bdf8:	e239      	b.n	800c26e <HAL_UART_IRQHandler+0x722>
 800bdfa:	bf00      	nop
 800bdfc:	10000001 	.word	0x10000001
 800be00:	04000120 	.word	0x04000120
 800be04:	0800d84d 	.word	0x0800d84d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	f040 81ce 	bne.w	800c1ae <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800be12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be16:	f003 0310 	and.w	r3, r3, #16
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	f000 81c7 	beq.w	800c1ae <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800be20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be24:	f003 0310 	and.w	r3, r3, #16
 800be28:	2b00      	cmp	r3, #0
 800be2a:	f000 81c0 	beq.w	800c1ae <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2210      	movs	r2, #16
 800be34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	689b      	ldr	r3, [r3, #8]
 800be3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be40:	2b40      	cmp	r3, #64	; 0x40
 800be42:	f040 813b 	bne.w	800c0bc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4a8b      	ldr	r2, [pc, #556]	; (800c07c <HAL_UART_IRQHandler+0x530>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d059      	beq.n	800bf06 <HAL_UART_IRQHandler+0x3ba>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4a89      	ldr	r2, [pc, #548]	; (800c080 <HAL_UART_IRQHandler+0x534>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d053      	beq.n	800bf06 <HAL_UART_IRQHandler+0x3ba>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a87      	ldr	r2, [pc, #540]	; (800c084 <HAL_UART_IRQHandler+0x538>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d04d      	beq.n	800bf06 <HAL_UART_IRQHandler+0x3ba>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4a85      	ldr	r2, [pc, #532]	; (800c088 <HAL_UART_IRQHandler+0x53c>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d047      	beq.n	800bf06 <HAL_UART_IRQHandler+0x3ba>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4a83      	ldr	r2, [pc, #524]	; (800c08c <HAL_UART_IRQHandler+0x540>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d041      	beq.n	800bf06 <HAL_UART_IRQHandler+0x3ba>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	4a81      	ldr	r2, [pc, #516]	; (800c090 <HAL_UART_IRQHandler+0x544>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d03b      	beq.n	800bf06 <HAL_UART_IRQHandler+0x3ba>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4a7f      	ldr	r2, [pc, #508]	; (800c094 <HAL_UART_IRQHandler+0x548>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d035      	beq.n	800bf06 <HAL_UART_IRQHandler+0x3ba>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a7d      	ldr	r2, [pc, #500]	; (800c098 <HAL_UART_IRQHandler+0x54c>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d02f      	beq.n	800bf06 <HAL_UART_IRQHandler+0x3ba>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4a7b      	ldr	r2, [pc, #492]	; (800c09c <HAL_UART_IRQHandler+0x550>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d029      	beq.n	800bf06 <HAL_UART_IRQHandler+0x3ba>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	4a79      	ldr	r2, [pc, #484]	; (800c0a0 <HAL_UART_IRQHandler+0x554>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d023      	beq.n	800bf06 <HAL_UART_IRQHandler+0x3ba>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a77      	ldr	r2, [pc, #476]	; (800c0a4 <HAL_UART_IRQHandler+0x558>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d01d      	beq.n	800bf06 <HAL_UART_IRQHandler+0x3ba>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4a75      	ldr	r2, [pc, #468]	; (800c0a8 <HAL_UART_IRQHandler+0x55c>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d017      	beq.n	800bf06 <HAL_UART_IRQHandler+0x3ba>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4a73      	ldr	r2, [pc, #460]	; (800c0ac <HAL_UART_IRQHandler+0x560>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d011      	beq.n	800bf06 <HAL_UART_IRQHandler+0x3ba>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4a71      	ldr	r2, [pc, #452]	; (800c0b0 <HAL_UART_IRQHandler+0x564>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d00b      	beq.n	800bf06 <HAL_UART_IRQHandler+0x3ba>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4a6f      	ldr	r2, [pc, #444]	; (800c0b4 <HAL_UART_IRQHandler+0x568>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d005      	beq.n	800bf06 <HAL_UART_IRQHandler+0x3ba>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4a6d      	ldr	r2, [pc, #436]	; (800c0b8 <HAL_UART_IRQHandler+0x56c>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d105      	bne.n	800bf12 <HAL_UART_IRQHandler+0x3c6>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	e004      	b.n	800bf1c <HAL_UART_IRQHandler+0x3d0>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bf20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	f000 81a4 	beq.w	800c272 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bf30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf34:	429a      	cmp	r2, r3
 800bf36:	f080 819c 	bcs.w	800c272 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf48:	69db      	ldr	r3, [r3, #28]
 800bf4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf4e:	f000 8086 	beq.w	800c05e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf5e:	e853 3f00 	ldrex	r3, [r3]
 800bf62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bf66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	461a      	mov	r2, r3
 800bf78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bf7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf80:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf84:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bf88:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bf8c:	e841 2300 	strex	r3, r2, [r1]
 800bf90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bf94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d1da      	bne.n	800bf52 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	3308      	adds	r3, #8
 800bfa2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bfa6:	e853 3f00 	ldrex	r3, [r3]
 800bfaa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bfac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfae:	f023 0301 	bic.w	r3, r3, #1
 800bfb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	3308      	adds	r3, #8
 800bfbc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bfc0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bfc4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bfc8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bfcc:	e841 2300 	strex	r3, r2, [r1]
 800bfd0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bfd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1e1      	bne.n	800bf9c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	3308      	adds	r3, #8
 800bfde:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfe2:	e853 3f00 	ldrex	r3, [r3]
 800bfe6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bfe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	3308      	adds	r3, #8
 800bff8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bffc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bffe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c000:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c002:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c004:	e841 2300 	strex	r3, r2, [r1]
 800c008:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c00a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d1e3      	bne.n	800bfd8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2220      	movs	r2, #32
 800c014:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c026:	e853 3f00 	ldrex	r3, [r3]
 800c02a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c02c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c02e:	f023 0310 	bic.w	r3, r3, #16
 800c032:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	461a      	mov	r2, r3
 800c03c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c040:	65bb      	str	r3, [r7, #88]	; 0x58
 800c042:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c044:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c046:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c048:	e841 2300 	strex	r3, r2, [r1]
 800c04c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c04e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1e4      	bne.n	800c01e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c058:	4618      	mov	r0, r3
 800c05a:	f7f9 fc4d 	bl	80058f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c06a:	b29b      	uxth	r3, r3
 800c06c:	1ad3      	subs	r3, r2, r3
 800c06e:	b29b      	uxth	r3, r3
 800c070:	4619      	mov	r1, r3
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 f926 	bl	800c2c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c078:	e0fb      	b.n	800c272 <HAL_UART_IRQHandler+0x726>
 800c07a:	bf00      	nop
 800c07c:	40020010 	.word	0x40020010
 800c080:	40020028 	.word	0x40020028
 800c084:	40020040 	.word	0x40020040
 800c088:	40020058 	.word	0x40020058
 800c08c:	40020070 	.word	0x40020070
 800c090:	40020088 	.word	0x40020088
 800c094:	400200a0 	.word	0x400200a0
 800c098:	400200b8 	.word	0x400200b8
 800c09c:	40020410 	.word	0x40020410
 800c0a0:	40020428 	.word	0x40020428
 800c0a4:	40020440 	.word	0x40020440
 800c0a8:	40020458 	.word	0x40020458
 800c0ac:	40020470 	.word	0x40020470
 800c0b0:	40020488 	.word	0x40020488
 800c0b4:	400204a0 	.word	0x400204a0
 800c0b8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	1ad3      	subs	r3, r2, r3
 800c0cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0d6:	b29b      	uxth	r3, r3
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	f000 80cc 	beq.w	800c276 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c0de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	f000 80c7 	beq.w	800c276 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f0:	e853 3f00 	ldrex	r3, [r3]
 800c0f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c0fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	461a      	mov	r2, r3
 800c106:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c10a:	647b      	str	r3, [r7, #68]	; 0x44
 800c10c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c10e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c110:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c112:	e841 2300 	strex	r3, r2, [r1]
 800c116:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d1e4      	bne.n	800c0e8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	3308      	adds	r3, #8
 800c124:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c128:	e853 3f00 	ldrex	r3, [r3]
 800c12c:	623b      	str	r3, [r7, #32]
   return(result);
 800c12e:	6a3a      	ldr	r2, [r7, #32]
 800c130:	4b54      	ldr	r3, [pc, #336]	; (800c284 <HAL_UART_IRQHandler+0x738>)
 800c132:	4013      	ands	r3, r2
 800c134:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	3308      	adds	r3, #8
 800c13e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c142:	633a      	str	r2, [r7, #48]	; 0x30
 800c144:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c146:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c14a:	e841 2300 	strex	r3, r2, [r1]
 800c14e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c152:	2b00      	cmp	r3, #0
 800c154:	d1e3      	bne.n	800c11e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2220      	movs	r2, #32
 800c15a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2200      	movs	r2, #0
 800c162:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2200      	movs	r2, #0
 800c168:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	e853 3f00 	ldrex	r3, [r3]
 800c176:	60fb      	str	r3, [r7, #12]
   return(result);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f023 0310 	bic.w	r3, r3, #16
 800c17e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	461a      	mov	r2, r3
 800c188:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c18c:	61fb      	str	r3, [r7, #28]
 800c18e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c190:	69b9      	ldr	r1, [r7, #24]
 800c192:	69fa      	ldr	r2, [r7, #28]
 800c194:	e841 2300 	strex	r3, r2, [r1]
 800c198:	617b      	str	r3, [r7, #20]
   return(result);
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1e4      	bne.n	800c16a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c1a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 f88c 	bl	800c2c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c1ac:	e063      	b.n	800c276 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c1ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d00e      	beq.n	800c1d8 <HAL_UART_IRQHandler+0x68c>
 800c1ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d008      	beq.n	800c1d8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c1ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f001 fb7c 	bl	800d8ce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c1d6:	e051      	b.n	800c27c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c1d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d014      	beq.n	800c20e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c1e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d105      	bne.n	800c1fc <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c1f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d008      	beq.n	800c20e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c200:	2b00      	cmp	r3, #0
 800c202:	d03a      	beq.n	800c27a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	4798      	blx	r3
    }
    return;
 800c20c:	e035      	b.n	800c27a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c20e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c216:	2b00      	cmp	r3, #0
 800c218:	d009      	beq.n	800c22e <HAL_UART_IRQHandler+0x6e2>
 800c21a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c21e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c222:	2b00      	cmp	r3, #0
 800c224:	d003      	beq.n	800c22e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f001 fb26 	bl	800d878 <UART_EndTransmit_IT>
    return;
 800c22c:	e026      	b.n	800c27c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c232:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c236:	2b00      	cmp	r3, #0
 800c238:	d009      	beq.n	800c24e <HAL_UART_IRQHandler+0x702>
 800c23a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c23e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c242:	2b00      	cmp	r3, #0
 800c244:	d003      	beq.n	800c24e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f001 fb55 	bl	800d8f6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c24c:	e016      	b.n	800c27c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c24e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c256:	2b00      	cmp	r3, #0
 800c258:	d010      	beq.n	800c27c <HAL_UART_IRQHandler+0x730>
 800c25a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c25e:	2b00      	cmp	r3, #0
 800c260:	da0c      	bge.n	800c27c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f001 fb3d 	bl	800d8e2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c268:	e008      	b.n	800c27c <HAL_UART_IRQHandler+0x730>
      return;
 800c26a:	bf00      	nop
 800c26c:	e006      	b.n	800c27c <HAL_UART_IRQHandler+0x730>
    return;
 800c26e:	bf00      	nop
 800c270:	e004      	b.n	800c27c <HAL_UART_IRQHandler+0x730>
      return;
 800c272:	bf00      	nop
 800c274:	e002      	b.n	800c27c <HAL_UART_IRQHandler+0x730>
      return;
 800c276:	bf00      	nop
 800c278:	e000      	b.n	800c27c <HAL_UART_IRQHandler+0x730>
    return;
 800c27a:	bf00      	nop
  }
}
 800c27c:	37e8      	adds	r7, #232	; 0xe8
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop
 800c284:	effffffe 	.word	0xeffffffe

0800c288 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c290:	bf00      	nop
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b083      	sub	sp, #12
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c2a4:	bf00      	nop
 800c2a6:	370c      	adds	r7, #12
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c2b8:	bf00      	nop
 800c2ba:	370c      	adds	r7, #12
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b083      	sub	sp, #12
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c2d0:	bf00      	nop
 800c2d2:	370c      	adds	r7, #12
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr

0800c2dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c2e0:	b092      	sub	sp, #72	; 0x48
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	689a      	ldr	r2, [r3, #8]
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	691b      	ldr	r3, [r3, #16]
 800c2f4:	431a      	orrs	r2, r3
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	695b      	ldr	r3, [r3, #20]
 800c2fa:	431a      	orrs	r2, r3
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	69db      	ldr	r3, [r3, #28]
 800c300:	4313      	orrs	r3, r2
 800c302:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	4bbe      	ldr	r3, [pc, #760]	; (800c604 <UART_SetConfig+0x328>)
 800c30c:	4013      	ands	r3, r2
 800c30e:	697a      	ldr	r2, [r7, #20]
 800c310:	6812      	ldr	r2, [r2, #0]
 800c312:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c314:	430b      	orrs	r3, r1
 800c316:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	68da      	ldr	r2, [r3, #12]
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	430a      	orrs	r2, r1
 800c32c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	699b      	ldr	r3, [r3, #24]
 800c332:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4ab3      	ldr	r2, [pc, #716]	; (800c608 <UART_SetConfig+0x32c>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d004      	beq.n	800c348 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	6a1b      	ldr	r3, [r3, #32]
 800c342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c344:	4313      	orrs	r3, r2
 800c346:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	689a      	ldr	r2, [r3, #8]
 800c34e:	4baf      	ldr	r3, [pc, #700]	; (800c60c <UART_SetConfig+0x330>)
 800c350:	4013      	ands	r3, r2
 800c352:	697a      	ldr	r2, [r7, #20]
 800c354:	6812      	ldr	r2, [r2, #0]
 800c356:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c358:	430b      	orrs	r3, r1
 800c35a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c362:	f023 010f 	bic.w	r1, r3, #15
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	430a      	orrs	r2, r1
 800c370:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4aa6      	ldr	r2, [pc, #664]	; (800c610 <UART_SetConfig+0x334>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d177      	bne.n	800c46c <UART_SetConfig+0x190>
 800c37c:	4ba5      	ldr	r3, [pc, #660]	; (800c614 <UART_SetConfig+0x338>)
 800c37e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c380:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c384:	2b28      	cmp	r3, #40	; 0x28
 800c386:	d86d      	bhi.n	800c464 <UART_SetConfig+0x188>
 800c388:	a201      	add	r2, pc, #4	; (adr r2, 800c390 <UART_SetConfig+0xb4>)
 800c38a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c38e:	bf00      	nop
 800c390:	0800c435 	.word	0x0800c435
 800c394:	0800c465 	.word	0x0800c465
 800c398:	0800c465 	.word	0x0800c465
 800c39c:	0800c465 	.word	0x0800c465
 800c3a0:	0800c465 	.word	0x0800c465
 800c3a4:	0800c465 	.word	0x0800c465
 800c3a8:	0800c465 	.word	0x0800c465
 800c3ac:	0800c465 	.word	0x0800c465
 800c3b0:	0800c43d 	.word	0x0800c43d
 800c3b4:	0800c465 	.word	0x0800c465
 800c3b8:	0800c465 	.word	0x0800c465
 800c3bc:	0800c465 	.word	0x0800c465
 800c3c0:	0800c465 	.word	0x0800c465
 800c3c4:	0800c465 	.word	0x0800c465
 800c3c8:	0800c465 	.word	0x0800c465
 800c3cc:	0800c465 	.word	0x0800c465
 800c3d0:	0800c445 	.word	0x0800c445
 800c3d4:	0800c465 	.word	0x0800c465
 800c3d8:	0800c465 	.word	0x0800c465
 800c3dc:	0800c465 	.word	0x0800c465
 800c3e0:	0800c465 	.word	0x0800c465
 800c3e4:	0800c465 	.word	0x0800c465
 800c3e8:	0800c465 	.word	0x0800c465
 800c3ec:	0800c465 	.word	0x0800c465
 800c3f0:	0800c44d 	.word	0x0800c44d
 800c3f4:	0800c465 	.word	0x0800c465
 800c3f8:	0800c465 	.word	0x0800c465
 800c3fc:	0800c465 	.word	0x0800c465
 800c400:	0800c465 	.word	0x0800c465
 800c404:	0800c465 	.word	0x0800c465
 800c408:	0800c465 	.word	0x0800c465
 800c40c:	0800c465 	.word	0x0800c465
 800c410:	0800c455 	.word	0x0800c455
 800c414:	0800c465 	.word	0x0800c465
 800c418:	0800c465 	.word	0x0800c465
 800c41c:	0800c465 	.word	0x0800c465
 800c420:	0800c465 	.word	0x0800c465
 800c424:	0800c465 	.word	0x0800c465
 800c428:	0800c465 	.word	0x0800c465
 800c42c:	0800c465 	.word	0x0800c465
 800c430:	0800c45d 	.word	0x0800c45d
 800c434:	2301      	movs	r3, #1
 800c436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c43a:	e326      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c43c:	2304      	movs	r3, #4
 800c43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c442:	e322      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c444:	2308      	movs	r3, #8
 800c446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c44a:	e31e      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c44c:	2310      	movs	r3, #16
 800c44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c452:	e31a      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c454:	2320      	movs	r3, #32
 800c456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c45a:	e316      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c45c:	2340      	movs	r3, #64	; 0x40
 800c45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c462:	e312      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c464:	2380      	movs	r3, #128	; 0x80
 800c466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c46a:	e30e      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a69      	ldr	r2, [pc, #420]	; (800c618 <UART_SetConfig+0x33c>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d130      	bne.n	800c4d8 <UART_SetConfig+0x1fc>
 800c476:	4b67      	ldr	r3, [pc, #412]	; (800c614 <UART_SetConfig+0x338>)
 800c478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c47a:	f003 0307 	and.w	r3, r3, #7
 800c47e:	2b05      	cmp	r3, #5
 800c480:	d826      	bhi.n	800c4d0 <UART_SetConfig+0x1f4>
 800c482:	a201      	add	r2, pc, #4	; (adr r2, 800c488 <UART_SetConfig+0x1ac>)
 800c484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c488:	0800c4a1 	.word	0x0800c4a1
 800c48c:	0800c4a9 	.word	0x0800c4a9
 800c490:	0800c4b1 	.word	0x0800c4b1
 800c494:	0800c4b9 	.word	0x0800c4b9
 800c498:	0800c4c1 	.word	0x0800c4c1
 800c49c:	0800c4c9 	.word	0x0800c4c9
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4a6:	e2f0      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c4a8:	2304      	movs	r3, #4
 800c4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ae:	e2ec      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c4b0:	2308      	movs	r3, #8
 800c4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4b6:	e2e8      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c4b8:	2310      	movs	r3, #16
 800c4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4be:	e2e4      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c4c0:	2320      	movs	r3, #32
 800c4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4c6:	e2e0      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c4c8:	2340      	movs	r3, #64	; 0x40
 800c4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ce:	e2dc      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c4d0:	2380      	movs	r3, #128	; 0x80
 800c4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4d6:	e2d8      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a4f      	ldr	r2, [pc, #316]	; (800c61c <UART_SetConfig+0x340>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d130      	bne.n	800c544 <UART_SetConfig+0x268>
 800c4e2:	4b4c      	ldr	r3, [pc, #304]	; (800c614 <UART_SetConfig+0x338>)
 800c4e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4e6:	f003 0307 	and.w	r3, r3, #7
 800c4ea:	2b05      	cmp	r3, #5
 800c4ec:	d826      	bhi.n	800c53c <UART_SetConfig+0x260>
 800c4ee:	a201      	add	r2, pc, #4	; (adr r2, 800c4f4 <UART_SetConfig+0x218>)
 800c4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4f4:	0800c50d 	.word	0x0800c50d
 800c4f8:	0800c515 	.word	0x0800c515
 800c4fc:	0800c51d 	.word	0x0800c51d
 800c500:	0800c525 	.word	0x0800c525
 800c504:	0800c52d 	.word	0x0800c52d
 800c508:	0800c535 	.word	0x0800c535
 800c50c:	2300      	movs	r3, #0
 800c50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c512:	e2ba      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c514:	2304      	movs	r3, #4
 800c516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c51a:	e2b6      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c51c:	2308      	movs	r3, #8
 800c51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c522:	e2b2      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c524:	2310      	movs	r3, #16
 800c526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c52a:	e2ae      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c52c:	2320      	movs	r3, #32
 800c52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c532:	e2aa      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c534:	2340      	movs	r3, #64	; 0x40
 800c536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c53a:	e2a6      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c53c:	2380      	movs	r3, #128	; 0x80
 800c53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c542:	e2a2      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a35      	ldr	r2, [pc, #212]	; (800c620 <UART_SetConfig+0x344>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d130      	bne.n	800c5b0 <UART_SetConfig+0x2d4>
 800c54e:	4b31      	ldr	r3, [pc, #196]	; (800c614 <UART_SetConfig+0x338>)
 800c550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c552:	f003 0307 	and.w	r3, r3, #7
 800c556:	2b05      	cmp	r3, #5
 800c558:	d826      	bhi.n	800c5a8 <UART_SetConfig+0x2cc>
 800c55a:	a201      	add	r2, pc, #4	; (adr r2, 800c560 <UART_SetConfig+0x284>)
 800c55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c560:	0800c579 	.word	0x0800c579
 800c564:	0800c581 	.word	0x0800c581
 800c568:	0800c589 	.word	0x0800c589
 800c56c:	0800c591 	.word	0x0800c591
 800c570:	0800c599 	.word	0x0800c599
 800c574:	0800c5a1 	.word	0x0800c5a1
 800c578:	2300      	movs	r3, #0
 800c57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c57e:	e284      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c580:	2304      	movs	r3, #4
 800c582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c586:	e280      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c588:	2308      	movs	r3, #8
 800c58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c58e:	e27c      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c590:	2310      	movs	r3, #16
 800c592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c596:	e278      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c598:	2320      	movs	r3, #32
 800c59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c59e:	e274      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c5a0:	2340      	movs	r3, #64	; 0x40
 800c5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5a6:	e270      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c5a8:	2380      	movs	r3, #128	; 0x80
 800c5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ae:	e26c      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a1b      	ldr	r2, [pc, #108]	; (800c624 <UART_SetConfig+0x348>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d142      	bne.n	800c640 <UART_SetConfig+0x364>
 800c5ba:	4b16      	ldr	r3, [pc, #88]	; (800c614 <UART_SetConfig+0x338>)
 800c5bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5be:	f003 0307 	and.w	r3, r3, #7
 800c5c2:	2b05      	cmp	r3, #5
 800c5c4:	d838      	bhi.n	800c638 <UART_SetConfig+0x35c>
 800c5c6:	a201      	add	r2, pc, #4	; (adr r2, 800c5cc <UART_SetConfig+0x2f0>)
 800c5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5cc:	0800c5e5 	.word	0x0800c5e5
 800c5d0:	0800c5ed 	.word	0x0800c5ed
 800c5d4:	0800c5f5 	.word	0x0800c5f5
 800c5d8:	0800c5fd 	.word	0x0800c5fd
 800c5dc:	0800c629 	.word	0x0800c629
 800c5e0:	0800c631 	.word	0x0800c631
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ea:	e24e      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c5ec:	2304      	movs	r3, #4
 800c5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5f2:	e24a      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c5f4:	2308      	movs	r3, #8
 800c5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5fa:	e246      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c5fc:	2310      	movs	r3, #16
 800c5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c602:	e242      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c604:	cfff69f3 	.word	0xcfff69f3
 800c608:	58000c00 	.word	0x58000c00
 800c60c:	11fff4ff 	.word	0x11fff4ff
 800c610:	40011000 	.word	0x40011000
 800c614:	58024400 	.word	0x58024400
 800c618:	40004400 	.word	0x40004400
 800c61c:	40004800 	.word	0x40004800
 800c620:	40004c00 	.word	0x40004c00
 800c624:	40005000 	.word	0x40005000
 800c628:	2320      	movs	r3, #32
 800c62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c62e:	e22c      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c630:	2340      	movs	r3, #64	; 0x40
 800c632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c636:	e228      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c638:	2380      	movs	r3, #128	; 0x80
 800c63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c63e:	e224      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4ab1      	ldr	r2, [pc, #708]	; (800c90c <UART_SetConfig+0x630>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d176      	bne.n	800c738 <UART_SetConfig+0x45c>
 800c64a:	4bb1      	ldr	r3, [pc, #708]	; (800c910 <UART_SetConfig+0x634>)
 800c64c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c64e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c652:	2b28      	cmp	r3, #40	; 0x28
 800c654:	d86c      	bhi.n	800c730 <UART_SetConfig+0x454>
 800c656:	a201      	add	r2, pc, #4	; (adr r2, 800c65c <UART_SetConfig+0x380>)
 800c658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c65c:	0800c701 	.word	0x0800c701
 800c660:	0800c731 	.word	0x0800c731
 800c664:	0800c731 	.word	0x0800c731
 800c668:	0800c731 	.word	0x0800c731
 800c66c:	0800c731 	.word	0x0800c731
 800c670:	0800c731 	.word	0x0800c731
 800c674:	0800c731 	.word	0x0800c731
 800c678:	0800c731 	.word	0x0800c731
 800c67c:	0800c709 	.word	0x0800c709
 800c680:	0800c731 	.word	0x0800c731
 800c684:	0800c731 	.word	0x0800c731
 800c688:	0800c731 	.word	0x0800c731
 800c68c:	0800c731 	.word	0x0800c731
 800c690:	0800c731 	.word	0x0800c731
 800c694:	0800c731 	.word	0x0800c731
 800c698:	0800c731 	.word	0x0800c731
 800c69c:	0800c711 	.word	0x0800c711
 800c6a0:	0800c731 	.word	0x0800c731
 800c6a4:	0800c731 	.word	0x0800c731
 800c6a8:	0800c731 	.word	0x0800c731
 800c6ac:	0800c731 	.word	0x0800c731
 800c6b0:	0800c731 	.word	0x0800c731
 800c6b4:	0800c731 	.word	0x0800c731
 800c6b8:	0800c731 	.word	0x0800c731
 800c6bc:	0800c719 	.word	0x0800c719
 800c6c0:	0800c731 	.word	0x0800c731
 800c6c4:	0800c731 	.word	0x0800c731
 800c6c8:	0800c731 	.word	0x0800c731
 800c6cc:	0800c731 	.word	0x0800c731
 800c6d0:	0800c731 	.word	0x0800c731
 800c6d4:	0800c731 	.word	0x0800c731
 800c6d8:	0800c731 	.word	0x0800c731
 800c6dc:	0800c721 	.word	0x0800c721
 800c6e0:	0800c731 	.word	0x0800c731
 800c6e4:	0800c731 	.word	0x0800c731
 800c6e8:	0800c731 	.word	0x0800c731
 800c6ec:	0800c731 	.word	0x0800c731
 800c6f0:	0800c731 	.word	0x0800c731
 800c6f4:	0800c731 	.word	0x0800c731
 800c6f8:	0800c731 	.word	0x0800c731
 800c6fc:	0800c729 	.word	0x0800c729
 800c700:	2301      	movs	r3, #1
 800c702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c706:	e1c0      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c708:	2304      	movs	r3, #4
 800c70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c70e:	e1bc      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c710:	2308      	movs	r3, #8
 800c712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c716:	e1b8      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c718:	2310      	movs	r3, #16
 800c71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c71e:	e1b4      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c720:	2320      	movs	r3, #32
 800c722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c726:	e1b0      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c728:	2340      	movs	r3, #64	; 0x40
 800c72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c72e:	e1ac      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c730:	2380      	movs	r3, #128	; 0x80
 800c732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c736:	e1a8      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a75      	ldr	r2, [pc, #468]	; (800c914 <UART_SetConfig+0x638>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d130      	bne.n	800c7a4 <UART_SetConfig+0x4c8>
 800c742:	4b73      	ldr	r3, [pc, #460]	; (800c910 <UART_SetConfig+0x634>)
 800c744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c746:	f003 0307 	and.w	r3, r3, #7
 800c74a:	2b05      	cmp	r3, #5
 800c74c:	d826      	bhi.n	800c79c <UART_SetConfig+0x4c0>
 800c74e:	a201      	add	r2, pc, #4	; (adr r2, 800c754 <UART_SetConfig+0x478>)
 800c750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c754:	0800c76d 	.word	0x0800c76d
 800c758:	0800c775 	.word	0x0800c775
 800c75c:	0800c77d 	.word	0x0800c77d
 800c760:	0800c785 	.word	0x0800c785
 800c764:	0800c78d 	.word	0x0800c78d
 800c768:	0800c795 	.word	0x0800c795
 800c76c:	2300      	movs	r3, #0
 800c76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c772:	e18a      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c774:	2304      	movs	r3, #4
 800c776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c77a:	e186      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c77c:	2308      	movs	r3, #8
 800c77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c782:	e182      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c784:	2310      	movs	r3, #16
 800c786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c78a:	e17e      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c78c:	2320      	movs	r3, #32
 800c78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c792:	e17a      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c794:	2340      	movs	r3, #64	; 0x40
 800c796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c79a:	e176      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c79c:	2380      	movs	r3, #128	; 0x80
 800c79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7a2:	e172      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a5b      	ldr	r2, [pc, #364]	; (800c918 <UART_SetConfig+0x63c>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d130      	bne.n	800c810 <UART_SetConfig+0x534>
 800c7ae:	4b58      	ldr	r3, [pc, #352]	; (800c910 <UART_SetConfig+0x634>)
 800c7b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7b2:	f003 0307 	and.w	r3, r3, #7
 800c7b6:	2b05      	cmp	r3, #5
 800c7b8:	d826      	bhi.n	800c808 <UART_SetConfig+0x52c>
 800c7ba:	a201      	add	r2, pc, #4	; (adr r2, 800c7c0 <UART_SetConfig+0x4e4>)
 800c7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7c0:	0800c7d9 	.word	0x0800c7d9
 800c7c4:	0800c7e1 	.word	0x0800c7e1
 800c7c8:	0800c7e9 	.word	0x0800c7e9
 800c7cc:	0800c7f1 	.word	0x0800c7f1
 800c7d0:	0800c7f9 	.word	0x0800c7f9
 800c7d4:	0800c801 	.word	0x0800c801
 800c7d8:	2300      	movs	r3, #0
 800c7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7de:	e154      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c7e0:	2304      	movs	r3, #4
 800c7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7e6:	e150      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c7e8:	2308      	movs	r3, #8
 800c7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ee:	e14c      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c7f0:	2310      	movs	r3, #16
 800c7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7f6:	e148      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c7f8:	2320      	movs	r3, #32
 800c7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7fe:	e144      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c800:	2340      	movs	r3, #64	; 0x40
 800c802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c806:	e140      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c808:	2380      	movs	r3, #128	; 0x80
 800c80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c80e:	e13c      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a41      	ldr	r2, [pc, #260]	; (800c91c <UART_SetConfig+0x640>)
 800c816:	4293      	cmp	r3, r2
 800c818:	f040 8082 	bne.w	800c920 <UART_SetConfig+0x644>
 800c81c:	4b3c      	ldr	r3, [pc, #240]	; (800c910 <UART_SetConfig+0x634>)
 800c81e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c820:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c824:	2b28      	cmp	r3, #40	; 0x28
 800c826:	d86d      	bhi.n	800c904 <UART_SetConfig+0x628>
 800c828:	a201      	add	r2, pc, #4	; (adr r2, 800c830 <UART_SetConfig+0x554>)
 800c82a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c82e:	bf00      	nop
 800c830:	0800c8d5 	.word	0x0800c8d5
 800c834:	0800c905 	.word	0x0800c905
 800c838:	0800c905 	.word	0x0800c905
 800c83c:	0800c905 	.word	0x0800c905
 800c840:	0800c905 	.word	0x0800c905
 800c844:	0800c905 	.word	0x0800c905
 800c848:	0800c905 	.word	0x0800c905
 800c84c:	0800c905 	.word	0x0800c905
 800c850:	0800c8dd 	.word	0x0800c8dd
 800c854:	0800c905 	.word	0x0800c905
 800c858:	0800c905 	.word	0x0800c905
 800c85c:	0800c905 	.word	0x0800c905
 800c860:	0800c905 	.word	0x0800c905
 800c864:	0800c905 	.word	0x0800c905
 800c868:	0800c905 	.word	0x0800c905
 800c86c:	0800c905 	.word	0x0800c905
 800c870:	0800c8e5 	.word	0x0800c8e5
 800c874:	0800c905 	.word	0x0800c905
 800c878:	0800c905 	.word	0x0800c905
 800c87c:	0800c905 	.word	0x0800c905
 800c880:	0800c905 	.word	0x0800c905
 800c884:	0800c905 	.word	0x0800c905
 800c888:	0800c905 	.word	0x0800c905
 800c88c:	0800c905 	.word	0x0800c905
 800c890:	0800c8ed 	.word	0x0800c8ed
 800c894:	0800c905 	.word	0x0800c905
 800c898:	0800c905 	.word	0x0800c905
 800c89c:	0800c905 	.word	0x0800c905
 800c8a0:	0800c905 	.word	0x0800c905
 800c8a4:	0800c905 	.word	0x0800c905
 800c8a8:	0800c905 	.word	0x0800c905
 800c8ac:	0800c905 	.word	0x0800c905
 800c8b0:	0800c8f5 	.word	0x0800c8f5
 800c8b4:	0800c905 	.word	0x0800c905
 800c8b8:	0800c905 	.word	0x0800c905
 800c8bc:	0800c905 	.word	0x0800c905
 800c8c0:	0800c905 	.word	0x0800c905
 800c8c4:	0800c905 	.word	0x0800c905
 800c8c8:	0800c905 	.word	0x0800c905
 800c8cc:	0800c905 	.word	0x0800c905
 800c8d0:	0800c8fd 	.word	0x0800c8fd
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8da:	e0d6      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c8dc:	2304      	movs	r3, #4
 800c8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8e2:	e0d2      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c8e4:	2308      	movs	r3, #8
 800c8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ea:	e0ce      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c8ec:	2310      	movs	r3, #16
 800c8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8f2:	e0ca      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c8f4:	2320      	movs	r3, #32
 800c8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8fa:	e0c6      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c8fc:	2340      	movs	r3, #64	; 0x40
 800c8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c902:	e0c2      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c904:	2380      	movs	r3, #128	; 0x80
 800c906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c90a:	e0be      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c90c:	40011400 	.word	0x40011400
 800c910:	58024400 	.word	0x58024400
 800c914:	40007800 	.word	0x40007800
 800c918:	40007c00 	.word	0x40007c00
 800c91c:	40011800 	.word	0x40011800
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	4aad      	ldr	r2, [pc, #692]	; (800cbdc <UART_SetConfig+0x900>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d176      	bne.n	800ca18 <UART_SetConfig+0x73c>
 800c92a:	4bad      	ldr	r3, [pc, #692]	; (800cbe0 <UART_SetConfig+0x904>)
 800c92c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c92e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c932:	2b28      	cmp	r3, #40	; 0x28
 800c934:	d86c      	bhi.n	800ca10 <UART_SetConfig+0x734>
 800c936:	a201      	add	r2, pc, #4	; (adr r2, 800c93c <UART_SetConfig+0x660>)
 800c938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c93c:	0800c9e1 	.word	0x0800c9e1
 800c940:	0800ca11 	.word	0x0800ca11
 800c944:	0800ca11 	.word	0x0800ca11
 800c948:	0800ca11 	.word	0x0800ca11
 800c94c:	0800ca11 	.word	0x0800ca11
 800c950:	0800ca11 	.word	0x0800ca11
 800c954:	0800ca11 	.word	0x0800ca11
 800c958:	0800ca11 	.word	0x0800ca11
 800c95c:	0800c9e9 	.word	0x0800c9e9
 800c960:	0800ca11 	.word	0x0800ca11
 800c964:	0800ca11 	.word	0x0800ca11
 800c968:	0800ca11 	.word	0x0800ca11
 800c96c:	0800ca11 	.word	0x0800ca11
 800c970:	0800ca11 	.word	0x0800ca11
 800c974:	0800ca11 	.word	0x0800ca11
 800c978:	0800ca11 	.word	0x0800ca11
 800c97c:	0800c9f1 	.word	0x0800c9f1
 800c980:	0800ca11 	.word	0x0800ca11
 800c984:	0800ca11 	.word	0x0800ca11
 800c988:	0800ca11 	.word	0x0800ca11
 800c98c:	0800ca11 	.word	0x0800ca11
 800c990:	0800ca11 	.word	0x0800ca11
 800c994:	0800ca11 	.word	0x0800ca11
 800c998:	0800ca11 	.word	0x0800ca11
 800c99c:	0800c9f9 	.word	0x0800c9f9
 800c9a0:	0800ca11 	.word	0x0800ca11
 800c9a4:	0800ca11 	.word	0x0800ca11
 800c9a8:	0800ca11 	.word	0x0800ca11
 800c9ac:	0800ca11 	.word	0x0800ca11
 800c9b0:	0800ca11 	.word	0x0800ca11
 800c9b4:	0800ca11 	.word	0x0800ca11
 800c9b8:	0800ca11 	.word	0x0800ca11
 800c9bc:	0800ca01 	.word	0x0800ca01
 800c9c0:	0800ca11 	.word	0x0800ca11
 800c9c4:	0800ca11 	.word	0x0800ca11
 800c9c8:	0800ca11 	.word	0x0800ca11
 800c9cc:	0800ca11 	.word	0x0800ca11
 800c9d0:	0800ca11 	.word	0x0800ca11
 800c9d4:	0800ca11 	.word	0x0800ca11
 800c9d8:	0800ca11 	.word	0x0800ca11
 800c9dc:	0800ca09 	.word	0x0800ca09
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9e6:	e050      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c9e8:	2304      	movs	r3, #4
 800c9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ee:	e04c      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c9f0:	2308      	movs	r3, #8
 800c9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9f6:	e048      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800c9f8:	2310      	movs	r3, #16
 800c9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9fe:	e044      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800ca00:	2320      	movs	r3, #32
 800ca02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca06:	e040      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800ca08:	2340      	movs	r3, #64	; 0x40
 800ca0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca0e:	e03c      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800ca10:	2380      	movs	r3, #128	; 0x80
 800ca12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca16:	e038      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a71      	ldr	r2, [pc, #452]	; (800cbe4 <UART_SetConfig+0x908>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d130      	bne.n	800ca84 <UART_SetConfig+0x7a8>
 800ca22:	4b6f      	ldr	r3, [pc, #444]	; (800cbe0 <UART_SetConfig+0x904>)
 800ca24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca26:	f003 0307 	and.w	r3, r3, #7
 800ca2a:	2b05      	cmp	r3, #5
 800ca2c:	d826      	bhi.n	800ca7c <UART_SetConfig+0x7a0>
 800ca2e:	a201      	add	r2, pc, #4	; (adr r2, 800ca34 <UART_SetConfig+0x758>)
 800ca30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca34:	0800ca4d 	.word	0x0800ca4d
 800ca38:	0800ca55 	.word	0x0800ca55
 800ca3c:	0800ca5d 	.word	0x0800ca5d
 800ca40:	0800ca65 	.word	0x0800ca65
 800ca44:	0800ca6d 	.word	0x0800ca6d
 800ca48:	0800ca75 	.word	0x0800ca75
 800ca4c:	2302      	movs	r3, #2
 800ca4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca52:	e01a      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800ca54:	2304      	movs	r3, #4
 800ca56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca5a:	e016      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800ca5c:	2308      	movs	r3, #8
 800ca5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca62:	e012      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800ca64:	2310      	movs	r3, #16
 800ca66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca6a:	e00e      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800ca6c:	2320      	movs	r3, #32
 800ca6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca72:	e00a      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800ca74:	2340      	movs	r3, #64	; 0x40
 800ca76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca7a:	e006      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800ca7c:	2380      	movs	r3, #128	; 0x80
 800ca7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca82:	e002      	b.n	800ca8a <UART_SetConfig+0x7ae>
 800ca84:	2380      	movs	r3, #128	; 0x80
 800ca86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4a55      	ldr	r2, [pc, #340]	; (800cbe4 <UART_SetConfig+0x908>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	f040 80f8 	bne.w	800cc86 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ca96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ca9a:	2b20      	cmp	r3, #32
 800ca9c:	dc46      	bgt.n	800cb2c <UART_SetConfig+0x850>
 800ca9e:	2b02      	cmp	r3, #2
 800caa0:	db75      	blt.n	800cb8e <UART_SetConfig+0x8b2>
 800caa2:	3b02      	subs	r3, #2
 800caa4:	2b1e      	cmp	r3, #30
 800caa6:	d872      	bhi.n	800cb8e <UART_SetConfig+0x8b2>
 800caa8:	a201      	add	r2, pc, #4	; (adr r2, 800cab0 <UART_SetConfig+0x7d4>)
 800caaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caae:	bf00      	nop
 800cab0:	0800cb33 	.word	0x0800cb33
 800cab4:	0800cb8f 	.word	0x0800cb8f
 800cab8:	0800cb3b 	.word	0x0800cb3b
 800cabc:	0800cb8f 	.word	0x0800cb8f
 800cac0:	0800cb8f 	.word	0x0800cb8f
 800cac4:	0800cb8f 	.word	0x0800cb8f
 800cac8:	0800cb4b 	.word	0x0800cb4b
 800cacc:	0800cb8f 	.word	0x0800cb8f
 800cad0:	0800cb8f 	.word	0x0800cb8f
 800cad4:	0800cb8f 	.word	0x0800cb8f
 800cad8:	0800cb8f 	.word	0x0800cb8f
 800cadc:	0800cb8f 	.word	0x0800cb8f
 800cae0:	0800cb8f 	.word	0x0800cb8f
 800cae4:	0800cb8f 	.word	0x0800cb8f
 800cae8:	0800cb5b 	.word	0x0800cb5b
 800caec:	0800cb8f 	.word	0x0800cb8f
 800caf0:	0800cb8f 	.word	0x0800cb8f
 800caf4:	0800cb8f 	.word	0x0800cb8f
 800caf8:	0800cb8f 	.word	0x0800cb8f
 800cafc:	0800cb8f 	.word	0x0800cb8f
 800cb00:	0800cb8f 	.word	0x0800cb8f
 800cb04:	0800cb8f 	.word	0x0800cb8f
 800cb08:	0800cb8f 	.word	0x0800cb8f
 800cb0c:	0800cb8f 	.word	0x0800cb8f
 800cb10:	0800cb8f 	.word	0x0800cb8f
 800cb14:	0800cb8f 	.word	0x0800cb8f
 800cb18:	0800cb8f 	.word	0x0800cb8f
 800cb1c:	0800cb8f 	.word	0x0800cb8f
 800cb20:	0800cb8f 	.word	0x0800cb8f
 800cb24:	0800cb8f 	.word	0x0800cb8f
 800cb28:	0800cb81 	.word	0x0800cb81
 800cb2c:	2b40      	cmp	r3, #64	; 0x40
 800cb2e:	d02a      	beq.n	800cb86 <UART_SetConfig+0x8aa>
 800cb30:	e02d      	b.n	800cb8e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cb32:	f7fc ff87 	bl	8009a44 <HAL_RCCEx_GetD3PCLK1Freq>
 800cb36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb38:	e02f      	b.n	800cb9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7fc ff96 	bl	8009a70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb48:	e027      	b.n	800cb9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb4a:	f107 0318 	add.w	r3, r7, #24
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f7fd f8e2 	bl	8009d18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb58:	e01f      	b.n	800cb9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb5a:	4b21      	ldr	r3, [pc, #132]	; (800cbe0 <UART_SetConfig+0x904>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f003 0320 	and.w	r3, r3, #32
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d009      	beq.n	800cb7a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb66:	4b1e      	ldr	r3, [pc, #120]	; (800cbe0 <UART_SetConfig+0x904>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	08db      	lsrs	r3, r3, #3
 800cb6c:	f003 0303 	and.w	r3, r3, #3
 800cb70:	4a1d      	ldr	r2, [pc, #116]	; (800cbe8 <UART_SetConfig+0x90c>)
 800cb72:	fa22 f303 	lsr.w	r3, r2, r3
 800cb76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb78:	e00f      	b.n	800cb9a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cb7a:	4b1b      	ldr	r3, [pc, #108]	; (800cbe8 <UART_SetConfig+0x90c>)
 800cb7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb7e:	e00c      	b.n	800cb9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cb80:	4b1a      	ldr	r3, [pc, #104]	; (800cbec <UART_SetConfig+0x910>)
 800cb82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb84:	e009      	b.n	800cb9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb8c:	e005      	b.n	800cb9a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cb92:	2301      	movs	r3, #1
 800cb94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cb98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cb9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f000 81ee 	beq.w	800cf7e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba6:	4a12      	ldr	r2, [pc, #72]	; (800cbf0 <UART_SetConfig+0x914>)
 800cba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbac:	461a      	mov	r2, r3
 800cbae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbb4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	685a      	ldr	r2, [r3, #4]
 800cbba:	4613      	mov	r3, r2
 800cbbc:	005b      	lsls	r3, r3, #1
 800cbbe:	4413      	add	r3, r2
 800cbc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d305      	bcc.n	800cbd2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cbcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d910      	bls.n	800cbf4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cbd8:	e1d1      	b.n	800cf7e <UART_SetConfig+0xca2>
 800cbda:	bf00      	nop
 800cbdc:	40011c00 	.word	0x40011c00
 800cbe0:	58024400 	.word	0x58024400
 800cbe4:	58000c00 	.word	0x58000c00
 800cbe8:	03d09000 	.word	0x03d09000
 800cbec:	003d0900 	.word	0x003d0900
 800cbf0:	0800e1c0 	.word	0x0800e1c0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	60bb      	str	r3, [r7, #8]
 800cbfa:	60fa      	str	r2, [r7, #12]
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc00:	4ac0      	ldr	r2, [pc, #768]	; (800cf04 <UART_SetConfig+0xc28>)
 800cc02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	2200      	movs	r2, #0
 800cc0a:	603b      	str	r3, [r7, #0]
 800cc0c:	607a      	str	r2, [r7, #4]
 800cc0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cc16:	f7f3 fb83 	bl	8000320 <__aeabi_uldivmod>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	4610      	mov	r0, r2
 800cc20:	4619      	mov	r1, r3
 800cc22:	f04f 0200 	mov.w	r2, #0
 800cc26:	f04f 0300 	mov.w	r3, #0
 800cc2a:	020b      	lsls	r3, r1, #8
 800cc2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cc30:	0202      	lsls	r2, r0, #8
 800cc32:	6979      	ldr	r1, [r7, #20]
 800cc34:	6849      	ldr	r1, [r1, #4]
 800cc36:	0849      	lsrs	r1, r1, #1
 800cc38:	2000      	movs	r0, #0
 800cc3a:	460c      	mov	r4, r1
 800cc3c:	4605      	mov	r5, r0
 800cc3e:	eb12 0804 	adds.w	r8, r2, r4
 800cc42:	eb43 0905 	adc.w	r9, r3, r5
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	469a      	mov	sl, r3
 800cc4e:	4693      	mov	fp, r2
 800cc50:	4652      	mov	r2, sl
 800cc52:	465b      	mov	r3, fp
 800cc54:	4640      	mov	r0, r8
 800cc56:	4649      	mov	r1, r9
 800cc58:	f7f3 fb62 	bl	8000320 <__aeabi_uldivmod>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	460b      	mov	r3, r1
 800cc60:	4613      	mov	r3, r2
 800cc62:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc6a:	d308      	bcc.n	800cc7e <UART_SetConfig+0x9a2>
 800cc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc72:	d204      	bcs.n	800cc7e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc7a:	60da      	str	r2, [r3, #12]
 800cc7c:	e17f      	b.n	800cf7e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cc84:	e17b      	b.n	800cf7e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	69db      	ldr	r3, [r3, #28]
 800cc8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc8e:	f040 80bd 	bne.w	800ce0c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800cc92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cc96:	2b20      	cmp	r3, #32
 800cc98:	dc48      	bgt.n	800cd2c <UART_SetConfig+0xa50>
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	db7b      	blt.n	800cd96 <UART_SetConfig+0xaba>
 800cc9e:	2b20      	cmp	r3, #32
 800cca0:	d879      	bhi.n	800cd96 <UART_SetConfig+0xaba>
 800cca2:	a201      	add	r2, pc, #4	; (adr r2, 800cca8 <UART_SetConfig+0x9cc>)
 800cca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca8:	0800cd33 	.word	0x0800cd33
 800ccac:	0800cd3b 	.word	0x0800cd3b
 800ccb0:	0800cd97 	.word	0x0800cd97
 800ccb4:	0800cd97 	.word	0x0800cd97
 800ccb8:	0800cd43 	.word	0x0800cd43
 800ccbc:	0800cd97 	.word	0x0800cd97
 800ccc0:	0800cd97 	.word	0x0800cd97
 800ccc4:	0800cd97 	.word	0x0800cd97
 800ccc8:	0800cd53 	.word	0x0800cd53
 800cccc:	0800cd97 	.word	0x0800cd97
 800ccd0:	0800cd97 	.word	0x0800cd97
 800ccd4:	0800cd97 	.word	0x0800cd97
 800ccd8:	0800cd97 	.word	0x0800cd97
 800ccdc:	0800cd97 	.word	0x0800cd97
 800cce0:	0800cd97 	.word	0x0800cd97
 800cce4:	0800cd97 	.word	0x0800cd97
 800cce8:	0800cd63 	.word	0x0800cd63
 800ccec:	0800cd97 	.word	0x0800cd97
 800ccf0:	0800cd97 	.word	0x0800cd97
 800ccf4:	0800cd97 	.word	0x0800cd97
 800ccf8:	0800cd97 	.word	0x0800cd97
 800ccfc:	0800cd97 	.word	0x0800cd97
 800cd00:	0800cd97 	.word	0x0800cd97
 800cd04:	0800cd97 	.word	0x0800cd97
 800cd08:	0800cd97 	.word	0x0800cd97
 800cd0c:	0800cd97 	.word	0x0800cd97
 800cd10:	0800cd97 	.word	0x0800cd97
 800cd14:	0800cd97 	.word	0x0800cd97
 800cd18:	0800cd97 	.word	0x0800cd97
 800cd1c:	0800cd97 	.word	0x0800cd97
 800cd20:	0800cd97 	.word	0x0800cd97
 800cd24:	0800cd97 	.word	0x0800cd97
 800cd28:	0800cd89 	.word	0x0800cd89
 800cd2c:	2b40      	cmp	r3, #64	; 0x40
 800cd2e:	d02e      	beq.n	800cd8e <UART_SetConfig+0xab2>
 800cd30:	e031      	b.n	800cd96 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd32:	f7fb ff61 	bl	8008bf8 <HAL_RCC_GetPCLK1Freq>
 800cd36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd38:	e033      	b.n	800cda2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd3a:	f7fb ff73 	bl	8008c24 <HAL_RCC_GetPCLK2Freq>
 800cd3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd40:	e02f      	b.n	800cda2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7fc fe92 	bl	8009a70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd50:	e027      	b.n	800cda2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd52:	f107 0318 	add.w	r3, r7, #24
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7fc ffde 	bl	8009d18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd5c:	69fb      	ldr	r3, [r7, #28]
 800cd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd60:	e01f      	b.n	800cda2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd62:	4b69      	ldr	r3, [pc, #420]	; (800cf08 <UART_SetConfig+0xc2c>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f003 0320 	and.w	r3, r3, #32
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d009      	beq.n	800cd82 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd6e:	4b66      	ldr	r3, [pc, #408]	; (800cf08 <UART_SetConfig+0xc2c>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	08db      	lsrs	r3, r3, #3
 800cd74:	f003 0303 	and.w	r3, r3, #3
 800cd78:	4a64      	ldr	r2, [pc, #400]	; (800cf0c <UART_SetConfig+0xc30>)
 800cd7a:	fa22 f303 	lsr.w	r3, r2, r3
 800cd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd80:	e00f      	b.n	800cda2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800cd82:	4b62      	ldr	r3, [pc, #392]	; (800cf0c <UART_SetConfig+0xc30>)
 800cd84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd86:	e00c      	b.n	800cda2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd88:	4b61      	ldr	r3, [pc, #388]	; (800cf10 <UART_SetConfig+0xc34>)
 800cd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd8c:	e009      	b.n	800cda2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd94:	e005      	b.n	800cda2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800cd96:	2300      	movs	r3, #0
 800cd98:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cda0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cda2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	f000 80ea 	beq.w	800cf7e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdae:	4a55      	ldr	r2, [pc, #340]	; (800cf04 <UART_SetConfig+0xc28>)
 800cdb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800cdbc:	005a      	lsls	r2, r3, #1
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	085b      	lsrs	r3, r3, #1
 800cdc4:	441a      	add	r2, r3
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd2:	2b0f      	cmp	r3, #15
 800cdd4:	d916      	bls.n	800ce04 <UART_SetConfig+0xb28>
 800cdd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cddc:	d212      	bcs.n	800ce04 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde0:	b29b      	uxth	r3, r3
 800cde2:	f023 030f 	bic.w	r3, r3, #15
 800cde6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdea:	085b      	lsrs	r3, r3, #1
 800cdec:	b29b      	uxth	r3, r3
 800cdee:	f003 0307 	and.w	r3, r3, #7
 800cdf2:	b29a      	uxth	r2, r3
 800cdf4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ce00:	60da      	str	r2, [r3, #12]
 800ce02:	e0bc      	b.n	800cf7e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ce04:	2301      	movs	r3, #1
 800ce06:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ce0a:	e0b8      	b.n	800cf7e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ce0c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ce10:	2b20      	cmp	r3, #32
 800ce12:	dc4b      	bgt.n	800ceac <UART_SetConfig+0xbd0>
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	f2c0 8087 	blt.w	800cf28 <UART_SetConfig+0xc4c>
 800ce1a:	2b20      	cmp	r3, #32
 800ce1c:	f200 8084 	bhi.w	800cf28 <UART_SetConfig+0xc4c>
 800ce20:	a201      	add	r2, pc, #4	; (adr r2, 800ce28 <UART_SetConfig+0xb4c>)
 800ce22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce26:	bf00      	nop
 800ce28:	0800ceb3 	.word	0x0800ceb3
 800ce2c:	0800cebb 	.word	0x0800cebb
 800ce30:	0800cf29 	.word	0x0800cf29
 800ce34:	0800cf29 	.word	0x0800cf29
 800ce38:	0800cec3 	.word	0x0800cec3
 800ce3c:	0800cf29 	.word	0x0800cf29
 800ce40:	0800cf29 	.word	0x0800cf29
 800ce44:	0800cf29 	.word	0x0800cf29
 800ce48:	0800ced3 	.word	0x0800ced3
 800ce4c:	0800cf29 	.word	0x0800cf29
 800ce50:	0800cf29 	.word	0x0800cf29
 800ce54:	0800cf29 	.word	0x0800cf29
 800ce58:	0800cf29 	.word	0x0800cf29
 800ce5c:	0800cf29 	.word	0x0800cf29
 800ce60:	0800cf29 	.word	0x0800cf29
 800ce64:	0800cf29 	.word	0x0800cf29
 800ce68:	0800cee3 	.word	0x0800cee3
 800ce6c:	0800cf29 	.word	0x0800cf29
 800ce70:	0800cf29 	.word	0x0800cf29
 800ce74:	0800cf29 	.word	0x0800cf29
 800ce78:	0800cf29 	.word	0x0800cf29
 800ce7c:	0800cf29 	.word	0x0800cf29
 800ce80:	0800cf29 	.word	0x0800cf29
 800ce84:	0800cf29 	.word	0x0800cf29
 800ce88:	0800cf29 	.word	0x0800cf29
 800ce8c:	0800cf29 	.word	0x0800cf29
 800ce90:	0800cf29 	.word	0x0800cf29
 800ce94:	0800cf29 	.word	0x0800cf29
 800ce98:	0800cf29 	.word	0x0800cf29
 800ce9c:	0800cf29 	.word	0x0800cf29
 800cea0:	0800cf29 	.word	0x0800cf29
 800cea4:	0800cf29 	.word	0x0800cf29
 800cea8:	0800cf1b 	.word	0x0800cf1b
 800ceac:	2b40      	cmp	r3, #64	; 0x40
 800ceae:	d037      	beq.n	800cf20 <UART_SetConfig+0xc44>
 800ceb0:	e03a      	b.n	800cf28 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ceb2:	f7fb fea1 	bl	8008bf8 <HAL_RCC_GetPCLK1Freq>
 800ceb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ceb8:	e03c      	b.n	800cf34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ceba:	f7fb feb3 	bl	8008c24 <HAL_RCC_GetPCLK2Freq>
 800cebe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cec0:	e038      	b.n	800cf34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fc fdd2 	bl	8009a70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cece:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ced0:	e030      	b.n	800cf34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ced2:	f107 0318 	add.w	r3, r7, #24
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7fc ff1e 	bl	8009d18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cedc:	69fb      	ldr	r3, [r7, #28]
 800cede:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cee0:	e028      	b.n	800cf34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cee2:	4b09      	ldr	r3, [pc, #36]	; (800cf08 <UART_SetConfig+0xc2c>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f003 0320 	and.w	r3, r3, #32
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d012      	beq.n	800cf14 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ceee:	4b06      	ldr	r3, [pc, #24]	; (800cf08 <UART_SetConfig+0xc2c>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	08db      	lsrs	r3, r3, #3
 800cef4:	f003 0303 	and.w	r3, r3, #3
 800cef8:	4a04      	ldr	r2, [pc, #16]	; (800cf0c <UART_SetConfig+0xc30>)
 800cefa:	fa22 f303 	lsr.w	r3, r2, r3
 800cefe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cf00:	e018      	b.n	800cf34 <UART_SetConfig+0xc58>
 800cf02:	bf00      	nop
 800cf04:	0800e1c0 	.word	0x0800e1c0
 800cf08:	58024400 	.word	0x58024400
 800cf0c:	03d09000 	.word	0x03d09000
 800cf10:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800cf14:	4b24      	ldr	r3, [pc, #144]	; (800cfa8 <UART_SetConfig+0xccc>)
 800cf16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf18:	e00c      	b.n	800cf34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cf1a:	4b24      	ldr	r3, [pc, #144]	; (800cfac <UART_SetConfig+0xcd0>)
 800cf1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf1e:	e009      	b.n	800cf34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf26:	e005      	b.n	800cf34 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cf32:	bf00      	nop
    }

    if (pclk != 0U)
 800cf34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d021      	beq.n	800cf7e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf3e:	4a1c      	ldr	r2, [pc, #112]	; (800cfb0 <UART_SetConfig+0xcd4>)
 800cf40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf44:	461a      	mov	r2, r3
 800cf46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf48:	fbb3 f2f2 	udiv	r2, r3, r2
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	085b      	lsrs	r3, r3, #1
 800cf52:	441a      	add	r2, r3
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	685b      	ldr	r3, [r3, #4]
 800cf58:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf5c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf60:	2b0f      	cmp	r3, #15
 800cf62:	d909      	bls.n	800cf78 <UART_SetConfig+0xc9c>
 800cf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf6a:	d205      	bcs.n	800cf78 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cf6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6e:	b29a      	uxth	r2, r3
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	60da      	str	r2, [r3, #12]
 800cf76:	e002      	b.n	800cf7e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cf78:	2301      	movs	r3, #1
 800cf7a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	2201      	movs	r2, #1
 800cf82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	2201      	movs	r2, #1
 800cf8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	2200      	movs	r2, #0
 800cf92:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	2200      	movs	r2, #0
 800cf98:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cf9a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3748      	adds	r7, #72	; 0x48
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cfa8:	03d09000 	.word	0x03d09000
 800cfac:	003d0900 	.word	0x003d0900
 800cfb0:	0800e1c0 	.word	0x0800e1c0

0800cfb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfc0:	f003 0301 	and.w	r3, r3, #1
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d00a      	beq.n	800cfde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	430a      	orrs	r2, r1
 800cfdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfe2:	f003 0302 	and.w	r3, r3, #2
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d00a      	beq.n	800d000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	685b      	ldr	r3, [r3, #4]
 800cff0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	430a      	orrs	r2, r1
 800cffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d004:	f003 0304 	and.w	r3, r3, #4
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d00a      	beq.n	800d022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	430a      	orrs	r2, r1
 800d020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d026:	f003 0308 	and.w	r3, r3, #8
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00a      	beq.n	800d044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	430a      	orrs	r2, r1
 800d042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d048:	f003 0310 	and.w	r3, r3, #16
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d00a      	beq.n	800d066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	689b      	ldr	r3, [r3, #8]
 800d056:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	430a      	orrs	r2, r1
 800d064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d06a:	f003 0320 	and.w	r3, r3, #32
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00a      	beq.n	800d088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	689b      	ldr	r3, [r3, #8]
 800d078:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	430a      	orrs	r2, r1
 800d086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d08c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d090:	2b00      	cmp	r3, #0
 800d092:	d01a      	beq.n	800d0ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	430a      	orrs	r2, r1
 800d0a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d0b2:	d10a      	bne.n	800d0ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	430a      	orrs	r2, r1
 800d0c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d00a      	beq.n	800d0ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	430a      	orrs	r2, r1
 800d0ea:	605a      	str	r2, [r3, #4]
  }
}
 800d0ec:	bf00      	nop
 800d0ee:	370c      	adds	r7, #12
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr

0800d0f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b086      	sub	sp, #24
 800d0fc:	af02      	add	r7, sp, #8
 800d0fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2200      	movs	r2, #0
 800d104:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d108:	f7f7 fd16 	bl	8004b38 <HAL_GetTick>
 800d10c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f003 0308 	and.w	r3, r3, #8
 800d118:	2b08      	cmp	r3, #8
 800d11a:	d10e      	bne.n	800d13a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d11c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d120:	9300      	str	r3, [sp, #0]
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2200      	movs	r2, #0
 800d126:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f000 f82f 	bl	800d18e <UART_WaitOnFlagUntilTimeout>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d001      	beq.n	800d13a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d136:	2303      	movs	r3, #3
 800d138:	e025      	b.n	800d186 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f003 0304 	and.w	r3, r3, #4
 800d144:	2b04      	cmp	r3, #4
 800d146:	d10e      	bne.n	800d166 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d14c:	9300      	str	r3, [sp, #0]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2200      	movs	r2, #0
 800d152:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 f819 	bl	800d18e <UART_WaitOnFlagUntilTimeout>
 800d15c:	4603      	mov	r3, r0
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d001      	beq.n	800d166 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d162:	2303      	movs	r3, #3
 800d164:	e00f      	b.n	800d186 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2220      	movs	r2, #32
 800d16a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2220      	movs	r2, #32
 800d172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2200      	movs	r2, #0
 800d180:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d184:	2300      	movs	r3, #0
}
 800d186:	4618      	mov	r0, r3
 800d188:	3710      	adds	r7, #16
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}

0800d18e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d18e:	b580      	push	{r7, lr}
 800d190:	b09c      	sub	sp, #112	; 0x70
 800d192:	af00      	add	r7, sp, #0
 800d194:	60f8      	str	r0, [r7, #12]
 800d196:	60b9      	str	r1, [r7, #8]
 800d198:	603b      	str	r3, [r7, #0]
 800d19a:	4613      	mov	r3, r2
 800d19c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d19e:	e0a9      	b.n	800d2f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d1a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1a6:	f000 80a5 	beq.w	800d2f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d1aa:	f7f7 fcc5 	bl	8004b38 <HAL_GetTick>
 800d1ae:	4602      	mov	r2, r0
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	1ad3      	subs	r3, r2, r3
 800d1b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d302      	bcc.n	800d1c0 <UART_WaitOnFlagUntilTimeout+0x32>
 800d1ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d140      	bne.n	800d242 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1c8:	e853 3f00 	ldrex	r3, [r3]
 800d1cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d1ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d1d4:	667b      	str	r3, [r7, #100]	; 0x64
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	461a      	mov	r2, r3
 800d1dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d1e0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d1e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d1e6:	e841 2300 	strex	r3, r2, [r1]
 800d1ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d1ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d1e6      	bne.n	800d1c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	3308      	adds	r3, #8
 800d1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1fc:	e853 3f00 	ldrex	r3, [r3]
 800d200:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d204:	f023 0301 	bic.w	r3, r3, #1
 800d208:	663b      	str	r3, [r7, #96]	; 0x60
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	3308      	adds	r3, #8
 800d210:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d212:	64ba      	str	r2, [r7, #72]	; 0x48
 800d214:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d216:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d21a:	e841 2300 	strex	r3, r2, [r1]
 800d21e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d222:	2b00      	cmp	r3, #0
 800d224:	d1e5      	bne.n	800d1f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2220      	movs	r2, #32
 800d22a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2220      	movs	r2, #32
 800d232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2200      	movs	r2, #0
 800d23a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d23e:	2303      	movs	r3, #3
 800d240:	e069      	b.n	800d316 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f003 0304 	and.w	r3, r3, #4
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d051      	beq.n	800d2f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	69db      	ldr	r3, [r3, #28]
 800d256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d25a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d25e:	d149      	bne.n	800d2f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d268:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d272:	e853 3f00 	ldrex	r3, [r3]
 800d276:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d27e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	461a      	mov	r2, r3
 800d286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d288:	637b      	str	r3, [r7, #52]	; 0x34
 800d28a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d28c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d28e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d290:	e841 2300 	strex	r3, r2, [r1]
 800d294:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d1e6      	bne.n	800d26a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	3308      	adds	r3, #8
 800d2a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	e853 3f00 	ldrex	r3, [r3]
 800d2aa:	613b      	str	r3, [r7, #16]
   return(result);
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	f023 0301 	bic.w	r3, r3, #1
 800d2b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	3308      	adds	r3, #8
 800d2ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d2bc:	623a      	str	r2, [r7, #32]
 800d2be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2c0:	69f9      	ldr	r1, [r7, #28]
 800d2c2:	6a3a      	ldr	r2, [r7, #32]
 800d2c4:	e841 2300 	strex	r3, r2, [r1]
 800d2c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d2ca:	69bb      	ldr	r3, [r7, #24]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d1e5      	bne.n	800d29c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	2220      	movs	r2, #32
 800d2d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2220      	movs	r2, #32
 800d2dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	2220      	movs	r2, #32
 800d2e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d2f0:	2303      	movs	r3, #3
 800d2f2:	e010      	b.n	800d316 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	69da      	ldr	r2, [r3, #28]
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	4013      	ands	r3, r2
 800d2fe:	68ba      	ldr	r2, [r7, #8]
 800d300:	429a      	cmp	r2, r3
 800d302:	bf0c      	ite	eq
 800d304:	2301      	moveq	r3, #1
 800d306:	2300      	movne	r3, #0
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	461a      	mov	r2, r3
 800d30c:	79fb      	ldrb	r3, [r7, #7]
 800d30e:	429a      	cmp	r2, r3
 800d310:	f43f af46 	beq.w	800d1a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d314:	2300      	movs	r3, #0
}
 800d316:	4618      	mov	r0, r3
 800d318:	3770      	adds	r7, #112	; 0x70
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
	...

0800d320 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b096      	sub	sp, #88	; 0x58
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	4613      	mov	r3, r2
 800d32c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	68ba      	ldr	r2, [r7, #8]
 800d332:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	88fa      	ldrh	r2, [r7, #6]
 800d338:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2200      	movs	r2, #0
 800d340:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	2222      	movs	r2, #34	; 0x22
 800d348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d350:	2b00      	cmp	r3, #0
 800d352:	d02c      	beq.n	800d3ae <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d358:	4a42      	ldr	r2, [pc, #264]	; (800d464 <UART_Start_Receive_DMA+0x144>)
 800d35a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d360:	4a41      	ldr	r2, [pc, #260]	; (800d468 <UART_Start_Receive_DMA+0x148>)
 800d362:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d368:	4a40      	ldr	r2, [pc, #256]	; (800d46c <UART_Start_Receive_DMA+0x14c>)
 800d36a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d370:	2200      	movs	r2, #0
 800d372:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	3324      	adds	r3, #36	; 0x24
 800d37e:	4619      	mov	r1, r3
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d384:	461a      	mov	r2, r3
 800d386:	88fb      	ldrh	r3, [r7, #6]
 800d388:	f7f8 f84c 	bl	8005424 <HAL_DMA_Start_IT>
 800d38c:	4603      	mov	r3, r0
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d00d      	beq.n	800d3ae <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2210      	movs	r2, #16
 800d396:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2200      	movs	r2, #0
 800d39e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2220      	movs	r2, #32
 800d3a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	e055      	b.n	800d45a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	691b      	ldr	r3, [r3, #16]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d018      	beq.n	800d3f0 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3c6:	e853 3f00 	ldrex	r3, [r3]
 800d3ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3d2:	657b      	str	r3, [r7, #84]	; 0x54
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	461a      	mov	r2, r3
 800d3da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3de:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d3e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3e4:	e841 2300 	strex	r3, r2, [r1]
 800d3e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d3ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d1e6      	bne.n	800d3be <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	3308      	adds	r3, #8
 800d3f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fa:	e853 3f00 	ldrex	r3, [r3]
 800d3fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d402:	f043 0301 	orr.w	r3, r3, #1
 800d406:	653b      	str	r3, [r7, #80]	; 0x50
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	3308      	adds	r3, #8
 800d40e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d410:	637a      	str	r2, [r7, #52]	; 0x34
 800d412:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d414:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d418:	e841 2300 	strex	r3, r2, [r1]
 800d41c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d420:	2b00      	cmp	r3, #0
 800d422:	d1e5      	bne.n	800d3f0 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	3308      	adds	r3, #8
 800d42a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	e853 3f00 	ldrex	r3, [r3]
 800d432:	613b      	str	r3, [r7, #16]
   return(result);
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d43a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	3308      	adds	r3, #8
 800d442:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d444:	623a      	str	r2, [r7, #32]
 800d446:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d448:	69f9      	ldr	r1, [r7, #28]
 800d44a:	6a3a      	ldr	r2, [r7, #32]
 800d44c:	e841 2300 	strex	r3, r2, [r1]
 800d450:	61bb      	str	r3, [r7, #24]
   return(result);
 800d452:	69bb      	ldr	r3, [r7, #24]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d1e5      	bne.n	800d424 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d458:	2300      	movs	r3, #0
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3758      	adds	r7, #88	; 0x58
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop
 800d464:	0800d673 	.word	0x0800d673
 800d468:	0800d795 	.word	0x0800d795
 800d46c:	0800d7cd 	.word	0x0800d7cd

0800d470 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d470:	b480      	push	{r7}
 800d472:	b08f      	sub	sp, #60	; 0x3c
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d47e:	6a3b      	ldr	r3, [r7, #32]
 800d480:	e853 3f00 	ldrex	r3, [r3]
 800d484:	61fb      	str	r3, [r7, #28]
   return(result);
 800d486:	69fb      	ldr	r3, [r7, #28]
 800d488:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d48c:	637b      	str	r3, [r7, #52]	; 0x34
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	461a      	mov	r2, r3
 800d494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d496:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d498:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d49a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d49c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d49e:	e841 2300 	strex	r3, r2, [r1]
 800d4a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d1e6      	bne.n	800d478 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	3308      	adds	r3, #8
 800d4b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	e853 3f00 	ldrex	r3, [r3]
 800d4b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d4c0:	633b      	str	r3, [r7, #48]	; 0x30
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	3308      	adds	r3, #8
 800d4c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4ca:	61ba      	str	r2, [r7, #24]
 800d4cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ce:	6979      	ldr	r1, [r7, #20]
 800d4d0:	69ba      	ldr	r2, [r7, #24]
 800d4d2:	e841 2300 	strex	r3, r2, [r1]
 800d4d6:	613b      	str	r3, [r7, #16]
   return(result);
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d1e5      	bne.n	800d4aa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2220      	movs	r2, #32
 800d4e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d4e6:	bf00      	nop
 800d4e8:	373c      	adds	r7, #60	; 0x3c
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f0:	4770      	bx	lr
	...

0800d4f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b095      	sub	sp, #84	; 0x54
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d504:	e853 3f00 	ldrex	r3, [r3]
 800d508:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d510:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	461a      	mov	r2, r3
 800d518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d51a:	643b      	str	r3, [r7, #64]	; 0x40
 800d51c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d51e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d520:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d522:	e841 2300 	strex	r3, r2, [r1]
 800d526:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d1e6      	bne.n	800d4fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	3308      	adds	r3, #8
 800d534:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d536:	6a3b      	ldr	r3, [r7, #32]
 800d538:	e853 3f00 	ldrex	r3, [r3]
 800d53c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d53e:	69fa      	ldr	r2, [r7, #28]
 800d540:	4b1e      	ldr	r3, [pc, #120]	; (800d5bc <UART_EndRxTransfer+0xc8>)
 800d542:	4013      	ands	r3, r2
 800d544:	64bb      	str	r3, [r7, #72]	; 0x48
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	3308      	adds	r3, #8
 800d54c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d54e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d550:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d552:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d556:	e841 2300 	strex	r3, r2, [r1]
 800d55a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d1e5      	bne.n	800d52e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d566:	2b01      	cmp	r3, #1
 800d568:	d118      	bne.n	800d59c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	e853 3f00 	ldrex	r3, [r3]
 800d576:	60bb      	str	r3, [r7, #8]
   return(result);
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	f023 0310 	bic.w	r3, r3, #16
 800d57e:	647b      	str	r3, [r7, #68]	; 0x44
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	461a      	mov	r2, r3
 800d586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d588:	61bb      	str	r3, [r7, #24]
 800d58a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d58c:	6979      	ldr	r1, [r7, #20]
 800d58e:	69ba      	ldr	r2, [r7, #24]
 800d590:	e841 2300 	strex	r3, r2, [r1]
 800d594:	613b      	str	r3, [r7, #16]
   return(result);
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d1e6      	bne.n	800d56a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2220      	movs	r2, #32
 800d5a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d5b0:	bf00      	nop
 800d5b2:	3754      	adds	r7, #84	; 0x54
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr
 800d5bc:	effffffe 	.word	0xeffffffe

0800d5c0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b090      	sub	sp, #64	; 0x40
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5cc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	69db      	ldr	r3, [r3, #28]
 800d5d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5d6:	d037      	beq.n	800d648 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d5d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5da:	2200      	movs	r2, #0
 800d5dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	3308      	adds	r3, #8
 800d5e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ea:	e853 3f00 	ldrex	r3, [r3]
 800d5ee:	623b      	str	r3, [r7, #32]
   return(result);
 800d5f0:	6a3b      	ldr	r3, [r7, #32]
 800d5f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800d5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	3308      	adds	r3, #8
 800d5fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d600:	633a      	str	r2, [r7, #48]	; 0x30
 800d602:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d604:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d608:	e841 2300 	strex	r3, r2, [r1]
 800d60c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d610:	2b00      	cmp	r3, #0
 800d612:	d1e5      	bne.n	800d5e0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	e853 3f00 	ldrex	r3, [r3]
 800d620:	60fb      	str	r3, [r7, #12]
   return(result);
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d628:	637b      	str	r3, [r7, #52]	; 0x34
 800d62a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	461a      	mov	r2, r3
 800d630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d632:	61fb      	str	r3, [r7, #28]
 800d634:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d636:	69b9      	ldr	r1, [r7, #24]
 800d638:	69fa      	ldr	r2, [r7, #28]
 800d63a:	e841 2300 	strex	r3, r2, [r1]
 800d63e:	617b      	str	r3, [r7, #20]
   return(result);
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d1e6      	bne.n	800d614 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d646:	e002      	b.n	800d64e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d648:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d64a:	f7f5 fddf 	bl	800320c <HAL_UART_TxCpltCallback>
}
 800d64e:	bf00      	nop
 800d650:	3740      	adds	r7, #64	; 0x40
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}

0800d656 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d656:	b580      	push	{r7, lr}
 800d658:	b084      	sub	sp, #16
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d662:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d664:	68f8      	ldr	r0, [r7, #12]
 800d666:	f7fe fe0f 	bl	800c288 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d66a:	bf00      	nop
 800d66c:	3710      	adds	r7, #16
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}

0800d672 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d672:	b580      	push	{r7, lr}
 800d674:	b09c      	sub	sp, #112	; 0x70
 800d676:	af00      	add	r7, sp, #0
 800d678:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d67e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	69db      	ldr	r3, [r3, #28]
 800d684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d688:	d071      	beq.n	800d76e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d68a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d68c:	2200      	movs	r2, #0
 800d68e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d69a:	e853 3f00 	ldrex	r3, [r3]
 800d69e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d6a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d6a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800d6a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	461a      	mov	r2, r3
 800d6ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d6b0:	65bb      	str	r3, [r7, #88]	; 0x58
 800d6b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d6b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d6b8:	e841 2300 	strex	r3, r2, [r1]
 800d6bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d6be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d1e6      	bne.n	800d692 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	3308      	adds	r3, #8
 800d6ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ce:	e853 3f00 	ldrex	r3, [r3]
 800d6d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d6d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6d6:	f023 0301 	bic.w	r3, r3, #1
 800d6da:	667b      	str	r3, [r7, #100]	; 0x64
 800d6dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	3308      	adds	r3, #8
 800d6e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d6e4:	647a      	str	r2, [r7, #68]	; 0x44
 800d6e6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d6ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d6ec:	e841 2300 	strex	r3, r2, [r1]
 800d6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d6f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d1e5      	bne.n	800d6c4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d6f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	3308      	adds	r3, #8
 800d6fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d702:	e853 3f00 	ldrex	r3, [r3]
 800d706:	623b      	str	r3, [r7, #32]
   return(result);
 800d708:	6a3b      	ldr	r3, [r7, #32]
 800d70a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d70e:	663b      	str	r3, [r7, #96]	; 0x60
 800d710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	3308      	adds	r3, #8
 800d716:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d718:	633a      	str	r2, [r7, #48]	; 0x30
 800d71a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d71c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d71e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d720:	e841 2300 	strex	r3, r2, [r1]
 800d724:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d1e5      	bne.n	800d6f8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d72c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d72e:	2220      	movs	r2, #32
 800d730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d738:	2b01      	cmp	r3, #1
 800d73a:	d118      	bne.n	800d76e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d73c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	e853 3f00 	ldrex	r3, [r3]
 800d748:	60fb      	str	r3, [r7, #12]
   return(result);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	f023 0310 	bic.w	r3, r3, #16
 800d750:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	461a      	mov	r2, r3
 800d758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d75a:	61fb      	str	r3, [r7, #28]
 800d75c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d75e:	69b9      	ldr	r1, [r7, #24]
 800d760:	69fa      	ldr	r2, [r7, #28]
 800d762:	e841 2300 	strex	r3, r2, [r1]
 800d766:	617b      	str	r3, [r7, #20]
   return(result);
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d1e6      	bne.n	800d73c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d76e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d772:	2b01      	cmp	r3, #1
 800d774:	d107      	bne.n	800d786 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d778:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d77c:	4619      	mov	r1, r3
 800d77e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d780:	f7fe fda0 	bl	800c2c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d784:	e002      	b.n	800d78c <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800d786:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d788:	f7f5 fd52 	bl	8003230 <HAL_UART_RxCpltCallback>
}
 800d78c:	bf00      	nop
 800d78e:	3770      	adds	r7, #112	; 0x70
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7a6:	2b01      	cmp	r3, #1
 800d7a8:	d109      	bne.n	800d7be <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d7b0:	085b      	lsrs	r3, r3, #1
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	68f8      	ldr	r0, [r7, #12]
 800d7b8:	f7fe fd84 	bl	800c2c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d7bc:	e002      	b.n	800d7c4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d7be:	68f8      	ldr	r0, [r7, #12]
 800d7c0:	f7fe fd6c 	bl	800c29c <HAL_UART_RxHalfCpltCallback>
}
 800d7c4:	bf00      	nop
 800d7c6:	3710      	adds	r7, #16
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b086      	sub	sp, #24
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7e0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7e8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	689b      	ldr	r3, [r3, #8]
 800d7f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7f4:	2b80      	cmp	r3, #128	; 0x80
 800d7f6:	d109      	bne.n	800d80c <UART_DMAError+0x40>
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	2b21      	cmp	r3, #33	; 0x21
 800d7fc:	d106      	bne.n	800d80c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	2200      	movs	r2, #0
 800d802:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d806:	6978      	ldr	r0, [r7, #20]
 800d808:	f7ff fe32 	bl	800d470 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	689b      	ldr	r3, [r3, #8]
 800d812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d816:	2b40      	cmp	r3, #64	; 0x40
 800d818:	d109      	bne.n	800d82e <UART_DMAError+0x62>
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	2b22      	cmp	r3, #34	; 0x22
 800d81e:	d106      	bne.n	800d82e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	2200      	movs	r2, #0
 800d824:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d828:	6978      	ldr	r0, [r7, #20]
 800d82a:	f7ff fe63 	bl	800d4f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d834:	f043 0210 	orr.w	r2, r3, #16
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d83e:	6978      	ldr	r0, [r7, #20]
 800d840:	f7fe fd36 	bl	800c2b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d844:	bf00      	nop
 800d846:	3718      	adds	r7, #24
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}

0800d84c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b084      	sub	sp, #16
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d858:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	2200      	movs	r2, #0
 800d85e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2200      	movs	r2, #0
 800d866:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d86a:	68f8      	ldr	r0, [r7, #12]
 800d86c:	f7fe fd20 	bl	800c2b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d870:	bf00      	nop
 800d872:	3710      	adds	r7, #16
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b088      	sub	sp, #32
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	e853 3f00 	ldrex	r3, [r3]
 800d88c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d894:	61fb      	str	r3, [r7, #28]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	461a      	mov	r2, r3
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	61bb      	str	r3, [r7, #24]
 800d8a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8a2:	6979      	ldr	r1, [r7, #20]
 800d8a4:	69ba      	ldr	r2, [r7, #24]
 800d8a6:	e841 2300 	strex	r3, r2, [r1]
 800d8aa:	613b      	str	r3, [r7, #16]
   return(result);
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d1e6      	bne.n	800d880 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2220      	movs	r2, #32
 800d8b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f7f5 fca3 	bl	800320c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d8c6:	bf00      	nop
 800d8c8:	3720      	adds	r7, #32
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}

0800d8ce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d8ce:	b480      	push	{r7}
 800d8d0:	b083      	sub	sp, #12
 800d8d2:	af00      	add	r7, sp, #0
 800d8d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d8d6:	bf00      	nop
 800d8d8:	370c      	adds	r7, #12
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e0:	4770      	bx	lr

0800d8e2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d8e2:	b480      	push	{r7}
 800d8e4:	b083      	sub	sp, #12
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d8ea:	bf00      	nop
 800d8ec:	370c      	adds	r7, #12
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f4:	4770      	bx	lr

0800d8f6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d8f6:	b480      	push	{r7}
 800d8f8:	b083      	sub	sp, #12
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d8fe:	bf00      	nop
 800d900:	370c      	adds	r7, #12
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr

0800d90a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d90a:	b480      	push	{r7}
 800d90c:	b085      	sub	sp, #20
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d918:	2b01      	cmp	r3, #1
 800d91a:	d101      	bne.n	800d920 <HAL_UARTEx_DisableFifoMode+0x16>
 800d91c:	2302      	movs	r3, #2
 800d91e:	e027      	b.n	800d970 <HAL_UARTEx_DisableFifoMode+0x66>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2201      	movs	r2, #1
 800d924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2224      	movs	r2, #36	; 0x24
 800d92c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	681a      	ldr	r2, [r3, #0]
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	f022 0201 	bic.w	r2, r2, #1
 800d946:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d94e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	68fa      	ldr	r2, [r7, #12]
 800d95c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2220      	movs	r2, #32
 800d962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2200      	movs	r2, #0
 800d96a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d96e:	2300      	movs	r3, #0
}
 800d970:	4618      	mov	r0, r3
 800d972:	3714      	adds	r7, #20
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr

0800d97c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d101      	bne.n	800d994 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d990:	2302      	movs	r3, #2
 800d992:	e02d      	b.n	800d9f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2201      	movs	r2, #1
 800d998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2224      	movs	r2, #36	; 0x24
 800d9a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f022 0201 	bic.w	r2, r2, #1
 800d9ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	689b      	ldr	r3, [r3, #8]
 800d9c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	683a      	ldr	r2, [r7, #0]
 800d9cc:	430a      	orrs	r2, r1
 800d9ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f000 f84f 	bl	800da74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	68fa      	ldr	r2, [r7, #12]
 800d9dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2220      	movs	r2, #32
 800d9e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d9ee:	2300      	movs	r3, #0
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3710      	adds	r7, #16
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b084      	sub	sp, #16
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d101      	bne.n	800da10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800da0c:	2302      	movs	r3, #2
 800da0e:	e02d      	b.n	800da6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2201      	movs	r2, #1
 800da14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2224      	movs	r2, #36	; 0x24
 800da1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f022 0201 	bic.w	r2, r2, #1
 800da36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	689b      	ldr	r3, [r3, #8]
 800da3e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	683a      	ldr	r2, [r7, #0]
 800da48:	430a      	orrs	r2, r1
 800da4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 f811 	bl	800da74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	68fa      	ldr	r2, [r7, #12]
 800da58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2220      	movs	r2, #32
 800da5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2200      	movs	r2, #0
 800da66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800da6a:	2300      	movs	r3, #0
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3710      	adds	r7, #16
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800da74:	b480      	push	{r7}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da80:	2b00      	cmp	r3, #0
 800da82:	d108      	bne.n	800da96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2201      	movs	r2, #1
 800da88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2201      	movs	r2, #1
 800da90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800da94:	e031      	b.n	800dafa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800da96:	2310      	movs	r3, #16
 800da98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800da9a:	2310      	movs	r3, #16
 800da9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	0e5b      	lsrs	r3, r3, #25
 800daa6:	b2db      	uxtb	r3, r3
 800daa8:	f003 0307 	and.w	r3, r3, #7
 800daac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	689b      	ldr	r3, [r3, #8]
 800dab4:	0f5b      	lsrs	r3, r3, #29
 800dab6:	b2db      	uxtb	r3, r3
 800dab8:	f003 0307 	and.w	r3, r3, #7
 800dabc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dabe:	7bbb      	ldrb	r3, [r7, #14]
 800dac0:	7b3a      	ldrb	r2, [r7, #12]
 800dac2:	4911      	ldr	r1, [pc, #68]	; (800db08 <UARTEx_SetNbDataToProcess+0x94>)
 800dac4:	5c8a      	ldrb	r2, [r1, r2]
 800dac6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800daca:	7b3a      	ldrb	r2, [r7, #12]
 800dacc:	490f      	ldr	r1, [pc, #60]	; (800db0c <UARTEx_SetNbDataToProcess+0x98>)
 800dace:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dad0:	fb93 f3f2 	sdiv	r3, r3, r2
 800dad4:	b29a      	uxth	r2, r3
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dadc:	7bfb      	ldrb	r3, [r7, #15]
 800dade:	7b7a      	ldrb	r2, [r7, #13]
 800dae0:	4909      	ldr	r1, [pc, #36]	; (800db08 <UARTEx_SetNbDataToProcess+0x94>)
 800dae2:	5c8a      	ldrb	r2, [r1, r2]
 800dae4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dae8:	7b7a      	ldrb	r2, [r7, #13]
 800daea:	4908      	ldr	r1, [pc, #32]	; (800db0c <UARTEx_SetNbDataToProcess+0x98>)
 800daec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800daee:	fb93 f3f2 	sdiv	r3, r3, r2
 800daf2:	b29a      	uxth	r2, r3
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dafa:	bf00      	nop
 800dafc:	3714      	adds	r7, #20
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr
 800db06:	bf00      	nop
 800db08:	0800e1d8 	.word	0x0800e1d8
 800db0c:	0800e1e0 	.word	0x0800e1e0

0800db10 <__cxa_pure_virtual>:
 800db10:	b508      	push	{r3, lr}
 800db12:	f000 f80d 	bl	800db30 <_ZSt9terminatev>

0800db16 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800db16:	b508      	push	{r3, lr}
 800db18:	4780      	blx	r0
 800db1a:	f000 f80e 	bl	800db3a <abort>
	...

0800db20 <_ZSt13get_terminatev>:
 800db20:	4b02      	ldr	r3, [pc, #8]	; (800db2c <_ZSt13get_terminatev+0xc>)
 800db22:	6818      	ldr	r0, [r3, #0]
 800db24:	f3bf 8f5b 	dmb	ish
 800db28:	4770      	bx	lr
 800db2a:	bf00      	nop
 800db2c:	24000010 	.word	0x24000010

0800db30 <_ZSt9terminatev>:
 800db30:	b508      	push	{r3, lr}
 800db32:	f7ff fff5 	bl	800db20 <_ZSt13get_terminatev>
 800db36:	f7ff ffee 	bl	800db16 <_ZN10__cxxabiv111__terminateEPFvvE>

0800db3a <abort>:
 800db3a:	b508      	push	{r3, lr}
 800db3c:	2006      	movs	r0, #6
 800db3e:	f000 f873 	bl	800dc28 <raise>
 800db42:	2001      	movs	r0, #1
 800db44:	f7f6 fd4a 	bl	80045dc <_exit>

0800db48 <__errno>:
 800db48:	4b01      	ldr	r3, [pc, #4]	; (800db50 <__errno+0x8>)
 800db4a:	6818      	ldr	r0, [r3, #0]
 800db4c:	4770      	bx	lr
 800db4e:	bf00      	nop
 800db50:	24000014 	.word	0x24000014

0800db54 <__libc_init_array>:
 800db54:	b570      	push	{r4, r5, r6, lr}
 800db56:	4d0d      	ldr	r5, [pc, #52]	; (800db8c <__libc_init_array+0x38>)
 800db58:	4c0d      	ldr	r4, [pc, #52]	; (800db90 <__libc_init_array+0x3c>)
 800db5a:	1b64      	subs	r4, r4, r5
 800db5c:	10a4      	asrs	r4, r4, #2
 800db5e:	2600      	movs	r6, #0
 800db60:	42a6      	cmp	r6, r4
 800db62:	d109      	bne.n	800db78 <__libc_init_array+0x24>
 800db64:	4d0b      	ldr	r5, [pc, #44]	; (800db94 <__libc_init_array+0x40>)
 800db66:	4c0c      	ldr	r4, [pc, #48]	; (800db98 <__libc_init_array+0x44>)
 800db68:	f000 f9b0 	bl	800decc <_init>
 800db6c:	1b64      	subs	r4, r4, r5
 800db6e:	10a4      	asrs	r4, r4, #2
 800db70:	2600      	movs	r6, #0
 800db72:	42a6      	cmp	r6, r4
 800db74:	d105      	bne.n	800db82 <__libc_init_array+0x2e>
 800db76:	bd70      	pop	{r4, r5, r6, pc}
 800db78:	f855 3b04 	ldr.w	r3, [r5], #4
 800db7c:	4798      	blx	r3
 800db7e:	3601      	adds	r6, #1
 800db80:	e7ee      	b.n	800db60 <__libc_init_array+0xc>
 800db82:	f855 3b04 	ldr.w	r3, [r5], #4
 800db86:	4798      	blx	r3
 800db88:	3601      	adds	r6, #1
 800db8a:	e7f2      	b.n	800db72 <__libc_init_array+0x1e>
 800db8c:	0800e1f0 	.word	0x0800e1f0
 800db90:	0800e1f0 	.word	0x0800e1f0
 800db94:	0800e1f0 	.word	0x0800e1f0
 800db98:	0800e204 	.word	0x0800e204

0800db9c <memcpy>:
 800db9c:	440a      	add	r2, r1
 800db9e:	4291      	cmp	r1, r2
 800dba0:	f100 33ff 	add.w	r3, r0, #4294967295
 800dba4:	d100      	bne.n	800dba8 <memcpy+0xc>
 800dba6:	4770      	bx	lr
 800dba8:	b510      	push	{r4, lr}
 800dbaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbb2:	4291      	cmp	r1, r2
 800dbb4:	d1f9      	bne.n	800dbaa <memcpy+0xe>
 800dbb6:	bd10      	pop	{r4, pc}

0800dbb8 <memset>:
 800dbb8:	4402      	add	r2, r0
 800dbba:	4603      	mov	r3, r0
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d100      	bne.n	800dbc2 <memset+0xa>
 800dbc0:	4770      	bx	lr
 800dbc2:	f803 1b01 	strb.w	r1, [r3], #1
 800dbc6:	e7f9      	b.n	800dbbc <memset+0x4>

0800dbc8 <realloc>:
 800dbc8:	4b02      	ldr	r3, [pc, #8]	; (800dbd4 <realloc+0xc>)
 800dbca:	460a      	mov	r2, r1
 800dbcc:	4601      	mov	r1, r0
 800dbce:	6818      	ldr	r0, [r3, #0]
 800dbd0:	f000 b8da 	b.w	800dd88 <_realloc_r>
 800dbd4:	24000014 	.word	0x24000014

0800dbd8 <_raise_r>:
 800dbd8:	291f      	cmp	r1, #31
 800dbda:	b538      	push	{r3, r4, r5, lr}
 800dbdc:	4604      	mov	r4, r0
 800dbde:	460d      	mov	r5, r1
 800dbe0:	d904      	bls.n	800dbec <_raise_r+0x14>
 800dbe2:	2316      	movs	r3, #22
 800dbe4:	6003      	str	r3, [r0, #0]
 800dbe6:	f04f 30ff 	mov.w	r0, #4294967295
 800dbea:	bd38      	pop	{r3, r4, r5, pc}
 800dbec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dbee:	b112      	cbz	r2, 800dbf6 <_raise_r+0x1e>
 800dbf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbf4:	b94b      	cbnz	r3, 800dc0a <_raise_r+0x32>
 800dbf6:	4620      	mov	r0, r4
 800dbf8:	f000 f830 	bl	800dc5c <_getpid_r>
 800dbfc:	462a      	mov	r2, r5
 800dbfe:	4601      	mov	r1, r0
 800dc00:	4620      	mov	r0, r4
 800dc02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc06:	f000 b817 	b.w	800dc38 <_kill_r>
 800dc0a:	2b01      	cmp	r3, #1
 800dc0c:	d00a      	beq.n	800dc24 <_raise_r+0x4c>
 800dc0e:	1c59      	adds	r1, r3, #1
 800dc10:	d103      	bne.n	800dc1a <_raise_r+0x42>
 800dc12:	2316      	movs	r3, #22
 800dc14:	6003      	str	r3, [r0, #0]
 800dc16:	2001      	movs	r0, #1
 800dc18:	e7e7      	b.n	800dbea <_raise_r+0x12>
 800dc1a:	2400      	movs	r4, #0
 800dc1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc20:	4628      	mov	r0, r5
 800dc22:	4798      	blx	r3
 800dc24:	2000      	movs	r0, #0
 800dc26:	e7e0      	b.n	800dbea <_raise_r+0x12>

0800dc28 <raise>:
 800dc28:	4b02      	ldr	r3, [pc, #8]	; (800dc34 <raise+0xc>)
 800dc2a:	4601      	mov	r1, r0
 800dc2c:	6818      	ldr	r0, [r3, #0]
 800dc2e:	f7ff bfd3 	b.w	800dbd8 <_raise_r>
 800dc32:	bf00      	nop
 800dc34:	24000014 	.word	0x24000014

0800dc38 <_kill_r>:
 800dc38:	b538      	push	{r3, r4, r5, lr}
 800dc3a:	4d07      	ldr	r5, [pc, #28]	; (800dc58 <_kill_r+0x20>)
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	4604      	mov	r4, r0
 800dc40:	4608      	mov	r0, r1
 800dc42:	4611      	mov	r1, r2
 800dc44:	602b      	str	r3, [r5, #0]
 800dc46:	f7f6 fcb9 	bl	80045bc <_kill>
 800dc4a:	1c43      	adds	r3, r0, #1
 800dc4c:	d102      	bne.n	800dc54 <_kill_r+0x1c>
 800dc4e:	682b      	ldr	r3, [r5, #0]
 800dc50:	b103      	cbz	r3, 800dc54 <_kill_r+0x1c>
 800dc52:	6023      	str	r3, [r4, #0]
 800dc54:	bd38      	pop	{r3, r4, r5, pc}
 800dc56:	bf00      	nop
 800dc58:	240010f8 	.word	0x240010f8

0800dc5c <_getpid_r>:
 800dc5c:	f7f6 bca6 	b.w	80045ac <_getpid>

0800dc60 <sbrk_aligned>:
 800dc60:	b570      	push	{r4, r5, r6, lr}
 800dc62:	4e0e      	ldr	r6, [pc, #56]	; (800dc9c <sbrk_aligned+0x3c>)
 800dc64:	460c      	mov	r4, r1
 800dc66:	6831      	ldr	r1, [r6, #0]
 800dc68:	4605      	mov	r5, r0
 800dc6a:	b911      	cbnz	r1, 800dc72 <sbrk_aligned+0x12>
 800dc6c:	f000 f8bc 	bl	800dde8 <_sbrk_r>
 800dc70:	6030      	str	r0, [r6, #0]
 800dc72:	4621      	mov	r1, r4
 800dc74:	4628      	mov	r0, r5
 800dc76:	f000 f8b7 	bl	800dde8 <_sbrk_r>
 800dc7a:	1c43      	adds	r3, r0, #1
 800dc7c:	d00a      	beq.n	800dc94 <sbrk_aligned+0x34>
 800dc7e:	1cc4      	adds	r4, r0, #3
 800dc80:	f024 0403 	bic.w	r4, r4, #3
 800dc84:	42a0      	cmp	r0, r4
 800dc86:	d007      	beq.n	800dc98 <sbrk_aligned+0x38>
 800dc88:	1a21      	subs	r1, r4, r0
 800dc8a:	4628      	mov	r0, r5
 800dc8c:	f000 f8ac 	bl	800dde8 <_sbrk_r>
 800dc90:	3001      	adds	r0, #1
 800dc92:	d101      	bne.n	800dc98 <sbrk_aligned+0x38>
 800dc94:	f04f 34ff 	mov.w	r4, #4294967295
 800dc98:	4620      	mov	r0, r4
 800dc9a:	bd70      	pop	{r4, r5, r6, pc}
 800dc9c:	240010f4 	.word	0x240010f4

0800dca0 <_malloc_r>:
 800dca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dca4:	1ccd      	adds	r5, r1, #3
 800dca6:	f025 0503 	bic.w	r5, r5, #3
 800dcaa:	3508      	adds	r5, #8
 800dcac:	2d0c      	cmp	r5, #12
 800dcae:	bf38      	it	cc
 800dcb0:	250c      	movcc	r5, #12
 800dcb2:	2d00      	cmp	r5, #0
 800dcb4:	4607      	mov	r7, r0
 800dcb6:	db01      	blt.n	800dcbc <_malloc_r+0x1c>
 800dcb8:	42a9      	cmp	r1, r5
 800dcba:	d905      	bls.n	800dcc8 <_malloc_r+0x28>
 800dcbc:	230c      	movs	r3, #12
 800dcbe:	603b      	str	r3, [r7, #0]
 800dcc0:	2600      	movs	r6, #0
 800dcc2:	4630      	mov	r0, r6
 800dcc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcc8:	4e2e      	ldr	r6, [pc, #184]	; (800dd84 <_malloc_r+0xe4>)
 800dcca:	f000 f89d 	bl	800de08 <__malloc_lock>
 800dcce:	6833      	ldr	r3, [r6, #0]
 800dcd0:	461c      	mov	r4, r3
 800dcd2:	bb34      	cbnz	r4, 800dd22 <_malloc_r+0x82>
 800dcd4:	4629      	mov	r1, r5
 800dcd6:	4638      	mov	r0, r7
 800dcd8:	f7ff ffc2 	bl	800dc60 <sbrk_aligned>
 800dcdc:	1c43      	adds	r3, r0, #1
 800dcde:	4604      	mov	r4, r0
 800dce0:	d14d      	bne.n	800dd7e <_malloc_r+0xde>
 800dce2:	6834      	ldr	r4, [r6, #0]
 800dce4:	4626      	mov	r6, r4
 800dce6:	2e00      	cmp	r6, #0
 800dce8:	d140      	bne.n	800dd6c <_malloc_r+0xcc>
 800dcea:	6823      	ldr	r3, [r4, #0]
 800dcec:	4631      	mov	r1, r6
 800dcee:	4638      	mov	r0, r7
 800dcf0:	eb04 0803 	add.w	r8, r4, r3
 800dcf4:	f000 f878 	bl	800dde8 <_sbrk_r>
 800dcf8:	4580      	cmp	r8, r0
 800dcfa:	d13a      	bne.n	800dd72 <_malloc_r+0xd2>
 800dcfc:	6821      	ldr	r1, [r4, #0]
 800dcfe:	3503      	adds	r5, #3
 800dd00:	1a6d      	subs	r5, r5, r1
 800dd02:	f025 0503 	bic.w	r5, r5, #3
 800dd06:	3508      	adds	r5, #8
 800dd08:	2d0c      	cmp	r5, #12
 800dd0a:	bf38      	it	cc
 800dd0c:	250c      	movcc	r5, #12
 800dd0e:	4629      	mov	r1, r5
 800dd10:	4638      	mov	r0, r7
 800dd12:	f7ff ffa5 	bl	800dc60 <sbrk_aligned>
 800dd16:	3001      	adds	r0, #1
 800dd18:	d02b      	beq.n	800dd72 <_malloc_r+0xd2>
 800dd1a:	6823      	ldr	r3, [r4, #0]
 800dd1c:	442b      	add	r3, r5
 800dd1e:	6023      	str	r3, [r4, #0]
 800dd20:	e00e      	b.n	800dd40 <_malloc_r+0xa0>
 800dd22:	6822      	ldr	r2, [r4, #0]
 800dd24:	1b52      	subs	r2, r2, r5
 800dd26:	d41e      	bmi.n	800dd66 <_malloc_r+0xc6>
 800dd28:	2a0b      	cmp	r2, #11
 800dd2a:	d916      	bls.n	800dd5a <_malloc_r+0xba>
 800dd2c:	1961      	adds	r1, r4, r5
 800dd2e:	42a3      	cmp	r3, r4
 800dd30:	6025      	str	r5, [r4, #0]
 800dd32:	bf18      	it	ne
 800dd34:	6059      	strne	r1, [r3, #4]
 800dd36:	6863      	ldr	r3, [r4, #4]
 800dd38:	bf08      	it	eq
 800dd3a:	6031      	streq	r1, [r6, #0]
 800dd3c:	5162      	str	r2, [r4, r5]
 800dd3e:	604b      	str	r3, [r1, #4]
 800dd40:	4638      	mov	r0, r7
 800dd42:	f104 060b 	add.w	r6, r4, #11
 800dd46:	f000 f865 	bl	800de14 <__malloc_unlock>
 800dd4a:	f026 0607 	bic.w	r6, r6, #7
 800dd4e:	1d23      	adds	r3, r4, #4
 800dd50:	1af2      	subs	r2, r6, r3
 800dd52:	d0b6      	beq.n	800dcc2 <_malloc_r+0x22>
 800dd54:	1b9b      	subs	r3, r3, r6
 800dd56:	50a3      	str	r3, [r4, r2]
 800dd58:	e7b3      	b.n	800dcc2 <_malloc_r+0x22>
 800dd5a:	6862      	ldr	r2, [r4, #4]
 800dd5c:	42a3      	cmp	r3, r4
 800dd5e:	bf0c      	ite	eq
 800dd60:	6032      	streq	r2, [r6, #0]
 800dd62:	605a      	strne	r2, [r3, #4]
 800dd64:	e7ec      	b.n	800dd40 <_malloc_r+0xa0>
 800dd66:	4623      	mov	r3, r4
 800dd68:	6864      	ldr	r4, [r4, #4]
 800dd6a:	e7b2      	b.n	800dcd2 <_malloc_r+0x32>
 800dd6c:	4634      	mov	r4, r6
 800dd6e:	6876      	ldr	r6, [r6, #4]
 800dd70:	e7b9      	b.n	800dce6 <_malloc_r+0x46>
 800dd72:	230c      	movs	r3, #12
 800dd74:	603b      	str	r3, [r7, #0]
 800dd76:	4638      	mov	r0, r7
 800dd78:	f000 f84c 	bl	800de14 <__malloc_unlock>
 800dd7c:	e7a1      	b.n	800dcc2 <_malloc_r+0x22>
 800dd7e:	6025      	str	r5, [r4, #0]
 800dd80:	e7de      	b.n	800dd40 <_malloc_r+0xa0>
 800dd82:	bf00      	nop
 800dd84:	240010f0 	.word	0x240010f0

0800dd88 <_realloc_r>:
 800dd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd8c:	4680      	mov	r8, r0
 800dd8e:	4614      	mov	r4, r2
 800dd90:	460e      	mov	r6, r1
 800dd92:	b921      	cbnz	r1, 800dd9e <_realloc_r+0x16>
 800dd94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd98:	4611      	mov	r1, r2
 800dd9a:	f7ff bf81 	b.w	800dca0 <_malloc_r>
 800dd9e:	b92a      	cbnz	r2, 800ddac <_realloc_r+0x24>
 800dda0:	f000 f83e 	bl	800de20 <_free_r>
 800dda4:	4625      	mov	r5, r4
 800dda6:	4628      	mov	r0, r5
 800dda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddac:	f000 f884 	bl	800deb8 <_malloc_usable_size_r>
 800ddb0:	4284      	cmp	r4, r0
 800ddb2:	4607      	mov	r7, r0
 800ddb4:	d802      	bhi.n	800ddbc <_realloc_r+0x34>
 800ddb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ddba:	d812      	bhi.n	800dde2 <_realloc_r+0x5a>
 800ddbc:	4621      	mov	r1, r4
 800ddbe:	4640      	mov	r0, r8
 800ddc0:	f7ff ff6e 	bl	800dca0 <_malloc_r>
 800ddc4:	4605      	mov	r5, r0
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	d0ed      	beq.n	800dda6 <_realloc_r+0x1e>
 800ddca:	42bc      	cmp	r4, r7
 800ddcc:	4622      	mov	r2, r4
 800ddce:	4631      	mov	r1, r6
 800ddd0:	bf28      	it	cs
 800ddd2:	463a      	movcs	r2, r7
 800ddd4:	f7ff fee2 	bl	800db9c <memcpy>
 800ddd8:	4631      	mov	r1, r6
 800ddda:	4640      	mov	r0, r8
 800dddc:	f000 f820 	bl	800de20 <_free_r>
 800dde0:	e7e1      	b.n	800dda6 <_realloc_r+0x1e>
 800dde2:	4635      	mov	r5, r6
 800dde4:	e7df      	b.n	800dda6 <_realloc_r+0x1e>
	...

0800dde8 <_sbrk_r>:
 800dde8:	b538      	push	{r3, r4, r5, lr}
 800ddea:	4d06      	ldr	r5, [pc, #24]	; (800de04 <_sbrk_r+0x1c>)
 800ddec:	2300      	movs	r3, #0
 800ddee:	4604      	mov	r4, r0
 800ddf0:	4608      	mov	r0, r1
 800ddf2:	602b      	str	r3, [r5, #0]
 800ddf4:	f7f6 fbfc 	bl	80045f0 <_sbrk>
 800ddf8:	1c43      	adds	r3, r0, #1
 800ddfa:	d102      	bne.n	800de02 <_sbrk_r+0x1a>
 800ddfc:	682b      	ldr	r3, [r5, #0]
 800ddfe:	b103      	cbz	r3, 800de02 <_sbrk_r+0x1a>
 800de00:	6023      	str	r3, [r4, #0]
 800de02:	bd38      	pop	{r3, r4, r5, pc}
 800de04:	240010f8 	.word	0x240010f8

0800de08 <__malloc_lock>:
 800de08:	4801      	ldr	r0, [pc, #4]	; (800de10 <__malloc_lock+0x8>)
 800de0a:	f000 b85d 	b.w	800dec8 <__retarget_lock_acquire_recursive>
 800de0e:	bf00      	nop
 800de10:	240010fc 	.word	0x240010fc

0800de14 <__malloc_unlock>:
 800de14:	4801      	ldr	r0, [pc, #4]	; (800de1c <__malloc_unlock+0x8>)
 800de16:	f000 b858 	b.w	800deca <__retarget_lock_release_recursive>
 800de1a:	bf00      	nop
 800de1c:	240010fc 	.word	0x240010fc

0800de20 <_free_r>:
 800de20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de22:	2900      	cmp	r1, #0
 800de24:	d044      	beq.n	800deb0 <_free_r+0x90>
 800de26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de2a:	9001      	str	r0, [sp, #4]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	f1a1 0404 	sub.w	r4, r1, #4
 800de32:	bfb8      	it	lt
 800de34:	18e4      	addlt	r4, r4, r3
 800de36:	f7ff ffe7 	bl	800de08 <__malloc_lock>
 800de3a:	4a1e      	ldr	r2, [pc, #120]	; (800deb4 <_free_r+0x94>)
 800de3c:	9801      	ldr	r0, [sp, #4]
 800de3e:	6813      	ldr	r3, [r2, #0]
 800de40:	b933      	cbnz	r3, 800de50 <_free_r+0x30>
 800de42:	6063      	str	r3, [r4, #4]
 800de44:	6014      	str	r4, [r2, #0]
 800de46:	b003      	add	sp, #12
 800de48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de4c:	f7ff bfe2 	b.w	800de14 <__malloc_unlock>
 800de50:	42a3      	cmp	r3, r4
 800de52:	d908      	bls.n	800de66 <_free_r+0x46>
 800de54:	6825      	ldr	r5, [r4, #0]
 800de56:	1961      	adds	r1, r4, r5
 800de58:	428b      	cmp	r3, r1
 800de5a:	bf01      	itttt	eq
 800de5c:	6819      	ldreq	r1, [r3, #0]
 800de5e:	685b      	ldreq	r3, [r3, #4]
 800de60:	1949      	addeq	r1, r1, r5
 800de62:	6021      	streq	r1, [r4, #0]
 800de64:	e7ed      	b.n	800de42 <_free_r+0x22>
 800de66:	461a      	mov	r2, r3
 800de68:	685b      	ldr	r3, [r3, #4]
 800de6a:	b10b      	cbz	r3, 800de70 <_free_r+0x50>
 800de6c:	42a3      	cmp	r3, r4
 800de6e:	d9fa      	bls.n	800de66 <_free_r+0x46>
 800de70:	6811      	ldr	r1, [r2, #0]
 800de72:	1855      	adds	r5, r2, r1
 800de74:	42a5      	cmp	r5, r4
 800de76:	d10b      	bne.n	800de90 <_free_r+0x70>
 800de78:	6824      	ldr	r4, [r4, #0]
 800de7a:	4421      	add	r1, r4
 800de7c:	1854      	adds	r4, r2, r1
 800de7e:	42a3      	cmp	r3, r4
 800de80:	6011      	str	r1, [r2, #0]
 800de82:	d1e0      	bne.n	800de46 <_free_r+0x26>
 800de84:	681c      	ldr	r4, [r3, #0]
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	6053      	str	r3, [r2, #4]
 800de8a:	4421      	add	r1, r4
 800de8c:	6011      	str	r1, [r2, #0]
 800de8e:	e7da      	b.n	800de46 <_free_r+0x26>
 800de90:	d902      	bls.n	800de98 <_free_r+0x78>
 800de92:	230c      	movs	r3, #12
 800de94:	6003      	str	r3, [r0, #0]
 800de96:	e7d6      	b.n	800de46 <_free_r+0x26>
 800de98:	6825      	ldr	r5, [r4, #0]
 800de9a:	1961      	adds	r1, r4, r5
 800de9c:	428b      	cmp	r3, r1
 800de9e:	bf04      	itt	eq
 800dea0:	6819      	ldreq	r1, [r3, #0]
 800dea2:	685b      	ldreq	r3, [r3, #4]
 800dea4:	6063      	str	r3, [r4, #4]
 800dea6:	bf04      	itt	eq
 800dea8:	1949      	addeq	r1, r1, r5
 800deaa:	6021      	streq	r1, [r4, #0]
 800deac:	6054      	str	r4, [r2, #4]
 800deae:	e7ca      	b.n	800de46 <_free_r+0x26>
 800deb0:	b003      	add	sp, #12
 800deb2:	bd30      	pop	{r4, r5, pc}
 800deb4:	240010f0 	.word	0x240010f0

0800deb8 <_malloc_usable_size_r>:
 800deb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800debc:	1f18      	subs	r0, r3, #4
 800debe:	2b00      	cmp	r3, #0
 800dec0:	bfbc      	itt	lt
 800dec2:	580b      	ldrlt	r3, [r1, r0]
 800dec4:	18c0      	addlt	r0, r0, r3
 800dec6:	4770      	bx	lr

0800dec8 <__retarget_lock_acquire_recursive>:
 800dec8:	4770      	bx	lr

0800deca <__retarget_lock_release_recursive>:
 800deca:	4770      	bx	lr

0800decc <_init>:
 800decc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dece:	bf00      	nop
 800ded0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ded2:	bc08      	pop	{r3}
 800ded4:	469e      	mov	lr, r3
 800ded6:	4770      	bx	lr

0800ded8 <_fini>:
 800ded8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deda:	bf00      	nop
 800dedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dede:	bc08      	pop	{r3}
 800dee0:	469e      	mov	lr, r3
 800dee2:	4770      	bx	lr
