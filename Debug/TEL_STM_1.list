
TEL_STM_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da48  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0800dd18  0800dd18  0001dd18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dfd0  0800dfd0  0001dfd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000014  0800dfd8  0800dfd8  0001dfd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dfec  0800dfec  0001dfec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  0800dff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001080  24000080  0800e06c  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001100  0800e06c  00021100  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026944  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000045be  00000000  00000000  000469ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001568  00000000  00000000  0004afb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001408  00000000  00000000  0004c518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035b16  00000000  00000000  0004d920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cf13  00000000  00000000  00083436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153b6e  00000000  00000000  000a0349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f3eb7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005da0  00000000  00000000  001f3f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000080 	.word	0x24000080
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800dd00 	.word	0x0800dd00

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000084 	.word	0x24000084
 800030c:	0800dd00 	.word	0x0800dd00

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00

0800067c <_Z13DC_motor_initv>:
DC_motor fr(188,7,0.001,0.001,512,13.2,200);
DC_motor fl(5.2,2,0.001,0.001,512,13.2,200);
DC_motor br(155,2,0.002,0.001,512,13.2,200);
DC_motor bl(155,5,0.006,0.001,512,13.2,200);

void DC_motor_init(){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8000680:	2100      	movs	r1, #0
 8000682:	481a      	ldr	r0, [pc, #104]	; (80006ec <_Z13DC_motor_initv+0x70>)
 8000684:	f00a f85e 	bl	800a744 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8000688:	2104      	movs	r1, #4
 800068a:	4818      	ldr	r0, [pc, #96]	; (80006ec <_Z13DC_motor_initv+0x70>)
 800068c:	f00a f85a 	bl	800a744 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 8000690:	2100      	movs	r1, #0
 8000692:	4817      	ldr	r0, [pc, #92]	; (80006f0 <_Z13DC_motor_initv+0x74>)
 8000694:	f00a f856 	bl	800a744 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 8000698:	2104      	movs	r1, #4
 800069a:	4815      	ldr	r0, [pc, #84]	; (80006f0 <_Z13DC_motor_initv+0x74>)
 800069c:	f00a f852 	bl	800a744 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80006a0:	2100      	movs	r1, #0
 80006a2:	4814      	ldr	r0, [pc, #80]	; (80006f4 <_Z13DC_motor_initv+0x78>)
 80006a4:	f00a f84e 	bl	800a744 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80006a8:	2104      	movs	r1, #4
 80006aa:	4812      	ldr	r0, [pc, #72]	; (80006f4 <_Z13DC_motor_initv+0x78>)
 80006ac:	f00a f84a 	bl	800a744 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	4811      	ldr	r0, [pc, #68]	; (80006f8 <_Z13DC_motor_initv+0x7c>)
 80006b4:	f00a f846 	bl	800a744 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80006b8:	2104      	movs	r1, #4
 80006ba:	480f      	ldr	r0, [pc, #60]	; (80006f8 <_Z13DC_motor_initv+0x7c>)
 80006bc:	f00a f842 	bl	800a744 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim13);
 80006c0:	480e      	ldr	r0, [pc, #56]	; (80006fc <_Z13DC_motor_initv+0x80>)
 80006c2:	f009 fd53 	bl	800a16c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_2);
 80006c6:	2104      	movs	r1, #4
 80006c8:	480d      	ldr	r0, [pc, #52]	; (8000700 <_Z13DC_motor_initv+0x84>)
 80006ca:	f009 fe2d 	bl	800a328 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 80006ce:	2100      	movs	r1, #0
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <_Z13DC_motor_initv+0x84>)
 80006d2:	f009 fe29 	bl	800a328 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_2);
 80006d6:	2104      	movs	r1, #4
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <_Z13DC_motor_initv+0x88>)
 80006da:	f009 fe25 	bl	800a328 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 80006de:	2100      	movs	r1, #0
 80006e0:	4808      	ldr	r0, [pc, #32]	; (8000704 <_Z13DC_motor_initv+0x88>)
 80006e2:	f009 fe21 	bl	800a328 <HAL_TIM_PWM_Start_IT>
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	240002e0 	.word	0x240002e0
 80006f0:	240003c4 	.word	0x240003c4
 80006f4:	2400032c 	.word	0x2400032c
 80006f8:	24000378 	.word	0x24000378
 80006fc:	2400045c 	.word	0x2400045c
 8000700:	24000410 	.word	0x24000410
 8000704:	240004a8 	.word	0x240004a8

08000708 <_ZN8DC_motorC1Eddddddd>:

DC_motor::DC_motor(double p, double i, double d, double time, double res, double ratio, double limit){
 8000708:	b480      	push	{r7}
 800070a:	b091      	sub	sp, #68	; 0x44
 800070c:	af00      	add	r7, sp, #0
 800070e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000710:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 8000714:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 8000718:	ed87 2b08 	vstr	d2, [r7, #32]
 800071c:	ed87 3b06 	vstr	d3, [r7, #24]
 8000720:	ed87 4b04 	vstr	d4, [r7, #16]
 8000724:	ed87 5b02 	vstr	d5, [r7, #8]
 8000728:	ed87 6b00 	vstr	d6, [r7]
 800072c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800072e:	2200      	movs	r2, #0
 8000730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	this->p = p;
 8000734:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000736:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800073a:	e9c1 2300 	strd	r2, r3, [r1]
	this->i = i;
 800073e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000740:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000744:	e9c1 2304 	strd	r2, r3, [r1, #16]
	this->d = d;
 8000748:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800074a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800074e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	this->time = time;
 8000752:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000758:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	this->res_encoder = res;
 800075c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800075e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000762:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	this->sr_ratio = ratio;
 8000766:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000768:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800076c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	this->I_limit=limit;
 8000770:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000772:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000776:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
}
 800077a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800077c:	4618      	mov	r0, r3
 800077e:	3744      	adds	r7, #68	; 0x44
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <_ZN8DC_motor10PIDControlEv>:

void DC_motor::PIDControl(void){
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

	pid_check++;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000796:	1c5a      	adds	r2, r3, #1
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	temp = error;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	rps_now = (double) CountNow / 4 / res_encoder / sr_ratio / time;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 80007b0:	ee07 3a90 	vmov	s15, r3
 80007b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80007b8:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80007bc:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80007c6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80007d0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80007da:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	error = rps_goal - rps_now;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80007f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	P = p * error;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	ed93 6b00 	vldr	d6, [r3]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8000806:	ee26 7b07 	vmul.f64	d7, d6, d7
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	ed83 7b02 	vstr	d7, [r3, #8]
	sum = i * error * time;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	ed93 6b04 	vldr	d6, [r3, #16]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800081c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8000826:	ee26 7b07 	vmul.f64	d7, d6, d7
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	I = I + sum;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	ed93 6b06 	vldr	d6, [r3, #24]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800083c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	ed83 7b06 	vstr	d7, [r3, #24]
	if (rps_now == 0) {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800084c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000854:	d106      	bne.n	8000864 <_ZN8DC_motor10PIDControlEv+0xdc>
		I = 0;
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	f04f 0200 	mov.w	r2, #0
 800085c:	f04f 0300 	mov.w	r3, #0
 8000860:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}
	if (I >= I_limit) {
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	ed93 6b06 	vldr	d6, [r3, #24]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 8000870:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000878:	db05      	blt.n	8000886 <_ZN8DC_motor10PIDControlEv+0xfe>
		I = I_limit;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8000880:	6879      	ldr	r1, [r7, #4]
 8000882:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}
	if (I < -I_limit) {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	ed93 6b06 	vldr	d6, [r3, #24]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 8000892:	eeb1 7b47 	vneg.f64	d7, d7
 8000896:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089e:	d507      	bpl.n	80008b0 <_ZN8DC_motor10PIDControlEv+0x128>
		I = -I_limit;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 80008a6:	eeb1 7b47 	vneg.f64	d7, d7
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	ed83 7b06 	vstr	d7, [r3, #24]
	}
	D = d * (error - temp) / time;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	ed93 6b08 	vldr	d6, [r3, #32]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 80008c2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80008c6:	ee26 5b07 	vmul.f64	d5, d6, d7
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80008d0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	PID = P + I + D;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	ed93 6b02 	vldr	d6, [r3, #8]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	ed93 7b06 	vldr	d7, [r3, #24]
 80008e6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80008f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30


}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <_Z41__static_initialization_and_destruction_0ii>:
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d148      	bne.n	80009aa <_Z41__static_initialization_and_destruction_0ii+0xa2>
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800091e:	4293      	cmp	r3, r2
 8000920:	d143      	bne.n	80009aa <_Z41__static_initialization_and_destruction_0ii+0xa2>
DC_motor fr(188,7,0.001,0.001,512,13.2,200);
 8000922:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80009b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000926:	ed9f 5b26 	vldr	d5, [pc, #152]	; 80009c0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 800092a:	ed9f 4b27 	vldr	d4, [pc, #156]	; 80009c8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 800092e:	ed9f 3b28 	vldr	d3, [pc, #160]	; 80009d0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000932:	ed9f 2b27 	vldr	d2, [pc, #156]	; 80009d0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000936:	eeb1 1b0c 	vmov.f64	d1, #28	; 0x40e00000  7.0
 800093a:	ed9f 0b27 	vldr	d0, [pc, #156]	; 80009d8 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 800093e:	4830      	ldr	r0, [pc, #192]	; (8000a00 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8000940:	f7ff fee2 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
DC_motor fl(5.2,2,0.001,0.001,512,13.2,200);
 8000944:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80009b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000948:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 80009c0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 800094c:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 80009c8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000950:	ed9f 3b1f 	vldr	d3, [pc, #124]	; 80009d0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000954:	ed9f 2b1e 	vldr	d2, [pc, #120]	; 80009d0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000958:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800095c:	ed9f 0b20 	vldr	d0, [pc, #128]	; 80009e0 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 8000960:	4828      	ldr	r0, [pc, #160]	; (8000a04 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8000962:	f7ff fed1 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
DC_motor br(155,2,0.002,0.001,512,13.2,200);
 8000966:	ed9f 6b14 	vldr	d6, [pc, #80]	; 80009b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800096a:	ed9f 5b15 	vldr	d5, [pc, #84]	; 80009c0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 800096e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80009c8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000972:	ed9f 3b17 	vldr	d3, [pc, #92]	; 80009d0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000976:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 80009e8 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 800097a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800097e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80009f0 <_Z41__static_initialization_and_destruction_0ii+0xe8>
 8000982:	4821      	ldr	r0, [pc, #132]	; (8000a08 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8000984:	f7ff fec0 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
DC_motor bl(155,5,0.006,0.001,512,13.2,200);
 8000988:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80009b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800098c:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 80009c0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000990:	ed9f 4b0d 	vldr	d4, [pc, #52]	; 80009c8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000994:	ed9f 3b0e 	vldr	d3, [pc, #56]	; 80009d0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000998:	ed9f 2b17 	vldr	d2, [pc, #92]	; 80009f8 <_Z41__static_initialization_and_destruction_0ii+0xf0>
 800099c:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 80009a0:	ed9f 0b13 	vldr	d0, [pc, #76]	; 80009f0 <_Z41__static_initialization_and_destruction_0ii+0xe8>
 80009a4:	4819      	ldr	r0, [pc, #100]	; (8000a0c <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80009a6:	f7ff feaf 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	f3af 8000 	nop.w
 80009b8:	00000000 	.word	0x00000000
 80009bc:	40690000 	.word	0x40690000
 80009c0:	66666666 	.word	0x66666666
 80009c4:	402a6666 	.word	0x402a6666
 80009c8:	00000000 	.word	0x00000000
 80009cc:	40800000 	.word	0x40800000
 80009d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80009d4:	3f50624d 	.word	0x3f50624d
 80009d8:	00000000 	.word	0x00000000
 80009dc:	40678000 	.word	0x40678000
 80009e0:	cccccccd 	.word	0xcccccccd
 80009e4:	4014cccc 	.word	0x4014cccc
 80009e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80009ec:	3f60624d 	.word	0x3f60624d
 80009f0:	00000000 	.word	0x00000000
 80009f4:	40636000 	.word	0x40636000
 80009f8:	bc6a7efa 	.word	0xbc6a7efa
 80009fc:	3f789374 	.word	0x3f789374
 8000a00:	240000a0 	.word	0x240000a0
 8000a04:	24000130 	.word	0x24000130
 8000a08:	240001c0 	.word	0x240001c0
 8000a0c:	24000250 	.word	0x24000250

08000a10 <_GLOBAL__sub_I_fr>:
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f7ff ff75 	bl	8000908 <_Z41__static_initialization_and_destruction_0ii>
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <_Z10debug_loopv>:

/** debug which function **/
bool mecanum_debug = true;


void debug_loop(){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	while(1){
		if(mecanum_debug) STM::run_mecanum();
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <_Z10debug_loopv+0x14>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d0fb      	beq.n	8000a24 <_Z10debug_loopv+0x4>
 8000a2c:	f003 fcd0 	bl	80043d0 <_ZN3STM11run_mecanumEv>
 8000a30:	e7f8      	b.n	8000a24 <_Z10debug_loopv+0x4>
 8000a32:	bf00      	nop
 8000a34:	24000001 	.word	0x24000001

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3c:	f003 ff10 	bl	8004860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a40:	f000 f818 	bl	8000a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a44:	f000 fb56 	bl	80010f4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a48:	f000 f884 	bl	8000b54 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a4c:	f000 f8d6 	bl	8000bfc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a50:	f000 f92a 	bl	8000ca8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000a54:	f000 f97e 	bl	8000d54 <MX_TIM5_Init>
  MX_TIM12_Init();
 8000a58:	f000 f9d2 	bl	8000e00 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000a5c:	f000 fa20 	bl	8000ea0 <MX_TIM13_Init>
  MX_TIM15_Init();
 8000a60:	f000 fa42 	bl	8000ee8 <MX_TIM15_Init>
  MX_DMA_Init();
 8000a64:	f000 fb1e 	bl	80010a4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a68:	f000 fad0 	bl	800100c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000a6c:	f000 fc36 	bl	80012dc <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <main+0x38>
	...

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b09c      	sub	sp, #112	; 0x70
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	224c      	movs	r2, #76	; 0x4c
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f00c ffb2 	bl	800d9ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2220      	movs	r2, #32
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f00c ffac 	bl	800d9ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a94:	2002      	movs	r0, #2
 8000a96:	f007 f881 	bl	8007b9c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	4b2c      	ldr	r3, [pc, #176]	; (8000b50 <SystemClock_Config+0xdc>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000aa6:	4a2a      	ldr	r2, [pc, #168]	; (8000b50 <SystemClock_Config+0xdc>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	6193      	str	r3, [r2, #24]
 8000aae:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <SystemClock_Config+0xdc>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aba:	bf00      	nop
 8000abc:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <SystemClock_Config+0xdc>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ac8:	d1f8      	bne.n	8000abc <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aca:	2301      	movs	r3, #1
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ace:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000ae0:	232a      	movs	r3, #42	; 0x2a
 8000ae2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000af0:	230c      	movs	r3, #12
 8000af2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	4618      	mov	r0, r3
 8000b02:	f007 f885 	bl	8007c10 <HAL_RCC_OscConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b0c:	f000 fbe0 	bl	80012d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b10:	233f      	movs	r3, #63	; 0x3f
 8000b12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b14:	2303      	movs	r3, #3
 8000b16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000b18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b1e:	2308      	movs	r3, #8
 8000b20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b22:	2340      	movs	r3, #64	; 0x40
 8000b24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b26:	2340      	movs	r3, #64	; 0x40
 8000b28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b30:	2340      	movs	r3, #64	; 0x40
 8000b32:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2102      	movs	r1, #2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f007 fc17 	bl	800836c <HAL_RCC_ClockConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b44:	f000 fbc4 	bl	80012d0 <Error_Handler>
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3770      	adds	r7, #112	; 0x70
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	58024800 	.word	0x58024800

08000b54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	; 0x30
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	2224      	movs	r2, #36	; 0x24
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f00c ff42 	bl	800d9ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b68:	463b      	mov	r3, r7
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <MX_TIM2_Init+0xa4>)
 8000b74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_TIM2_Init+0xa4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_TIM2_Init+0xa4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_TIM2_Init+0xa4>)
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <MX_TIM2_Init+0xa4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b94:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <MX_TIM2_Init+0xa4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_TIM2_Init+0xa4>)
 8000bc6:	f009 fd17 	bl	800a5f8 <HAL_TIM_Encoder_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000bd0:	f000 fb7e 	bl	80012d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_TIM2_Init+0xa4>)
 8000be2:	f00a fc3b 	bl	800b45c <HAL_TIMEx_MasterConfigSynchronization>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000bec:	f000 fb70 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3730      	adds	r7, #48	; 0x30
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	240002e0 	.word	0x240002e0

08000bfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08c      	sub	sp, #48	; 0x30
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	2224      	movs	r2, #36	; 0x24
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f00c feee 	bl	800d9ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c10:	463b      	mov	r3, r7
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c1a:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <MX_TIM3_Init+0xa4>)
 8000c1c:	4a21      	ldr	r2, [pc, #132]	; (8000ca4 <MX_TIM3_Init+0xa8>)
 8000c1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c20:	4b1f      	ldr	r3, [pc, #124]	; (8000ca0 <MX_TIM3_Init+0xa4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c26:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <MX_TIM3_Init+0xa4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <MX_TIM3_Init+0xa4>)
 8000c2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c34:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <MX_TIM3_Init+0xa4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3a:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <MX_TIM3_Init+0xa4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c40:	2301      	movs	r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <MX_TIM3_Init+0xa4>)
 8000c6c:	f009 fcc4 	bl	800a5f8 <HAL_TIM_Encoder_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c76:	f000 fb2b 	bl	80012d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c82:	463b      	mov	r3, r7
 8000c84:	4619      	mov	r1, r3
 8000c86:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <MX_TIM3_Init+0xa4>)
 8000c88:	f00a fbe8 	bl	800b45c <HAL_TIMEx_MasterConfigSynchronization>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c92:	f000 fb1d 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	3730      	adds	r7, #48	; 0x30
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2400032c 	.word	0x2400032c
 8000ca4:	40000400 	.word	0x40000400

08000ca8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08c      	sub	sp, #48	; 0x30
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	2224      	movs	r2, #36	; 0x24
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f00c fe98 	bl	800d9ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <MX_TIM4_Init+0xa4>)
 8000cc8:	4a21      	ldr	r2, [pc, #132]	; (8000d50 <MX_TIM4_Init+0xa8>)
 8000cca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_TIM4_Init+0xa4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <MX_TIM4_Init+0xa4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_TIM4_Init+0xa4>)
 8000cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cde:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_TIM4_Init+0xa4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_TIM4_Init+0xa4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d04:	2301      	movs	r3, #1
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	4619      	mov	r1, r3
 8000d16:	480d      	ldr	r0, [pc, #52]	; (8000d4c <MX_TIM4_Init+0xa4>)
 8000d18:	f009 fc6e 	bl	800a5f8 <HAL_TIM_Encoder_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d22:	f000 fad5 	bl	80012d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <MX_TIM4_Init+0xa4>)
 8000d34:	f00a fb92 	bl	800b45c <HAL_TIMEx_MasterConfigSynchronization>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d3e:	f000 fac7 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	3730      	adds	r7, #48	; 0x30
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	24000378 	.word	0x24000378
 8000d50:	40000800 	.word	0x40000800

08000d54 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	; 0x30
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d5a:	f107 030c 	add.w	r3, r7, #12
 8000d5e:	2224      	movs	r2, #36	; 0x24
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f00c fe42 	bl	800d9ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d68:	463b      	mov	r3, r7
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d72:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <MX_TIM5_Init+0xa4>)
 8000d74:	4a21      	ldr	r2, [pc, #132]	; (8000dfc <MX_TIM5_Init+0xa8>)
 8000d76:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <MX_TIM5_Init+0xa4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <MX_TIM5_Init+0xa4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <MX_TIM5_Init+0xa4>)
 8000d86:	f04f 32ff 	mov.w	r2, #4294967295
 8000d8a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <MX_TIM5_Init+0xa4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <MX_TIM5_Init+0xa4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000da0:	2301      	movs	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000db0:	2301      	movs	r3, #1
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <MX_TIM5_Init+0xa4>)
 8000dc4:	f009 fc18 	bl	800a5f8 <HAL_TIM_Encoder_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000dce:	f000 fa7f 	bl	80012d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000dda:	463b      	mov	r3, r7
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <MX_TIM5_Init+0xa4>)
 8000de0:	f00a fb3c 	bl	800b45c <HAL_TIMEx_MasterConfigSynchronization>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000dea:	f000 fa71 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	3730      	adds	r7, #48	; 0x30
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	240003c4 	.word	0x240003c4
 8000dfc:	40000c00 	.word	0x40000c00

08000e00 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
 8000e14:	615a      	str	r2, [r3, #20]
 8000e16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000e18:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <MX_TIM12_Init+0x98>)
 8000e1a:	4a20      	ldr	r2, [pc, #128]	; (8000e9c <MX_TIM12_Init+0x9c>)
 8000e1c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <MX_TIM12_Init+0x98>)
 8000e20:	2253      	movs	r2, #83	; 0x53
 8000e22:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <MX_TIM12_Init+0x98>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 49;
 8000e2a:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <MX_TIM12_Init+0x98>)
 8000e2c:	2231      	movs	r2, #49	; 0x31
 8000e2e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e30:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <MX_TIM12_Init+0x98>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <MX_TIM12_Init+0x98>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000e3c:	4816      	ldr	r0, [pc, #88]	; (8000e98 <MX_TIM12_Init+0x98>)
 8000e3e:	f009 fa1b 	bl	800a278 <HAL_TIM_PWM_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8000e48:	f000 fa42 	bl	80012d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e4c:	2360      	movs	r3, #96	; 0x60
 8000e4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4619      	mov	r1, r3
 8000e62:	480d      	ldr	r0, [pc, #52]	; (8000e98 <MX_TIM12_Init+0x98>)
 8000e64:	f009 fe1c 	bl	800aaa0 <HAL_TIM_PWM_ConfigChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8000e6e:	f000 fa2f 	bl	80012d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2204      	movs	r2, #4
 8000e76:	4619      	mov	r1, r3
 8000e78:	4807      	ldr	r0, [pc, #28]	; (8000e98 <MX_TIM12_Init+0x98>)
 8000e7a:	f009 fe11 	bl	800aaa0 <HAL_TIM_PWM_ConfigChannel>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8000e84:	f000 fa24 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000e88:	4803      	ldr	r0, [pc, #12]	; (8000e98 <MX_TIM12_Init+0x98>)
 8000e8a:	f003 f8f7 	bl	800407c <HAL_TIM_MspPostInit>

}
 8000e8e:	bf00      	nop
 8000e90:	3720      	adds	r7, #32
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	24000410 	.word	0x24000410
 8000e9c:	40001800 	.word	0x40001800

08000ea0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_TIM13_Init+0x40>)
 8000ea6:	4a0f      	ldr	r2, [pc, #60]	; (8000ee4 <MX_TIM13_Init+0x44>)
 8000ea8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 83;
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <MX_TIM13_Init+0x40>)
 8000eac:	2253      	movs	r2, #83	; 0x53
 8000eae:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <MX_TIM13_Init+0x40>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <MX_TIM13_Init+0x40>)
 8000eb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ebc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <MX_TIM13_Init+0x40>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_TIM13_Init+0x40>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_TIM13_Init+0x40>)
 8000ecc:	f009 f8f6 	bl	800a0bc <HAL_TIM_Base_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8000ed6:	f000 f9fb 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	2400045c 	.word	0x2400045c
 8000ee4:	40001c00 	.word	0x40001c00

08000ee8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b098      	sub	sp, #96	; 0x60
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000efa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]
 8000f0a:	615a      	str	r2, [r3, #20]
 8000f0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2234      	movs	r2, #52	; 0x34
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f00c fd69 	bl	800d9ec <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000f1a:	4b3a      	ldr	r3, [pc, #232]	; (8001004 <MX_TIM15_Init+0x11c>)
 8000f1c:	4a3a      	ldr	r2, [pc, #232]	; (8001008 <MX_TIM15_Init+0x120>)
 8000f1e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 83;
 8000f20:	4b38      	ldr	r3, [pc, #224]	; (8001004 <MX_TIM15_Init+0x11c>)
 8000f22:	2253      	movs	r2, #83	; 0x53
 8000f24:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f26:	4b37      	ldr	r3, [pc, #220]	; (8001004 <MX_TIM15_Init+0x11c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 49;
 8000f2c:	4b35      	ldr	r3, [pc, #212]	; (8001004 <MX_TIM15_Init+0x11c>)
 8000f2e:	2231      	movs	r2, #49	; 0x31
 8000f30:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f32:	4b34      	ldr	r3, [pc, #208]	; (8001004 <MX_TIM15_Init+0x11c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f38:	4b32      	ldr	r3, [pc, #200]	; (8001004 <MX_TIM15_Init+0x11c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3e:	4b31      	ldr	r3, [pc, #196]	; (8001004 <MX_TIM15_Init+0x11c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f44:	482f      	ldr	r0, [pc, #188]	; (8001004 <MX_TIM15_Init+0x11c>)
 8000f46:	f009 f997 	bl	800a278 <HAL_TIM_PWM_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM15_Init+0x6c>
  {
    Error_Handler();
 8000f50:	f000 f9be 	bl	80012d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f54:	2300      	movs	r3, #0
 8000f56:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f60:	4619      	mov	r1, r3
 8000f62:	4828      	ldr	r0, [pc, #160]	; (8001004 <MX_TIM15_Init+0x11c>)
 8000f64:	f00a fa7a 	bl	800b45c <HAL_TIMEx_MasterConfigSynchronization>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM15_Init+0x8a>
  {
    Error_Handler();
 8000f6e:	f000 f9af 	bl	80012d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f72:	2360      	movs	r3, #96	; 0x60
 8000f74:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f86:	2300      	movs	r3, #0
 8000f88:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f92:	2200      	movs	r2, #0
 8000f94:	4619      	mov	r1, r3
 8000f96:	481b      	ldr	r0, [pc, #108]	; (8001004 <MX_TIM15_Init+0x11c>)
 8000f98:	f009 fd82 	bl	800aaa0 <HAL_TIM_PWM_ConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM15_Init+0xbe>
  {
    Error_Handler();
 8000fa2:	f000 f995 	bl	80012d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fa6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000faa:	2204      	movs	r2, #4
 8000fac:	4619      	mov	r1, r3
 8000fae:	4815      	ldr	r0, [pc, #84]	; (8001004 <MX_TIM15_Init+0x11c>)
 8000fb0:	f009 fd76 	bl	800aaa0 <HAL_TIM_PWM_ConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM15_Init+0xd6>
  {
    Error_Handler();
 8000fba:	f000 f989 	bl	80012d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4807      	ldr	r0, [pc, #28]	; (8001004 <MX_TIM15_Init+0x11c>)
 8000fe6:	f00a fad5 	bl	800b594 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM15_Init+0x10c>
  {
    Error_Handler();
 8000ff0:	f000 f96e 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000ff4:	4803      	ldr	r0, [pc, #12]	; (8001004 <MX_TIM15_Init+0x11c>)
 8000ff6:	f003 f841 	bl	800407c <HAL_TIM_MspPostInit>

}
 8000ffa:	bf00      	nop
 8000ffc:	3760      	adds	r7, #96	; 0x60
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	240004a8 	.word	0x240004a8
 8001008:	40014000 	.word	0x40014000

0800100c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001010:	4b22      	ldr	r3, [pc, #136]	; (800109c <MX_USART1_UART_Init+0x90>)
 8001012:	4a23      	ldr	r2, [pc, #140]	; (80010a0 <MX_USART1_UART_Init+0x94>)
 8001014:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <MX_USART1_UART_Init+0x90>)
 8001018:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800101c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800101e:	4b1f      	ldr	r3, [pc, #124]	; (800109c <MX_USART1_UART_Init+0x90>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <MX_USART1_UART_Init+0x90>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800102a:	4b1c      	ldr	r3, [pc, #112]	; (800109c <MX_USART1_UART_Init+0x90>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001030:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_USART1_UART_Init+0x90>)
 8001032:	220c      	movs	r2, #12
 8001034:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <MX_USART1_UART_Init+0x90>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <MX_USART1_UART_Init+0x90>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <MX_USART1_UART_Init+0x90>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_USART1_UART_Init+0x90>)
 800104a:	2200      	movs	r2, #0
 800104c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <MX_USART1_UART_Init+0x90>)
 8001050:	2200      	movs	r2, #0
 8001052:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001054:	4811      	ldr	r0, [pc, #68]	; (800109c <MX_USART1_UART_Init+0x90>)
 8001056:	f00a fb5b 	bl	800b710 <HAL_UART_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001060:	f000 f936 	bl	80012d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001064:	2100      	movs	r1, #0
 8001066:	480d      	ldr	r0, [pc, #52]	; (800109c <MX_USART1_UART_Init+0x90>)
 8001068:	f00c fba2 	bl	800d7b0 <HAL_UARTEx_SetTxFifoThreshold>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001072:	f000 f92d 	bl	80012d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001076:	2100      	movs	r1, #0
 8001078:	4808      	ldr	r0, [pc, #32]	; (800109c <MX_USART1_UART_Init+0x90>)
 800107a:	f00c fbd7 	bl	800d82c <HAL_UARTEx_SetRxFifoThreshold>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001084:	f000 f924 	bl	80012d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <MX_USART1_UART_Init+0x90>)
 800108a:	f00c fb58 	bl	800d73e <HAL_UARTEx_DisableFifoMode>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001094:	f000 f91c 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	240004f4 	.word	0x240004f4
 80010a0:	40011000 	.word	0x40011000

080010a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_DMA_Init+0x4c>)
 80010ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010b0:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <MX_DMA_Init+0x4c>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <MX_DMA_Init+0x4c>)
 80010bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2100      	movs	r1, #0
 80010cc:	200b      	movs	r0, #11
 80010ce:	f003 fd34 	bl	8004b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010d2:	200b      	movs	r0, #11
 80010d4:	f003 fd4b 	bl	8004b6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	200c      	movs	r0, #12
 80010de:	f003 fd2c 	bl	8004b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80010e2:	200c      	movs	r0, #12
 80010e4:	f003 fd43 	bl	8004b6e <HAL_NVIC_EnableIRQ>

}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	58024400 	.word	0x58024400

080010f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08c      	sub	sp, #48	; 0x30
 80010f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800110a:	4b6b      	ldr	r3, [pc, #428]	; (80012b8 <MX_GPIO_Init+0x1c4>)
 800110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001110:	4a69      	ldr	r2, [pc, #420]	; (80012b8 <MX_GPIO_Init+0x1c4>)
 8001112:	f043 0310 	orr.w	r3, r3, #16
 8001116:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800111a:	4b67      	ldr	r3, [pc, #412]	; (80012b8 <MX_GPIO_Init+0x1c4>)
 800111c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001120:	f003 0310 	and.w	r3, r3, #16
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001128:	4b63      	ldr	r3, [pc, #396]	; (80012b8 <MX_GPIO_Init+0x1c4>)
 800112a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112e:	4a62      	ldr	r2, [pc, #392]	; (80012b8 <MX_GPIO_Init+0x1c4>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001138:	4b5f      	ldr	r3, [pc, #380]	; (80012b8 <MX_GPIO_Init+0x1c4>)
 800113a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001146:	4b5c      	ldr	r3, [pc, #368]	; (80012b8 <MX_GPIO_Init+0x1c4>)
 8001148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114c:	4a5a      	ldr	r2, [pc, #360]	; (80012b8 <MX_GPIO_Init+0x1c4>)
 800114e:	f043 0320 	orr.w	r3, r3, #32
 8001152:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001156:	4b58      	ldr	r3, [pc, #352]	; (80012b8 <MX_GPIO_Init+0x1c4>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115c:	f003 0320 	and.w	r3, r3, #32
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001164:	4b54      	ldr	r3, [pc, #336]	; (80012b8 <MX_GPIO_Init+0x1c4>)
 8001166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116a:	4a53      	ldr	r2, [pc, #332]	; (80012b8 <MX_GPIO_Init+0x1c4>)
 800116c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001174:	4b50      	ldr	r3, [pc, #320]	; (80012b8 <MX_GPIO_Init+0x1c4>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b4d      	ldr	r3, [pc, #308]	; (80012b8 <MX_GPIO_Init+0x1c4>)
 8001184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001188:	4a4b      	ldr	r2, [pc, #300]	; (80012b8 <MX_GPIO_Init+0x1c4>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001192:	4b49      	ldr	r3, [pc, #292]	; (80012b8 <MX_GPIO_Init+0x1c4>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a0:	4b45      	ldr	r3, [pc, #276]	; (80012b8 <MX_GPIO_Init+0x1c4>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a6:	4a44      	ldr	r2, [pc, #272]	; (80012b8 <MX_GPIO_Init+0x1c4>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b0:	4b41      	ldr	r3, [pc, #260]	; (80012b8 <MX_GPIO_Init+0x1c4>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011be:	4b3e      	ldr	r3, [pc, #248]	; (80012b8 <MX_GPIO_Init+0x1c4>)
 80011c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c4:	4a3c      	ldr	r2, [pc, #240]	; (80012b8 <MX_GPIO_Init+0x1c4>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ce:	4b3a      	ldr	r3, [pc, #232]	; (80012b8 <MX_GPIO_Init+0x1c4>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d4:	f003 0308 	and.w	r3, r3, #8
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80011e2:	4836      	ldr	r0, [pc, #216]	; (80012bc <MX_GPIO_Init+0x1c8>)
 80011e4:	f006 fcc0 	bl	8007b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_5, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f242 0120 	movw	r1, #8224	; 0x2020
 80011ee:	4834      	ldr	r0, [pc, #208]	; (80012c0 <MX_GPIO_Init+0x1cc>)
 80011f0:	f006 fcba 	bl	8007b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
 80011fa:	4832      	ldr	r0, [pc, #200]	; (80012c4 <MX_GPIO_Init+0x1d0>)
 80011fc:	f006 fcb4 	bl	8007b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8001206:	4830      	ldr	r0, [pc, #192]	; (80012c8 <MX_GPIO_Init+0x1d4>)
 8001208:	f006 fcae 	bl	8007b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 8001212:	482e      	ldr	r0, [pc, #184]	; (80012cc <MX_GPIO_Init+0x1d8>)
 8001214:	f006 fca8 	bl	8007b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8;
 8001218:	f44f 738e 	mov.w	r3, #284	; 0x11c
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	4619      	mov	r1, r3
 8001230:	4822      	ldr	r0, [pc, #136]	; (80012bc <MX_GPIO_Init+0x1c8>)
 8001232:	f006 faf1 	bl	8007818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8001236:	f242 0320 	movw	r3, #8224	; 0x2020
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	481c      	ldr	r0, [pc, #112]	; (80012c0 <MX_GPIO_Init+0x1cc>)
 8001250:	f006 fae2 	bl	8007818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF9 PF11 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15;
 8001254:	f44f 430b 	mov.w	r3, #35584	; 0x8b00
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	4619      	mov	r1, r3
 800126c:	4815      	ldr	r0, [pc, #84]	; (80012c4 <MX_GPIO_Init+0x1d0>)
 800126e:	f006 fad3 	bl	8007818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9;
 8001272:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	480f      	ldr	r0, [pc, #60]	; (80012c8 <MX_GPIO_Init+0x1d4>)
 800128c:	f006 fac4 	bl	8007818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 8001290:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001296:	2301      	movs	r3, #1
 8001298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	4619      	mov	r1, r3
 80012a8:	4808      	ldr	r0, [pc, #32]	; (80012cc <MX_GPIO_Init+0x1d8>)
 80012aa:	f006 fab5 	bl	8007818 <HAL_GPIO_Init>

}
 80012ae:	bf00      	nop
 80012b0:	3730      	adds	r7, #48	; 0x30
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	58024400 	.word	0x58024400
 80012bc:	58021000 	.word	0x58021000
 80012c0:	58020800 	.word	0x58020800
 80012c4:	58021400 	.word	0x58021400
 80012c8:	58020400 	.word	0x58020400
 80012cc:	58020c00 	.word	0x58020c00

080012d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
}
 80012d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <Error_Handler+0x8>
	...

080012dc <main_function>:
#include "debug.h"
#include "ros_main.h"
#include "stm_main.h"


void main_function(){
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	ROS::setup();
 80012e0:	f001 fe90 	bl	8003004 <_ZN3ROS5setupEv>
	STM::setup();
 80012e4:	f003 f86e 	bl	80043c4 <_ZN3STM5setupEv>

	while(1){
		if(debug_mode) debug_loop();
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <main_function+0x20>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <main_function+0x1a>
 80012f0:	f7ff fb96 	bl	8000a20 <_Z10debug_loopv>
 80012f4:	e7f8      	b.n	80012e8 <main_function+0xc>
		else ROS::loop();
 80012f6:	f001 fe95 	bl	8003024 <_ZN3ROS4loopEv>
		if(debug_mode) debug_loop();
 80012fa:	e7f5      	b.n	80012e8 <main_function+0xc>
 80012fc:	24000000 	.word	0x24000000

08001300 <_ZN8CAR_INFOC1Ev>:

typedef struct{
	double Vx=0;
	double Vy=0;
	double Omega=0;
} CAR_INFO;
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	e9c1 2300 	strd	r2, r3, [r1]
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <_ZN7MecanumC1Ev>:
#include "mecanum.h"
#include "dc_motor.h"

Mecanum mecanum;

Mecanum::Mecanum(void){
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ffd8 	bl	8001300 <_ZN8CAR_INFOC1Ev>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3318      	adds	r3, #24
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ffd3 	bl	8001300 <_ZN8CAR_INFOC1Ev>
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <_ZN7MecanumC1Ev+0x60>)
 8001362:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	a309      	add	r3, pc, #36	; (adr r3, 8001390 <_ZN7MecanumC1Ev+0x50>)
 800136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	a308      	add	r3, pc, #32	; (adr r3, 8001398 <_ZN7MecanumC1Ev+0x58>)
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	DC_motor_init();
 800137e:	f7ff f97d 	bl	800067c <_Z13DC_motor_initv>
}
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	f3af 8000 	nop.w
 8001390:	cccccccd 	.word	0xcccccccd
 8001394:	4020cccc 	.word	0x4020cccc
 8001398:	39581062 	.word	0x39581062
 800139c:	400d48b4 	.word	0x400d48b4
 80013a0:	40270000 	.word	0x40270000

080013a4 <_ZN7Mecanum3runEv>:

// calculate wheel (-> PID) -> calculate car -> pub
void Mecanum::run(void){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
//	tf2_wheel_speed();
	tf2_car_speed();
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f807 	bl	80013c0 <_ZN7Mecanum13tf2_car_speedEv>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	0000      	movs	r0, r0
 80013bc:	0000      	movs	r0, r0
	...

080013c0 <_ZN7Mecanum13tf2_car_speedEv>:
	br.rps_goal = (CAR_Goal.Vy + CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
}


// give current car speed
void Mecanum::tf2_car_speed(void){
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	CAR_Now.Vx = (1/4)*radius*(fl.rps_now + fr.rps_now + bl.rps_now + br.rps_now);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80013ce:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80014a8 <_ZN7Mecanum13tf2_car_speedEv+0xe8>
 80013d2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80013d6:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 80013d8:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 80013dc:	4b35      	ldr	r3, [pc, #212]	; (80014b4 <_ZN7Mecanum13tf2_car_speedEv+0xf4>)
 80013de:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80013e2:	ee35 5b07 	vadd.f64	d5, d5, d7
 80013e6:	4b34      	ldr	r3, [pc, #208]	; (80014b8 <_ZN7Mecanum13tf2_car_speedEv+0xf8>)
 80013e8:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80013ec:	ee35 5b07 	vadd.f64	d5, d5, d7
 80013f0:	4b32      	ldr	r3, [pc, #200]	; (80014bc <_ZN7Mecanum13tf2_car_speedEv+0xfc>)
 80013f2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80013f6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80013fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	ed83 7b06 	vstr	d7, [r3, #24]
	CAR_Now.Vy = (1/4)*radius*(-fl.rps_now + fr.rps_now + bl.rps_now - br.rps_now);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800140a:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80014a8 <_ZN7Mecanum13tf2_car_speedEv+0xe8>
 800140e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001412:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <_ZN7Mecanum13tf2_car_speedEv+0xf4>)
 8001414:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001418:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 800141a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800141e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001422:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <_ZN7Mecanum13tf2_car_speedEv+0xf8>)
 8001424:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001428:	ee35 5b07 	vadd.f64	d5, d5, d7
 800142c:	4b23      	ldr	r3, [pc, #140]	; (80014bc <_ZN7Mecanum13tf2_car_speedEv+0xfc>)
 800142e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001432:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001436:	ee26 7b07 	vmul.f64	d7, d6, d7
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	ed83 7b08 	vstr	d7, [r3, #32]
	CAR_Now.Omega = (1/4)*radius*(1/(a+b))*(-fl.rps_now + fr.rps_now - bl.rps_now + br.rps_now);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001446:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80014a8 <_ZN7Mecanum13tf2_car_speedEv+0xe8>
 800144a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800145a:	ee35 5b07 	vadd.f64	d5, d5, d7
 800145e:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8001462:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001466:	ee26 6b07 	vmul.f64	d6, d6, d7
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <_ZN7Mecanum13tf2_car_speedEv+0xf4>)
 800146c:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 8001472:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001476:	ee35 5b47 	vsub.f64	d5, d5, d7
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <_ZN7Mecanum13tf2_car_speedEv+0xf8>)
 800147c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001480:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <_ZN7Mecanum13tf2_car_speedEv+0xfc>)
 8001486:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800148a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800148e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	f3af 8000 	nop.w
	...
 80014b0:	24000130 	.word	0x24000130
 80014b4:	240000a0 	.word	0x240000a0
 80014b8:	24000250 	.word	0x24000250
 80014bc:	240001c0 	.word	0x240001c0

080014c0 <_Z41__static_initialization_and_destruction_0ii>:
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d107      	bne.n	80014e0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d102      	bne.n	80014e0 <_Z41__static_initialization_and_destruction_0ii+0x20>
Mecanum mecanum;
 80014da:	4803      	ldr	r0, [pc, #12]	; (80014e8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80014dc:	f7ff ff30 	bl	8001340 <_ZN7MecanumC1Ev>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	24000678 	.word	0x24000678

080014ec <_GLOBAL__sub_I_mecanum>:
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014f4:	2001      	movs	r0, #1
 80014f6:	f7ff ffe3 	bl	80014c0 <_Z41__static_initialization_and_destruction_0ii>
 80014fa:	bd80      	pop	{r7, pc}

080014fc <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <_ZN3ros3MsgC1Ev+0x1c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	0800df80 	.word	0x0800df80

08001540 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
      data()
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ffe8 	bl	8001520 <_ZN3ros3MsgC1Ev>
 8001550:	4a06      	ldr	r2, [pc, #24]	; (800156c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3304      	adds	r3, #4
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ffce 	bl	80014fc <_ZN3ros4TimeC1Ev>
    {
    }
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	0800df68 	.word	0x0800df68

08001570 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6859      	ldr	r1, [r3, #4]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	4413      	add	r3, r2
 8001588:	b2ca      	uxtb	r2, r1
 800158a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	0a19      	lsrs	r1, r3, #8
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3301      	adds	r3, #1
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	4413      	add	r3, r2
 800159a:	b2ca      	uxtb	r2, r1
 800159c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	0c19      	lsrs	r1, r3, #16
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	3302      	adds	r3, #2
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	b2ca      	uxtb	r2, r1
 80015ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	0e19      	lsrs	r1, r3, #24
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3303      	adds	r3, #3
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	4413      	add	r3, r2
 80015be:	b2ca      	uxtb	r2, r1
 80015c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3304      	adds	r3, #4
 80015c6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6899      	ldr	r1, [r3, #8]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	4413      	add	r3, r2
 80015d2:	b2ca      	uxtb	r2, r1
 80015d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	0a19      	lsrs	r1, r3, #8
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	3301      	adds	r3, #1
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	b2ca      	uxtb	r2, r1
 80015e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	0c19      	lsrs	r1, r3, #16
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3302      	adds	r3, #2
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	4413      	add	r3, r2
 80015f6:	b2ca      	uxtb	r2, r1
 80015f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	0e19      	lsrs	r1, r3, #24
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	3303      	adds	r3, #3
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	4413      	add	r3, r2
 8001608:	b2ca      	uxtb	r2, r1
 800160a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3304      	adds	r3, #4
 8001610:	60fb      	str	r3, [r7, #12]
      return offset;
 8001612:	68fb      	ldr	r3, [r7, #12]
    }
 8001614:	4618      	mov	r0, r3
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	4413      	add	r3, r2
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3301      	adds	r3, #1
 8001644:	6839      	ldr	r1, [r7, #0]
 8001646:	440b      	add	r3, r1
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3302      	adds	r3, #2
 800165a:	6839      	ldr	r1, [r7, #0]
 800165c:	440b      	add	r3, r1
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	041b      	lsls	r3, r3, #16
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3303      	adds	r3, #3
 8001670:	6839      	ldr	r1, [r7, #0]
 8001672:	440b      	add	r3, r1
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	061b      	lsls	r3, r3, #24
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	3304      	adds	r3, #4
 8001682:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	4413      	add	r3, r2
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	3301      	adds	r3, #1
 800169a:	6839      	ldr	r1, [r7, #0]
 800169c:	440b      	add	r3, r1
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	021b      	lsls	r3, r3, #8
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3302      	adds	r3, #2
 80016b0:	6839      	ldr	r1, [r7, #0]
 80016b2:	440b      	add	r3, r1
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	041b      	lsls	r3, r3, #16
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	3303      	adds	r3, #3
 80016c6:	6839      	ldr	r1, [r7, #0]
 80016c8:	440b      	add	r3, r1
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	061b      	lsls	r3, r3, #24
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	3304      	adds	r3, #4
 80016d8:	60fb      	str	r3, [r7, #12]
     return offset;
 80016da:	68fb      	ldr	r3, [r7, #12]
    }
 80016dc:	4618      	mov	r0, r3
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	0800dd18 	.word	0x0800dd18

08001704 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	0800dd28 	.word	0x0800dd28

08001720 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fef8 	bl	8001520 <_ZN3ros3MsgC1Ev>
 8001730:	4a0b      	ldr	r2, [pc, #44]	; (8001760 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	809a      	strh	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a09      	ldr	r2, [pc, #36]	; (8001764 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a06      	ldr	r2, [pc, #24]	; (8001764 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800174c:	611a      	str	r2, [r3, #16]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	615a      	str	r2, [r3, #20]
    {
    }
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	0800df50 	.word	0x0800df50
 8001764:	0800dd4c 	.word	0x0800dd4c

08001768 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	8899      	ldrh	r1, [r3, #4]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	4413      	add	r3, r2
 8001780:	b2ca      	uxtb	r2, r1
 8001782:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	889b      	ldrh	r3, [r3, #4]
 8001788:	0a1b      	lsrs	r3, r3, #8
 800178a:	b299      	uxth	r1, r3
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	3301      	adds	r3, #1
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	4413      	add	r3, r2
 8001794:	b2ca      	uxtb	r2, r1
 8001796:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	3302      	adds	r3, #2
 800179c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fdb4 	bl	8000310 <strlen>
 80017a8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	69b9      	ldr	r1, [r7, #24]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f001 fc64 	bl	8003080 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	3304      	adds	r3, #4
 80017bc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	18d0      	adds	r0, r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4619      	mov	r1, r3
 80017cc:	f00c f900 	bl	800d9d0 <memcpy>
      offset += length_topic_name;
 80017d0:	69fa      	ldr	r2, [r7, #28]
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	4413      	add	r3, r2
 80017d6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fd97 	bl	8000310 <strlen>
 80017e2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	4413      	add	r3, r2
 80017ea:	6979      	ldr	r1, [r7, #20]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f001 fc47 	bl	8003080 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	18d0      	adds	r0, r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4619      	mov	r1, r3
 8001806:	f00c f8e3 	bl	800d9d0 <memcpy>
      offset += length_message_type;
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	4413      	add	r3, r2
 8001810:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fd7a 	bl	8000310 <strlen>
 800181c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	4413      	add	r3, r2
 8001824:	6939      	ldr	r1, [r7, #16]
 8001826:	4618      	mov	r0, r3
 8001828:	f001 fc2a 	bl	8003080 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	3304      	adds	r3, #4
 8001830:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	18d0      	adds	r0, r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4619      	mov	r1, r3
 8001840:	f00c f8c6 	bl	800d9d0 <memcpy>
      offset += length_md5sum;
 8001844:	69fa      	ldr	r2, [r7, #28]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4413      	add	r3, r2
 800184a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001852:	68f9      	ldr	r1, [r7, #12]
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	4413      	add	r3, r2
 800185a:	b2ca      	uxtb	r2, r1
 800185c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	0a19      	lsrs	r1, r3, #8
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3301      	adds	r3, #1
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	4413      	add	r3, r2
 800186a:	b2ca      	uxtb	r2, r1
 800186c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	0c19      	lsrs	r1, r3, #16
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3302      	adds	r3, #2
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	4413      	add	r3, r2
 800187a:	b2ca      	uxtb	r2, r1
 800187c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	0e19      	lsrs	r1, r3, #24
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3303      	adds	r3, #3
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	4413      	add	r3, r2
 800188a:	b2ca      	uxtb	r2, r1
 800188c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	61fb      	str	r3, [r7, #28]
      return offset;
 8001894:	69fb      	ldr	r3, [r7, #28]
    }
 8001896:	4618      	mov	r0, r3
 8001898:	3720      	adds	r7, #32
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800189e:	b580      	push	{r7, lr}
 80018a0:	b08a      	sub	sp, #40	; 0x28
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	4413      	add	r3, r2
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	889b      	ldrh	r3, [r3, #4]
 80018be:	b21a      	sxth	r2, r3
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	3301      	adds	r3, #1
 80018c4:	6839      	ldr	r1, [r7, #0]
 80018c6:	440b      	add	r3, r1
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	b21b      	sxth	r3, r3
 80018ce:	4313      	orrs	r3, r2
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	3302      	adds	r3, #2
 80018dc:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	441a      	add	r2, r3
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f001 fbe6 	bl	80030bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	3304      	adds	r3, #4
 80018f4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	4413      	add	r3, r2
 8001900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001902:	429a      	cmp	r2, r3
 8001904:	d20c      	bcs.n	8001920 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	441a      	add	r2, r3
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	3b01      	subs	r3, #1
 8001910:	6839      	ldr	r1, [r7, #0]
 8001912:	440b      	add	r3, r1
 8001914:	7812      	ldrb	r2, [r2, #0]
 8001916:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	3301      	adds	r3, #1
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
 800191e:	e7ec      	b.n	80018fa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	4413      	add	r3, r2
 8001926:	3b01      	subs	r3, #1
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	4413      	add	r3, r2
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	3b01      	subs	r3, #1
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	441a      	add	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	4413      	add	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	441a      	add	r2, r3
 800194a:	f107 0310 	add.w	r3, r7, #16
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f001 fbb3 	bl	80030bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	3304      	adds	r3, #4
 800195a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	623b      	str	r3, [r7, #32]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4413      	add	r3, r2
 8001966:	6a3a      	ldr	r2, [r7, #32]
 8001968:	429a      	cmp	r2, r3
 800196a:	d20c      	bcs.n	8001986 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	6a3b      	ldr	r3, [r7, #32]
 8001970:	441a      	add	r2, r3
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	3b01      	subs	r3, #1
 8001976:	6839      	ldr	r1, [r7, #0]
 8001978:	440b      	add	r3, r1
 800197a:	7812      	ldrb	r2, [r2, #0]
 800197c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	3301      	adds	r3, #1
 8001982:	623b      	str	r3, [r7, #32]
 8001984:	e7ec      	b.n	8001960 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4413      	add	r3, r2
 800198c:	3b01      	subs	r3, #1
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	4413      	add	r3, r2
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	3b01      	subs	r3, #1
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	441a      	add	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4413      	add	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	441a      	add	r2, r3
 80019b0:	f107 030c 	add.w	r3, r7, #12
 80019b4:	4611      	mov	r1, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f001 fb80 	bl	80030bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	3304      	adds	r3, #4
 80019c0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d20c      	bcs.n	80019ec <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	441a      	add	r2, r3
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	3b01      	subs	r3, #1
 80019dc:	6839      	ldr	r1, [r7, #0]
 80019de:	440b      	add	r3, r1
 80019e0:	7812      	ldrb	r2, [r2, #0]
 80019e2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	3301      	adds	r3, #1
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	e7ec      	b.n	80019c6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4413      	add	r3, r2
 80019f2:	3b01      	subs	r3, #1
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	441a      	add	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	6839      	ldr	r1, [r7, #0]
 8001a1a:	440a      	add	r2, r1
 8001a1c:	7812      	ldrb	r2, [r2, #0]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	3301      	adds	r3, #1
 8001a28:	6839      	ldr	r1, [r7, #0]
 8001a2a:	440b      	add	r3, r1
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	4313      	orrs	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	3302      	adds	r3, #2
 8001a3a:	6839      	ldr	r1, [r7, #0]
 8001a3c:	440b      	add	r3, r1
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	041b      	lsls	r3, r3, #16
 8001a42:	4313      	orrs	r3, r2
 8001a44:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	3303      	adds	r3, #3
 8001a4c:	6839      	ldr	r1, [r7, #0]
 8001a4e:	440b      	add	r3, r1
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	061b      	lsls	r3, r3, #24
 8001a54:	4313      	orrs	r3, r2
 8001a56:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	3304      	adds	r3, #4
 8001a62:	61bb      	str	r3, [r7, #24]
     return offset;
 8001a64:	69bb      	ldr	r3, [r7, #24]
    }
 8001a66:	4618      	mov	r0, r3
 8001a68:	3728      	adds	r7, #40	; 0x28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	0800dd50 	.word	0x0800dd50

08001a8c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	0800dd6c 	.word	0x0800dd6c

08001aa8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fd34 	bl	8001520 <_ZN3ros3MsgC1Ev>
 8001ab8:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	711a      	strb	r2, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001ac8:	609a      	str	r2, [r3, #8]
    {
    }
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	0800df38 	.word	0x0800df38
 8001ad8:	0800dd4c 	.word	0x0800dd4c

08001adc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	7912      	ldrb	r2, [r2, #4]
 8001af4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	3301      	adds	r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe fc05 	bl	8000310 <strlen>
 8001b06:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	68b9      	ldr	r1, [r7, #8]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f001 fab5 	bl	8003080 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	18d0      	adds	r0, r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f00b ff51 	bl	800d9d0 <memcpy>
      offset += length_msg;
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	4413      	add	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
      return offset;
 8001b36:	68fb      	ldr	r3, [r7, #12]
    }
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	781a      	ldrb	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	441a      	add	r2, r3
 8001b66:	f107 030c 	add.w	r3, r7, #12
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f001 faa5 	bl	80030bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	3304      	adds	r3, #4
 8001b76:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4413      	add	r3, r2
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d20c      	bcs.n	8001ba2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	441a      	add	r2, r3
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	6839      	ldr	r1, [r7, #0]
 8001b94:	440b      	add	r3, r1
 8001b96:	7812      	ldrb	r2, [r2, #0]
 8001b98:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	e7ec      	b.n	8001b7c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	4413      	add	r3, r2
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	441a      	add	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
     return offset;
 8001bc6:	693b      	ldr	r3, [r7, #16]
    }
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	0800dd90 	.word	0x0800dd90

08001bec <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	0800dda4 	.word	0x0800dda4

08001c08 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fc84 	bl	8001520 <_ZN3ros3MsgC1Ev>
 8001c18:	4a0c      	ldr	r2, [pc, #48]	; (8001c4c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	61da      	str	r2, [r3, #28]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	0800df20 	.word	0x0800df20

08001c50 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6859      	ldr	r1, [r3, #4]
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	b2ca      	uxtb	r2, r1
 8001c6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	0a19      	lsrs	r1, r3, #8
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	3301      	adds	r3, #1
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	4413      	add	r3, r2
 8001c7a:	b2ca      	uxtb	r2, r1
 8001c7c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	0c19      	lsrs	r1, r3, #16
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	3302      	adds	r3, #2
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	b2ca      	uxtb	r2, r1
 8001c8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	0e19      	lsrs	r1, r3, #24
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	3303      	adds	r3, #3
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	b2ca      	uxtb	r2, r1
 8001ca0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001ca8:	2300      	movs	r3, #0
 8001caa:	623b      	str	r3, [r7, #32]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	6a3a      	ldr	r2, [r7, #32]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d22b      	bcs.n	8001d0e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001cc4:	6939      	ldr	r1, [r7, #16]
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	b2ca      	uxtb	r2, r1
 8001cce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	0a19      	lsrs	r1, r3, #8
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	b2ca      	uxtb	r2, r1
 8001cde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	0c19      	lsrs	r1, r3, #16
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	b2ca      	uxtb	r2, r1
 8001cee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	0e19      	lsrs	r1, r3, #24
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	3303      	adds	r3, #3
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	b2ca      	uxtb	r2, r1
 8001cfe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	3304      	adds	r3, #4
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	623b      	str	r3, [r7, #32]
 8001d0c:	e7ce      	b.n	8001cac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6919      	ldr	r1, [r3, #16]
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	b2ca      	uxtb	r2, r1
 8001d1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	0a19      	lsrs	r1, r3, #8
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	3301      	adds	r3, #1
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	4413      	add	r3, r2
 8001d2a:	b2ca      	uxtb	r2, r1
 8001d2c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	0c19      	lsrs	r1, r3, #16
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	3302      	adds	r3, #2
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	b2ca      	uxtb	r2, r1
 8001d3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	0e19      	lsrs	r1, r3, #24
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	3303      	adds	r3, #3
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	b2ca      	uxtb	r2, r1
 8001d50:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	3304      	adds	r3, #4
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d22b      	bcs.n	8001dbe <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699a      	ldr	r2, [r3, #24]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001d74:	68f9      	ldr	r1, [r7, #12]
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	b2ca      	uxtb	r2, r1
 8001d7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	0a19      	lsrs	r1, r3, #8
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	3301      	adds	r3, #1
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	b2ca      	uxtb	r2, r1
 8001d8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	0c19      	lsrs	r1, r3, #16
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	3302      	adds	r3, #2
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	b2ca      	uxtb	r2, r1
 8001d9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	0e19      	lsrs	r1, r3, #24
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	3303      	adds	r3, #3
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	b2ca      	uxtb	r2, r1
 8001dae:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	3304      	adds	r3, #4
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3301      	adds	r3, #1
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	e7ce      	b.n	8001d5c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69d9      	ldr	r1, [r3, #28]
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	b2ca      	uxtb	r2, r1
 8001dca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	0a19      	lsrs	r1, r3, #8
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	4413      	add	r3, r2
 8001dda:	b2ca      	uxtb	r2, r1
 8001ddc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	0c19      	lsrs	r1, r3, #16
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	3302      	adds	r3, #2
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	b2ca      	uxtb	r2, r1
 8001dee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	0e19      	lsrs	r1, r3, #24
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	3303      	adds	r3, #3
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	b2ca      	uxtb	r2, r1
 8001e00:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	3304      	adds	r3, #4
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d228      	bcs.n	8001e68 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fa74 	bl	8000310 <strlen>
 8001e28:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	4413      	add	r3, r2
 8001e30:	6979      	ldr	r1, [r7, #20]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f001 f924 	bl	8003080 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	18d0      	adds	r0, r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	4619      	mov	r1, r3
 8001e54:	f00b fdbc 	bl	800d9d0 <memcpy>
      offset += length_stringsi;
 8001e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	3301      	adds	r3, #1
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	e7d1      	b.n	8001e0c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3728      	adds	r7, #40	; 0x28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b08e      	sub	sp, #56	; 0x38
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	4413      	add	r3, r2
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	4413      	add	r3, r2
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	6a3a      	ldr	r2, [r7, #32]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e9e:	3302      	adds	r3, #2
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	041b      	lsls	r3, r3, #16
 8001ea8:	6a3a      	ldr	r2, [r7, #32]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb0:	3303      	adds	r3, #3
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	061b      	lsls	r3, r3, #24
 8001eba:	6a3a      	ldr	r2, [r7, #32]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	6a3a      	ldr	r2, [r7, #32]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d90a      	bls.n	8001ee6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4610      	mov	r0, r2
 8001edc:	f00b fd8e 	bl	800d9fc <realloc>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a3a      	ldr	r2, [r7, #32]
 8001eea:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001eec:	2300      	movs	r3, #0
 8001eee:	633b      	str	r3, [r7, #48]	; 0x30
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d236      	bcs.n	8001f68 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f02:	6839      	ldr	r1, [r7, #0]
 8001f04:	440a      	add	r2, r1
 8001f06:	7812      	ldrb	r2, [r2, #0]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f10:	3301      	adds	r3, #1
 8001f12:	6839      	ldr	r1, [r7, #0]
 8001f14:	440b      	add	r3, r1
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	021b      	lsls	r3, r3, #8
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f22:	3302      	adds	r3, #2
 8001f24:	6839      	ldr	r1, [r7, #0]
 8001f26:	440b      	add	r3, r1
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	041b      	lsls	r3, r3, #16
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f34:	3303      	adds	r3, #3
 8001f36:	6839      	ldr	r1, [r7, #0]
 8001f38:	440b      	add	r3, r1
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	061b      	lsls	r3, r3, #24
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	3208      	adds	r2, #8
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f62:	3301      	adds	r3, #1
 8001f64:	633b      	str	r3, [r7, #48]	; 0x30
 8001f66:	e7c3      	b.n	8001ef0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f74:	3301      	adds	r3, #1
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	4413      	add	r3, r2
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f86:	3302      	adds	r3, #2
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	041b      	lsls	r3, r3, #16
 8001f90:	69fa      	ldr	r2, [r7, #28]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f98:	3303      	adds	r3, #3
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	061b      	lsls	r3, r3, #24
 8001fa2:	69fa      	ldr	r2, [r7, #28]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001faa:	3304      	adds	r3, #4
 8001fac:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d90a      	bls.n	8001fce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699a      	ldr	r2, [r3, #24]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	f00b fd1a 	bl	800d9fc <realloc>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69fa      	ldr	r2, [r7, #28]
 8001fd2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d236      	bcs.n	8002050 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fea:	6839      	ldr	r1, [r7, #0]
 8001fec:	440a      	add	r2, r1
 8001fee:	7812      	ldrb	r2, [r2, #0]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	6839      	ldr	r1, [r7, #0]
 8001ffc:	440b      	add	r3, r1
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800200a:	3302      	adds	r3, #2
 800200c:	6839      	ldr	r1, [r7, #0]
 800200e:	440b      	add	r3, r1
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	041b      	lsls	r3, r3, #16
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201c:	3303      	adds	r3, #3
 800201e:	6839      	ldr	r1, [r7, #0]
 8002020:	440b      	add	r3, r1
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	061b      	lsls	r3, r3, #24
 8002026:	4313      	orrs	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002032:	3304      	adds	r3, #4
 8002034:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699a      	ldr	r2, [r3, #24]
 800203a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	3214      	adds	r2, #20
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204a:	3301      	adds	r3, #1
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800204e:	e7c3      	b.n	8001fd8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	4413      	add	r3, r2
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800205a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800205c:	3301      	adds	r3, #1
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	4413      	add	r3, r2
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800206c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206e:	3302      	adds	r3, #2
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	4413      	add	r3, r2
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	041b      	lsls	r3, r3, #16
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800207e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002080:	3303      	adds	r3, #3
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	4413      	add	r3, r2
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	061b      	lsls	r3, r3, #24
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002092:	3304      	adds	r3, #4
 8002094:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	429a      	cmp	r2, r3
 800209e:	d90a      	bls.n	80020b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4619      	mov	r1, r3
 80020aa:	4610      	mov	r0, r2
 80020ac:	f00b fca6 	bl	800d9fc <realloc>
 80020b0:	4602      	mov	r2, r0
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80020bc:	2300      	movs	r3, #0
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d23f      	bcs.n	800214a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80020ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	441a      	add	r2, r3
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	4611      	mov	r1, r2
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 fff0 	bl	80030bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020de:	3304      	adds	r3, #4
 80020e0:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80020e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
 80020e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4413      	add	r3, r2
 80020ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d20c      	bcs.n	800210c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	441a      	add	r2, r3
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	3b01      	subs	r3, #1
 80020fc:	6839      	ldr	r1, [r7, #0]
 80020fe:	440b      	add	r3, r1
 8002100:	7812      	ldrb	r2, [r2, #0]
 8002102:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	3301      	adds	r3, #1
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
 800210a:	e7ec      	b.n	80020e6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800210c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4413      	add	r3, r2
 8002112:	3b01      	subs	r3, #1
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	4413      	add	r3, r2
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800211c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211e:	3b01      	subs	r3, #1
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	441a      	add	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002128:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4413      	add	r3, r2
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	3220      	adds	r2, #32
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002144:	3301      	adds	r3, #1
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
 8002148:	e7ba      	b.n	80020c0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800214a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800214c:	4618      	mov	r0, r3
 800214e:	3738      	adds	r7, #56	; 0x38
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	0800de8c 	.word	0x0800de8c

08002170 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	0800ddc8 	.word	0x0800ddc8

0800218c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	611a      	str	r2, [r3, #16]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4618      	mov	r0, r3
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
  }
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
	...

080021d4 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a42      	ldr	r2, [pc, #264]	; (80022f0 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d068      	beq.n	80022bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a40      	ldr	r2, [pc, #256]	; (80022f4 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d061      	beq.n	80022bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a3d      	ldr	r2, [pc, #244]	; (80022f8 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d05a      	beq.n	80022bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a3b      	ldr	r2, [pc, #236]	; (80022fc <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d053      	beq.n	80022bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a38      	ldr	r2, [pc, #224]	; (8002300 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d04c      	beq.n	80022bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a36      	ldr	r2, [pc, #216]	; (8002304 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d045      	beq.n	80022bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a33      	ldr	r2, [pc, #204]	; (8002308 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d03e      	beq.n	80022bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a31      	ldr	r2, [pc, #196]	; (800230c <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d037      	beq.n	80022bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a2e      	ldr	r2, [pc, #184]	; (8002310 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d030      	beq.n	80022bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a2c      	ldr	r2, [pc, #176]	; (8002314 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d029      	beq.n	80022bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a29      	ldr	r2, [pc, #164]	; (8002318 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d022      	beq.n	80022bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a27      	ldr	r2, [pc, #156]	; (800231c <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d01b      	beq.n	80022bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a24      	ldr	r2, [pc, #144]	; (8002320 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d014      	beq.n	80022bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a22      	ldr	r2, [pc, #136]	; (8002324 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d00d      	beq.n	80022bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1f      	ldr	r2, [pc, #124]	; (8002328 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d006      	beq.n	80022bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a1d      	ldr	r2, [pc, #116]	; (800232c <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d109      	bne.n	80022d0 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80022ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ce:	e008      	b.n	80022e2 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80022de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40020010 	.word	0x40020010
 80022f4:	40020028 	.word	0x40020028
 80022f8:	40020040 	.word	0x40020040
 80022fc:	40020058 	.word	0x40020058
 8002300:	40020070 	.word	0x40020070
 8002304:	40020088 	.word	0x40020088
 8002308:	400200a0 	.word	0x400200a0
 800230c:	400200b8 	.word	0x400200b8
 8002310:	40020410 	.word	0x40020410
 8002314:	40020428 	.word	0x40020428
 8002318:	40020440 	.word	0x40020440
 800231c:	40020458 	.word	0x40020458
 8002320:	40020470 	.word	0x40020470
 8002324:	40020488 	.word	0x40020488
 8002328:	400204a0 	.word	0x400204a0
 800232c:	400204b8 	.word	0x400204b8

08002330 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <_ZN13STM32HardwareC1Ev+0x34>)
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	240004f4 	.word	0x240004f4

08002368 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f804 	bl	800237e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3304      	adds	r3, #4
 800238e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002392:	4619      	mov	r1, r3
 8002394:	f009 fa9e 	bl	800b8d4 <HAL_UART_Receive_DMA>
    }
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <_ZN13STM32Hardware4readEv>:

    int read(){
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295
 80023ac:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff0d 	bl	80021d4 <_ZN13STM32Hardware10getRdmaIndEv>
 80023ba:	4603      	mov	r3, r0
 80023bc:	429c      	cmp	r4, r3
 80023be:	bf14      	ite	ne
 80023c0:	2301      	movne	r3, #1
 80023c2:	2300      	moveq	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d012      	beq.n	80023f0 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80023d0:	1c59      	adds	r1, r3, #1
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	4413      	add	r3, r2
 80023dc:	791b      	ldrb	r3, [r3, #4]
 80023de:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80023e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80023f0:	68fb      	ldr	r3, [r7, #12]
    }
 80023f2:	4618      	mov	r0, r3
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd90      	pop	{r4, r7, pc}
	...

080023fc <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800240c:	2b20      	cmp	r3, #32
 800240e:	d108      	bne.n	8002422 <_ZN13STM32Hardware5flushEv+0x26>
 8002410:	4b27      	ldr	r3, [pc, #156]	; (80024b0 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	f083 0301 	eor.w	r3, r3, #1
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <_ZN13STM32Hardware5flushEv+0x26>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <_ZN13STM32Hardware5flushEv+0x28>
 8002422:	2300      	movs	r3, #0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d03f      	beq.n	80024a8 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002428:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <_ZN13STM32Hardware5flushEv+0xb4>)
 800242a:	2201      	movs	r2, #1
 800242c:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800243a:	429a      	cmp	r2, r3
 800243c:	d031      	beq.n	80024a2 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800244a:	429a      	cmp	r2, r3
 800244c:	d20a      	bcs.n	8002464 <_ZN13STM32Hardware5flushEv+0x68>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002454:	b29a      	uxth	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800245c:	b29b      	uxth	r3, r3
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	b29b      	uxth	r3, r3
 8002462:	e006      	b.n	8002472 <_ZN13STM32Hardware5flushEv+0x76>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800246a:	b29b      	uxth	r3, r3
 800246c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002470:	b29b      	uxth	r3, r3
 8002472:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800247e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	89fa      	ldrh	r2, [r7, #14]
 8002488:	4619      	mov	r1, r3
 800248a:	f009 f991 	bl	800b7b0 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002494:	89fb      	ldrh	r3, [r7, #14]
 8002496:	4413      	add	r3, r2
 8002498:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80024a2:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <_ZN13STM32Hardware5flushEv+0xb4>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
      }
    }
 80024a8:	bf00      	nop
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	240006c0 	.word	0x240006c0

080024b4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
      int n = length;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ca:	bfa8      	it	ge
 80024cc:	f44f 7300 	movge.w	r3, #512	; 0x200
 80024d0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80024d8:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	4293      	cmp	r3, r2
 80024e0:	bf28      	it	cs
 80024e2:	4613      	movcs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80024ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	68b9      	ldr	r1, [r7, #8]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f00b fa69 	bl	800d9d0 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	4413      	add	r3, r2
 8002508:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	429a      	cmp	r2, r3
 8002518:	d00b      	beq.n	8002532 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	18d1      	adds	r1, r2, r3
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	461a      	mov	r2, r3
 800252e:	f00b fa4f 	bl	800d9d0 <memcpy>
      }

      flush();
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f7ff ff62 	bl	80023fc <_ZN13STM32Hardware5flushEv>
    }
 8002538:	bf00      	nop
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	f002 fa10 	bl	800496c <HAL_GetTick>
 800254c:	4603      	mov	r3, r0
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe ffdc 	bl	8001520 <_ZN3ros3MsgC1Ev>
 8002568:	4a0e      	ldr	r2, [pc, #56]	; (80025a4 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	0800dedc 	.word	0x0800dedc

080025a8 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80025a8:	b480      	push	{r7}
 80025aa:	b08b      	sub	sp, #44	; 0x2c
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80025bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80025c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025c6:	6838      	ldr	r0, [r7, #0]
 80025c8:	4401      	add	r1, r0
 80025ca:	b2d3      	uxtb	r3, r2
 80025cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80025ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	0a02      	lsrs	r2, r0, #8
 80025dc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80025e0:	0a0b      	lsrs	r3, r1, #8
 80025e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025e4:	3101      	adds	r1, #1
 80025e6:	6838      	ldr	r0, [r7, #0]
 80025e8:	4401      	add	r1, r0
 80025ea:	b2d3      	uxtb	r3, r2
 80025ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80025ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	0c02      	lsrs	r2, r0, #16
 80025fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002600:	0c0b      	lsrs	r3, r1, #16
 8002602:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002604:	3102      	adds	r1, #2
 8002606:	6838      	ldr	r0, [r7, #0]
 8002608:	4401      	add	r1, r0
 800260a:	b2d3      	uxtb	r3, r2
 800260c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800260e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	0e02      	lsrs	r2, r0, #24
 800261c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002620:	0e0b      	lsrs	r3, r1, #24
 8002622:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002624:	3103      	adds	r1, #3
 8002626:	6838      	ldr	r0, [r7, #0]
 8002628:	4401      	add	r1, r0
 800262a:	b2d3      	uxtb	r3, r2
 800262c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800262e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	000a      	movs	r2, r1
 800263c:	2300      	movs	r3, #0
 800263e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002640:	3104      	adds	r1, #4
 8002642:	6838      	ldr	r0, [r7, #0]
 8002644:	4401      	add	r1, r0
 8002646:	b2d3      	uxtb	r3, r2
 8002648:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800264a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	0a0a      	lsrs	r2, r1, #8
 8002658:	2300      	movs	r3, #0
 800265a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800265c:	3105      	adds	r1, #5
 800265e:	6838      	ldr	r0, [r7, #0]
 8002660:	4401      	add	r1, r0
 8002662:	b2d3      	uxtb	r3, r2
 8002664:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002666:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	0c0a      	lsrs	r2, r1, #16
 8002674:	2300      	movs	r3, #0
 8002676:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002678:	3106      	adds	r1, #6
 800267a:	6838      	ldr	r0, [r7, #0]
 800267c:	4401      	add	r1, r0
 800267e:	b2d3      	uxtb	r3, r2
 8002680:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002682:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	0e0a      	lsrs	r2, r1, #24
 8002690:	2300      	movs	r3, #0
 8002692:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002694:	3107      	adds	r1, #7
 8002696:	6838      	ldr	r0, [r7, #0]
 8002698:	4401      	add	r1, r0
 800269a:	b2d3      	uxtb	r3, r2
 800269c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	3308      	adds	r3, #8
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80026aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80026ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80026b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b4:	6838      	ldr	r0, [r7, #0]
 80026b6:	4401      	add	r1, r0
 80026b8:	b2d3      	uxtb	r3, r2
 80026ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80026bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	0a02      	lsrs	r2, r0, #8
 80026ca:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80026ce:	0a0b      	lsrs	r3, r1, #8
 80026d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026d2:	3101      	adds	r1, #1
 80026d4:	6838      	ldr	r0, [r7, #0]
 80026d6:	4401      	add	r1, r0
 80026d8:	b2d3      	uxtb	r3, r2
 80026da:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80026dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	0c02      	lsrs	r2, r0, #16
 80026ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80026ee:	0c0b      	lsrs	r3, r1, #16
 80026f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f2:	3102      	adds	r1, #2
 80026f4:	6838      	ldr	r0, [r7, #0]
 80026f6:	4401      	add	r1, r0
 80026f8:	b2d3      	uxtb	r3, r2
 80026fa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80026fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	0e02      	lsrs	r2, r0, #24
 800270a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800270e:	0e0b      	lsrs	r3, r1, #24
 8002710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002712:	3103      	adds	r1, #3
 8002714:	6838      	ldr	r0, [r7, #0]
 8002716:	4401      	add	r1, r0
 8002718:	b2d3      	uxtb	r3, r2
 800271a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800271c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	000a      	movs	r2, r1
 800272a:	2300      	movs	r3, #0
 800272c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800272e:	3104      	adds	r1, #4
 8002730:	6838      	ldr	r0, [r7, #0]
 8002732:	4401      	add	r1, r0
 8002734:	b2d3      	uxtb	r3, r2
 8002736:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002738:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	0a0a      	lsrs	r2, r1, #8
 8002746:	2300      	movs	r3, #0
 8002748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800274a:	3105      	adds	r1, #5
 800274c:	6838      	ldr	r0, [r7, #0]
 800274e:	4401      	add	r1, r0
 8002750:	b2d3      	uxtb	r3, r2
 8002752:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002754:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	0c0a      	lsrs	r2, r1, #16
 8002762:	2300      	movs	r3, #0
 8002764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002766:	3106      	adds	r1, #6
 8002768:	6838      	ldr	r0, [r7, #0]
 800276a:	4401      	add	r1, r0
 800276c:	b2d3      	uxtb	r3, r2
 800276e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002770:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	0e0a      	lsrs	r2, r1, #24
 800277e:	2300      	movs	r3, #0
 8002780:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002782:	3107      	adds	r1, #7
 8002784:	6838      	ldr	r0, [r7, #0]
 8002786:	4401      	add	r1, r0
 8002788:	b2d3      	uxtb	r3, r2
 800278a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	3308      	adds	r3, #8
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002798:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800279c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a2:	6838      	ldr	r0, [r7, #0]
 80027a4:	4401      	add	r1, r0
 80027a6:	b2d3      	uxtb	r3, r2
 80027a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80027aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	0a02      	lsrs	r2, r0, #8
 80027b8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80027bc:	0a0b      	lsrs	r3, r1, #8
 80027be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027c0:	3101      	adds	r1, #1
 80027c2:	6838      	ldr	r0, [r7, #0]
 80027c4:	4401      	add	r1, r0
 80027c6:	b2d3      	uxtb	r3, r2
 80027c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80027ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	0c02      	lsrs	r2, r0, #16
 80027d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80027dc:	0c0b      	lsrs	r3, r1, #16
 80027de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027e0:	3102      	adds	r1, #2
 80027e2:	6838      	ldr	r0, [r7, #0]
 80027e4:	4401      	add	r1, r0
 80027e6:	b2d3      	uxtb	r3, r2
 80027e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80027ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	0e02      	lsrs	r2, r0, #24
 80027f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80027fc:	0e0b      	lsrs	r3, r1, #24
 80027fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002800:	3103      	adds	r1, #3
 8002802:	6838      	ldr	r0, [r7, #0]
 8002804:	4401      	add	r1, r0
 8002806:	b2d3      	uxtb	r3, r2
 8002808:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800280a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	000a      	movs	r2, r1
 8002818:	2300      	movs	r3, #0
 800281a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800281c:	3104      	adds	r1, #4
 800281e:	6838      	ldr	r0, [r7, #0]
 8002820:	4401      	add	r1, r0
 8002822:	b2d3      	uxtb	r3, r2
 8002824:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002826:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	0a0a      	lsrs	r2, r1, #8
 8002834:	2300      	movs	r3, #0
 8002836:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002838:	3105      	adds	r1, #5
 800283a:	6838      	ldr	r0, [r7, #0]
 800283c:	4401      	add	r1, r0
 800283e:	b2d3      	uxtb	r3, r2
 8002840:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002842:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	0c0a      	lsrs	r2, r1, #16
 8002850:	2300      	movs	r3, #0
 8002852:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002854:	3106      	adds	r1, #6
 8002856:	6838      	ldr	r0, [r7, #0]
 8002858:	4401      	add	r1, r0
 800285a:	b2d3      	uxtb	r3, r2
 800285c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800285e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	0e0a      	lsrs	r2, r1, #24
 800286c:	2300      	movs	r3, #0
 800286e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002870:	3107      	adds	r1, #7
 8002872:	6838      	ldr	r0, [r7, #0]
 8002874:	4401      	add	r1, r0
 8002876:	b2d3      	uxtb	r3, r2
 8002878:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	3308      	adds	r3, #8
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002882:	4618      	mov	r0, r3
 8002884:	372c      	adds	r7, #44	; 0x2c
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800288e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002892:	b0eb      	sub	sp, #428	; 0x1ac
 8002894:	af00      	add	r7, sp, #0
 8002896:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800289a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80028b0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80028b4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80028b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028bc:	4413      	add	r3, r2
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2200      	movs	r2, #0
 80028c4:	461c      	mov	r4, r3
 80028c6:	4615      	mov	r5, r2
 80028c8:	ea40 0804 	orr.w	r8, r0, r4
 80028cc:	ea41 0905 	orr.w	r9, r1, r5
 80028d0:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80028d4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80028d8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028e2:	4413      	add	r3, r2
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2200      	movs	r2, #0
 80028ea:	469a      	mov	sl, r3
 80028ec:	4693      	mov	fp, r2
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80028fa:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80028fe:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002902:	ea40 0402 	orr.w	r4, r0, r2
 8002906:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800290a:	430b      	orrs	r3, r1
 800290c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002910:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002914:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002918:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800291c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002920:	1c9a      	adds	r2, r3, #2
 8002922:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002926:	4413      	add	r3, r2
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2200      	movs	r2, #0
 800292e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002932:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002942:	464c      	mov	r4, r9
 8002944:	0423      	lsls	r3, r4, #16
 8002946:	4644      	mov	r4, r8
 8002948:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800294c:	4644      	mov	r4, r8
 800294e:	0422      	lsls	r2, r4, #16
 8002950:	ea40 0402 	orr.w	r4, r0, r2
 8002954:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002958:	430b      	orrs	r3, r1
 800295a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800295e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002962:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002966:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800296a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800296e:	1cda      	adds	r2, r3, #3
 8002970:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002974:	4413      	add	r3, r2
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2200      	movs	r2, #0
 800297c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002980:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002984:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002988:	4623      	mov	r3, r4
 800298a:	0a1b      	lsrs	r3, r3, #8
 800298c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002990:	4623      	mov	r3, r4
 8002992:	061b      	lsls	r3, r3, #24
 8002994:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002998:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800299c:	4623      	mov	r3, r4
 800299e:	4303      	orrs	r3, r0
 80029a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80029a4:	462b      	mov	r3, r5
 80029a6:	430b      	orrs	r3, r1
 80029a8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80029ac:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80029b0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80029b4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029b8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029bc:	1d1a      	adds	r2, r3, #4
 80029be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029c2:	4413      	add	r3, r2
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2200      	movs	r2, #0
 80029ca:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80029ce:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80029de:	0023      	movs	r3, r4
 80029e0:	2200      	movs	r2, #0
 80029e2:	ea40 0402 	orr.w	r4, r0, r2
 80029e6:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80029ea:	430b      	orrs	r3, r1
 80029ec:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80029f0:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80029f4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80029f8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029fc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a00:	1d5a      	adds	r2, r3, #5
 8002a02:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a06:	4413      	add	r3, r2
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002a12:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002a22:	0223      	lsls	r3, r4, #8
 8002a24:	2200      	movs	r2, #0
 8002a26:	ea40 0402 	orr.w	r4, r0, r2
 8002a2a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002a2e:	430b      	orrs	r3, r1
 8002a30:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002a34:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002a38:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002a3c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a40:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a44:	1d9a      	adds	r2, r3, #6
 8002a46:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a4a:	4413      	add	r3, r2
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2200      	movs	r2, #0
 8002a52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002a56:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002a66:	0423      	lsls	r3, r4, #16
 8002a68:	2200      	movs	r2, #0
 8002a6a:	ea40 0402 	orr.w	r4, r0, r2
 8002a6e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002a72:	430b      	orrs	r3, r1
 8002a74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002a78:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002a7c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002a80:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a84:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a88:	1dda      	adds	r2, r3, #7
 8002a8a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a8e:	4413      	add	r3, r2
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2200      	movs	r2, #0
 8002a96:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002a9a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002aaa:	0623      	lsls	r3, r4, #24
 8002aac:	2200      	movs	r2, #0
 8002aae:	ea40 0402 	orr.w	r4, r0, r2
 8002ab2:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002ab6:	430b      	orrs	r3, r1
 8002ab8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002abc:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002ac0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002ac4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ac8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002acc:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002ad0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ad4:	3308      	adds	r3, #8
 8002ad6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ae6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002aea:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002aee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002af2:	4413      	add	r3, r2
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2200      	movs	r2, #0
 8002afa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002afe:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002b02:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002b06:	4623      	mov	r3, r4
 8002b08:	4303      	orrs	r3, r0
 8002b0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002b0e:	462b      	mov	r3, r5
 8002b10:	430b      	orrs	r3, r1
 8002b12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002b16:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002b1a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b1e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b22:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b2c:	4413      	add	r3, r2
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2200      	movs	r2, #0
 8002b34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002b38:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002b48:	464c      	mov	r4, r9
 8002b4a:	0223      	lsls	r3, r4, #8
 8002b4c:	4644      	mov	r4, r8
 8002b4e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002b52:	4644      	mov	r4, r8
 8002b54:	0222      	lsls	r2, r4, #8
 8002b56:	ea40 0402 	orr.w	r4, r0, r2
 8002b5a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002b5e:	430b      	orrs	r3, r1
 8002b60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002b64:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002b68:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b6c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b70:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b74:	1c9a      	adds	r2, r3, #2
 8002b76:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b7a:	4413      	add	r3, r2
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2200      	movs	r2, #0
 8002b82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002b96:	464c      	mov	r4, r9
 8002b98:	0423      	lsls	r3, r4, #16
 8002b9a:	4644      	mov	r4, r8
 8002b9c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002ba0:	4644      	mov	r4, r8
 8002ba2:	0422      	lsls	r2, r4, #16
 8002ba4:	ea40 0402 	orr.w	r4, r0, r2
 8002ba8:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002bac:	430b      	orrs	r3, r1
 8002bae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bb2:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002bb6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002bba:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002bbe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bc2:	1cda      	adds	r2, r3, #3
 8002bc4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bc8:	4413      	add	r3, r2
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002bd4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002bd8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002bdc:	4623      	mov	r3, r4
 8002bde:	0a1b      	lsrs	r3, r3, #8
 8002be0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002be4:	4623      	mov	r3, r4
 8002be6:	061b      	lsls	r3, r3, #24
 8002be8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bec:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002bf0:	4623      	mov	r3, r4
 8002bf2:	4303      	orrs	r3, r0
 8002bf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bf8:	462b      	mov	r3, r5
 8002bfa:	430b      	orrs	r3, r1
 8002bfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c00:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002c04:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002c08:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c0c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c10:	1d1a      	adds	r2, r3, #4
 8002c12:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c16:	4413      	add	r3, r2
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c22:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002c32:	0023      	movs	r3, r4
 8002c34:	2200      	movs	r2, #0
 8002c36:	ea40 0402 	orr.w	r4, r0, r2
 8002c3a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002c3e:	430b      	orrs	r3, r1
 8002c40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002c44:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002c48:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002c4c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c50:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c54:	1d5a      	adds	r2, r3, #5
 8002c56:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c5a:	4413      	add	r3, r2
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2200      	movs	r2, #0
 8002c62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c66:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002c76:	0223      	lsls	r3, r4, #8
 8002c78:	2200      	movs	r2, #0
 8002c7a:	ea40 0402 	orr.w	r4, r0, r2
 8002c7e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002c82:	430b      	orrs	r3, r1
 8002c84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c88:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002c8c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002c90:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c94:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c98:	1d9a      	adds	r2, r3, #6
 8002c9a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c9e:	4413      	add	r3, r2
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002caa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002cba:	0423      	lsls	r3, r4, #16
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	ea40 0402 	orr.w	r4, r0, r2
 8002cc2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ccc:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002cd0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002cd4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002cd8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cdc:	1dda      	adds	r2, r3, #7
 8002cde:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ce2:	4413      	add	r3, r2
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002cfe:	0623      	lsls	r3, r4, #24
 8002d00:	2200      	movs	r2, #0
 8002d02:	ea40 0402 	orr.w	r4, r0, r2
 8002d06:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002d0a:	430b      	orrs	r3, r1
 8002d0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002d10:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002d14:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002d18:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d1c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002d20:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002d24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d28:	3308      	adds	r3, #8
 8002d2a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d3a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d3e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002d42:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d46:	4413      	add	r3, r2
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d52:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002d56:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002d5a:	4623      	mov	r3, r4
 8002d5c:	4303      	orrs	r3, r0
 8002d5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d60:	462b      	mov	r3, r5
 8002d62:	430b      	orrs	r3, r1
 8002d64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d66:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002d6a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d6e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d72:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d7c:	4413      	add	r3, r2
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2200      	movs	r2, #0
 8002d84:	673b      	str	r3, [r7, #112]	; 0x70
 8002d86:	677a      	str	r2, [r7, #116]	; 0x74
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d94:	464c      	mov	r4, r9
 8002d96:	0223      	lsls	r3, r4, #8
 8002d98:	4644      	mov	r4, r8
 8002d9a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002d9e:	4644      	mov	r4, r8
 8002da0:	0222      	lsls	r2, r4, #8
 8002da2:	ea40 0402 	orr.w	r4, r0, r2
 8002da6:	66bc      	str	r4, [r7, #104]	; 0x68
 8002da8:	430b      	orrs	r3, r1
 8002daa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dac:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002db0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002db4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002db8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dbc:	1c9a      	adds	r2, r3, #2
 8002dbe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dc2:	4413      	add	r3, r2
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2200      	movs	r2, #0
 8002dca:	663b      	str	r3, [r7, #96]	; 0x60
 8002dcc:	667a      	str	r2, [r7, #100]	; 0x64
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002dda:	464c      	mov	r4, r9
 8002ddc:	0423      	lsls	r3, r4, #16
 8002dde:	4644      	mov	r4, r8
 8002de0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002de4:	4644      	mov	r4, r8
 8002de6:	0422      	lsls	r2, r4, #16
 8002de8:	ea40 0402 	orr.w	r4, r0, r2
 8002dec:	65bc      	str	r4, [r7, #88]	; 0x58
 8002dee:	430b      	orrs	r3, r1
 8002df0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002df2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002df6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002dfa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002dfe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e02:	1cda      	adds	r2, r3, #3
 8002e04:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e08:	4413      	add	r3, r2
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2200      	movs	r2, #0
 8002e10:	653b      	str	r3, [r7, #80]	; 0x50
 8002e12:	657a      	str	r2, [r7, #84]	; 0x54
 8002e14:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002e18:	4623      	mov	r3, r4
 8002e1a:	0a1b      	lsrs	r3, r3, #8
 8002e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e1e:	4623      	mov	r3, r4
 8002e20:	061b      	lsls	r3, r3, #24
 8002e22:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e24:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002e28:	4623      	mov	r3, r4
 8002e2a:	4303      	orrs	r3, r0
 8002e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8002e2e:	462b      	mov	r3, r5
 8002e30:	430b      	orrs	r3, r1
 8002e32:	647b      	str	r3, [r7, #68]	; 0x44
 8002e34:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002e38:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002e3c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e40:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e44:	1d1a      	adds	r2, r3, #4
 8002e46:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e4a:	4413      	add	r3, r2
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2200      	movs	r2, #0
 8002e52:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002e60:	0023      	movs	r3, r4
 8002e62:	2200      	movs	r2, #0
 8002e64:	ea40 0402 	orr.w	r4, r0, r2
 8002e68:	633c      	str	r4, [r7, #48]	; 0x30
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e6e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002e72:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002e76:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e7a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e7e:	1d5a      	adds	r2, r3, #5
 8002e80:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e84:	4413      	add	r3, r2
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002e9a:	0223      	lsls	r3, r4, #8
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	ea40 0402 	orr.w	r4, r0, r2
 8002ea2:	623c      	str	r4, [r7, #32]
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002eac:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002eb0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002eb4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002eb8:	3306      	adds	r3, #6
 8002eba:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002ebe:	4413      	add	r3, r2
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	61bb      	str	r3, [r7, #24]
 8002ec8:	61fa      	str	r2, [r7, #28]
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	69bc      	ldr	r4, [r7, #24]
 8002ed4:	0423      	lsls	r3, r4, #16
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	ea40 0402 	orr.w	r4, r0, r2
 8002edc:	613c      	str	r4, [r7, #16]
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002ee6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002eea:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002eee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ef2:	3307      	adds	r3, #7
 8002ef4:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002ef8:	4413      	add	r3, r2
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2200      	movs	r2, #0
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	60fa      	str	r2, [r7, #12]
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	68bc      	ldr	r4, [r7, #8]
 8002f0e:	0623      	lsls	r3, r4, #24
 8002f10:	2200      	movs	r2, #0
 8002f12:	ea40 0402 	orr.w	r4, r0, r2
 8002f16:	603c      	str	r4, [r7, #0]
 8002f18:	430b      	orrs	r3, r1
 8002f1a:	607b      	str	r3, [r7, #4]
 8002f1c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002f20:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002f24:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002f28:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002f2c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002f30:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f34:	3308      	adds	r3, #8
 8002f36:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002f3a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002f44:	46bd      	mov	sp, r7
 8002f46:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f4a:	4770      	bx	lr

08002f4c <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	0800ddec 	.word	0x0800ddec

08002f68 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	4b03      	ldr	r3, [pc, #12]	; (8002f80 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	0800de00 	.word	0x0800de00

08002f84 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE>:
ros::Subscriber<geometry_msgs::Point> scara_sub("scara_toSTM", ROS::scara_callback);

ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
//ros::Publisher scara_pub("scara_fromSTM", &scara_state);

void ROS::scara_callback(const geometry_msgs::Point &msgs){
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	scara.ARM_Goal.Px = msgs.x;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f92:	490b      	ldr	r1, [pc, #44]	; (8002fc0 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 8002f94:	e9c1 2300 	strd	r2, r3, [r1]
	scara.ARM_Goal.Py = msgs.y;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f9e:	4908      	ldr	r1, [pc, #32]	; (8002fc0 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 8002fa0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	scara.ARM_Goal.Pz = msgs.z;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002faa:	4905      	ldr	r1, [pc, #20]	; (8002fc0 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 8002fac:	e9c1 2304 	strd	r2, r3, [r1, #16]
	scara.run();
 8002fb0:	4803      	ldr	r0, [pc, #12]	; (8002fc0 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 8002fb2:	f000 fe91 	bl	8003cd8 <_ZN5SCARA3runEv>
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	240010a8 	.word	0x240010a8

08002fc4 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE>:

void ROS::mecanum_callback(const geometry_msgs::Point &msgs){
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
	mecanum.CAR_Goal.Vx = msgs.x;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002fd2:	490b      	ldr	r1, [pc, #44]	; (8003000 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8002fd4:	e9c1 2300 	strd	r2, r3, [r1]
	mecanum.CAR_Goal.Vy = msgs.y;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002fde:	4908      	ldr	r1, [pc, #32]	; (8003000 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8002fe0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	mecanum.CAR_Goal.Omega = msgs.z;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002fea:	4905      	ldr	r1, [pc, #20]	; (8003000 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8002fec:	e9c1 2304 	strd	r2, r3, [r1, #16]
	mecanum.run();
 8002ff0:	4803      	ldr	r0, [pc, #12]	; (8003000 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8002ff2:	f7fe f9d7 	bl	80013a4 <_ZN7Mecanum3runEv>
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	24000678 	.word	0x24000678

08003004 <_ZN3ROS5setupEv>:
// 	car_speed.z = mecanum.CAR_Now.Omega;
// 	mecanum_pub.publish(&car_speed);
// }


void ROS::setup(void){
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
	nh.initNode();
 8003008:	4804      	ldr	r0, [pc, #16]	; (800301c <_ZN3ROS5setupEv+0x18>)
 800300a:	f000 f941 	bl	8003290 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

    nh.subscribe(mecanum_sub);
 800300e:	4904      	ldr	r1, [pc, #16]	; (8003020 <_ZN3ROS5setupEv+0x1c>)
 8003010:	4802      	ldr	r0, [pc, #8]	; (800301c <_ZN3ROS5setupEv+0x18>)
 8003012:	f000 f95a 	bl	80032ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>

//    nh.advertise(mecanum_pub);
}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	240006c4 	.word	0x240006c4
 8003020:	24001020 	.word	0x24001020

08003024 <_ZN3ROS4loopEv>:

void ROS::loop(void){
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8003028:	4802      	ldr	r0, [pc, #8]	; (8003034 <_ZN3ROS4loopEv+0x10>)
 800302a:	f000 f979 	bl	8003320 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	240006c4 	.word	0x240006c4

08003038 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003040:	4805      	ldr	r0, [pc, #20]	; (8003058 <HAL_UART_TxCpltCallback+0x20>)
 8003042:	f000 fb46 	bl	80036d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003046:	4603      	mov	r3, r0
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff f9d7 	bl	80023fc <_ZN13STM32Hardware5flushEv>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	240006c4 	.word	0x240006c4

0800305c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003064:	4805      	ldr	r0, [pc, #20]	; (800307c <HAL_UART_RxCpltCallback+0x20>)
 8003066:	f000 fb34 	bl	80036d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800306a:	4603      	mov	r3, r0
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff f986 	bl	800237e <_ZN13STM32Hardware10reset_rbufEv>
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	240006c4 	.word	0x240006c4

08003080 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2b03      	cmp	r3, #3
 8003092:	d80d      	bhi.n	80030b0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	fa22 f103 	lsr.w	r1, r2, r3
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4413      	add	r3, r2
 80030a4:	b2ca      	uxtb	r2, r1
 80030a6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	3301      	adds	r3, #1
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	e7ee      	b.n	800308e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80030cc:	2300      	movs	r3, #0
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d811      	bhi.n	80030fa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6839      	ldr	r1, [r7, #0]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	440a      	add	r2, r1
 80030e0:	7812      	ldrb	r2, [r2, #0]
 80030e2:	4611      	mov	r1, r2
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	00d2      	lsls	r2, r2, #3
 80030e8:	fa01 f202 	lsl.w	r2, r1, r2
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	3301      	adds	r3, #1
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	e7ea      	b.n	80030d0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80030fa:	bf00      	nop
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
	...

08003108 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	4a04      	ldr	r2, [pc, #16]	; (8003124 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	0800df0c 	.word	0x0800df0c

08003128 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff ffe8 	bl	8003108 <_ZN3ros15NodeHandleBase_C1Ev>
 8003138:	4a3a      	ldr	r2, [pc, #232]	; (8003224 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3304      	adds	r3, #4
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff f8f4 	bl	8002330 <_ZN13STM32HardwareC1Ev>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8003156:	4618      	mov	r0, r3
 8003158:	f7fe fd56 	bl	8001c08 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2b18      	cmp	r3, #24
 8003164:	d80b      	bhi.n	800317e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	2200      	movs	r2, #0
 8003174:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	3301      	adds	r3, #1
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	e7f0      	b.n	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2b18      	cmp	r3, #24
 8003186:	d80a      	bhi.n	800319e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003190:	2100      	movs	r1, #0
 8003192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	3301      	adds	r3, #1
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	e7f1      	b.n	8003182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a8:	d20a      	bcs.n	80031c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4413      	add	r3, r2
 80031b0:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	3301      	adds	r3, #1
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	e7f0      	b.n	80031a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80031c0:	2300      	movs	r3, #0
 80031c2:	60bb      	str	r3, [r7, #8]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ca:	d20a      	bcs.n	80031e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	4413      	add	r3, r2
 80031d2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80031d6:	2200      	movs	r2, #0
 80031d8:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	3301      	adds	r3, #1
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	e7f0      	b.n	80031c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	0800dec8 	.word	0x0800dec8

08003228 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	4a04      	ldr	r2, [pc, #16]	; (8003244 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	0800def4 	.word	0x0800def4

08003248 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ffe5 	bl	8003228 <_ZN3ros11Subscriber_C1Ev>
 800325e:	4a0b      	ldr	r2, [pc, #44]	; (800328c <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	3310      	adds	r3, #16
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff f975 	bl	8002558 <_ZN13geometry_msgs5PointC1Ev>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	609a      	str	r2, [r3, #8]
  };
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	0800deb0 	.word	0x0800deb0

08003290 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3304      	adds	r3, #4
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff f863 	bl	8002368 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80032ca:	b480      	push	{r7}
 80032cc:	b085      	sub	sp, #20
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80032d4:	2300      	movs	r3, #0
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b18      	cmp	r3, #24
 80032dc:	dc19      	bgt.n	8003312 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80032e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10d      	bne.n	800330a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80032ee:	6839      	ldr	r1, [r7, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80032f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	605a      	str	r2, [r3, #4]
        return true;
 8003306:	2301      	movs	r3, #1
 8003308:	e004      	b.n	8003314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	3301      	adds	r3, #1
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	e7e2      	b.n	80032d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0xe>
      }
    }
    return false;
 8003312:	2300      	movs	r3, #0
  }
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3304      	adds	r3, #4
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff f907 	bl	8002540 <_ZN13STM32Hardware4timeEv>
 8003332:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003342:	4293      	cmp	r3, r2
 8003344:	d903      	bls.n	800334e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003354:	2b00      	cmp	r3, #0
 8003356:	d009      	beq.n	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	429a      	cmp	r2, r3
 8003362:	d903      	bls.n	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003372:	2b00      	cmp	r3, #0
 8003374:	d014      	beq.n	80033a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3304      	adds	r3, #4
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff f8e0 	bl	8002540 <_ZN13STM32Hardware4timeEv>
 8003380:	4602      	mov	r2, r0
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1ad2      	subs	r2, r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800338c:	429a      	cmp	r2, r3
 800338e:	bf8c      	ite	hi
 8003390:	2301      	movhi	r3, #1
 8003392:	2300      	movls	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800339a:	f06f 0301 	mvn.w	r3, #1
 800339e:	e194      	b.n	80036ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3304      	adds	r3, #4
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fe fffb 	bl	80023a0 <_ZN13STM32Hardware4readEv>
 80033aa:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f2c0 8174 	blt.w	800369c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	441a      	add	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80033ca:	2b07      	cmp	r3, #7
 80033cc:	d11e      	bne.n	800340c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80033d4:	1c59      	adds	r1, r3, #1
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	b2d1      	uxtb	r1, r2
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	4413      	add	r3, r2
 80033e4:	460a      	mov	r2, r1
 80033e6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80033f0:	1e5a      	subs	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1b4      	bne.n	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2208      	movs	r2, #8
 8003406:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800340a:	e7af      	b.n	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003412:	2b00      	cmp	r3, #0
 8003414:	d128      	bne.n	8003468 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2bff      	cmp	r3, #255	; 0xff
 800341a:	d10d      	bne.n	8003438 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f103 0214 	add.w	r2, r3, #20
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003436:	e799      	b.n	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3304      	adds	r3, #4
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff f87f 	bl	8002540 <_ZN13STM32Hardware4timeEv>
 8003442:	4602      	mov	r2, r0
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	f241 3288 	movw	r2, #5000	; 0x1388
 800344c:	4293      	cmp	r3, r2
 800344e:	bf8c      	ite	hi
 8003450:	2301      	movhi	r3, #1
 8003452:	2300      	movls	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d088      	beq.n	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003462:	f06f 0301 	mvn.w	r3, #1
 8003466:	e130      	b.n	80036ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800346e:	2b01      	cmp	r3, #1
 8003470:	d118      	bne.n	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2bfe      	cmp	r3, #254	; 0xfe
 8003476:	d107      	bne.n	8003488 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003486:	e771      	b.n	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003496:	2b00      	cmp	r3, #0
 8003498:	f47f af68 	bne.w	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f924 	bl	80036ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80034a2:	e763      	b.n	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d113      	bne.n	80034d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80034d4:	e74a      	b.n	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d110      	bne.n	8003502 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	021b      	lsls	r3, r3, #8
 80034ea:	441a      	add	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003500:	e734      	b.n	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003508:	2b04      	cmp	r3, #4
 800350a:	d116      	bne.n	800353a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003512:	425a      	negs	r2, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	bf58      	it	pl
 800351a:	4253      	negpl	r3, r2
 800351c:	2bff      	cmp	r3, #255	; 0xff
 800351e:	d107      	bne.n	8003530 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800352e:	e71d      	b.n	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003538:	e718      	b.n	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003540:	2b05      	cmp	r3, #5
 8003542:	d10f      	bne.n	8003564 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003562:	e703      	b.n	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800356a:	2b06      	cmp	r3, #6
 800356c:	d117      	bne.n	800359e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	441a      	add	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2207      	movs	r2, #7
 8003584:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800358e:	2b00      	cmp	r3, #0
 8003590:	f47f aeec 	bne.w	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2208      	movs	r2, #8
 8003598:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800359c:	e6e6      	b.n	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	f47f aee1 	bne.w	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80035b8:	425a      	negs	r2, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	bf58      	it	pl
 80035c0:	4253      	negpl	r3, r2
 80035c2:	2bff      	cmp	r3, #255	; 0xff
 80035c4:	f47f aed2 	bne.w	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d110      	bne.n	80035f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f889 	bl	80036ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f8a4 	bl	8003726 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80035ee:	f04f 33ff 	mov.w	r3, #4294967295
 80035f2:	e06a      	b.n	80036ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80035fa:	2b0a      	cmp	r3, #10
 80035fc:	d107      	bne.n	800360e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003604:	4619      	mov	r1, r3
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f96c 	bl	80038e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800360c:	e6ae      	b.n	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003614:	2b06      	cmp	r3, #6
 8003616:	d10e      	bne.n	8003636 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003624:	4619      	mov	r1, r3
 8003626:	4610      	mov	r0, r2
 8003628:	f7fe fc23 	bl	8001e72 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003634:	e69a      	b.n	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800363c:	2b0b      	cmp	r3, #11
 800363e:	d104      	bne.n	800364a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003648:	e690      	b.n	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003650:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f202 2222 	addw	r2, r2, #546	; 0x222
 800365a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800365e:	2b00      	cmp	r3, #0
 8003660:	f43f ae84 	beq.w	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800366a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003674:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800367e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003696:	4611      	mov	r1, r2
 8003698:	4798      	blx	r3
    while (true)
 800369a:	e667      	b.n	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 800369c:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00f      	beq.n	80036c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d906      	bls.n	80036c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f815 	bl	80036ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80036c8:	2300      	movs	r3, #0
  }
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
    return &hardware_;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3304      	adds	r3, #4
  }
 80036de:	4618      	mov	r0, r3
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b086      	sub	sp, #24
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80036f2:	f107 030c 	add.w	r3, r7, #12
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd ff22 	bl	8001540 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f107 020c 	add.w	r2, r7, #12
 8003706:	210a      	movs	r1, #10
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	4798      	blx	r3
    rt_time = hardware_.time();
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3304      	adds	r3, #4
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe ff15 	bl	8002540 <_ZN13STM32Hardware4timeEv>
 8003716:	4602      	mov	r2, r0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 800371e:	bf00      	nop
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003726:	b590      	push	{r4, r7, lr}
 8003728:	b08b      	sub	sp, #44	; 0x2c
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800372e:	f107 030c 	add.w	r3, r7, #12
 8003732:	4618      	mov	r0, r3
 8003734:	f7fd fff4 	bl	8001720 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003738:	2300      	movs	r3, #0
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	2b18      	cmp	r3, #24
 8003740:	dc63      	bgt.n	800380a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d056      	beq.n	8003802 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	b29b      	uxth	r3, r3
 8003766:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	6859      	ldr	r1, [r3, #4]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3308      	adds	r3, #8
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4608      	mov	r0, r1
 80037a2:	4798      	blx	r3
 80037a4:	4603      	mov	r3, r0
 80037a6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	330c      	adds	r3, #12
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4608      	mov	r0, r1
 80037d0:	4798      	blx	r3
 80037d2:	4603      	mov	r3, r0
 80037d4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80037d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037da:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681c      	ldr	r4, [r3, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fe fce2 	bl	80021ba <_ZN3ros9Publisher15getEndpointTypeEv>
 80037f6:	4601      	mov	r1, r0
 80037f8:	f107 030c 	add.w	r3, r7, #12
 80037fc:	461a      	mov	r2, r3
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	3301      	adds	r3, #1
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
 8003808:	e798      	b.n	800373c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800380a:	2300      	movs	r3, #0
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	2b18      	cmp	r3, #24
 8003812:	dc5f      	bgt.n	80038d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003818:	f202 2222 	addw	r2, r2, #546	; 0x222
 800381c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d053      	beq.n	80038cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003828:	f202 2222 	addw	r2, r2, #546	; 0x222
 800382c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	b29b      	uxth	r3, r3
 8003834:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800383e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800384a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800384e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003856:	f202 2222 	addw	r2, r2, #546	; 0x222
 800385a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3308      	adds	r3, #8
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4608      	mov	r0, r1
 8003866:	4798      	blx	r3
 8003868:	4603      	mov	r3, r0
 800386a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003870:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003874:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	330c      	adds	r3, #12
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4608      	mov	r0, r1
 800388c:	4798      	blx	r3
 800388e:	4603      	mov	r3, r0
 8003890:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003896:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681c      	ldr	r4, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80038a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ae:	f202 2222 	addw	r2, r2, #546	; 0x222
 80038b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3304      	adds	r3, #4
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4608      	mov	r0, r1
 80038be:	4798      	blx	r3
 80038c0:	4601      	mov	r1, r0
 80038c2:	f107 030c 	add.w	r3, r7, #12
 80038c6:	461a      	mov	r2, r3
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	3301      	adds	r3, #1
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
 80038d2:	e79c      	b.n	800380e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80038dc:	bf00      	nop
 80038de:	372c      	adds	r7, #44	; 0x2c
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd90      	pop	{r4, r7, pc}

080038e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80038ee:	f107 0308 	add.w	r3, r7, #8
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fd fe24 	bl	8001540 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3304      	adds	r3, #4
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fe fe1f 	bl	8002540 <_ZN13STM32Hardware4timeEv>
 8003902:	4602      	mov	r2, r0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800390e:	f107 0308 	add.w	r3, r7, #8
 8003912:	6839      	ldr	r1, [r7, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f7fd fe83 	bl	8001620 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	4915      	ldr	r1, [pc, #84]	; (8003974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003920:	fba1 1303 	umull	r1, r3, r1, r3
 8003924:	099b      	lsrs	r3, r3, #6
 8003926:	4413      	add	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800392a:	6939      	ldr	r1, [r7, #16]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4b11      	ldr	r3, [pc, #68]	; (8003974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003930:	fba3 0302 	umull	r0, r3, r3, r2
 8003934:	099b      	lsrs	r3, r3, #6
 8003936:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800393a:	fb00 f303 	mul.w	r3, r0, r3
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	4a0d      	ldr	r2, [pc, #52]	; (8003978 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	440b      	add	r3, r1
 8003948:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800394a:	f107 0308 	add.w	r3, r7, #8
 800394e:	3304      	adds	r3, #4
 8003950:	4619      	mov	r1, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f8a6 	bl	8003aa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3304      	adds	r3, #4
 800395c:	4618      	mov	r0, r3
 800395e:	f7fe fdef 	bl	8002540 <_ZN13STM32Hardware4timeEv>
 8003962:	4602      	mov	r2, r0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800396a:	bf00      	nop
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	10624dd3 	.word	0x10624dd3
 8003978:	000f4240 	.word	0x000f4240

0800397c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2b63      	cmp	r3, #99	; 0x63
 800398c:	dd09      	ble.n	80039a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003994:	f083 0301 	eor.w	r3, r3, #1
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800399e:	2300      	movs	r3, #0
 80039a0:	e079      	b.n	8003a96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80039ae:	3207      	adds	r2, #7
 80039b0:	4611      	mov	r1, r2
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	4798      	blx	r3
 80039b6:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	22ff      	movs	r2, #255	; 0xff
 80039bc:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	22fe      	movs	r2, #254	; 0xfe
 80039c4:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	0a1b      	lsrs	r3, r3, #8
 80039d8:	b29b      	uxth	r3, r3
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80039ee:	4413      	add	r3, r2
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	43db      	mvns	r3, r3
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	b21b      	sxth	r3, r3
 8003a0a:	121b      	asrs	r3, r3, #8
 8003a0c:	b21b      	sxth	r3, r3
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003a1a:	2305      	movs	r3, #5
 8003a1c:	61bb      	str	r3, [r7, #24]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	3306      	adds	r3, #6
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	dc0d      	bgt.n	8003a44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	461a      	mov	r2, r3
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	e7ec      	b.n	8003a1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	3307      	adds	r3, #7
 8003a48:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	425a      	negs	r2, r3
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	bf58      	it	pl
 8003a54:	4253      	negpl	r3, r2
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	1c59      	adds	r1, r3, #1
 8003a5c:	6179      	str	r1, [r7, #20]
 8003a5e:	43d2      	mvns	r2, r2
 8003a60:	b2d1      	uxtb	r1, r2
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4413      	add	r3, r2
 8003a66:	460a      	mov	r2, r1
 8003a68:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a72:	dc0a      	bgt.n	8003a8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1d18      	adds	r0, r3, #4
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4619      	mov	r1, r3
 8003a82:	f7fe fd17 	bl	80024b4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	e005      	b.n	8003a96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003a8a:	4905      	ldr	r1, [pc, #20]	; (8003aa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f849 	bl	8003b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003a92:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003a96:	4618      	mov	r0, r3
 8003a98:	3720      	adds	r7, #32
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	0800de24 	.word	0x0800de24

08003aa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe fd44 	bl	8002540 <_ZN13STM32Hardware4timeEv>
 8003ab8:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4915      	ldr	r1, [pc, #84]	; (8003b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003ac2:	fba1 1303 	umull	r1, r3, r1, r3
 8003ac6:	099b      	lsrs	r3, r3, #6
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	1e5a      	subs	r2, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6859      	ldr	r1, [r3, #4]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4b0f      	ldr	r3, [pc, #60]	; (8003b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003ada:	fba3 0302 	umull	r0, r3, r3, r2
 8003ade:	099b      	lsrs	r3, r3, #6
 8003ae0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ae4:	fb00 f303 	mul.w	r3, r0, r3
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	4a0c      	ldr	r2, [pc, #48]	; (8003b1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8003aec:	fb02 f303 	mul.w	r3, r2, r3
 8003af0:	1aca      	subs	r2, r1, r3
 8003af2:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003af4:	4413      	add	r3, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	f7fc fd8a 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003b10:	bf00      	nop
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	10624dd3 	.word	0x10624dd3
 8003b1c:	000f4240 	.word	0x000f4240
 8003b20:	3b9aca00 	.word	0x3b9aca00

08003b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	2103      	movs	r1, #3
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f804 	bl	8003b40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003b4e:	f107 0314 	add.w	r3, r7, #20
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fd ffa8 	bl	8001aa8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003b58:	7afb      	ldrb	r3, [r7, #11]
 8003b5a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f107 0214 	add.w	r2, r7, #20
 8003b6a:	2107      	movs	r1, #7
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	4798      	blx	r3
  }
 8003b70:	bf00      	nop
 8003b72:	3720      	adds	r7, #32
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <_Z41__static_initialization_and_destruction_0ii>:
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d11c      	bne.n	8003bc2 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d117      	bne.n	8003bc2 <_Z41__static_initialization_and_destruction_0ii+0x4a>
ros::NodeHandle nh;
 8003b92:	480e      	ldr	r0, [pc, #56]	; (8003bcc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003b94:	f7ff fac8 	bl	8003128 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
geometry_msgs::Point car_speed;
 8003b98:	480d      	ldr	r0, [pc, #52]	; (8003bd0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003b9a:	f7fe fcdd 	bl	8002558 <_ZN13geometry_msgs5PointC1Ev>
ros::Subscriber<geometry_msgs::Point> mecanum_sub("mecanum_toSTM", ROS::mecanum_callback);
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	4a0c      	ldr	r2, [pc, #48]	; (8003bd4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003ba2:	490d      	ldr	r1, [pc, #52]	; (8003bd8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003ba4:	480d      	ldr	r0, [pc, #52]	; (8003bdc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003ba6:	f7ff fb4f 	bl	8003248 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<geometry_msgs::Point> scara_sub("scara_toSTM", ROS::scara_callback);
 8003baa:	2301      	movs	r3, #1
 8003bac:	4a0c      	ldr	r2, [pc, #48]	; (8003be0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003bae:	490d      	ldr	r1, [pc, #52]	; (8003be4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003bb0:	480d      	ldr	r0, [pc, #52]	; (8003be8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003bb2:	f7ff fb49 	bl	8003248 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	4a05      	ldr	r2, [pc, #20]	; (8003bd0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003bba:	490c      	ldr	r1, [pc, #48]	; (8003bec <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003bbc:	480c      	ldr	r0, [pc, #48]	; (8003bf0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003bbe:	f7fe fae5 	bl	800218c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	240006c4 	.word	0x240006c4
 8003bd0:	24001000 	.word	0x24001000
 8003bd4:	08002fc5 	.word	0x08002fc5
 8003bd8:	0800de60 	.word	0x0800de60
 8003bdc:	24001020 	.word	0x24001020
 8003be0:	08002f85 	.word	0x08002f85
 8003be4:	0800de70 	.word	0x0800de70
 8003be8:	24001058 	.word	0x24001058
 8003bec:	0800de7c 	.word	0x0800de7c
 8003bf0:	24001090 	.word	0x24001090

08003bf4 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3310      	adds	r3, #16
 8003c02:	6839      	ldr	r1, [r7, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fe fe42 	bl	800288e <_ZN13geometry_msgs5Point11deserializeEPh>
    this->cb_(msg);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	3210      	adds	r2, #16
 8003c12:	4610      	mov	r0, r2
 8003c14:	4798      	blx	r3
  }
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b082      	sub	sp, #8
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3310      	adds	r3, #16
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff f982 	bl	8002f4c <_ZN13geometry_msgs5Point7getTypeEv>
 8003c48:	4603      	mov	r3, r0
  }
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b082      	sub	sp, #8
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3310      	adds	r3, #16
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff f982 	bl	8002f68 <_ZN13geometry_msgs5Point6getMD5Ev>
 8003c64:	4603      	mov	r3, r0
  }
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
    return configured_;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <_GLOBAL__sub_I_nh>:
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c90:	2001      	movs	r0, #1
 8003c92:	f7ff ff71 	bl	8003b78 <_Z41__static_initialization_and_destruction_0ii>
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <_ZN8ARM_INFOC1Ev>:
	double Py;
	double Pz;

	// pub to ROS //
	bool is_finished = false;
} ARM_INFO;
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	761a      	strb	r2, [r3, #24]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <_ZN5SCARAC1Ev>:

class SCARA{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff ffea 	bl	8003c98 <_ZN8ARM_INFOC1Ev>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3320      	adds	r3, #32
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff ffe5 	bl	8003c98 <_ZN8ARM_INFOC1Ev>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <_ZN5SCARA3runEv>:
#include "scara.h"
#include "stepper.h"

SCARA scara;

void SCARA::run(void){
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
	SCARA::tf2_arm_angle();
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f804 	bl	8003cee <_ZN5SCARA13tf2_arm_angleEv>
}
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <_ZN5SCARA13tf2_arm_angleEv>:


void SCARA::tf2_arm_angle(void){
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]


}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
	...

08003d04 <_Z41__static_initialization_and_destruction_0ii>:
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d107      	bne.n	8003d24 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d102      	bne.n	8003d24 <_Z41__static_initialization_and_destruction_0ii+0x20>
SCARA scara;
 8003d1e:	4803      	ldr	r0, [pc, #12]	; (8003d2c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003d20:	f7ff ffc8 	bl	8003cb4 <_ZN5SCARAC1Ev>
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	240010a8 	.word	0x240010a8

08003d30 <_GLOBAL__sub_I_scara>:
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d38:	2001      	movs	r0, #1
 8003d3a:	f7ff ffe3 	bl	8003d04 <_Z41__static_initialization_and_destruction_0ii>
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d46:	4b0d      	ldr	r3, [pc, #52]	; (8003d7c <HAL_MspInit+0x3c>)
 8003d48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d4c:	4a0b      	ldr	r2, [pc, #44]	; (8003d7c <HAL_MspInit+0x3c>)
 8003d4e:	f043 0302 	orr.w	r3, r3, #2
 8003d52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003d56:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <HAL_MspInit+0x3c>)
 8003d58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003d64:	2200      	movs	r2, #0
 8003d66:	2100      	movs	r1, #0
 8003d68:	2005      	movs	r0, #5
 8003d6a:	f000 fee6 	bl	8004b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003d6e:	2005      	movs	r0, #5
 8003d70:	f000 fefd 	bl	8004b6e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d74:	bf00      	nop
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	58024400 	.word	0x58024400

08003d80 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b090      	sub	sp, #64	; 0x40
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	605a      	str	r2, [r3, #4]
 8003d92:	609a      	str	r2, [r3, #8]
 8003d94:	60da      	str	r2, [r3, #12]
 8003d96:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da0:	d14e      	bne.n	8003e40 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003da2:	4b77      	ldr	r3, [pc, #476]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003da4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003da8:	4a75      	ldr	r2, [pc, #468]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003db2:	4b73      	ldr	r3, [pc, #460]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003db4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc0:	4b6f      	ldr	r3, [pc, #444]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dc6:	4a6e      	ldr	r2, [pc, #440]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dd0:	4b6b      	ldr	r3, [pc, #428]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dde:	4b68      	ldr	r3, [pc, #416]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003de4:	4a66      	ldr	r2, [pc, #408]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003de6:	f043 0302 	orr.w	r3, r3, #2
 8003dea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dee:	4b64      	ldr	r3, [pc, #400]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	623b      	str	r3, [r7, #32]
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003dfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e02:	2302      	movs	r3, #2
 8003e04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e16:	4619      	mov	r1, r3
 8003e18:	485a      	ldr	r0, [pc, #360]	; (8003f84 <HAL_TIM_Encoder_MspInit+0x204>)
 8003e1a:	f003 fcfd 	bl	8007818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e1e:	2308      	movs	r3, #8
 8003e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e22:	2302      	movs	r3, #2
 8003e24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e36:	4619      	mov	r1, r3
 8003e38:	4853      	ldr	r0, [pc, #332]	; (8003f88 <HAL_TIM_Encoder_MspInit+0x208>)
 8003e3a:	f003 fced 	bl	8007818 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003e3e:	e09b      	b.n	8003f78 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a51      	ldr	r2, [pc, #324]	; (8003f8c <HAL_TIM_Encoder_MspInit+0x20c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d12e      	bne.n	8003ea8 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e4a:	4b4d      	ldr	r3, [pc, #308]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e50:	4a4b      	ldr	r2, [pc, #300]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e52:	f043 0302 	orr.w	r3, r3, #2
 8003e56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e5a:	4b49      	ldr	r3, [pc, #292]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	61fb      	str	r3, [r7, #28]
 8003e66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e68:	4b45      	ldr	r3, [pc, #276]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e6e:	4a44      	ldr	r2, [pc, #272]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e70:	f043 0302 	orr.w	r3, r3, #2
 8003e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e78:	4b41      	ldr	r3, [pc, #260]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003e86:	2330      	movs	r3, #48	; 0x30
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e92:	2300      	movs	r3, #0
 8003e94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e96:	2302      	movs	r3, #2
 8003e98:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4839      	ldr	r0, [pc, #228]	; (8003f88 <HAL_TIM_Encoder_MspInit+0x208>)
 8003ea2:	f003 fcb9 	bl	8007818 <HAL_GPIO_Init>
}
 8003ea6:	e067      	b.n	8003f78 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a38      	ldr	r2, [pc, #224]	; (8003f90 <HAL_TIM_Encoder_MspInit+0x210>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d12f      	bne.n	8003f12 <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003eb2:	4b33      	ldr	r3, [pc, #204]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003eb8:	4a31      	ldr	r2, [pc, #196]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003eba:	f043 0304 	orr.w	r3, r3, #4
 8003ebe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ec2:	4b2f      	ldr	r3, [pc, #188]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003ec4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	617b      	str	r3, [r7, #20]
 8003ece:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ed0:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ed6:	4a2a      	ldr	r2, [pc, #168]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003ed8:	f043 0308 	orr.w	r3, r3, #8
 8003edc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ee0:	4b27      	ldr	r3, [pc, #156]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003eee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003efc:	2300      	movs	r3, #0
 8003efe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003f00:	2302      	movs	r3, #2
 8003f02:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4822      	ldr	r0, [pc, #136]	; (8003f94 <HAL_TIM_Encoder_MspInit+0x214>)
 8003f0c:	f003 fc84 	bl	8007818 <HAL_GPIO_Init>
}
 8003f10:	e032      	b.n	8003f78 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a20      	ldr	r2, [pc, #128]	; (8003f98 <HAL_TIM_Encoder_MspInit+0x218>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d12d      	bne.n	8003f78 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f1c:	4b18      	ldr	r3, [pc, #96]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f22:	4a17      	ldr	r2, [pc, #92]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f24:	f043 0308 	orr.w	r3, r3, #8
 8003f28:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f2c:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f3a:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f40:	4a0f      	ldr	r2, [pc, #60]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f4a:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f64:	2300      	movs	r3, #0
 8003f66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003f68:	2302      	movs	r3, #2
 8003f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f70:	4619      	mov	r1, r3
 8003f72:	4804      	ldr	r0, [pc, #16]	; (8003f84 <HAL_TIM_Encoder_MspInit+0x204>)
 8003f74:	f003 fc50 	bl	8007818 <HAL_GPIO_Init>
}
 8003f78:	bf00      	nop
 8003f7a:	3740      	adds	r7, #64	; 0x40
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	58024400 	.word	0x58024400
 8003f84:	58020000 	.word	0x58020000
 8003f88:	58020400 	.word	0x58020400
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40000800 	.word	0x40000800
 8003f94:	58020c00 	.word	0x58020c00
 8003f98:	40000c00 	.word	0x40000c00

08003f9c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a1d      	ldr	r2, [pc, #116]	; (8004020 <HAL_TIM_PWM_MspInit+0x84>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d117      	bne.n	8003fde <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003fae:	4b1d      	ldr	r3, [pc, #116]	; (8004024 <HAL_TIM_PWM_MspInit+0x88>)
 8003fb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fb4:	4a1b      	ldr	r2, [pc, #108]	; (8004024 <HAL_TIM_PWM_MspInit+0x88>)
 8003fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003fbe:	4b19      	ldr	r3, [pc, #100]	; (8004024 <HAL_TIM_PWM_MspInit+0x88>)
 8003fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2100      	movs	r1, #0
 8003fd0:	202b      	movs	r0, #43	; 0x2b
 8003fd2:	f000 fdb2 	bl	8004b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003fd6:	202b      	movs	r0, #43	; 0x2b
 8003fd8:	f000 fdc9 	bl	8004b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003fdc:	e01b      	b.n	8004016 <HAL_TIM_PWM_MspInit+0x7a>
  else if(htim_pwm->Instance==TIM15)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a11      	ldr	r2, [pc, #68]	; (8004028 <HAL_TIM_PWM_MspInit+0x8c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d116      	bne.n	8004016 <HAL_TIM_PWM_MspInit+0x7a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003fe8:	4b0e      	ldr	r3, [pc, #56]	; (8004024 <HAL_TIM_PWM_MspInit+0x88>)
 8003fea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fee:	4a0d      	ldr	r2, [pc, #52]	; (8004024 <HAL_TIM_PWM_MspInit+0x88>)
 8003ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <HAL_TIM_PWM_MspInit+0x88>)
 8003ffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8004006:	2200      	movs	r2, #0
 8004008:	2100      	movs	r1, #0
 800400a:	2074      	movs	r0, #116	; 0x74
 800400c:	f000 fd95 	bl	8004b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8004010:	2074      	movs	r0, #116	; 0x74
 8004012:	f000 fdac 	bl	8004b6e <HAL_NVIC_EnableIRQ>
}
 8004016:	bf00      	nop
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40001800 	.word	0x40001800
 8004024:	58024400 	.word	0x58024400
 8004028:	40014000 	.word	0x40014000

0800402c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a0e      	ldr	r2, [pc, #56]	; (8004074 <HAL_TIM_Base_MspInit+0x48>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d116      	bne.n	800406c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800403e:	4b0e      	ldr	r3, [pc, #56]	; (8004078 <HAL_TIM_Base_MspInit+0x4c>)
 8004040:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004044:	4a0c      	ldr	r2, [pc, #48]	; (8004078 <HAL_TIM_Base_MspInit+0x4c>)
 8004046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800404a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800404e:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <HAL_TIM_Base_MspInit+0x4c>)
 8004050:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800405c:	2200      	movs	r2, #0
 800405e:	2100      	movs	r1, #0
 8004060:	202c      	movs	r0, #44	; 0x2c
 8004062:	f000 fd6a 	bl	8004b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004066:	202c      	movs	r0, #44	; 0x2c
 8004068:	f000 fd81 	bl	8004b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800406c:	bf00      	nop
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40001c00 	.word	0x40001c00
 8004078:	58024400 	.word	0x58024400

0800407c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08a      	sub	sp, #40	; 0x28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004084:	f107 0314 	add.w	r3, r7, #20
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	605a      	str	r2, [r3, #4]
 800408e:	609a      	str	r2, [r3, #8]
 8004090:	60da      	str	r2, [r3, #12]
 8004092:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a25      	ldr	r2, [pc, #148]	; (8004130 <HAL_TIM_MspPostInit+0xb4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d120      	bne.n	80040e0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800409e:	4b25      	ldr	r3, [pc, #148]	; (8004134 <HAL_TIM_MspPostInit+0xb8>)
 80040a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040a4:	4a23      	ldr	r2, [pc, #140]	; (8004134 <HAL_TIM_MspPostInit+0xb8>)
 80040a6:	f043 0302 	orr.w	r3, r3, #2
 80040aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040ae:	4b21      	ldr	r3, [pc, #132]	; (8004134 <HAL_TIM_MspPostInit+0xb8>)
 80040b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80040bc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80040c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c2:	2302      	movs	r3, #2
 80040c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c6:	2300      	movs	r3, #0
 80040c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ca:	2300      	movs	r3, #0
 80040cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80040ce:	2302      	movs	r3, #2
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d2:	f107 0314 	add.w	r3, r7, #20
 80040d6:	4619      	mov	r1, r3
 80040d8:	4817      	ldr	r0, [pc, #92]	; (8004138 <HAL_TIM_MspPostInit+0xbc>)
 80040da:	f003 fb9d 	bl	8007818 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80040de:	e023      	b.n	8004128 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM15)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a15      	ldr	r2, [pc, #84]	; (800413c <HAL_TIM_MspPostInit+0xc0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d11e      	bne.n	8004128 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80040ea:	4b12      	ldr	r3, [pc, #72]	; (8004134 <HAL_TIM_MspPostInit+0xb8>)
 80040ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040f0:	4a10      	ldr	r2, [pc, #64]	; (8004134 <HAL_TIM_MspPostInit+0xb8>)
 80040f2:	f043 0310 	orr.w	r3, r3, #16
 80040f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040fa:	4b0e      	ldr	r3, [pc, #56]	; (8004134 <HAL_TIM_MspPostInit+0xb8>)
 80040fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004100:	f003 0310 	and.w	r3, r3, #16
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004108:	2360      	movs	r3, #96	; 0x60
 800410a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800410c:	2302      	movs	r3, #2
 800410e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004110:	2300      	movs	r3, #0
 8004112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004114:	2300      	movs	r3, #0
 8004116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004118:	2304      	movs	r3, #4
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800411c:	f107 0314 	add.w	r3, r7, #20
 8004120:	4619      	mov	r1, r3
 8004122:	4807      	ldr	r0, [pc, #28]	; (8004140 <HAL_TIM_MspPostInit+0xc4>)
 8004124:	f003 fb78 	bl	8007818 <HAL_GPIO_Init>
}
 8004128:	bf00      	nop
 800412a:	3728      	adds	r7, #40	; 0x28
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40001800 	.word	0x40001800
 8004134:	58024400 	.word	0x58024400
 8004138:	58020400 	.word	0x58020400
 800413c:	40014000 	.word	0x40014000
 8004140:	58021000 	.word	0x58021000

08004144 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b0b6      	sub	sp, #216	; 0xd8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800414c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	605a      	str	r2, [r3, #4]
 8004156:	609a      	str	r2, [r3, #8]
 8004158:	60da      	str	r2, [r3, #12]
 800415a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800415c:	f107 0310 	add.w	r3, r7, #16
 8004160:	22b4      	movs	r2, #180	; 0xb4
 8004162:	2100      	movs	r1, #0
 8004164:	4618      	mov	r0, r3
 8004166:	f009 fc41 	bl	800d9ec <memset>
  if(huart->Instance==USART1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a57      	ldr	r2, [pc, #348]	; (80042cc <HAL_UART_MspInit+0x188>)
 8004170:	4293      	cmp	r3, r2
 8004172:	f040 80a7 	bne.w	80042c4 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004176:	2301      	movs	r3, #1
 8004178:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800417a:	2300      	movs	r3, #0
 800417c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004180:	f107 0310 	add.w	r3, r7, #16
 8004184:	4618      	mov	r0, r3
 8004186:	f004 fc7d 	bl	8008a84 <HAL_RCCEx_PeriphCLKConfig>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004190:	f7fd f89e 	bl	80012d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004194:	4b4e      	ldr	r3, [pc, #312]	; (80042d0 <HAL_UART_MspInit+0x18c>)
 8004196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800419a:	4a4d      	ldr	r2, [pc, #308]	; (80042d0 <HAL_UART_MspInit+0x18c>)
 800419c:	f043 0310 	orr.w	r3, r3, #16
 80041a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80041a4:	4b4a      	ldr	r3, [pc, #296]	; (80042d0 <HAL_UART_MspInit+0x18c>)
 80041a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041aa:	f003 0310 	and.w	r3, r3, #16
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041b2:	4b47      	ldr	r3, [pc, #284]	; (80042d0 <HAL_UART_MspInit+0x18c>)
 80041b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041b8:	4a45      	ldr	r2, [pc, #276]	; (80042d0 <HAL_UART_MspInit+0x18c>)
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041c2:	4b43      	ldr	r3, [pc, #268]	; (80042d0 <HAL_UART_MspInit+0x18c>)
 80041c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80041d0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80041d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d8:	2302      	movs	r3, #2
 80041da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e4:	2300      	movs	r3, #0
 80041e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041ea:	2307      	movs	r3, #7
 80041ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80041f4:	4619      	mov	r1, r3
 80041f6:	4837      	ldr	r0, [pc, #220]	; (80042d4 <HAL_UART_MspInit+0x190>)
 80041f8:	f003 fb0e 	bl	8007818 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80041fc:	4b36      	ldr	r3, [pc, #216]	; (80042d8 <HAL_UART_MspInit+0x194>)
 80041fe:	4a37      	ldr	r2, [pc, #220]	; (80042dc <HAL_UART_MspInit+0x198>)
 8004200:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004202:	4b35      	ldr	r3, [pc, #212]	; (80042d8 <HAL_UART_MspInit+0x194>)
 8004204:	2229      	movs	r2, #41	; 0x29
 8004206:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004208:	4b33      	ldr	r3, [pc, #204]	; (80042d8 <HAL_UART_MspInit+0x194>)
 800420a:	2200      	movs	r2, #0
 800420c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800420e:	4b32      	ldr	r3, [pc, #200]	; (80042d8 <HAL_UART_MspInit+0x194>)
 8004210:	2200      	movs	r2, #0
 8004212:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004214:	4b30      	ldr	r3, [pc, #192]	; (80042d8 <HAL_UART_MspInit+0x194>)
 8004216:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800421a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800421c:	4b2e      	ldr	r3, [pc, #184]	; (80042d8 <HAL_UART_MspInit+0x194>)
 800421e:	2200      	movs	r2, #0
 8004220:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004222:	4b2d      	ldr	r3, [pc, #180]	; (80042d8 <HAL_UART_MspInit+0x194>)
 8004224:	2200      	movs	r2, #0
 8004226:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004228:	4b2b      	ldr	r3, [pc, #172]	; (80042d8 <HAL_UART_MspInit+0x194>)
 800422a:	2200      	movs	r2, #0
 800422c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800422e:	4b2a      	ldr	r3, [pc, #168]	; (80042d8 <HAL_UART_MspInit+0x194>)
 8004230:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004234:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004236:	4b28      	ldr	r3, [pc, #160]	; (80042d8 <HAL_UART_MspInit+0x194>)
 8004238:	2200      	movs	r2, #0
 800423a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800423c:	4826      	ldr	r0, [pc, #152]	; (80042d8 <HAL_UART_MspInit+0x194>)
 800423e:	f000 fcb1 	bl	8004ba4 <HAL_DMA_Init>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8004248:	f7fd f842 	bl	80012d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a22      	ldr	r2, [pc, #136]	; (80042d8 <HAL_UART_MspInit+0x194>)
 8004250:	67da      	str	r2, [r3, #124]	; 0x7c
 8004252:	4a21      	ldr	r2, [pc, #132]	; (80042d8 <HAL_UART_MspInit+0x194>)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8004258:	4b21      	ldr	r3, [pc, #132]	; (80042e0 <HAL_UART_MspInit+0x19c>)
 800425a:	4a22      	ldr	r2, [pc, #136]	; (80042e4 <HAL_UART_MspInit+0x1a0>)
 800425c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800425e:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <HAL_UART_MspInit+0x19c>)
 8004260:	222a      	movs	r2, #42	; 0x2a
 8004262:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004264:	4b1e      	ldr	r3, [pc, #120]	; (80042e0 <HAL_UART_MspInit+0x19c>)
 8004266:	2240      	movs	r2, #64	; 0x40
 8004268:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800426a:	4b1d      	ldr	r3, [pc, #116]	; (80042e0 <HAL_UART_MspInit+0x19c>)
 800426c:	2200      	movs	r2, #0
 800426e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004270:	4b1b      	ldr	r3, [pc, #108]	; (80042e0 <HAL_UART_MspInit+0x19c>)
 8004272:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004276:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004278:	4b19      	ldr	r3, [pc, #100]	; (80042e0 <HAL_UART_MspInit+0x19c>)
 800427a:	2200      	movs	r2, #0
 800427c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800427e:	4b18      	ldr	r3, [pc, #96]	; (80042e0 <HAL_UART_MspInit+0x19c>)
 8004280:	2200      	movs	r2, #0
 8004282:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004284:	4b16      	ldr	r3, [pc, #88]	; (80042e0 <HAL_UART_MspInit+0x19c>)
 8004286:	2200      	movs	r2, #0
 8004288:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800428a:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <HAL_UART_MspInit+0x19c>)
 800428c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004290:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004292:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <HAL_UART_MspInit+0x19c>)
 8004294:	2200      	movs	r2, #0
 8004296:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004298:	4811      	ldr	r0, [pc, #68]	; (80042e0 <HAL_UART_MspInit+0x19c>)
 800429a:	f000 fc83 	bl	8004ba4 <HAL_DMA_Init>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 80042a4:	f7fd f814 	bl	80012d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a0d      	ldr	r2, [pc, #52]	; (80042e0 <HAL_UART_MspInit+0x19c>)
 80042ac:	679a      	str	r2, [r3, #120]	; 0x78
 80042ae:	4a0c      	ldr	r2, [pc, #48]	; (80042e0 <HAL_UART_MspInit+0x19c>)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80042b4:	2200      	movs	r2, #0
 80042b6:	2100      	movs	r1, #0
 80042b8:	2025      	movs	r0, #37	; 0x25
 80042ba:	f000 fc3e 	bl	8004b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80042be:	2025      	movs	r0, #37	; 0x25
 80042c0:	f000 fc55 	bl	8004b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80042c4:	bf00      	nop
 80042c6:	37d8      	adds	r7, #216	; 0xd8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40011000 	.word	0x40011000
 80042d0:	58024400 	.word	0x58024400
 80042d4:	58020000 	.word	0x58020000
 80042d8:	24000584 	.word	0x24000584
 80042dc:	40020010 	.word	0x40020010
 80042e0:	240005fc 	.word	0x240005fc
 80042e4:	40020028 	.word	0x40020028

080042e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042ec:	e7fe      	b.n	80042ec <NMI_Handler+0x4>

080042ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042ee:	b480      	push	{r7}
 80042f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042f2:	e7fe      	b.n	80042f2 <HardFault_Handler+0x4>

080042f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042f8:	e7fe      	b.n	80042f8 <MemManage_Handler+0x4>

080042fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042fa:	b480      	push	{r7}
 80042fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042fe:	e7fe      	b.n	80042fe <BusFault_Handler+0x4>

08004300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004304:	e7fe      	b.n	8004304 <UsageFault_Handler+0x4>

08004306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004306:	b480      	push	{r7}
 8004308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800430a:	bf00      	nop
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004318:	bf00      	nop
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004322:	b480      	push	{r7}
 8004324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004326:	bf00      	nop
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004334:	f000 fb06 	bl	8004944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004338:	bf00      	nop
 800433a:	bd80      	pop	{r7, pc}

0800433c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004340:	bf00      	nop
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
	...

0800434c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004350:	4802      	ldr	r0, [pc, #8]	; (800435c <DMA1_Stream0_IRQHandler+0x10>)
 8004352:	f001 ff4f 	bl	80061f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004356:	bf00      	nop
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	24000584 	.word	0x24000584

08004360 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004364:	4802      	ldr	r0, [pc, #8]	; (8004370 <DMA1_Stream1_IRQHandler+0x10>)
 8004366:	f001 ff45 	bl	80061f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800436a:	bf00      	nop
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	240005fc 	.word	0x240005fc

08004374 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004378:	4802      	ldr	r0, [pc, #8]	; (8004384 <USART1_IRQHandler+0x10>)
 800437a:	f007 fb01 	bl	800b980 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800437e:	bf00      	nop
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	240004f4 	.word	0x240004f4

08004388 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 800438c:	4802      	ldr	r0, [pc, #8]	; (8004398 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800438e:	f006 fa67 	bl	800a860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8004392:	bf00      	nop
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	24000410 	.word	0x24000410

0800439c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80043a0:	4802      	ldr	r0, [pc, #8]	; (80043ac <TIM8_UP_TIM13_IRQHandler+0x10>)
 80043a2:	f006 fa5d 	bl	800a860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80043a6:	bf00      	nop
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	2400045c 	.word	0x2400045c

080043b0 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80043b4:	4802      	ldr	r0, [pc, #8]	; (80043c0 <TIM15_IRQHandler+0x10>)
 80043b6:	f006 fa53 	bl	800a860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80043ba:	bf00      	nop
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	240004a8 	.word	0x240004a8

080043c4 <_ZN3STM5setupEv>:
#include "stm_main.h"
#include "dc_motor.h"
#include "mecanum.h"

void STM::setup(void){
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
	DC_motor_init();
 80043c8:	f7fc f958 	bl	800067c <_Z13DC_motor_initv>
}
 80043cc:	bf00      	nop
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <_ZN3STM11run_mecanumEv>:

void STM::run_mecanum(void){
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
	mecanum.run();
 80043d4:	4802      	ldr	r0, [pc, #8]	; (80043e0 <_ZN3STM11run_mecanumEv+0x10>)
 80043d6:	f7fc ffe5 	bl	80013a4 <_ZN7Mecanum3runEv>
}
 80043da:	bf00      	nop
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	24000678 	.word	0x24000678

080043e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
	return 1;
 80043e8:	2301      	movs	r3, #1
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <_kill>:

int _kill(int pid, int sig)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80043fe:	f009 fabd 	bl	800d97c <__errno>
 8004402:	4603      	mov	r3, r0
 8004404:	2216      	movs	r2, #22
 8004406:	601a      	str	r2, [r3, #0]
	return -1;
 8004408:	f04f 33ff 	mov.w	r3, #4294967295
}
 800440c:	4618      	mov	r0, r3
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <_exit>:

void _exit (int status)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800441c:	f04f 31ff 	mov.w	r1, #4294967295
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7ff ffe7 	bl	80043f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004426:	e7fe      	b.n	8004426 <_exit+0x12>

08004428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004430:	4a14      	ldr	r2, [pc, #80]	; (8004484 <_sbrk+0x5c>)
 8004432:	4b15      	ldr	r3, [pc, #84]	; (8004488 <_sbrk+0x60>)
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800443c:	4b13      	ldr	r3, [pc, #76]	; (800448c <_sbrk+0x64>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d102      	bne.n	800444a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004444:	4b11      	ldr	r3, [pc, #68]	; (800448c <_sbrk+0x64>)
 8004446:	4a12      	ldr	r2, [pc, #72]	; (8004490 <_sbrk+0x68>)
 8004448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800444a:	4b10      	ldr	r3, [pc, #64]	; (800448c <_sbrk+0x64>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4413      	add	r3, r2
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	429a      	cmp	r2, r3
 8004456:	d207      	bcs.n	8004468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004458:	f009 fa90 	bl	800d97c <__errno>
 800445c:	4603      	mov	r3, r0
 800445e:	220c      	movs	r2, #12
 8004460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004462:	f04f 33ff 	mov.w	r3, #4294967295
 8004466:	e009      	b.n	800447c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004468:	4b08      	ldr	r3, [pc, #32]	; (800448c <_sbrk+0x64>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800446e:	4b07      	ldr	r3, [pc, #28]	; (800448c <_sbrk+0x64>)
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4413      	add	r3, r2
 8004476:	4a05      	ldr	r2, [pc, #20]	; (800448c <_sbrk+0x64>)
 8004478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800447a:	68fb      	ldr	r3, [r7, #12]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	24050000 	.word	0x24050000
 8004488:	00000400 	.word	0x00000400
 800448c:	240010e8 	.word	0x240010e8
 8004490:	24001100 	.word	0x24001100

08004494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004498:	4b32      	ldr	r3, [pc, #200]	; (8004564 <SystemInit+0xd0>)
 800449a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449e:	4a31      	ldr	r2, [pc, #196]	; (8004564 <SystemInit+0xd0>)
 80044a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80044a8:	4b2f      	ldr	r3, [pc, #188]	; (8004568 <SystemInit+0xd4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	2b06      	cmp	r3, #6
 80044b2:	d807      	bhi.n	80044c4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80044b4:	4b2c      	ldr	r3, [pc, #176]	; (8004568 <SystemInit+0xd4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f023 030f 	bic.w	r3, r3, #15
 80044bc:	4a2a      	ldr	r2, [pc, #168]	; (8004568 <SystemInit+0xd4>)
 80044be:	f043 0307 	orr.w	r3, r3, #7
 80044c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80044c4:	4b29      	ldr	r3, [pc, #164]	; (800456c <SystemInit+0xd8>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a28      	ldr	r2, [pc, #160]	; (800456c <SystemInit+0xd8>)
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80044d0:	4b26      	ldr	r3, [pc, #152]	; (800456c <SystemInit+0xd8>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80044d6:	4b25      	ldr	r3, [pc, #148]	; (800456c <SystemInit+0xd8>)
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	4924      	ldr	r1, [pc, #144]	; (800456c <SystemInit+0xd8>)
 80044dc:	4b24      	ldr	r3, [pc, #144]	; (8004570 <SystemInit+0xdc>)
 80044de:	4013      	ands	r3, r2
 80044e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80044e2:	4b21      	ldr	r3, [pc, #132]	; (8004568 <SystemInit+0xd4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d007      	beq.n	80044fe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80044ee:	4b1e      	ldr	r3, [pc, #120]	; (8004568 <SystemInit+0xd4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f023 030f 	bic.w	r3, r3, #15
 80044f6:	4a1c      	ldr	r2, [pc, #112]	; (8004568 <SystemInit+0xd4>)
 80044f8:	f043 0307 	orr.w	r3, r3, #7
 80044fc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80044fe:	4b1b      	ldr	r3, [pc, #108]	; (800456c <SystemInit+0xd8>)
 8004500:	2200      	movs	r2, #0
 8004502:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004504:	4b19      	ldr	r3, [pc, #100]	; (800456c <SystemInit+0xd8>)
 8004506:	2200      	movs	r2, #0
 8004508:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800450a:	4b18      	ldr	r3, [pc, #96]	; (800456c <SystemInit+0xd8>)
 800450c:	2200      	movs	r2, #0
 800450e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004510:	4b16      	ldr	r3, [pc, #88]	; (800456c <SystemInit+0xd8>)
 8004512:	4a18      	ldr	r2, [pc, #96]	; (8004574 <SystemInit+0xe0>)
 8004514:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004516:	4b15      	ldr	r3, [pc, #84]	; (800456c <SystemInit+0xd8>)
 8004518:	4a17      	ldr	r2, [pc, #92]	; (8004578 <SystemInit+0xe4>)
 800451a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800451c:	4b13      	ldr	r3, [pc, #76]	; (800456c <SystemInit+0xd8>)
 800451e:	4a17      	ldr	r2, [pc, #92]	; (800457c <SystemInit+0xe8>)
 8004520:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004522:	4b12      	ldr	r3, [pc, #72]	; (800456c <SystemInit+0xd8>)
 8004524:	2200      	movs	r2, #0
 8004526:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004528:	4b10      	ldr	r3, [pc, #64]	; (800456c <SystemInit+0xd8>)
 800452a:	4a14      	ldr	r2, [pc, #80]	; (800457c <SystemInit+0xe8>)
 800452c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800452e:	4b0f      	ldr	r3, [pc, #60]	; (800456c <SystemInit+0xd8>)
 8004530:	2200      	movs	r2, #0
 8004532:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004534:	4b0d      	ldr	r3, [pc, #52]	; (800456c <SystemInit+0xd8>)
 8004536:	4a11      	ldr	r2, [pc, #68]	; (800457c <SystemInit+0xe8>)
 8004538:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800453a:	4b0c      	ldr	r3, [pc, #48]	; (800456c <SystemInit+0xd8>)
 800453c:	2200      	movs	r2, #0
 800453e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004540:	4b0a      	ldr	r3, [pc, #40]	; (800456c <SystemInit+0xd8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a09      	ldr	r2, [pc, #36]	; (800456c <SystemInit+0xd8>)
 8004546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800454a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800454c:	4b07      	ldr	r3, [pc, #28]	; (800456c <SystemInit+0xd8>)
 800454e:	2200      	movs	r2, #0
 8004550:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004552:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <SystemInit+0xec>)
 8004554:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004558:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800455a:	bf00      	nop
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	e000ed00 	.word	0xe000ed00
 8004568:	52002000 	.word	0x52002000
 800456c:	58024400 	.word	0x58024400
 8004570:	eaf6ed7f 	.word	0xeaf6ed7f
 8004574:	02020200 	.word	0x02020200
 8004578:	01ff0000 	.word	0x01ff0000
 800457c:	01010280 	.word	0x01010280
 8004580:	52004000 	.word	0x52004000

08004584 <HAL_TIM_PeriodElapsedCallback>:
#define STEP_PIN_4 GPIO_PIN_9

//int ms=0;
double ac;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM13) {
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a8f      	ldr	r2, [pc, #572]	; (80047d0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	f040 8118 	bne.w	80047c8 <HAL_TIM_PeriodElapsedCallback+0x244>
//		ms++;
//		if(ms%100==0) ROS::pub_car_vel();


		/*enc 1*/
		fr.CountNow = __HAL_TIM_GetCounter(&htim2);
 8004598:	4b8e      	ldr	r3, [pc, #568]	; (80047d4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	b21a      	sxth	r2, r3
 80045a0:	4b8d      	ldr	r3, [pc, #564]	; (80047d8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80045a2:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		fr.PIDControl();
 80045a6:	488c      	ldr	r0, [pc, #560]	; (80047d8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80045a8:	f7fc f8ee 	bl	8000788 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim2,0);
 80045ac:	4b89      	ldr	r3, [pc, #548]	; (80047d4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2200      	movs	r2, #0
 80045b2:	625a      	str	r2, [r3, #36]	; 0x24
		if (fr.PID >= 0) {
 80045b4:	4b88      	ldr	r3, [pc, #544]	; (80047d8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80045b6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80045ba:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80045be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c2:	db0c      	blt.n	80045de <HAL_TIM_PeriodElapsedCallback+0x5a>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_SET);
 80045c4:	2201      	movs	r2, #1
 80045c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045ca:	4884      	ldr	r0, [pc, #528]	; (80047dc <HAL_TIM_PeriodElapsedCallback+0x258>)
 80045cc:	f003 facc 	bl	8007b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_RESET);
 80045d0:	2200      	movs	r2, #0
 80045d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045d6:	4881      	ldr	r0, [pc, #516]	; (80047dc <HAL_TIM_PeriodElapsedCallback+0x258>)
 80045d8:	f003 fac6 	bl	8007b68 <HAL_GPIO_WritePin>
 80045dc:	e013      	b.n	8004606 <HAL_TIM_PeriodElapsedCallback+0x82>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_RESET);
 80045de:	2200      	movs	r2, #0
 80045e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045e4:	487d      	ldr	r0, [pc, #500]	; (80047dc <HAL_TIM_PeriodElapsedCallback+0x258>)
 80045e6:	f003 fabf 	bl	8007b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_SET);
 80045ea:	2201      	movs	r2, #1
 80045ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045f0:	487a      	ldr	r0, [pc, #488]	; (80047dc <HAL_TIM_PeriodElapsedCallback+0x258>)
 80045f2:	f003 fab9 	bl	8007b68 <HAL_GPIO_WritePin>
			fr.PID = -fr.PID;
 80045f6:	4b78      	ldr	r3, [pc, #480]	; (80047d8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80045f8:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80045fc:	eeb1 7b47 	vneg.f64	d7, d7
 8004600:	4b75      	ldr	r3, [pc, #468]	; (80047d8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8004602:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		fr.PID = fabs(fr.PID);
 8004606:	4b74      	ldr	r3, [pc, #464]	; (80047d8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8004608:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800460c:	eeb0 7bc7 	vabs.f64	d7, d7
 8004610:	4b71      	ldr	r3, [pc, #452]	; (80047d8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8004612:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, abs((int)fr.PID));
 8004616:	4b70      	ldr	r3, [pc, #448]	; (80047d8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8004618:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800461c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004620:	ee17 3a90 	vmov	r3, s15
 8004624:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004628:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800462c:	4b6c      	ldr	r3, [pc, #432]	; (80047e0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	639a      	str	r2, [r3, #56]	; 0x38

		/*enc 2*/
		fl.CountNow = __HAL_TIM_GetCounter(&htim5);
 8004632:	4b6c      	ldr	r3, [pc, #432]	; (80047e4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	b21a      	sxth	r2, r3
 800463a:	4b6b      	ldr	r3, [pc, #428]	; (80047e8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800463c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		fl.PIDControl();
 8004640:	4869      	ldr	r0, [pc, #420]	; (80047e8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004642:	f7fc f8a1 	bl	8000788 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim5,0);
 8004646:	4b67      	ldr	r3, [pc, #412]	; (80047e4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2200      	movs	r2, #0
 800464c:	625a      	str	r2, [r3, #36]	; 0x24
		if (fl.PID < 0) {
 800464e:	4b66      	ldr	r3, [pc, #408]	; (80047e8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004650:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004654:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800465c:	d50b      	bpl.n	8004676 <HAL_TIM_PeriodElapsedCallback+0xf2>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_SET);
 800465e:	2201      	movs	r2, #1
 8004660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004664:	4861      	ldr	r0, [pc, #388]	; (80047ec <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004666:	f003 fa7f 	bl	8007b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_RESET);
 800466a:	2200      	movs	r2, #0
 800466c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004670:	485e      	ldr	r0, [pc, #376]	; (80047ec <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004672:	f003 fa79 	bl	8007b68 <HAL_GPIO_WritePin>
		}
		if (fl.PID >= 0) {
 8004676:	4b5c      	ldr	r3, [pc, #368]	; (80047e8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004678:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800467c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004684:	db13      	blt.n	80046ae <HAL_TIM_PeriodElapsedCallback+0x12a>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_RESET);
 8004686:	2200      	movs	r2, #0
 8004688:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800468c:	4857      	ldr	r0, [pc, #348]	; (80047ec <HAL_TIM_PeriodElapsedCallback+0x268>)
 800468e:	f003 fa6b 	bl	8007b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_SET);
 8004692:	2201      	movs	r2, #1
 8004694:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004698:	4854      	ldr	r0, [pc, #336]	; (80047ec <HAL_TIM_PeriodElapsedCallback+0x268>)
 800469a:	f003 fa65 	bl	8007b68 <HAL_GPIO_WritePin>
			fl.PID = -fl.PID;
 800469e:	4b52      	ldr	r3, [pc, #328]	; (80047e8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80046a0:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80046a4:	eeb1 7b47 	vneg.f64	d7, d7
 80046a8:	4b4f      	ldr	r3, [pc, #316]	; (80047e8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80046aa:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, (int )fl.PID);
 80046ae:	4b4e      	ldr	r3, [pc, #312]	; (80047e8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80046b0:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80046b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80046b8:	4b49      	ldr	r3, [pc, #292]	; (80047e0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	ee17 2a90 	vmov	r2, s15
 80046c0:	635a      	str	r2, [r3, #52]	; 0x34

		/*enc 3*/
		br.CountNow = __HAL_TIM_GetCounter(&htim3);
 80046c2:	4b4b      	ldr	r3, [pc, #300]	; (80047f0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	b21a      	sxth	r2, r3
 80046ca:	4b4a      	ldr	r3, [pc, #296]	; (80047f4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80046cc:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		br.PIDControl();
 80046d0:	4848      	ldr	r0, [pc, #288]	; (80047f4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80046d2:	f7fc f859 	bl	8000788 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim3,0);
 80046d6:	4b46      	ldr	r3, [pc, #280]	; (80047f0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2200      	movs	r2, #0
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24
		if (br.PID > 0) {
 80046de:	4b45      	ldr	r3, [pc, #276]	; (80047f4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80046e0:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80046e4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80046e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ec:	dd0a      	ble.n	8004704 <HAL_TIM_PeriodElapsedCallback+0x180>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_SET);
 80046ee:	2201      	movs	r2, #1
 80046f0:	2104      	movs	r1, #4
 80046f2:	4841      	ldr	r0, [pc, #260]	; (80047f8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80046f4:	f003 fa38 	bl	8007b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_RESET);
 80046f8:	2200      	movs	r2, #0
 80046fa:	2108      	movs	r1, #8
 80046fc:	483e      	ldr	r0, [pc, #248]	; (80047f8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80046fe:	f003 fa33 	bl	8007b68 <HAL_GPIO_WritePin>
 8004702:	e011      	b.n	8004728 <HAL_TIM_PeriodElapsedCallback+0x1a4>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_RESET);
 8004704:	2200      	movs	r2, #0
 8004706:	2104      	movs	r1, #4
 8004708:	483b      	ldr	r0, [pc, #236]	; (80047f8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800470a:	f003 fa2d 	bl	8007b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_SET);
 800470e:	2201      	movs	r2, #1
 8004710:	2108      	movs	r1, #8
 8004712:	4839      	ldr	r0, [pc, #228]	; (80047f8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004714:	f003 fa28 	bl	8007b68 <HAL_GPIO_WritePin>
			br.PID = -br.PID;
 8004718:	4b36      	ldr	r3, [pc, #216]	; (80047f4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800471a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800471e:	eeb1 7b47 	vneg.f64	d7, d7
 8004722:	4b34      	ldr	r3, [pc, #208]	; (80047f4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004724:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, (int )br.PID);
 8004728:	4b32      	ldr	r3, [pc, #200]	; (80047f4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800472a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800472e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004732:	4b32      	ldr	r3, [pc, #200]	; (80047fc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	ee17 2a90 	vmov	r2, s15
 800473a:	635a      	str	r2, [r3, #52]	; 0x34

		/*enc 4*/
		bl.CountNow = __HAL_TIM_GetCounter(&htim4);
 800473c:	4b30      	ldr	r3, [pc, #192]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	b21a      	sxth	r2, r3
 8004744:	4b2f      	ldr	r3, [pc, #188]	; (8004804 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004746:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		bl.PIDControl();
 800474a:	482e      	ldr	r0, [pc, #184]	; (8004804 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800474c:	f7fc f81c 	bl	8000788 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim4,0);
 8004750:	4b2b      	ldr	r3, [pc, #172]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2200      	movs	r2, #0
 8004756:	625a      	str	r2, [r3, #36]	; 0x24
		if (bl.PID >= 0) {
 8004758:	4b2a      	ldr	r3, [pc, #168]	; (8004804 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800475a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800475e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004766:	db0a      	blt.n	800477e <HAL_TIM_PeriodElapsedCallback+0x1fa>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_SET);
 8004768:	2201      	movs	r2, #1
 800476a:	2110      	movs	r1, #16
 800476c:	4822      	ldr	r0, [pc, #136]	; (80047f8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800476e:	f003 f9fb 	bl	8007b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_RESET);
 8004772:	2200      	movs	r2, #0
 8004774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004778:	4823      	ldr	r0, [pc, #140]	; (8004808 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800477a:	f003 f9f5 	bl	8007b68 <HAL_GPIO_WritePin>
		}
		if (bl.PID < 0) {
 800477e:	4b21      	ldr	r3, [pc, #132]	; (8004804 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004780:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004784:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478c:	d512      	bpl.n	80047b4 <HAL_TIM_PeriodElapsedCallback+0x230>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_RESET);
 800478e:	2200      	movs	r2, #0
 8004790:	2110      	movs	r1, #16
 8004792:	4819      	ldr	r0, [pc, #100]	; (80047f8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004794:	f003 f9e8 	bl	8007b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_SET);
 8004798:	2201      	movs	r2, #1
 800479a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800479e:	481a      	ldr	r0, [pc, #104]	; (8004808 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80047a0:	f003 f9e2 	bl	8007b68 <HAL_GPIO_WritePin>
			bl.PID = -bl.PID;
 80047a4:	4b17      	ldr	r3, [pc, #92]	; (8004804 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80047a6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80047aa:	eeb1 7b47 	vneg.f64	d7, d7
 80047ae:	4b15      	ldr	r3, [pc, #84]	; (8004804 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80047b0:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2,(int )bl.PID);
 80047b4:	4b13      	ldr	r3, [pc, #76]	; (8004804 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80047b6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80047ba:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80047be:	4b0f      	ldr	r3, [pc, #60]	; (80047fc <HAL_TIM_PeriodElapsedCallback+0x278>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	ee17 2a90 	vmov	r2, s15
 80047c6:	639a      	str	r2, [r3, #56]	; 0x38


	}

}
 80047c8:	bf00      	nop
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40001c00 	.word	0x40001c00
 80047d4:	240002e0 	.word	0x240002e0
 80047d8:	240000a0 	.word	0x240000a0
 80047dc:	58020c00 	.word	0x58020c00
 80047e0:	24000410 	.word	0x24000410
 80047e4:	240003c4 	.word	0x240003c4
 80047e8:	24000130 	.word	0x24000130
 80047ec:	58020400 	.word	0x58020400
 80047f0:	2400032c 	.word	0x2400032c
 80047f4:	240001c0 	.word	0x240001c0
 80047f8:	58021000 	.word	0x58021000
 80047fc:	240004a8 	.word	0x240004a8
 8004800:	24000378 	.word	0x24000378
 8004804:	24000250 	.word	0x24000250
 8004808:	58020800 	.word	0x58020800

0800480c <Reset_Handler>:
 800480c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004844 <LoopFillZerobss+0xe>
 8004810:	f7ff fe40 	bl	8004494 <SystemInit>
 8004814:	480c      	ldr	r0, [pc, #48]	; (8004848 <LoopFillZerobss+0x12>)
 8004816:	490d      	ldr	r1, [pc, #52]	; (800484c <LoopFillZerobss+0x16>)
 8004818:	4a0d      	ldr	r2, [pc, #52]	; (8004850 <LoopFillZerobss+0x1a>)
 800481a:	2300      	movs	r3, #0
 800481c:	e002      	b.n	8004824 <LoopCopyDataInit>

0800481e <CopyDataInit>:
 800481e:	58d4      	ldr	r4, [r2, r3]
 8004820:	50c4      	str	r4, [r0, r3]
 8004822:	3304      	adds	r3, #4

08004824 <LoopCopyDataInit>:
 8004824:	18c4      	adds	r4, r0, r3
 8004826:	428c      	cmp	r4, r1
 8004828:	d3f9      	bcc.n	800481e <CopyDataInit>
 800482a:	4a0a      	ldr	r2, [pc, #40]	; (8004854 <LoopFillZerobss+0x1e>)
 800482c:	4c0a      	ldr	r4, [pc, #40]	; (8004858 <LoopFillZerobss+0x22>)
 800482e:	2300      	movs	r3, #0
 8004830:	e001      	b.n	8004836 <LoopFillZerobss>

08004832 <FillZerobss>:
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	3204      	adds	r2, #4

08004836 <LoopFillZerobss>:
 8004836:	42a2      	cmp	r2, r4
 8004838:	d3fb      	bcc.n	8004832 <FillZerobss>
 800483a:	f009 f8a5 	bl	800d988 <__libc_init_array>
 800483e:	f7fc f8fb 	bl	8000a38 <main>
 8004842:	4770      	bx	lr
 8004844:	24050000 	.word	0x24050000
 8004848:	24000000 	.word	0x24000000
 800484c:	2400007c 	.word	0x2400007c
 8004850:	0800dff0 	.word	0x0800dff0
 8004854:	24000080 	.word	0x24000080
 8004858:	24001100 	.word	0x24001100

0800485c <ADC3_IRQHandler>:
 800485c:	e7fe      	b.n	800485c <ADC3_IRQHandler>
	...

08004860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004866:	2003      	movs	r0, #3
 8004868:	f000 f95c 	bl	8004b24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800486c:	f003 ff34 	bl	80086d8 <HAL_RCC_GetSysClockFreq>
 8004870:	4602      	mov	r2, r0
 8004872:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <HAL_Init+0x68>)
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	0a1b      	lsrs	r3, r3, #8
 8004878:	f003 030f 	and.w	r3, r3, #15
 800487c:	4913      	ldr	r1, [pc, #76]	; (80048cc <HAL_Init+0x6c>)
 800487e:	5ccb      	ldrb	r3, [r1, r3]
 8004880:	f003 031f 	and.w	r3, r3, #31
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
 8004888:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800488a:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <HAL_Init+0x68>)
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	4a0e      	ldr	r2, [pc, #56]	; (80048cc <HAL_Init+0x6c>)
 8004894:	5cd3      	ldrb	r3, [r2, r3]
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	fa22 f303 	lsr.w	r3, r2, r3
 80048a0:	4a0b      	ldr	r2, [pc, #44]	; (80048d0 <HAL_Init+0x70>)
 80048a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048a4:	4a0b      	ldr	r2, [pc, #44]	; (80048d4 <HAL_Init+0x74>)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048aa:	200f      	movs	r0, #15
 80048ac:	f000 f814 	bl	80048d8 <HAL_InitTick>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e002      	b.n	80048c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80048ba:	f7ff fa41 	bl	8003d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	58024400 	.word	0x58024400
 80048cc:	0800df90 	.word	0x0800df90
 80048d0:	24000008 	.word	0x24000008
 80048d4:	24000004 	.word	0x24000004

080048d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80048e0:	4b15      	ldr	r3, [pc, #84]	; (8004938 <HAL_InitTick+0x60>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e021      	b.n	8004930 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80048ec:	4b13      	ldr	r3, [pc, #76]	; (800493c <HAL_InitTick+0x64>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	4b11      	ldr	r3, [pc, #68]	; (8004938 <HAL_InitTick+0x60>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	4619      	mov	r1, r3
 80048f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80048fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004902:	4618      	mov	r0, r3
 8004904:	f000 f941 	bl	8004b8a <HAL_SYSTICK_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e00e      	b.n	8004930 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b0f      	cmp	r3, #15
 8004916:	d80a      	bhi.n	800492e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004918:	2200      	movs	r2, #0
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	f04f 30ff 	mov.w	r0, #4294967295
 8004920:	f000 f90b 	bl	8004b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004924:	4a06      	ldr	r2, [pc, #24]	; (8004940 <HAL_InitTick+0x68>)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	e000      	b.n	8004930 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
}
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	24000010 	.word	0x24000010
 800493c:	24000004 	.word	0x24000004
 8004940:	2400000c 	.word	0x2400000c

08004944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004948:	4b06      	ldr	r3, [pc, #24]	; (8004964 <HAL_IncTick+0x20>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	4b06      	ldr	r3, [pc, #24]	; (8004968 <HAL_IncTick+0x24>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4413      	add	r3, r2
 8004954:	4a04      	ldr	r2, [pc, #16]	; (8004968 <HAL_IncTick+0x24>)
 8004956:	6013      	str	r3, [r2, #0]
}
 8004958:	bf00      	nop
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	24000010 	.word	0x24000010
 8004968:	240010ec 	.word	0x240010ec

0800496c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return uwTick;
 8004970:	4b03      	ldr	r3, [pc, #12]	; (8004980 <HAL_GetTick+0x14>)
 8004972:	681b      	ldr	r3, [r3, #0]
}
 8004974:	4618      	mov	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	240010ec 	.word	0x240010ec

08004984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004994:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <__NVIC_SetPriorityGrouping+0x40>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049a0:	4013      	ands	r3, r2
 80049a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80049ac:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <__NVIC_SetPriorityGrouping+0x44>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049b2:	4a04      	ldr	r2, [pc, #16]	; (80049c4 <__NVIC_SetPriorityGrouping+0x40>)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	60d3      	str	r3, [r2, #12]
}
 80049b8:	bf00      	nop
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	e000ed00 	.word	0xe000ed00
 80049c8:	05fa0000 	.word	0x05fa0000

080049cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049d0:	4b04      	ldr	r3, [pc, #16]	; (80049e4 <__NVIC_GetPriorityGrouping+0x18>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	0a1b      	lsrs	r3, r3, #8
 80049d6:	f003 0307 	and.w	r3, r3, #7
}
 80049da:	4618      	mov	r0, r3
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	e000ed00 	.word	0xe000ed00

080049e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	db0b      	blt.n	8004a12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049fa:	88fb      	ldrh	r3, [r7, #6]
 80049fc:	f003 021f 	and.w	r2, r3, #31
 8004a00:	4907      	ldr	r1, [pc, #28]	; (8004a20 <__NVIC_EnableIRQ+0x38>)
 8004a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	2001      	movs	r0, #1
 8004a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	e000e100 	.word	0xe000e100

08004a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	6039      	str	r1, [r7, #0]
 8004a2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	db0a      	blt.n	8004a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	490c      	ldr	r1, [pc, #48]	; (8004a70 <__NVIC_SetPriority+0x4c>)
 8004a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a42:	0112      	lsls	r2, r2, #4
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	440b      	add	r3, r1
 8004a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a4c:	e00a      	b.n	8004a64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	4908      	ldr	r1, [pc, #32]	; (8004a74 <__NVIC_SetPriority+0x50>)
 8004a54:	88fb      	ldrh	r3, [r7, #6]
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	3b04      	subs	r3, #4
 8004a5c:	0112      	lsls	r2, r2, #4
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	440b      	add	r3, r1
 8004a62:	761a      	strb	r2, [r3, #24]
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	e000e100 	.word	0xe000e100
 8004a74:	e000ed00 	.word	0xe000ed00

08004a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b089      	sub	sp, #36	; 0x24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	f1c3 0307 	rsb	r3, r3, #7
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	bf28      	it	cs
 8004a96:	2304      	movcs	r3, #4
 8004a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	2b06      	cmp	r3, #6
 8004aa0:	d902      	bls.n	8004aa8 <NVIC_EncodePriority+0x30>
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	3b03      	subs	r3, #3
 8004aa6:	e000      	b.n	8004aaa <NVIC_EncodePriority+0x32>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aac:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab6:	43da      	mvns	r2, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	401a      	ands	r2, r3
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aca:	43d9      	mvns	r1, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ad0:	4313      	orrs	r3, r2
         );
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3724      	adds	r7, #36	; 0x24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
	...

08004ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004af0:	d301      	bcc.n	8004af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004af2:	2301      	movs	r3, #1
 8004af4:	e00f      	b.n	8004b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004af6:	4a0a      	ldr	r2, [pc, #40]	; (8004b20 <SysTick_Config+0x40>)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004afe:	210f      	movs	r1, #15
 8004b00:	f04f 30ff 	mov.w	r0, #4294967295
 8004b04:	f7ff ff8e 	bl	8004a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b08:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <SysTick_Config+0x40>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b0e:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <SysTick_Config+0x40>)
 8004b10:	2207      	movs	r2, #7
 8004b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	e000e010 	.word	0xe000e010

08004b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7ff ff29 	bl	8004984 <__NVIC_SetPriorityGrouping>
}
 8004b32:	bf00      	nop
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b086      	sub	sp, #24
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	4603      	mov	r3, r0
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	607a      	str	r2, [r7, #4]
 8004b46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b48:	f7ff ff40 	bl	80049cc <__NVIC_GetPriorityGrouping>
 8004b4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	68b9      	ldr	r1, [r7, #8]
 8004b52:	6978      	ldr	r0, [r7, #20]
 8004b54:	f7ff ff90 	bl	8004a78 <NVIC_EncodePriority>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b5e:	4611      	mov	r1, r2
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff ff5f 	bl	8004a24 <__NVIC_SetPriority>
}
 8004b66:	bf00      	nop
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b082      	sub	sp, #8
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	4603      	mov	r3, r0
 8004b76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff ff33 	bl	80049e8 <__NVIC_EnableIRQ>
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff ffa4 	bl	8004ae0 <SysTick_Config>
 8004b98:	4603      	mov	r3, r0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004bac:	f7ff fede 	bl	800496c <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e314      	b.n	80051e6 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a66      	ldr	r2, [pc, #408]	; (8004d5c <HAL_DMA_Init+0x1b8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d04a      	beq.n	8004c5c <HAL_DMA_Init+0xb8>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a65      	ldr	r2, [pc, #404]	; (8004d60 <HAL_DMA_Init+0x1bc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d045      	beq.n	8004c5c <HAL_DMA_Init+0xb8>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a63      	ldr	r2, [pc, #396]	; (8004d64 <HAL_DMA_Init+0x1c0>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d040      	beq.n	8004c5c <HAL_DMA_Init+0xb8>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a62      	ldr	r2, [pc, #392]	; (8004d68 <HAL_DMA_Init+0x1c4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d03b      	beq.n	8004c5c <HAL_DMA_Init+0xb8>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a60      	ldr	r2, [pc, #384]	; (8004d6c <HAL_DMA_Init+0x1c8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d036      	beq.n	8004c5c <HAL_DMA_Init+0xb8>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a5f      	ldr	r2, [pc, #380]	; (8004d70 <HAL_DMA_Init+0x1cc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d031      	beq.n	8004c5c <HAL_DMA_Init+0xb8>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a5d      	ldr	r2, [pc, #372]	; (8004d74 <HAL_DMA_Init+0x1d0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d02c      	beq.n	8004c5c <HAL_DMA_Init+0xb8>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a5c      	ldr	r2, [pc, #368]	; (8004d78 <HAL_DMA_Init+0x1d4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d027      	beq.n	8004c5c <HAL_DMA_Init+0xb8>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a5a      	ldr	r2, [pc, #360]	; (8004d7c <HAL_DMA_Init+0x1d8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d022      	beq.n	8004c5c <HAL_DMA_Init+0xb8>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a59      	ldr	r2, [pc, #356]	; (8004d80 <HAL_DMA_Init+0x1dc>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d01d      	beq.n	8004c5c <HAL_DMA_Init+0xb8>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a57      	ldr	r2, [pc, #348]	; (8004d84 <HAL_DMA_Init+0x1e0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d018      	beq.n	8004c5c <HAL_DMA_Init+0xb8>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a56      	ldr	r2, [pc, #344]	; (8004d88 <HAL_DMA_Init+0x1e4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d013      	beq.n	8004c5c <HAL_DMA_Init+0xb8>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a54      	ldr	r2, [pc, #336]	; (8004d8c <HAL_DMA_Init+0x1e8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00e      	beq.n	8004c5c <HAL_DMA_Init+0xb8>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a53      	ldr	r2, [pc, #332]	; (8004d90 <HAL_DMA_Init+0x1ec>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d009      	beq.n	8004c5c <HAL_DMA_Init+0xb8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a51      	ldr	r2, [pc, #324]	; (8004d94 <HAL_DMA_Init+0x1f0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d004      	beq.n	8004c5c <HAL_DMA_Init+0xb8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a50      	ldr	r2, [pc, #320]	; (8004d98 <HAL_DMA_Init+0x1f4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d101      	bne.n	8004c60 <HAL_DMA_Init+0xbc>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e000      	b.n	8004c62 <HAL_DMA_Init+0xbe>
 8004c60:	2300      	movs	r3, #0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 813c 	beq.w	8004ee0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a37      	ldr	r2, [pc, #220]	; (8004d5c <HAL_DMA_Init+0x1b8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d04a      	beq.n	8004d18 <HAL_DMA_Init+0x174>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a36      	ldr	r2, [pc, #216]	; (8004d60 <HAL_DMA_Init+0x1bc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d045      	beq.n	8004d18 <HAL_DMA_Init+0x174>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a34      	ldr	r2, [pc, #208]	; (8004d64 <HAL_DMA_Init+0x1c0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d040      	beq.n	8004d18 <HAL_DMA_Init+0x174>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a33      	ldr	r2, [pc, #204]	; (8004d68 <HAL_DMA_Init+0x1c4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d03b      	beq.n	8004d18 <HAL_DMA_Init+0x174>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a31      	ldr	r2, [pc, #196]	; (8004d6c <HAL_DMA_Init+0x1c8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d036      	beq.n	8004d18 <HAL_DMA_Init+0x174>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a30      	ldr	r2, [pc, #192]	; (8004d70 <HAL_DMA_Init+0x1cc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d031      	beq.n	8004d18 <HAL_DMA_Init+0x174>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a2e      	ldr	r2, [pc, #184]	; (8004d74 <HAL_DMA_Init+0x1d0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d02c      	beq.n	8004d18 <HAL_DMA_Init+0x174>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a2d      	ldr	r2, [pc, #180]	; (8004d78 <HAL_DMA_Init+0x1d4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d027      	beq.n	8004d18 <HAL_DMA_Init+0x174>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a2b      	ldr	r2, [pc, #172]	; (8004d7c <HAL_DMA_Init+0x1d8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d022      	beq.n	8004d18 <HAL_DMA_Init+0x174>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a2a      	ldr	r2, [pc, #168]	; (8004d80 <HAL_DMA_Init+0x1dc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d01d      	beq.n	8004d18 <HAL_DMA_Init+0x174>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a28      	ldr	r2, [pc, #160]	; (8004d84 <HAL_DMA_Init+0x1e0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d018      	beq.n	8004d18 <HAL_DMA_Init+0x174>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a27      	ldr	r2, [pc, #156]	; (8004d88 <HAL_DMA_Init+0x1e4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d013      	beq.n	8004d18 <HAL_DMA_Init+0x174>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a25      	ldr	r2, [pc, #148]	; (8004d8c <HAL_DMA_Init+0x1e8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00e      	beq.n	8004d18 <HAL_DMA_Init+0x174>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a24      	ldr	r2, [pc, #144]	; (8004d90 <HAL_DMA_Init+0x1ec>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d009      	beq.n	8004d18 <HAL_DMA_Init+0x174>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a22      	ldr	r2, [pc, #136]	; (8004d94 <HAL_DMA_Init+0x1f0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d004      	beq.n	8004d18 <HAL_DMA_Init+0x174>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a21      	ldr	r2, [pc, #132]	; (8004d98 <HAL_DMA_Init+0x1f4>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d108      	bne.n	8004d2a <HAL_DMA_Init+0x186>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0201 	bic.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	e007      	b.n	8004d3a <HAL_DMA_Init+0x196>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0201 	bic.w	r2, r2, #1
 8004d38:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d3a:	e02f      	b.n	8004d9c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d3c:	f7ff fe16 	bl	800496c <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b05      	cmp	r3, #5
 8004d48:	d928      	bls.n	8004d9c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2203      	movs	r2, #3
 8004d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e244      	b.n	80051e6 <HAL_DMA_Init+0x642>
 8004d5c:	40020010 	.word	0x40020010
 8004d60:	40020028 	.word	0x40020028
 8004d64:	40020040 	.word	0x40020040
 8004d68:	40020058 	.word	0x40020058
 8004d6c:	40020070 	.word	0x40020070
 8004d70:	40020088 	.word	0x40020088
 8004d74:	400200a0 	.word	0x400200a0
 8004d78:	400200b8 	.word	0x400200b8
 8004d7c:	40020410 	.word	0x40020410
 8004d80:	40020428 	.word	0x40020428
 8004d84:	40020440 	.word	0x40020440
 8004d88:	40020458 	.word	0x40020458
 8004d8c:	40020470 	.word	0x40020470
 8004d90:	40020488 	.word	0x40020488
 8004d94:	400204a0 	.word	0x400204a0
 8004d98:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1c8      	bne.n	8004d3c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4b84      	ldr	r3, [pc, #528]	; (8004fc8 <HAL_DMA_Init+0x424>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004dc2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dda:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d107      	bne.n	8004e00 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2b28      	cmp	r3, #40	; 0x28
 8004e06:	d903      	bls.n	8004e10 <HAL_DMA_Init+0x26c>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2b2e      	cmp	r3, #46	; 0x2e
 8004e0e:	d91f      	bls.n	8004e50 <HAL_DMA_Init+0x2ac>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b3e      	cmp	r3, #62	; 0x3e
 8004e16:	d903      	bls.n	8004e20 <HAL_DMA_Init+0x27c>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b42      	cmp	r3, #66	; 0x42
 8004e1e:	d917      	bls.n	8004e50 <HAL_DMA_Init+0x2ac>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b46      	cmp	r3, #70	; 0x46
 8004e26:	d903      	bls.n	8004e30 <HAL_DMA_Init+0x28c>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b48      	cmp	r3, #72	; 0x48
 8004e2e:	d90f      	bls.n	8004e50 <HAL_DMA_Init+0x2ac>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b4e      	cmp	r3, #78	; 0x4e
 8004e36:	d903      	bls.n	8004e40 <HAL_DMA_Init+0x29c>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2b52      	cmp	r3, #82	; 0x52
 8004e3e:	d907      	bls.n	8004e50 <HAL_DMA_Init+0x2ac>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b73      	cmp	r3, #115	; 0x73
 8004e46:	d905      	bls.n	8004e54 <HAL_DMA_Init+0x2b0>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b77      	cmp	r3, #119	; 0x77
 8004e4e:	d801      	bhi.n	8004e54 <HAL_DMA_Init+0x2b0>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <HAL_DMA_Init+0x2b2>
 8004e54:	2300      	movs	r3, #0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e60:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f023 0307 	bic.w	r3, r3, #7
 8004e78:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d117      	bne.n	8004ebc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00e      	beq.n	8004ebc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f002 fb30 	bl	8007504 <DMA_CheckFifoParam>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d008      	beq.n	8004ebc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2240      	movs	r2, #64	; 0x40
 8004eae:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e194      	b.n	80051e6 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f002 fa6b 	bl	80073a0 <DMA_CalcBaseAndBitshift>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed2:	f003 031f 	and.w	r3, r3, #31
 8004ed6:	223f      	movs	r2, #63	; 0x3f
 8004ed8:	409a      	lsls	r2, r3
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	609a      	str	r2, [r3, #8]
 8004ede:	e0ca      	b.n	8005076 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a39      	ldr	r2, [pc, #228]	; (8004fcc <HAL_DMA_Init+0x428>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d022      	beq.n	8004f30 <HAL_DMA_Init+0x38c>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a38      	ldr	r2, [pc, #224]	; (8004fd0 <HAL_DMA_Init+0x42c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d01d      	beq.n	8004f30 <HAL_DMA_Init+0x38c>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a36      	ldr	r2, [pc, #216]	; (8004fd4 <HAL_DMA_Init+0x430>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d018      	beq.n	8004f30 <HAL_DMA_Init+0x38c>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a35      	ldr	r2, [pc, #212]	; (8004fd8 <HAL_DMA_Init+0x434>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d013      	beq.n	8004f30 <HAL_DMA_Init+0x38c>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a33      	ldr	r2, [pc, #204]	; (8004fdc <HAL_DMA_Init+0x438>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00e      	beq.n	8004f30 <HAL_DMA_Init+0x38c>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a32      	ldr	r2, [pc, #200]	; (8004fe0 <HAL_DMA_Init+0x43c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d009      	beq.n	8004f30 <HAL_DMA_Init+0x38c>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a30      	ldr	r2, [pc, #192]	; (8004fe4 <HAL_DMA_Init+0x440>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d004      	beq.n	8004f30 <HAL_DMA_Init+0x38c>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a2f      	ldr	r2, [pc, #188]	; (8004fe8 <HAL_DMA_Init+0x444>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d101      	bne.n	8004f34 <HAL_DMA_Init+0x390>
 8004f30:	2301      	movs	r3, #1
 8004f32:	e000      	b.n	8004f36 <HAL_DMA_Init+0x392>
 8004f34:	2300      	movs	r3, #0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 8094 	beq.w	8005064 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a22      	ldr	r2, [pc, #136]	; (8004fcc <HAL_DMA_Init+0x428>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d021      	beq.n	8004f8a <HAL_DMA_Init+0x3e6>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a21      	ldr	r2, [pc, #132]	; (8004fd0 <HAL_DMA_Init+0x42c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d01c      	beq.n	8004f8a <HAL_DMA_Init+0x3e6>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a1f      	ldr	r2, [pc, #124]	; (8004fd4 <HAL_DMA_Init+0x430>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d017      	beq.n	8004f8a <HAL_DMA_Init+0x3e6>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a1e      	ldr	r2, [pc, #120]	; (8004fd8 <HAL_DMA_Init+0x434>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d012      	beq.n	8004f8a <HAL_DMA_Init+0x3e6>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1c      	ldr	r2, [pc, #112]	; (8004fdc <HAL_DMA_Init+0x438>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00d      	beq.n	8004f8a <HAL_DMA_Init+0x3e6>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1b      	ldr	r2, [pc, #108]	; (8004fe0 <HAL_DMA_Init+0x43c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d008      	beq.n	8004f8a <HAL_DMA_Init+0x3e6>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a19      	ldr	r2, [pc, #100]	; (8004fe4 <HAL_DMA_Init+0x440>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d003      	beq.n	8004f8a <HAL_DMA_Init+0x3e6>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a18      	ldr	r2, [pc, #96]	; (8004fe8 <HAL_DMA_Init+0x444>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	4b11      	ldr	r3, [pc, #68]	; (8004fec <HAL_DMA_Init+0x448>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	2b40      	cmp	r3, #64	; 0x40
 8004fb2:	d01d      	beq.n	8004ff0 <HAL_DMA_Init+0x44c>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	2b80      	cmp	r3, #128	; 0x80
 8004fba:	d102      	bne.n	8004fc2 <HAL_DMA_Init+0x41e>
 8004fbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004fc0:	e017      	b.n	8004ff2 <HAL_DMA_Init+0x44e>
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	e015      	b.n	8004ff2 <HAL_DMA_Init+0x44e>
 8004fc6:	bf00      	nop
 8004fc8:	fe10803f 	.word	0xfe10803f
 8004fcc:	58025408 	.word	0x58025408
 8004fd0:	5802541c 	.word	0x5802541c
 8004fd4:	58025430 	.word	0x58025430
 8004fd8:	58025444 	.word	0x58025444
 8004fdc:	58025458 	.word	0x58025458
 8004fe0:	5802546c 	.word	0x5802546c
 8004fe4:	58025480 	.word	0x58025480
 8004fe8:	58025494 	.word	0x58025494
 8004fec:	fffe000f 	.word	0xfffe000f
 8004ff0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	68d2      	ldr	r2, [r2, #12]
 8004ff6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ff8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005000:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005008:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005010:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005018:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005020:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4313      	orrs	r3, r2
 8005026:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	461a      	mov	r2, r3
 8005036:	4b6e      	ldr	r3, [pc, #440]	; (80051f0 <HAL_DMA_Init+0x64c>)
 8005038:	4413      	add	r3, r2
 800503a:	4a6e      	ldr	r2, [pc, #440]	; (80051f4 <HAL_DMA_Init+0x650>)
 800503c:	fba2 2303 	umull	r2, r3, r2, r3
 8005040:	091b      	lsrs	r3, r3, #4
 8005042:	009a      	lsls	r2, r3, #2
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f002 f9a9 	bl	80073a0 <DMA_CalcBaseAndBitshift>
 800504e:	4603      	mov	r3, r0
 8005050:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005056:	f003 031f 	and.w	r3, r3, #31
 800505a:	2201      	movs	r2, #1
 800505c:	409a      	lsls	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	605a      	str	r2, [r3, #4]
 8005062:	e008      	b.n	8005076 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2240      	movs	r2, #64	; 0x40
 8005068:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2203      	movs	r2, #3
 800506e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e0b7      	b.n	80051e6 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a5f      	ldr	r2, [pc, #380]	; (80051f8 <HAL_DMA_Init+0x654>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d072      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a5d      	ldr	r2, [pc, #372]	; (80051fc <HAL_DMA_Init+0x658>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d06d      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a5c      	ldr	r2, [pc, #368]	; (8005200 <HAL_DMA_Init+0x65c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d068      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a5a      	ldr	r2, [pc, #360]	; (8005204 <HAL_DMA_Init+0x660>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d063      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a59      	ldr	r2, [pc, #356]	; (8005208 <HAL_DMA_Init+0x664>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d05e      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a57      	ldr	r2, [pc, #348]	; (800520c <HAL_DMA_Init+0x668>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d059      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a56      	ldr	r2, [pc, #344]	; (8005210 <HAL_DMA_Init+0x66c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d054      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a54      	ldr	r2, [pc, #336]	; (8005214 <HAL_DMA_Init+0x670>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d04f      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a53      	ldr	r2, [pc, #332]	; (8005218 <HAL_DMA_Init+0x674>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d04a      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a51      	ldr	r2, [pc, #324]	; (800521c <HAL_DMA_Init+0x678>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d045      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a50      	ldr	r2, [pc, #320]	; (8005220 <HAL_DMA_Init+0x67c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d040      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a4e      	ldr	r2, [pc, #312]	; (8005224 <HAL_DMA_Init+0x680>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d03b      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a4d      	ldr	r2, [pc, #308]	; (8005228 <HAL_DMA_Init+0x684>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d036      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a4b      	ldr	r2, [pc, #300]	; (800522c <HAL_DMA_Init+0x688>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d031      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a4a      	ldr	r2, [pc, #296]	; (8005230 <HAL_DMA_Init+0x68c>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d02c      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a48      	ldr	r2, [pc, #288]	; (8005234 <HAL_DMA_Init+0x690>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d027      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a47      	ldr	r2, [pc, #284]	; (8005238 <HAL_DMA_Init+0x694>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d022      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a45      	ldr	r2, [pc, #276]	; (800523c <HAL_DMA_Init+0x698>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d01d      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a44      	ldr	r2, [pc, #272]	; (8005240 <HAL_DMA_Init+0x69c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d018      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a42      	ldr	r2, [pc, #264]	; (8005244 <HAL_DMA_Init+0x6a0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d013      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a41      	ldr	r2, [pc, #260]	; (8005248 <HAL_DMA_Init+0x6a4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d00e      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a3f      	ldr	r2, [pc, #252]	; (800524c <HAL_DMA_Init+0x6a8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d009      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a3e      	ldr	r2, [pc, #248]	; (8005250 <HAL_DMA_Init+0x6ac>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d004      	beq.n	8005166 <HAL_DMA_Init+0x5c2>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a3c      	ldr	r2, [pc, #240]	; (8005254 <HAL_DMA_Init+0x6b0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d101      	bne.n	800516a <HAL_DMA_Init+0x5c6>
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <HAL_DMA_Init+0x5c8>
 800516a:	2300      	movs	r3, #0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d032      	beq.n	80051d6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f002 fa43 	bl	80075fc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	2b80      	cmp	r3, #128	; 0x80
 800517c:	d102      	bne.n	8005184 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005198:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d010      	beq.n	80051c4 <HAL_DMA_Init+0x620>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b08      	cmp	r3, #8
 80051a8:	d80c      	bhi.n	80051c4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f002 fac0 	bl	8007730 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80051c0:	605a      	str	r2, [r3, #4]
 80051c2:	e008      	b.n	80051d6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	a7fdabf8 	.word	0xa7fdabf8
 80051f4:	cccccccd 	.word	0xcccccccd
 80051f8:	40020010 	.word	0x40020010
 80051fc:	40020028 	.word	0x40020028
 8005200:	40020040 	.word	0x40020040
 8005204:	40020058 	.word	0x40020058
 8005208:	40020070 	.word	0x40020070
 800520c:	40020088 	.word	0x40020088
 8005210:	400200a0 	.word	0x400200a0
 8005214:	400200b8 	.word	0x400200b8
 8005218:	40020410 	.word	0x40020410
 800521c:	40020428 	.word	0x40020428
 8005220:	40020440 	.word	0x40020440
 8005224:	40020458 	.word	0x40020458
 8005228:	40020470 	.word	0x40020470
 800522c:	40020488 	.word	0x40020488
 8005230:	400204a0 	.word	0x400204a0
 8005234:	400204b8 	.word	0x400204b8
 8005238:	58025408 	.word	0x58025408
 800523c:	5802541c 	.word	0x5802541c
 8005240:	58025430 	.word	0x58025430
 8005244:	58025444 	.word	0x58025444
 8005248:	58025458 	.word	0x58025458
 800524c:	5802546c 	.word	0x5802546c
 8005250:	58025480 	.word	0x58025480
 8005254:	58025494 	.word	0x58025494

08005258 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e226      	b.n	80056c2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800527a:	2b01      	cmp	r3, #1
 800527c:	d101      	bne.n	8005282 <HAL_DMA_Start_IT+0x2a>
 800527e:	2302      	movs	r3, #2
 8005280:	e21f      	b.n	80056c2 <HAL_DMA_Start_IT+0x46a>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b01      	cmp	r3, #1
 8005294:	f040 820a 	bne.w	80056ac <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a68      	ldr	r2, [pc, #416]	; (800544c <HAL_DMA_Start_IT+0x1f4>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d04a      	beq.n	8005346 <HAL_DMA_Start_IT+0xee>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a66      	ldr	r2, [pc, #408]	; (8005450 <HAL_DMA_Start_IT+0x1f8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d045      	beq.n	8005346 <HAL_DMA_Start_IT+0xee>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a65      	ldr	r2, [pc, #404]	; (8005454 <HAL_DMA_Start_IT+0x1fc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d040      	beq.n	8005346 <HAL_DMA_Start_IT+0xee>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a63      	ldr	r2, [pc, #396]	; (8005458 <HAL_DMA_Start_IT+0x200>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d03b      	beq.n	8005346 <HAL_DMA_Start_IT+0xee>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a62      	ldr	r2, [pc, #392]	; (800545c <HAL_DMA_Start_IT+0x204>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d036      	beq.n	8005346 <HAL_DMA_Start_IT+0xee>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a60      	ldr	r2, [pc, #384]	; (8005460 <HAL_DMA_Start_IT+0x208>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d031      	beq.n	8005346 <HAL_DMA_Start_IT+0xee>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a5f      	ldr	r2, [pc, #380]	; (8005464 <HAL_DMA_Start_IT+0x20c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d02c      	beq.n	8005346 <HAL_DMA_Start_IT+0xee>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a5d      	ldr	r2, [pc, #372]	; (8005468 <HAL_DMA_Start_IT+0x210>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d027      	beq.n	8005346 <HAL_DMA_Start_IT+0xee>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a5c      	ldr	r2, [pc, #368]	; (800546c <HAL_DMA_Start_IT+0x214>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d022      	beq.n	8005346 <HAL_DMA_Start_IT+0xee>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a5a      	ldr	r2, [pc, #360]	; (8005470 <HAL_DMA_Start_IT+0x218>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d01d      	beq.n	8005346 <HAL_DMA_Start_IT+0xee>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a59      	ldr	r2, [pc, #356]	; (8005474 <HAL_DMA_Start_IT+0x21c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d018      	beq.n	8005346 <HAL_DMA_Start_IT+0xee>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a57      	ldr	r2, [pc, #348]	; (8005478 <HAL_DMA_Start_IT+0x220>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d013      	beq.n	8005346 <HAL_DMA_Start_IT+0xee>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a56      	ldr	r2, [pc, #344]	; (800547c <HAL_DMA_Start_IT+0x224>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d00e      	beq.n	8005346 <HAL_DMA_Start_IT+0xee>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a54      	ldr	r2, [pc, #336]	; (8005480 <HAL_DMA_Start_IT+0x228>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d009      	beq.n	8005346 <HAL_DMA_Start_IT+0xee>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a53      	ldr	r2, [pc, #332]	; (8005484 <HAL_DMA_Start_IT+0x22c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d004      	beq.n	8005346 <HAL_DMA_Start_IT+0xee>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a51      	ldr	r2, [pc, #324]	; (8005488 <HAL_DMA_Start_IT+0x230>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d108      	bne.n	8005358 <HAL_DMA_Start_IT+0x100>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0201 	bic.w	r2, r2, #1
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e007      	b.n	8005368 <HAL_DMA_Start_IT+0x110>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0201 	bic.w	r2, r2, #1
 8005366:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	68b9      	ldr	r1, [r7, #8]
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f001 fe6a 	bl	8007048 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a34      	ldr	r2, [pc, #208]	; (800544c <HAL_DMA_Start_IT+0x1f4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d04a      	beq.n	8005414 <HAL_DMA_Start_IT+0x1bc>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a33      	ldr	r2, [pc, #204]	; (8005450 <HAL_DMA_Start_IT+0x1f8>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d045      	beq.n	8005414 <HAL_DMA_Start_IT+0x1bc>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a31      	ldr	r2, [pc, #196]	; (8005454 <HAL_DMA_Start_IT+0x1fc>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d040      	beq.n	8005414 <HAL_DMA_Start_IT+0x1bc>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a30      	ldr	r2, [pc, #192]	; (8005458 <HAL_DMA_Start_IT+0x200>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d03b      	beq.n	8005414 <HAL_DMA_Start_IT+0x1bc>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a2e      	ldr	r2, [pc, #184]	; (800545c <HAL_DMA_Start_IT+0x204>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d036      	beq.n	8005414 <HAL_DMA_Start_IT+0x1bc>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a2d      	ldr	r2, [pc, #180]	; (8005460 <HAL_DMA_Start_IT+0x208>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d031      	beq.n	8005414 <HAL_DMA_Start_IT+0x1bc>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a2b      	ldr	r2, [pc, #172]	; (8005464 <HAL_DMA_Start_IT+0x20c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d02c      	beq.n	8005414 <HAL_DMA_Start_IT+0x1bc>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a2a      	ldr	r2, [pc, #168]	; (8005468 <HAL_DMA_Start_IT+0x210>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d027      	beq.n	8005414 <HAL_DMA_Start_IT+0x1bc>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a28      	ldr	r2, [pc, #160]	; (800546c <HAL_DMA_Start_IT+0x214>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d022      	beq.n	8005414 <HAL_DMA_Start_IT+0x1bc>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a27      	ldr	r2, [pc, #156]	; (8005470 <HAL_DMA_Start_IT+0x218>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d01d      	beq.n	8005414 <HAL_DMA_Start_IT+0x1bc>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a25      	ldr	r2, [pc, #148]	; (8005474 <HAL_DMA_Start_IT+0x21c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d018      	beq.n	8005414 <HAL_DMA_Start_IT+0x1bc>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a24      	ldr	r2, [pc, #144]	; (8005478 <HAL_DMA_Start_IT+0x220>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d013      	beq.n	8005414 <HAL_DMA_Start_IT+0x1bc>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a22      	ldr	r2, [pc, #136]	; (800547c <HAL_DMA_Start_IT+0x224>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00e      	beq.n	8005414 <HAL_DMA_Start_IT+0x1bc>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a21      	ldr	r2, [pc, #132]	; (8005480 <HAL_DMA_Start_IT+0x228>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d009      	beq.n	8005414 <HAL_DMA_Start_IT+0x1bc>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a1f      	ldr	r2, [pc, #124]	; (8005484 <HAL_DMA_Start_IT+0x22c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d004      	beq.n	8005414 <HAL_DMA_Start_IT+0x1bc>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a1e      	ldr	r2, [pc, #120]	; (8005488 <HAL_DMA_Start_IT+0x230>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d101      	bne.n	8005418 <HAL_DMA_Start_IT+0x1c0>
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <HAL_DMA_Start_IT+0x1c2>
 8005418:	2300      	movs	r3, #0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d036      	beq.n	800548c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f023 021e 	bic.w	r2, r3, #30
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f042 0216 	orr.w	r2, r2, #22
 8005430:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	2b00      	cmp	r3, #0
 8005438:	d03e      	beq.n	80054b8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f042 0208 	orr.w	r2, r2, #8
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	e035      	b.n	80054b8 <HAL_DMA_Start_IT+0x260>
 800544c:	40020010 	.word	0x40020010
 8005450:	40020028 	.word	0x40020028
 8005454:	40020040 	.word	0x40020040
 8005458:	40020058 	.word	0x40020058
 800545c:	40020070 	.word	0x40020070
 8005460:	40020088 	.word	0x40020088
 8005464:	400200a0 	.word	0x400200a0
 8005468:	400200b8 	.word	0x400200b8
 800546c:	40020410 	.word	0x40020410
 8005470:	40020428 	.word	0x40020428
 8005474:	40020440 	.word	0x40020440
 8005478:	40020458 	.word	0x40020458
 800547c:	40020470 	.word	0x40020470
 8005480:	40020488 	.word	0x40020488
 8005484:	400204a0 	.word	0x400204a0
 8005488:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f023 020e 	bic.w	r2, r3, #14
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 020a 	orr.w	r2, r2, #10
 800549e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d007      	beq.n	80054b8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0204 	orr.w	r2, r2, #4
 80054b6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a83      	ldr	r2, [pc, #524]	; (80056cc <HAL_DMA_Start_IT+0x474>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d072      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a82      	ldr	r2, [pc, #520]	; (80056d0 <HAL_DMA_Start_IT+0x478>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d06d      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a80      	ldr	r2, [pc, #512]	; (80056d4 <HAL_DMA_Start_IT+0x47c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d068      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a7f      	ldr	r2, [pc, #508]	; (80056d8 <HAL_DMA_Start_IT+0x480>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d063      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a7d      	ldr	r2, [pc, #500]	; (80056dc <HAL_DMA_Start_IT+0x484>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d05e      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a7c      	ldr	r2, [pc, #496]	; (80056e0 <HAL_DMA_Start_IT+0x488>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d059      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a7a      	ldr	r2, [pc, #488]	; (80056e4 <HAL_DMA_Start_IT+0x48c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d054      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a79      	ldr	r2, [pc, #484]	; (80056e8 <HAL_DMA_Start_IT+0x490>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d04f      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a77      	ldr	r2, [pc, #476]	; (80056ec <HAL_DMA_Start_IT+0x494>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d04a      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a76      	ldr	r2, [pc, #472]	; (80056f0 <HAL_DMA_Start_IT+0x498>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d045      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a74      	ldr	r2, [pc, #464]	; (80056f4 <HAL_DMA_Start_IT+0x49c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d040      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a73      	ldr	r2, [pc, #460]	; (80056f8 <HAL_DMA_Start_IT+0x4a0>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d03b      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a71      	ldr	r2, [pc, #452]	; (80056fc <HAL_DMA_Start_IT+0x4a4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d036      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a70      	ldr	r2, [pc, #448]	; (8005700 <HAL_DMA_Start_IT+0x4a8>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d031      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a6e      	ldr	r2, [pc, #440]	; (8005704 <HAL_DMA_Start_IT+0x4ac>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d02c      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a6d      	ldr	r2, [pc, #436]	; (8005708 <HAL_DMA_Start_IT+0x4b0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d027      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a6b      	ldr	r2, [pc, #428]	; (800570c <HAL_DMA_Start_IT+0x4b4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d022      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a6a      	ldr	r2, [pc, #424]	; (8005710 <HAL_DMA_Start_IT+0x4b8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d01d      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a68      	ldr	r2, [pc, #416]	; (8005714 <HAL_DMA_Start_IT+0x4bc>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d018      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a67      	ldr	r2, [pc, #412]	; (8005718 <HAL_DMA_Start_IT+0x4c0>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d013      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a65      	ldr	r2, [pc, #404]	; (800571c <HAL_DMA_Start_IT+0x4c4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00e      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a64      	ldr	r2, [pc, #400]	; (8005720 <HAL_DMA_Start_IT+0x4c8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d009      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a62      	ldr	r2, [pc, #392]	; (8005724 <HAL_DMA_Start_IT+0x4cc>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d004      	beq.n	80055a8 <HAL_DMA_Start_IT+0x350>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a61      	ldr	r2, [pc, #388]	; (8005728 <HAL_DMA_Start_IT+0x4d0>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d101      	bne.n	80055ac <HAL_DMA_Start_IT+0x354>
 80055a8:	2301      	movs	r3, #1
 80055aa:	e000      	b.n	80055ae <HAL_DMA_Start_IT+0x356>
 80055ac:	2300      	movs	r3, #0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01a      	beq.n	80055e8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d007      	beq.n	80055d0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ce:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d007      	beq.n	80055e8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055e6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a37      	ldr	r2, [pc, #220]	; (80056cc <HAL_DMA_Start_IT+0x474>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d04a      	beq.n	8005688 <HAL_DMA_Start_IT+0x430>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a36      	ldr	r2, [pc, #216]	; (80056d0 <HAL_DMA_Start_IT+0x478>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d045      	beq.n	8005688 <HAL_DMA_Start_IT+0x430>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a34      	ldr	r2, [pc, #208]	; (80056d4 <HAL_DMA_Start_IT+0x47c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d040      	beq.n	8005688 <HAL_DMA_Start_IT+0x430>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a33      	ldr	r2, [pc, #204]	; (80056d8 <HAL_DMA_Start_IT+0x480>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d03b      	beq.n	8005688 <HAL_DMA_Start_IT+0x430>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a31      	ldr	r2, [pc, #196]	; (80056dc <HAL_DMA_Start_IT+0x484>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d036      	beq.n	8005688 <HAL_DMA_Start_IT+0x430>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a30      	ldr	r2, [pc, #192]	; (80056e0 <HAL_DMA_Start_IT+0x488>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d031      	beq.n	8005688 <HAL_DMA_Start_IT+0x430>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a2e      	ldr	r2, [pc, #184]	; (80056e4 <HAL_DMA_Start_IT+0x48c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d02c      	beq.n	8005688 <HAL_DMA_Start_IT+0x430>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a2d      	ldr	r2, [pc, #180]	; (80056e8 <HAL_DMA_Start_IT+0x490>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d027      	beq.n	8005688 <HAL_DMA_Start_IT+0x430>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a2b      	ldr	r2, [pc, #172]	; (80056ec <HAL_DMA_Start_IT+0x494>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d022      	beq.n	8005688 <HAL_DMA_Start_IT+0x430>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a2a      	ldr	r2, [pc, #168]	; (80056f0 <HAL_DMA_Start_IT+0x498>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d01d      	beq.n	8005688 <HAL_DMA_Start_IT+0x430>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a28      	ldr	r2, [pc, #160]	; (80056f4 <HAL_DMA_Start_IT+0x49c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d018      	beq.n	8005688 <HAL_DMA_Start_IT+0x430>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a27      	ldr	r2, [pc, #156]	; (80056f8 <HAL_DMA_Start_IT+0x4a0>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d013      	beq.n	8005688 <HAL_DMA_Start_IT+0x430>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a25      	ldr	r2, [pc, #148]	; (80056fc <HAL_DMA_Start_IT+0x4a4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d00e      	beq.n	8005688 <HAL_DMA_Start_IT+0x430>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a24      	ldr	r2, [pc, #144]	; (8005700 <HAL_DMA_Start_IT+0x4a8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d009      	beq.n	8005688 <HAL_DMA_Start_IT+0x430>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a22      	ldr	r2, [pc, #136]	; (8005704 <HAL_DMA_Start_IT+0x4ac>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d004      	beq.n	8005688 <HAL_DMA_Start_IT+0x430>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a21      	ldr	r2, [pc, #132]	; (8005708 <HAL_DMA_Start_IT+0x4b0>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d108      	bne.n	800569a <HAL_DMA_Start_IT+0x442>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	e012      	b.n	80056c0 <HAL_DMA_Start_IT+0x468>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f042 0201 	orr.w	r2, r2, #1
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	e009      	b.n	80056c0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80056c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	40020010 	.word	0x40020010
 80056d0:	40020028 	.word	0x40020028
 80056d4:	40020040 	.word	0x40020040
 80056d8:	40020058 	.word	0x40020058
 80056dc:	40020070 	.word	0x40020070
 80056e0:	40020088 	.word	0x40020088
 80056e4:	400200a0 	.word	0x400200a0
 80056e8:	400200b8 	.word	0x400200b8
 80056ec:	40020410 	.word	0x40020410
 80056f0:	40020428 	.word	0x40020428
 80056f4:	40020440 	.word	0x40020440
 80056f8:	40020458 	.word	0x40020458
 80056fc:	40020470 	.word	0x40020470
 8005700:	40020488 	.word	0x40020488
 8005704:	400204a0 	.word	0x400204a0
 8005708:	400204b8 	.word	0x400204b8
 800570c:	58025408 	.word	0x58025408
 8005710:	5802541c 	.word	0x5802541c
 8005714:	58025430 	.word	0x58025430
 8005718:	58025444 	.word	0x58025444
 800571c:	58025458 	.word	0x58025458
 8005720:	5802546c 	.word	0x5802546c
 8005724:	58025480 	.word	0x58025480
 8005728:	58025494 	.word	0x58025494

0800572c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005734:	f7ff f91a 	bl	800496c <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e2dc      	b.n	8005cfe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d008      	beq.n	8005762 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2280      	movs	r2, #128	; 0x80
 8005754:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e2cd      	b.n	8005cfe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a76      	ldr	r2, [pc, #472]	; (8005940 <HAL_DMA_Abort+0x214>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d04a      	beq.n	8005802 <HAL_DMA_Abort+0xd6>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a74      	ldr	r2, [pc, #464]	; (8005944 <HAL_DMA_Abort+0x218>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d045      	beq.n	8005802 <HAL_DMA_Abort+0xd6>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a73      	ldr	r2, [pc, #460]	; (8005948 <HAL_DMA_Abort+0x21c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d040      	beq.n	8005802 <HAL_DMA_Abort+0xd6>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a71      	ldr	r2, [pc, #452]	; (800594c <HAL_DMA_Abort+0x220>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d03b      	beq.n	8005802 <HAL_DMA_Abort+0xd6>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a70      	ldr	r2, [pc, #448]	; (8005950 <HAL_DMA_Abort+0x224>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d036      	beq.n	8005802 <HAL_DMA_Abort+0xd6>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a6e      	ldr	r2, [pc, #440]	; (8005954 <HAL_DMA_Abort+0x228>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d031      	beq.n	8005802 <HAL_DMA_Abort+0xd6>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a6d      	ldr	r2, [pc, #436]	; (8005958 <HAL_DMA_Abort+0x22c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d02c      	beq.n	8005802 <HAL_DMA_Abort+0xd6>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a6b      	ldr	r2, [pc, #428]	; (800595c <HAL_DMA_Abort+0x230>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d027      	beq.n	8005802 <HAL_DMA_Abort+0xd6>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a6a      	ldr	r2, [pc, #424]	; (8005960 <HAL_DMA_Abort+0x234>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d022      	beq.n	8005802 <HAL_DMA_Abort+0xd6>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a68      	ldr	r2, [pc, #416]	; (8005964 <HAL_DMA_Abort+0x238>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d01d      	beq.n	8005802 <HAL_DMA_Abort+0xd6>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a67      	ldr	r2, [pc, #412]	; (8005968 <HAL_DMA_Abort+0x23c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d018      	beq.n	8005802 <HAL_DMA_Abort+0xd6>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a65      	ldr	r2, [pc, #404]	; (800596c <HAL_DMA_Abort+0x240>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d013      	beq.n	8005802 <HAL_DMA_Abort+0xd6>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a64      	ldr	r2, [pc, #400]	; (8005970 <HAL_DMA_Abort+0x244>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00e      	beq.n	8005802 <HAL_DMA_Abort+0xd6>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a62      	ldr	r2, [pc, #392]	; (8005974 <HAL_DMA_Abort+0x248>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d009      	beq.n	8005802 <HAL_DMA_Abort+0xd6>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a61      	ldr	r2, [pc, #388]	; (8005978 <HAL_DMA_Abort+0x24c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d004      	beq.n	8005802 <HAL_DMA_Abort+0xd6>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a5f      	ldr	r2, [pc, #380]	; (800597c <HAL_DMA_Abort+0x250>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d101      	bne.n	8005806 <HAL_DMA_Abort+0xda>
 8005802:	2301      	movs	r3, #1
 8005804:	e000      	b.n	8005808 <HAL_DMA_Abort+0xdc>
 8005806:	2300      	movs	r3, #0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d013      	beq.n	8005834 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 021e 	bic.w	r2, r2, #30
 800581a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695a      	ldr	r2, [r3, #20]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800582a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	e00a      	b.n	800584a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 020e 	bic.w	r2, r2, #14
 8005842:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a3c      	ldr	r2, [pc, #240]	; (8005940 <HAL_DMA_Abort+0x214>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d072      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a3a      	ldr	r2, [pc, #232]	; (8005944 <HAL_DMA_Abort+0x218>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d06d      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a39      	ldr	r2, [pc, #228]	; (8005948 <HAL_DMA_Abort+0x21c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d068      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a37      	ldr	r2, [pc, #220]	; (800594c <HAL_DMA_Abort+0x220>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d063      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a36      	ldr	r2, [pc, #216]	; (8005950 <HAL_DMA_Abort+0x224>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d05e      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a34      	ldr	r2, [pc, #208]	; (8005954 <HAL_DMA_Abort+0x228>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d059      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a33      	ldr	r2, [pc, #204]	; (8005958 <HAL_DMA_Abort+0x22c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d054      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a31      	ldr	r2, [pc, #196]	; (800595c <HAL_DMA_Abort+0x230>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d04f      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a30      	ldr	r2, [pc, #192]	; (8005960 <HAL_DMA_Abort+0x234>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d04a      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a2e      	ldr	r2, [pc, #184]	; (8005964 <HAL_DMA_Abort+0x238>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d045      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a2d      	ldr	r2, [pc, #180]	; (8005968 <HAL_DMA_Abort+0x23c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d040      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a2b      	ldr	r2, [pc, #172]	; (800596c <HAL_DMA_Abort+0x240>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d03b      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a2a      	ldr	r2, [pc, #168]	; (8005970 <HAL_DMA_Abort+0x244>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d036      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a28      	ldr	r2, [pc, #160]	; (8005974 <HAL_DMA_Abort+0x248>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d031      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a27      	ldr	r2, [pc, #156]	; (8005978 <HAL_DMA_Abort+0x24c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d02c      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a25      	ldr	r2, [pc, #148]	; (800597c <HAL_DMA_Abort+0x250>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d027      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a24      	ldr	r2, [pc, #144]	; (8005980 <HAL_DMA_Abort+0x254>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d022      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a22      	ldr	r2, [pc, #136]	; (8005984 <HAL_DMA_Abort+0x258>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d01d      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a21      	ldr	r2, [pc, #132]	; (8005988 <HAL_DMA_Abort+0x25c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d018      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1f      	ldr	r2, [pc, #124]	; (800598c <HAL_DMA_Abort+0x260>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a1e      	ldr	r2, [pc, #120]	; (8005990 <HAL_DMA_Abort+0x264>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00e      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a1c      	ldr	r2, [pc, #112]	; (8005994 <HAL_DMA_Abort+0x268>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d009      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1b      	ldr	r2, [pc, #108]	; (8005998 <HAL_DMA_Abort+0x26c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d004      	beq.n	800593a <HAL_DMA_Abort+0x20e>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a19      	ldr	r2, [pc, #100]	; (800599c <HAL_DMA_Abort+0x270>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d132      	bne.n	80059a0 <HAL_DMA_Abort+0x274>
 800593a:	2301      	movs	r3, #1
 800593c:	e031      	b.n	80059a2 <HAL_DMA_Abort+0x276>
 800593e:	bf00      	nop
 8005940:	40020010 	.word	0x40020010
 8005944:	40020028 	.word	0x40020028
 8005948:	40020040 	.word	0x40020040
 800594c:	40020058 	.word	0x40020058
 8005950:	40020070 	.word	0x40020070
 8005954:	40020088 	.word	0x40020088
 8005958:	400200a0 	.word	0x400200a0
 800595c:	400200b8 	.word	0x400200b8
 8005960:	40020410 	.word	0x40020410
 8005964:	40020428 	.word	0x40020428
 8005968:	40020440 	.word	0x40020440
 800596c:	40020458 	.word	0x40020458
 8005970:	40020470 	.word	0x40020470
 8005974:	40020488 	.word	0x40020488
 8005978:	400204a0 	.word	0x400204a0
 800597c:	400204b8 	.word	0x400204b8
 8005980:	58025408 	.word	0x58025408
 8005984:	5802541c 	.word	0x5802541c
 8005988:	58025430 	.word	0x58025430
 800598c:	58025444 	.word	0x58025444
 8005990:	58025458 	.word	0x58025458
 8005994:	5802546c 	.word	0x5802546c
 8005998:	58025480 	.word	0x58025480
 800599c:	58025494 	.word	0x58025494
 80059a0:	2300      	movs	r3, #0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d007      	beq.n	80059b6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a6d      	ldr	r2, [pc, #436]	; (8005b70 <HAL_DMA_Abort+0x444>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d04a      	beq.n	8005a56 <HAL_DMA_Abort+0x32a>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a6b      	ldr	r2, [pc, #428]	; (8005b74 <HAL_DMA_Abort+0x448>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d045      	beq.n	8005a56 <HAL_DMA_Abort+0x32a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a6a      	ldr	r2, [pc, #424]	; (8005b78 <HAL_DMA_Abort+0x44c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d040      	beq.n	8005a56 <HAL_DMA_Abort+0x32a>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a68      	ldr	r2, [pc, #416]	; (8005b7c <HAL_DMA_Abort+0x450>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d03b      	beq.n	8005a56 <HAL_DMA_Abort+0x32a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a67      	ldr	r2, [pc, #412]	; (8005b80 <HAL_DMA_Abort+0x454>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d036      	beq.n	8005a56 <HAL_DMA_Abort+0x32a>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a65      	ldr	r2, [pc, #404]	; (8005b84 <HAL_DMA_Abort+0x458>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d031      	beq.n	8005a56 <HAL_DMA_Abort+0x32a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a64      	ldr	r2, [pc, #400]	; (8005b88 <HAL_DMA_Abort+0x45c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d02c      	beq.n	8005a56 <HAL_DMA_Abort+0x32a>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a62      	ldr	r2, [pc, #392]	; (8005b8c <HAL_DMA_Abort+0x460>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d027      	beq.n	8005a56 <HAL_DMA_Abort+0x32a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a61      	ldr	r2, [pc, #388]	; (8005b90 <HAL_DMA_Abort+0x464>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d022      	beq.n	8005a56 <HAL_DMA_Abort+0x32a>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a5f      	ldr	r2, [pc, #380]	; (8005b94 <HAL_DMA_Abort+0x468>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d01d      	beq.n	8005a56 <HAL_DMA_Abort+0x32a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a5e      	ldr	r2, [pc, #376]	; (8005b98 <HAL_DMA_Abort+0x46c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d018      	beq.n	8005a56 <HAL_DMA_Abort+0x32a>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a5c      	ldr	r2, [pc, #368]	; (8005b9c <HAL_DMA_Abort+0x470>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d013      	beq.n	8005a56 <HAL_DMA_Abort+0x32a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a5b      	ldr	r2, [pc, #364]	; (8005ba0 <HAL_DMA_Abort+0x474>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d00e      	beq.n	8005a56 <HAL_DMA_Abort+0x32a>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a59      	ldr	r2, [pc, #356]	; (8005ba4 <HAL_DMA_Abort+0x478>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d009      	beq.n	8005a56 <HAL_DMA_Abort+0x32a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a58      	ldr	r2, [pc, #352]	; (8005ba8 <HAL_DMA_Abort+0x47c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d004      	beq.n	8005a56 <HAL_DMA_Abort+0x32a>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a56      	ldr	r2, [pc, #344]	; (8005bac <HAL_DMA_Abort+0x480>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d108      	bne.n	8005a68 <HAL_DMA_Abort+0x33c>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 0201 	bic.w	r2, r2, #1
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	e007      	b.n	8005a78 <HAL_DMA_Abort+0x34c>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0201 	bic.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005a78:	e013      	b.n	8005aa2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a7a:	f7fe ff77 	bl	800496c <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b05      	cmp	r3, #5
 8005a86:	d90c      	bls.n	8005aa2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2203      	movs	r2, #3
 8005a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e12d      	b.n	8005cfe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1e5      	bne.n	8005a7a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a2f      	ldr	r2, [pc, #188]	; (8005b70 <HAL_DMA_Abort+0x444>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d04a      	beq.n	8005b4e <HAL_DMA_Abort+0x422>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a2d      	ldr	r2, [pc, #180]	; (8005b74 <HAL_DMA_Abort+0x448>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d045      	beq.n	8005b4e <HAL_DMA_Abort+0x422>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a2c      	ldr	r2, [pc, #176]	; (8005b78 <HAL_DMA_Abort+0x44c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d040      	beq.n	8005b4e <HAL_DMA_Abort+0x422>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a2a      	ldr	r2, [pc, #168]	; (8005b7c <HAL_DMA_Abort+0x450>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d03b      	beq.n	8005b4e <HAL_DMA_Abort+0x422>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a29      	ldr	r2, [pc, #164]	; (8005b80 <HAL_DMA_Abort+0x454>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d036      	beq.n	8005b4e <HAL_DMA_Abort+0x422>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a27      	ldr	r2, [pc, #156]	; (8005b84 <HAL_DMA_Abort+0x458>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d031      	beq.n	8005b4e <HAL_DMA_Abort+0x422>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a26      	ldr	r2, [pc, #152]	; (8005b88 <HAL_DMA_Abort+0x45c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d02c      	beq.n	8005b4e <HAL_DMA_Abort+0x422>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a24      	ldr	r2, [pc, #144]	; (8005b8c <HAL_DMA_Abort+0x460>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d027      	beq.n	8005b4e <HAL_DMA_Abort+0x422>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a23      	ldr	r2, [pc, #140]	; (8005b90 <HAL_DMA_Abort+0x464>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d022      	beq.n	8005b4e <HAL_DMA_Abort+0x422>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a21      	ldr	r2, [pc, #132]	; (8005b94 <HAL_DMA_Abort+0x468>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d01d      	beq.n	8005b4e <HAL_DMA_Abort+0x422>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a20      	ldr	r2, [pc, #128]	; (8005b98 <HAL_DMA_Abort+0x46c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d018      	beq.n	8005b4e <HAL_DMA_Abort+0x422>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a1e      	ldr	r2, [pc, #120]	; (8005b9c <HAL_DMA_Abort+0x470>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d013      	beq.n	8005b4e <HAL_DMA_Abort+0x422>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a1d      	ldr	r2, [pc, #116]	; (8005ba0 <HAL_DMA_Abort+0x474>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d00e      	beq.n	8005b4e <HAL_DMA_Abort+0x422>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a1b      	ldr	r2, [pc, #108]	; (8005ba4 <HAL_DMA_Abort+0x478>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d009      	beq.n	8005b4e <HAL_DMA_Abort+0x422>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a1a      	ldr	r2, [pc, #104]	; (8005ba8 <HAL_DMA_Abort+0x47c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d004      	beq.n	8005b4e <HAL_DMA_Abort+0x422>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a18      	ldr	r2, [pc, #96]	; (8005bac <HAL_DMA_Abort+0x480>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d101      	bne.n	8005b52 <HAL_DMA_Abort+0x426>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <HAL_DMA_Abort+0x428>
 8005b52:	2300      	movs	r3, #0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d02b      	beq.n	8005bb0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b62:	f003 031f 	and.w	r3, r3, #31
 8005b66:	223f      	movs	r2, #63	; 0x3f
 8005b68:	409a      	lsls	r2, r3
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	609a      	str	r2, [r3, #8]
 8005b6e:	e02a      	b.n	8005bc6 <HAL_DMA_Abort+0x49a>
 8005b70:	40020010 	.word	0x40020010
 8005b74:	40020028 	.word	0x40020028
 8005b78:	40020040 	.word	0x40020040
 8005b7c:	40020058 	.word	0x40020058
 8005b80:	40020070 	.word	0x40020070
 8005b84:	40020088 	.word	0x40020088
 8005b88:	400200a0 	.word	0x400200a0
 8005b8c:	400200b8 	.word	0x400200b8
 8005b90:	40020410 	.word	0x40020410
 8005b94:	40020428 	.word	0x40020428
 8005b98:	40020440 	.word	0x40020440
 8005b9c:	40020458 	.word	0x40020458
 8005ba0:	40020470 	.word	0x40020470
 8005ba4:	40020488 	.word	0x40020488
 8005ba8:	400204a0 	.word	0x400204a0
 8005bac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bba:	f003 031f 	and.w	r3, r3, #31
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	409a      	lsls	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a4f      	ldr	r2, [pc, #316]	; (8005d08 <HAL_DMA_Abort+0x5dc>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d072      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a4d      	ldr	r2, [pc, #308]	; (8005d0c <HAL_DMA_Abort+0x5e0>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d06d      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a4c      	ldr	r2, [pc, #304]	; (8005d10 <HAL_DMA_Abort+0x5e4>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d068      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a4a      	ldr	r2, [pc, #296]	; (8005d14 <HAL_DMA_Abort+0x5e8>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d063      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a49      	ldr	r2, [pc, #292]	; (8005d18 <HAL_DMA_Abort+0x5ec>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d05e      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a47      	ldr	r2, [pc, #284]	; (8005d1c <HAL_DMA_Abort+0x5f0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d059      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a46      	ldr	r2, [pc, #280]	; (8005d20 <HAL_DMA_Abort+0x5f4>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d054      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a44      	ldr	r2, [pc, #272]	; (8005d24 <HAL_DMA_Abort+0x5f8>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d04f      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a43      	ldr	r2, [pc, #268]	; (8005d28 <HAL_DMA_Abort+0x5fc>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d04a      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a41      	ldr	r2, [pc, #260]	; (8005d2c <HAL_DMA_Abort+0x600>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d045      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a40      	ldr	r2, [pc, #256]	; (8005d30 <HAL_DMA_Abort+0x604>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d040      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a3e      	ldr	r2, [pc, #248]	; (8005d34 <HAL_DMA_Abort+0x608>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d03b      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a3d      	ldr	r2, [pc, #244]	; (8005d38 <HAL_DMA_Abort+0x60c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d036      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a3b      	ldr	r2, [pc, #236]	; (8005d3c <HAL_DMA_Abort+0x610>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d031      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a3a      	ldr	r2, [pc, #232]	; (8005d40 <HAL_DMA_Abort+0x614>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d02c      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a38      	ldr	r2, [pc, #224]	; (8005d44 <HAL_DMA_Abort+0x618>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d027      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a37      	ldr	r2, [pc, #220]	; (8005d48 <HAL_DMA_Abort+0x61c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d022      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a35      	ldr	r2, [pc, #212]	; (8005d4c <HAL_DMA_Abort+0x620>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d01d      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a34      	ldr	r2, [pc, #208]	; (8005d50 <HAL_DMA_Abort+0x624>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d018      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a32      	ldr	r2, [pc, #200]	; (8005d54 <HAL_DMA_Abort+0x628>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d013      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a31      	ldr	r2, [pc, #196]	; (8005d58 <HAL_DMA_Abort+0x62c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d00e      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a2f      	ldr	r2, [pc, #188]	; (8005d5c <HAL_DMA_Abort+0x630>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d009      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a2e      	ldr	r2, [pc, #184]	; (8005d60 <HAL_DMA_Abort+0x634>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d004      	beq.n	8005cb6 <HAL_DMA_Abort+0x58a>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a2c      	ldr	r2, [pc, #176]	; (8005d64 <HAL_DMA_Abort+0x638>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d101      	bne.n	8005cba <HAL_DMA_Abort+0x58e>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e000      	b.n	8005cbc <HAL_DMA_Abort+0x590>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d015      	beq.n	8005cec <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005cc8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00c      	beq.n	8005cec <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ce0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005cea:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	40020010 	.word	0x40020010
 8005d0c:	40020028 	.word	0x40020028
 8005d10:	40020040 	.word	0x40020040
 8005d14:	40020058 	.word	0x40020058
 8005d18:	40020070 	.word	0x40020070
 8005d1c:	40020088 	.word	0x40020088
 8005d20:	400200a0 	.word	0x400200a0
 8005d24:	400200b8 	.word	0x400200b8
 8005d28:	40020410 	.word	0x40020410
 8005d2c:	40020428 	.word	0x40020428
 8005d30:	40020440 	.word	0x40020440
 8005d34:	40020458 	.word	0x40020458
 8005d38:	40020470 	.word	0x40020470
 8005d3c:	40020488 	.word	0x40020488
 8005d40:	400204a0 	.word	0x400204a0
 8005d44:	400204b8 	.word	0x400204b8
 8005d48:	58025408 	.word	0x58025408
 8005d4c:	5802541c 	.word	0x5802541c
 8005d50:	58025430 	.word	0x58025430
 8005d54:	58025444 	.word	0x58025444
 8005d58:	58025458 	.word	0x58025458
 8005d5c:	5802546c 	.word	0x5802546c
 8005d60:	58025480 	.word	0x58025480
 8005d64:	58025494 	.word	0x58025494

08005d68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e237      	b.n	80061ea <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d004      	beq.n	8005d90 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2280      	movs	r2, #128	; 0x80
 8005d8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e22c      	b.n	80061ea <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a5c      	ldr	r2, [pc, #368]	; (8005f08 <HAL_DMA_Abort_IT+0x1a0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d04a      	beq.n	8005e30 <HAL_DMA_Abort_IT+0xc8>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a5b      	ldr	r2, [pc, #364]	; (8005f0c <HAL_DMA_Abort_IT+0x1a4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d045      	beq.n	8005e30 <HAL_DMA_Abort_IT+0xc8>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a59      	ldr	r2, [pc, #356]	; (8005f10 <HAL_DMA_Abort_IT+0x1a8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d040      	beq.n	8005e30 <HAL_DMA_Abort_IT+0xc8>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a58      	ldr	r2, [pc, #352]	; (8005f14 <HAL_DMA_Abort_IT+0x1ac>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d03b      	beq.n	8005e30 <HAL_DMA_Abort_IT+0xc8>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a56      	ldr	r2, [pc, #344]	; (8005f18 <HAL_DMA_Abort_IT+0x1b0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d036      	beq.n	8005e30 <HAL_DMA_Abort_IT+0xc8>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a55      	ldr	r2, [pc, #340]	; (8005f1c <HAL_DMA_Abort_IT+0x1b4>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d031      	beq.n	8005e30 <HAL_DMA_Abort_IT+0xc8>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a53      	ldr	r2, [pc, #332]	; (8005f20 <HAL_DMA_Abort_IT+0x1b8>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d02c      	beq.n	8005e30 <HAL_DMA_Abort_IT+0xc8>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a52      	ldr	r2, [pc, #328]	; (8005f24 <HAL_DMA_Abort_IT+0x1bc>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d027      	beq.n	8005e30 <HAL_DMA_Abort_IT+0xc8>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a50      	ldr	r2, [pc, #320]	; (8005f28 <HAL_DMA_Abort_IT+0x1c0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d022      	beq.n	8005e30 <HAL_DMA_Abort_IT+0xc8>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a4f      	ldr	r2, [pc, #316]	; (8005f2c <HAL_DMA_Abort_IT+0x1c4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d01d      	beq.n	8005e30 <HAL_DMA_Abort_IT+0xc8>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a4d      	ldr	r2, [pc, #308]	; (8005f30 <HAL_DMA_Abort_IT+0x1c8>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d018      	beq.n	8005e30 <HAL_DMA_Abort_IT+0xc8>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a4c      	ldr	r2, [pc, #304]	; (8005f34 <HAL_DMA_Abort_IT+0x1cc>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d013      	beq.n	8005e30 <HAL_DMA_Abort_IT+0xc8>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a4a      	ldr	r2, [pc, #296]	; (8005f38 <HAL_DMA_Abort_IT+0x1d0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00e      	beq.n	8005e30 <HAL_DMA_Abort_IT+0xc8>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a49      	ldr	r2, [pc, #292]	; (8005f3c <HAL_DMA_Abort_IT+0x1d4>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d009      	beq.n	8005e30 <HAL_DMA_Abort_IT+0xc8>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a47      	ldr	r2, [pc, #284]	; (8005f40 <HAL_DMA_Abort_IT+0x1d8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d004      	beq.n	8005e30 <HAL_DMA_Abort_IT+0xc8>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a46      	ldr	r2, [pc, #280]	; (8005f44 <HAL_DMA_Abort_IT+0x1dc>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d101      	bne.n	8005e34 <HAL_DMA_Abort_IT+0xcc>
 8005e30:	2301      	movs	r3, #1
 8005e32:	e000      	b.n	8005e36 <HAL_DMA_Abort_IT+0xce>
 8005e34:	2300      	movs	r3, #0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 8086 	beq.w	8005f48 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2204      	movs	r2, #4
 8005e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a2f      	ldr	r2, [pc, #188]	; (8005f08 <HAL_DMA_Abort_IT+0x1a0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d04a      	beq.n	8005ee4 <HAL_DMA_Abort_IT+0x17c>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a2e      	ldr	r2, [pc, #184]	; (8005f0c <HAL_DMA_Abort_IT+0x1a4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d045      	beq.n	8005ee4 <HAL_DMA_Abort_IT+0x17c>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a2c      	ldr	r2, [pc, #176]	; (8005f10 <HAL_DMA_Abort_IT+0x1a8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d040      	beq.n	8005ee4 <HAL_DMA_Abort_IT+0x17c>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a2b      	ldr	r2, [pc, #172]	; (8005f14 <HAL_DMA_Abort_IT+0x1ac>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d03b      	beq.n	8005ee4 <HAL_DMA_Abort_IT+0x17c>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a29      	ldr	r2, [pc, #164]	; (8005f18 <HAL_DMA_Abort_IT+0x1b0>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d036      	beq.n	8005ee4 <HAL_DMA_Abort_IT+0x17c>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a28      	ldr	r2, [pc, #160]	; (8005f1c <HAL_DMA_Abort_IT+0x1b4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d031      	beq.n	8005ee4 <HAL_DMA_Abort_IT+0x17c>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a26      	ldr	r2, [pc, #152]	; (8005f20 <HAL_DMA_Abort_IT+0x1b8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d02c      	beq.n	8005ee4 <HAL_DMA_Abort_IT+0x17c>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a25      	ldr	r2, [pc, #148]	; (8005f24 <HAL_DMA_Abort_IT+0x1bc>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d027      	beq.n	8005ee4 <HAL_DMA_Abort_IT+0x17c>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a23      	ldr	r2, [pc, #140]	; (8005f28 <HAL_DMA_Abort_IT+0x1c0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d022      	beq.n	8005ee4 <HAL_DMA_Abort_IT+0x17c>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a22      	ldr	r2, [pc, #136]	; (8005f2c <HAL_DMA_Abort_IT+0x1c4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d01d      	beq.n	8005ee4 <HAL_DMA_Abort_IT+0x17c>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a20      	ldr	r2, [pc, #128]	; (8005f30 <HAL_DMA_Abort_IT+0x1c8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d018      	beq.n	8005ee4 <HAL_DMA_Abort_IT+0x17c>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a1f      	ldr	r2, [pc, #124]	; (8005f34 <HAL_DMA_Abort_IT+0x1cc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d013      	beq.n	8005ee4 <HAL_DMA_Abort_IT+0x17c>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a1d      	ldr	r2, [pc, #116]	; (8005f38 <HAL_DMA_Abort_IT+0x1d0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d00e      	beq.n	8005ee4 <HAL_DMA_Abort_IT+0x17c>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a1c      	ldr	r2, [pc, #112]	; (8005f3c <HAL_DMA_Abort_IT+0x1d4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d009      	beq.n	8005ee4 <HAL_DMA_Abort_IT+0x17c>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a1a      	ldr	r2, [pc, #104]	; (8005f40 <HAL_DMA_Abort_IT+0x1d8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d004      	beq.n	8005ee4 <HAL_DMA_Abort_IT+0x17c>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a19      	ldr	r2, [pc, #100]	; (8005f44 <HAL_DMA_Abort_IT+0x1dc>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d108      	bne.n	8005ef6 <HAL_DMA_Abort_IT+0x18e>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0201 	bic.w	r2, r2, #1
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	e178      	b.n	80061e8 <HAL_DMA_Abort_IT+0x480>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 0201 	bic.w	r2, r2, #1
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	e16f      	b.n	80061e8 <HAL_DMA_Abort_IT+0x480>
 8005f08:	40020010 	.word	0x40020010
 8005f0c:	40020028 	.word	0x40020028
 8005f10:	40020040 	.word	0x40020040
 8005f14:	40020058 	.word	0x40020058
 8005f18:	40020070 	.word	0x40020070
 8005f1c:	40020088 	.word	0x40020088
 8005f20:	400200a0 	.word	0x400200a0
 8005f24:	400200b8 	.word	0x400200b8
 8005f28:	40020410 	.word	0x40020410
 8005f2c:	40020428 	.word	0x40020428
 8005f30:	40020440 	.word	0x40020440
 8005f34:	40020458 	.word	0x40020458
 8005f38:	40020470 	.word	0x40020470
 8005f3c:	40020488 	.word	0x40020488
 8005f40:	400204a0 	.word	0x400204a0
 8005f44:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 020e 	bic.w	r2, r2, #14
 8005f56:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a6c      	ldr	r2, [pc, #432]	; (8006110 <HAL_DMA_Abort_IT+0x3a8>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d04a      	beq.n	8005ff8 <HAL_DMA_Abort_IT+0x290>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a6b      	ldr	r2, [pc, #428]	; (8006114 <HAL_DMA_Abort_IT+0x3ac>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d045      	beq.n	8005ff8 <HAL_DMA_Abort_IT+0x290>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a69      	ldr	r2, [pc, #420]	; (8006118 <HAL_DMA_Abort_IT+0x3b0>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d040      	beq.n	8005ff8 <HAL_DMA_Abort_IT+0x290>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a68      	ldr	r2, [pc, #416]	; (800611c <HAL_DMA_Abort_IT+0x3b4>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d03b      	beq.n	8005ff8 <HAL_DMA_Abort_IT+0x290>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a66      	ldr	r2, [pc, #408]	; (8006120 <HAL_DMA_Abort_IT+0x3b8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d036      	beq.n	8005ff8 <HAL_DMA_Abort_IT+0x290>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a65      	ldr	r2, [pc, #404]	; (8006124 <HAL_DMA_Abort_IT+0x3bc>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d031      	beq.n	8005ff8 <HAL_DMA_Abort_IT+0x290>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a63      	ldr	r2, [pc, #396]	; (8006128 <HAL_DMA_Abort_IT+0x3c0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d02c      	beq.n	8005ff8 <HAL_DMA_Abort_IT+0x290>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a62      	ldr	r2, [pc, #392]	; (800612c <HAL_DMA_Abort_IT+0x3c4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d027      	beq.n	8005ff8 <HAL_DMA_Abort_IT+0x290>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a60      	ldr	r2, [pc, #384]	; (8006130 <HAL_DMA_Abort_IT+0x3c8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d022      	beq.n	8005ff8 <HAL_DMA_Abort_IT+0x290>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a5f      	ldr	r2, [pc, #380]	; (8006134 <HAL_DMA_Abort_IT+0x3cc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d01d      	beq.n	8005ff8 <HAL_DMA_Abort_IT+0x290>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a5d      	ldr	r2, [pc, #372]	; (8006138 <HAL_DMA_Abort_IT+0x3d0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d018      	beq.n	8005ff8 <HAL_DMA_Abort_IT+0x290>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a5c      	ldr	r2, [pc, #368]	; (800613c <HAL_DMA_Abort_IT+0x3d4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d013      	beq.n	8005ff8 <HAL_DMA_Abort_IT+0x290>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a5a      	ldr	r2, [pc, #360]	; (8006140 <HAL_DMA_Abort_IT+0x3d8>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00e      	beq.n	8005ff8 <HAL_DMA_Abort_IT+0x290>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a59      	ldr	r2, [pc, #356]	; (8006144 <HAL_DMA_Abort_IT+0x3dc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d009      	beq.n	8005ff8 <HAL_DMA_Abort_IT+0x290>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a57      	ldr	r2, [pc, #348]	; (8006148 <HAL_DMA_Abort_IT+0x3e0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d004      	beq.n	8005ff8 <HAL_DMA_Abort_IT+0x290>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a56      	ldr	r2, [pc, #344]	; (800614c <HAL_DMA_Abort_IT+0x3e4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d108      	bne.n	800600a <HAL_DMA_Abort_IT+0x2a2>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 0201 	bic.w	r2, r2, #1
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	e007      	b.n	800601a <HAL_DMA_Abort_IT+0x2b2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0201 	bic.w	r2, r2, #1
 8006018:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a3c      	ldr	r2, [pc, #240]	; (8006110 <HAL_DMA_Abort_IT+0x3a8>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d072      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a3a      	ldr	r2, [pc, #232]	; (8006114 <HAL_DMA_Abort_IT+0x3ac>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d06d      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a39      	ldr	r2, [pc, #228]	; (8006118 <HAL_DMA_Abort_IT+0x3b0>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d068      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a37      	ldr	r2, [pc, #220]	; (800611c <HAL_DMA_Abort_IT+0x3b4>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d063      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a36      	ldr	r2, [pc, #216]	; (8006120 <HAL_DMA_Abort_IT+0x3b8>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d05e      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a34      	ldr	r2, [pc, #208]	; (8006124 <HAL_DMA_Abort_IT+0x3bc>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d059      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a33      	ldr	r2, [pc, #204]	; (8006128 <HAL_DMA_Abort_IT+0x3c0>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d054      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a31      	ldr	r2, [pc, #196]	; (800612c <HAL_DMA_Abort_IT+0x3c4>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d04f      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a30      	ldr	r2, [pc, #192]	; (8006130 <HAL_DMA_Abort_IT+0x3c8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d04a      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a2e      	ldr	r2, [pc, #184]	; (8006134 <HAL_DMA_Abort_IT+0x3cc>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d045      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a2d      	ldr	r2, [pc, #180]	; (8006138 <HAL_DMA_Abort_IT+0x3d0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d040      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a2b      	ldr	r2, [pc, #172]	; (800613c <HAL_DMA_Abort_IT+0x3d4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d03b      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a2a      	ldr	r2, [pc, #168]	; (8006140 <HAL_DMA_Abort_IT+0x3d8>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d036      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a28      	ldr	r2, [pc, #160]	; (8006144 <HAL_DMA_Abort_IT+0x3dc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d031      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a27      	ldr	r2, [pc, #156]	; (8006148 <HAL_DMA_Abort_IT+0x3e0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d02c      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a25      	ldr	r2, [pc, #148]	; (800614c <HAL_DMA_Abort_IT+0x3e4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d027      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a24      	ldr	r2, [pc, #144]	; (8006150 <HAL_DMA_Abort_IT+0x3e8>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d022      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a22      	ldr	r2, [pc, #136]	; (8006154 <HAL_DMA_Abort_IT+0x3ec>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d01d      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a21      	ldr	r2, [pc, #132]	; (8006158 <HAL_DMA_Abort_IT+0x3f0>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d018      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a1f      	ldr	r2, [pc, #124]	; (800615c <HAL_DMA_Abort_IT+0x3f4>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d013      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a1e      	ldr	r2, [pc, #120]	; (8006160 <HAL_DMA_Abort_IT+0x3f8>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00e      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a1c      	ldr	r2, [pc, #112]	; (8006164 <HAL_DMA_Abort_IT+0x3fc>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d009      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a1b      	ldr	r2, [pc, #108]	; (8006168 <HAL_DMA_Abort_IT+0x400>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d004      	beq.n	800610a <HAL_DMA_Abort_IT+0x3a2>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a19      	ldr	r2, [pc, #100]	; (800616c <HAL_DMA_Abort_IT+0x404>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d132      	bne.n	8006170 <HAL_DMA_Abort_IT+0x408>
 800610a:	2301      	movs	r3, #1
 800610c:	e031      	b.n	8006172 <HAL_DMA_Abort_IT+0x40a>
 800610e:	bf00      	nop
 8006110:	40020010 	.word	0x40020010
 8006114:	40020028 	.word	0x40020028
 8006118:	40020040 	.word	0x40020040
 800611c:	40020058 	.word	0x40020058
 8006120:	40020070 	.word	0x40020070
 8006124:	40020088 	.word	0x40020088
 8006128:	400200a0 	.word	0x400200a0
 800612c:	400200b8 	.word	0x400200b8
 8006130:	40020410 	.word	0x40020410
 8006134:	40020428 	.word	0x40020428
 8006138:	40020440 	.word	0x40020440
 800613c:	40020458 	.word	0x40020458
 8006140:	40020470 	.word	0x40020470
 8006144:	40020488 	.word	0x40020488
 8006148:	400204a0 	.word	0x400204a0
 800614c:	400204b8 	.word	0x400204b8
 8006150:	58025408 	.word	0x58025408
 8006154:	5802541c 	.word	0x5802541c
 8006158:	58025430 	.word	0x58025430
 800615c:	58025444 	.word	0x58025444
 8006160:	58025458 	.word	0x58025458
 8006164:	5802546c 	.word	0x5802546c
 8006168:	58025480 	.word	0x58025480
 800616c:	58025494 	.word	0x58025494
 8006170:	2300      	movs	r3, #0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d028      	beq.n	80061c8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006184:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800618a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006190:	f003 031f 	and.w	r3, r3, #31
 8006194:	2201      	movs	r2, #1
 8006196:	409a      	lsls	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80061a4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00c      	beq.n	80061c8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061bc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80061c6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d003      	beq.n	80061e8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop

080061f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08a      	sub	sp, #40	; 0x28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006200:	4b67      	ldr	r3, [pc, #412]	; (80063a0 <HAL_DMA_IRQHandler+0x1ac>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a67      	ldr	r2, [pc, #412]	; (80063a4 <HAL_DMA_IRQHandler+0x1b0>)
 8006206:	fba2 2303 	umull	r2, r3, r2, r3
 800620a:	0a9b      	lsrs	r3, r3, #10
 800620c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006212:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006218:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a5f      	ldr	r2, [pc, #380]	; (80063a8 <HAL_DMA_IRQHandler+0x1b4>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d04a      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xd2>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a5d      	ldr	r2, [pc, #372]	; (80063ac <HAL_DMA_IRQHandler+0x1b8>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d045      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xd2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a5c      	ldr	r2, [pc, #368]	; (80063b0 <HAL_DMA_IRQHandler+0x1bc>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d040      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xd2>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a5a      	ldr	r2, [pc, #360]	; (80063b4 <HAL_DMA_IRQHandler+0x1c0>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d03b      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xd2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a59      	ldr	r2, [pc, #356]	; (80063b8 <HAL_DMA_IRQHandler+0x1c4>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d036      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xd2>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a57      	ldr	r2, [pc, #348]	; (80063bc <HAL_DMA_IRQHandler+0x1c8>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d031      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xd2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a56      	ldr	r2, [pc, #344]	; (80063c0 <HAL_DMA_IRQHandler+0x1cc>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d02c      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xd2>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a54      	ldr	r2, [pc, #336]	; (80063c4 <HAL_DMA_IRQHandler+0x1d0>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d027      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xd2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a53      	ldr	r2, [pc, #332]	; (80063c8 <HAL_DMA_IRQHandler+0x1d4>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d022      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xd2>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a51      	ldr	r2, [pc, #324]	; (80063cc <HAL_DMA_IRQHandler+0x1d8>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d01d      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xd2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a50      	ldr	r2, [pc, #320]	; (80063d0 <HAL_DMA_IRQHandler+0x1dc>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d018      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xd2>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a4e      	ldr	r2, [pc, #312]	; (80063d4 <HAL_DMA_IRQHandler+0x1e0>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d013      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xd2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a4d      	ldr	r2, [pc, #308]	; (80063d8 <HAL_DMA_IRQHandler+0x1e4>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00e      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xd2>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a4b      	ldr	r2, [pc, #300]	; (80063dc <HAL_DMA_IRQHandler+0x1e8>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d009      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xd2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a4a      	ldr	r2, [pc, #296]	; (80063e0 <HAL_DMA_IRQHandler+0x1ec>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d004      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xd2>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a48      	ldr	r2, [pc, #288]	; (80063e4 <HAL_DMA_IRQHandler+0x1f0>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d101      	bne.n	80062ca <HAL_DMA_IRQHandler+0xd6>
 80062c6:	2301      	movs	r3, #1
 80062c8:	e000      	b.n	80062cc <HAL_DMA_IRQHandler+0xd8>
 80062ca:	2300      	movs	r3, #0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 842b 	beq.w	8006b28 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d6:	f003 031f 	and.w	r3, r3, #31
 80062da:	2208      	movs	r2, #8
 80062dc:	409a      	lsls	r2, r3
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	4013      	ands	r3, r2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 80a2 	beq.w	800642c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a2e      	ldr	r2, [pc, #184]	; (80063a8 <HAL_DMA_IRQHandler+0x1b4>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d04a      	beq.n	8006388 <HAL_DMA_IRQHandler+0x194>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a2d      	ldr	r2, [pc, #180]	; (80063ac <HAL_DMA_IRQHandler+0x1b8>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d045      	beq.n	8006388 <HAL_DMA_IRQHandler+0x194>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a2b      	ldr	r2, [pc, #172]	; (80063b0 <HAL_DMA_IRQHandler+0x1bc>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d040      	beq.n	8006388 <HAL_DMA_IRQHandler+0x194>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a2a      	ldr	r2, [pc, #168]	; (80063b4 <HAL_DMA_IRQHandler+0x1c0>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d03b      	beq.n	8006388 <HAL_DMA_IRQHandler+0x194>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a28      	ldr	r2, [pc, #160]	; (80063b8 <HAL_DMA_IRQHandler+0x1c4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d036      	beq.n	8006388 <HAL_DMA_IRQHandler+0x194>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a27      	ldr	r2, [pc, #156]	; (80063bc <HAL_DMA_IRQHandler+0x1c8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d031      	beq.n	8006388 <HAL_DMA_IRQHandler+0x194>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a25      	ldr	r2, [pc, #148]	; (80063c0 <HAL_DMA_IRQHandler+0x1cc>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d02c      	beq.n	8006388 <HAL_DMA_IRQHandler+0x194>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a24      	ldr	r2, [pc, #144]	; (80063c4 <HAL_DMA_IRQHandler+0x1d0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d027      	beq.n	8006388 <HAL_DMA_IRQHandler+0x194>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a22      	ldr	r2, [pc, #136]	; (80063c8 <HAL_DMA_IRQHandler+0x1d4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d022      	beq.n	8006388 <HAL_DMA_IRQHandler+0x194>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a21      	ldr	r2, [pc, #132]	; (80063cc <HAL_DMA_IRQHandler+0x1d8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d01d      	beq.n	8006388 <HAL_DMA_IRQHandler+0x194>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a1f      	ldr	r2, [pc, #124]	; (80063d0 <HAL_DMA_IRQHandler+0x1dc>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d018      	beq.n	8006388 <HAL_DMA_IRQHandler+0x194>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a1e      	ldr	r2, [pc, #120]	; (80063d4 <HAL_DMA_IRQHandler+0x1e0>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d013      	beq.n	8006388 <HAL_DMA_IRQHandler+0x194>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a1c      	ldr	r2, [pc, #112]	; (80063d8 <HAL_DMA_IRQHandler+0x1e4>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d00e      	beq.n	8006388 <HAL_DMA_IRQHandler+0x194>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a1b      	ldr	r2, [pc, #108]	; (80063dc <HAL_DMA_IRQHandler+0x1e8>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d009      	beq.n	8006388 <HAL_DMA_IRQHandler+0x194>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a19      	ldr	r2, [pc, #100]	; (80063e0 <HAL_DMA_IRQHandler+0x1ec>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d004      	beq.n	8006388 <HAL_DMA_IRQHandler+0x194>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a18      	ldr	r2, [pc, #96]	; (80063e4 <HAL_DMA_IRQHandler+0x1f0>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d12f      	bne.n	80063e8 <HAL_DMA_IRQHandler+0x1f4>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0304 	and.w	r3, r3, #4
 8006392:	2b00      	cmp	r3, #0
 8006394:	bf14      	ite	ne
 8006396:	2301      	movne	r3, #1
 8006398:	2300      	moveq	r3, #0
 800639a:	b2db      	uxtb	r3, r3
 800639c:	e02e      	b.n	80063fc <HAL_DMA_IRQHandler+0x208>
 800639e:	bf00      	nop
 80063a0:	24000004 	.word	0x24000004
 80063a4:	1b4e81b5 	.word	0x1b4e81b5
 80063a8:	40020010 	.word	0x40020010
 80063ac:	40020028 	.word	0x40020028
 80063b0:	40020040 	.word	0x40020040
 80063b4:	40020058 	.word	0x40020058
 80063b8:	40020070 	.word	0x40020070
 80063bc:	40020088 	.word	0x40020088
 80063c0:	400200a0 	.word	0x400200a0
 80063c4:	400200b8 	.word	0x400200b8
 80063c8:	40020410 	.word	0x40020410
 80063cc:	40020428 	.word	0x40020428
 80063d0:	40020440 	.word	0x40020440
 80063d4:	40020458 	.word	0x40020458
 80063d8:	40020470 	.word	0x40020470
 80063dc:	40020488 	.word	0x40020488
 80063e0:	400204a0 	.word	0x400204a0
 80063e4:	400204b8 	.word	0x400204b8
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0308 	and.w	r3, r3, #8
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	bf14      	ite	ne
 80063f6:	2301      	movne	r3, #1
 80063f8:	2300      	moveq	r3, #0
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d015      	beq.n	800642c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f022 0204 	bic.w	r2, r2, #4
 800640e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006414:	f003 031f 	and.w	r3, r3, #31
 8006418:	2208      	movs	r2, #8
 800641a:	409a      	lsls	r2, r3
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006424:	f043 0201 	orr.w	r2, r3, #1
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006430:	f003 031f 	and.w	r3, r3, #31
 8006434:	69ba      	ldr	r2, [r7, #24]
 8006436:	fa22 f303 	lsr.w	r3, r2, r3
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	2b00      	cmp	r3, #0
 8006440:	d06e      	beq.n	8006520 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a69      	ldr	r2, [pc, #420]	; (80065ec <HAL_DMA_IRQHandler+0x3f8>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d04a      	beq.n	80064e2 <HAL_DMA_IRQHandler+0x2ee>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a67      	ldr	r2, [pc, #412]	; (80065f0 <HAL_DMA_IRQHandler+0x3fc>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d045      	beq.n	80064e2 <HAL_DMA_IRQHandler+0x2ee>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a66      	ldr	r2, [pc, #408]	; (80065f4 <HAL_DMA_IRQHandler+0x400>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d040      	beq.n	80064e2 <HAL_DMA_IRQHandler+0x2ee>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a64      	ldr	r2, [pc, #400]	; (80065f8 <HAL_DMA_IRQHandler+0x404>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d03b      	beq.n	80064e2 <HAL_DMA_IRQHandler+0x2ee>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a63      	ldr	r2, [pc, #396]	; (80065fc <HAL_DMA_IRQHandler+0x408>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d036      	beq.n	80064e2 <HAL_DMA_IRQHandler+0x2ee>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a61      	ldr	r2, [pc, #388]	; (8006600 <HAL_DMA_IRQHandler+0x40c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d031      	beq.n	80064e2 <HAL_DMA_IRQHandler+0x2ee>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a60      	ldr	r2, [pc, #384]	; (8006604 <HAL_DMA_IRQHandler+0x410>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d02c      	beq.n	80064e2 <HAL_DMA_IRQHandler+0x2ee>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a5e      	ldr	r2, [pc, #376]	; (8006608 <HAL_DMA_IRQHandler+0x414>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d027      	beq.n	80064e2 <HAL_DMA_IRQHandler+0x2ee>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a5d      	ldr	r2, [pc, #372]	; (800660c <HAL_DMA_IRQHandler+0x418>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d022      	beq.n	80064e2 <HAL_DMA_IRQHandler+0x2ee>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a5b      	ldr	r2, [pc, #364]	; (8006610 <HAL_DMA_IRQHandler+0x41c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d01d      	beq.n	80064e2 <HAL_DMA_IRQHandler+0x2ee>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a5a      	ldr	r2, [pc, #360]	; (8006614 <HAL_DMA_IRQHandler+0x420>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d018      	beq.n	80064e2 <HAL_DMA_IRQHandler+0x2ee>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a58      	ldr	r2, [pc, #352]	; (8006618 <HAL_DMA_IRQHandler+0x424>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d013      	beq.n	80064e2 <HAL_DMA_IRQHandler+0x2ee>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a57      	ldr	r2, [pc, #348]	; (800661c <HAL_DMA_IRQHandler+0x428>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d00e      	beq.n	80064e2 <HAL_DMA_IRQHandler+0x2ee>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a55      	ldr	r2, [pc, #340]	; (8006620 <HAL_DMA_IRQHandler+0x42c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d009      	beq.n	80064e2 <HAL_DMA_IRQHandler+0x2ee>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a54      	ldr	r2, [pc, #336]	; (8006624 <HAL_DMA_IRQHandler+0x430>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d004      	beq.n	80064e2 <HAL_DMA_IRQHandler+0x2ee>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a52      	ldr	r2, [pc, #328]	; (8006628 <HAL_DMA_IRQHandler+0x434>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d10a      	bne.n	80064f8 <HAL_DMA_IRQHandler+0x304>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	bf14      	ite	ne
 80064f0:	2301      	movne	r3, #1
 80064f2:	2300      	moveq	r3, #0
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	e003      	b.n	8006500 <HAL_DMA_IRQHandler+0x30c>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2300      	movs	r3, #0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00d      	beq.n	8006520 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006508:	f003 031f 	and.w	r3, r3, #31
 800650c:	2201      	movs	r2, #1
 800650e:	409a      	lsls	r2, r3
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006518:	f043 0202 	orr.w	r2, r3, #2
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006524:	f003 031f 	and.w	r3, r3, #31
 8006528:	2204      	movs	r2, #4
 800652a:	409a      	lsls	r2, r3
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	4013      	ands	r3, r2
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 808f 	beq.w	8006654 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a2c      	ldr	r2, [pc, #176]	; (80065ec <HAL_DMA_IRQHandler+0x3f8>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d04a      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x3e2>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a2a      	ldr	r2, [pc, #168]	; (80065f0 <HAL_DMA_IRQHandler+0x3fc>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d045      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x3e2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a29      	ldr	r2, [pc, #164]	; (80065f4 <HAL_DMA_IRQHandler+0x400>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d040      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x3e2>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a27      	ldr	r2, [pc, #156]	; (80065f8 <HAL_DMA_IRQHandler+0x404>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d03b      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x3e2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a26      	ldr	r2, [pc, #152]	; (80065fc <HAL_DMA_IRQHandler+0x408>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d036      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x3e2>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a24      	ldr	r2, [pc, #144]	; (8006600 <HAL_DMA_IRQHandler+0x40c>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d031      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x3e2>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a23      	ldr	r2, [pc, #140]	; (8006604 <HAL_DMA_IRQHandler+0x410>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d02c      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x3e2>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a21      	ldr	r2, [pc, #132]	; (8006608 <HAL_DMA_IRQHandler+0x414>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d027      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x3e2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a20      	ldr	r2, [pc, #128]	; (800660c <HAL_DMA_IRQHandler+0x418>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d022      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x3e2>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a1e      	ldr	r2, [pc, #120]	; (8006610 <HAL_DMA_IRQHandler+0x41c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d01d      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x3e2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a1d      	ldr	r2, [pc, #116]	; (8006614 <HAL_DMA_IRQHandler+0x420>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d018      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x3e2>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a1b      	ldr	r2, [pc, #108]	; (8006618 <HAL_DMA_IRQHandler+0x424>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d013      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x3e2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a1a      	ldr	r2, [pc, #104]	; (800661c <HAL_DMA_IRQHandler+0x428>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00e      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x3e2>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a18      	ldr	r2, [pc, #96]	; (8006620 <HAL_DMA_IRQHandler+0x42c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d009      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x3e2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a17      	ldr	r2, [pc, #92]	; (8006624 <HAL_DMA_IRQHandler+0x430>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d004      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x3e2>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a15      	ldr	r2, [pc, #84]	; (8006628 <HAL_DMA_IRQHandler+0x434>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d12a      	bne.n	800662c <HAL_DMA_IRQHandler+0x438>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	bf14      	ite	ne
 80065e4:	2301      	movne	r3, #1
 80065e6:	2300      	moveq	r3, #0
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	e023      	b.n	8006634 <HAL_DMA_IRQHandler+0x440>
 80065ec:	40020010 	.word	0x40020010
 80065f0:	40020028 	.word	0x40020028
 80065f4:	40020040 	.word	0x40020040
 80065f8:	40020058 	.word	0x40020058
 80065fc:	40020070 	.word	0x40020070
 8006600:	40020088 	.word	0x40020088
 8006604:	400200a0 	.word	0x400200a0
 8006608:	400200b8 	.word	0x400200b8
 800660c:	40020410 	.word	0x40020410
 8006610:	40020428 	.word	0x40020428
 8006614:	40020440 	.word	0x40020440
 8006618:	40020458 	.word	0x40020458
 800661c:	40020470 	.word	0x40020470
 8006620:	40020488 	.word	0x40020488
 8006624:	400204a0 	.word	0x400204a0
 8006628:	400204b8 	.word	0x400204b8
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2300      	movs	r3, #0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00d      	beq.n	8006654 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800663c:	f003 031f 	and.w	r3, r3, #31
 8006640:	2204      	movs	r2, #4
 8006642:	409a      	lsls	r2, r3
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664c:	f043 0204 	orr.w	r2, r3, #4
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006658:	f003 031f 	and.w	r3, r3, #31
 800665c:	2210      	movs	r2, #16
 800665e:	409a      	lsls	r2, r3
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	4013      	ands	r3, r2
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 80a6 	beq.w	80067b6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a85      	ldr	r2, [pc, #532]	; (8006884 <HAL_DMA_IRQHandler+0x690>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d04a      	beq.n	800670a <HAL_DMA_IRQHandler+0x516>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a83      	ldr	r2, [pc, #524]	; (8006888 <HAL_DMA_IRQHandler+0x694>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d045      	beq.n	800670a <HAL_DMA_IRQHandler+0x516>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a82      	ldr	r2, [pc, #520]	; (800688c <HAL_DMA_IRQHandler+0x698>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d040      	beq.n	800670a <HAL_DMA_IRQHandler+0x516>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a80      	ldr	r2, [pc, #512]	; (8006890 <HAL_DMA_IRQHandler+0x69c>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d03b      	beq.n	800670a <HAL_DMA_IRQHandler+0x516>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a7f      	ldr	r2, [pc, #508]	; (8006894 <HAL_DMA_IRQHandler+0x6a0>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d036      	beq.n	800670a <HAL_DMA_IRQHandler+0x516>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a7d      	ldr	r2, [pc, #500]	; (8006898 <HAL_DMA_IRQHandler+0x6a4>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d031      	beq.n	800670a <HAL_DMA_IRQHandler+0x516>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a7c      	ldr	r2, [pc, #496]	; (800689c <HAL_DMA_IRQHandler+0x6a8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d02c      	beq.n	800670a <HAL_DMA_IRQHandler+0x516>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a7a      	ldr	r2, [pc, #488]	; (80068a0 <HAL_DMA_IRQHandler+0x6ac>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d027      	beq.n	800670a <HAL_DMA_IRQHandler+0x516>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a79      	ldr	r2, [pc, #484]	; (80068a4 <HAL_DMA_IRQHandler+0x6b0>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d022      	beq.n	800670a <HAL_DMA_IRQHandler+0x516>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a77      	ldr	r2, [pc, #476]	; (80068a8 <HAL_DMA_IRQHandler+0x6b4>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d01d      	beq.n	800670a <HAL_DMA_IRQHandler+0x516>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a76      	ldr	r2, [pc, #472]	; (80068ac <HAL_DMA_IRQHandler+0x6b8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d018      	beq.n	800670a <HAL_DMA_IRQHandler+0x516>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a74      	ldr	r2, [pc, #464]	; (80068b0 <HAL_DMA_IRQHandler+0x6bc>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d013      	beq.n	800670a <HAL_DMA_IRQHandler+0x516>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a73      	ldr	r2, [pc, #460]	; (80068b4 <HAL_DMA_IRQHandler+0x6c0>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00e      	beq.n	800670a <HAL_DMA_IRQHandler+0x516>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a71      	ldr	r2, [pc, #452]	; (80068b8 <HAL_DMA_IRQHandler+0x6c4>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d009      	beq.n	800670a <HAL_DMA_IRQHandler+0x516>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a70      	ldr	r2, [pc, #448]	; (80068bc <HAL_DMA_IRQHandler+0x6c8>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d004      	beq.n	800670a <HAL_DMA_IRQHandler+0x516>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a6e      	ldr	r2, [pc, #440]	; (80068c0 <HAL_DMA_IRQHandler+0x6cc>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d10a      	bne.n	8006720 <HAL_DMA_IRQHandler+0x52c>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b00      	cmp	r3, #0
 8006716:	bf14      	ite	ne
 8006718:	2301      	movne	r3, #1
 800671a:	2300      	moveq	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	e009      	b.n	8006734 <HAL_DMA_IRQHandler+0x540>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0304 	and.w	r3, r3, #4
 800672a:	2b00      	cmp	r3, #0
 800672c:	bf14      	ite	ne
 800672e:	2301      	movne	r3, #1
 8006730:	2300      	moveq	r3, #0
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b00      	cmp	r3, #0
 8006736:	d03e      	beq.n	80067b6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800673c:	f003 031f 	and.w	r3, r3, #31
 8006740:	2210      	movs	r2, #16
 8006742:	409a      	lsls	r2, r3
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d018      	beq.n	8006788 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d108      	bne.n	8006776 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006768:	2b00      	cmp	r3, #0
 800676a:	d024      	beq.n	80067b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	4798      	blx	r3
 8006774:	e01f      	b.n	80067b6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800677a:	2b00      	cmp	r3, #0
 800677c:	d01b      	beq.n	80067b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	4798      	blx	r3
 8006786:	e016      	b.n	80067b6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006792:	2b00      	cmp	r3, #0
 8006794:	d107      	bne.n	80067a6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f022 0208 	bic.w	r2, r2, #8
 80067a4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ba:	f003 031f 	and.w	r3, r3, #31
 80067be:	2220      	movs	r2, #32
 80067c0:	409a      	lsls	r2, r3
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	4013      	ands	r3, r2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 8110 	beq.w	80069ec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a2c      	ldr	r2, [pc, #176]	; (8006884 <HAL_DMA_IRQHandler+0x690>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d04a      	beq.n	800686c <HAL_DMA_IRQHandler+0x678>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a2b      	ldr	r2, [pc, #172]	; (8006888 <HAL_DMA_IRQHandler+0x694>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d045      	beq.n	800686c <HAL_DMA_IRQHandler+0x678>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a29      	ldr	r2, [pc, #164]	; (800688c <HAL_DMA_IRQHandler+0x698>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d040      	beq.n	800686c <HAL_DMA_IRQHandler+0x678>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a28      	ldr	r2, [pc, #160]	; (8006890 <HAL_DMA_IRQHandler+0x69c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d03b      	beq.n	800686c <HAL_DMA_IRQHandler+0x678>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a26      	ldr	r2, [pc, #152]	; (8006894 <HAL_DMA_IRQHandler+0x6a0>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d036      	beq.n	800686c <HAL_DMA_IRQHandler+0x678>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a25      	ldr	r2, [pc, #148]	; (8006898 <HAL_DMA_IRQHandler+0x6a4>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d031      	beq.n	800686c <HAL_DMA_IRQHandler+0x678>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a23      	ldr	r2, [pc, #140]	; (800689c <HAL_DMA_IRQHandler+0x6a8>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d02c      	beq.n	800686c <HAL_DMA_IRQHandler+0x678>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a22      	ldr	r2, [pc, #136]	; (80068a0 <HAL_DMA_IRQHandler+0x6ac>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d027      	beq.n	800686c <HAL_DMA_IRQHandler+0x678>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a20      	ldr	r2, [pc, #128]	; (80068a4 <HAL_DMA_IRQHandler+0x6b0>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d022      	beq.n	800686c <HAL_DMA_IRQHandler+0x678>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a1f      	ldr	r2, [pc, #124]	; (80068a8 <HAL_DMA_IRQHandler+0x6b4>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d01d      	beq.n	800686c <HAL_DMA_IRQHandler+0x678>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a1d      	ldr	r2, [pc, #116]	; (80068ac <HAL_DMA_IRQHandler+0x6b8>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d018      	beq.n	800686c <HAL_DMA_IRQHandler+0x678>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a1c      	ldr	r2, [pc, #112]	; (80068b0 <HAL_DMA_IRQHandler+0x6bc>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d013      	beq.n	800686c <HAL_DMA_IRQHandler+0x678>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a1a      	ldr	r2, [pc, #104]	; (80068b4 <HAL_DMA_IRQHandler+0x6c0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d00e      	beq.n	800686c <HAL_DMA_IRQHandler+0x678>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a19      	ldr	r2, [pc, #100]	; (80068b8 <HAL_DMA_IRQHandler+0x6c4>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d009      	beq.n	800686c <HAL_DMA_IRQHandler+0x678>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a17      	ldr	r2, [pc, #92]	; (80068bc <HAL_DMA_IRQHandler+0x6c8>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d004      	beq.n	800686c <HAL_DMA_IRQHandler+0x678>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a16      	ldr	r2, [pc, #88]	; (80068c0 <HAL_DMA_IRQHandler+0x6cc>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d12b      	bne.n	80068c4 <HAL_DMA_IRQHandler+0x6d0>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0310 	and.w	r3, r3, #16
 8006876:	2b00      	cmp	r3, #0
 8006878:	bf14      	ite	ne
 800687a:	2301      	movne	r3, #1
 800687c:	2300      	moveq	r3, #0
 800687e:	b2db      	uxtb	r3, r3
 8006880:	e02a      	b.n	80068d8 <HAL_DMA_IRQHandler+0x6e4>
 8006882:	bf00      	nop
 8006884:	40020010 	.word	0x40020010
 8006888:	40020028 	.word	0x40020028
 800688c:	40020040 	.word	0x40020040
 8006890:	40020058 	.word	0x40020058
 8006894:	40020070 	.word	0x40020070
 8006898:	40020088 	.word	0x40020088
 800689c:	400200a0 	.word	0x400200a0
 80068a0:	400200b8 	.word	0x400200b8
 80068a4:	40020410 	.word	0x40020410
 80068a8:	40020428 	.word	0x40020428
 80068ac:	40020440 	.word	0x40020440
 80068b0:	40020458 	.word	0x40020458
 80068b4:	40020470 	.word	0x40020470
 80068b8:	40020488 	.word	0x40020488
 80068bc:	400204a0 	.word	0x400204a0
 80068c0:	400204b8 	.word	0x400204b8
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	bf14      	ite	ne
 80068d2:	2301      	movne	r3, #1
 80068d4:	2300      	moveq	r3, #0
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 8087 	beq.w	80069ec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e2:	f003 031f 	and.w	r3, r3, #31
 80068e6:	2220      	movs	r2, #32
 80068e8:	409a      	lsls	r2, r3
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b04      	cmp	r3, #4
 80068f8:	d139      	bne.n	800696e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 0216 	bic.w	r2, r2, #22
 8006908:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	695a      	ldr	r2, [r3, #20]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006918:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	2b00      	cmp	r3, #0
 8006920:	d103      	bne.n	800692a <HAL_DMA_IRQHandler+0x736>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006926:	2b00      	cmp	r3, #0
 8006928:	d007      	beq.n	800693a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 0208 	bic.w	r2, r2, #8
 8006938:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800693e:	f003 031f 	and.w	r3, r3, #31
 8006942:	223f      	movs	r2, #63	; 0x3f
 8006944:	409a      	lsls	r2, r3
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 834a 	beq.w	8006ff8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	4798      	blx	r3
          }
          return;
 800696c:	e344      	b.n	8006ff8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d018      	beq.n	80069ae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d108      	bne.n	800699c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698e:	2b00      	cmp	r3, #0
 8006990:	d02c      	beq.n	80069ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	4798      	blx	r3
 800699a:	e027      	b.n	80069ec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d023      	beq.n	80069ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	4798      	blx	r3
 80069ac:	e01e      	b.n	80069ec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10f      	bne.n	80069dc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f022 0210 	bic.w	r2, r2, #16
 80069ca:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 8306 	beq.w	8007002 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 8088 	beq.w	8006b14 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2204      	movs	r2, #4
 8006a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a7a      	ldr	r2, [pc, #488]	; (8006bfc <HAL_DMA_IRQHandler+0xa08>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d04a      	beq.n	8006aac <HAL_DMA_IRQHandler+0x8b8>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a79      	ldr	r2, [pc, #484]	; (8006c00 <HAL_DMA_IRQHandler+0xa0c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d045      	beq.n	8006aac <HAL_DMA_IRQHandler+0x8b8>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a77      	ldr	r2, [pc, #476]	; (8006c04 <HAL_DMA_IRQHandler+0xa10>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d040      	beq.n	8006aac <HAL_DMA_IRQHandler+0x8b8>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a76      	ldr	r2, [pc, #472]	; (8006c08 <HAL_DMA_IRQHandler+0xa14>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d03b      	beq.n	8006aac <HAL_DMA_IRQHandler+0x8b8>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a74      	ldr	r2, [pc, #464]	; (8006c0c <HAL_DMA_IRQHandler+0xa18>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d036      	beq.n	8006aac <HAL_DMA_IRQHandler+0x8b8>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a73      	ldr	r2, [pc, #460]	; (8006c10 <HAL_DMA_IRQHandler+0xa1c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d031      	beq.n	8006aac <HAL_DMA_IRQHandler+0x8b8>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a71      	ldr	r2, [pc, #452]	; (8006c14 <HAL_DMA_IRQHandler+0xa20>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d02c      	beq.n	8006aac <HAL_DMA_IRQHandler+0x8b8>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a70      	ldr	r2, [pc, #448]	; (8006c18 <HAL_DMA_IRQHandler+0xa24>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d027      	beq.n	8006aac <HAL_DMA_IRQHandler+0x8b8>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a6e      	ldr	r2, [pc, #440]	; (8006c1c <HAL_DMA_IRQHandler+0xa28>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d022      	beq.n	8006aac <HAL_DMA_IRQHandler+0x8b8>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a6d      	ldr	r2, [pc, #436]	; (8006c20 <HAL_DMA_IRQHandler+0xa2c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d01d      	beq.n	8006aac <HAL_DMA_IRQHandler+0x8b8>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a6b      	ldr	r2, [pc, #428]	; (8006c24 <HAL_DMA_IRQHandler+0xa30>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d018      	beq.n	8006aac <HAL_DMA_IRQHandler+0x8b8>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a6a      	ldr	r2, [pc, #424]	; (8006c28 <HAL_DMA_IRQHandler+0xa34>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d013      	beq.n	8006aac <HAL_DMA_IRQHandler+0x8b8>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a68      	ldr	r2, [pc, #416]	; (8006c2c <HAL_DMA_IRQHandler+0xa38>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d00e      	beq.n	8006aac <HAL_DMA_IRQHandler+0x8b8>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a67      	ldr	r2, [pc, #412]	; (8006c30 <HAL_DMA_IRQHandler+0xa3c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d009      	beq.n	8006aac <HAL_DMA_IRQHandler+0x8b8>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a65      	ldr	r2, [pc, #404]	; (8006c34 <HAL_DMA_IRQHandler+0xa40>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d004      	beq.n	8006aac <HAL_DMA_IRQHandler+0x8b8>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a64      	ldr	r2, [pc, #400]	; (8006c38 <HAL_DMA_IRQHandler+0xa44>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d108      	bne.n	8006abe <HAL_DMA_IRQHandler+0x8ca>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0201 	bic.w	r2, r2, #1
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	e007      	b.n	8006ace <HAL_DMA_IRQHandler+0x8da>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 0201 	bic.w	r2, r2, #1
 8006acc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d307      	bcc.n	8006aea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1f2      	bne.n	8006ace <HAL_DMA_IRQHandler+0x8da>
 8006ae8:	e000      	b.n	8006aec <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006aea:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d004      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2203      	movs	r2, #3
 8006afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006b02:	e003      	b.n	8006b0c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 8272 	beq.w	8007002 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	4798      	blx	r3
 8006b26:	e26c      	b.n	8007002 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a43      	ldr	r2, [pc, #268]	; (8006c3c <HAL_DMA_IRQHandler+0xa48>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d022      	beq.n	8006b78 <HAL_DMA_IRQHandler+0x984>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a42      	ldr	r2, [pc, #264]	; (8006c40 <HAL_DMA_IRQHandler+0xa4c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d01d      	beq.n	8006b78 <HAL_DMA_IRQHandler+0x984>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a40      	ldr	r2, [pc, #256]	; (8006c44 <HAL_DMA_IRQHandler+0xa50>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d018      	beq.n	8006b78 <HAL_DMA_IRQHandler+0x984>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a3f      	ldr	r2, [pc, #252]	; (8006c48 <HAL_DMA_IRQHandler+0xa54>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d013      	beq.n	8006b78 <HAL_DMA_IRQHandler+0x984>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a3d      	ldr	r2, [pc, #244]	; (8006c4c <HAL_DMA_IRQHandler+0xa58>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d00e      	beq.n	8006b78 <HAL_DMA_IRQHandler+0x984>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a3c      	ldr	r2, [pc, #240]	; (8006c50 <HAL_DMA_IRQHandler+0xa5c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d009      	beq.n	8006b78 <HAL_DMA_IRQHandler+0x984>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a3a      	ldr	r2, [pc, #232]	; (8006c54 <HAL_DMA_IRQHandler+0xa60>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d004      	beq.n	8006b78 <HAL_DMA_IRQHandler+0x984>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a39      	ldr	r2, [pc, #228]	; (8006c58 <HAL_DMA_IRQHandler+0xa64>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d101      	bne.n	8006b7c <HAL_DMA_IRQHandler+0x988>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e000      	b.n	8006b7e <HAL_DMA_IRQHandler+0x98a>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 823f 	beq.w	8007002 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b90:	f003 031f 	and.w	r3, r3, #31
 8006b94:	2204      	movs	r2, #4
 8006b96:	409a      	lsls	r2, r3
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 80cd 	beq.w	8006d3c <HAL_DMA_IRQHandler+0xb48>
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 80c7 	beq.w	8006d3c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb2:	f003 031f 	and.w	r3, r3, #31
 8006bb6:	2204      	movs	r2, #4
 8006bb8:	409a      	lsls	r2, r3
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d049      	beq.n	8006c5c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d109      	bne.n	8006be6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 8210 	beq.w	8006ffc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006be4:	e20a      	b.n	8006ffc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 8206 	beq.w	8006ffc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bf8:	e200      	b.n	8006ffc <HAL_DMA_IRQHandler+0xe08>
 8006bfa:	bf00      	nop
 8006bfc:	40020010 	.word	0x40020010
 8006c00:	40020028 	.word	0x40020028
 8006c04:	40020040 	.word	0x40020040
 8006c08:	40020058 	.word	0x40020058
 8006c0c:	40020070 	.word	0x40020070
 8006c10:	40020088 	.word	0x40020088
 8006c14:	400200a0 	.word	0x400200a0
 8006c18:	400200b8 	.word	0x400200b8
 8006c1c:	40020410 	.word	0x40020410
 8006c20:	40020428 	.word	0x40020428
 8006c24:	40020440 	.word	0x40020440
 8006c28:	40020458 	.word	0x40020458
 8006c2c:	40020470 	.word	0x40020470
 8006c30:	40020488 	.word	0x40020488
 8006c34:	400204a0 	.word	0x400204a0
 8006c38:	400204b8 	.word	0x400204b8
 8006c3c:	58025408 	.word	0x58025408
 8006c40:	5802541c 	.word	0x5802541c
 8006c44:	58025430 	.word	0x58025430
 8006c48:	58025444 	.word	0x58025444
 8006c4c:	58025458 	.word	0x58025458
 8006c50:	5802546c 	.word	0x5802546c
 8006c54:	58025480 	.word	0x58025480
 8006c58:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d160      	bne.n	8006d28 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a7f      	ldr	r2, [pc, #508]	; (8006e68 <HAL_DMA_IRQHandler+0xc74>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d04a      	beq.n	8006d06 <HAL_DMA_IRQHandler+0xb12>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a7d      	ldr	r2, [pc, #500]	; (8006e6c <HAL_DMA_IRQHandler+0xc78>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d045      	beq.n	8006d06 <HAL_DMA_IRQHandler+0xb12>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a7c      	ldr	r2, [pc, #496]	; (8006e70 <HAL_DMA_IRQHandler+0xc7c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d040      	beq.n	8006d06 <HAL_DMA_IRQHandler+0xb12>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a7a      	ldr	r2, [pc, #488]	; (8006e74 <HAL_DMA_IRQHandler+0xc80>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d03b      	beq.n	8006d06 <HAL_DMA_IRQHandler+0xb12>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a79      	ldr	r2, [pc, #484]	; (8006e78 <HAL_DMA_IRQHandler+0xc84>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d036      	beq.n	8006d06 <HAL_DMA_IRQHandler+0xb12>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a77      	ldr	r2, [pc, #476]	; (8006e7c <HAL_DMA_IRQHandler+0xc88>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d031      	beq.n	8006d06 <HAL_DMA_IRQHandler+0xb12>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a76      	ldr	r2, [pc, #472]	; (8006e80 <HAL_DMA_IRQHandler+0xc8c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d02c      	beq.n	8006d06 <HAL_DMA_IRQHandler+0xb12>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a74      	ldr	r2, [pc, #464]	; (8006e84 <HAL_DMA_IRQHandler+0xc90>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d027      	beq.n	8006d06 <HAL_DMA_IRQHandler+0xb12>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a73      	ldr	r2, [pc, #460]	; (8006e88 <HAL_DMA_IRQHandler+0xc94>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d022      	beq.n	8006d06 <HAL_DMA_IRQHandler+0xb12>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a71      	ldr	r2, [pc, #452]	; (8006e8c <HAL_DMA_IRQHandler+0xc98>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d01d      	beq.n	8006d06 <HAL_DMA_IRQHandler+0xb12>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a70      	ldr	r2, [pc, #448]	; (8006e90 <HAL_DMA_IRQHandler+0xc9c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d018      	beq.n	8006d06 <HAL_DMA_IRQHandler+0xb12>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a6e      	ldr	r2, [pc, #440]	; (8006e94 <HAL_DMA_IRQHandler+0xca0>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d013      	beq.n	8006d06 <HAL_DMA_IRQHandler+0xb12>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a6d      	ldr	r2, [pc, #436]	; (8006e98 <HAL_DMA_IRQHandler+0xca4>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00e      	beq.n	8006d06 <HAL_DMA_IRQHandler+0xb12>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a6b      	ldr	r2, [pc, #428]	; (8006e9c <HAL_DMA_IRQHandler+0xca8>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d009      	beq.n	8006d06 <HAL_DMA_IRQHandler+0xb12>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a6a      	ldr	r2, [pc, #424]	; (8006ea0 <HAL_DMA_IRQHandler+0xcac>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d004      	beq.n	8006d06 <HAL_DMA_IRQHandler+0xb12>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a68      	ldr	r2, [pc, #416]	; (8006ea4 <HAL_DMA_IRQHandler+0xcb0>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d108      	bne.n	8006d18 <HAL_DMA_IRQHandler+0xb24>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f022 0208 	bic.w	r2, r2, #8
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	e007      	b.n	8006d28 <HAL_DMA_IRQHandler+0xb34>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f022 0204 	bic.w	r2, r2, #4
 8006d26:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 8165 	beq.w	8006ffc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d3a:	e15f      	b.n	8006ffc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d40:	f003 031f 	and.w	r3, r3, #31
 8006d44:	2202      	movs	r2, #2
 8006d46:	409a      	lsls	r2, r3
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 80c5 	beq.w	8006edc <HAL_DMA_IRQHandler+0xce8>
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f000 80bf 	beq.w	8006edc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d62:	f003 031f 	and.w	r3, r3, #31
 8006d66:	2202      	movs	r2, #2
 8006d68:	409a      	lsls	r2, r3
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d018      	beq.n	8006daa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d109      	bne.n	8006d96 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 813a 	beq.w	8007000 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d94:	e134      	b.n	8007000 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 8130 	beq.w	8007000 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006da8:	e12a      	b.n	8007000 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	f003 0320 	and.w	r3, r3, #32
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f040 8089 	bne.w	8006ec8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a2b      	ldr	r2, [pc, #172]	; (8006e68 <HAL_DMA_IRQHandler+0xc74>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d04a      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xc62>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a29      	ldr	r2, [pc, #164]	; (8006e6c <HAL_DMA_IRQHandler+0xc78>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d045      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xc62>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a28      	ldr	r2, [pc, #160]	; (8006e70 <HAL_DMA_IRQHandler+0xc7c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d040      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xc62>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a26      	ldr	r2, [pc, #152]	; (8006e74 <HAL_DMA_IRQHandler+0xc80>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d03b      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xc62>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a25      	ldr	r2, [pc, #148]	; (8006e78 <HAL_DMA_IRQHandler+0xc84>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d036      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xc62>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a23      	ldr	r2, [pc, #140]	; (8006e7c <HAL_DMA_IRQHandler+0xc88>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d031      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xc62>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a22      	ldr	r2, [pc, #136]	; (8006e80 <HAL_DMA_IRQHandler+0xc8c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d02c      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xc62>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a20      	ldr	r2, [pc, #128]	; (8006e84 <HAL_DMA_IRQHandler+0xc90>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d027      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xc62>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a1f      	ldr	r2, [pc, #124]	; (8006e88 <HAL_DMA_IRQHandler+0xc94>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d022      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xc62>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a1d      	ldr	r2, [pc, #116]	; (8006e8c <HAL_DMA_IRQHandler+0xc98>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d01d      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xc62>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a1c      	ldr	r2, [pc, #112]	; (8006e90 <HAL_DMA_IRQHandler+0xc9c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d018      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xc62>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a1a      	ldr	r2, [pc, #104]	; (8006e94 <HAL_DMA_IRQHandler+0xca0>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d013      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xc62>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a19      	ldr	r2, [pc, #100]	; (8006e98 <HAL_DMA_IRQHandler+0xca4>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00e      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xc62>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a17      	ldr	r2, [pc, #92]	; (8006e9c <HAL_DMA_IRQHandler+0xca8>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d009      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xc62>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a16      	ldr	r2, [pc, #88]	; (8006ea0 <HAL_DMA_IRQHandler+0xcac>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d004      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xc62>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a14      	ldr	r2, [pc, #80]	; (8006ea4 <HAL_DMA_IRQHandler+0xcb0>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d128      	bne.n	8006ea8 <HAL_DMA_IRQHandler+0xcb4>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f022 0214 	bic.w	r2, r2, #20
 8006e64:	601a      	str	r2, [r3, #0]
 8006e66:	e027      	b.n	8006eb8 <HAL_DMA_IRQHandler+0xcc4>
 8006e68:	40020010 	.word	0x40020010
 8006e6c:	40020028 	.word	0x40020028
 8006e70:	40020040 	.word	0x40020040
 8006e74:	40020058 	.word	0x40020058
 8006e78:	40020070 	.word	0x40020070
 8006e7c:	40020088 	.word	0x40020088
 8006e80:	400200a0 	.word	0x400200a0
 8006e84:	400200b8 	.word	0x400200b8
 8006e88:	40020410 	.word	0x40020410
 8006e8c:	40020428 	.word	0x40020428
 8006e90:	40020440 	.word	0x40020440
 8006e94:	40020458 	.word	0x40020458
 8006e98:	40020470 	.word	0x40020470
 8006e9c:	40020488 	.word	0x40020488
 8006ea0:	400204a0 	.word	0x400204a0
 8006ea4:	400204b8 	.word	0x400204b8
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f022 020a 	bic.w	r2, r2, #10
 8006eb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 8097 	beq.w	8007000 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006eda:	e091      	b.n	8007000 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ee0:	f003 031f 	and.w	r3, r3, #31
 8006ee4:	2208      	movs	r2, #8
 8006ee6:	409a      	lsls	r2, r3
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	4013      	ands	r3, r2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 8088 	beq.w	8007002 <HAL_DMA_IRQHandler+0xe0e>
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f003 0308 	and.w	r3, r3, #8
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 8082 	beq.w	8007002 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a41      	ldr	r2, [pc, #260]	; (8007008 <HAL_DMA_IRQHandler+0xe14>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d04a      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xdaa>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a3f      	ldr	r2, [pc, #252]	; (800700c <HAL_DMA_IRQHandler+0xe18>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d045      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xdaa>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a3e      	ldr	r2, [pc, #248]	; (8007010 <HAL_DMA_IRQHandler+0xe1c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d040      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xdaa>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a3c      	ldr	r2, [pc, #240]	; (8007014 <HAL_DMA_IRQHandler+0xe20>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d03b      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xdaa>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a3b      	ldr	r2, [pc, #236]	; (8007018 <HAL_DMA_IRQHandler+0xe24>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d036      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xdaa>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a39      	ldr	r2, [pc, #228]	; (800701c <HAL_DMA_IRQHandler+0xe28>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d031      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xdaa>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a38      	ldr	r2, [pc, #224]	; (8007020 <HAL_DMA_IRQHandler+0xe2c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d02c      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xdaa>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a36      	ldr	r2, [pc, #216]	; (8007024 <HAL_DMA_IRQHandler+0xe30>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d027      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xdaa>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a35      	ldr	r2, [pc, #212]	; (8007028 <HAL_DMA_IRQHandler+0xe34>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d022      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xdaa>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a33      	ldr	r2, [pc, #204]	; (800702c <HAL_DMA_IRQHandler+0xe38>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d01d      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xdaa>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a32      	ldr	r2, [pc, #200]	; (8007030 <HAL_DMA_IRQHandler+0xe3c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d018      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xdaa>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a30      	ldr	r2, [pc, #192]	; (8007034 <HAL_DMA_IRQHandler+0xe40>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d013      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xdaa>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a2f      	ldr	r2, [pc, #188]	; (8007038 <HAL_DMA_IRQHandler+0xe44>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d00e      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xdaa>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a2d      	ldr	r2, [pc, #180]	; (800703c <HAL_DMA_IRQHandler+0xe48>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d009      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xdaa>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a2c      	ldr	r2, [pc, #176]	; (8007040 <HAL_DMA_IRQHandler+0xe4c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d004      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xdaa>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a2a      	ldr	r2, [pc, #168]	; (8007044 <HAL_DMA_IRQHandler+0xe50>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d108      	bne.n	8006fb0 <HAL_DMA_IRQHandler+0xdbc>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 021c 	bic.w	r2, r2, #28
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	e007      	b.n	8006fc0 <HAL_DMA_IRQHandler+0xdcc>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 020e 	bic.w	r2, r2, #14
 8006fbe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc4:	f003 031f 	and.w	r3, r3, #31
 8006fc8:	2201      	movs	r2, #1
 8006fca:	409a      	lsls	r2, r3
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d009      	beq.n	8007002 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	4798      	blx	r3
 8006ff6:	e004      	b.n	8007002 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006ff8:	bf00      	nop
 8006ffa:	e002      	b.n	8007002 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ffc:	bf00      	nop
 8006ffe:	e000      	b.n	8007002 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007000:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007002:	3728      	adds	r7, #40	; 0x28
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	40020010 	.word	0x40020010
 800700c:	40020028 	.word	0x40020028
 8007010:	40020040 	.word	0x40020040
 8007014:	40020058 	.word	0x40020058
 8007018:	40020070 	.word	0x40020070
 800701c:	40020088 	.word	0x40020088
 8007020:	400200a0 	.word	0x400200a0
 8007024:	400200b8 	.word	0x400200b8
 8007028:	40020410 	.word	0x40020410
 800702c:	40020428 	.word	0x40020428
 8007030:	40020440 	.word	0x40020440
 8007034:	40020458 	.word	0x40020458
 8007038:	40020470 	.word	0x40020470
 800703c:	40020488 	.word	0x40020488
 8007040:	400204a0 	.word	0x400204a0
 8007044:	400204b8 	.word	0x400204b8

08007048 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007048:	b480      	push	{r7}
 800704a:	b087      	sub	sp, #28
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800705a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007060:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a7f      	ldr	r2, [pc, #508]	; (8007264 <DMA_SetConfig+0x21c>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d072      	beq.n	8007152 <DMA_SetConfig+0x10a>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a7d      	ldr	r2, [pc, #500]	; (8007268 <DMA_SetConfig+0x220>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d06d      	beq.n	8007152 <DMA_SetConfig+0x10a>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a7c      	ldr	r2, [pc, #496]	; (800726c <DMA_SetConfig+0x224>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d068      	beq.n	8007152 <DMA_SetConfig+0x10a>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a7a      	ldr	r2, [pc, #488]	; (8007270 <DMA_SetConfig+0x228>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d063      	beq.n	8007152 <DMA_SetConfig+0x10a>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a79      	ldr	r2, [pc, #484]	; (8007274 <DMA_SetConfig+0x22c>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d05e      	beq.n	8007152 <DMA_SetConfig+0x10a>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a77      	ldr	r2, [pc, #476]	; (8007278 <DMA_SetConfig+0x230>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d059      	beq.n	8007152 <DMA_SetConfig+0x10a>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a76      	ldr	r2, [pc, #472]	; (800727c <DMA_SetConfig+0x234>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d054      	beq.n	8007152 <DMA_SetConfig+0x10a>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a74      	ldr	r2, [pc, #464]	; (8007280 <DMA_SetConfig+0x238>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d04f      	beq.n	8007152 <DMA_SetConfig+0x10a>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a73      	ldr	r2, [pc, #460]	; (8007284 <DMA_SetConfig+0x23c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d04a      	beq.n	8007152 <DMA_SetConfig+0x10a>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a71      	ldr	r2, [pc, #452]	; (8007288 <DMA_SetConfig+0x240>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d045      	beq.n	8007152 <DMA_SetConfig+0x10a>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a70      	ldr	r2, [pc, #448]	; (800728c <DMA_SetConfig+0x244>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d040      	beq.n	8007152 <DMA_SetConfig+0x10a>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a6e      	ldr	r2, [pc, #440]	; (8007290 <DMA_SetConfig+0x248>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d03b      	beq.n	8007152 <DMA_SetConfig+0x10a>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a6d      	ldr	r2, [pc, #436]	; (8007294 <DMA_SetConfig+0x24c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d036      	beq.n	8007152 <DMA_SetConfig+0x10a>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a6b      	ldr	r2, [pc, #428]	; (8007298 <DMA_SetConfig+0x250>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d031      	beq.n	8007152 <DMA_SetConfig+0x10a>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a6a      	ldr	r2, [pc, #424]	; (800729c <DMA_SetConfig+0x254>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d02c      	beq.n	8007152 <DMA_SetConfig+0x10a>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a68      	ldr	r2, [pc, #416]	; (80072a0 <DMA_SetConfig+0x258>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d027      	beq.n	8007152 <DMA_SetConfig+0x10a>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a67      	ldr	r2, [pc, #412]	; (80072a4 <DMA_SetConfig+0x25c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d022      	beq.n	8007152 <DMA_SetConfig+0x10a>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a65      	ldr	r2, [pc, #404]	; (80072a8 <DMA_SetConfig+0x260>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d01d      	beq.n	8007152 <DMA_SetConfig+0x10a>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a64      	ldr	r2, [pc, #400]	; (80072ac <DMA_SetConfig+0x264>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d018      	beq.n	8007152 <DMA_SetConfig+0x10a>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a62      	ldr	r2, [pc, #392]	; (80072b0 <DMA_SetConfig+0x268>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d013      	beq.n	8007152 <DMA_SetConfig+0x10a>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a61      	ldr	r2, [pc, #388]	; (80072b4 <DMA_SetConfig+0x26c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00e      	beq.n	8007152 <DMA_SetConfig+0x10a>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a5f      	ldr	r2, [pc, #380]	; (80072b8 <DMA_SetConfig+0x270>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d009      	beq.n	8007152 <DMA_SetConfig+0x10a>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a5e      	ldr	r2, [pc, #376]	; (80072bc <DMA_SetConfig+0x274>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d004      	beq.n	8007152 <DMA_SetConfig+0x10a>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a5c      	ldr	r2, [pc, #368]	; (80072c0 <DMA_SetConfig+0x278>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d101      	bne.n	8007156 <DMA_SetConfig+0x10e>
 8007152:	2301      	movs	r3, #1
 8007154:	e000      	b.n	8007158 <DMA_SetConfig+0x110>
 8007156:	2300      	movs	r3, #0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00d      	beq.n	8007178 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007164:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800716a:	2b00      	cmp	r3, #0
 800716c:	d004      	beq.n	8007178 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007176:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a39      	ldr	r2, [pc, #228]	; (8007264 <DMA_SetConfig+0x21c>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d04a      	beq.n	8007218 <DMA_SetConfig+0x1d0>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a38      	ldr	r2, [pc, #224]	; (8007268 <DMA_SetConfig+0x220>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d045      	beq.n	8007218 <DMA_SetConfig+0x1d0>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a36      	ldr	r2, [pc, #216]	; (800726c <DMA_SetConfig+0x224>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d040      	beq.n	8007218 <DMA_SetConfig+0x1d0>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a35      	ldr	r2, [pc, #212]	; (8007270 <DMA_SetConfig+0x228>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d03b      	beq.n	8007218 <DMA_SetConfig+0x1d0>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a33      	ldr	r2, [pc, #204]	; (8007274 <DMA_SetConfig+0x22c>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d036      	beq.n	8007218 <DMA_SetConfig+0x1d0>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a32      	ldr	r2, [pc, #200]	; (8007278 <DMA_SetConfig+0x230>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d031      	beq.n	8007218 <DMA_SetConfig+0x1d0>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a30      	ldr	r2, [pc, #192]	; (800727c <DMA_SetConfig+0x234>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d02c      	beq.n	8007218 <DMA_SetConfig+0x1d0>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a2f      	ldr	r2, [pc, #188]	; (8007280 <DMA_SetConfig+0x238>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d027      	beq.n	8007218 <DMA_SetConfig+0x1d0>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a2d      	ldr	r2, [pc, #180]	; (8007284 <DMA_SetConfig+0x23c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d022      	beq.n	8007218 <DMA_SetConfig+0x1d0>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a2c      	ldr	r2, [pc, #176]	; (8007288 <DMA_SetConfig+0x240>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d01d      	beq.n	8007218 <DMA_SetConfig+0x1d0>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a2a      	ldr	r2, [pc, #168]	; (800728c <DMA_SetConfig+0x244>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d018      	beq.n	8007218 <DMA_SetConfig+0x1d0>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a29      	ldr	r2, [pc, #164]	; (8007290 <DMA_SetConfig+0x248>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d013      	beq.n	8007218 <DMA_SetConfig+0x1d0>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a27      	ldr	r2, [pc, #156]	; (8007294 <DMA_SetConfig+0x24c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d00e      	beq.n	8007218 <DMA_SetConfig+0x1d0>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a26      	ldr	r2, [pc, #152]	; (8007298 <DMA_SetConfig+0x250>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d009      	beq.n	8007218 <DMA_SetConfig+0x1d0>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a24      	ldr	r2, [pc, #144]	; (800729c <DMA_SetConfig+0x254>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d004      	beq.n	8007218 <DMA_SetConfig+0x1d0>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a23      	ldr	r2, [pc, #140]	; (80072a0 <DMA_SetConfig+0x258>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d101      	bne.n	800721c <DMA_SetConfig+0x1d4>
 8007218:	2301      	movs	r3, #1
 800721a:	e000      	b.n	800721e <DMA_SetConfig+0x1d6>
 800721c:	2300      	movs	r3, #0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d059      	beq.n	80072d6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007226:	f003 031f 	and.w	r3, r3, #31
 800722a:	223f      	movs	r2, #63	; 0x3f
 800722c:	409a      	lsls	r2, r3
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007240:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	2b40      	cmp	r3, #64	; 0x40
 8007250:	d138      	bne.n	80072c4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007262:	e086      	b.n	8007372 <DMA_SetConfig+0x32a>
 8007264:	40020010 	.word	0x40020010
 8007268:	40020028 	.word	0x40020028
 800726c:	40020040 	.word	0x40020040
 8007270:	40020058 	.word	0x40020058
 8007274:	40020070 	.word	0x40020070
 8007278:	40020088 	.word	0x40020088
 800727c:	400200a0 	.word	0x400200a0
 8007280:	400200b8 	.word	0x400200b8
 8007284:	40020410 	.word	0x40020410
 8007288:	40020428 	.word	0x40020428
 800728c:	40020440 	.word	0x40020440
 8007290:	40020458 	.word	0x40020458
 8007294:	40020470 	.word	0x40020470
 8007298:	40020488 	.word	0x40020488
 800729c:	400204a0 	.word	0x400204a0
 80072a0:	400204b8 	.word	0x400204b8
 80072a4:	58025408 	.word	0x58025408
 80072a8:	5802541c 	.word	0x5802541c
 80072ac:	58025430 	.word	0x58025430
 80072b0:	58025444 	.word	0x58025444
 80072b4:	58025458 	.word	0x58025458
 80072b8:	5802546c 	.word	0x5802546c
 80072bc:	58025480 	.word	0x58025480
 80072c0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	60da      	str	r2, [r3, #12]
}
 80072d4:	e04d      	b.n	8007372 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a29      	ldr	r2, [pc, #164]	; (8007380 <DMA_SetConfig+0x338>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d022      	beq.n	8007326 <DMA_SetConfig+0x2de>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a27      	ldr	r2, [pc, #156]	; (8007384 <DMA_SetConfig+0x33c>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d01d      	beq.n	8007326 <DMA_SetConfig+0x2de>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a26      	ldr	r2, [pc, #152]	; (8007388 <DMA_SetConfig+0x340>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d018      	beq.n	8007326 <DMA_SetConfig+0x2de>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a24      	ldr	r2, [pc, #144]	; (800738c <DMA_SetConfig+0x344>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d013      	beq.n	8007326 <DMA_SetConfig+0x2de>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a23      	ldr	r2, [pc, #140]	; (8007390 <DMA_SetConfig+0x348>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00e      	beq.n	8007326 <DMA_SetConfig+0x2de>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a21      	ldr	r2, [pc, #132]	; (8007394 <DMA_SetConfig+0x34c>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d009      	beq.n	8007326 <DMA_SetConfig+0x2de>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a20      	ldr	r2, [pc, #128]	; (8007398 <DMA_SetConfig+0x350>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d004      	beq.n	8007326 <DMA_SetConfig+0x2de>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a1e      	ldr	r2, [pc, #120]	; (800739c <DMA_SetConfig+0x354>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d101      	bne.n	800732a <DMA_SetConfig+0x2e2>
 8007326:	2301      	movs	r3, #1
 8007328:	e000      	b.n	800732c <DMA_SetConfig+0x2e4>
 800732a:	2300      	movs	r3, #0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d020      	beq.n	8007372 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007334:	f003 031f 	and.w	r3, r3, #31
 8007338:	2201      	movs	r2, #1
 800733a:	409a      	lsls	r2, r3
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	2b40      	cmp	r3, #64	; 0x40
 800734e:	d108      	bne.n	8007362 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	60da      	str	r2, [r3, #12]
}
 8007360:	e007      	b.n	8007372 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	60da      	str	r2, [r3, #12]
}
 8007372:	bf00      	nop
 8007374:	371c      	adds	r7, #28
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	58025408 	.word	0x58025408
 8007384:	5802541c 	.word	0x5802541c
 8007388:	58025430 	.word	0x58025430
 800738c:	58025444 	.word	0x58025444
 8007390:	58025458 	.word	0x58025458
 8007394:	5802546c 	.word	0x5802546c
 8007398:	58025480 	.word	0x58025480
 800739c:	58025494 	.word	0x58025494

080073a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a42      	ldr	r2, [pc, #264]	; (80074b8 <DMA_CalcBaseAndBitshift+0x118>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d04a      	beq.n	8007448 <DMA_CalcBaseAndBitshift+0xa8>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a41      	ldr	r2, [pc, #260]	; (80074bc <DMA_CalcBaseAndBitshift+0x11c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d045      	beq.n	8007448 <DMA_CalcBaseAndBitshift+0xa8>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a3f      	ldr	r2, [pc, #252]	; (80074c0 <DMA_CalcBaseAndBitshift+0x120>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d040      	beq.n	8007448 <DMA_CalcBaseAndBitshift+0xa8>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a3e      	ldr	r2, [pc, #248]	; (80074c4 <DMA_CalcBaseAndBitshift+0x124>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d03b      	beq.n	8007448 <DMA_CalcBaseAndBitshift+0xa8>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a3c      	ldr	r2, [pc, #240]	; (80074c8 <DMA_CalcBaseAndBitshift+0x128>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d036      	beq.n	8007448 <DMA_CalcBaseAndBitshift+0xa8>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a3b      	ldr	r2, [pc, #236]	; (80074cc <DMA_CalcBaseAndBitshift+0x12c>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d031      	beq.n	8007448 <DMA_CalcBaseAndBitshift+0xa8>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a39      	ldr	r2, [pc, #228]	; (80074d0 <DMA_CalcBaseAndBitshift+0x130>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d02c      	beq.n	8007448 <DMA_CalcBaseAndBitshift+0xa8>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a38      	ldr	r2, [pc, #224]	; (80074d4 <DMA_CalcBaseAndBitshift+0x134>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d027      	beq.n	8007448 <DMA_CalcBaseAndBitshift+0xa8>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a36      	ldr	r2, [pc, #216]	; (80074d8 <DMA_CalcBaseAndBitshift+0x138>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d022      	beq.n	8007448 <DMA_CalcBaseAndBitshift+0xa8>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a35      	ldr	r2, [pc, #212]	; (80074dc <DMA_CalcBaseAndBitshift+0x13c>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d01d      	beq.n	8007448 <DMA_CalcBaseAndBitshift+0xa8>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a33      	ldr	r2, [pc, #204]	; (80074e0 <DMA_CalcBaseAndBitshift+0x140>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d018      	beq.n	8007448 <DMA_CalcBaseAndBitshift+0xa8>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a32      	ldr	r2, [pc, #200]	; (80074e4 <DMA_CalcBaseAndBitshift+0x144>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d013      	beq.n	8007448 <DMA_CalcBaseAndBitshift+0xa8>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a30      	ldr	r2, [pc, #192]	; (80074e8 <DMA_CalcBaseAndBitshift+0x148>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d00e      	beq.n	8007448 <DMA_CalcBaseAndBitshift+0xa8>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a2f      	ldr	r2, [pc, #188]	; (80074ec <DMA_CalcBaseAndBitshift+0x14c>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d009      	beq.n	8007448 <DMA_CalcBaseAndBitshift+0xa8>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a2d      	ldr	r2, [pc, #180]	; (80074f0 <DMA_CalcBaseAndBitshift+0x150>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d004      	beq.n	8007448 <DMA_CalcBaseAndBitshift+0xa8>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a2c      	ldr	r2, [pc, #176]	; (80074f4 <DMA_CalcBaseAndBitshift+0x154>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d101      	bne.n	800744c <DMA_CalcBaseAndBitshift+0xac>
 8007448:	2301      	movs	r3, #1
 800744a:	e000      	b.n	800744e <DMA_CalcBaseAndBitshift+0xae>
 800744c:	2300      	movs	r3, #0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d024      	beq.n	800749c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	b2db      	uxtb	r3, r3
 8007458:	3b10      	subs	r3, #16
 800745a:	4a27      	ldr	r2, [pc, #156]	; (80074f8 <DMA_CalcBaseAndBitshift+0x158>)
 800745c:	fba2 2303 	umull	r2, r3, r2, r3
 8007460:	091b      	lsrs	r3, r3, #4
 8007462:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f003 0307 	and.w	r3, r3, #7
 800746a:	4a24      	ldr	r2, [pc, #144]	; (80074fc <DMA_CalcBaseAndBitshift+0x15c>)
 800746c:	5cd3      	ldrb	r3, [r2, r3]
 800746e:	461a      	mov	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2b03      	cmp	r3, #3
 8007478:	d908      	bls.n	800748c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	4b1f      	ldr	r3, [pc, #124]	; (8007500 <DMA_CalcBaseAndBitshift+0x160>)
 8007482:	4013      	ands	r3, r2
 8007484:	1d1a      	adds	r2, r3, #4
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	659a      	str	r2, [r3, #88]	; 0x58
 800748a:	e00d      	b.n	80074a8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	461a      	mov	r2, r3
 8007492:	4b1b      	ldr	r3, [pc, #108]	; (8007500 <DMA_CalcBaseAndBitshift+0x160>)
 8007494:	4013      	ands	r3, r2
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	6593      	str	r3, [r2, #88]	; 0x58
 800749a:	e005      	b.n	80074a8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr
 80074b8:	40020010 	.word	0x40020010
 80074bc:	40020028 	.word	0x40020028
 80074c0:	40020040 	.word	0x40020040
 80074c4:	40020058 	.word	0x40020058
 80074c8:	40020070 	.word	0x40020070
 80074cc:	40020088 	.word	0x40020088
 80074d0:	400200a0 	.word	0x400200a0
 80074d4:	400200b8 	.word	0x400200b8
 80074d8:	40020410 	.word	0x40020410
 80074dc:	40020428 	.word	0x40020428
 80074e0:	40020440 	.word	0x40020440
 80074e4:	40020458 	.word	0x40020458
 80074e8:	40020470 	.word	0x40020470
 80074ec:	40020488 	.word	0x40020488
 80074f0:	400204a0 	.word	0x400204a0
 80074f4:	400204b8 	.word	0x400204b8
 80074f8:	aaaaaaab 	.word	0xaaaaaaab
 80074fc:	0800dfa0 	.word	0x0800dfa0
 8007500:	fffffc00 	.word	0xfffffc00

08007504 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800750c:	2300      	movs	r3, #0
 800750e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d120      	bne.n	800755a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751c:	2b03      	cmp	r3, #3
 800751e:	d858      	bhi.n	80075d2 <DMA_CheckFifoParam+0xce>
 8007520:	a201      	add	r2, pc, #4	; (adr r2, 8007528 <DMA_CheckFifoParam+0x24>)
 8007522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007526:	bf00      	nop
 8007528:	08007539 	.word	0x08007539
 800752c:	0800754b 	.word	0x0800754b
 8007530:	08007539 	.word	0x08007539
 8007534:	080075d3 	.word	0x080075d3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d048      	beq.n	80075d6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007548:	e045      	b.n	80075d6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007552:	d142      	bne.n	80075da <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007558:	e03f      	b.n	80075da <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007562:	d123      	bne.n	80075ac <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007568:	2b03      	cmp	r3, #3
 800756a:	d838      	bhi.n	80075de <DMA_CheckFifoParam+0xda>
 800756c:	a201      	add	r2, pc, #4	; (adr r2, 8007574 <DMA_CheckFifoParam+0x70>)
 800756e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007572:	bf00      	nop
 8007574:	08007585 	.word	0x08007585
 8007578:	0800758b 	.word	0x0800758b
 800757c:	08007585 	.word	0x08007585
 8007580:	0800759d 	.word	0x0800759d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	73fb      	strb	r3, [r7, #15]
        break;
 8007588:	e030      	b.n	80075ec <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d025      	beq.n	80075e2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800759a:	e022      	b.n	80075e2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80075a4:	d11f      	bne.n	80075e6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075aa:	e01c      	b.n	80075e6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d902      	bls.n	80075ba <DMA_CheckFifoParam+0xb6>
 80075b4:	2b03      	cmp	r3, #3
 80075b6:	d003      	beq.n	80075c0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80075b8:	e018      	b.n	80075ec <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	73fb      	strb	r3, [r7, #15]
        break;
 80075be:	e015      	b.n	80075ec <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00e      	beq.n	80075ea <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	73fb      	strb	r3, [r7, #15]
    break;
 80075d0:	e00b      	b.n	80075ea <DMA_CheckFifoParam+0xe6>
        break;
 80075d2:	bf00      	nop
 80075d4:	e00a      	b.n	80075ec <DMA_CheckFifoParam+0xe8>
        break;
 80075d6:	bf00      	nop
 80075d8:	e008      	b.n	80075ec <DMA_CheckFifoParam+0xe8>
        break;
 80075da:	bf00      	nop
 80075dc:	e006      	b.n	80075ec <DMA_CheckFifoParam+0xe8>
        break;
 80075de:	bf00      	nop
 80075e0:	e004      	b.n	80075ec <DMA_CheckFifoParam+0xe8>
        break;
 80075e2:	bf00      	nop
 80075e4:	e002      	b.n	80075ec <DMA_CheckFifoParam+0xe8>
        break;
 80075e6:	bf00      	nop
 80075e8:	e000      	b.n	80075ec <DMA_CheckFifoParam+0xe8>
    break;
 80075ea:	bf00      	nop
    }
  }

  return status;
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop

080075fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a38      	ldr	r2, [pc, #224]	; (80076f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d022      	beq.n	800765a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a36      	ldr	r2, [pc, #216]	; (80076f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d01d      	beq.n	800765a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a35      	ldr	r2, [pc, #212]	; (80076f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d018      	beq.n	800765a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a33      	ldr	r2, [pc, #204]	; (80076fc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d013      	beq.n	800765a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a32      	ldr	r2, [pc, #200]	; (8007700 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d00e      	beq.n	800765a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a30      	ldr	r2, [pc, #192]	; (8007704 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d009      	beq.n	800765a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a2f      	ldr	r2, [pc, #188]	; (8007708 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d004      	beq.n	800765a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a2d      	ldr	r2, [pc, #180]	; (800770c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d101      	bne.n	800765e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800765a:	2301      	movs	r3, #1
 800765c:	e000      	b.n	8007660 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800765e:	2300      	movs	r3, #0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d01a      	beq.n	800769a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	b2db      	uxtb	r3, r3
 800766a:	3b08      	subs	r3, #8
 800766c:	4a28      	ldr	r2, [pc, #160]	; (8007710 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800766e:	fba2 2303 	umull	r2, r3, r2, r3
 8007672:	091b      	lsrs	r3, r3, #4
 8007674:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	4b26      	ldr	r3, [pc, #152]	; (8007714 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	461a      	mov	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a24      	ldr	r2, [pc, #144]	; (8007718 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007688:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f003 031f 	and.w	r3, r3, #31
 8007690:	2201      	movs	r2, #1
 8007692:	409a      	lsls	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007698:	e024      	b.n	80076e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	3b10      	subs	r3, #16
 80076a2:	4a1e      	ldr	r2, [pc, #120]	; (800771c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80076a4:	fba2 2303 	umull	r2, r3, r2, r3
 80076a8:	091b      	lsrs	r3, r3, #4
 80076aa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	4a1c      	ldr	r2, [pc, #112]	; (8007720 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d806      	bhi.n	80076c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4a1b      	ldr	r2, [pc, #108]	; (8007724 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d902      	bls.n	80076c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	3308      	adds	r3, #8
 80076c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	4b18      	ldr	r3, [pc, #96]	; (8007728 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80076c6:	4413      	add	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	461a      	mov	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a16      	ldr	r2, [pc, #88]	; (800772c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80076d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f003 031f 	and.w	r3, r3, #31
 80076dc:	2201      	movs	r2, #1
 80076de:	409a      	lsls	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80076e4:	bf00      	nop
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	58025408 	.word	0x58025408
 80076f4:	5802541c 	.word	0x5802541c
 80076f8:	58025430 	.word	0x58025430
 80076fc:	58025444 	.word	0x58025444
 8007700:	58025458 	.word	0x58025458
 8007704:	5802546c 	.word	0x5802546c
 8007708:	58025480 	.word	0x58025480
 800770c:	58025494 	.word	0x58025494
 8007710:	cccccccd 	.word	0xcccccccd
 8007714:	16009600 	.word	0x16009600
 8007718:	58025880 	.word	0x58025880
 800771c:	aaaaaaab 	.word	0xaaaaaaab
 8007720:	400204b8 	.word	0x400204b8
 8007724:	4002040f 	.word	0x4002040f
 8007728:	10008200 	.word	0x10008200
 800772c:	40020880 	.word	0x40020880

08007730 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	b2db      	uxtb	r3, r3
 800773e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d04a      	beq.n	80077dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2b08      	cmp	r3, #8
 800774a:	d847      	bhi.n	80077dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a25      	ldr	r2, [pc, #148]	; (80077e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d022      	beq.n	800779c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a24      	ldr	r2, [pc, #144]	; (80077ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d01d      	beq.n	800779c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a22      	ldr	r2, [pc, #136]	; (80077f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d018      	beq.n	800779c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a21      	ldr	r2, [pc, #132]	; (80077f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d013      	beq.n	800779c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a1f      	ldr	r2, [pc, #124]	; (80077f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d00e      	beq.n	800779c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a1e      	ldr	r2, [pc, #120]	; (80077fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d009      	beq.n	800779c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a1c      	ldr	r2, [pc, #112]	; (8007800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d004      	beq.n	800779c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a1b      	ldr	r2, [pc, #108]	; (8007804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d101      	bne.n	80077a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800779c:	2301      	movs	r3, #1
 800779e:	e000      	b.n	80077a2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80077a0:	2300      	movs	r3, #0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00a      	beq.n	80077bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	4b17      	ldr	r3, [pc, #92]	; (8007808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80077aa:	4413      	add	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	461a      	mov	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a15      	ldr	r2, [pc, #84]	; (800780c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80077b8:	671a      	str	r2, [r3, #112]	; 0x70
 80077ba:	e009      	b.n	80077d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	4b14      	ldr	r3, [pc, #80]	; (8007810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80077c0:	4413      	add	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	461a      	mov	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a11      	ldr	r2, [pc, #68]	; (8007814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80077ce:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	2201      	movs	r2, #1
 80077d6:	409a      	lsls	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80077dc:	bf00      	nop
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	58025408 	.word	0x58025408
 80077ec:	5802541c 	.word	0x5802541c
 80077f0:	58025430 	.word	0x58025430
 80077f4:	58025444 	.word	0x58025444
 80077f8:	58025458 	.word	0x58025458
 80077fc:	5802546c 	.word	0x5802546c
 8007800:	58025480 	.word	0x58025480
 8007804:	58025494 	.word	0x58025494
 8007808:	1600963f 	.word	0x1600963f
 800780c:	58025940 	.word	0x58025940
 8007810:	1000823f 	.word	0x1000823f
 8007814:	40020940 	.word	0x40020940

08007818 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007818:	b480      	push	{r7}
 800781a:	b089      	sub	sp, #36	; 0x24
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007822:	2300      	movs	r3, #0
 8007824:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007826:	4b86      	ldr	r3, [pc, #536]	; (8007a40 <HAL_GPIO_Init+0x228>)
 8007828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800782a:	e18c      	b.n	8007b46 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	2101      	movs	r1, #1
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	fa01 f303 	lsl.w	r3, r1, r3
 8007838:	4013      	ands	r3, r2
 800783a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 817e 	beq.w	8007b40 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f003 0303 	and.w	r3, r3, #3
 800784c:	2b01      	cmp	r3, #1
 800784e:	d005      	beq.n	800785c <HAL_GPIO_Init+0x44>
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	f003 0303 	and.w	r3, r3, #3
 8007858:	2b02      	cmp	r3, #2
 800785a:	d130      	bne.n	80078be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	005b      	lsls	r3, r3, #1
 8007866:	2203      	movs	r2, #3
 8007868:	fa02 f303 	lsl.w	r3, r2, r3
 800786c:	43db      	mvns	r3, r3
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	4013      	ands	r3, r2
 8007872:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	68da      	ldr	r2, [r3, #12]
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	005b      	lsls	r3, r3, #1
 800787c:	fa02 f303 	lsl.w	r3, r2, r3
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	4313      	orrs	r3, r2
 8007884:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007892:	2201      	movs	r2, #1
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	fa02 f303 	lsl.w	r3, r2, r3
 800789a:	43db      	mvns	r3, r3
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	4013      	ands	r3, r2
 80078a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	091b      	lsrs	r3, r3, #4
 80078a8:	f003 0201 	and.w	r2, r3, #1
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	fa02 f303 	lsl.w	r3, r2, r3
 80078b2:	69ba      	ldr	r2, [r7, #24]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	f003 0303 	and.w	r3, r3, #3
 80078c6:	2b03      	cmp	r3, #3
 80078c8:	d017      	beq.n	80078fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	2203      	movs	r2, #3
 80078d6:	fa02 f303 	lsl.w	r3, r2, r3
 80078da:	43db      	mvns	r3, r3
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	4013      	ands	r3, r2
 80078e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	689a      	ldr	r2, [r3, #8]
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	005b      	lsls	r3, r3, #1
 80078ea:	fa02 f303 	lsl.w	r3, r2, r3
 80078ee:	69ba      	ldr	r2, [r7, #24]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	69ba      	ldr	r2, [r7, #24]
 80078f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f003 0303 	and.w	r3, r3, #3
 8007902:	2b02      	cmp	r3, #2
 8007904:	d123      	bne.n	800794e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	08da      	lsrs	r2, r3, #3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	3208      	adds	r2, #8
 800790e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	f003 0307 	and.w	r3, r3, #7
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	220f      	movs	r2, #15
 800791e:	fa02 f303 	lsl.w	r3, r2, r3
 8007922:	43db      	mvns	r3, r3
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	4013      	ands	r3, r2
 8007928:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	691a      	ldr	r2, [r3, #16]
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	f003 0307 	and.w	r3, r3, #7
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	fa02 f303 	lsl.w	r3, r2, r3
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	4313      	orrs	r3, r2
 800793e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	08da      	lsrs	r2, r3, #3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	3208      	adds	r2, #8
 8007948:	69b9      	ldr	r1, [r7, #24]
 800794a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	005b      	lsls	r3, r3, #1
 8007958:	2203      	movs	r2, #3
 800795a:	fa02 f303 	lsl.w	r3, r2, r3
 800795e:	43db      	mvns	r3, r3
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	4013      	ands	r3, r2
 8007964:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f003 0203 	and.w	r2, r3, #3
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	005b      	lsls	r3, r3, #1
 8007972:	fa02 f303 	lsl.w	r3, r2, r3
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	4313      	orrs	r3, r2
 800797a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 80d8 	beq.w	8007b40 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007990:	4b2c      	ldr	r3, [pc, #176]	; (8007a44 <HAL_GPIO_Init+0x22c>)
 8007992:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007996:	4a2b      	ldr	r2, [pc, #172]	; (8007a44 <HAL_GPIO_Init+0x22c>)
 8007998:	f043 0302 	orr.w	r3, r3, #2
 800799c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80079a0:	4b28      	ldr	r3, [pc, #160]	; (8007a44 <HAL_GPIO_Init+0x22c>)
 80079a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079a6:	f003 0302 	and.w	r3, r3, #2
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80079ae:	4a26      	ldr	r2, [pc, #152]	; (8007a48 <HAL_GPIO_Init+0x230>)
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	089b      	lsrs	r3, r3, #2
 80079b4:	3302      	adds	r3, #2
 80079b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	f003 0303 	and.w	r3, r3, #3
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	220f      	movs	r2, #15
 80079c6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ca:	43db      	mvns	r3, r3
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	4013      	ands	r3, r2
 80079d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a1d      	ldr	r2, [pc, #116]	; (8007a4c <HAL_GPIO_Init+0x234>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d04a      	beq.n	8007a70 <HAL_GPIO_Init+0x258>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a1c      	ldr	r2, [pc, #112]	; (8007a50 <HAL_GPIO_Init+0x238>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d02b      	beq.n	8007a3a <HAL_GPIO_Init+0x222>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a1b      	ldr	r2, [pc, #108]	; (8007a54 <HAL_GPIO_Init+0x23c>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d025      	beq.n	8007a36 <HAL_GPIO_Init+0x21e>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a1a      	ldr	r2, [pc, #104]	; (8007a58 <HAL_GPIO_Init+0x240>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d01f      	beq.n	8007a32 <HAL_GPIO_Init+0x21a>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a19      	ldr	r2, [pc, #100]	; (8007a5c <HAL_GPIO_Init+0x244>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d019      	beq.n	8007a2e <HAL_GPIO_Init+0x216>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a18      	ldr	r2, [pc, #96]	; (8007a60 <HAL_GPIO_Init+0x248>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d013      	beq.n	8007a2a <HAL_GPIO_Init+0x212>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a17      	ldr	r2, [pc, #92]	; (8007a64 <HAL_GPIO_Init+0x24c>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d00d      	beq.n	8007a26 <HAL_GPIO_Init+0x20e>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a16      	ldr	r2, [pc, #88]	; (8007a68 <HAL_GPIO_Init+0x250>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d007      	beq.n	8007a22 <HAL_GPIO_Init+0x20a>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a15      	ldr	r2, [pc, #84]	; (8007a6c <HAL_GPIO_Init+0x254>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d101      	bne.n	8007a1e <HAL_GPIO_Init+0x206>
 8007a1a:	2309      	movs	r3, #9
 8007a1c:	e029      	b.n	8007a72 <HAL_GPIO_Init+0x25a>
 8007a1e:	230a      	movs	r3, #10
 8007a20:	e027      	b.n	8007a72 <HAL_GPIO_Init+0x25a>
 8007a22:	2307      	movs	r3, #7
 8007a24:	e025      	b.n	8007a72 <HAL_GPIO_Init+0x25a>
 8007a26:	2306      	movs	r3, #6
 8007a28:	e023      	b.n	8007a72 <HAL_GPIO_Init+0x25a>
 8007a2a:	2305      	movs	r3, #5
 8007a2c:	e021      	b.n	8007a72 <HAL_GPIO_Init+0x25a>
 8007a2e:	2304      	movs	r3, #4
 8007a30:	e01f      	b.n	8007a72 <HAL_GPIO_Init+0x25a>
 8007a32:	2303      	movs	r3, #3
 8007a34:	e01d      	b.n	8007a72 <HAL_GPIO_Init+0x25a>
 8007a36:	2302      	movs	r3, #2
 8007a38:	e01b      	b.n	8007a72 <HAL_GPIO_Init+0x25a>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e019      	b.n	8007a72 <HAL_GPIO_Init+0x25a>
 8007a3e:	bf00      	nop
 8007a40:	58000080 	.word	0x58000080
 8007a44:	58024400 	.word	0x58024400
 8007a48:	58000400 	.word	0x58000400
 8007a4c:	58020000 	.word	0x58020000
 8007a50:	58020400 	.word	0x58020400
 8007a54:	58020800 	.word	0x58020800
 8007a58:	58020c00 	.word	0x58020c00
 8007a5c:	58021000 	.word	0x58021000
 8007a60:	58021400 	.word	0x58021400
 8007a64:	58021800 	.word	0x58021800
 8007a68:	58021c00 	.word	0x58021c00
 8007a6c:	58022400 	.word	0x58022400
 8007a70:	2300      	movs	r3, #0
 8007a72:	69fa      	ldr	r2, [r7, #28]
 8007a74:	f002 0203 	and.w	r2, r2, #3
 8007a78:	0092      	lsls	r2, r2, #2
 8007a7a:	4093      	lsls	r3, r2
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a82:	4938      	ldr	r1, [pc, #224]	; (8007b64 <HAL_GPIO_Init+0x34c>)
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	089b      	lsrs	r3, r3, #2
 8007a88:	3302      	adds	r3, #2
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	43db      	mvns	r3, r3
 8007a9c:	69ba      	ldr	r2, [r7, #24]
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007aae:	69ba      	ldr	r2, [r7, #24]
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007ab6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	43db      	mvns	r3, r3
 8007aca:	69ba      	ldr	r2, [r7, #24]
 8007acc:	4013      	ands	r3, r2
 8007ace:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d003      	beq.n	8007ae4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007adc:	69ba      	ldr	r2, [r7, #24]
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007ae4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	43db      	mvns	r3, r3
 8007af6:	69ba      	ldr	r2, [r7, #24]
 8007af8:	4013      	ands	r3, r2
 8007afa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d003      	beq.n	8007b10 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007b08:	69ba      	ldr	r2, [r7, #24]
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	69ba      	ldr	r2, [r7, #24]
 8007b14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	43db      	mvns	r3, r3
 8007b20:	69ba      	ldr	r2, [r7, #24]
 8007b22:	4013      	ands	r3, r2
 8007b24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	69ba      	ldr	r2, [r7, #24]
 8007b3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	3301      	adds	r3, #1
 8007b44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f47f ae6b 	bne.w	800782c <HAL_GPIO_Init+0x14>
  }
}
 8007b56:	bf00      	nop
 8007b58:	bf00      	nop
 8007b5a:	3724      	adds	r7, #36	; 0x24
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr
 8007b64:	58000400 	.word	0x58000400

08007b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	807b      	strh	r3, [r7, #2]
 8007b74:	4613      	mov	r3, r2
 8007b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007b78:	787b      	ldrb	r3, [r7, #1]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d003      	beq.n	8007b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b7e:	887a      	ldrh	r2, [r7, #2]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007b84:	e003      	b.n	8007b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007b86:	887b      	ldrh	r3, [r7, #2]
 8007b88:	041a      	lsls	r2, r3, #16
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	619a      	str	r2, [r3, #24]
}
 8007b8e:	bf00      	nop
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
	...

08007b9c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007ba4:	4b19      	ldr	r3, [pc, #100]	; (8007c0c <HAL_PWREx_ConfigSupply+0x70>)
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	f003 0304 	and.w	r3, r3, #4
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	d00a      	beq.n	8007bc6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007bb0:	4b16      	ldr	r3, [pc, #88]	; (8007c0c <HAL_PWREx_ConfigSupply+0x70>)
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	f003 0307 	and.w	r3, r3, #7
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d001      	beq.n	8007bc2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e01f      	b.n	8007c02 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	e01d      	b.n	8007c02 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007bc6:	4b11      	ldr	r3, [pc, #68]	; (8007c0c <HAL_PWREx_ConfigSupply+0x70>)
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	f023 0207 	bic.w	r2, r3, #7
 8007bce:	490f      	ldr	r1, [pc, #60]	; (8007c0c <HAL_PWREx_ConfigSupply+0x70>)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007bd6:	f7fc fec9 	bl	800496c <HAL_GetTick>
 8007bda:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007bdc:	e009      	b.n	8007bf2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007bde:	f7fc fec5 	bl	800496c <HAL_GetTick>
 8007be2:	4602      	mov	r2, r0
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bec:	d901      	bls.n	8007bf2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e007      	b.n	8007c02 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007bf2:	4b06      	ldr	r3, [pc, #24]	; (8007c0c <HAL_PWREx_ConfigSupply+0x70>)
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bfe:	d1ee      	bne.n	8007bde <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	58024800 	.word	0x58024800

08007c10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b08c      	sub	sp, #48	; 0x30
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d101      	bne.n	8007c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e39d      	b.n	800835e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f000 8087 	beq.w	8007d3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c30:	4b88      	ldr	r3, [pc, #544]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c3a:	4b86      	ldr	r3, [pc, #536]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c42:	2b10      	cmp	r3, #16
 8007c44:	d007      	beq.n	8007c56 <HAL_RCC_OscConfig+0x46>
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c48:	2b18      	cmp	r3, #24
 8007c4a:	d110      	bne.n	8007c6e <HAL_RCC_OscConfig+0x5e>
 8007c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4e:	f003 0303 	and.w	r3, r3, #3
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d10b      	bne.n	8007c6e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c56:	4b7f      	ldr	r3, [pc, #508]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d06c      	beq.n	8007d3c <HAL_RCC_OscConfig+0x12c>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d168      	bne.n	8007d3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e377      	b.n	800835e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c76:	d106      	bne.n	8007c86 <HAL_RCC_OscConfig+0x76>
 8007c78:	4b76      	ldr	r3, [pc, #472]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a75      	ldr	r2, [pc, #468]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c82:	6013      	str	r3, [r2, #0]
 8007c84:	e02e      	b.n	8007ce4 <HAL_RCC_OscConfig+0xd4>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10c      	bne.n	8007ca8 <HAL_RCC_OscConfig+0x98>
 8007c8e:	4b71      	ldr	r3, [pc, #452]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a70      	ldr	r2, [pc, #448]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c98:	6013      	str	r3, [r2, #0]
 8007c9a:	4b6e      	ldr	r3, [pc, #440]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a6d      	ldr	r2, [pc, #436]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007ca0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ca4:	6013      	str	r3, [r2, #0]
 8007ca6:	e01d      	b.n	8007ce4 <HAL_RCC_OscConfig+0xd4>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007cb0:	d10c      	bne.n	8007ccc <HAL_RCC_OscConfig+0xbc>
 8007cb2:	4b68      	ldr	r3, [pc, #416]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a67      	ldr	r2, [pc, #412]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007cbc:	6013      	str	r3, [r2, #0]
 8007cbe:	4b65      	ldr	r3, [pc, #404]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a64      	ldr	r2, [pc, #400]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cc8:	6013      	str	r3, [r2, #0]
 8007cca:	e00b      	b.n	8007ce4 <HAL_RCC_OscConfig+0xd4>
 8007ccc:	4b61      	ldr	r3, [pc, #388]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a60      	ldr	r2, [pc, #384]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	4b5e      	ldr	r3, [pc, #376]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a5d      	ldr	r2, [pc, #372]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d013      	beq.n	8007d14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cec:	f7fc fe3e 	bl	800496c <HAL_GetTick>
 8007cf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007cf2:	e008      	b.n	8007d06 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007cf4:	f7fc fe3a 	bl	800496c <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	2b64      	cmp	r3, #100	; 0x64
 8007d00:	d901      	bls.n	8007d06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e32b      	b.n	800835e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d06:	4b53      	ldr	r3, [pc, #332]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0f0      	beq.n	8007cf4 <HAL_RCC_OscConfig+0xe4>
 8007d12:	e014      	b.n	8007d3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d14:	f7fc fe2a 	bl	800496c <HAL_GetTick>
 8007d18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d1a:	e008      	b.n	8007d2e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d1c:	f7fc fe26 	bl	800496c <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	2b64      	cmp	r3, #100	; 0x64
 8007d28:	d901      	bls.n	8007d2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e317      	b.n	800835e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d2e:	4b49      	ldr	r3, [pc, #292]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1f0      	bne.n	8007d1c <HAL_RCC_OscConfig+0x10c>
 8007d3a:	e000      	b.n	8007d3e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 808c 	beq.w	8007e64 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d4c:	4b41      	ldr	r3, [pc, #260]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d54:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d56:	4b3f      	ldr	r3, [pc, #252]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007d5c:	6a3b      	ldr	r3, [r7, #32]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d007      	beq.n	8007d72 <HAL_RCC_OscConfig+0x162>
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	2b18      	cmp	r3, #24
 8007d66:	d137      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x1c8>
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	f003 0303 	and.w	r3, r3, #3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d132      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d72:	4b38      	ldr	r3, [pc, #224]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0304 	and.w	r3, r3, #4
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d005      	beq.n	8007d8a <HAL_RCC_OscConfig+0x17a>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d101      	bne.n	8007d8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e2e9      	b.n	800835e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007d8a:	4b32      	ldr	r3, [pc, #200]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f023 0219 	bic.w	r2, r3, #25
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	492f      	ldr	r1, [pc, #188]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007d9c:	f7fc fde6 	bl	800496c <HAL_GetTick>
 8007da0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007da2:	e008      	b.n	8007db6 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007da4:	f7fc fde2 	bl	800496c <HAL_GetTick>
 8007da8:	4602      	mov	r2, r0
 8007daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d901      	bls.n	8007db6 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e2d3      	b.n	800835e <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007db6:	4b27      	ldr	r3, [pc, #156]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0304 	and.w	r3, r3, #4
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d0f0      	beq.n	8007da4 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dc2:	4b24      	ldr	r3, [pc, #144]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	061b      	lsls	r3, r3, #24
 8007dd0:	4920      	ldr	r1, [pc, #128]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007dd6:	e045      	b.n	8007e64 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d026      	beq.n	8007e2e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007de0:	4b1c      	ldr	r3, [pc, #112]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f023 0219 	bic.w	r2, r3, #25
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	4919      	ldr	r1, [pc, #100]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007df2:	f7fc fdbb 	bl	800496c <HAL_GetTick>
 8007df6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007df8:	e008      	b.n	8007e0c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dfa:	f7fc fdb7 	bl	800496c <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d901      	bls.n	8007e0c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e2a8      	b.n	800835e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e0c:	4b11      	ldr	r3, [pc, #68]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0304 	and.w	r3, r3, #4
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d0f0      	beq.n	8007dfa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e18:	4b0e      	ldr	r3, [pc, #56]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	061b      	lsls	r3, r3, #24
 8007e26:	490b      	ldr	r1, [pc, #44]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	604b      	str	r3, [r1, #4]
 8007e2c:	e01a      	b.n	8007e64 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e2e:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a08      	ldr	r2, [pc, #32]	; (8007e54 <HAL_RCC_OscConfig+0x244>)
 8007e34:	f023 0301 	bic.w	r3, r3, #1
 8007e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e3a:	f7fc fd97 	bl	800496c <HAL_GetTick>
 8007e3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007e40:	e00a      	b.n	8007e58 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e42:	f7fc fd93 	bl	800496c <HAL_GetTick>
 8007e46:	4602      	mov	r2, r0
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d903      	bls.n	8007e58 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007e50:	2303      	movs	r3, #3
 8007e52:	e284      	b.n	800835e <HAL_RCC_OscConfig+0x74e>
 8007e54:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007e58:	4b96      	ldr	r3, [pc, #600]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0304 	and.w	r3, r3, #4
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1ee      	bne.n	8007e42 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0310 	and.w	r3, r3, #16
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d06a      	beq.n	8007f46 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e70:	4b90      	ldr	r3, [pc, #576]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e78:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e7a:	4b8e      	ldr	r3, [pc, #568]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	2b08      	cmp	r3, #8
 8007e84:	d007      	beq.n	8007e96 <HAL_RCC_OscConfig+0x286>
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	2b18      	cmp	r3, #24
 8007e8a:	d11b      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x2b4>
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	f003 0303 	and.w	r3, r3, #3
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d116      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e96:	4b87      	ldr	r3, [pc, #540]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d005      	beq.n	8007eae <HAL_RCC_OscConfig+0x29e>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	2b80      	cmp	r3, #128	; 0x80
 8007ea8:	d001      	beq.n	8007eae <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e257      	b.n	800835e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007eae:	4b81      	ldr	r3, [pc, #516]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	061b      	lsls	r3, r3, #24
 8007ebc:	497d      	ldr	r1, [pc, #500]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ec2:	e040      	b.n	8007f46 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	69db      	ldr	r3, [r3, #28]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d023      	beq.n	8007f14 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007ecc:	4b79      	ldr	r3, [pc, #484]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a78      	ldr	r2, [pc, #480]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed8:	f7fc fd48 	bl	800496c <HAL_GetTick>
 8007edc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ede:	e008      	b.n	8007ef2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007ee0:	f7fc fd44 	bl	800496c <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d901      	bls.n	8007ef2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e235      	b.n	800835e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ef2:	4b70      	ldr	r3, [pc, #448]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d0f0      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007efe:	4b6d      	ldr	r3, [pc, #436]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	061b      	lsls	r3, r3, #24
 8007f0c:	4969      	ldr	r1, [pc, #420]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	60cb      	str	r3, [r1, #12]
 8007f12:	e018      	b.n	8007f46 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007f14:	4b67      	ldr	r3, [pc, #412]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a66      	ldr	r2, [pc, #408]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007f1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f20:	f7fc fd24 	bl	800496c <HAL_GetTick>
 8007f24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007f26:	e008      	b.n	8007f3a <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007f28:	f7fc fd20 	bl	800496c <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d901      	bls.n	8007f3a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e211      	b.n	800835e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007f3a:	4b5e      	ldr	r3, [pc, #376]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1f0      	bne.n	8007f28 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0308 	and.w	r3, r3, #8
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d036      	beq.n	8007fc0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d019      	beq.n	8007f8e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f5a:	4b56      	ldr	r3, [pc, #344]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f5e:	4a55      	ldr	r2, [pc, #340]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007f60:	f043 0301 	orr.w	r3, r3, #1
 8007f64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f66:	f7fc fd01 	bl	800496c <HAL_GetTick>
 8007f6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f6c:	e008      	b.n	8007f80 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f6e:	f7fc fcfd 	bl	800496c <HAL_GetTick>
 8007f72:	4602      	mov	r2, r0
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d901      	bls.n	8007f80 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e1ee      	b.n	800835e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f80:	4b4c      	ldr	r3, [pc, #304]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f84:	f003 0302 	and.w	r3, r3, #2
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d0f0      	beq.n	8007f6e <HAL_RCC_OscConfig+0x35e>
 8007f8c:	e018      	b.n	8007fc0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f8e:	4b49      	ldr	r3, [pc, #292]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f92:	4a48      	ldr	r2, [pc, #288]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007f94:	f023 0301 	bic.w	r3, r3, #1
 8007f98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f9a:	f7fc fce7 	bl	800496c <HAL_GetTick>
 8007f9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007fa0:	e008      	b.n	8007fb4 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fa2:	f7fc fce3 	bl	800496c <HAL_GetTick>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d901      	bls.n	8007fb4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e1d4      	b.n	800835e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007fb4:	4b3f      	ldr	r3, [pc, #252]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fb8:	f003 0302 	and.w	r3, r3, #2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1f0      	bne.n	8007fa2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0320 	and.w	r3, r3, #32
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d036      	beq.n	800803a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d019      	beq.n	8008008 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007fd4:	4b37      	ldr	r3, [pc, #220]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a36      	ldr	r2, [pc, #216]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007fda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007fde:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007fe0:	f7fc fcc4 	bl	800496c <HAL_GetTick>
 8007fe4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007fe6:	e008      	b.n	8007ffa <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007fe8:	f7fc fcc0 	bl	800496c <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d901      	bls.n	8007ffa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e1b1      	b.n	800835e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ffa:	4b2e      	ldr	r3, [pc, #184]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0f0      	beq.n	8007fe8 <HAL_RCC_OscConfig+0x3d8>
 8008006:	e018      	b.n	800803a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008008:	4b2a      	ldr	r3, [pc, #168]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a29      	ldr	r2, [pc, #164]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 800800e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008012:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008014:	f7fc fcaa 	bl	800496c <HAL_GetTick>
 8008018:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800801a:	e008      	b.n	800802e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800801c:	f7fc fca6 	bl	800496c <HAL_GetTick>
 8008020:	4602      	mov	r2, r0
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	2b02      	cmp	r3, #2
 8008028:	d901      	bls.n	800802e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e197      	b.n	800835e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800802e:	4b21      	ldr	r3, [pc, #132]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1f0      	bne.n	800801c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0304 	and.w	r3, r3, #4
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 8086 	beq.w	8008154 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008048:	4b1b      	ldr	r3, [pc, #108]	; (80080b8 <HAL_RCC_OscConfig+0x4a8>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a1a      	ldr	r2, [pc, #104]	; (80080b8 <HAL_RCC_OscConfig+0x4a8>)
 800804e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008052:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008054:	f7fc fc8a 	bl	800496c <HAL_GetTick>
 8008058:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800805a:	e008      	b.n	800806e <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800805c:	f7fc fc86 	bl	800496c <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	2b64      	cmp	r3, #100	; 0x64
 8008068:	d901      	bls.n	800806e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e177      	b.n	800835e <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800806e:	4b12      	ldr	r3, [pc, #72]	; (80080b8 <HAL_RCC_OscConfig+0x4a8>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008076:	2b00      	cmp	r3, #0
 8008078:	d0f0      	beq.n	800805c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d106      	bne.n	8008090 <HAL_RCC_OscConfig+0x480>
 8008082:	4b0c      	ldr	r3, [pc, #48]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8008084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008086:	4a0b      	ldr	r2, [pc, #44]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 8008088:	f043 0301 	orr.w	r3, r3, #1
 800808c:	6713      	str	r3, [r2, #112]	; 0x70
 800808e:	e032      	b.n	80080f6 <HAL_RCC_OscConfig+0x4e6>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d111      	bne.n	80080bc <HAL_RCC_OscConfig+0x4ac>
 8008098:	4b06      	ldr	r3, [pc, #24]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 800809a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800809c:	4a05      	ldr	r2, [pc, #20]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 800809e:	f023 0301 	bic.w	r3, r3, #1
 80080a2:	6713      	str	r3, [r2, #112]	; 0x70
 80080a4:	4b03      	ldr	r3, [pc, #12]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 80080a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a8:	4a02      	ldr	r2, [pc, #8]	; (80080b4 <HAL_RCC_OscConfig+0x4a4>)
 80080aa:	f023 0304 	bic.w	r3, r3, #4
 80080ae:	6713      	str	r3, [r2, #112]	; 0x70
 80080b0:	e021      	b.n	80080f6 <HAL_RCC_OscConfig+0x4e6>
 80080b2:	bf00      	nop
 80080b4:	58024400 	.word	0x58024400
 80080b8:	58024800 	.word	0x58024800
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	2b05      	cmp	r3, #5
 80080c2:	d10c      	bne.n	80080de <HAL_RCC_OscConfig+0x4ce>
 80080c4:	4b83      	ldr	r3, [pc, #524]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 80080c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c8:	4a82      	ldr	r2, [pc, #520]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 80080ca:	f043 0304 	orr.w	r3, r3, #4
 80080ce:	6713      	str	r3, [r2, #112]	; 0x70
 80080d0:	4b80      	ldr	r3, [pc, #512]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 80080d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d4:	4a7f      	ldr	r2, [pc, #508]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 80080d6:	f043 0301 	orr.w	r3, r3, #1
 80080da:	6713      	str	r3, [r2, #112]	; 0x70
 80080dc:	e00b      	b.n	80080f6 <HAL_RCC_OscConfig+0x4e6>
 80080de:	4b7d      	ldr	r3, [pc, #500]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 80080e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e2:	4a7c      	ldr	r2, [pc, #496]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 80080e4:	f023 0301 	bic.w	r3, r3, #1
 80080e8:	6713      	str	r3, [r2, #112]	; 0x70
 80080ea:	4b7a      	ldr	r3, [pc, #488]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 80080ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ee:	4a79      	ldr	r2, [pc, #484]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 80080f0:	f023 0304 	bic.w	r3, r3, #4
 80080f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d015      	beq.n	800812a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080fe:	f7fc fc35 	bl	800496c <HAL_GetTick>
 8008102:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008104:	e00a      	b.n	800811c <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008106:	f7fc fc31 	bl	800496c <HAL_GetTick>
 800810a:	4602      	mov	r2, r0
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	f241 3288 	movw	r2, #5000	; 0x1388
 8008114:	4293      	cmp	r3, r2
 8008116:	d901      	bls.n	800811c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e120      	b.n	800835e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800811c:	4b6d      	ldr	r3, [pc, #436]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 800811e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d0ee      	beq.n	8008106 <HAL_RCC_OscConfig+0x4f6>
 8008128:	e014      	b.n	8008154 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800812a:	f7fc fc1f 	bl	800496c <HAL_GetTick>
 800812e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008130:	e00a      	b.n	8008148 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008132:	f7fc fc1b 	bl	800496c <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008140:	4293      	cmp	r3, r2
 8008142:	d901      	bls.n	8008148 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008144:	2303      	movs	r3, #3
 8008146:	e10a      	b.n	800835e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008148:	4b62      	ldr	r3, [pc, #392]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 800814a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814c:	f003 0302 	and.w	r3, r3, #2
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1ee      	bne.n	8008132 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 80ff 	beq.w	800835c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800815e:	4b5d      	ldr	r3, [pc, #372]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008166:	2b18      	cmp	r3, #24
 8008168:	f000 80ba 	beq.w	80082e0 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	2b02      	cmp	r3, #2
 8008172:	f040 8095 	bne.w	80082a0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008176:	4b57      	ldr	r3, [pc, #348]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a56      	ldr	r2, [pc, #344]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 800817c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008182:	f7fc fbf3 	bl	800496c <HAL_GetTick>
 8008186:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008188:	e008      	b.n	800819c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800818a:	f7fc fbef 	bl	800496c <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	2b02      	cmp	r3, #2
 8008196:	d901      	bls.n	800819c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e0e0      	b.n	800835e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800819c:	4b4d      	ldr	r3, [pc, #308]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1f0      	bne.n	800818a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081a8:	4b4a      	ldr	r3, [pc, #296]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 80081aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081ac:	4b4a      	ldr	r3, [pc, #296]	; (80082d8 <HAL_RCC_OscConfig+0x6c8>)
 80081ae:	4013      	ands	r3, r2
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80081b8:	0112      	lsls	r2, r2, #4
 80081ba:	430a      	orrs	r2, r1
 80081bc:	4945      	ldr	r1, [pc, #276]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	628b      	str	r3, [r1, #40]	; 0x28
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c6:	3b01      	subs	r3, #1
 80081c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d0:	3b01      	subs	r3, #1
 80081d2:	025b      	lsls	r3, r3, #9
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	431a      	orrs	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081dc:	3b01      	subs	r3, #1
 80081de:	041b      	lsls	r3, r3, #16
 80081e0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081e4:	431a      	orrs	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ea:	3b01      	subs	r3, #1
 80081ec:	061b      	lsls	r3, r3, #24
 80081ee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081f2:	4938      	ldr	r1, [pc, #224]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80081f8:	4b36      	ldr	r3, [pc, #216]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 80081fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fc:	4a35      	ldr	r2, [pc, #212]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 80081fe:	f023 0301 	bic.w	r3, r3, #1
 8008202:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008204:	4b33      	ldr	r3, [pc, #204]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 8008206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008208:	4b34      	ldr	r3, [pc, #208]	; (80082dc <HAL_RCC_OscConfig+0x6cc>)
 800820a:	4013      	ands	r3, r2
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008210:	00d2      	lsls	r2, r2, #3
 8008212:	4930      	ldr	r1, [pc, #192]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 8008214:	4313      	orrs	r3, r2
 8008216:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008218:	4b2e      	ldr	r3, [pc, #184]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 800821a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821c:	f023 020c 	bic.w	r2, r3, #12
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008224:	492b      	ldr	r1, [pc, #172]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 8008226:	4313      	orrs	r3, r2
 8008228:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800822a:	4b2a      	ldr	r3, [pc, #168]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 800822c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822e:	f023 0202 	bic.w	r2, r3, #2
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008236:	4927      	ldr	r1, [pc, #156]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 8008238:	4313      	orrs	r3, r2
 800823a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800823c:	4b25      	ldr	r3, [pc, #148]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 800823e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008240:	4a24      	ldr	r2, [pc, #144]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 8008242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008246:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008248:	4b22      	ldr	r3, [pc, #136]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	4a21      	ldr	r2, [pc, #132]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 800824e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008252:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008254:	4b1f      	ldr	r3, [pc, #124]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	4a1e      	ldr	r2, [pc, #120]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 800825a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800825e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008260:	4b1c      	ldr	r3, [pc, #112]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 8008262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008264:	4a1b      	ldr	r2, [pc, #108]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 8008266:	f043 0301 	orr.w	r3, r3, #1
 800826a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800826c:	4b19      	ldr	r3, [pc, #100]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a18      	ldr	r2, [pc, #96]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 8008272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008278:	f7fc fb78 	bl	800496c <HAL_GetTick>
 800827c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800827e:	e008      	b.n	8008292 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008280:	f7fc fb74 	bl	800496c <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	2b02      	cmp	r3, #2
 800828c:	d901      	bls.n	8008292 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e065      	b.n	800835e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008292:	4b10      	ldr	r3, [pc, #64]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d0f0      	beq.n	8008280 <HAL_RCC_OscConfig+0x670>
 800829e:	e05d      	b.n	800835c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082a0:	4b0c      	ldr	r3, [pc, #48]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a0b      	ldr	r2, [pc, #44]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 80082a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ac:	f7fc fb5e 	bl	800496c <HAL_GetTick>
 80082b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082b2:	e008      	b.n	80082c6 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082b4:	f7fc fb5a 	bl	800496c <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d901      	bls.n	80082c6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80082c2:	2303      	movs	r3, #3
 80082c4:	e04b      	b.n	800835e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082c6:	4b03      	ldr	r3, [pc, #12]	; (80082d4 <HAL_RCC_OscConfig+0x6c4>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1f0      	bne.n	80082b4 <HAL_RCC_OscConfig+0x6a4>
 80082d2:	e043      	b.n	800835c <HAL_RCC_OscConfig+0x74c>
 80082d4:	58024400 	.word	0x58024400
 80082d8:	fffffc0c 	.word	0xfffffc0c
 80082dc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80082e0:	4b21      	ldr	r3, [pc, #132]	; (8008368 <HAL_RCC_OscConfig+0x758>)
 80082e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80082e6:	4b20      	ldr	r3, [pc, #128]	; (8008368 <HAL_RCC_OscConfig+0x758>)
 80082e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d031      	beq.n	8008358 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	f003 0203 	and.w	r2, r3, #3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082fe:	429a      	cmp	r2, r3
 8008300:	d12a      	bne.n	8008358 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	091b      	lsrs	r3, r3, #4
 8008306:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800830e:	429a      	cmp	r2, r3
 8008310:	d122      	bne.n	8008358 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800831e:	429a      	cmp	r2, r3
 8008320:	d11a      	bne.n	8008358 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	0a5b      	lsrs	r3, r3, #9
 8008326:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800832e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008330:	429a      	cmp	r2, r3
 8008332:	d111      	bne.n	8008358 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	0c1b      	lsrs	r3, r3, #16
 8008338:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008340:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008342:	429a      	cmp	r2, r3
 8008344:	d108      	bne.n	8008358 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	0e1b      	lsrs	r3, r3, #24
 800834a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008352:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008354:	429a      	cmp	r2, r3
 8008356:	d001      	beq.n	800835c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e000      	b.n	800835e <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3730      	adds	r7, #48	; 0x30
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	58024400 	.word	0x58024400

0800836c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d101      	bne.n	8008380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e19c      	b.n	80086ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008380:	4b8a      	ldr	r3, [pc, #552]	; (80085ac <HAL_RCC_ClockConfig+0x240>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 030f 	and.w	r3, r3, #15
 8008388:	683a      	ldr	r2, [r7, #0]
 800838a:	429a      	cmp	r2, r3
 800838c:	d910      	bls.n	80083b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800838e:	4b87      	ldr	r3, [pc, #540]	; (80085ac <HAL_RCC_ClockConfig+0x240>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f023 020f 	bic.w	r2, r3, #15
 8008396:	4985      	ldr	r1, [pc, #532]	; (80085ac <HAL_RCC_ClockConfig+0x240>)
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	4313      	orrs	r3, r2
 800839c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800839e:	4b83      	ldr	r3, [pc, #524]	; (80085ac <HAL_RCC_ClockConfig+0x240>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 030f 	and.w	r3, r3, #15
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d001      	beq.n	80083b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e184      	b.n	80086ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0304 	and.w	r3, r3, #4
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d010      	beq.n	80083de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	691a      	ldr	r2, [r3, #16]
 80083c0:	4b7b      	ldr	r3, [pc, #492]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d908      	bls.n	80083de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083cc:	4b78      	ldr	r3, [pc, #480]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	4975      	ldr	r1, [pc, #468]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 80083da:	4313      	orrs	r3, r2
 80083dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 0308 	and.w	r3, r3, #8
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d010      	beq.n	800840c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	695a      	ldr	r2, [r3, #20]
 80083ee:	4b70      	ldr	r3, [pc, #448]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d908      	bls.n	800840c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80083fa:	4b6d      	ldr	r3, [pc, #436]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 80083fc:	69db      	ldr	r3, [r3, #28]
 80083fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	695b      	ldr	r3, [r3, #20]
 8008406:	496a      	ldr	r1, [pc, #424]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 8008408:	4313      	orrs	r3, r2
 800840a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0310 	and.w	r3, r3, #16
 8008414:	2b00      	cmp	r3, #0
 8008416:	d010      	beq.n	800843a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	699a      	ldr	r2, [r3, #24]
 800841c:	4b64      	ldr	r3, [pc, #400]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 800841e:	69db      	ldr	r3, [r3, #28]
 8008420:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008424:	429a      	cmp	r2, r3
 8008426:	d908      	bls.n	800843a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008428:	4b61      	ldr	r3, [pc, #388]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 800842a:	69db      	ldr	r3, [r3, #28]
 800842c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	699b      	ldr	r3, [r3, #24]
 8008434:	495e      	ldr	r1, [pc, #376]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 8008436:	4313      	orrs	r3, r2
 8008438:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 0320 	and.w	r3, r3, #32
 8008442:	2b00      	cmp	r3, #0
 8008444:	d010      	beq.n	8008468 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	69da      	ldr	r2, [r3, #28]
 800844a:	4b59      	ldr	r3, [pc, #356]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008452:	429a      	cmp	r2, r3
 8008454:	d908      	bls.n	8008468 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008456:	4b56      	ldr	r3, [pc, #344]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	4953      	ldr	r1, [pc, #332]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 8008464:	4313      	orrs	r3, r2
 8008466:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 0302 	and.w	r3, r3, #2
 8008470:	2b00      	cmp	r3, #0
 8008472:	d010      	beq.n	8008496 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68da      	ldr	r2, [r3, #12]
 8008478:	4b4d      	ldr	r3, [pc, #308]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	f003 030f 	and.w	r3, r3, #15
 8008480:	429a      	cmp	r2, r3
 8008482:	d908      	bls.n	8008496 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008484:	4b4a      	ldr	r3, [pc, #296]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	f023 020f 	bic.w	r2, r3, #15
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	4947      	ldr	r1, [pc, #284]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 8008492:	4313      	orrs	r3, r2
 8008494:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d055      	beq.n	800854e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80084a2:	4b43      	ldr	r3, [pc, #268]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	4940      	ldr	r1, [pc, #256]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 80084b0:	4313      	orrs	r3, r2
 80084b2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d107      	bne.n	80084cc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084bc:	4b3c      	ldr	r3, [pc, #240]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d121      	bne.n	800850c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e0f6      	b.n	80086ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	2b03      	cmp	r3, #3
 80084d2:	d107      	bne.n	80084e4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084d4:	4b36      	ldr	r3, [pc, #216]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d115      	bne.n	800850c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e0ea      	b.n	80086ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d107      	bne.n	80084fc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084ec:	4b30      	ldr	r3, [pc, #192]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d109      	bne.n	800850c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e0de      	b.n	80086ba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084fc:	4b2c      	ldr	r3, [pc, #176]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 0304 	and.w	r3, r3, #4
 8008504:	2b00      	cmp	r3, #0
 8008506:	d101      	bne.n	800850c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	e0d6      	b.n	80086ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800850c:	4b28      	ldr	r3, [pc, #160]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	f023 0207 	bic.w	r2, r3, #7
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	4925      	ldr	r1, [pc, #148]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 800851a:	4313      	orrs	r3, r2
 800851c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800851e:	f7fc fa25 	bl	800496c <HAL_GetTick>
 8008522:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008524:	e00a      	b.n	800853c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008526:	f7fc fa21 	bl	800496c <HAL_GetTick>
 800852a:	4602      	mov	r2, r0
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	1ad3      	subs	r3, r2, r3
 8008530:	f241 3288 	movw	r2, #5000	; 0x1388
 8008534:	4293      	cmp	r3, r2
 8008536:	d901      	bls.n	800853c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008538:	2303      	movs	r3, #3
 800853a:	e0be      	b.n	80086ba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800853c:	4b1c      	ldr	r3, [pc, #112]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	00db      	lsls	r3, r3, #3
 800854a:	429a      	cmp	r2, r3
 800854c:	d1eb      	bne.n	8008526 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 0302 	and.w	r3, r3, #2
 8008556:	2b00      	cmp	r3, #0
 8008558:	d010      	beq.n	800857c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68da      	ldr	r2, [r3, #12]
 800855e:	4b14      	ldr	r3, [pc, #80]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	f003 030f 	and.w	r3, r3, #15
 8008566:	429a      	cmp	r2, r3
 8008568:	d208      	bcs.n	800857c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800856a:	4b11      	ldr	r3, [pc, #68]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	f023 020f 	bic.w	r2, r3, #15
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	490e      	ldr	r1, [pc, #56]	; (80085b0 <HAL_RCC_ClockConfig+0x244>)
 8008578:	4313      	orrs	r3, r2
 800857a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800857c:	4b0b      	ldr	r3, [pc, #44]	; (80085ac <HAL_RCC_ClockConfig+0x240>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 030f 	and.w	r3, r3, #15
 8008584:	683a      	ldr	r2, [r7, #0]
 8008586:	429a      	cmp	r2, r3
 8008588:	d214      	bcs.n	80085b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800858a:	4b08      	ldr	r3, [pc, #32]	; (80085ac <HAL_RCC_ClockConfig+0x240>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f023 020f 	bic.w	r2, r3, #15
 8008592:	4906      	ldr	r1, [pc, #24]	; (80085ac <HAL_RCC_ClockConfig+0x240>)
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	4313      	orrs	r3, r2
 8008598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800859a:	4b04      	ldr	r3, [pc, #16]	; (80085ac <HAL_RCC_ClockConfig+0x240>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 030f 	and.w	r3, r3, #15
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d005      	beq.n	80085b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e086      	b.n	80086ba <HAL_RCC_ClockConfig+0x34e>
 80085ac:	52002000 	.word	0x52002000
 80085b0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0304 	and.w	r3, r3, #4
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d010      	beq.n	80085e2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	691a      	ldr	r2, [r3, #16]
 80085c4:	4b3f      	ldr	r3, [pc, #252]	; (80086c4 <HAL_RCC_ClockConfig+0x358>)
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d208      	bcs.n	80085e2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085d0:	4b3c      	ldr	r3, [pc, #240]	; (80086c4 <HAL_RCC_ClockConfig+0x358>)
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	4939      	ldr	r1, [pc, #228]	; (80086c4 <HAL_RCC_ClockConfig+0x358>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0308 	and.w	r3, r3, #8
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d010      	beq.n	8008610 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	695a      	ldr	r2, [r3, #20]
 80085f2:	4b34      	ldr	r3, [pc, #208]	; (80086c4 <HAL_RCC_ClockConfig+0x358>)
 80085f4:	69db      	ldr	r3, [r3, #28]
 80085f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d208      	bcs.n	8008610 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80085fe:	4b31      	ldr	r3, [pc, #196]	; (80086c4 <HAL_RCC_ClockConfig+0x358>)
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	695b      	ldr	r3, [r3, #20]
 800860a:	492e      	ldr	r1, [pc, #184]	; (80086c4 <HAL_RCC_ClockConfig+0x358>)
 800860c:	4313      	orrs	r3, r2
 800860e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0310 	and.w	r3, r3, #16
 8008618:	2b00      	cmp	r3, #0
 800861a:	d010      	beq.n	800863e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	699a      	ldr	r2, [r3, #24]
 8008620:	4b28      	ldr	r3, [pc, #160]	; (80086c4 <HAL_RCC_ClockConfig+0x358>)
 8008622:	69db      	ldr	r3, [r3, #28]
 8008624:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008628:	429a      	cmp	r2, r3
 800862a:	d208      	bcs.n	800863e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800862c:	4b25      	ldr	r3, [pc, #148]	; (80086c4 <HAL_RCC_ClockConfig+0x358>)
 800862e:	69db      	ldr	r3, [r3, #28]
 8008630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	4922      	ldr	r1, [pc, #136]	; (80086c4 <HAL_RCC_ClockConfig+0x358>)
 800863a:	4313      	orrs	r3, r2
 800863c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 0320 	and.w	r3, r3, #32
 8008646:	2b00      	cmp	r3, #0
 8008648:	d010      	beq.n	800866c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	69da      	ldr	r2, [r3, #28]
 800864e:	4b1d      	ldr	r3, [pc, #116]	; (80086c4 <HAL_RCC_ClockConfig+0x358>)
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008656:	429a      	cmp	r2, r3
 8008658:	d208      	bcs.n	800866c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800865a:	4b1a      	ldr	r3, [pc, #104]	; (80086c4 <HAL_RCC_ClockConfig+0x358>)
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	69db      	ldr	r3, [r3, #28]
 8008666:	4917      	ldr	r1, [pc, #92]	; (80086c4 <HAL_RCC_ClockConfig+0x358>)
 8008668:	4313      	orrs	r3, r2
 800866a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800866c:	f000 f834 	bl	80086d8 <HAL_RCC_GetSysClockFreq>
 8008670:	4602      	mov	r2, r0
 8008672:	4b14      	ldr	r3, [pc, #80]	; (80086c4 <HAL_RCC_ClockConfig+0x358>)
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	0a1b      	lsrs	r3, r3, #8
 8008678:	f003 030f 	and.w	r3, r3, #15
 800867c:	4912      	ldr	r1, [pc, #72]	; (80086c8 <HAL_RCC_ClockConfig+0x35c>)
 800867e:	5ccb      	ldrb	r3, [r1, r3]
 8008680:	f003 031f 	and.w	r3, r3, #31
 8008684:	fa22 f303 	lsr.w	r3, r2, r3
 8008688:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800868a:	4b0e      	ldr	r3, [pc, #56]	; (80086c4 <HAL_RCC_ClockConfig+0x358>)
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	f003 030f 	and.w	r3, r3, #15
 8008692:	4a0d      	ldr	r2, [pc, #52]	; (80086c8 <HAL_RCC_ClockConfig+0x35c>)
 8008694:	5cd3      	ldrb	r3, [r2, r3]
 8008696:	f003 031f 	and.w	r3, r3, #31
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	fa22 f303 	lsr.w	r3, r2, r3
 80086a0:	4a0a      	ldr	r2, [pc, #40]	; (80086cc <HAL_RCC_ClockConfig+0x360>)
 80086a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80086a4:	4a0a      	ldr	r2, [pc, #40]	; (80086d0 <HAL_RCC_ClockConfig+0x364>)
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80086aa:	4b0a      	ldr	r3, [pc, #40]	; (80086d4 <HAL_RCC_ClockConfig+0x368>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fc f912 	bl	80048d8 <HAL_InitTick>
 80086b4:	4603      	mov	r3, r0
 80086b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80086b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3718      	adds	r7, #24
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	58024400 	.word	0x58024400
 80086c8:	0800df90 	.word	0x0800df90
 80086cc:	24000008 	.word	0x24000008
 80086d0:	24000004 	.word	0x24000004
 80086d4:	2400000c 	.word	0x2400000c

080086d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086d8:	b480      	push	{r7}
 80086da:	b089      	sub	sp, #36	; 0x24
 80086dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086de:	4bb3      	ldr	r3, [pc, #716]	; (80089ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086e6:	2b18      	cmp	r3, #24
 80086e8:	f200 8155 	bhi.w	8008996 <HAL_RCC_GetSysClockFreq+0x2be>
 80086ec:	a201      	add	r2, pc, #4	; (adr r2, 80086f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80086ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f2:	bf00      	nop
 80086f4:	08008759 	.word	0x08008759
 80086f8:	08008997 	.word	0x08008997
 80086fc:	08008997 	.word	0x08008997
 8008700:	08008997 	.word	0x08008997
 8008704:	08008997 	.word	0x08008997
 8008708:	08008997 	.word	0x08008997
 800870c:	08008997 	.word	0x08008997
 8008710:	08008997 	.word	0x08008997
 8008714:	0800877f 	.word	0x0800877f
 8008718:	08008997 	.word	0x08008997
 800871c:	08008997 	.word	0x08008997
 8008720:	08008997 	.word	0x08008997
 8008724:	08008997 	.word	0x08008997
 8008728:	08008997 	.word	0x08008997
 800872c:	08008997 	.word	0x08008997
 8008730:	08008997 	.word	0x08008997
 8008734:	08008785 	.word	0x08008785
 8008738:	08008997 	.word	0x08008997
 800873c:	08008997 	.word	0x08008997
 8008740:	08008997 	.word	0x08008997
 8008744:	08008997 	.word	0x08008997
 8008748:	08008997 	.word	0x08008997
 800874c:	08008997 	.word	0x08008997
 8008750:	08008997 	.word	0x08008997
 8008754:	0800878b 	.word	0x0800878b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008758:	4b94      	ldr	r3, [pc, #592]	; (80089ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0320 	and.w	r3, r3, #32
 8008760:	2b00      	cmp	r3, #0
 8008762:	d009      	beq.n	8008778 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008764:	4b91      	ldr	r3, [pc, #580]	; (80089ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	08db      	lsrs	r3, r3, #3
 800876a:	f003 0303 	and.w	r3, r3, #3
 800876e:	4a90      	ldr	r2, [pc, #576]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008770:	fa22 f303 	lsr.w	r3, r2, r3
 8008774:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008776:	e111      	b.n	800899c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008778:	4b8d      	ldr	r3, [pc, #564]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800877a:	61bb      	str	r3, [r7, #24]
    break;
 800877c:	e10e      	b.n	800899c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800877e:	4b8d      	ldr	r3, [pc, #564]	; (80089b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008780:	61bb      	str	r3, [r7, #24]
    break;
 8008782:	e10b      	b.n	800899c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008784:	4b8c      	ldr	r3, [pc, #560]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008786:	61bb      	str	r3, [r7, #24]
    break;
 8008788:	e108      	b.n	800899c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800878a:	4b88      	ldr	r3, [pc, #544]	; (80089ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800878c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878e:	f003 0303 	and.w	r3, r3, #3
 8008792:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008794:	4b85      	ldr	r3, [pc, #532]	; (80089ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008798:	091b      	lsrs	r3, r3, #4
 800879a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800879e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80087a0:	4b82      	ldr	r3, [pc, #520]	; (80089ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80087aa:	4b80      	ldr	r3, [pc, #512]	; (80089ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ae:	08db      	lsrs	r3, r3, #3
 80087b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	fb02 f303 	mul.w	r3, r2, r3
 80087ba:	ee07 3a90 	vmov	s15, r3
 80087be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f000 80e1 	beq.w	8008990 <HAL_RCC_GetSysClockFreq+0x2b8>
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	f000 8083 	beq.w	80088dc <HAL_RCC_GetSysClockFreq+0x204>
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2b02      	cmp	r3, #2
 80087da:	f200 80a1 	bhi.w	8008920 <HAL_RCC_GetSysClockFreq+0x248>
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d003      	beq.n	80087ec <HAL_RCC_GetSysClockFreq+0x114>
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d056      	beq.n	8008898 <HAL_RCC_GetSysClockFreq+0x1c0>
 80087ea:	e099      	b.n	8008920 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087ec:	4b6f      	ldr	r3, [pc, #444]	; (80089ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 0320 	and.w	r3, r3, #32
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d02d      	beq.n	8008854 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087f8:	4b6c      	ldr	r3, [pc, #432]	; (80089ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	08db      	lsrs	r3, r3, #3
 80087fe:	f003 0303 	and.w	r3, r3, #3
 8008802:	4a6b      	ldr	r2, [pc, #428]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008804:	fa22 f303 	lsr.w	r3, r2, r3
 8008808:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	ee07 3a90 	vmov	s15, r3
 8008810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	ee07 3a90 	vmov	s15, r3
 800881a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800881e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008822:	4b62      	ldr	r3, [pc, #392]	; (80089ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800882a:	ee07 3a90 	vmov	s15, r3
 800882e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008832:	ed97 6a02 	vldr	s12, [r7, #8]
 8008836:	eddf 5a61 	vldr	s11, [pc, #388]	; 80089bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800883a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800883e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800884a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800884e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008852:	e087      	b.n	8008964 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	ee07 3a90 	vmov	s15, r3
 800885a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80089c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008866:	4b51      	ldr	r3, [pc, #324]	; (80089ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800886e:	ee07 3a90 	vmov	s15, r3
 8008872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008876:	ed97 6a02 	vldr	s12, [r7, #8]
 800887a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80089bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800887e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800888a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800888e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008896:	e065      	b.n	8008964 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	ee07 3a90 	vmov	s15, r3
 800889e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80089c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80088a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088aa:	4b40      	ldr	r3, [pc, #256]	; (80089ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b2:	ee07 3a90 	vmov	s15, r3
 80088b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80088be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80089bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80088c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088da:	e043      	b.n	8008964 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	ee07 3a90 	vmov	s15, r3
 80088e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80089c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80088ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ee:	4b2f      	ldr	r3, [pc, #188]	; (80089ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f6:	ee07 3a90 	vmov	s15, r3
 80088fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008902:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80089bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800890a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800890e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800891a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800891e:	e021      	b.n	8008964 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	ee07 3a90 	vmov	s15, r3
 8008926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800892a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80089c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800892e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008932:	4b1e      	ldr	r3, [pc, #120]	; (80089ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800893a:	ee07 3a90 	vmov	s15, r3
 800893e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008942:	ed97 6a02 	vldr	s12, [r7, #8]
 8008946:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80089bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800894a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800894e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800895a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800895e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008962:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008964:	4b11      	ldr	r3, [pc, #68]	; (80089ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008968:	0a5b      	lsrs	r3, r3, #9
 800896a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800896e:	3301      	adds	r3, #1
 8008970:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	ee07 3a90 	vmov	s15, r3
 8008978:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800897c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008988:	ee17 3a90 	vmov	r3, s15
 800898c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800898e:	e005      	b.n	800899c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008990:	2300      	movs	r3, #0
 8008992:	61bb      	str	r3, [r7, #24]
    break;
 8008994:	e002      	b.n	800899c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008996:	4b07      	ldr	r3, [pc, #28]	; (80089b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008998:	61bb      	str	r3, [r7, #24]
    break;
 800899a:	bf00      	nop
  }

  return sysclockfreq;
 800899c:	69bb      	ldr	r3, [r7, #24]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3724      	adds	r7, #36	; 0x24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	58024400 	.word	0x58024400
 80089b0:	03d09000 	.word	0x03d09000
 80089b4:	003d0900 	.word	0x003d0900
 80089b8:	007a1200 	.word	0x007a1200
 80089bc:	46000000 	.word	0x46000000
 80089c0:	4c742400 	.word	0x4c742400
 80089c4:	4a742400 	.word	0x4a742400
 80089c8:	4af42400 	.word	0x4af42400

080089cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089d2:	f7ff fe81 	bl	80086d8 <HAL_RCC_GetSysClockFreq>
 80089d6:	4602      	mov	r2, r0
 80089d8:	4b10      	ldr	r3, [pc, #64]	; (8008a1c <HAL_RCC_GetHCLKFreq+0x50>)
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	0a1b      	lsrs	r3, r3, #8
 80089de:	f003 030f 	and.w	r3, r3, #15
 80089e2:	490f      	ldr	r1, [pc, #60]	; (8008a20 <HAL_RCC_GetHCLKFreq+0x54>)
 80089e4:	5ccb      	ldrb	r3, [r1, r3]
 80089e6:	f003 031f 	and.w	r3, r3, #31
 80089ea:	fa22 f303 	lsr.w	r3, r2, r3
 80089ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089f0:	4b0a      	ldr	r3, [pc, #40]	; (8008a1c <HAL_RCC_GetHCLKFreq+0x50>)
 80089f2:	699b      	ldr	r3, [r3, #24]
 80089f4:	f003 030f 	and.w	r3, r3, #15
 80089f8:	4a09      	ldr	r2, [pc, #36]	; (8008a20 <HAL_RCC_GetHCLKFreq+0x54>)
 80089fa:	5cd3      	ldrb	r3, [r2, r3]
 80089fc:	f003 031f 	and.w	r3, r3, #31
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	fa22 f303 	lsr.w	r3, r2, r3
 8008a06:	4a07      	ldr	r2, [pc, #28]	; (8008a24 <HAL_RCC_GetHCLKFreq+0x58>)
 8008a08:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a0a:	4a07      	ldr	r2, [pc, #28]	; (8008a28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008a10:	4b04      	ldr	r3, [pc, #16]	; (8008a24 <HAL_RCC_GetHCLKFreq+0x58>)
 8008a12:	681b      	ldr	r3, [r3, #0]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	58024400 	.word	0x58024400
 8008a20:	0800df90 	.word	0x0800df90
 8008a24:	24000008 	.word	0x24000008
 8008a28:	24000004 	.word	0x24000004

08008a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008a30:	f7ff ffcc 	bl	80089cc <HAL_RCC_GetHCLKFreq>
 8008a34:	4602      	mov	r2, r0
 8008a36:	4b06      	ldr	r3, [pc, #24]	; (8008a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a38:	69db      	ldr	r3, [r3, #28]
 8008a3a:	091b      	lsrs	r3, r3, #4
 8008a3c:	f003 0307 	and.w	r3, r3, #7
 8008a40:	4904      	ldr	r1, [pc, #16]	; (8008a54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a42:	5ccb      	ldrb	r3, [r1, r3]
 8008a44:	f003 031f 	and.w	r3, r3, #31
 8008a48:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	58024400 	.word	0x58024400
 8008a54:	0800df90 	.word	0x0800df90

08008a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008a5c:	f7ff ffb6 	bl	80089cc <HAL_RCC_GetHCLKFreq>
 8008a60:	4602      	mov	r2, r0
 8008a62:	4b06      	ldr	r3, [pc, #24]	; (8008a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a64:	69db      	ldr	r3, [r3, #28]
 8008a66:	0a1b      	lsrs	r3, r3, #8
 8008a68:	f003 0307 	and.w	r3, r3, #7
 8008a6c:	4904      	ldr	r1, [pc, #16]	; (8008a80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a6e:	5ccb      	ldrb	r3, [r1, r3]
 8008a70:	f003 031f 	and.w	r3, r3, #31
 8008a74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	58024400 	.word	0x58024400
 8008a80:	0800df90 	.word	0x0800df90

08008a84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008a90:	2300      	movs	r3, #0
 8008a92:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d03f      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aa4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008aa8:	d02a      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008aaa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008aae:	d824      	bhi.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008ab0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ab4:	d018      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008ab6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008aba:	d81e      	bhi.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d003      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008ac0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ac4:	d007      	beq.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008ac6:	e018      	b.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ac8:	4ba4      	ldr	r3, [pc, #656]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	4aa3      	ldr	r2, [pc, #652]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ad2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008ad4:	e015      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	3304      	adds	r3, #4
 8008ada:	2102      	movs	r1, #2
 8008adc:	4618      	mov	r0, r3
 8008ade:	f001 f989 	bl	8009df4 <RCCEx_PLL2_Config>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008ae6:	e00c      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	3324      	adds	r3, #36	; 0x24
 8008aec:	2102      	movs	r1, #2
 8008aee:	4618      	mov	r0, r3
 8008af0:	f001 fa32 	bl	8009f58 <RCCEx_PLL3_Config>
 8008af4:	4603      	mov	r3, r0
 8008af6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008af8:	e003      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	75fb      	strb	r3, [r7, #23]
      break;
 8008afe:	e000      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008b00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b02:	7dfb      	ldrb	r3, [r7, #23]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d109      	bne.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008b08:	4b94      	ldr	r3, [pc, #592]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b14:	4991      	ldr	r1, [pc, #580]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008b16:	4313      	orrs	r3, r2
 8008b18:	650b      	str	r3, [r1, #80]	; 0x50
 8008b1a:	e001      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b1c:	7dfb      	ldrb	r3, [r7, #23]
 8008b1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d03d      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b30:	2b04      	cmp	r3, #4
 8008b32:	d826      	bhi.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008b34:	a201      	add	r2, pc, #4	; (adr r2, 8008b3c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3a:	bf00      	nop
 8008b3c:	08008b51 	.word	0x08008b51
 8008b40:	08008b5f 	.word	0x08008b5f
 8008b44:	08008b71 	.word	0x08008b71
 8008b48:	08008b89 	.word	0x08008b89
 8008b4c:	08008b89 	.word	0x08008b89
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b50:	4b82      	ldr	r3, [pc, #520]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b54:	4a81      	ldr	r2, [pc, #516]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b5c:	e015      	b.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	3304      	adds	r3, #4
 8008b62:	2100      	movs	r1, #0
 8008b64:	4618      	mov	r0, r3
 8008b66:	f001 f945 	bl	8009df4 <RCCEx_PLL2_Config>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b6e:	e00c      	b.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	3324      	adds	r3, #36	; 0x24
 8008b74:	2100      	movs	r1, #0
 8008b76:	4618      	mov	r0, r3
 8008b78:	f001 f9ee 	bl	8009f58 <RCCEx_PLL3_Config>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b80:	e003      	b.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	75fb      	strb	r3, [r7, #23]
      break;
 8008b86:	e000      	b.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008b88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b8a:	7dfb      	ldrb	r3, [r7, #23]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d109      	bne.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b90:	4b72      	ldr	r3, [pc, #456]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b94:	f023 0207 	bic.w	r2, r3, #7
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b9c:	496f      	ldr	r1, [pc, #444]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	650b      	str	r3, [r1, #80]	; 0x50
 8008ba2:	e001      	b.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
 8008ba6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d051      	beq.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008bba:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008bbe:	d036      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008bc0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008bc4:	d830      	bhi.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008bc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bca:	d032      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8008bcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bd0:	d82a      	bhi.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008bd2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008bd6:	d02e      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008bd8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008bdc:	d824      	bhi.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008be2:	d018      	beq.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008be4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008be8:	d81e      	bhi.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d003      	beq.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8008bee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bf2:	d007      	beq.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008bf4:	e018      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bf6:	4b59      	ldr	r3, [pc, #356]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfa:	4a58      	ldr	r2, [pc, #352]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c02:	e019      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	3304      	adds	r3, #4
 8008c08:	2100      	movs	r1, #0
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f001 f8f2 	bl	8009df4 <RCCEx_PLL2_Config>
 8008c10:	4603      	mov	r3, r0
 8008c12:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008c14:	e010      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	3324      	adds	r3, #36	; 0x24
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f001 f99b 	bl	8009f58 <RCCEx_PLL3_Config>
 8008c22:	4603      	mov	r3, r0
 8008c24:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c26:	e007      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c2c:	e004      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008c2e:	bf00      	nop
 8008c30:	e002      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008c32:	bf00      	nop
 8008c34:	e000      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c38:	7dfb      	ldrb	r3, [r7, #23]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10a      	bne.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008c3e:	4b47      	ldr	r3, [pc, #284]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c42:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008c4c:	4943      	ldr	r1, [pc, #268]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	658b      	str	r3, [r1, #88]	; 0x58
 8008c52:	e001      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d051      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c6a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008c6e:	d036      	beq.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008c70:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008c74:	d830      	bhi.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008c76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c7a:	d032      	beq.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8008c7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c80:	d82a      	bhi.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008c82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c86:	d02e      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008c88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c8c:	d824      	bhi.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008c8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c92:	d018      	beq.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008c94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c98:	d81e      	bhi.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d003      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008c9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ca2:	d007      	beq.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008ca4:	e018      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ca6:	4b2d      	ldr	r3, [pc, #180]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008caa:	4a2c      	ldr	r2, [pc, #176]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cb2:	e019      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	2100      	movs	r1, #0
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f001 f89a 	bl	8009df4 <RCCEx_PLL2_Config>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008cc4:	e010      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	3324      	adds	r3, #36	; 0x24
 8008cca:	2100      	movs	r1, #0
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f001 f943 	bl	8009f58 <RCCEx_PLL3_Config>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cd6:	e007      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	75fb      	strb	r3, [r7, #23]
      break;
 8008cdc:	e004      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008cde:	bf00      	nop
 8008ce0:	e002      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008ce2:	bf00      	nop
 8008ce4:	e000      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008ce6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10a      	bne.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008cee:	4b1b      	ldr	r3, [pc, #108]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cf2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008cfc:	4917      	ldr	r1, [pc, #92]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	658b      	str	r3, [r1, #88]	; 0x58
 8008d02:	e001      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d04:	7dfb      	ldrb	r3, [r7, #23]
 8008d06:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d035      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d18:	2b30      	cmp	r3, #48	; 0x30
 8008d1a:	d01c      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008d1c:	2b30      	cmp	r3, #48	; 0x30
 8008d1e:	d817      	bhi.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008d20:	2b20      	cmp	r3, #32
 8008d22:	d00c      	beq.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008d24:	2b20      	cmp	r3, #32
 8008d26:	d813      	bhi.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d019      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8008d2c:	2b10      	cmp	r3, #16
 8008d2e:	d10f      	bne.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d30:	4b0a      	ldr	r3, [pc, #40]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d34:	4a09      	ldr	r2, [pc, #36]	; (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008d3c:	e011      	b.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	3304      	adds	r3, #4
 8008d42:	2102      	movs	r1, #2
 8008d44:	4618      	mov	r0, r3
 8008d46:	f001 f855 	bl	8009df4 <RCCEx_PLL2_Config>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008d4e:	e008      	b.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	75fb      	strb	r3, [r7, #23]
      break;
 8008d54:	e005      	b.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8008d56:	bf00      	nop
 8008d58:	e003      	b.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008d5a:	bf00      	nop
 8008d5c:	58024400 	.word	0x58024400
      break;
 8008d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d62:	7dfb      	ldrb	r3, [r7, #23]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d109      	bne.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008d68:	4ba3      	ldr	r3, [pc, #652]	; (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d74:	49a0      	ldr	r1, [pc, #640]	; (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008d76:	4313      	orrs	r3, r2
 8008d78:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008d7a:	e001      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d7c:	7dfb      	ldrb	r3, [r7, #23]
 8008d7e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d047      	beq.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d94:	d030      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008d96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d9a:	d82a      	bhi.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008d9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008da0:	d02c      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008da2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008da6:	d824      	bhi.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dac:	d018      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008db2:	d81e      	bhi.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d003      	beq.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dbc:	d007      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008dbe:	e018      	b.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dc0:	4b8d      	ldr	r3, [pc, #564]	; (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc4:	4a8c      	ldr	r2, [pc, #560]	; (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008dcc:	e017      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f001 f80d 	bl	8009df4 <RCCEx_PLL2_Config>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008dde:	e00e      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	3324      	adds	r3, #36	; 0x24
 8008de4:	2100      	movs	r1, #0
 8008de6:	4618      	mov	r0, r3
 8008de8:	f001 f8b6 	bl	8009f58 <RCCEx_PLL3_Config>
 8008dec:	4603      	mov	r3, r0
 8008dee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008df0:	e005      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	75fb      	strb	r3, [r7, #23]
      break;
 8008df6:	e002      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008df8:	bf00      	nop
 8008dfa:	e000      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008dfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dfe:	7dfb      	ldrb	r3, [r7, #23]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d109      	bne.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008e04:	4b7c      	ldr	r3, [pc, #496]	; (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e08:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e10:	4979      	ldr	r1, [pc, #484]	; (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008e12:	4313      	orrs	r3, r2
 8008e14:	650b      	str	r3, [r1, #80]	; 0x50
 8008e16:	e001      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e18:	7dfb      	ldrb	r3, [r7, #23]
 8008e1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d049      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e30:	d02e      	beq.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8008e32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e36:	d828      	bhi.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008e38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e3c:	d02a      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008e3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e42:	d822      	bhi.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008e44:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e48:	d026      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008e4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e4e:	d81c      	bhi.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008e50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e54:	d010      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008e56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e5a:	d816      	bhi.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d01d      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e64:	d111      	bne.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	3304      	adds	r3, #4
 8008e6a:	2101      	movs	r1, #1
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f000 ffc1 	bl	8009df4 <RCCEx_PLL2_Config>
 8008e72:	4603      	mov	r3, r0
 8008e74:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008e76:	e012      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	3324      	adds	r3, #36	; 0x24
 8008e7c:	2101      	movs	r1, #1
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f001 f86a 	bl	8009f58 <RCCEx_PLL3_Config>
 8008e84:	4603      	mov	r3, r0
 8008e86:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008e88:	e009      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8008e8e:	e006      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008e90:	bf00      	nop
 8008e92:	e004      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008e94:	bf00      	nop
 8008e96:	e002      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008e98:	bf00      	nop
 8008e9a:	e000      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008e9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d109      	bne.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008ea4:	4b54      	ldr	r3, [pc, #336]	; (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ea8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eb0:	4951      	ldr	r1, [pc, #324]	; (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	650b      	str	r3, [r1, #80]	; 0x50
 8008eb6:	e001      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb8:	7dfb      	ldrb	r3, [r7, #23]
 8008eba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d04b      	beq.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ed2:	d02e      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8008ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ed8:	d828      	bhi.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ede:	d02a      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8008ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ee4:	d822      	bhi.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008ee6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008eea:	d026      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8008eec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ef0:	d81c      	bhi.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ef6:	d010      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8008ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008efc:	d816      	bhi.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d01d      	beq.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8008f02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f06:	d111      	bne.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	3304      	adds	r3, #4
 8008f0c:	2101      	movs	r1, #1
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f000 ff70 	bl	8009df4 <RCCEx_PLL2_Config>
 8008f14:	4603      	mov	r3, r0
 8008f16:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008f18:	e012      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	3324      	adds	r3, #36	; 0x24
 8008f1e:	2101      	movs	r1, #1
 8008f20:	4618      	mov	r0, r3
 8008f22:	f001 f819 	bl	8009f58 <RCCEx_PLL3_Config>
 8008f26:	4603      	mov	r3, r0
 8008f28:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008f2a:	e009      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f30:	e006      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008f32:	bf00      	nop
 8008f34:	e004      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008f36:	bf00      	nop
 8008f38:	e002      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008f3a:	bf00      	nop
 8008f3c:	e000      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10a      	bne.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008f46:	4b2c      	ldr	r3, [pc, #176]	; (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f4a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f54:	4928      	ldr	r1, [pc, #160]	; (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	658b      	str	r3, [r1, #88]	; 0x58
 8008f5a:	e001      	b.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f5c:	7dfb      	ldrb	r3, [r7, #23]
 8008f5e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d02f      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f74:	d00e      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8008f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f7a:	d814      	bhi.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d015      	beq.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008f80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f84:	d10f      	bne.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f86:	4b1c      	ldr	r3, [pc, #112]	; (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8a:	4a1b      	ldr	r2, [pc, #108]	; (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008f92:	e00c      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	3304      	adds	r3, #4
 8008f98:	2101      	movs	r1, #1
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f000 ff2a 	bl	8009df4 <RCCEx_PLL2_Config>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008fa4:	e003      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	75fb      	strb	r3, [r7, #23]
      break;
 8008faa:	e000      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8008fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fae:	7dfb      	ldrb	r3, [r7, #23]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d109      	bne.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008fb4:	4b10      	ldr	r3, [pc, #64]	; (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fb8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fc0:	490d      	ldr	r1, [pc, #52]	; (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	650b      	str	r3, [r1, #80]	; 0x50
 8008fc6:	e001      	b.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc8:	7dfb      	ldrb	r3, [r7, #23]
 8008fca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d034      	beq.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fdc:	2b03      	cmp	r3, #3
 8008fde:	d81d      	bhi.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8008fe0:	a201      	add	r2, pc, #4	; (adr r2, 8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8008fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe6:	bf00      	nop
 8008fe8:	08009023 	.word	0x08009023
 8008fec:	08008ffd 	.word	0x08008ffd
 8008ff0:	0800900b 	.word	0x0800900b
 8008ff4:	08009023 	.word	0x08009023
 8008ff8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ffc:	4bb1      	ldr	r3, [pc, #708]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009000:	4ab0      	ldr	r2, [pc, #704]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009006:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009008:	e00c      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	3304      	adds	r3, #4
 800900e:	2102      	movs	r1, #2
 8009010:	4618      	mov	r0, r3
 8009012:	f000 feef 	bl	8009df4 <RCCEx_PLL2_Config>
 8009016:	4603      	mov	r3, r0
 8009018:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800901a:	e003      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	75fb      	strb	r3, [r7, #23]
      break;
 8009020:	e000      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8009022:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009024:	7dfb      	ldrb	r3, [r7, #23]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d109      	bne.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800902a:	4ba6      	ldr	r3, [pc, #664]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800902c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800902e:	f023 0203 	bic.w	r2, r3, #3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009036:	49a3      	ldr	r1, [pc, #652]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009038:	4313      	orrs	r3, r2
 800903a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800903c:	e001      	b.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800903e:	7dfb      	ldrb	r3, [r7, #23]
 8009040:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800904a:	2b00      	cmp	r3, #0
 800904c:	f000 8086 	beq.w	800915c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009050:	4b9d      	ldr	r3, [pc, #628]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a9c      	ldr	r2, [pc, #624]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800905a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800905c:	f7fb fc86 	bl	800496c <HAL_GetTick>
 8009060:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009062:	e009      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009064:	f7fb fc82 	bl	800496c <HAL_GetTick>
 8009068:	4602      	mov	r2, r0
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	2b64      	cmp	r3, #100	; 0x64
 8009070:	d902      	bls.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8009072:	2303      	movs	r3, #3
 8009074:	75fb      	strb	r3, [r7, #23]
        break;
 8009076:	e005      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009078:	4b93      	ldr	r3, [pc, #588]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009080:	2b00      	cmp	r3, #0
 8009082:	d0ef      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8009084:	7dfb      	ldrb	r3, [r7, #23]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d166      	bne.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800908a:	4b8e      	ldr	r3, [pc, #568]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800908c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009094:	4053      	eors	r3, r2
 8009096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800909a:	2b00      	cmp	r3, #0
 800909c:	d013      	beq.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800909e:	4b89      	ldr	r3, [pc, #548]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090a6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80090a8:	4b86      	ldr	r3, [pc, #536]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ac:	4a85      	ldr	r2, [pc, #532]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090b2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80090b4:	4b83      	ldr	r3, [pc, #524]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b8:	4a82      	ldr	r2, [pc, #520]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090be:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80090c0:	4a80      	ldr	r2, [pc, #512]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80090cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090d0:	d115      	bne.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d2:	f7fb fc4b 	bl	800496c <HAL_GetTick>
 80090d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090d8:	e00b      	b.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090da:	f7fb fc47 	bl	800496c <HAL_GetTick>
 80090de:	4602      	mov	r2, r0
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	1ad3      	subs	r3, r2, r3
 80090e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d902      	bls.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80090ec:	2303      	movs	r3, #3
 80090ee:	75fb      	strb	r3, [r7, #23]
            break;
 80090f0:	e005      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090f2:	4b74      	ldr	r3, [pc, #464]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f6:	f003 0302 	and.w	r3, r3, #2
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0ed      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80090fe:	7dfb      	ldrb	r3, [r7, #23]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d126      	bne.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800910a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800910e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009112:	d10d      	bne.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8009114:	4b6b      	ldr	r3, [pc, #428]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009122:	0919      	lsrs	r1, r3, #4
 8009124:	4b69      	ldr	r3, [pc, #420]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009126:	400b      	ands	r3, r1
 8009128:	4966      	ldr	r1, [pc, #408]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800912a:	4313      	orrs	r3, r2
 800912c:	610b      	str	r3, [r1, #16]
 800912e:	e005      	b.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009130:	4b64      	ldr	r3, [pc, #400]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	4a63      	ldr	r2, [pc, #396]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009136:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800913a:	6113      	str	r3, [r2, #16]
 800913c:	4b61      	ldr	r3, [pc, #388]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800913e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800914a:	495e      	ldr	r1, [pc, #376]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800914c:	4313      	orrs	r3, r2
 800914e:	670b      	str	r3, [r1, #112]	; 0x70
 8009150:	e004      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009152:	7dfb      	ldrb	r3, [r7, #23]
 8009154:	75bb      	strb	r3, [r7, #22]
 8009156:	e001      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009158:	7dfb      	ldrb	r3, [r7, #23]
 800915a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 0301 	and.w	r3, r3, #1
 8009164:	2b00      	cmp	r3, #0
 8009166:	d07e      	beq.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800916c:	2b28      	cmp	r3, #40	; 0x28
 800916e:	d867      	bhi.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8009170:	a201      	add	r2, pc, #4	; (adr r2, 8009178 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8009172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009176:	bf00      	nop
 8009178:	08009247 	.word	0x08009247
 800917c:	08009241 	.word	0x08009241
 8009180:	08009241 	.word	0x08009241
 8009184:	08009241 	.word	0x08009241
 8009188:	08009241 	.word	0x08009241
 800918c:	08009241 	.word	0x08009241
 8009190:	08009241 	.word	0x08009241
 8009194:	08009241 	.word	0x08009241
 8009198:	0800921d 	.word	0x0800921d
 800919c:	08009241 	.word	0x08009241
 80091a0:	08009241 	.word	0x08009241
 80091a4:	08009241 	.word	0x08009241
 80091a8:	08009241 	.word	0x08009241
 80091ac:	08009241 	.word	0x08009241
 80091b0:	08009241 	.word	0x08009241
 80091b4:	08009241 	.word	0x08009241
 80091b8:	0800922f 	.word	0x0800922f
 80091bc:	08009241 	.word	0x08009241
 80091c0:	08009241 	.word	0x08009241
 80091c4:	08009241 	.word	0x08009241
 80091c8:	08009241 	.word	0x08009241
 80091cc:	08009241 	.word	0x08009241
 80091d0:	08009241 	.word	0x08009241
 80091d4:	08009241 	.word	0x08009241
 80091d8:	08009247 	.word	0x08009247
 80091dc:	08009241 	.word	0x08009241
 80091e0:	08009241 	.word	0x08009241
 80091e4:	08009241 	.word	0x08009241
 80091e8:	08009241 	.word	0x08009241
 80091ec:	08009241 	.word	0x08009241
 80091f0:	08009241 	.word	0x08009241
 80091f4:	08009241 	.word	0x08009241
 80091f8:	08009247 	.word	0x08009247
 80091fc:	08009241 	.word	0x08009241
 8009200:	08009241 	.word	0x08009241
 8009204:	08009241 	.word	0x08009241
 8009208:	08009241 	.word	0x08009241
 800920c:	08009241 	.word	0x08009241
 8009210:	08009241 	.word	0x08009241
 8009214:	08009241 	.word	0x08009241
 8009218:	08009247 	.word	0x08009247
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	3304      	adds	r3, #4
 8009220:	2101      	movs	r1, #1
 8009222:	4618      	mov	r0, r3
 8009224:	f000 fde6 	bl	8009df4 <RCCEx_PLL2_Config>
 8009228:	4603      	mov	r3, r0
 800922a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800922c:	e00c      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	3324      	adds	r3, #36	; 0x24
 8009232:	2101      	movs	r1, #1
 8009234:	4618      	mov	r0, r3
 8009236:	f000 fe8f 	bl	8009f58 <RCCEx_PLL3_Config>
 800923a:	4603      	mov	r3, r0
 800923c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800923e:	e003      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	75fb      	strb	r3, [r7, #23]
      break;
 8009244:	e000      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8009246:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009248:	7dfb      	ldrb	r3, [r7, #23]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d109      	bne.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800924e:	4b1d      	ldr	r3, [pc, #116]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009252:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800925a:	491a      	ldr	r1, [pc, #104]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800925c:	4313      	orrs	r3, r2
 800925e:	654b      	str	r3, [r1, #84]	; 0x54
 8009260:	e001      	b.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009262:	7dfb      	ldrb	r3, [r7, #23]
 8009264:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 0302 	and.w	r3, r3, #2
 800926e:	2b00      	cmp	r3, #0
 8009270:	d03e      	beq.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009276:	2b05      	cmp	r3, #5
 8009278:	d820      	bhi.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x838>
 800927a:	a201      	add	r2, pc, #4	; (adr r2, 8009280 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800927c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009280:	080092d1 	.word	0x080092d1
 8009284:	08009299 	.word	0x08009299
 8009288:	080092ab 	.word	0x080092ab
 800928c:	080092d1 	.word	0x080092d1
 8009290:	080092d1 	.word	0x080092d1
 8009294:	080092d1 	.word	0x080092d1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	3304      	adds	r3, #4
 800929c:	2101      	movs	r1, #1
 800929e:	4618      	mov	r0, r3
 80092a0:	f000 fda8 	bl	8009df4 <RCCEx_PLL2_Config>
 80092a4:	4603      	mov	r3, r0
 80092a6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80092a8:	e013      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	3324      	adds	r3, #36	; 0x24
 80092ae:	2101      	movs	r1, #1
 80092b0:	4618      	mov	r0, r3
 80092b2:	f000 fe51 	bl	8009f58 <RCCEx_PLL3_Config>
 80092b6:	4603      	mov	r3, r0
 80092b8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80092ba:	e00a      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	75fb      	strb	r3, [r7, #23]
      break;
 80092c0:	e007      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80092c2:	bf00      	nop
 80092c4:	58024400 	.word	0x58024400
 80092c8:	58024800 	.word	0x58024800
 80092cc:	00ffffcf 	.word	0x00ffffcf
      break;
 80092d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092d2:	7dfb      	ldrb	r3, [r7, #23]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d109      	bne.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80092d8:	4b9f      	ldr	r3, [pc, #636]	; (8009558 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80092da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092dc:	f023 0207 	bic.w	r2, r3, #7
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e4:	499c      	ldr	r1, [pc, #624]	; (8009558 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80092e6:	4313      	orrs	r3, r2
 80092e8:	654b      	str	r3, [r1, #84]	; 0x54
 80092ea:	e001      	b.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ec:	7dfb      	ldrb	r3, [r7, #23]
 80092ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0304 	and.w	r3, r3, #4
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d039      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009302:	2b05      	cmp	r3, #5
 8009304:	d820      	bhi.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8009306:	a201      	add	r2, pc, #4	; (adr r2, 800930c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8009308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930c:	0800934f 	.word	0x0800934f
 8009310:	08009325 	.word	0x08009325
 8009314:	08009337 	.word	0x08009337
 8009318:	0800934f 	.word	0x0800934f
 800931c:	0800934f 	.word	0x0800934f
 8009320:	0800934f 	.word	0x0800934f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	3304      	adds	r3, #4
 8009328:	2101      	movs	r1, #1
 800932a:	4618      	mov	r0, r3
 800932c:	f000 fd62 	bl	8009df4 <RCCEx_PLL2_Config>
 8009330:	4603      	mov	r3, r0
 8009332:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009334:	e00c      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	3324      	adds	r3, #36	; 0x24
 800933a:	2101      	movs	r1, #1
 800933c:	4618      	mov	r0, r3
 800933e:	f000 fe0b 	bl	8009f58 <RCCEx_PLL3_Config>
 8009342:	4603      	mov	r3, r0
 8009344:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009346:	e003      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	75fb      	strb	r3, [r7, #23]
      break;
 800934c:	e000      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800934e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009350:	7dfb      	ldrb	r3, [r7, #23]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10a      	bne.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009356:	4b80      	ldr	r3, [pc, #512]	; (8009558 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800935a:	f023 0207 	bic.w	r2, r3, #7
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009364:	497c      	ldr	r1, [pc, #496]	; (8009558 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009366:	4313      	orrs	r3, r2
 8009368:	658b      	str	r3, [r1, #88]	; 0x58
 800936a:	e001      	b.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 0320 	and.w	r3, r3, #32
 8009378:	2b00      	cmp	r3, #0
 800937a:	d04b      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009382:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009386:	d02e      	beq.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8009388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800938c:	d828      	bhi.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800938e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009392:	d02a      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009398:	d822      	bhi.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800939a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800939e:	d026      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80093a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093a4:	d81c      	bhi.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80093a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093aa:	d010      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80093ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093b0:	d816      	bhi.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d01d      	beq.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80093b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093ba:	d111      	bne.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	3304      	adds	r3, #4
 80093c0:	2100      	movs	r1, #0
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 fd16 	bl	8009df4 <RCCEx_PLL2_Config>
 80093c8:	4603      	mov	r3, r0
 80093ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80093cc:	e012      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	3324      	adds	r3, #36	; 0x24
 80093d2:	2102      	movs	r1, #2
 80093d4:	4618      	mov	r0, r3
 80093d6:	f000 fdbf 	bl	8009f58 <RCCEx_PLL3_Config>
 80093da:	4603      	mov	r3, r0
 80093dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80093de:	e009      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	75fb      	strb	r3, [r7, #23]
      break;
 80093e4:	e006      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80093e6:	bf00      	nop
 80093e8:	e004      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80093ea:	bf00      	nop
 80093ec:	e002      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80093ee:	bf00      	nop
 80093f0:	e000      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80093f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10a      	bne.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80093fa:	4b57      	ldr	r3, [pc, #348]	; (8009558 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80093fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009408:	4953      	ldr	r1, [pc, #332]	; (8009558 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800940a:	4313      	orrs	r3, r2
 800940c:	654b      	str	r3, [r1, #84]	; 0x54
 800940e:	e001      	b.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009410:	7dfb      	ldrb	r3, [r7, #23]
 8009412:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800941c:	2b00      	cmp	r3, #0
 800941e:	d04b      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009426:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800942a:	d02e      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800942c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009430:	d828      	bhi.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009436:	d02a      	beq.n	800948e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800943c:	d822      	bhi.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800943e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009442:	d026      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009444:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009448:	d81c      	bhi.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800944a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800944e:	d010      	beq.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8009450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009454:	d816      	bhi.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009456:	2b00      	cmp	r3, #0
 8009458:	d01d      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800945a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800945e:	d111      	bne.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	3304      	adds	r3, #4
 8009464:	2100      	movs	r1, #0
 8009466:	4618      	mov	r0, r3
 8009468:	f000 fcc4 	bl	8009df4 <RCCEx_PLL2_Config>
 800946c:	4603      	mov	r3, r0
 800946e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009470:	e012      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	3324      	adds	r3, #36	; 0x24
 8009476:	2102      	movs	r1, #2
 8009478:	4618      	mov	r0, r3
 800947a:	f000 fd6d 	bl	8009f58 <RCCEx_PLL3_Config>
 800947e:	4603      	mov	r3, r0
 8009480:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009482:	e009      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	75fb      	strb	r3, [r7, #23]
      break;
 8009488:	e006      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800948a:	bf00      	nop
 800948c:	e004      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800948e:	bf00      	nop
 8009490:	e002      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009492:	bf00      	nop
 8009494:	e000      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009496:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009498:	7dfb      	ldrb	r3, [r7, #23]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10a      	bne.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800949e:	4b2e      	ldr	r3, [pc, #184]	; (8009558 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80094a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094ac:	492a      	ldr	r1, [pc, #168]	; (8009558 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80094ae:	4313      	orrs	r3, r2
 80094b0:	658b      	str	r3, [r1, #88]	; 0x58
 80094b2:	e001      	b.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b4:	7dfb      	ldrb	r3, [r7, #23]
 80094b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d04d      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80094ce:	d02e      	beq.n	800952e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80094d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80094d4:	d828      	bhi.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80094d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094da:	d02a      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80094dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094e0:	d822      	bhi.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80094e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80094e6:	d026      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80094e8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80094ec:	d81c      	bhi.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80094ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094f2:	d010      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80094f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094f8:	d816      	bhi.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d01d      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80094fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009502:	d111      	bne.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	3304      	adds	r3, #4
 8009508:	2100      	movs	r1, #0
 800950a:	4618      	mov	r0, r3
 800950c:	f000 fc72 	bl	8009df4 <RCCEx_PLL2_Config>
 8009510:	4603      	mov	r3, r0
 8009512:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009514:	e012      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	3324      	adds	r3, #36	; 0x24
 800951a:	2102      	movs	r1, #2
 800951c:	4618      	mov	r0, r3
 800951e:	f000 fd1b 	bl	8009f58 <RCCEx_PLL3_Config>
 8009522:	4603      	mov	r3, r0
 8009524:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009526:	e009      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	75fb      	strb	r3, [r7, #23]
      break;
 800952c:	e006      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800952e:	bf00      	nop
 8009530:	e004      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009532:	bf00      	nop
 8009534:	e002      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009536:	bf00      	nop
 8009538:	e000      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800953a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800953c:	7dfb      	ldrb	r3, [r7, #23]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10c      	bne.n	800955c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009542:	4b05      	ldr	r3, [pc, #20]	; (8009558 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009546:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009550:	4901      	ldr	r1, [pc, #4]	; (8009558 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009552:	4313      	orrs	r3, r2
 8009554:	658b      	str	r3, [r1, #88]	; 0x58
 8009556:	e003      	b.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009558:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800955c:	7dfb      	ldrb	r3, [r7, #23]
 800955e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 0308 	and.w	r3, r3, #8
 8009568:	2b00      	cmp	r3, #0
 800956a:	d018      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009574:	d10a      	bne.n	800958c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	3324      	adds	r3, #36	; 0x24
 800957a:	2102      	movs	r1, #2
 800957c:	4618      	mov	r0, r3
 800957e:	f000 fceb 	bl	8009f58 <RCCEx_PLL3_Config>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d001      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800958c:	4b8a      	ldr	r3, [pc, #552]	; (80097b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800958e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009590:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009598:	4987      	ldr	r1, [pc, #540]	; (80097b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800959a:	4313      	orrs	r3, r2
 800959c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f003 0310 	and.w	r3, r3, #16
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d01a      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095b4:	d10a      	bne.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	3324      	adds	r3, #36	; 0x24
 80095ba:	2102      	movs	r1, #2
 80095bc:	4618      	mov	r0, r3
 80095be:	f000 fccb 	bl	8009f58 <RCCEx_PLL3_Config>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80095cc:	4b7a      	ldr	r3, [pc, #488]	; (80097b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80095ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095da:	4977      	ldr	r1, [pc, #476]	; (80097b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80095dc:	4313      	orrs	r3, r2
 80095de:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d034      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095f6:	d01d      	beq.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80095f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095fc:	d817      	bhi.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d003      	beq.n	800960a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009606:	d009      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009608:	e011      	b.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	3304      	adds	r3, #4
 800960e:	2100      	movs	r1, #0
 8009610:	4618      	mov	r0, r3
 8009612:	f000 fbef 	bl	8009df4 <RCCEx_PLL2_Config>
 8009616:	4603      	mov	r3, r0
 8009618:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800961a:	e00c      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	3324      	adds	r3, #36	; 0x24
 8009620:	2102      	movs	r1, #2
 8009622:	4618      	mov	r0, r3
 8009624:	f000 fc98 	bl	8009f58 <RCCEx_PLL3_Config>
 8009628:	4603      	mov	r3, r0
 800962a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800962c:	e003      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	75fb      	strb	r3, [r7, #23]
      break;
 8009632:	e000      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009634:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009636:	7dfb      	ldrb	r3, [r7, #23]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10a      	bne.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800963c:	4b5e      	ldr	r3, [pc, #376]	; (80097b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800963e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009640:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800964a:	495b      	ldr	r1, [pc, #364]	; (80097b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800964c:	4313      	orrs	r3, r2
 800964e:	658b      	str	r3, [r1, #88]	; 0x58
 8009650:	e001      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009652:	7dfb      	ldrb	r3, [r7, #23]
 8009654:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800965e:	2b00      	cmp	r3, #0
 8009660:	d033      	beq.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009668:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800966c:	d01c      	beq.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800966e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009672:	d816      	bhi.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009674:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009678:	d003      	beq.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800967a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800967e:	d007      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009680:	e00f      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009682:	4b4d      	ldr	r3, [pc, #308]	; (80097b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009686:	4a4c      	ldr	r2, [pc, #304]	; (80097b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800968c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800968e:	e00c      	b.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	3324      	adds	r3, #36	; 0x24
 8009694:	2101      	movs	r1, #1
 8009696:	4618      	mov	r0, r3
 8009698:	f000 fc5e 	bl	8009f58 <RCCEx_PLL3_Config>
 800969c:	4603      	mov	r3, r0
 800969e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80096a0:	e003      	b.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	75fb      	strb	r3, [r7, #23]
      break;
 80096a6:	e000      	b.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80096a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096aa:	7dfb      	ldrb	r3, [r7, #23]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d10a      	bne.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80096b0:	4b41      	ldr	r3, [pc, #260]	; (80097b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80096b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096be:	493e      	ldr	r1, [pc, #248]	; (80097b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80096c0:	4313      	orrs	r3, r2
 80096c2:	654b      	str	r3, [r1, #84]	; 0x54
 80096c4:	e001      	b.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096c6:	7dfb      	ldrb	r3, [r7, #23]
 80096c8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d029      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d003      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80096de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096e2:	d007      	beq.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80096e4:	e00f      	b.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096e6:	4b34      	ldr	r3, [pc, #208]	; (80097b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80096e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ea:	4a33      	ldr	r2, [pc, #204]	; (80097b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80096ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80096f2:	e00b      	b.n	800970c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	3304      	adds	r3, #4
 80096f8:	2102      	movs	r1, #2
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 fb7a 	bl	8009df4 <RCCEx_PLL2_Config>
 8009700:	4603      	mov	r3, r0
 8009702:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009704:	e002      	b.n	800970c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	75fb      	strb	r3, [r7, #23]
      break;
 800970a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800970c:	7dfb      	ldrb	r3, [r7, #23]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d109      	bne.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009712:	4b29      	ldr	r3, [pc, #164]	; (80097b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009716:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800971e:	4926      	ldr	r1, [pc, #152]	; (80097b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009720:	4313      	orrs	r3, r2
 8009722:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009724:	e001      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009726:	7dfb      	ldrb	r3, [r7, #23]
 8009728:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00a      	beq.n	800974c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	3324      	adds	r3, #36	; 0x24
 800973a:	2102      	movs	r1, #2
 800973c:	4618      	mov	r0, r3
 800973e:	f000 fc0b 	bl	8009f58 <RCCEx_PLL3_Config>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d001      	beq.n	800974c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009754:	2b00      	cmp	r3, #0
 8009756:	d033      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800975c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009760:	d017      	beq.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009766:	d811      	bhi.n	800978c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800976c:	d013      	beq.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800976e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009772:	d80b      	bhi.n	800978c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009774:	2b00      	cmp	r3, #0
 8009776:	d010      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8009778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800977c:	d106      	bne.n	800978c <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800977e:	4b0e      	ldr	r3, [pc, #56]	; (80097b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009782:	4a0d      	ldr	r2, [pc, #52]	; (80097b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009788:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800978a:	e007      	b.n	800979c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	75fb      	strb	r3, [r7, #23]
      break;
 8009790:	e004      	b.n	800979c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009792:	bf00      	nop
 8009794:	e002      	b.n	800979c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009796:	bf00      	nop
 8009798:	e000      	b.n	800979c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800979a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800979c:	7dfb      	ldrb	r3, [r7, #23]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10c      	bne.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80097a2:	4b05      	ldr	r3, [pc, #20]	; (80097b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097ae:	4902      	ldr	r1, [pc, #8]	; (80097b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097b0:	4313      	orrs	r3, r2
 80097b2:	654b      	str	r3, [r1, #84]	; 0x54
 80097b4:	e004      	b.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80097b6:	bf00      	nop
 80097b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097bc:	7dfb      	ldrb	r3, [r7, #23]
 80097be:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d008      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80097cc:	4b29      	ldr	r3, [pc, #164]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097d8:	4926      	ldr	r1, [pc, #152]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097da:	4313      	orrs	r3, r2
 80097dc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d008      	beq.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80097ea:	4b22      	ldr	r3, [pc, #136]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097ee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097f6:	491f      	ldr	r1, [pc, #124]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097f8:	4313      	orrs	r3, r2
 80097fa:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009804:	2b00      	cmp	r3, #0
 8009806:	d00d      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009808:	4b1a      	ldr	r3, [pc, #104]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	4a19      	ldr	r2, [pc, #100]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800980e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009812:	6113      	str	r3, [r2, #16]
 8009814:	4b17      	ldr	r3, [pc, #92]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009816:	691a      	ldr	r2, [r3, #16]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800981e:	4915      	ldr	r1, [pc, #84]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009820:	4313      	orrs	r3, r2
 8009822:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	da08      	bge.n	800983e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800982c:	4b11      	ldr	r3, [pc, #68]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800982e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009830:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009838:	490e      	ldr	r1, [pc, #56]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800983a:	4313      	orrs	r3, r2
 800983c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009846:	2b00      	cmp	r3, #0
 8009848:	d009      	beq.n	800985e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800984a:	4b0a      	ldr	r3, [pc, #40]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800984c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800984e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009858:	4906      	ldr	r1, [pc, #24]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800985a:	4313      	orrs	r3, r2
 800985c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800985e:	7dbb      	ldrb	r3, [r7, #22]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d101      	bne.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009864:	2300      	movs	r3, #0
 8009866:	e000      	b.n	800986a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
}
 800986a:	4618      	mov	r0, r3
 800986c:	3718      	adds	r7, #24
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	58024400 	.word	0x58024400

08009878 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800987c:	f7ff f8a6 	bl	80089cc <HAL_RCC_GetHCLKFreq>
 8009880:	4602      	mov	r2, r0
 8009882:	4b06      	ldr	r3, [pc, #24]	; (800989c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	091b      	lsrs	r3, r3, #4
 8009888:	f003 0307 	and.w	r3, r3, #7
 800988c:	4904      	ldr	r1, [pc, #16]	; (80098a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800988e:	5ccb      	ldrb	r3, [r1, r3]
 8009890:	f003 031f 	and.w	r3, r3, #31
 8009894:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009898:	4618      	mov	r0, r3
 800989a:	bd80      	pop	{r7, pc}
 800989c:	58024400 	.word	0x58024400
 80098a0:	0800df90 	.word	0x0800df90

080098a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b089      	sub	sp, #36	; 0x24
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098ac:	4ba1      	ldr	r3, [pc, #644]	; (8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b0:	f003 0303 	and.w	r3, r3, #3
 80098b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80098b6:	4b9f      	ldr	r3, [pc, #636]	; (8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ba:	0b1b      	lsrs	r3, r3, #12
 80098bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80098c2:	4b9c      	ldr	r3, [pc, #624]	; (8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c6:	091b      	lsrs	r3, r3, #4
 80098c8:	f003 0301 	and.w	r3, r3, #1
 80098cc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80098ce:	4b99      	ldr	r3, [pc, #612]	; (8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098d2:	08db      	lsrs	r3, r3, #3
 80098d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098d8:	693a      	ldr	r2, [r7, #16]
 80098da:	fb02 f303 	mul.w	r3, r2, r3
 80098de:	ee07 3a90 	vmov	s15, r3
 80098e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f000 8111 	beq.w	8009b14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	f000 8083 	beq.w	8009a00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	f200 80a1 	bhi.w	8009a44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d003      	beq.n	8009910 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	2b01      	cmp	r3, #1
 800990c:	d056      	beq.n	80099bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800990e:	e099      	b.n	8009a44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009910:	4b88      	ldr	r3, [pc, #544]	; (8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f003 0320 	and.w	r3, r3, #32
 8009918:	2b00      	cmp	r3, #0
 800991a:	d02d      	beq.n	8009978 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800991c:	4b85      	ldr	r3, [pc, #532]	; (8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	08db      	lsrs	r3, r3, #3
 8009922:	f003 0303 	and.w	r3, r3, #3
 8009926:	4a84      	ldr	r2, [pc, #528]	; (8009b38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009928:	fa22 f303 	lsr.w	r3, r2, r3
 800992c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	ee07 3a90 	vmov	s15, r3
 8009934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	ee07 3a90 	vmov	s15, r3
 800993e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009946:	4b7b      	ldr	r3, [pc, #492]	; (8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800994a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800994e:	ee07 3a90 	vmov	s15, r3
 8009952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009956:	ed97 6a03 	vldr	s12, [r7, #12]
 800995a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009b3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800995e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800996a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800996e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009972:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009976:	e087      	b.n	8009a88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	ee07 3a90 	vmov	s15, r3
 800997e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009982:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800998a:	4b6a      	ldr	r3, [pc, #424]	; (8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800998c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800998e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009992:	ee07 3a90 	vmov	s15, r3
 8009996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800999a:	ed97 6a03 	vldr	s12, [r7, #12]
 800999e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009b3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099ba:	e065      	b.n	8009a88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	ee07 3a90 	vmov	s15, r3
 80099c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80099ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ce:	4b59      	ldr	r3, [pc, #356]	; (8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099d6:	ee07 3a90 	vmov	s15, r3
 80099da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099de:	ed97 6a03 	vldr	s12, [r7, #12]
 80099e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009b3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099fe:	e043      	b.n	8009a88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	ee07 3a90 	vmov	s15, r3
 8009a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a0a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a12:	4b48      	ldr	r3, [pc, #288]	; (8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a1a:	ee07 3a90 	vmov	s15, r3
 8009a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a26:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009b3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a42:	e021      	b.n	8009a88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	ee07 3a90 	vmov	s15, r3
 8009a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a56:	4b37      	ldr	r3, [pc, #220]	; (8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a5e:	ee07 3a90 	vmov	s15, r3
 8009a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a6a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009a88:	4b2a      	ldr	r3, [pc, #168]	; (8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8c:	0a5b      	lsrs	r3, r3, #9
 8009a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a92:	ee07 3a90 	vmov	s15, r3
 8009a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009aa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aae:	ee17 2a90 	vmov	r2, s15
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009ab6:	4b1f      	ldr	r3, [pc, #124]	; (8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aba:	0c1b      	lsrs	r3, r3, #16
 8009abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ac0:	ee07 3a90 	vmov	s15, r3
 8009ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ac8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009acc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ad0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009adc:	ee17 2a90 	vmov	r2, s15
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009ae4:	4b13      	ldr	r3, [pc, #76]	; (8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae8:	0e1b      	lsrs	r3, r3, #24
 8009aea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aee:	ee07 3a90 	vmov	s15, r3
 8009af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009af6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009afa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009afe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b0a:	ee17 2a90 	vmov	r2, s15
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009b12:	e008      	b.n	8009b26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	609a      	str	r2, [r3, #8]
}
 8009b26:	bf00      	nop
 8009b28:	3724      	adds	r7, #36	; 0x24
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	58024400 	.word	0x58024400
 8009b38:	03d09000 	.word	0x03d09000
 8009b3c:	46000000 	.word	0x46000000
 8009b40:	4c742400 	.word	0x4c742400
 8009b44:	4a742400 	.word	0x4a742400
 8009b48:	4af42400 	.word	0x4af42400

08009b4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b089      	sub	sp, #36	; 0x24
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b54:	4ba1      	ldr	r3, [pc, #644]	; (8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b58:	f003 0303 	and.w	r3, r3, #3
 8009b5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009b5e:	4b9f      	ldr	r3, [pc, #636]	; (8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b62:	0d1b      	lsrs	r3, r3, #20
 8009b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009b6a:	4b9c      	ldr	r3, [pc, #624]	; (8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b6e:	0a1b      	lsrs	r3, r3, #8
 8009b70:	f003 0301 	and.w	r3, r3, #1
 8009b74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009b76:	4b99      	ldr	r3, [pc, #612]	; (8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b7a:	08db      	lsrs	r3, r3, #3
 8009b7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b80:	693a      	ldr	r2, [r7, #16]
 8009b82:	fb02 f303 	mul.w	r3, r2, r3
 8009b86:	ee07 3a90 	vmov	s15, r3
 8009b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f000 8111 	beq.w	8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	f000 8083 	beq.w	8009ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	f200 80a1 	bhi.w	8009cec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d003      	beq.n	8009bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d056      	beq.n	8009c64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009bb6:	e099      	b.n	8009cec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bb8:	4b88      	ldr	r3, [pc, #544]	; (8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 0320 	and.w	r3, r3, #32
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d02d      	beq.n	8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bc4:	4b85      	ldr	r3, [pc, #532]	; (8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	08db      	lsrs	r3, r3, #3
 8009bca:	f003 0303 	and.w	r3, r3, #3
 8009bce:	4a84      	ldr	r2, [pc, #528]	; (8009de0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8009bd4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	ee07 3a90 	vmov	s15, r3
 8009bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	ee07 3a90 	vmov	s15, r3
 8009be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bee:	4b7b      	ldr	r3, [pc, #492]	; (8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bf6:	ee07 3a90 	vmov	s15, r3
 8009bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c02:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009de4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c1a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009c1e:	e087      	b.n	8009d30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	ee07 3a90 	vmov	s15, r3
 8009c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c32:	4b6a      	ldr	r3, [pc, #424]	; (8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c3a:	ee07 3a90 	vmov	s15, r3
 8009c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c46:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009de4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c62:	e065      	b.n	8009d30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	ee07 3a90 	vmov	s15, r3
 8009c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009dec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c76:	4b59      	ldr	r3, [pc, #356]	; (8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c7e:	ee07 3a90 	vmov	s15, r3
 8009c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009de4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ca2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ca6:	e043      	b.n	8009d30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	ee07 3a90 	vmov	s15, r3
 8009cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009df0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cba:	4b48      	ldr	r3, [pc, #288]	; (8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cc2:	ee07 3a90 	vmov	s15, r3
 8009cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cce:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009de4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ce6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cea:	e021      	b.n	8009d30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	ee07 3a90 	vmov	s15, r3
 8009cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009dec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cfe:	4b37      	ldr	r3, [pc, #220]	; (8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d06:	ee07 3a90 	vmov	s15, r3
 8009d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d12:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009de4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d2e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009d30:	4b2a      	ldr	r3, [pc, #168]	; (8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d34:	0a5b      	lsrs	r3, r3, #9
 8009d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d3a:	ee07 3a90 	vmov	s15, r3
 8009d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d56:	ee17 2a90 	vmov	r2, s15
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009d5e:	4b1f      	ldr	r3, [pc, #124]	; (8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d62:	0c1b      	lsrs	r3, r3, #16
 8009d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d68:	ee07 3a90 	vmov	s15, r3
 8009d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d78:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d84:	ee17 2a90 	vmov	r2, s15
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009d8c:	4b13      	ldr	r3, [pc, #76]	; (8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d90:	0e1b      	lsrs	r3, r3, #24
 8009d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d96:	ee07 3a90 	vmov	s15, r3
 8009d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009da2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009da6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009db2:	ee17 2a90 	vmov	r2, s15
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009dba:	e008      	b.n	8009dce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	609a      	str	r2, [r3, #8]
}
 8009dce:	bf00      	nop
 8009dd0:	3724      	adds	r7, #36	; 0x24
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	58024400 	.word	0x58024400
 8009de0:	03d09000 	.word	0x03d09000
 8009de4:	46000000 	.word	0x46000000
 8009de8:	4c742400 	.word	0x4c742400
 8009dec:	4a742400 	.word	0x4a742400
 8009df0:	4af42400 	.word	0x4af42400

08009df4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e02:	4b53      	ldr	r3, [pc, #332]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e06:	f003 0303 	and.w	r3, r3, #3
 8009e0a:	2b03      	cmp	r3, #3
 8009e0c:	d101      	bne.n	8009e12 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e099      	b.n	8009f46 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009e12:	4b4f      	ldr	r3, [pc, #316]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a4e      	ldr	r2, [pc, #312]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009e18:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e1e:	f7fa fda5 	bl	800496c <HAL_GetTick>
 8009e22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e24:	e008      	b.n	8009e38 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009e26:	f7fa fda1 	bl	800496c <HAL_GetTick>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	1ad3      	subs	r3, r2, r3
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	d901      	bls.n	8009e38 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009e34:	2303      	movs	r3, #3
 8009e36:	e086      	b.n	8009f46 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e38:	4b45      	ldr	r3, [pc, #276]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1f0      	bne.n	8009e26 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009e44:	4b42      	ldr	r3, [pc, #264]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e48:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	031b      	lsls	r3, r3, #12
 8009e52:	493f      	ldr	r1, [pc, #252]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009e54:	4313      	orrs	r3, r2
 8009e56:	628b      	str	r3, [r1, #40]	; 0x28
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	3b01      	subs	r3, #1
 8009e68:	025b      	lsls	r3, r3, #9
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	431a      	orrs	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	3b01      	subs	r3, #1
 8009e74:	041b      	lsls	r3, r3, #16
 8009e76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e7a:	431a      	orrs	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	3b01      	subs	r3, #1
 8009e82:	061b      	lsls	r3, r3, #24
 8009e84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e88:	4931      	ldr	r1, [pc, #196]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009e8e:	4b30      	ldr	r3, [pc, #192]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	695b      	ldr	r3, [r3, #20]
 8009e9a:	492d      	ldr	r1, [pc, #180]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009ea0:	4b2b      	ldr	r3, [pc, #172]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea4:	f023 0220 	bic.w	r2, r3, #32
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	699b      	ldr	r3, [r3, #24]
 8009eac:	4928      	ldr	r1, [pc, #160]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009eb2:	4b27      	ldr	r3, [pc, #156]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb6:	4a26      	ldr	r2, [pc, #152]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009eb8:	f023 0310 	bic.w	r3, r3, #16
 8009ebc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009ebe:	4b24      	ldr	r3, [pc, #144]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009ec0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ec2:	4b24      	ldr	r3, [pc, #144]	; (8009f54 <RCCEx_PLL2_Config+0x160>)
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	69d2      	ldr	r2, [r2, #28]
 8009eca:	00d2      	lsls	r2, r2, #3
 8009ecc:	4920      	ldr	r1, [pc, #128]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009ed2:	4b1f      	ldr	r3, [pc, #124]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed6:	4a1e      	ldr	r2, [pc, #120]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009ed8:	f043 0310 	orr.w	r3, r3, #16
 8009edc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d106      	bne.n	8009ef2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009ee4:	4b1a      	ldr	r3, [pc, #104]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee8:	4a19      	ldr	r2, [pc, #100]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009eea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009eee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ef0:	e00f      	b.n	8009f12 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d106      	bne.n	8009f06 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009ef8:	4b15      	ldr	r3, [pc, #84]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efc:	4a14      	ldr	r2, [pc, #80]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f04:	e005      	b.n	8009f12 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009f06:	4b12      	ldr	r3, [pc, #72]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0a:	4a11      	ldr	r2, [pc, #68]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009f0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009f12:	4b0f      	ldr	r3, [pc, #60]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a0e      	ldr	r2, [pc, #56]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009f18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009f1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f1e:	f7fa fd25 	bl	800496c <HAL_GetTick>
 8009f22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f24:	e008      	b.n	8009f38 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009f26:	f7fa fd21 	bl	800496c <HAL_GetTick>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	1ad3      	subs	r3, r2, r3
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	d901      	bls.n	8009f38 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009f34:	2303      	movs	r3, #3
 8009f36:	e006      	b.n	8009f46 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f38:	4b05      	ldr	r3, [pc, #20]	; (8009f50 <RCCEx_PLL2_Config+0x15c>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d0f0      	beq.n	8009f26 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	58024400 	.word	0x58024400
 8009f54:	ffff0007 	.word	0xffff0007

08009f58 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f62:	2300      	movs	r3, #0
 8009f64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f66:	4b53      	ldr	r3, [pc, #332]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 8009f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f6a:	f003 0303 	and.w	r3, r3, #3
 8009f6e:	2b03      	cmp	r3, #3
 8009f70:	d101      	bne.n	8009f76 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e099      	b.n	800a0aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009f76:	4b4f      	ldr	r3, [pc, #316]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a4e      	ldr	r2, [pc, #312]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 8009f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f82:	f7fa fcf3 	bl	800496c <HAL_GetTick>
 8009f86:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f88:	e008      	b.n	8009f9c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009f8a:	f7fa fcef 	bl	800496c <HAL_GetTick>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	1ad3      	subs	r3, r2, r3
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d901      	bls.n	8009f9c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	e086      	b.n	800a0aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f9c:	4b45      	ldr	r3, [pc, #276]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1f0      	bne.n	8009f8a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009fa8:	4b42      	ldr	r3, [pc, #264]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 8009faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	051b      	lsls	r3, r3, #20
 8009fb6:	493f      	ldr	r1, [pc, #252]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	628b      	str	r3, [r1, #40]	; 0x28
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	025b      	lsls	r3, r3, #9
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	431a      	orrs	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	041b      	lsls	r3, r3, #16
 8009fda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009fde:	431a      	orrs	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	061b      	lsls	r3, r3, #24
 8009fe8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009fec:	4931      	ldr	r1, [pc, #196]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009ff2:	4b30      	ldr	r3, [pc, #192]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 8009ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	695b      	ldr	r3, [r3, #20]
 8009ffe:	492d      	ldr	r1, [pc, #180]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 800a000:	4313      	orrs	r3, r2
 800a002:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a004:	4b2b      	ldr	r3, [pc, #172]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 800a006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a008:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	4928      	ldr	r1, [pc, #160]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 800a012:	4313      	orrs	r3, r2
 800a014:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a016:	4b27      	ldr	r3, [pc, #156]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 800a018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01a:	4a26      	ldr	r2, [pc, #152]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 800a01c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a020:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a022:	4b24      	ldr	r3, [pc, #144]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 800a024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a026:	4b24      	ldr	r3, [pc, #144]	; (800a0b8 <RCCEx_PLL3_Config+0x160>)
 800a028:	4013      	ands	r3, r2
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	69d2      	ldr	r2, [r2, #28]
 800a02e:	00d2      	lsls	r2, r2, #3
 800a030:	4920      	ldr	r1, [pc, #128]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 800a032:	4313      	orrs	r3, r2
 800a034:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a036:	4b1f      	ldr	r3, [pc, #124]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 800a038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03a:	4a1e      	ldr	r2, [pc, #120]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 800a03c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a040:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d106      	bne.n	800a056 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a048:	4b1a      	ldr	r3, [pc, #104]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 800a04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04c:	4a19      	ldr	r2, [pc, #100]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 800a04e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a052:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a054:	e00f      	b.n	800a076 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d106      	bne.n	800a06a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a05c:	4b15      	ldr	r3, [pc, #84]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 800a05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a060:	4a14      	ldr	r2, [pc, #80]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 800a062:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a066:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a068:	e005      	b.n	800a076 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a06a:	4b12      	ldr	r3, [pc, #72]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 800a06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06e:	4a11      	ldr	r2, [pc, #68]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 800a070:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a074:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a076:	4b0f      	ldr	r3, [pc, #60]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a0e      	ldr	r2, [pc, #56]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 800a07c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a080:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a082:	f7fa fc73 	bl	800496c <HAL_GetTick>
 800a086:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a088:	e008      	b.n	800a09c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a08a:	f7fa fc6f 	bl	800496c <HAL_GetTick>
 800a08e:	4602      	mov	r2, r0
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	1ad3      	subs	r3, r2, r3
 800a094:	2b02      	cmp	r3, #2
 800a096:	d901      	bls.n	800a09c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a098:	2303      	movs	r3, #3
 800a09a:	e006      	b.n	800a0aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a09c:	4b05      	ldr	r3, [pc, #20]	; (800a0b4 <RCCEx_PLL3_Config+0x15c>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d0f0      	beq.n	800a08a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	58024400 	.word	0x58024400
 800a0b8:	ffff0007 	.word	0xffff0007

0800a0bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d101      	bne.n	800a0ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e049      	b.n	800a162 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d106      	bne.n	800a0e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f7f9 ffa2 	bl	800402c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	3304      	adds	r3, #4
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	f000 fe0c 	bl	800ad18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	3708      	adds	r7, #8
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
	...

0800a16c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d001      	beq.n	800a184 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	e05e      	b.n	800a242 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2202      	movs	r2, #2
 800a188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68da      	ldr	r2, [r3, #12]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f042 0201 	orr.w	r2, r2, #1
 800a19a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a2b      	ldr	r2, [pc, #172]	; (800a250 <HAL_TIM_Base_Start_IT+0xe4>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d02c      	beq.n	800a200 <HAL_TIM_Base_Start_IT+0x94>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ae:	d027      	beq.n	800a200 <HAL_TIM_Base_Start_IT+0x94>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a27      	ldr	r2, [pc, #156]	; (800a254 <HAL_TIM_Base_Start_IT+0xe8>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d022      	beq.n	800a200 <HAL_TIM_Base_Start_IT+0x94>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a26      	ldr	r2, [pc, #152]	; (800a258 <HAL_TIM_Base_Start_IT+0xec>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d01d      	beq.n	800a200 <HAL_TIM_Base_Start_IT+0x94>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a24      	ldr	r2, [pc, #144]	; (800a25c <HAL_TIM_Base_Start_IT+0xf0>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d018      	beq.n	800a200 <HAL_TIM_Base_Start_IT+0x94>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a23      	ldr	r2, [pc, #140]	; (800a260 <HAL_TIM_Base_Start_IT+0xf4>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d013      	beq.n	800a200 <HAL_TIM_Base_Start_IT+0x94>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a21      	ldr	r2, [pc, #132]	; (800a264 <HAL_TIM_Base_Start_IT+0xf8>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d00e      	beq.n	800a200 <HAL_TIM_Base_Start_IT+0x94>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a20      	ldr	r2, [pc, #128]	; (800a268 <HAL_TIM_Base_Start_IT+0xfc>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d009      	beq.n	800a200 <HAL_TIM_Base_Start_IT+0x94>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a1e      	ldr	r2, [pc, #120]	; (800a26c <HAL_TIM_Base_Start_IT+0x100>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d004      	beq.n	800a200 <HAL_TIM_Base_Start_IT+0x94>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a1d      	ldr	r2, [pc, #116]	; (800a270 <HAL_TIM_Base_Start_IT+0x104>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d115      	bne.n	800a22c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	689a      	ldr	r2, [r3, #8]
 800a206:	4b1b      	ldr	r3, [pc, #108]	; (800a274 <HAL_TIM_Base_Start_IT+0x108>)
 800a208:	4013      	ands	r3, r2
 800a20a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2b06      	cmp	r3, #6
 800a210:	d015      	beq.n	800a23e <HAL_TIM_Base_Start_IT+0xd2>
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a218:	d011      	beq.n	800a23e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f042 0201 	orr.w	r2, r2, #1
 800a228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a22a:	e008      	b.n	800a23e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f042 0201 	orr.w	r2, r2, #1
 800a23a:	601a      	str	r2, [r3, #0]
 800a23c:	e000      	b.n	800a240 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a23e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	40010000 	.word	0x40010000
 800a254:	40000400 	.word	0x40000400
 800a258:	40000800 	.word	0x40000800
 800a25c:	40000c00 	.word	0x40000c00
 800a260:	40010400 	.word	0x40010400
 800a264:	40001800 	.word	0x40001800
 800a268:	40014000 	.word	0x40014000
 800a26c:	4000e000 	.word	0x4000e000
 800a270:	4000e400 	.word	0x4000e400
 800a274:	00010007 	.word	0x00010007

0800a278 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d101      	bne.n	800a28a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	e049      	b.n	800a31e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a290:	b2db      	uxtb	r3, r3
 800a292:	2b00      	cmp	r3, #0
 800a294:	d106      	bne.n	800a2a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f7f9 fe7c 	bl	8003f9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2202      	movs	r2, #2
 800a2a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	3304      	adds	r3, #4
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	4610      	mov	r0, r2
 800a2b8:	f000 fd2e 	bl	800ad18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
	...

0800a328 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a332:	2300      	movs	r3, #0
 800a334:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d109      	bne.n	800a350 <HAL_TIM_PWM_Start_IT+0x28>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a342:	b2db      	uxtb	r3, r3
 800a344:	2b01      	cmp	r3, #1
 800a346:	bf14      	ite	ne
 800a348:	2301      	movne	r3, #1
 800a34a:	2300      	moveq	r3, #0
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	e03c      	b.n	800a3ca <HAL_TIM_PWM_Start_IT+0xa2>
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	2b04      	cmp	r3, #4
 800a354:	d109      	bne.n	800a36a <HAL_TIM_PWM_Start_IT+0x42>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	2b01      	cmp	r3, #1
 800a360:	bf14      	ite	ne
 800a362:	2301      	movne	r3, #1
 800a364:	2300      	moveq	r3, #0
 800a366:	b2db      	uxtb	r3, r3
 800a368:	e02f      	b.n	800a3ca <HAL_TIM_PWM_Start_IT+0xa2>
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	2b08      	cmp	r3, #8
 800a36e:	d109      	bne.n	800a384 <HAL_TIM_PWM_Start_IT+0x5c>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a376:	b2db      	uxtb	r3, r3
 800a378:	2b01      	cmp	r3, #1
 800a37a:	bf14      	ite	ne
 800a37c:	2301      	movne	r3, #1
 800a37e:	2300      	moveq	r3, #0
 800a380:	b2db      	uxtb	r3, r3
 800a382:	e022      	b.n	800a3ca <HAL_TIM_PWM_Start_IT+0xa2>
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	2b0c      	cmp	r3, #12
 800a388:	d109      	bne.n	800a39e <HAL_TIM_PWM_Start_IT+0x76>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a390:	b2db      	uxtb	r3, r3
 800a392:	2b01      	cmp	r3, #1
 800a394:	bf14      	ite	ne
 800a396:	2301      	movne	r3, #1
 800a398:	2300      	moveq	r3, #0
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	e015      	b.n	800a3ca <HAL_TIM_PWM_Start_IT+0xa2>
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	2b10      	cmp	r3, #16
 800a3a2:	d109      	bne.n	800a3b8 <HAL_TIM_PWM_Start_IT+0x90>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	bf14      	ite	ne
 800a3b0:	2301      	movne	r3, #1
 800a3b2:	2300      	moveq	r3, #0
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	e008      	b.n	800a3ca <HAL_TIM_PWM_Start_IT+0xa2>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	bf14      	ite	ne
 800a3c4:	2301      	movne	r3, #1
 800a3c6:	2300      	moveq	r3, #0
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d001      	beq.n	800a3d2 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e0f6      	b.n	800a5c0 <HAL_TIM_PWM_Start_IT+0x298>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d104      	bne.n	800a3e2 <HAL_TIM_PWM_Start_IT+0xba>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2202      	movs	r2, #2
 800a3dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3e0:	e023      	b.n	800a42a <HAL_TIM_PWM_Start_IT+0x102>
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	2b04      	cmp	r3, #4
 800a3e6:	d104      	bne.n	800a3f2 <HAL_TIM_PWM_Start_IT+0xca>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2202      	movs	r2, #2
 800a3ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3f0:	e01b      	b.n	800a42a <HAL_TIM_PWM_Start_IT+0x102>
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b08      	cmp	r3, #8
 800a3f6:	d104      	bne.n	800a402 <HAL_TIM_PWM_Start_IT+0xda>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2202      	movs	r2, #2
 800a3fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a400:	e013      	b.n	800a42a <HAL_TIM_PWM_Start_IT+0x102>
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	2b0c      	cmp	r3, #12
 800a406:	d104      	bne.n	800a412 <HAL_TIM_PWM_Start_IT+0xea>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2202      	movs	r2, #2
 800a40c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a410:	e00b      	b.n	800a42a <HAL_TIM_PWM_Start_IT+0x102>
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	2b10      	cmp	r3, #16
 800a416:	d104      	bne.n	800a422 <HAL_TIM_PWM_Start_IT+0xfa>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2202      	movs	r2, #2
 800a41c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a420:	e003      	b.n	800a42a <HAL_TIM_PWM_Start_IT+0x102>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2202      	movs	r2, #2
 800a426:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2b0c      	cmp	r3, #12
 800a42e:	d841      	bhi.n	800a4b4 <HAL_TIM_PWM_Start_IT+0x18c>
 800a430:	a201      	add	r2, pc, #4	; (adr r2, 800a438 <HAL_TIM_PWM_Start_IT+0x110>)
 800a432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a436:	bf00      	nop
 800a438:	0800a46d 	.word	0x0800a46d
 800a43c:	0800a4b5 	.word	0x0800a4b5
 800a440:	0800a4b5 	.word	0x0800a4b5
 800a444:	0800a4b5 	.word	0x0800a4b5
 800a448:	0800a47f 	.word	0x0800a47f
 800a44c:	0800a4b5 	.word	0x0800a4b5
 800a450:	0800a4b5 	.word	0x0800a4b5
 800a454:	0800a4b5 	.word	0x0800a4b5
 800a458:	0800a491 	.word	0x0800a491
 800a45c:	0800a4b5 	.word	0x0800a4b5
 800a460:	0800a4b5 	.word	0x0800a4b5
 800a464:	0800a4b5 	.word	0x0800a4b5
 800a468:	0800a4a3 	.word	0x0800a4a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	68da      	ldr	r2, [r3, #12]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f042 0202 	orr.w	r2, r2, #2
 800a47a:	60da      	str	r2, [r3, #12]
      break;
 800a47c:	e01d      	b.n	800a4ba <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	68da      	ldr	r2, [r3, #12]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f042 0204 	orr.w	r2, r2, #4
 800a48c:	60da      	str	r2, [r3, #12]
      break;
 800a48e:	e014      	b.n	800a4ba <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68da      	ldr	r2, [r3, #12]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f042 0208 	orr.w	r2, r2, #8
 800a49e:	60da      	str	r2, [r3, #12]
      break;
 800a4a0:	e00b      	b.n	800a4ba <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	68da      	ldr	r2, [r3, #12]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f042 0210 	orr.w	r2, r2, #16
 800a4b0:	60da      	str	r2, [r3, #12]
      break;
 800a4b2:	e002      	b.n	800a4ba <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a4b8:	bf00      	nop
  }

  if (status == HAL_OK)
 800a4ba:	7bfb      	ldrb	r3, [r7, #15]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d17e      	bne.n	800a5be <HAL_TIM_PWM_Start_IT+0x296>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	6839      	ldr	r1, [r7, #0]
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f000 ffa1 	bl	800b410 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a3d      	ldr	r2, [pc, #244]	; (800a5c8 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d013      	beq.n	800a500 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a3b      	ldr	r2, [pc, #236]	; (800a5cc <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d00e      	beq.n	800a500 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a3a      	ldr	r2, [pc, #232]	; (800a5d0 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d009      	beq.n	800a500 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a38      	ldr	r2, [pc, #224]	; (800a5d4 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d004      	beq.n	800a500 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a37      	ldr	r2, [pc, #220]	; (800a5d8 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d101      	bne.n	800a504 <HAL_TIM_PWM_Start_IT+0x1dc>
 800a500:	2301      	movs	r3, #1
 800a502:	e000      	b.n	800a506 <HAL_TIM_PWM_Start_IT+0x1de>
 800a504:	2300      	movs	r3, #0
 800a506:	2b00      	cmp	r3, #0
 800a508:	d007      	beq.n	800a51a <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a518:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a2a      	ldr	r2, [pc, #168]	; (800a5c8 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d02c      	beq.n	800a57e <HAL_TIM_PWM_Start_IT+0x256>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a52c:	d027      	beq.n	800a57e <HAL_TIM_PWM_Start_IT+0x256>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a2a      	ldr	r2, [pc, #168]	; (800a5dc <HAL_TIM_PWM_Start_IT+0x2b4>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d022      	beq.n	800a57e <HAL_TIM_PWM_Start_IT+0x256>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a28      	ldr	r2, [pc, #160]	; (800a5e0 <HAL_TIM_PWM_Start_IT+0x2b8>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d01d      	beq.n	800a57e <HAL_TIM_PWM_Start_IT+0x256>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a27      	ldr	r2, [pc, #156]	; (800a5e4 <HAL_TIM_PWM_Start_IT+0x2bc>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d018      	beq.n	800a57e <HAL_TIM_PWM_Start_IT+0x256>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a1e      	ldr	r2, [pc, #120]	; (800a5cc <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d013      	beq.n	800a57e <HAL_TIM_PWM_Start_IT+0x256>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a23      	ldr	r2, [pc, #140]	; (800a5e8 <HAL_TIM_PWM_Start_IT+0x2c0>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d00e      	beq.n	800a57e <HAL_TIM_PWM_Start_IT+0x256>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a1a      	ldr	r2, [pc, #104]	; (800a5d0 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d009      	beq.n	800a57e <HAL_TIM_PWM_Start_IT+0x256>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a1f      	ldr	r2, [pc, #124]	; (800a5ec <HAL_TIM_PWM_Start_IT+0x2c4>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d004      	beq.n	800a57e <HAL_TIM_PWM_Start_IT+0x256>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a1d      	ldr	r2, [pc, #116]	; (800a5f0 <HAL_TIM_PWM_Start_IT+0x2c8>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d115      	bne.n	800a5aa <HAL_TIM_PWM_Start_IT+0x282>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	689a      	ldr	r2, [r3, #8]
 800a584:	4b1b      	ldr	r3, [pc, #108]	; (800a5f4 <HAL_TIM_PWM_Start_IT+0x2cc>)
 800a586:	4013      	ands	r3, r2
 800a588:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	2b06      	cmp	r3, #6
 800a58e:	d015      	beq.n	800a5bc <HAL_TIM_PWM_Start_IT+0x294>
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a596:	d011      	beq.n	800a5bc <HAL_TIM_PWM_Start_IT+0x294>
      {
        __HAL_TIM_ENABLE(htim);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f042 0201 	orr.w	r2, r2, #1
 800a5a6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5a8:	e008      	b.n	800a5bc <HAL_TIM_PWM_Start_IT+0x294>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f042 0201 	orr.w	r2, r2, #1
 800a5b8:	601a      	str	r2, [r3, #0]
 800a5ba:	e000      	b.n	800a5be <HAL_TIM_PWM_Start_IT+0x296>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5bc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a5be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	40010000 	.word	0x40010000
 800a5cc:	40010400 	.word	0x40010400
 800a5d0:	40014000 	.word	0x40014000
 800a5d4:	40014400 	.word	0x40014400
 800a5d8:	40014800 	.word	0x40014800
 800a5dc:	40000400 	.word	0x40000400
 800a5e0:	40000800 	.word	0x40000800
 800a5e4:	40000c00 	.word	0x40000c00
 800a5e8:	40001800 	.word	0x40001800
 800a5ec:	4000e000 	.word	0x4000e000
 800a5f0:	4000e400 	.word	0x4000e400
 800a5f4:	00010007 	.word	0x00010007

0800a5f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b086      	sub	sp, #24
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d101      	bne.n	800a60c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	e08f      	b.n	800a72c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a612:	b2db      	uxtb	r3, r3
 800a614:	2b00      	cmp	r3, #0
 800a616:	d106      	bne.n	800a626 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f7f9 fbad 	bl	8003d80 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2202      	movs	r2, #2
 800a62a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	6899      	ldr	r1, [r3, #8]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	4b3e      	ldr	r3, [pc, #248]	; (800a734 <HAL_TIM_Encoder_Init+0x13c>)
 800a63a:	400b      	ands	r3, r1
 800a63c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	3304      	adds	r3, #4
 800a646:	4619      	mov	r1, r3
 800a648:	4610      	mov	r0, r2
 800a64a:	f000 fb65 	bl	800ad18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	699b      	ldr	r3, [r3, #24]
 800a65c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	6a1b      	ldr	r3, [r3, #32]
 800a664:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	697a      	ldr	r2, [r7, #20]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a670:	693a      	ldr	r2, [r7, #16]
 800a672:	4b31      	ldr	r3, [pc, #196]	; (800a738 <HAL_TIM_Encoder_Init+0x140>)
 800a674:	4013      	ands	r3, r2
 800a676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	689a      	ldr	r2, [r3, #8]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	699b      	ldr	r3, [r3, #24]
 800a680:	021b      	lsls	r3, r3, #8
 800a682:	4313      	orrs	r3, r2
 800a684:	693a      	ldr	r2, [r7, #16]
 800a686:	4313      	orrs	r3, r2
 800a688:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a68a:	693a      	ldr	r2, [r7, #16]
 800a68c:	4b2b      	ldr	r3, [pc, #172]	; (800a73c <HAL_TIM_Encoder_Init+0x144>)
 800a68e:	4013      	ands	r3, r2
 800a690:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a692:	693a      	ldr	r2, [r7, #16]
 800a694:	4b2a      	ldr	r3, [pc, #168]	; (800a740 <HAL_TIM_Encoder_Init+0x148>)
 800a696:	4013      	ands	r3, r2
 800a698:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	68da      	ldr	r2, [r3, #12]
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	69db      	ldr	r3, [r3, #28]
 800a6a2:	021b      	lsls	r3, r3, #8
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	693a      	ldr	r2, [r7, #16]
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	691b      	ldr	r3, [r3, #16]
 800a6b0:	011a      	lsls	r2, r3, #4
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	6a1b      	ldr	r3, [r3, #32]
 800a6b6:	031b      	lsls	r3, r3, #12
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	693a      	ldr	r2, [r7, #16]
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a6c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a6ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	685a      	ldr	r2, [r3, #4]
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	695b      	ldr	r3, [r3, #20]
 800a6d8:	011b      	lsls	r3, r3, #4
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	697a      	ldr	r2, [r7, #20]
 800a6e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	693a      	ldr	r2, [r7, #16]
 800a6f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	68fa      	ldr	r2, [r7, #12]
 800a6f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2201      	movs	r2, #1
 800a706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2201      	movs	r2, #1
 800a70e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2201      	movs	r2, #1
 800a716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2201      	movs	r2, #1
 800a726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a72a:	2300      	movs	r3, #0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3718      	adds	r7, #24
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	fffebff8 	.word	0xfffebff8
 800a738:	fffffcfc 	.word	0xfffffcfc
 800a73c:	fffff3f3 	.word	0xfffff3f3
 800a740:	ffff0f0f 	.word	0xffff0f0f

0800a744 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a754:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a75c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a764:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a76c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d110      	bne.n	800a796 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a774:	7bfb      	ldrb	r3, [r7, #15]
 800a776:	2b01      	cmp	r3, #1
 800a778:	d102      	bne.n	800a780 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a77a:	7b7b      	ldrb	r3, [r7, #13]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d001      	beq.n	800a784 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	e069      	b.n	800a858 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2202      	movs	r2, #2
 800a788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2202      	movs	r2, #2
 800a790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a794:	e031      	b.n	800a7fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	2b04      	cmp	r3, #4
 800a79a:	d110      	bne.n	800a7be <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a79c:	7bbb      	ldrb	r3, [r7, #14]
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d102      	bne.n	800a7a8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a7a2:	7b3b      	ldrb	r3, [r7, #12]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d001      	beq.n	800a7ac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e055      	b.n	800a858 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2202      	movs	r2, #2
 800a7b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2202      	movs	r2, #2
 800a7b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7bc:	e01d      	b.n	800a7fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a7be:	7bfb      	ldrb	r3, [r7, #15]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d108      	bne.n	800a7d6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a7c4:	7bbb      	ldrb	r3, [r7, #14]
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d105      	bne.n	800a7d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a7ca:	7b7b      	ldrb	r3, [r7, #13]
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d102      	bne.n	800a7d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a7d0:	7b3b      	ldrb	r3, [r7, #12]
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d001      	beq.n	800a7da <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e03e      	b.n	800a858 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2202      	movs	r2, #2
 800a7de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2202      	movs	r2, #2
 800a7e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2202      	movs	r2, #2
 800a7ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2202      	movs	r2, #2
 800a7f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d003      	beq.n	800a808 <HAL_TIM_Encoder_Start+0xc4>
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	2b04      	cmp	r3, #4
 800a804:	d008      	beq.n	800a818 <HAL_TIM_Encoder_Start+0xd4>
 800a806:	e00f      	b.n	800a828 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2201      	movs	r2, #1
 800a80e:	2100      	movs	r1, #0
 800a810:	4618      	mov	r0, r3
 800a812:	f000 fdfd 	bl	800b410 <TIM_CCxChannelCmd>
      break;
 800a816:	e016      	b.n	800a846 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2201      	movs	r2, #1
 800a81e:	2104      	movs	r1, #4
 800a820:	4618      	mov	r0, r3
 800a822:	f000 fdf5 	bl	800b410 <TIM_CCxChannelCmd>
      break;
 800a826:	e00e      	b.n	800a846 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2201      	movs	r2, #1
 800a82e:	2100      	movs	r1, #0
 800a830:	4618      	mov	r0, r3
 800a832:	f000 fded 	bl	800b410 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2201      	movs	r2, #1
 800a83c:	2104      	movs	r1, #4
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 fde6 	bl	800b410 <TIM_CCxChannelCmd>
      break;
 800a844:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f042 0201 	orr.w	r2, r2, #1
 800a854:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a856:	2300      	movs	r3, #0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3710      	adds	r7, #16
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	f003 0302 	and.w	r3, r3, #2
 800a872:	2b02      	cmp	r3, #2
 800a874:	d122      	bne.n	800a8bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	f003 0302 	and.w	r3, r3, #2
 800a880:	2b02      	cmp	r3, #2
 800a882:	d11b      	bne.n	800a8bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f06f 0202 	mvn.w	r2, #2
 800a88c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2201      	movs	r2, #1
 800a892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	699b      	ldr	r3, [r3, #24]
 800a89a:	f003 0303 	and.w	r3, r3, #3
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d003      	beq.n	800a8aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 fa1a 	bl	800acdc <HAL_TIM_IC_CaptureCallback>
 800a8a8:	e005      	b.n	800a8b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fa0c 	bl	800acc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 fa1d 	bl	800acf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	f003 0304 	and.w	r3, r3, #4
 800a8c6:	2b04      	cmp	r3, #4
 800a8c8:	d122      	bne.n	800a910 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	f003 0304 	and.w	r3, r3, #4
 800a8d4:	2b04      	cmp	r3, #4
 800a8d6:	d11b      	bne.n	800a910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f06f 0204 	mvn.w	r2, #4
 800a8e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2202      	movs	r2, #2
 800a8e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	699b      	ldr	r3, [r3, #24]
 800a8ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d003      	beq.n	800a8fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 f9f0 	bl	800acdc <HAL_TIM_IC_CaptureCallback>
 800a8fc:	e005      	b.n	800a90a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 f9e2 	bl	800acc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 f9f3 	bl	800acf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	691b      	ldr	r3, [r3, #16]
 800a916:	f003 0308 	and.w	r3, r3, #8
 800a91a:	2b08      	cmp	r3, #8
 800a91c:	d122      	bne.n	800a964 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	f003 0308 	and.w	r3, r3, #8
 800a928:	2b08      	cmp	r3, #8
 800a92a:	d11b      	bne.n	800a964 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f06f 0208 	mvn.w	r2, #8
 800a934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2204      	movs	r2, #4
 800a93a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	69db      	ldr	r3, [r3, #28]
 800a942:	f003 0303 	and.w	r3, r3, #3
 800a946:	2b00      	cmp	r3, #0
 800a948:	d003      	beq.n	800a952 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 f9c6 	bl	800acdc <HAL_TIM_IC_CaptureCallback>
 800a950:	e005      	b.n	800a95e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 f9b8 	bl	800acc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 f9c9 	bl	800acf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	f003 0310 	and.w	r3, r3, #16
 800a96e:	2b10      	cmp	r3, #16
 800a970:	d122      	bne.n	800a9b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	f003 0310 	and.w	r3, r3, #16
 800a97c:	2b10      	cmp	r3, #16
 800a97e:	d11b      	bne.n	800a9b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f06f 0210 	mvn.w	r2, #16
 800a988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2208      	movs	r2, #8
 800a98e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	69db      	ldr	r3, [r3, #28]
 800a996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d003      	beq.n	800a9a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 f99c 	bl	800acdc <HAL_TIM_IC_CaptureCallback>
 800a9a4:	e005      	b.n	800a9b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f98e 	bl	800acc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 f99f 	bl	800acf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	691b      	ldr	r3, [r3, #16]
 800a9be:	f003 0301 	and.w	r3, r3, #1
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d10e      	bne.n	800a9e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	f003 0301 	and.w	r3, r3, #1
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d107      	bne.n	800a9e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f06f 0201 	mvn.w	r2, #1
 800a9dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f7f9 fdd0 	bl	8004584 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	691b      	ldr	r3, [r3, #16]
 800a9ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ee:	2b80      	cmp	r3, #128	; 0x80
 800a9f0:	d10e      	bne.n	800aa10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9fc:	2b80      	cmp	r3, #128	; 0x80
 800a9fe:	d107      	bne.n	800aa10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fe6c 	bl	800b6e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	691b      	ldr	r3, [r3, #16]
 800aa16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa1e:	d10e      	bne.n	800aa3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa2a:	2b80      	cmp	r3, #128	; 0x80
 800aa2c:	d107      	bne.n	800aa3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 fe5f 	bl	800b6fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa48:	2b40      	cmp	r3, #64	; 0x40
 800aa4a:	d10e      	bne.n	800aa6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa56:	2b40      	cmp	r3, #64	; 0x40
 800aa58:	d107      	bne.n	800aa6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 f94d 	bl	800ad04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	f003 0320 	and.w	r3, r3, #32
 800aa74:	2b20      	cmp	r3, #32
 800aa76:	d10e      	bne.n	800aa96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	f003 0320 	and.w	r3, r3, #32
 800aa82:	2b20      	cmp	r3, #32
 800aa84:	d107      	bne.n	800aa96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f06f 0220 	mvn.w	r2, #32
 800aa8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 fe1f 	bl	800b6d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa96:	bf00      	nop
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
	...

0800aaa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aaac:	2300      	movs	r3, #0
 800aaae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d101      	bne.n	800aabe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aaba:	2302      	movs	r3, #2
 800aabc:	e0ff      	b.n	800acbe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2201      	movs	r2, #1
 800aac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2b14      	cmp	r3, #20
 800aaca:	f200 80f0 	bhi.w	800acae <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aace:	a201      	add	r2, pc, #4	; (adr r2, 800aad4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad4:	0800ab29 	.word	0x0800ab29
 800aad8:	0800acaf 	.word	0x0800acaf
 800aadc:	0800acaf 	.word	0x0800acaf
 800aae0:	0800acaf 	.word	0x0800acaf
 800aae4:	0800ab69 	.word	0x0800ab69
 800aae8:	0800acaf 	.word	0x0800acaf
 800aaec:	0800acaf 	.word	0x0800acaf
 800aaf0:	0800acaf 	.word	0x0800acaf
 800aaf4:	0800abab 	.word	0x0800abab
 800aaf8:	0800acaf 	.word	0x0800acaf
 800aafc:	0800acaf 	.word	0x0800acaf
 800ab00:	0800acaf 	.word	0x0800acaf
 800ab04:	0800abeb 	.word	0x0800abeb
 800ab08:	0800acaf 	.word	0x0800acaf
 800ab0c:	0800acaf 	.word	0x0800acaf
 800ab10:	0800acaf 	.word	0x0800acaf
 800ab14:	0800ac2d 	.word	0x0800ac2d
 800ab18:	0800acaf 	.word	0x0800acaf
 800ab1c:	0800acaf 	.word	0x0800acaf
 800ab20:	0800acaf 	.word	0x0800acaf
 800ab24:	0800ac6d 	.word	0x0800ac6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	68b9      	ldr	r1, [r7, #8]
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f000 f998 	bl	800ae64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	699a      	ldr	r2, [r3, #24]
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f042 0208 	orr.w	r2, r2, #8
 800ab42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	699a      	ldr	r2, [r3, #24]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f022 0204 	bic.w	r2, r2, #4
 800ab52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6999      	ldr	r1, [r3, #24]
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	691a      	ldr	r2, [r3, #16]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	430a      	orrs	r2, r1
 800ab64:	619a      	str	r2, [r3, #24]
      break;
 800ab66:	e0a5      	b.n	800acb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	68b9      	ldr	r1, [r7, #8]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 fa08 	bl	800af84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	699a      	ldr	r2, [r3, #24]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	699a      	ldr	r2, [r3, #24]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	6999      	ldr	r1, [r3, #24]
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	691b      	ldr	r3, [r3, #16]
 800ab9e:	021a      	lsls	r2, r3, #8
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	430a      	orrs	r2, r1
 800aba6:	619a      	str	r2, [r3, #24]
      break;
 800aba8:	e084      	b.n	800acb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	68b9      	ldr	r1, [r7, #8]
 800abb0:	4618      	mov	r0, r3
 800abb2:	f000 fa71 	bl	800b098 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	69da      	ldr	r2, [r3, #28]
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f042 0208 	orr.w	r2, r2, #8
 800abc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	69da      	ldr	r2, [r3, #28]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f022 0204 	bic.w	r2, r2, #4
 800abd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	69d9      	ldr	r1, [r3, #28]
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	691a      	ldr	r2, [r3, #16]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	430a      	orrs	r2, r1
 800abe6:	61da      	str	r2, [r3, #28]
      break;
 800abe8:	e064      	b.n	800acb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68b9      	ldr	r1, [r7, #8]
 800abf0:	4618      	mov	r0, r3
 800abf2:	f000 fad9 	bl	800b1a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	69da      	ldr	r2, [r3, #28]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	69da      	ldr	r2, [r3, #28]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	69d9      	ldr	r1, [r3, #28]
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	691b      	ldr	r3, [r3, #16]
 800ac20:	021a      	lsls	r2, r3, #8
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	430a      	orrs	r2, r1
 800ac28:	61da      	str	r2, [r3, #28]
      break;
 800ac2a:	e043      	b.n	800acb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68b9      	ldr	r1, [r7, #8]
 800ac32:	4618      	mov	r0, r3
 800ac34:	f000 fb22 	bl	800b27c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f042 0208 	orr.w	r2, r2, #8
 800ac46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f022 0204 	bic.w	r2, r2, #4
 800ac56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	691a      	ldr	r2, [r3, #16]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	430a      	orrs	r2, r1
 800ac68:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ac6a:	e023      	b.n	800acb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	68b9      	ldr	r1, [r7, #8]
 800ac72:	4618      	mov	r0, r3
 800ac74:	f000 fb66 	bl	800b344 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	021a      	lsls	r2, r3, #8
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	430a      	orrs	r2, r1
 800acaa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800acac:	e002      	b.n	800acb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800acae:	2301      	movs	r3, #1
 800acb0:	75fb      	strb	r3, [r7, #23]
      break;
 800acb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800acbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3718      	adds	r7, #24
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop

0800acc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800acd0:	bf00      	nop
 800acd2:	370c      	adds	r7, #12
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ace4:	bf00      	nop
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800acf8:	bf00      	nop
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad0c:	bf00      	nop
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a44      	ldr	r2, [pc, #272]	; (800ae3c <TIM_Base_SetConfig+0x124>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d013      	beq.n	800ad58 <TIM_Base_SetConfig+0x40>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad36:	d00f      	beq.n	800ad58 <TIM_Base_SetConfig+0x40>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4a41      	ldr	r2, [pc, #260]	; (800ae40 <TIM_Base_SetConfig+0x128>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d00b      	beq.n	800ad58 <TIM_Base_SetConfig+0x40>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4a40      	ldr	r2, [pc, #256]	; (800ae44 <TIM_Base_SetConfig+0x12c>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d007      	beq.n	800ad58 <TIM_Base_SetConfig+0x40>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4a3f      	ldr	r2, [pc, #252]	; (800ae48 <TIM_Base_SetConfig+0x130>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d003      	beq.n	800ad58 <TIM_Base_SetConfig+0x40>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a3e      	ldr	r2, [pc, #248]	; (800ae4c <TIM_Base_SetConfig+0x134>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d108      	bne.n	800ad6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	4a33      	ldr	r2, [pc, #204]	; (800ae3c <TIM_Base_SetConfig+0x124>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d027      	beq.n	800adc2 <TIM_Base_SetConfig+0xaa>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad78:	d023      	beq.n	800adc2 <TIM_Base_SetConfig+0xaa>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4a30      	ldr	r2, [pc, #192]	; (800ae40 <TIM_Base_SetConfig+0x128>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d01f      	beq.n	800adc2 <TIM_Base_SetConfig+0xaa>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4a2f      	ldr	r2, [pc, #188]	; (800ae44 <TIM_Base_SetConfig+0x12c>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d01b      	beq.n	800adc2 <TIM_Base_SetConfig+0xaa>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4a2e      	ldr	r2, [pc, #184]	; (800ae48 <TIM_Base_SetConfig+0x130>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d017      	beq.n	800adc2 <TIM_Base_SetConfig+0xaa>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a2d      	ldr	r2, [pc, #180]	; (800ae4c <TIM_Base_SetConfig+0x134>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d013      	beq.n	800adc2 <TIM_Base_SetConfig+0xaa>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a2c      	ldr	r2, [pc, #176]	; (800ae50 <TIM_Base_SetConfig+0x138>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d00f      	beq.n	800adc2 <TIM_Base_SetConfig+0xaa>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a2b      	ldr	r2, [pc, #172]	; (800ae54 <TIM_Base_SetConfig+0x13c>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d00b      	beq.n	800adc2 <TIM_Base_SetConfig+0xaa>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4a2a      	ldr	r2, [pc, #168]	; (800ae58 <TIM_Base_SetConfig+0x140>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d007      	beq.n	800adc2 <TIM_Base_SetConfig+0xaa>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a29      	ldr	r2, [pc, #164]	; (800ae5c <TIM_Base_SetConfig+0x144>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d003      	beq.n	800adc2 <TIM_Base_SetConfig+0xaa>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4a28      	ldr	r2, [pc, #160]	; (800ae60 <TIM_Base_SetConfig+0x148>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d108      	bne.n	800add4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	68fa      	ldr	r2, [r7, #12]
 800add0:	4313      	orrs	r3, r2
 800add2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	695b      	ldr	r3, [r3, #20]
 800adde:	4313      	orrs	r3, r2
 800ade0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	689a      	ldr	r2, [r3, #8]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a10      	ldr	r2, [pc, #64]	; (800ae3c <TIM_Base_SetConfig+0x124>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d00f      	beq.n	800ae20 <TIM_Base_SetConfig+0x108>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a12      	ldr	r2, [pc, #72]	; (800ae4c <TIM_Base_SetConfig+0x134>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d00b      	beq.n	800ae20 <TIM_Base_SetConfig+0x108>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4a11      	ldr	r2, [pc, #68]	; (800ae50 <TIM_Base_SetConfig+0x138>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d007      	beq.n	800ae20 <TIM_Base_SetConfig+0x108>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4a10      	ldr	r2, [pc, #64]	; (800ae54 <TIM_Base_SetConfig+0x13c>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d003      	beq.n	800ae20 <TIM_Base_SetConfig+0x108>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a0f      	ldr	r2, [pc, #60]	; (800ae58 <TIM_Base_SetConfig+0x140>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d103      	bne.n	800ae28 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	691a      	ldr	r2, [r3, #16]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	615a      	str	r2, [r3, #20]
}
 800ae2e:	bf00      	nop
 800ae30:	3714      	adds	r7, #20
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr
 800ae3a:	bf00      	nop
 800ae3c:	40010000 	.word	0x40010000
 800ae40:	40000400 	.word	0x40000400
 800ae44:	40000800 	.word	0x40000800
 800ae48:	40000c00 	.word	0x40000c00
 800ae4c:	40010400 	.word	0x40010400
 800ae50:	40014000 	.word	0x40014000
 800ae54:	40014400 	.word	0x40014400
 800ae58:	40014800 	.word	0x40014800
 800ae5c:	4000e000 	.word	0x4000e000
 800ae60:	4000e400 	.word	0x4000e400

0800ae64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b087      	sub	sp, #28
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6a1b      	ldr	r3, [r3, #32]
 800ae72:	f023 0201 	bic.w	r2, r3, #1
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a1b      	ldr	r3, [r3, #32]
 800ae7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	699b      	ldr	r3, [r3, #24]
 800ae8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	4b37      	ldr	r3, [pc, #220]	; (800af6c <TIM_OC1_SetConfig+0x108>)
 800ae90:	4013      	ands	r3, r2
 800ae92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f023 0303 	bic.w	r3, r3, #3
 800ae9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	f023 0302 	bic.w	r3, r3, #2
 800aeac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	697a      	ldr	r2, [r7, #20]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4a2d      	ldr	r2, [pc, #180]	; (800af70 <TIM_OC1_SetConfig+0x10c>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d00f      	beq.n	800aee0 <TIM_OC1_SetConfig+0x7c>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4a2c      	ldr	r2, [pc, #176]	; (800af74 <TIM_OC1_SetConfig+0x110>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d00b      	beq.n	800aee0 <TIM_OC1_SetConfig+0x7c>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a2b      	ldr	r2, [pc, #172]	; (800af78 <TIM_OC1_SetConfig+0x114>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d007      	beq.n	800aee0 <TIM_OC1_SetConfig+0x7c>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4a2a      	ldr	r2, [pc, #168]	; (800af7c <TIM_OC1_SetConfig+0x118>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d003      	beq.n	800aee0 <TIM_OC1_SetConfig+0x7c>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4a29      	ldr	r2, [pc, #164]	; (800af80 <TIM_OC1_SetConfig+0x11c>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d10c      	bne.n	800aefa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	f023 0308 	bic.w	r3, r3, #8
 800aee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	697a      	ldr	r2, [r7, #20]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	f023 0304 	bic.w	r3, r3, #4
 800aef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4a1c      	ldr	r2, [pc, #112]	; (800af70 <TIM_OC1_SetConfig+0x10c>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d00f      	beq.n	800af22 <TIM_OC1_SetConfig+0xbe>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4a1b      	ldr	r2, [pc, #108]	; (800af74 <TIM_OC1_SetConfig+0x110>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d00b      	beq.n	800af22 <TIM_OC1_SetConfig+0xbe>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4a1a      	ldr	r2, [pc, #104]	; (800af78 <TIM_OC1_SetConfig+0x114>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d007      	beq.n	800af22 <TIM_OC1_SetConfig+0xbe>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4a19      	ldr	r2, [pc, #100]	; (800af7c <TIM_OC1_SetConfig+0x118>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d003      	beq.n	800af22 <TIM_OC1_SetConfig+0xbe>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4a18      	ldr	r2, [pc, #96]	; (800af80 <TIM_OC1_SetConfig+0x11c>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d111      	bne.n	800af46 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	695b      	ldr	r3, [r3, #20]
 800af36:	693a      	ldr	r2, [r7, #16]
 800af38:	4313      	orrs	r3, r2
 800af3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	699b      	ldr	r3, [r3, #24]
 800af40:	693a      	ldr	r2, [r7, #16]
 800af42:	4313      	orrs	r3, r2
 800af44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	693a      	ldr	r2, [r7, #16]
 800af4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	685a      	ldr	r2, [r3, #4]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	697a      	ldr	r2, [r7, #20]
 800af5e:	621a      	str	r2, [r3, #32]
}
 800af60:	bf00      	nop
 800af62:	371c      	adds	r7, #28
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr
 800af6c:	fffeff8f 	.word	0xfffeff8f
 800af70:	40010000 	.word	0x40010000
 800af74:	40010400 	.word	0x40010400
 800af78:	40014000 	.word	0x40014000
 800af7c:	40014400 	.word	0x40014400
 800af80:	40014800 	.word	0x40014800

0800af84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af84:	b480      	push	{r7}
 800af86:	b087      	sub	sp, #28
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a1b      	ldr	r3, [r3, #32]
 800af92:	f023 0210 	bic.w	r2, r3, #16
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a1b      	ldr	r3, [r3, #32]
 800af9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	699b      	ldr	r3, [r3, #24]
 800afaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	4b34      	ldr	r3, [pc, #208]	; (800b080 <TIM_OC2_SetConfig+0xfc>)
 800afb0:	4013      	ands	r3, r2
 800afb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	021b      	lsls	r3, r3, #8
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	4313      	orrs	r3, r2
 800afc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	f023 0320 	bic.w	r3, r3, #32
 800afce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	011b      	lsls	r3, r3, #4
 800afd6:	697a      	ldr	r2, [r7, #20]
 800afd8:	4313      	orrs	r3, r2
 800afda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	4a29      	ldr	r2, [pc, #164]	; (800b084 <TIM_OC2_SetConfig+0x100>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d003      	beq.n	800afec <TIM_OC2_SetConfig+0x68>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4a28      	ldr	r2, [pc, #160]	; (800b088 <TIM_OC2_SetConfig+0x104>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d10d      	bne.n	800b008 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	011b      	lsls	r3, r3, #4
 800affa:	697a      	ldr	r2, [r7, #20]
 800affc:	4313      	orrs	r3, r2
 800affe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b006:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a1e      	ldr	r2, [pc, #120]	; (800b084 <TIM_OC2_SetConfig+0x100>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d00f      	beq.n	800b030 <TIM_OC2_SetConfig+0xac>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4a1d      	ldr	r2, [pc, #116]	; (800b088 <TIM_OC2_SetConfig+0x104>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d00b      	beq.n	800b030 <TIM_OC2_SetConfig+0xac>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4a1c      	ldr	r2, [pc, #112]	; (800b08c <TIM_OC2_SetConfig+0x108>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d007      	beq.n	800b030 <TIM_OC2_SetConfig+0xac>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4a1b      	ldr	r2, [pc, #108]	; (800b090 <TIM_OC2_SetConfig+0x10c>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d003      	beq.n	800b030 <TIM_OC2_SetConfig+0xac>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a1a      	ldr	r2, [pc, #104]	; (800b094 <TIM_OC2_SetConfig+0x110>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d113      	bne.n	800b058 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b036:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b03e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	695b      	ldr	r3, [r3, #20]
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	693a      	ldr	r2, [r7, #16]
 800b048:	4313      	orrs	r3, r2
 800b04a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	699b      	ldr	r3, [r3, #24]
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	693a      	ldr	r2, [r7, #16]
 800b054:	4313      	orrs	r3, r2
 800b056:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	693a      	ldr	r2, [r7, #16]
 800b05c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	68fa      	ldr	r2, [r7, #12]
 800b062:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	685a      	ldr	r2, [r3, #4]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	697a      	ldr	r2, [r7, #20]
 800b070:	621a      	str	r2, [r3, #32]
}
 800b072:	bf00      	nop
 800b074:	371c      	adds	r7, #28
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop
 800b080:	feff8fff 	.word	0xfeff8fff
 800b084:	40010000 	.word	0x40010000
 800b088:	40010400 	.word	0x40010400
 800b08c:	40014000 	.word	0x40014000
 800b090:	40014400 	.word	0x40014400
 800b094:	40014800 	.word	0x40014800

0800b098 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b098:	b480      	push	{r7}
 800b09a:	b087      	sub	sp, #28
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6a1b      	ldr	r3, [r3, #32]
 800b0a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	69db      	ldr	r3, [r3, #28]
 800b0be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b0c0:	68fa      	ldr	r2, [r7, #12]
 800b0c2:	4b33      	ldr	r3, [pc, #204]	; (800b190 <TIM_OC3_SetConfig+0xf8>)
 800b0c4:	4013      	ands	r3, r2
 800b0c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f023 0303 	bic.w	r3, r3, #3
 800b0ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	68fa      	ldr	r2, [r7, #12]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b0e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	021b      	lsls	r3, r3, #8
 800b0e8:	697a      	ldr	r2, [r7, #20]
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	4a28      	ldr	r2, [pc, #160]	; (800b194 <TIM_OC3_SetConfig+0xfc>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d003      	beq.n	800b0fe <TIM_OC3_SetConfig+0x66>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	4a27      	ldr	r2, [pc, #156]	; (800b198 <TIM_OC3_SetConfig+0x100>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d10d      	bne.n	800b11a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b104:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	68db      	ldr	r3, [r3, #12]
 800b10a:	021b      	lsls	r3, r3, #8
 800b10c:	697a      	ldr	r2, [r7, #20]
 800b10e:	4313      	orrs	r3, r2
 800b110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	4a1d      	ldr	r2, [pc, #116]	; (800b194 <TIM_OC3_SetConfig+0xfc>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d00f      	beq.n	800b142 <TIM_OC3_SetConfig+0xaa>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	4a1c      	ldr	r2, [pc, #112]	; (800b198 <TIM_OC3_SetConfig+0x100>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d00b      	beq.n	800b142 <TIM_OC3_SetConfig+0xaa>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4a1b      	ldr	r2, [pc, #108]	; (800b19c <TIM_OC3_SetConfig+0x104>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d007      	beq.n	800b142 <TIM_OC3_SetConfig+0xaa>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4a1a      	ldr	r2, [pc, #104]	; (800b1a0 <TIM_OC3_SetConfig+0x108>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d003      	beq.n	800b142 <TIM_OC3_SetConfig+0xaa>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4a19      	ldr	r2, [pc, #100]	; (800b1a4 <TIM_OC3_SetConfig+0x10c>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d113      	bne.n	800b16a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	695b      	ldr	r3, [r3, #20]
 800b156:	011b      	lsls	r3, r3, #4
 800b158:	693a      	ldr	r2, [r7, #16]
 800b15a:	4313      	orrs	r3, r2
 800b15c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	699b      	ldr	r3, [r3, #24]
 800b162:	011b      	lsls	r3, r3, #4
 800b164:	693a      	ldr	r2, [r7, #16]
 800b166:	4313      	orrs	r3, r2
 800b168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	693a      	ldr	r2, [r7, #16]
 800b16e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	68fa      	ldr	r2, [r7, #12]
 800b174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	685a      	ldr	r2, [r3, #4]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	697a      	ldr	r2, [r7, #20]
 800b182:	621a      	str	r2, [r3, #32]
}
 800b184:	bf00      	nop
 800b186:	371c      	adds	r7, #28
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr
 800b190:	fffeff8f 	.word	0xfffeff8f
 800b194:	40010000 	.word	0x40010000
 800b198:	40010400 	.word	0x40010400
 800b19c:	40014000 	.word	0x40014000
 800b1a0:	40014400 	.word	0x40014400
 800b1a4:	40014800 	.word	0x40014800

0800b1a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b087      	sub	sp, #28
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a1b      	ldr	r3, [r3, #32]
 800b1b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a1b      	ldr	r3, [r3, #32]
 800b1c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	69db      	ldr	r3, [r3, #28]
 800b1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	4b24      	ldr	r3, [pc, #144]	; (800b264 <TIM_OC4_SetConfig+0xbc>)
 800b1d4:	4013      	ands	r3, r2
 800b1d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	021b      	lsls	r3, r3, #8
 800b1e6:	68fa      	ldr	r2, [r7, #12]
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	031b      	lsls	r3, r3, #12
 800b1fa:	693a      	ldr	r2, [r7, #16]
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	4a19      	ldr	r2, [pc, #100]	; (800b268 <TIM_OC4_SetConfig+0xc0>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d00f      	beq.n	800b228 <TIM_OC4_SetConfig+0x80>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4a18      	ldr	r2, [pc, #96]	; (800b26c <TIM_OC4_SetConfig+0xc4>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d00b      	beq.n	800b228 <TIM_OC4_SetConfig+0x80>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	4a17      	ldr	r2, [pc, #92]	; (800b270 <TIM_OC4_SetConfig+0xc8>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d007      	beq.n	800b228 <TIM_OC4_SetConfig+0x80>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	4a16      	ldr	r2, [pc, #88]	; (800b274 <TIM_OC4_SetConfig+0xcc>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d003      	beq.n	800b228 <TIM_OC4_SetConfig+0x80>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	4a15      	ldr	r2, [pc, #84]	; (800b278 <TIM_OC4_SetConfig+0xd0>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d109      	bne.n	800b23c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b22e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	695b      	ldr	r3, [r3, #20]
 800b234:	019b      	lsls	r3, r3, #6
 800b236:	697a      	ldr	r2, [r7, #20]
 800b238:	4313      	orrs	r3, r2
 800b23a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	697a      	ldr	r2, [r7, #20]
 800b240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	68fa      	ldr	r2, [r7, #12]
 800b246:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	685a      	ldr	r2, [r3, #4]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	693a      	ldr	r2, [r7, #16]
 800b254:	621a      	str	r2, [r3, #32]
}
 800b256:	bf00      	nop
 800b258:	371c      	adds	r7, #28
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
 800b262:	bf00      	nop
 800b264:	feff8fff 	.word	0xfeff8fff
 800b268:	40010000 	.word	0x40010000
 800b26c:	40010400 	.word	0x40010400
 800b270:	40014000 	.word	0x40014000
 800b274:	40014400 	.word	0x40014400
 800b278:	40014800 	.word	0x40014800

0800b27c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b087      	sub	sp, #28
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6a1b      	ldr	r3, [r3, #32]
 800b28a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a1b      	ldr	r3, [r3, #32]
 800b296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b2a4:	68fa      	ldr	r2, [r7, #12]
 800b2a6:	4b21      	ldr	r3, [pc, #132]	; (800b32c <TIM_OC5_SetConfig+0xb0>)
 800b2a8:	4013      	ands	r3, r2
 800b2aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b2bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	041b      	lsls	r3, r3, #16
 800b2c4:	693a      	ldr	r2, [r7, #16]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a18      	ldr	r2, [pc, #96]	; (800b330 <TIM_OC5_SetConfig+0xb4>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d00f      	beq.n	800b2f2 <TIM_OC5_SetConfig+0x76>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a17      	ldr	r2, [pc, #92]	; (800b334 <TIM_OC5_SetConfig+0xb8>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d00b      	beq.n	800b2f2 <TIM_OC5_SetConfig+0x76>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4a16      	ldr	r2, [pc, #88]	; (800b338 <TIM_OC5_SetConfig+0xbc>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d007      	beq.n	800b2f2 <TIM_OC5_SetConfig+0x76>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	4a15      	ldr	r2, [pc, #84]	; (800b33c <TIM_OC5_SetConfig+0xc0>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d003      	beq.n	800b2f2 <TIM_OC5_SetConfig+0x76>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	4a14      	ldr	r2, [pc, #80]	; (800b340 <TIM_OC5_SetConfig+0xc4>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d109      	bne.n	800b306 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	695b      	ldr	r3, [r3, #20]
 800b2fe:	021b      	lsls	r3, r3, #8
 800b300:	697a      	ldr	r2, [r7, #20]
 800b302:	4313      	orrs	r3, r2
 800b304:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	697a      	ldr	r2, [r7, #20]
 800b30a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	68fa      	ldr	r2, [r7, #12]
 800b310:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	685a      	ldr	r2, [r3, #4]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	693a      	ldr	r2, [r7, #16]
 800b31e:	621a      	str	r2, [r3, #32]
}
 800b320:	bf00      	nop
 800b322:	371c      	adds	r7, #28
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr
 800b32c:	fffeff8f 	.word	0xfffeff8f
 800b330:	40010000 	.word	0x40010000
 800b334:	40010400 	.word	0x40010400
 800b338:	40014000 	.word	0x40014000
 800b33c:	40014400 	.word	0x40014400
 800b340:	40014800 	.word	0x40014800

0800b344 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b344:	b480      	push	{r7}
 800b346:	b087      	sub	sp, #28
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a1b      	ldr	r3, [r3, #32]
 800b352:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6a1b      	ldr	r3, [r3, #32]
 800b35e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b36c:	68fa      	ldr	r2, [r7, #12]
 800b36e:	4b22      	ldr	r3, [pc, #136]	; (800b3f8 <TIM_OC6_SetConfig+0xb4>)
 800b370:	4013      	ands	r3, r2
 800b372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	021b      	lsls	r3, r3, #8
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	4313      	orrs	r3, r2
 800b37e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b386:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	051b      	lsls	r3, r3, #20
 800b38e:	693a      	ldr	r2, [r7, #16]
 800b390:	4313      	orrs	r3, r2
 800b392:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4a19      	ldr	r2, [pc, #100]	; (800b3fc <TIM_OC6_SetConfig+0xb8>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d00f      	beq.n	800b3bc <TIM_OC6_SetConfig+0x78>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4a18      	ldr	r2, [pc, #96]	; (800b400 <TIM_OC6_SetConfig+0xbc>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d00b      	beq.n	800b3bc <TIM_OC6_SetConfig+0x78>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4a17      	ldr	r2, [pc, #92]	; (800b404 <TIM_OC6_SetConfig+0xc0>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d007      	beq.n	800b3bc <TIM_OC6_SetConfig+0x78>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	4a16      	ldr	r2, [pc, #88]	; (800b408 <TIM_OC6_SetConfig+0xc4>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d003      	beq.n	800b3bc <TIM_OC6_SetConfig+0x78>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	4a15      	ldr	r2, [pc, #84]	; (800b40c <TIM_OC6_SetConfig+0xc8>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d109      	bne.n	800b3d0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b3c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	695b      	ldr	r3, [r3, #20]
 800b3c8:	029b      	lsls	r3, r3, #10
 800b3ca:	697a      	ldr	r2, [r7, #20]
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	697a      	ldr	r2, [r7, #20]
 800b3d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	685a      	ldr	r2, [r3, #4]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	693a      	ldr	r2, [r7, #16]
 800b3e8:	621a      	str	r2, [r3, #32]
}
 800b3ea:	bf00      	nop
 800b3ec:	371c      	adds	r7, #28
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr
 800b3f6:	bf00      	nop
 800b3f8:	feff8fff 	.word	0xfeff8fff
 800b3fc:	40010000 	.word	0x40010000
 800b400:	40010400 	.word	0x40010400
 800b404:	40014000 	.word	0x40014000
 800b408:	40014400 	.word	0x40014400
 800b40c:	40014800 	.word	0x40014800

0800b410 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b410:	b480      	push	{r7}
 800b412:	b087      	sub	sp, #28
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	f003 031f 	and.w	r3, r3, #31
 800b422:	2201      	movs	r2, #1
 800b424:	fa02 f303 	lsl.w	r3, r2, r3
 800b428:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	6a1a      	ldr	r2, [r3, #32]
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	43db      	mvns	r3, r3
 800b432:	401a      	ands	r2, r3
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	6a1a      	ldr	r2, [r3, #32]
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	f003 031f 	and.w	r3, r3, #31
 800b442:	6879      	ldr	r1, [r7, #4]
 800b444:	fa01 f303 	lsl.w	r3, r1, r3
 800b448:	431a      	orrs	r2, r3
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	621a      	str	r2, [r3, #32]
}
 800b44e:	bf00      	nop
 800b450:	371c      	adds	r7, #28
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr
	...

0800b45c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d101      	bne.n	800b474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b470:	2302      	movs	r3, #2
 800b472:	e077      	b.n	800b564 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2201      	movs	r2, #1
 800b478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2202      	movs	r2, #2
 800b480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	689b      	ldr	r3, [r3, #8]
 800b492:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a35      	ldr	r2, [pc, #212]	; (800b570 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d004      	beq.n	800b4a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a34      	ldr	r2, [pc, #208]	; (800b574 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d108      	bne.n	800b4ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b4ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68fa      	ldr	r2, [r7, #12]
 800b4d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a25      	ldr	r2, [pc, #148]	; (800b570 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d02c      	beq.n	800b538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4e6:	d027      	beq.n	800b538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a22      	ldr	r2, [pc, #136]	; (800b578 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d022      	beq.n	800b538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a21      	ldr	r2, [pc, #132]	; (800b57c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d01d      	beq.n	800b538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a1f      	ldr	r2, [pc, #124]	; (800b580 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d018      	beq.n	800b538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a1a      	ldr	r2, [pc, #104]	; (800b574 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d013      	beq.n	800b538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a1b      	ldr	r2, [pc, #108]	; (800b584 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d00e      	beq.n	800b538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a1a      	ldr	r2, [pc, #104]	; (800b588 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d009      	beq.n	800b538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a18      	ldr	r2, [pc, #96]	; (800b58c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d004      	beq.n	800b538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4a17      	ldr	r2, [pc, #92]	; (800b590 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d10c      	bne.n	800b552 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b53e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	68ba      	ldr	r2, [r7, #8]
 800b546:	4313      	orrs	r3, r2
 800b548:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	68ba      	ldr	r2, [r7, #8]
 800b550:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2201      	movs	r2, #1
 800b556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2200      	movs	r2, #0
 800b55e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	3714      	adds	r7, #20
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr
 800b570:	40010000 	.word	0x40010000
 800b574:	40010400 	.word	0x40010400
 800b578:	40000400 	.word	0x40000400
 800b57c:	40000800 	.word	0x40000800
 800b580:	40000c00 	.word	0x40000c00
 800b584:	40001800 	.word	0x40001800
 800b588:	40014000 	.word	0x40014000
 800b58c:	4000e000 	.word	0x4000e000
 800b590:	4000e400 	.word	0x4000e400

0800b594 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d101      	bne.n	800b5b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b5ac:	2302      	movs	r3, #2
 800b5ae:	e087      	b.n	800b6c0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	691b      	ldr	r3, [r3, #16]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	695b      	ldr	r3, [r3, #20]
 800b608:	4313      	orrs	r3, r2
 800b60a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b616:	4313      	orrs	r3, r2
 800b618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	699b      	ldr	r3, [r3, #24]
 800b624:	041b      	lsls	r3, r3, #16
 800b626:	4313      	orrs	r3, r2
 800b628:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a27      	ldr	r2, [pc, #156]	; (800b6cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d004      	beq.n	800b63e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a25      	ldr	r2, [pc, #148]	; (800b6d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d106      	bne.n	800b64c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	69db      	ldr	r3, [r3, #28]
 800b648:	4313      	orrs	r3, r2
 800b64a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a1e      	ldr	r2, [pc, #120]	; (800b6cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d004      	beq.n	800b660 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a1d      	ldr	r2, [pc, #116]	; (800b6d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d126      	bne.n	800b6ae <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b66a:	051b      	lsls	r3, r3, #20
 800b66c:	4313      	orrs	r3, r2
 800b66e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	6a1b      	ldr	r3, [r3, #32]
 800b67a:	4313      	orrs	r3, r2
 800b67c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b688:	4313      	orrs	r3, r2
 800b68a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a0e      	ldr	r2, [pc, #56]	; (800b6cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d004      	beq.n	800b6a0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a0d      	ldr	r2, [pc, #52]	; (800b6d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d106      	bne.n	800b6ae <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	68fa      	ldr	r2, [r7, #12]
 800b6b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3714      	adds	r7, #20
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr
 800b6cc:	40010000 	.word	0x40010000
 800b6d0:	40010400 	.word	0x40010400

0800b6d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b6dc:	bf00      	nop
 800b6de:	370c      	adds	r7, #12
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b6f0:	bf00      	nop
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b704:	bf00      	nop
 800b706:	370c      	adds	r7, #12
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d101      	bne.n	800b722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b71e:	2301      	movs	r3, #1
 800b720:	e042      	b.n	800b7a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d106      	bne.n	800b73a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f7f8 fd05 	bl	8004144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2224      	movs	r2, #36	; 0x24
 800b73e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	681a      	ldr	r2, [r3, #0]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f022 0201 	bic.w	r2, r2, #1
 800b750:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 fcdc 	bl	800c110 <UART_SetConfig>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d101      	bne.n	800b762 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b75e:	2301      	movs	r3, #1
 800b760:	e022      	b.n	800b7a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b766:	2b00      	cmp	r3, #0
 800b768:	d002      	beq.n	800b770 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f001 fb3c 	bl	800cde8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	685a      	ldr	r2, [r3, #4]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b77e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	689a      	ldr	r2, [r3, #8]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b78e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f042 0201 	orr.w	r2, r2, #1
 800b79e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f001 fbc3 	bl	800cf2c <UART_CheckIdleState>
 800b7a6:	4603      	mov	r3, r0
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3708      	adds	r7, #8
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b08a      	sub	sp, #40	; 0x28
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7c4:	2b20      	cmp	r3, #32
 800b7c6:	d17a      	bne.n	800b8be <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d002      	beq.n	800b7d4 <HAL_UART_Transmit_DMA+0x24>
 800b7ce:	88fb      	ldrh	r3, [r7, #6]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d101      	bne.n	800b7d8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	e073      	b.n	800b8c0 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d101      	bne.n	800b7e6 <HAL_UART_Transmit_DMA+0x36>
 800b7e2:	2302      	movs	r3, #2
 800b7e4:	e06c      	b.n	800b8c0 <HAL_UART_Transmit_DMA+0x110>
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	68ba      	ldr	r2, [r7, #8]
 800b7f2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	88fa      	ldrh	r2, [r7, #6]
 800b7f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	88fa      	ldrh	r2, [r7, #6]
 800b800:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2200      	movs	r2, #0
 800b808:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2221      	movs	r2, #33	; 0x21
 800b810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d02c      	beq.n	800b876 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b820:	4a29      	ldr	r2, [pc, #164]	; (800b8c8 <HAL_UART_Transmit_DMA+0x118>)
 800b822:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b828:	4a28      	ldr	r2, [pc, #160]	; (800b8cc <HAL_UART_Transmit_DMA+0x11c>)
 800b82a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b830:	4a27      	ldr	r2, [pc, #156]	; (800b8d0 <HAL_UART_Transmit_DMA+0x120>)
 800b832:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b838:	2200      	movs	r2, #0
 800b83a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b844:	4619      	mov	r1, r3
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	3328      	adds	r3, #40	; 0x28
 800b84c:	461a      	mov	r2, r3
 800b84e:	88fb      	ldrh	r3, [r7, #6]
 800b850:	f7f9 fd02 	bl	8005258 <HAL_DMA_Start_IT>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00d      	beq.n	800b876 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2210      	movs	r2, #16
 800b85e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2200      	movs	r2, #0
 800b866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2220      	movs	r2, #32
 800b86e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800b872:	2301      	movs	r3, #1
 800b874:	e024      	b.n	800b8c0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2240      	movs	r2, #64	; 0x40
 800b87c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2200      	movs	r2, #0
 800b882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	3308      	adds	r3, #8
 800b88c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	e853 3f00 	ldrex	r3, [r3]
 800b894:	613b      	str	r3, [r7, #16]
   return(result);
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b89c:	627b      	str	r3, [r7, #36]	; 0x24
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	3308      	adds	r3, #8
 800b8a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8a6:	623a      	str	r2, [r7, #32]
 800b8a8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8aa:	69f9      	ldr	r1, [r7, #28]
 800b8ac:	6a3a      	ldr	r2, [r7, #32]
 800b8ae:	e841 2300 	strex	r3, r2, [r1]
 800b8b2:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8b4:	69bb      	ldr	r3, [r7, #24]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d1e5      	bne.n	800b886 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	e000      	b.n	800b8c0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800b8be:	2302      	movs	r3, #2
  }
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3728      	adds	r7, #40	; 0x28
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	0800d3f5 	.word	0x0800d3f5
 800b8cc:	0800d48b 	.word	0x0800d48b
 800b8d0:	0800d601 	.word	0x0800d601

0800b8d4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b08a      	sub	sp, #40	; 0x28
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	4613      	mov	r3, r2
 800b8e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8e8:	2b20      	cmp	r3, #32
 800b8ea:	d142      	bne.n	800b972 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d002      	beq.n	800b8f8 <HAL_UART_Receive_DMA+0x24>
 800b8f2:	88fb      	ldrh	r3, [r7, #6]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d101      	bne.n	800b8fc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	e03b      	b.n	800b974 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b902:	2b01      	cmp	r3, #1
 800b904:	d101      	bne.n	800b90a <HAL_UART_Receive_DMA+0x36>
 800b906:	2302      	movs	r3, #2
 800b908:	e034      	b.n	800b974 <HAL_UART_Receive_DMA+0xa0>
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2201      	movs	r2, #1
 800b90e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2200      	movs	r2, #0
 800b916:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4a17      	ldr	r2, [pc, #92]	; (800b97c <HAL_UART_Receive_DMA+0xa8>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d01f      	beq.n	800b962 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d018      	beq.n	800b962 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	e853 3f00 	ldrex	r3, [r3]
 800b93c:	613b      	str	r3, [r7, #16]
   return(result);
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b944:	627b      	str	r3, [r7, #36]	; 0x24
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	461a      	mov	r2, r3
 800b94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94e:	623b      	str	r3, [r7, #32]
 800b950:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b952:	69f9      	ldr	r1, [r7, #28]
 800b954:	6a3a      	ldr	r2, [r7, #32]
 800b956:	e841 2300 	strex	r3, r2, [r1]
 800b95a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1e6      	bne.n	800b930 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b962:	88fb      	ldrh	r3, [r7, #6]
 800b964:	461a      	mov	r2, r3
 800b966:	68b9      	ldr	r1, [r7, #8]
 800b968:	68f8      	ldr	r0, [r7, #12]
 800b96a:	f001 fbf3 	bl	800d154 <UART_Start_Receive_DMA>
 800b96e:	4603      	mov	r3, r0
 800b970:	e000      	b.n	800b974 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b972:	2302      	movs	r3, #2
  }
}
 800b974:	4618      	mov	r0, r3
 800b976:	3728      	adds	r7, #40	; 0x28
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	58000c00 	.word	0x58000c00

0800b980 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b0ba      	sub	sp, #232	; 0xe8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	69db      	ldr	r3, [r3, #28]
 800b98e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b9a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b9aa:	f640 030f 	movw	r3, #2063	; 0x80f
 800b9ae:	4013      	ands	r3, r2
 800b9b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b9b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d11b      	bne.n	800b9f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b9bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9c0:	f003 0320 	and.w	r3, r3, #32
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d015      	beq.n	800b9f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b9c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9cc:	f003 0320 	and.w	r3, r3, #32
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d105      	bne.n	800b9e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b9d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d009      	beq.n	800b9f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f000 835a 	beq.w	800c09e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	4798      	blx	r3
      }
      return;
 800b9f2:	e354      	b.n	800c09e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b9f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 811f 	beq.w	800bc3c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b9fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ba02:	4b8b      	ldr	r3, [pc, #556]	; (800bc30 <HAL_UART_IRQHandler+0x2b0>)
 800ba04:	4013      	ands	r3, r2
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d106      	bne.n	800ba18 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ba0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ba0e:	4b89      	ldr	r3, [pc, #548]	; (800bc34 <HAL_UART_IRQHandler+0x2b4>)
 800ba10:	4013      	ands	r3, r2
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f000 8112 	beq.w	800bc3c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ba18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba1c:	f003 0301 	and.w	r3, r3, #1
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d011      	beq.n	800ba48 <HAL_UART_IRQHandler+0xc8>
 800ba24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d00b      	beq.n	800ba48 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2201      	movs	r2, #1
 800ba36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba3e:	f043 0201 	orr.w	r2, r3, #1
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba4c:	f003 0302 	and.w	r3, r3, #2
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d011      	beq.n	800ba78 <HAL_UART_IRQHandler+0xf8>
 800ba54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba58:	f003 0301 	and.w	r3, r3, #1
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d00b      	beq.n	800ba78 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2202      	movs	r2, #2
 800ba66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba6e:	f043 0204 	orr.w	r2, r3, #4
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba7c:	f003 0304 	and.w	r3, r3, #4
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d011      	beq.n	800baa8 <HAL_UART_IRQHandler+0x128>
 800ba84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba88:	f003 0301 	and.w	r3, r3, #1
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d00b      	beq.n	800baa8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2204      	movs	r2, #4
 800ba96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba9e:	f043 0202 	orr.w	r2, r3, #2
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800baa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baac:	f003 0308 	and.w	r3, r3, #8
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d017      	beq.n	800bae4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bab8:	f003 0320 	and.w	r3, r3, #32
 800babc:	2b00      	cmp	r3, #0
 800babe:	d105      	bne.n	800bacc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bac0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bac4:	4b5a      	ldr	r3, [pc, #360]	; (800bc30 <HAL_UART_IRQHandler+0x2b0>)
 800bac6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d00b      	beq.n	800bae4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2208      	movs	r2, #8
 800bad2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bada:	f043 0208 	orr.w	r2, r3, #8
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800baec:	2b00      	cmp	r3, #0
 800baee:	d012      	beq.n	800bb16 <HAL_UART_IRQHandler+0x196>
 800baf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d00c      	beq.n	800bb16 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb0c:	f043 0220 	orr.w	r2, r3, #32
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	f000 82c0 	beq.w	800c0a2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb26:	f003 0320 	and.w	r3, r3, #32
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d013      	beq.n	800bb56 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bb2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb32:	f003 0320 	and.w	r3, r3, #32
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d105      	bne.n	800bb46 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bb3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d007      	beq.n	800bb56 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d003      	beq.n	800bb56 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	689b      	ldr	r3, [r3, #8]
 800bb66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb6a:	2b40      	cmp	r3, #64	; 0x40
 800bb6c:	d005      	beq.n	800bb7a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bb6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb72:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d04f      	beq.n	800bc1a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f001 fbd4 	bl	800d328 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb8a:	2b40      	cmp	r3, #64	; 0x40
 800bb8c:	d141      	bne.n	800bc12 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	3308      	adds	r3, #8
 800bb94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb9c:	e853 3f00 	ldrex	r3, [r3]
 800bba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bba4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	3308      	adds	r3, #8
 800bbb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bbba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bbbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bbc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bbca:	e841 2300 	strex	r3, r2, [r1]
 800bbce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bbd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d1d9      	bne.n	800bb8e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d013      	beq.n	800bc0a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbe6:	4a14      	ldr	r2, [pc, #80]	; (800bc38 <HAL_UART_IRQHandler+0x2b8>)
 800bbe8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7fa f8ba 	bl	8005d68 <HAL_DMA_Abort_IT>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d017      	beq.n	800bc2a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bc04:	4610      	mov	r0, r2
 800bc06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc08:	e00f      	b.n	800bc2a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 fa6a 	bl	800c0e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc10:	e00b      	b.n	800bc2a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 fa66 	bl	800c0e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc18:	e007      	b.n	800bc2a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 fa62 	bl	800c0e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bc28:	e23b      	b.n	800c0a2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc2a:	bf00      	nop
    return;
 800bc2c:	e239      	b.n	800c0a2 <HAL_UART_IRQHandler+0x722>
 800bc2e:	bf00      	nop
 800bc30:	10000001 	.word	0x10000001
 800bc34:	04000120 	.word	0x04000120
 800bc38:	0800d681 	.word	0x0800d681

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	f040 81ce 	bne.w	800bfe2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bc46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc4a:	f003 0310 	and.w	r3, r3, #16
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	f000 81c7 	beq.w	800bfe2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bc54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc58:	f003 0310 	and.w	r3, r3, #16
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	f000 81c0 	beq.w	800bfe2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	2210      	movs	r2, #16
 800bc68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc74:	2b40      	cmp	r3, #64	; 0x40
 800bc76:	f040 813b 	bne.w	800bef0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a8b      	ldr	r2, [pc, #556]	; (800beb0 <HAL_UART_IRQHandler+0x530>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d059      	beq.n	800bd3a <HAL_UART_IRQHandler+0x3ba>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a89      	ldr	r2, [pc, #548]	; (800beb4 <HAL_UART_IRQHandler+0x534>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d053      	beq.n	800bd3a <HAL_UART_IRQHandler+0x3ba>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4a87      	ldr	r2, [pc, #540]	; (800beb8 <HAL_UART_IRQHandler+0x538>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d04d      	beq.n	800bd3a <HAL_UART_IRQHandler+0x3ba>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a85      	ldr	r2, [pc, #532]	; (800bebc <HAL_UART_IRQHandler+0x53c>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d047      	beq.n	800bd3a <HAL_UART_IRQHandler+0x3ba>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a83      	ldr	r2, [pc, #524]	; (800bec0 <HAL_UART_IRQHandler+0x540>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d041      	beq.n	800bd3a <HAL_UART_IRQHandler+0x3ba>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a81      	ldr	r2, [pc, #516]	; (800bec4 <HAL_UART_IRQHandler+0x544>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d03b      	beq.n	800bd3a <HAL_UART_IRQHandler+0x3ba>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a7f      	ldr	r2, [pc, #508]	; (800bec8 <HAL_UART_IRQHandler+0x548>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d035      	beq.n	800bd3a <HAL_UART_IRQHandler+0x3ba>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a7d      	ldr	r2, [pc, #500]	; (800becc <HAL_UART_IRQHandler+0x54c>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d02f      	beq.n	800bd3a <HAL_UART_IRQHandler+0x3ba>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a7b      	ldr	r2, [pc, #492]	; (800bed0 <HAL_UART_IRQHandler+0x550>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d029      	beq.n	800bd3a <HAL_UART_IRQHandler+0x3ba>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a79      	ldr	r2, [pc, #484]	; (800bed4 <HAL_UART_IRQHandler+0x554>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d023      	beq.n	800bd3a <HAL_UART_IRQHandler+0x3ba>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a77      	ldr	r2, [pc, #476]	; (800bed8 <HAL_UART_IRQHandler+0x558>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d01d      	beq.n	800bd3a <HAL_UART_IRQHandler+0x3ba>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4a75      	ldr	r2, [pc, #468]	; (800bedc <HAL_UART_IRQHandler+0x55c>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d017      	beq.n	800bd3a <HAL_UART_IRQHandler+0x3ba>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a73      	ldr	r2, [pc, #460]	; (800bee0 <HAL_UART_IRQHandler+0x560>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d011      	beq.n	800bd3a <HAL_UART_IRQHandler+0x3ba>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a71      	ldr	r2, [pc, #452]	; (800bee4 <HAL_UART_IRQHandler+0x564>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d00b      	beq.n	800bd3a <HAL_UART_IRQHandler+0x3ba>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4a6f      	ldr	r2, [pc, #444]	; (800bee8 <HAL_UART_IRQHandler+0x568>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d005      	beq.n	800bd3a <HAL_UART_IRQHandler+0x3ba>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a6d      	ldr	r2, [pc, #436]	; (800beec <HAL_UART_IRQHandler+0x56c>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d105      	bne.n	800bd46 <HAL_UART_IRQHandler+0x3c6>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	e004      	b.n	800bd50 <HAL_UART_IRQHandler+0x3d0>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bd54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	f000 81a4 	beq.w	800c0a6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bd64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	f080 819c 	bcs.w	800c0a6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd7c:	69db      	ldr	r3, [r3, #28]
 800bd7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd82:	f000 8086 	beq.w	800be92 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd92:	e853 3f00 	ldrex	r3, [r3]
 800bd96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bd9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bda2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	461a      	mov	r2, r3
 800bdac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bdb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bdb4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bdbc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bdc0:	e841 2300 	strex	r3, r2, [r1]
 800bdc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bdc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d1da      	bne.n	800bd86 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	3308      	adds	r3, #8
 800bdd6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bdda:	e853 3f00 	ldrex	r3, [r3]
 800bdde:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bde0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bde2:	f023 0301 	bic.w	r3, r3, #1
 800bde6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	3308      	adds	r3, #8
 800bdf0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bdf4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bdf8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bdfc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800be00:	e841 2300 	strex	r3, r2, [r1]
 800be04:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800be06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d1e1      	bne.n	800bdd0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	3308      	adds	r3, #8
 800be12:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be16:	e853 3f00 	ldrex	r3, [r3]
 800be1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800be1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	3308      	adds	r3, #8
 800be2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800be30:	66fa      	str	r2, [r7, #108]	; 0x6c
 800be32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800be36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800be38:	e841 2300 	strex	r3, r2, [r1]
 800be3c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800be3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be40:	2b00      	cmp	r3, #0
 800be42:	d1e3      	bne.n	800be0c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2220      	movs	r2, #32
 800be48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2200      	movs	r2, #0
 800be50:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be5a:	e853 3f00 	ldrex	r3, [r3]
 800be5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800be60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be62:	f023 0310 	bic.w	r3, r3, #16
 800be66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	461a      	mov	r2, r3
 800be70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be74:	65bb      	str	r3, [r7, #88]	; 0x58
 800be76:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800be7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be7c:	e841 2300 	strex	r3, r2, [r1]
 800be80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800be82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be84:	2b00      	cmp	r3, #0
 800be86:	d1e4      	bne.n	800be52 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7f9 fc4d 	bl	800572c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	1ad3      	subs	r3, r2, r3
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	4619      	mov	r1, r3
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 f926 	bl	800c0f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800beac:	e0fb      	b.n	800c0a6 <HAL_UART_IRQHandler+0x726>
 800beae:	bf00      	nop
 800beb0:	40020010 	.word	0x40020010
 800beb4:	40020028 	.word	0x40020028
 800beb8:	40020040 	.word	0x40020040
 800bebc:	40020058 	.word	0x40020058
 800bec0:	40020070 	.word	0x40020070
 800bec4:	40020088 	.word	0x40020088
 800bec8:	400200a0 	.word	0x400200a0
 800becc:	400200b8 	.word	0x400200b8
 800bed0:	40020410 	.word	0x40020410
 800bed4:	40020428 	.word	0x40020428
 800bed8:	40020440 	.word	0x40020440
 800bedc:	40020458 	.word	0x40020458
 800bee0:	40020470 	.word	0x40020470
 800bee4:	40020488 	.word	0x40020488
 800bee8:	400204a0 	.word	0x400204a0
 800beec:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800befc:	b29b      	uxth	r3, r3
 800befe:	1ad3      	subs	r3, r2, r3
 800bf00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	f000 80cc 	beq.w	800c0aa <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800bf12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f000 80c7 	beq.w	800c0aa <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf24:	e853 3f00 	ldrex	r3, [r3]
 800bf28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	461a      	mov	r2, r3
 800bf3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bf3e:	647b      	str	r3, [r7, #68]	; 0x44
 800bf40:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf46:	e841 2300 	strex	r3, r2, [r1]
 800bf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1e4      	bne.n	800bf1c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	3308      	adds	r3, #8
 800bf58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5c:	e853 3f00 	ldrex	r3, [r3]
 800bf60:	623b      	str	r3, [r7, #32]
   return(result);
 800bf62:	6a3a      	ldr	r2, [r7, #32]
 800bf64:	4b54      	ldr	r3, [pc, #336]	; (800c0b8 <HAL_UART_IRQHandler+0x738>)
 800bf66:	4013      	ands	r3, r2
 800bf68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	3308      	adds	r3, #8
 800bf72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bf76:	633a      	str	r2, [r7, #48]	; 0x30
 800bf78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf7e:	e841 2300 	strex	r3, r2, [r1]
 800bf82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d1e3      	bne.n	800bf52 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2220      	movs	r2, #32
 800bf8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2200      	movs	r2, #0
 800bf96:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	e853 3f00 	ldrex	r3, [r3]
 800bfaa:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f023 0310 	bic.w	r3, r3, #16
 800bfb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	461a      	mov	r2, r3
 800bfbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bfc0:	61fb      	str	r3, [r7, #28]
 800bfc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc4:	69b9      	ldr	r1, [r7, #24]
 800bfc6:	69fa      	ldr	r2, [r7, #28]
 800bfc8:	e841 2300 	strex	r3, r2, [r1]
 800bfcc:	617b      	str	r3, [r7, #20]
   return(result);
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1e4      	bne.n	800bf9e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bfd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bfd8:	4619      	mov	r1, r3
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 f88c 	bl	800c0f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bfe0:	e063      	b.n	800c0aa <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bfe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d00e      	beq.n	800c00c <HAL_UART_IRQHandler+0x68c>
 800bfee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d008      	beq.n	800c00c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c002:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f001 fb7c 	bl	800d702 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c00a:	e051      	b.n	800c0b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c00c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c014:	2b00      	cmp	r3, #0
 800c016:	d014      	beq.n	800c042 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c01c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c020:	2b00      	cmp	r3, #0
 800c022:	d105      	bne.n	800c030 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c028:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d008      	beq.n	800c042 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c034:	2b00      	cmp	r3, #0
 800c036:	d03a      	beq.n	800c0ae <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	4798      	blx	r3
    }
    return;
 800c040:	e035      	b.n	800c0ae <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d009      	beq.n	800c062 <HAL_UART_IRQHandler+0x6e2>
 800c04e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c056:	2b00      	cmp	r3, #0
 800c058:	d003      	beq.n	800c062 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f001 fb26 	bl	800d6ac <UART_EndTransmit_IT>
    return;
 800c060:	e026      	b.n	800c0b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c066:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d009      	beq.n	800c082 <HAL_UART_IRQHandler+0x702>
 800c06e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c072:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c076:	2b00      	cmp	r3, #0
 800c078:	d003      	beq.n	800c082 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f001 fb55 	bl	800d72a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c080:	e016      	b.n	800c0b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c086:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d010      	beq.n	800c0b0 <HAL_UART_IRQHandler+0x730>
 800c08e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c092:	2b00      	cmp	r3, #0
 800c094:	da0c      	bge.n	800c0b0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f001 fb3d 	bl	800d716 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c09c:	e008      	b.n	800c0b0 <HAL_UART_IRQHandler+0x730>
      return;
 800c09e:	bf00      	nop
 800c0a0:	e006      	b.n	800c0b0 <HAL_UART_IRQHandler+0x730>
    return;
 800c0a2:	bf00      	nop
 800c0a4:	e004      	b.n	800c0b0 <HAL_UART_IRQHandler+0x730>
      return;
 800c0a6:	bf00      	nop
 800c0a8:	e002      	b.n	800c0b0 <HAL_UART_IRQHandler+0x730>
      return;
 800c0aa:	bf00      	nop
 800c0ac:	e000      	b.n	800c0b0 <HAL_UART_IRQHandler+0x730>
    return;
 800c0ae:	bf00      	nop
  }
}
 800c0b0:	37e8      	adds	r7, #232	; 0xe8
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	effffffe 	.word	0xeffffffe

0800c0bc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c0c4:	bf00      	nop
 800c0c6:	370c      	adds	r7, #12
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b083      	sub	sp, #12
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c0d8:	bf00      	nop
 800c0da:	370c      	adds	r7, #12
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr

0800c0e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c0ec:	bf00      	nop
 800c0ee:	370c      	adds	r7, #12
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b083      	sub	sp, #12
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	460b      	mov	r3, r1
 800c102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c104:	bf00      	nop
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c114:	b092      	sub	sp, #72	; 0x48
 800c116:	af00      	add	r7, sp, #0
 800c118:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c11a:	2300      	movs	r3, #0
 800c11c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	689a      	ldr	r2, [r3, #8]
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	691b      	ldr	r3, [r3, #16]
 800c128:	431a      	orrs	r2, r3
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	695b      	ldr	r3, [r3, #20]
 800c12e:	431a      	orrs	r2, r3
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	69db      	ldr	r3, [r3, #28]
 800c134:	4313      	orrs	r3, r2
 800c136:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	4bbe      	ldr	r3, [pc, #760]	; (800c438 <UART_SetConfig+0x328>)
 800c140:	4013      	ands	r3, r2
 800c142:	697a      	ldr	r2, [r7, #20]
 800c144:	6812      	ldr	r2, [r2, #0]
 800c146:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c148:	430b      	orrs	r3, r1
 800c14a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	68da      	ldr	r2, [r3, #12]
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	430a      	orrs	r2, r1
 800c160:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	699b      	ldr	r3, [r3, #24]
 800c166:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4ab3      	ldr	r2, [pc, #716]	; (800c43c <UART_SetConfig+0x32c>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d004      	beq.n	800c17c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	6a1b      	ldr	r3, [r3, #32]
 800c176:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c178:	4313      	orrs	r3, r2
 800c17a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	689a      	ldr	r2, [r3, #8]
 800c182:	4baf      	ldr	r3, [pc, #700]	; (800c440 <UART_SetConfig+0x330>)
 800c184:	4013      	ands	r3, r2
 800c186:	697a      	ldr	r2, [r7, #20]
 800c188:	6812      	ldr	r2, [r2, #0]
 800c18a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c18c:	430b      	orrs	r3, r1
 800c18e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c196:	f023 010f 	bic.w	r1, r3, #15
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	430a      	orrs	r2, r1
 800c1a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4aa6      	ldr	r2, [pc, #664]	; (800c444 <UART_SetConfig+0x334>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d177      	bne.n	800c2a0 <UART_SetConfig+0x190>
 800c1b0:	4ba5      	ldr	r3, [pc, #660]	; (800c448 <UART_SetConfig+0x338>)
 800c1b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c1b8:	2b28      	cmp	r3, #40	; 0x28
 800c1ba:	d86d      	bhi.n	800c298 <UART_SetConfig+0x188>
 800c1bc:	a201      	add	r2, pc, #4	; (adr r2, 800c1c4 <UART_SetConfig+0xb4>)
 800c1be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c2:	bf00      	nop
 800c1c4:	0800c269 	.word	0x0800c269
 800c1c8:	0800c299 	.word	0x0800c299
 800c1cc:	0800c299 	.word	0x0800c299
 800c1d0:	0800c299 	.word	0x0800c299
 800c1d4:	0800c299 	.word	0x0800c299
 800c1d8:	0800c299 	.word	0x0800c299
 800c1dc:	0800c299 	.word	0x0800c299
 800c1e0:	0800c299 	.word	0x0800c299
 800c1e4:	0800c271 	.word	0x0800c271
 800c1e8:	0800c299 	.word	0x0800c299
 800c1ec:	0800c299 	.word	0x0800c299
 800c1f0:	0800c299 	.word	0x0800c299
 800c1f4:	0800c299 	.word	0x0800c299
 800c1f8:	0800c299 	.word	0x0800c299
 800c1fc:	0800c299 	.word	0x0800c299
 800c200:	0800c299 	.word	0x0800c299
 800c204:	0800c279 	.word	0x0800c279
 800c208:	0800c299 	.word	0x0800c299
 800c20c:	0800c299 	.word	0x0800c299
 800c210:	0800c299 	.word	0x0800c299
 800c214:	0800c299 	.word	0x0800c299
 800c218:	0800c299 	.word	0x0800c299
 800c21c:	0800c299 	.word	0x0800c299
 800c220:	0800c299 	.word	0x0800c299
 800c224:	0800c281 	.word	0x0800c281
 800c228:	0800c299 	.word	0x0800c299
 800c22c:	0800c299 	.word	0x0800c299
 800c230:	0800c299 	.word	0x0800c299
 800c234:	0800c299 	.word	0x0800c299
 800c238:	0800c299 	.word	0x0800c299
 800c23c:	0800c299 	.word	0x0800c299
 800c240:	0800c299 	.word	0x0800c299
 800c244:	0800c289 	.word	0x0800c289
 800c248:	0800c299 	.word	0x0800c299
 800c24c:	0800c299 	.word	0x0800c299
 800c250:	0800c299 	.word	0x0800c299
 800c254:	0800c299 	.word	0x0800c299
 800c258:	0800c299 	.word	0x0800c299
 800c25c:	0800c299 	.word	0x0800c299
 800c260:	0800c299 	.word	0x0800c299
 800c264:	0800c291 	.word	0x0800c291
 800c268:	2301      	movs	r3, #1
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c26e:	e326      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c270:	2304      	movs	r3, #4
 800c272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c276:	e322      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c278:	2308      	movs	r3, #8
 800c27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c27e:	e31e      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c280:	2310      	movs	r3, #16
 800c282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c286:	e31a      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c288:	2320      	movs	r3, #32
 800c28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c28e:	e316      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c290:	2340      	movs	r3, #64	; 0x40
 800c292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c296:	e312      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c298:	2380      	movs	r3, #128	; 0x80
 800c29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c29e:	e30e      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a69      	ldr	r2, [pc, #420]	; (800c44c <UART_SetConfig+0x33c>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d130      	bne.n	800c30c <UART_SetConfig+0x1fc>
 800c2aa:	4b67      	ldr	r3, [pc, #412]	; (800c448 <UART_SetConfig+0x338>)
 800c2ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2ae:	f003 0307 	and.w	r3, r3, #7
 800c2b2:	2b05      	cmp	r3, #5
 800c2b4:	d826      	bhi.n	800c304 <UART_SetConfig+0x1f4>
 800c2b6:	a201      	add	r2, pc, #4	; (adr r2, 800c2bc <UART_SetConfig+0x1ac>)
 800c2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2bc:	0800c2d5 	.word	0x0800c2d5
 800c2c0:	0800c2dd 	.word	0x0800c2dd
 800c2c4:	0800c2e5 	.word	0x0800c2e5
 800c2c8:	0800c2ed 	.word	0x0800c2ed
 800c2cc:	0800c2f5 	.word	0x0800c2f5
 800c2d0:	0800c2fd 	.word	0x0800c2fd
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2da:	e2f0      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c2dc:	2304      	movs	r3, #4
 800c2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2e2:	e2ec      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c2e4:	2308      	movs	r3, #8
 800c2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ea:	e2e8      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c2ec:	2310      	movs	r3, #16
 800c2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2f2:	e2e4      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c2f4:	2320      	movs	r3, #32
 800c2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2fa:	e2e0      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c2fc:	2340      	movs	r3, #64	; 0x40
 800c2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c302:	e2dc      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c304:	2380      	movs	r3, #128	; 0x80
 800c306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c30a:	e2d8      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4a4f      	ldr	r2, [pc, #316]	; (800c450 <UART_SetConfig+0x340>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d130      	bne.n	800c378 <UART_SetConfig+0x268>
 800c316:	4b4c      	ldr	r3, [pc, #304]	; (800c448 <UART_SetConfig+0x338>)
 800c318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c31a:	f003 0307 	and.w	r3, r3, #7
 800c31e:	2b05      	cmp	r3, #5
 800c320:	d826      	bhi.n	800c370 <UART_SetConfig+0x260>
 800c322:	a201      	add	r2, pc, #4	; (adr r2, 800c328 <UART_SetConfig+0x218>)
 800c324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c328:	0800c341 	.word	0x0800c341
 800c32c:	0800c349 	.word	0x0800c349
 800c330:	0800c351 	.word	0x0800c351
 800c334:	0800c359 	.word	0x0800c359
 800c338:	0800c361 	.word	0x0800c361
 800c33c:	0800c369 	.word	0x0800c369
 800c340:	2300      	movs	r3, #0
 800c342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c346:	e2ba      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c348:	2304      	movs	r3, #4
 800c34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c34e:	e2b6      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c350:	2308      	movs	r3, #8
 800c352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c356:	e2b2      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c358:	2310      	movs	r3, #16
 800c35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c35e:	e2ae      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c360:	2320      	movs	r3, #32
 800c362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c366:	e2aa      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c368:	2340      	movs	r3, #64	; 0x40
 800c36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c36e:	e2a6      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c370:	2380      	movs	r3, #128	; 0x80
 800c372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c376:	e2a2      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a35      	ldr	r2, [pc, #212]	; (800c454 <UART_SetConfig+0x344>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d130      	bne.n	800c3e4 <UART_SetConfig+0x2d4>
 800c382:	4b31      	ldr	r3, [pc, #196]	; (800c448 <UART_SetConfig+0x338>)
 800c384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c386:	f003 0307 	and.w	r3, r3, #7
 800c38a:	2b05      	cmp	r3, #5
 800c38c:	d826      	bhi.n	800c3dc <UART_SetConfig+0x2cc>
 800c38e:	a201      	add	r2, pc, #4	; (adr r2, 800c394 <UART_SetConfig+0x284>)
 800c390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c394:	0800c3ad 	.word	0x0800c3ad
 800c398:	0800c3b5 	.word	0x0800c3b5
 800c39c:	0800c3bd 	.word	0x0800c3bd
 800c3a0:	0800c3c5 	.word	0x0800c3c5
 800c3a4:	0800c3cd 	.word	0x0800c3cd
 800c3a8:	0800c3d5 	.word	0x0800c3d5
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3b2:	e284      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c3b4:	2304      	movs	r3, #4
 800c3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ba:	e280      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c3bc:	2308      	movs	r3, #8
 800c3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3c2:	e27c      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c3c4:	2310      	movs	r3, #16
 800c3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ca:	e278      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c3cc:	2320      	movs	r3, #32
 800c3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3d2:	e274      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c3d4:	2340      	movs	r3, #64	; 0x40
 800c3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3da:	e270      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c3dc:	2380      	movs	r3, #128	; 0x80
 800c3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3e2:	e26c      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a1b      	ldr	r2, [pc, #108]	; (800c458 <UART_SetConfig+0x348>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d142      	bne.n	800c474 <UART_SetConfig+0x364>
 800c3ee:	4b16      	ldr	r3, [pc, #88]	; (800c448 <UART_SetConfig+0x338>)
 800c3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3f2:	f003 0307 	and.w	r3, r3, #7
 800c3f6:	2b05      	cmp	r3, #5
 800c3f8:	d838      	bhi.n	800c46c <UART_SetConfig+0x35c>
 800c3fa:	a201      	add	r2, pc, #4	; (adr r2, 800c400 <UART_SetConfig+0x2f0>)
 800c3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c400:	0800c419 	.word	0x0800c419
 800c404:	0800c421 	.word	0x0800c421
 800c408:	0800c429 	.word	0x0800c429
 800c40c:	0800c431 	.word	0x0800c431
 800c410:	0800c45d 	.word	0x0800c45d
 800c414:	0800c465 	.word	0x0800c465
 800c418:	2300      	movs	r3, #0
 800c41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c41e:	e24e      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c420:	2304      	movs	r3, #4
 800c422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c426:	e24a      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c428:	2308      	movs	r3, #8
 800c42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c42e:	e246      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c430:	2310      	movs	r3, #16
 800c432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c436:	e242      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c438:	cfff69f3 	.word	0xcfff69f3
 800c43c:	58000c00 	.word	0x58000c00
 800c440:	11fff4ff 	.word	0x11fff4ff
 800c444:	40011000 	.word	0x40011000
 800c448:	58024400 	.word	0x58024400
 800c44c:	40004400 	.word	0x40004400
 800c450:	40004800 	.word	0x40004800
 800c454:	40004c00 	.word	0x40004c00
 800c458:	40005000 	.word	0x40005000
 800c45c:	2320      	movs	r3, #32
 800c45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c462:	e22c      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c464:	2340      	movs	r3, #64	; 0x40
 800c466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c46a:	e228      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c46c:	2380      	movs	r3, #128	; 0x80
 800c46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c472:	e224      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4ab1      	ldr	r2, [pc, #708]	; (800c740 <UART_SetConfig+0x630>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d176      	bne.n	800c56c <UART_SetConfig+0x45c>
 800c47e:	4bb1      	ldr	r3, [pc, #708]	; (800c744 <UART_SetConfig+0x634>)
 800c480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c482:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c486:	2b28      	cmp	r3, #40	; 0x28
 800c488:	d86c      	bhi.n	800c564 <UART_SetConfig+0x454>
 800c48a:	a201      	add	r2, pc, #4	; (adr r2, 800c490 <UART_SetConfig+0x380>)
 800c48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c490:	0800c535 	.word	0x0800c535
 800c494:	0800c565 	.word	0x0800c565
 800c498:	0800c565 	.word	0x0800c565
 800c49c:	0800c565 	.word	0x0800c565
 800c4a0:	0800c565 	.word	0x0800c565
 800c4a4:	0800c565 	.word	0x0800c565
 800c4a8:	0800c565 	.word	0x0800c565
 800c4ac:	0800c565 	.word	0x0800c565
 800c4b0:	0800c53d 	.word	0x0800c53d
 800c4b4:	0800c565 	.word	0x0800c565
 800c4b8:	0800c565 	.word	0x0800c565
 800c4bc:	0800c565 	.word	0x0800c565
 800c4c0:	0800c565 	.word	0x0800c565
 800c4c4:	0800c565 	.word	0x0800c565
 800c4c8:	0800c565 	.word	0x0800c565
 800c4cc:	0800c565 	.word	0x0800c565
 800c4d0:	0800c545 	.word	0x0800c545
 800c4d4:	0800c565 	.word	0x0800c565
 800c4d8:	0800c565 	.word	0x0800c565
 800c4dc:	0800c565 	.word	0x0800c565
 800c4e0:	0800c565 	.word	0x0800c565
 800c4e4:	0800c565 	.word	0x0800c565
 800c4e8:	0800c565 	.word	0x0800c565
 800c4ec:	0800c565 	.word	0x0800c565
 800c4f0:	0800c54d 	.word	0x0800c54d
 800c4f4:	0800c565 	.word	0x0800c565
 800c4f8:	0800c565 	.word	0x0800c565
 800c4fc:	0800c565 	.word	0x0800c565
 800c500:	0800c565 	.word	0x0800c565
 800c504:	0800c565 	.word	0x0800c565
 800c508:	0800c565 	.word	0x0800c565
 800c50c:	0800c565 	.word	0x0800c565
 800c510:	0800c555 	.word	0x0800c555
 800c514:	0800c565 	.word	0x0800c565
 800c518:	0800c565 	.word	0x0800c565
 800c51c:	0800c565 	.word	0x0800c565
 800c520:	0800c565 	.word	0x0800c565
 800c524:	0800c565 	.word	0x0800c565
 800c528:	0800c565 	.word	0x0800c565
 800c52c:	0800c565 	.word	0x0800c565
 800c530:	0800c55d 	.word	0x0800c55d
 800c534:	2301      	movs	r3, #1
 800c536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c53a:	e1c0      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c53c:	2304      	movs	r3, #4
 800c53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c542:	e1bc      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c544:	2308      	movs	r3, #8
 800c546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c54a:	e1b8      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c54c:	2310      	movs	r3, #16
 800c54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c552:	e1b4      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c554:	2320      	movs	r3, #32
 800c556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c55a:	e1b0      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c55c:	2340      	movs	r3, #64	; 0x40
 800c55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c562:	e1ac      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c564:	2380      	movs	r3, #128	; 0x80
 800c566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c56a:	e1a8      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4a75      	ldr	r2, [pc, #468]	; (800c748 <UART_SetConfig+0x638>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d130      	bne.n	800c5d8 <UART_SetConfig+0x4c8>
 800c576:	4b73      	ldr	r3, [pc, #460]	; (800c744 <UART_SetConfig+0x634>)
 800c578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c57a:	f003 0307 	and.w	r3, r3, #7
 800c57e:	2b05      	cmp	r3, #5
 800c580:	d826      	bhi.n	800c5d0 <UART_SetConfig+0x4c0>
 800c582:	a201      	add	r2, pc, #4	; (adr r2, 800c588 <UART_SetConfig+0x478>)
 800c584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c588:	0800c5a1 	.word	0x0800c5a1
 800c58c:	0800c5a9 	.word	0x0800c5a9
 800c590:	0800c5b1 	.word	0x0800c5b1
 800c594:	0800c5b9 	.word	0x0800c5b9
 800c598:	0800c5c1 	.word	0x0800c5c1
 800c59c:	0800c5c9 	.word	0x0800c5c9
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5a6:	e18a      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c5a8:	2304      	movs	r3, #4
 800c5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ae:	e186      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c5b0:	2308      	movs	r3, #8
 800c5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5b6:	e182      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c5b8:	2310      	movs	r3, #16
 800c5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5be:	e17e      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c5c0:	2320      	movs	r3, #32
 800c5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5c6:	e17a      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c5c8:	2340      	movs	r3, #64	; 0x40
 800c5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ce:	e176      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c5d0:	2380      	movs	r3, #128	; 0x80
 800c5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5d6:	e172      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a5b      	ldr	r2, [pc, #364]	; (800c74c <UART_SetConfig+0x63c>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d130      	bne.n	800c644 <UART_SetConfig+0x534>
 800c5e2:	4b58      	ldr	r3, [pc, #352]	; (800c744 <UART_SetConfig+0x634>)
 800c5e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5e6:	f003 0307 	and.w	r3, r3, #7
 800c5ea:	2b05      	cmp	r3, #5
 800c5ec:	d826      	bhi.n	800c63c <UART_SetConfig+0x52c>
 800c5ee:	a201      	add	r2, pc, #4	; (adr r2, 800c5f4 <UART_SetConfig+0x4e4>)
 800c5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f4:	0800c60d 	.word	0x0800c60d
 800c5f8:	0800c615 	.word	0x0800c615
 800c5fc:	0800c61d 	.word	0x0800c61d
 800c600:	0800c625 	.word	0x0800c625
 800c604:	0800c62d 	.word	0x0800c62d
 800c608:	0800c635 	.word	0x0800c635
 800c60c:	2300      	movs	r3, #0
 800c60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c612:	e154      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c614:	2304      	movs	r3, #4
 800c616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c61a:	e150      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c61c:	2308      	movs	r3, #8
 800c61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c622:	e14c      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c624:	2310      	movs	r3, #16
 800c626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c62a:	e148      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c62c:	2320      	movs	r3, #32
 800c62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c632:	e144      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c634:	2340      	movs	r3, #64	; 0x40
 800c636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c63a:	e140      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c63c:	2380      	movs	r3, #128	; 0x80
 800c63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c642:	e13c      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4a41      	ldr	r2, [pc, #260]	; (800c750 <UART_SetConfig+0x640>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	f040 8082 	bne.w	800c754 <UART_SetConfig+0x644>
 800c650:	4b3c      	ldr	r3, [pc, #240]	; (800c744 <UART_SetConfig+0x634>)
 800c652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c654:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c658:	2b28      	cmp	r3, #40	; 0x28
 800c65a:	d86d      	bhi.n	800c738 <UART_SetConfig+0x628>
 800c65c:	a201      	add	r2, pc, #4	; (adr r2, 800c664 <UART_SetConfig+0x554>)
 800c65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c662:	bf00      	nop
 800c664:	0800c709 	.word	0x0800c709
 800c668:	0800c739 	.word	0x0800c739
 800c66c:	0800c739 	.word	0x0800c739
 800c670:	0800c739 	.word	0x0800c739
 800c674:	0800c739 	.word	0x0800c739
 800c678:	0800c739 	.word	0x0800c739
 800c67c:	0800c739 	.word	0x0800c739
 800c680:	0800c739 	.word	0x0800c739
 800c684:	0800c711 	.word	0x0800c711
 800c688:	0800c739 	.word	0x0800c739
 800c68c:	0800c739 	.word	0x0800c739
 800c690:	0800c739 	.word	0x0800c739
 800c694:	0800c739 	.word	0x0800c739
 800c698:	0800c739 	.word	0x0800c739
 800c69c:	0800c739 	.word	0x0800c739
 800c6a0:	0800c739 	.word	0x0800c739
 800c6a4:	0800c719 	.word	0x0800c719
 800c6a8:	0800c739 	.word	0x0800c739
 800c6ac:	0800c739 	.word	0x0800c739
 800c6b0:	0800c739 	.word	0x0800c739
 800c6b4:	0800c739 	.word	0x0800c739
 800c6b8:	0800c739 	.word	0x0800c739
 800c6bc:	0800c739 	.word	0x0800c739
 800c6c0:	0800c739 	.word	0x0800c739
 800c6c4:	0800c721 	.word	0x0800c721
 800c6c8:	0800c739 	.word	0x0800c739
 800c6cc:	0800c739 	.word	0x0800c739
 800c6d0:	0800c739 	.word	0x0800c739
 800c6d4:	0800c739 	.word	0x0800c739
 800c6d8:	0800c739 	.word	0x0800c739
 800c6dc:	0800c739 	.word	0x0800c739
 800c6e0:	0800c739 	.word	0x0800c739
 800c6e4:	0800c729 	.word	0x0800c729
 800c6e8:	0800c739 	.word	0x0800c739
 800c6ec:	0800c739 	.word	0x0800c739
 800c6f0:	0800c739 	.word	0x0800c739
 800c6f4:	0800c739 	.word	0x0800c739
 800c6f8:	0800c739 	.word	0x0800c739
 800c6fc:	0800c739 	.word	0x0800c739
 800c700:	0800c739 	.word	0x0800c739
 800c704:	0800c731 	.word	0x0800c731
 800c708:	2301      	movs	r3, #1
 800c70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c70e:	e0d6      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c710:	2304      	movs	r3, #4
 800c712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c716:	e0d2      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c718:	2308      	movs	r3, #8
 800c71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c71e:	e0ce      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c720:	2310      	movs	r3, #16
 800c722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c726:	e0ca      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c728:	2320      	movs	r3, #32
 800c72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c72e:	e0c6      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c730:	2340      	movs	r3, #64	; 0x40
 800c732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c736:	e0c2      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c738:	2380      	movs	r3, #128	; 0x80
 800c73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c73e:	e0be      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c740:	40011400 	.word	0x40011400
 800c744:	58024400 	.word	0x58024400
 800c748:	40007800 	.word	0x40007800
 800c74c:	40007c00 	.word	0x40007c00
 800c750:	40011800 	.word	0x40011800
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4aad      	ldr	r2, [pc, #692]	; (800ca10 <UART_SetConfig+0x900>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d176      	bne.n	800c84c <UART_SetConfig+0x73c>
 800c75e:	4bad      	ldr	r3, [pc, #692]	; (800ca14 <UART_SetConfig+0x904>)
 800c760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c762:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c766:	2b28      	cmp	r3, #40	; 0x28
 800c768:	d86c      	bhi.n	800c844 <UART_SetConfig+0x734>
 800c76a:	a201      	add	r2, pc, #4	; (adr r2, 800c770 <UART_SetConfig+0x660>)
 800c76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c770:	0800c815 	.word	0x0800c815
 800c774:	0800c845 	.word	0x0800c845
 800c778:	0800c845 	.word	0x0800c845
 800c77c:	0800c845 	.word	0x0800c845
 800c780:	0800c845 	.word	0x0800c845
 800c784:	0800c845 	.word	0x0800c845
 800c788:	0800c845 	.word	0x0800c845
 800c78c:	0800c845 	.word	0x0800c845
 800c790:	0800c81d 	.word	0x0800c81d
 800c794:	0800c845 	.word	0x0800c845
 800c798:	0800c845 	.word	0x0800c845
 800c79c:	0800c845 	.word	0x0800c845
 800c7a0:	0800c845 	.word	0x0800c845
 800c7a4:	0800c845 	.word	0x0800c845
 800c7a8:	0800c845 	.word	0x0800c845
 800c7ac:	0800c845 	.word	0x0800c845
 800c7b0:	0800c825 	.word	0x0800c825
 800c7b4:	0800c845 	.word	0x0800c845
 800c7b8:	0800c845 	.word	0x0800c845
 800c7bc:	0800c845 	.word	0x0800c845
 800c7c0:	0800c845 	.word	0x0800c845
 800c7c4:	0800c845 	.word	0x0800c845
 800c7c8:	0800c845 	.word	0x0800c845
 800c7cc:	0800c845 	.word	0x0800c845
 800c7d0:	0800c82d 	.word	0x0800c82d
 800c7d4:	0800c845 	.word	0x0800c845
 800c7d8:	0800c845 	.word	0x0800c845
 800c7dc:	0800c845 	.word	0x0800c845
 800c7e0:	0800c845 	.word	0x0800c845
 800c7e4:	0800c845 	.word	0x0800c845
 800c7e8:	0800c845 	.word	0x0800c845
 800c7ec:	0800c845 	.word	0x0800c845
 800c7f0:	0800c835 	.word	0x0800c835
 800c7f4:	0800c845 	.word	0x0800c845
 800c7f8:	0800c845 	.word	0x0800c845
 800c7fc:	0800c845 	.word	0x0800c845
 800c800:	0800c845 	.word	0x0800c845
 800c804:	0800c845 	.word	0x0800c845
 800c808:	0800c845 	.word	0x0800c845
 800c80c:	0800c845 	.word	0x0800c845
 800c810:	0800c83d 	.word	0x0800c83d
 800c814:	2301      	movs	r3, #1
 800c816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c81a:	e050      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c81c:	2304      	movs	r3, #4
 800c81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c822:	e04c      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c824:	2308      	movs	r3, #8
 800c826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c82a:	e048      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c82c:	2310      	movs	r3, #16
 800c82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c832:	e044      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c834:	2320      	movs	r3, #32
 800c836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c83a:	e040      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c83c:	2340      	movs	r3, #64	; 0x40
 800c83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c842:	e03c      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c844:	2380      	movs	r3, #128	; 0x80
 800c846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c84a:	e038      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a71      	ldr	r2, [pc, #452]	; (800ca18 <UART_SetConfig+0x908>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d130      	bne.n	800c8b8 <UART_SetConfig+0x7a8>
 800c856:	4b6f      	ldr	r3, [pc, #444]	; (800ca14 <UART_SetConfig+0x904>)
 800c858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c85a:	f003 0307 	and.w	r3, r3, #7
 800c85e:	2b05      	cmp	r3, #5
 800c860:	d826      	bhi.n	800c8b0 <UART_SetConfig+0x7a0>
 800c862:	a201      	add	r2, pc, #4	; (adr r2, 800c868 <UART_SetConfig+0x758>)
 800c864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c868:	0800c881 	.word	0x0800c881
 800c86c:	0800c889 	.word	0x0800c889
 800c870:	0800c891 	.word	0x0800c891
 800c874:	0800c899 	.word	0x0800c899
 800c878:	0800c8a1 	.word	0x0800c8a1
 800c87c:	0800c8a9 	.word	0x0800c8a9
 800c880:	2302      	movs	r3, #2
 800c882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c886:	e01a      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c888:	2304      	movs	r3, #4
 800c88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c88e:	e016      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c890:	2308      	movs	r3, #8
 800c892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c896:	e012      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c898:	2310      	movs	r3, #16
 800c89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c89e:	e00e      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c8a0:	2320      	movs	r3, #32
 800c8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8a6:	e00a      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c8a8:	2340      	movs	r3, #64	; 0x40
 800c8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ae:	e006      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c8b0:	2380      	movs	r3, #128	; 0x80
 800c8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8b6:	e002      	b.n	800c8be <UART_SetConfig+0x7ae>
 800c8b8:	2380      	movs	r3, #128	; 0x80
 800c8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a55      	ldr	r2, [pc, #340]	; (800ca18 <UART_SetConfig+0x908>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	f040 80f8 	bne.w	800caba <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c8ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c8ce:	2b20      	cmp	r3, #32
 800c8d0:	dc46      	bgt.n	800c960 <UART_SetConfig+0x850>
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	db75      	blt.n	800c9c2 <UART_SetConfig+0x8b2>
 800c8d6:	3b02      	subs	r3, #2
 800c8d8:	2b1e      	cmp	r3, #30
 800c8da:	d872      	bhi.n	800c9c2 <UART_SetConfig+0x8b2>
 800c8dc:	a201      	add	r2, pc, #4	; (adr r2, 800c8e4 <UART_SetConfig+0x7d4>)
 800c8de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e2:	bf00      	nop
 800c8e4:	0800c967 	.word	0x0800c967
 800c8e8:	0800c9c3 	.word	0x0800c9c3
 800c8ec:	0800c96f 	.word	0x0800c96f
 800c8f0:	0800c9c3 	.word	0x0800c9c3
 800c8f4:	0800c9c3 	.word	0x0800c9c3
 800c8f8:	0800c9c3 	.word	0x0800c9c3
 800c8fc:	0800c97f 	.word	0x0800c97f
 800c900:	0800c9c3 	.word	0x0800c9c3
 800c904:	0800c9c3 	.word	0x0800c9c3
 800c908:	0800c9c3 	.word	0x0800c9c3
 800c90c:	0800c9c3 	.word	0x0800c9c3
 800c910:	0800c9c3 	.word	0x0800c9c3
 800c914:	0800c9c3 	.word	0x0800c9c3
 800c918:	0800c9c3 	.word	0x0800c9c3
 800c91c:	0800c98f 	.word	0x0800c98f
 800c920:	0800c9c3 	.word	0x0800c9c3
 800c924:	0800c9c3 	.word	0x0800c9c3
 800c928:	0800c9c3 	.word	0x0800c9c3
 800c92c:	0800c9c3 	.word	0x0800c9c3
 800c930:	0800c9c3 	.word	0x0800c9c3
 800c934:	0800c9c3 	.word	0x0800c9c3
 800c938:	0800c9c3 	.word	0x0800c9c3
 800c93c:	0800c9c3 	.word	0x0800c9c3
 800c940:	0800c9c3 	.word	0x0800c9c3
 800c944:	0800c9c3 	.word	0x0800c9c3
 800c948:	0800c9c3 	.word	0x0800c9c3
 800c94c:	0800c9c3 	.word	0x0800c9c3
 800c950:	0800c9c3 	.word	0x0800c9c3
 800c954:	0800c9c3 	.word	0x0800c9c3
 800c958:	0800c9c3 	.word	0x0800c9c3
 800c95c:	0800c9b5 	.word	0x0800c9b5
 800c960:	2b40      	cmp	r3, #64	; 0x40
 800c962:	d02a      	beq.n	800c9ba <UART_SetConfig+0x8aa>
 800c964:	e02d      	b.n	800c9c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c966:	f7fc ff87 	bl	8009878 <HAL_RCCEx_GetD3PCLK1Freq>
 800c96a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c96c:	e02f      	b.n	800c9ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c96e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c972:	4618      	mov	r0, r3
 800c974:	f7fc ff96 	bl	80098a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c97c:	e027      	b.n	800c9ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c97e:	f107 0318 	add.w	r3, r7, #24
 800c982:	4618      	mov	r0, r3
 800c984:	f7fd f8e2 	bl	8009b4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c98c:	e01f      	b.n	800c9ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c98e:	4b21      	ldr	r3, [pc, #132]	; (800ca14 <UART_SetConfig+0x904>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f003 0320 	and.w	r3, r3, #32
 800c996:	2b00      	cmp	r3, #0
 800c998:	d009      	beq.n	800c9ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c99a:	4b1e      	ldr	r3, [pc, #120]	; (800ca14 <UART_SetConfig+0x904>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	08db      	lsrs	r3, r3, #3
 800c9a0:	f003 0303 	and.w	r3, r3, #3
 800c9a4:	4a1d      	ldr	r2, [pc, #116]	; (800ca1c <UART_SetConfig+0x90c>)
 800c9a6:	fa22 f303 	lsr.w	r3, r2, r3
 800c9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c9ac:	e00f      	b.n	800c9ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c9ae:	4b1b      	ldr	r3, [pc, #108]	; (800ca1c <UART_SetConfig+0x90c>)
 800c9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9b2:	e00c      	b.n	800c9ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c9b4:	4b1a      	ldr	r3, [pc, #104]	; (800ca20 <UART_SetConfig+0x910>)
 800c9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9b8:	e009      	b.n	800c9ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9c0:	e005      	b.n	800c9ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c9cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c9ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	f000 81ee 	beq.w	800cdb2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9da:	4a12      	ldr	r2, [pc, #72]	; (800ca24 <UART_SetConfig+0x914>)
 800c9dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9e8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	685a      	ldr	r2, [r3, #4]
 800c9ee:	4613      	mov	r3, r2
 800c9f0:	005b      	lsls	r3, r3, #1
 800c9f2:	4413      	add	r3, r2
 800c9f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d305      	bcc.n	800ca06 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d910      	bls.n	800ca28 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ca06:	2301      	movs	r3, #1
 800ca08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ca0c:	e1d1      	b.n	800cdb2 <UART_SetConfig+0xca2>
 800ca0e:	bf00      	nop
 800ca10:	40011c00 	.word	0x40011c00
 800ca14:	58024400 	.word	0x58024400
 800ca18:	58000c00 	.word	0x58000c00
 800ca1c:	03d09000 	.word	0x03d09000
 800ca20:	003d0900 	.word	0x003d0900
 800ca24:	0800dfa8 	.word	0x0800dfa8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	60bb      	str	r3, [r7, #8]
 800ca2e:	60fa      	str	r2, [r7, #12]
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca34:	4ac0      	ldr	r2, [pc, #768]	; (800cd38 <UART_SetConfig+0xc28>)
 800ca36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca3a:	b29b      	uxth	r3, r3
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	603b      	str	r3, [r7, #0]
 800ca40:	607a      	str	r2, [r7, #4]
 800ca42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ca4a:	f7f3 fc69 	bl	8000320 <__aeabi_uldivmod>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	460b      	mov	r3, r1
 800ca52:	4610      	mov	r0, r2
 800ca54:	4619      	mov	r1, r3
 800ca56:	f04f 0200 	mov.w	r2, #0
 800ca5a:	f04f 0300 	mov.w	r3, #0
 800ca5e:	020b      	lsls	r3, r1, #8
 800ca60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca64:	0202      	lsls	r2, r0, #8
 800ca66:	6979      	ldr	r1, [r7, #20]
 800ca68:	6849      	ldr	r1, [r1, #4]
 800ca6a:	0849      	lsrs	r1, r1, #1
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	460c      	mov	r4, r1
 800ca70:	4605      	mov	r5, r0
 800ca72:	eb12 0804 	adds.w	r8, r2, r4
 800ca76:	eb43 0905 	adc.w	r9, r3, r5
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	469a      	mov	sl, r3
 800ca82:	4693      	mov	fp, r2
 800ca84:	4652      	mov	r2, sl
 800ca86:	465b      	mov	r3, fp
 800ca88:	4640      	mov	r0, r8
 800ca8a:	4649      	mov	r1, r9
 800ca8c:	f7f3 fc48 	bl	8000320 <__aeabi_uldivmod>
 800ca90:	4602      	mov	r2, r0
 800ca92:	460b      	mov	r3, r1
 800ca94:	4613      	mov	r3, r2
 800ca96:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca9e:	d308      	bcc.n	800cab2 <UART_SetConfig+0x9a2>
 800caa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800caa6:	d204      	bcs.n	800cab2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caae:	60da      	str	r2, [r3, #12]
 800cab0:	e17f      	b.n	800cdb2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800cab2:	2301      	movs	r3, #1
 800cab4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cab8:	e17b      	b.n	800cdb2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	69db      	ldr	r3, [r3, #28]
 800cabe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cac2:	f040 80bd 	bne.w	800cc40 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800cac6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800caca:	2b20      	cmp	r3, #32
 800cacc:	dc48      	bgt.n	800cb60 <UART_SetConfig+0xa50>
 800cace:	2b00      	cmp	r3, #0
 800cad0:	db7b      	blt.n	800cbca <UART_SetConfig+0xaba>
 800cad2:	2b20      	cmp	r3, #32
 800cad4:	d879      	bhi.n	800cbca <UART_SetConfig+0xaba>
 800cad6:	a201      	add	r2, pc, #4	; (adr r2, 800cadc <UART_SetConfig+0x9cc>)
 800cad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cadc:	0800cb67 	.word	0x0800cb67
 800cae0:	0800cb6f 	.word	0x0800cb6f
 800cae4:	0800cbcb 	.word	0x0800cbcb
 800cae8:	0800cbcb 	.word	0x0800cbcb
 800caec:	0800cb77 	.word	0x0800cb77
 800caf0:	0800cbcb 	.word	0x0800cbcb
 800caf4:	0800cbcb 	.word	0x0800cbcb
 800caf8:	0800cbcb 	.word	0x0800cbcb
 800cafc:	0800cb87 	.word	0x0800cb87
 800cb00:	0800cbcb 	.word	0x0800cbcb
 800cb04:	0800cbcb 	.word	0x0800cbcb
 800cb08:	0800cbcb 	.word	0x0800cbcb
 800cb0c:	0800cbcb 	.word	0x0800cbcb
 800cb10:	0800cbcb 	.word	0x0800cbcb
 800cb14:	0800cbcb 	.word	0x0800cbcb
 800cb18:	0800cbcb 	.word	0x0800cbcb
 800cb1c:	0800cb97 	.word	0x0800cb97
 800cb20:	0800cbcb 	.word	0x0800cbcb
 800cb24:	0800cbcb 	.word	0x0800cbcb
 800cb28:	0800cbcb 	.word	0x0800cbcb
 800cb2c:	0800cbcb 	.word	0x0800cbcb
 800cb30:	0800cbcb 	.word	0x0800cbcb
 800cb34:	0800cbcb 	.word	0x0800cbcb
 800cb38:	0800cbcb 	.word	0x0800cbcb
 800cb3c:	0800cbcb 	.word	0x0800cbcb
 800cb40:	0800cbcb 	.word	0x0800cbcb
 800cb44:	0800cbcb 	.word	0x0800cbcb
 800cb48:	0800cbcb 	.word	0x0800cbcb
 800cb4c:	0800cbcb 	.word	0x0800cbcb
 800cb50:	0800cbcb 	.word	0x0800cbcb
 800cb54:	0800cbcb 	.word	0x0800cbcb
 800cb58:	0800cbcb 	.word	0x0800cbcb
 800cb5c:	0800cbbd 	.word	0x0800cbbd
 800cb60:	2b40      	cmp	r3, #64	; 0x40
 800cb62:	d02e      	beq.n	800cbc2 <UART_SetConfig+0xab2>
 800cb64:	e031      	b.n	800cbca <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb66:	f7fb ff61 	bl	8008a2c <HAL_RCC_GetPCLK1Freq>
 800cb6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb6c:	e033      	b.n	800cbd6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb6e:	f7fb ff73 	bl	8008a58 <HAL_RCC_GetPCLK2Freq>
 800cb72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb74:	e02f      	b.n	800cbd6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7fc fe92 	bl	80098a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb84:	e027      	b.n	800cbd6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb86:	f107 0318 	add.w	r3, r7, #24
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7fc ffde 	bl	8009b4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb90:	69fb      	ldr	r3, [r7, #28]
 800cb92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb94:	e01f      	b.n	800cbd6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb96:	4b69      	ldr	r3, [pc, #420]	; (800cd3c <UART_SetConfig+0xc2c>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f003 0320 	and.w	r3, r3, #32
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d009      	beq.n	800cbb6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cba2:	4b66      	ldr	r3, [pc, #408]	; (800cd3c <UART_SetConfig+0xc2c>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	08db      	lsrs	r3, r3, #3
 800cba8:	f003 0303 	and.w	r3, r3, #3
 800cbac:	4a64      	ldr	r2, [pc, #400]	; (800cd40 <UART_SetConfig+0xc30>)
 800cbae:	fa22 f303 	lsr.w	r3, r2, r3
 800cbb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cbb4:	e00f      	b.n	800cbd6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800cbb6:	4b62      	ldr	r3, [pc, #392]	; (800cd40 <UART_SetConfig+0xc30>)
 800cbb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbba:	e00c      	b.n	800cbd6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cbbc:	4b61      	ldr	r3, [pc, #388]	; (800cd44 <UART_SetConfig+0xc34>)
 800cbbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbc0:	e009      	b.n	800cbd6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbc8:	e005      	b.n	800cbd6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cbd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cbd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	f000 80ea 	beq.w	800cdb2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe2:	4a55      	ldr	r2, [pc, #340]	; (800cd38 <UART_SetConfig+0xc28>)
 800cbe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbe8:	461a      	mov	r2, r3
 800cbea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbec:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbf0:	005a      	lsls	r2, r3, #1
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	085b      	lsrs	r3, r3, #1
 800cbf8:	441a      	add	r2, r3
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc02:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc06:	2b0f      	cmp	r3, #15
 800cc08:	d916      	bls.n	800cc38 <UART_SetConfig+0xb28>
 800cc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc10:	d212      	bcs.n	800cc38 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	f023 030f 	bic.w	r3, r3, #15
 800cc1a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1e:	085b      	lsrs	r3, r3, #1
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	f003 0307 	and.w	r3, r3, #7
 800cc26:	b29a      	uxth	r2, r3
 800cc28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cc34:	60da      	str	r2, [r3, #12]
 800cc36:	e0bc      	b.n	800cdb2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cc3e:	e0b8      	b.n	800cdb2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cc40:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cc44:	2b20      	cmp	r3, #32
 800cc46:	dc4b      	bgt.n	800cce0 <UART_SetConfig+0xbd0>
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	f2c0 8087 	blt.w	800cd5c <UART_SetConfig+0xc4c>
 800cc4e:	2b20      	cmp	r3, #32
 800cc50:	f200 8084 	bhi.w	800cd5c <UART_SetConfig+0xc4c>
 800cc54:	a201      	add	r2, pc, #4	; (adr r2, 800cc5c <UART_SetConfig+0xb4c>)
 800cc56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc5a:	bf00      	nop
 800cc5c:	0800cce7 	.word	0x0800cce7
 800cc60:	0800ccef 	.word	0x0800ccef
 800cc64:	0800cd5d 	.word	0x0800cd5d
 800cc68:	0800cd5d 	.word	0x0800cd5d
 800cc6c:	0800ccf7 	.word	0x0800ccf7
 800cc70:	0800cd5d 	.word	0x0800cd5d
 800cc74:	0800cd5d 	.word	0x0800cd5d
 800cc78:	0800cd5d 	.word	0x0800cd5d
 800cc7c:	0800cd07 	.word	0x0800cd07
 800cc80:	0800cd5d 	.word	0x0800cd5d
 800cc84:	0800cd5d 	.word	0x0800cd5d
 800cc88:	0800cd5d 	.word	0x0800cd5d
 800cc8c:	0800cd5d 	.word	0x0800cd5d
 800cc90:	0800cd5d 	.word	0x0800cd5d
 800cc94:	0800cd5d 	.word	0x0800cd5d
 800cc98:	0800cd5d 	.word	0x0800cd5d
 800cc9c:	0800cd17 	.word	0x0800cd17
 800cca0:	0800cd5d 	.word	0x0800cd5d
 800cca4:	0800cd5d 	.word	0x0800cd5d
 800cca8:	0800cd5d 	.word	0x0800cd5d
 800ccac:	0800cd5d 	.word	0x0800cd5d
 800ccb0:	0800cd5d 	.word	0x0800cd5d
 800ccb4:	0800cd5d 	.word	0x0800cd5d
 800ccb8:	0800cd5d 	.word	0x0800cd5d
 800ccbc:	0800cd5d 	.word	0x0800cd5d
 800ccc0:	0800cd5d 	.word	0x0800cd5d
 800ccc4:	0800cd5d 	.word	0x0800cd5d
 800ccc8:	0800cd5d 	.word	0x0800cd5d
 800cccc:	0800cd5d 	.word	0x0800cd5d
 800ccd0:	0800cd5d 	.word	0x0800cd5d
 800ccd4:	0800cd5d 	.word	0x0800cd5d
 800ccd8:	0800cd5d 	.word	0x0800cd5d
 800ccdc:	0800cd4f 	.word	0x0800cd4f
 800cce0:	2b40      	cmp	r3, #64	; 0x40
 800cce2:	d037      	beq.n	800cd54 <UART_SetConfig+0xc44>
 800cce4:	e03a      	b.n	800cd5c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cce6:	f7fb fea1 	bl	8008a2c <HAL_RCC_GetPCLK1Freq>
 800ccea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ccec:	e03c      	b.n	800cd68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ccee:	f7fb feb3 	bl	8008a58 <HAL_RCC_GetPCLK2Freq>
 800ccf2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ccf4:	e038      	b.n	800cd68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7fc fdd2 	bl	80098a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd04:	e030      	b.n	800cd68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd06:	f107 0318 	add.w	r3, r7, #24
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7fc ff1e 	bl	8009b4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd10:	69fb      	ldr	r3, [r7, #28]
 800cd12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd14:	e028      	b.n	800cd68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd16:	4b09      	ldr	r3, [pc, #36]	; (800cd3c <UART_SetConfig+0xc2c>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f003 0320 	and.w	r3, r3, #32
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d012      	beq.n	800cd48 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd22:	4b06      	ldr	r3, [pc, #24]	; (800cd3c <UART_SetConfig+0xc2c>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	08db      	lsrs	r3, r3, #3
 800cd28:	f003 0303 	and.w	r3, r3, #3
 800cd2c:	4a04      	ldr	r2, [pc, #16]	; (800cd40 <UART_SetConfig+0xc30>)
 800cd2e:	fa22 f303 	lsr.w	r3, r2, r3
 800cd32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd34:	e018      	b.n	800cd68 <UART_SetConfig+0xc58>
 800cd36:	bf00      	nop
 800cd38:	0800dfa8 	.word	0x0800dfa8
 800cd3c:	58024400 	.word	0x58024400
 800cd40:	03d09000 	.word	0x03d09000
 800cd44:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800cd48:	4b24      	ldr	r3, [pc, #144]	; (800cddc <UART_SetConfig+0xccc>)
 800cd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd4c:	e00c      	b.n	800cd68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd4e:	4b24      	ldr	r3, [pc, #144]	; (800cde0 <UART_SetConfig+0xcd0>)
 800cd50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd52:	e009      	b.n	800cd68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd5a:	e005      	b.n	800cd68 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cd60:	2301      	movs	r3, #1
 800cd62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cd66:	bf00      	nop
    }

    if (pclk != 0U)
 800cd68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d021      	beq.n	800cdb2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd72:	4a1c      	ldr	r2, [pc, #112]	; (800cde4 <UART_SetConfig+0xcd4>)
 800cd74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd78:	461a      	mov	r2, r3
 800cd7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd7c:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	085b      	lsrs	r3, r3, #1
 800cd86:	441a      	add	r2, r3
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd90:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd94:	2b0f      	cmp	r3, #15
 800cd96:	d909      	bls.n	800cdac <UART_SetConfig+0xc9c>
 800cd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd9e:	d205      	bcs.n	800cdac <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda2:	b29a      	uxth	r2, r3
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	60da      	str	r2, [r3, #12]
 800cdaa:	e002      	b.n	800cdb2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cdac:	2301      	movs	r3, #1
 800cdae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cdce:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3748      	adds	r7, #72	; 0x48
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cddc:	03d09000 	.word	0x03d09000
 800cde0:	003d0900 	.word	0x003d0900
 800cde4:	0800dfa8 	.word	0x0800dfa8

0800cde8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdf4:	f003 0301 	and.w	r3, r3, #1
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d00a      	beq.n	800ce12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	430a      	orrs	r2, r1
 800ce10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce16:	f003 0302 	and.w	r3, r3, #2
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00a      	beq.n	800ce34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	685b      	ldr	r3, [r3, #4]
 800ce24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	430a      	orrs	r2, r1
 800ce32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce38:	f003 0304 	and.w	r3, r3, #4
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d00a      	beq.n	800ce56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	430a      	orrs	r2, r1
 800ce54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce5a:	f003 0308 	and.w	r3, r3, #8
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d00a      	beq.n	800ce78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	430a      	orrs	r2, r1
 800ce76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce7c:	f003 0310 	and.w	r3, r3, #16
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d00a      	beq.n	800ce9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	689b      	ldr	r3, [r3, #8]
 800ce8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	430a      	orrs	r2, r1
 800ce98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce9e:	f003 0320 	and.w	r3, r3, #32
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d00a      	beq.n	800cebc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	689b      	ldr	r3, [r3, #8]
 800ceac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	430a      	orrs	r2, r1
 800ceba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d01a      	beq.n	800cefe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	430a      	orrs	r2, r1
 800cedc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cee6:	d10a      	bne.n	800cefe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	430a      	orrs	r2, r1
 800cefc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d00a      	beq.n	800cf20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	430a      	orrs	r2, r1
 800cf1e:	605a      	str	r2, [r3, #4]
  }
}
 800cf20:	bf00      	nop
 800cf22:	370c      	adds	r7, #12
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr

0800cf2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b086      	sub	sp, #24
 800cf30:	af02      	add	r7, sp, #8
 800cf32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf3c:	f7f7 fd16 	bl	800496c <HAL_GetTick>
 800cf40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f003 0308 	and.w	r3, r3, #8
 800cf4c:	2b08      	cmp	r3, #8
 800cf4e:	d10e      	bne.n	800cf6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf54:	9300      	str	r3, [sp, #0]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f000 f82f 	bl	800cfc2 <UART_WaitOnFlagUntilTimeout>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d001      	beq.n	800cf6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf6a:	2303      	movs	r3, #3
 800cf6c:	e025      	b.n	800cfba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f003 0304 	and.w	r3, r3, #4
 800cf78:	2b04      	cmp	r3, #4
 800cf7a:	d10e      	bne.n	800cf9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf80:	9300      	str	r3, [sp, #0]
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2200      	movs	r2, #0
 800cf86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f000 f819 	bl	800cfc2 <UART_WaitOnFlagUntilTimeout>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d001      	beq.n	800cf9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf96:	2303      	movs	r3, #3
 800cf98:	e00f      	b.n	800cfba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2220      	movs	r2, #32
 800cf9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2220      	movs	r2, #32
 800cfa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2200      	movs	r2, #0
 800cfae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cfb8:	2300      	movs	r3, #0
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3710      	adds	r7, #16
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b09c      	sub	sp, #112	; 0x70
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	60f8      	str	r0, [r7, #12]
 800cfca:	60b9      	str	r1, [r7, #8]
 800cfcc:	603b      	str	r3, [r7, #0]
 800cfce:	4613      	mov	r3, r2
 800cfd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cfd2:	e0a9      	b.n	800d128 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cfd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cfd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfda:	f000 80a5 	beq.w	800d128 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cfde:	f7f7 fcc5 	bl	800496c <HAL_GetTick>
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	1ad3      	subs	r3, r2, r3
 800cfe8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d302      	bcc.n	800cff4 <UART_WaitOnFlagUntilTimeout+0x32>
 800cfee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d140      	bne.n	800d076 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cffc:	e853 3f00 	ldrex	r3, [r3]
 800d000:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d004:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d008:	667b      	str	r3, [r7, #100]	; 0x64
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	461a      	mov	r2, r3
 800d010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d012:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d014:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d016:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d018:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d01a:	e841 2300 	strex	r3, r2, [r1]
 800d01e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d022:	2b00      	cmp	r3, #0
 800d024:	d1e6      	bne.n	800cff4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	3308      	adds	r3, #8
 800d02c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d030:	e853 3f00 	ldrex	r3, [r3]
 800d034:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d038:	f023 0301 	bic.w	r3, r3, #1
 800d03c:	663b      	str	r3, [r7, #96]	; 0x60
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	3308      	adds	r3, #8
 800d044:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d046:	64ba      	str	r2, [r7, #72]	; 0x48
 800d048:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d04a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d04c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d04e:	e841 2300 	strex	r3, r2, [r1]
 800d052:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d056:	2b00      	cmp	r3, #0
 800d058:	d1e5      	bne.n	800d026 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2220      	movs	r2, #32
 800d05e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	2220      	movs	r2, #32
 800d066:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2200      	movs	r2, #0
 800d06e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d072:	2303      	movs	r3, #3
 800d074:	e069      	b.n	800d14a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f003 0304 	and.w	r3, r3, #4
 800d080:	2b00      	cmp	r3, #0
 800d082:	d051      	beq.n	800d128 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	69db      	ldr	r3, [r3, #28]
 800d08a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d08e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d092:	d149      	bne.n	800d128 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d09c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a6:	e853 3f00 	ldrex	r3, [r3]
 800d0aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d0b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0bc:	637b      	str	r3, [r7, #52]	; 0x34
 800d0be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d0c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0c4:	e841 2300 	strex	r3, r2, [r1]
 800d0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d1e6      	bne.n	800d09e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	3308      	adds	r3, #8
 800d0d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	e853 3f00 	ldrex	r3, [r3]
 800d0de:	613b      	str	r3, [r7, #16]
   return(result);
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	f023 0301 	bic.w	r3, r3, #1
 800d0e6:	66bb      	str	r3, [r7, #104]	; 0x68
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	3308      	adds	r3, #8
 800d0ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d0f0:	623a      	str	r2, [r7, #32]
 800d0f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0f4:	69f9      	ldr	r1, [r7, #28]
 800d0f6:	6a3a      	ldr	r2, [r7, #32]
 800d0f8:	e841 2300 	strex	r3, r2, [r1]
 800d0fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800d0fe:	69bb      	ldr	r3, [r7, #24]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d1e5      	bne.n	800d0d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2220      	movs	r2, #32
 800d108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2220      	movs	r2, #32
 800d110:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	2220      	movs	r2, #32
 800d118:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2200      	movs	r2, #0
 800d120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d124:	2303      	movs	r3, #3
 800d126:	e010      	b.n	800d14a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	69da      	ldr	r2, [r3, #28]
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	4013      	ands	r3, r2
 800d132:	68ba      	ldr	r2, [r7, #8]
 800d134:	429a      	cmp	r2, r3
 800d136:	bf0c      	ite	eq
 800d138:	2301      	moveq	r3, #1
 800d13a:	2300      	movne	r3, #0
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	461a      	mov	r2, r3
 800d140:	79fb      	ldrb	r3, [r7, #7]
 800d142:	429a      	cmp	r2, r3
 800d144:	f43f af46 	beq.w	800cfd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d148:	2300      	movs	r3, #0
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3770      	adds	r7, #112	; 0x70
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}
	...

0800d154 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b096      	sub	sp, #88	; 0x58
 800d158:	af00      	add	r7, sp, #0
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	60b9      	str	r1, [r7, #8]
 800d15e:	4613      	mov	r3, r2
 800d160:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	68ba      	ldr	r2, [r7, #8]
 800d166:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	88fa      	ldrh	r2, [r7, #6]
 800d16c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2200      	movs	r2, #0
 800d174:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2222      	movs	r2, #34	; 0x22
 800d17c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d184:	2b00      	cmp	r3, #0
 800d186:	d02c      	beq.n	800d1e2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d18c:	4a42      	ldr	r2, [pc, #264]	; (800d298 <UART_Start_Receive_DMA+0x144>)
 800d18e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d194:	4a41      	ldr	r2, [pc, #260]	; (800d29c <UART_Start_Receive_DMA+0x148>)
 800d196:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d19c:	4a40      	ldr	r2, [pc, #256]	; (800d2a0 <UART_Start_Receive_DMA+0x14c>)
 800d19e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	3324      	adds	r3, #36	; 0x24
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	88fb      	ldrh	r3, [r7, #6]
 800d1bc:	f7f8 f84c 	bl	8005258 <HAL_DMA_Start_IT>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d00d      	beq.n	800d1e2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2210      	movs	r2, #16
 800d1ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2220      	movs	r2, #32
 800d1da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	e055      	b.n	800d28e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	691b      	ldr	r3, [r3, #16]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d018      	beq.n	800d224 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1fa:	e853 3f00 	ldrex	r3, [r3]
 800d1fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d206:	657b      	str	r3, [r7, #84]	; 0x54
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	461a      	mov	r2, r3
 800d20e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d210:	64bb      	str	r3, [r7, #72]	; 0x48
 800d212:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d214:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d216:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d218:	e841 2300 	strex	r3, r2, [r1]
 800d21c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d21e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d220:	2b00      	cmp	r3, #0
 800d222:	d1e6      	bne.n	800d1f2 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	3308      	adds	r3, #8
 800d22a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d22e:	e853 3f00 	ldrex	r3, [r3]
 800d232:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d236:	f043 0301 	orr.w	r3, r3, #1
 800d23a:	653b      	str	r3, [r7, #80]	; 0x50
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	3308      	adds	r3, #8
 800d242:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d244:	637a      	str	r2, [r7, #52]	; 0x34
 800d246:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d248:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d24a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d24c:	e841 2300 	strex	r3, r2, [r1]
 800d250:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d254:	2b00      	cmp	r3, #0
 800d256:	d1e5      	bne.n	800d224 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	3308      	adds	r3, #8
 800d25e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	e853 3f00 	ldrex	r3, [r3]
 800d266:	613b      	str	r3, [r7, #16]
   return(result);
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d26e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	3308      	adds	r3, #8
 800d276:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d278:	623a      	str	r2, [r7, #32]
 800d27a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d27c:	69f9      	ldr	r1, [r7, #28]
 800d27e:	6a3a      	ldr	r2, [r7, #32]
 800d280:	e841 2300 	strex	r3, r2, [r1]
 800d284:	61bb      	str	r3, [r7, #24]
   return(result);
 800d286:	69bb      	ldr	r3, [r7, #24]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d1e5      	bne.n	800d258 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d28c:	2300      	movs	r3, #0
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3758      	adds	r7, #88	; 0x58
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop
 800d298:	0800d4a7 	.word	0x0800d4a7
 800d29c:	0800d5c9 	.word	0x0800d5c9
 800d2a0:	0800d601 	.word	0x0800d601

0800d2a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b08f      	sub	sp, #60	; 0x3c
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2b2:	6a3b      	ldr	r3, [r7, #32]
 800d2b4:	e853 3f00 	ldrex	r3, [r3]
 800d2b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d2ba:	69fb      	ldr	r3, [r7, #28]
 800d2bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d2c0:	637b      	str	r3, [r7, #52]	; 0x34
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2cc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2d2:	e841 2300 	strex	r3, r2, [r1]
 800d2d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d1e6      	bne.n	800d2ac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	3308      	adds	r3, #8
 800d2e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	e853 3f00 	ldrex	r3, [r3]
 800d2ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d2f4:	633b      	str	r3, [r7, #48]	; 0x30
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	3308      	adds	r3, #8
 800d2fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2fe:	61ba      	str	r2, [r7, #24]
 800d300:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d302:	6979      	ldr	r1, [r7, #20]
 800d304:	69ba      	ldr	r2, [r7, #24]
 800d306:	e841 2300 	strex	r3, r2, [r1]
 800d30a:	613b      	str	r3, [r7, #16]
   return(result);
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d1e5      	bne.n	800d2de <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2220      	movs	r2, #32
 800d316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d31a:	bf00      	nop
 800d31c:	373c      	adds	r7, #60	; 0x3c
 800d31e:	46bd      	mov	sp, r7
 800d320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d324:	4770      	bx	lr
	...

0800d328 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d328:	b480      	push	{r7}
 800d32a:	b095      	sub	sp, #84	; 0x54
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d338:	e853 3f00 	ldrex	r3, [r3]
 800d33c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d340:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d344:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	461a      	mov	r2, r3
 800d34c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d34e:	643b      	str	r3, [r7, #64]	; 0x40
 800d350:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d352:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d354:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d356:	e841 2300 	strex	r3, r2, [r1]
 800d35a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d1e6      	bne.n	800d330 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	3308      	adds	r3, #8
 800d368:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d36a:	6a3b      	ldr	r3, [r7, #32]
 800d36c:	e853 3f00 	ldrex	r3, [r3]
 800d370:	61fb      	str	r3, [r7, #28]
   return(result);
 800d372:	69fa      	ldr	r2, [r7, #28]
 800d374:	4b1e      	ldr	r3, [pc, #120]	; (800d3f0 <UART_EndRxTransfer+0xc8>)
 800d376:	4013      	ands	r3, r2
 800d378:	64bb      	str	r3, [r7, #72]	; 0x48
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	3308      	adds	r3, #8
 800d380:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d382:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d384:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d386:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d38a:	e841 2300 	strex	r3, r2, [r1]
 800d38e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d392:	2b00      	cmp	r3, #0
 800d394:	d1e5      	bne.n	800d362 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d39a:	2b01      	cmp	r3, #1
 800d39c:	d118      	bne.n	800d3d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	e853 3f00 	ldrex	r3, [r3]
 800d3aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	f023 0310 	bic.w	r3, r3, #16
 800d3b2:	647b      	str	r3, [r7, #68]	; 0x44
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3bc:	61bb      	str	r3, [r7, #24]
 800d3be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3c0:	6979      	ldr	r1, [r7, #20]
 800d3c2:	69ba      	ldr	r2, [r7, #24]
 800d3c4:	e841 2300 	strex	r3, r2, [r1]
 800d3c8:	613b      	str	r3, [r7, #16]
   return(result);
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d1e6      	bne.n	800d39e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2220      	movs	r2, #32
 800d3d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d3e4:	bf00      	nop
 800d3e6:	3754      	adds	r7, #84	; 0x54
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr
 800d3f0:	effffffe 	.word	0xeffffffe

0800d3f4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b090      	sub	sp, #64	; 0x40
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d400:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	69db      	ldr	r3, [r3, #28]
 800d406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d40a:	d037      	beq.n	800d47c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d40e:	2200      	movs	r2, #0
 800d410:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	3308      	adds	r3, #8
 800d41a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41e:	e853 3f00 	ldrex	r3, [r3]
 800d422:	623b      	str	r3, [r7, #32]
   return(result);
 800d424:	6a3b      	ldr	r3, [r7, #32]
 800d426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d42a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d42c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	3308      	adds	r3, #8
 800d432:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d434:	633a      	str	r2, [r7, #48]	; 0x30
 800d436:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d438:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d43a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d43c:	e841 2300 	strex	r3, r2, [r1]
 800d440:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d444:	2b00      	cmp	r3, #0
 800d446:	d1e5      	bne.n	800d414 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	e853 3f00 	ldrex	r3, [r3]
 800d454:	60fb      	str	r3, [r7, #12]
   return(result);
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d45c:	637b      	str	r3, [r7, #52]	; 0x34
 800d45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	461a      	mov	r2, r3
 800d464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d466:	61fb      	str	r3, [r7, #28]
 800d468:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d46a:	69b9      	ldr	r1, [r7, #24]
 800d46c:	69fa      	ldr	r2, [r7, #28]
 800d46e:	e841 2300 	strex	r3, r2, [r1]
 800d472:	617b      	str	r3, [r7, #20]
   return(result);
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d1e6      	bne.n	800d448 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d47a:	e002      	b.n	800d482 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d47c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d47e:	f7f5 fddb 	bl	8003038 <HAL_UART_TxCpltCallback>
}
 800d482:	bf00      	nop
 800d484:	3740      	adds	r7, #64	; 0x40
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}

0800d48a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d48a:	b580      	push	{r7, lr}
 800d48c:	b084      	sub	sp, #16
 800d48e:	af00      	add	r7, sp, #0
 800d490:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d496:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d498:	68f8      	ldr	r0, [r7, #12]
 800d49a:	f7fe fe0f 	bl	800c0bc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d49e:	bf00      	nop
 800d4a0:	3710      	adds	r7, #16
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}

0800d4a6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d4a6:	b580      	push	{r7, lr}
 800d4a8:	b09c      	sub	sp, #112	; 0x70
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	69db      	ldr	r3, [r3, #28]
 800d4b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4bc:	d071      	beq.n	800d5a2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d4be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d4c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4ce:	e853 3f00 	ldrex	r3, [r3]
 800d4d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d4d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d4da:	66bb      	str	r3, [r7, #104]	; 0x68
 800d4dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d4e4:	65bb      	str	r3, [r7, #88]	; 0x58
 800d4e6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d4ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d4ec:	e841 2300 	strex	r3, r2, [r1]
 800d4f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d4f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d1e6      	bne.n	800d4c6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	3308      	adds	r3, #8
 800d4fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d502:	e853 3f00 	ldrex	r3, [r3]
 800d506:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d50a:	f023 0301 	bic.w	r3, r3, #1
 800d50e:	667b      	str	r3, [r7, #100]	; 0x64
 800d510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	3308      	adds	r3, #8
 800d516:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d518:	647a      	str	r2, [r7, #68]	; 0x44
 800d51a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d51c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d51e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d520:	e841 2300 	strex	r3, r2, [r1]
 800d524:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d1e5      	bne.n	800d4f8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d52c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	3308      	adds	r3, #8
 800d532:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d536:	e853 3f00 	ldrex	r3, [r3]
 800d53a:	623b      	str	r3, [r7, #32]
   return(result);
 800d53c:	6a3b      	ldr	r3, [r7, #32]
 800d53e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d542:	663b      	str	r3, [r7, #96]	; 0x60
 800d544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	3308      	adds	r3, #8
 800d54a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d54c:	633a      	str	r2, [r7, #48]	; 0x30
 800d54e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d550:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d554:	e841 2300 	strex	r3, r2, [r1]
 800d558:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d1e5      	bne.n	800d52c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d562:	2220      	movs	r2, #32
 800d564:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d56a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d118      	bne.n	800d5a2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	e853 3f00 	ldrex	r3, [r3]
 800d57c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	f023 0310 	bic.w	r3, r3, #16
 800d584:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	461a      	mov	r2, r3
 800d58c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d58e:	61fb      	str	r3, [r7, #28]
 800d590:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d592:	69b9      	ldr	r1, [r7, #24]
 800d594:	69fa      	ldr	r2, [r7, #28]
 800d596:	e841 2300 	strex	r3, r2, [r1]
 800d59a:	617b      	str	r3, [r7, #20]
   return(result);
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d1e6      	bne.n	800d570 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5a6:	2b01      	cmp	r3, #1
 800d5a8:	d107      	bne.n	800d5ba <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d5aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d5b4:	f7fe fda0 	bl	800c0f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d5b8:	e002      	b.n	800d5c0 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800d5ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d5bc:	f7f5 fd4e 	bl	800305c <HAL_UART_RxCpltCallback>
}
 800d5c0:	bf00      	nop
 800d5c2:	3770      	adds	r7, #112	; 0x70
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5d4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d109      	bne.n	800d5f2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d5e4:	085b      	lsrs	r3, r3, #1
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	4619      	mov	r1, r3
 800d5ea:	68f8      	ldr	r0, [r7, #12]
 800d5ec:	f7fe fd84 	bl	800c0f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d5f0:	e002      	b.n	800d5f8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d5f2:	68f8      	ldr	r0, [r7, #12]
 800d5f4:	f7fe fd6c 	bl	800c0d0 <HAL_UART_RxHalfCpltCallback>
}
 800d5f8:	bf00      	nop
 800d5fa:	3710      	adds	r7, #16
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b086      	sub	sp, #24
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d60c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d614:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d61c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	689b      	ldr	r3, [r3, #8]
 800d624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d628:	2b80      	cmp	r3, #128	; 0x80
 800d62a:	d109      	bne.n	800d640 <UART_DMAError+0x40>
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	2b21      	cmp	r3, #33	; 0x21
 800d630:	d106      	bne.n	800d640 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	2200      	movs	r2, #0
 800d636:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d63a:	6978      	ldr	r0, [r7, #20]
 800d63c:	f7ff fe32 	bl	800d2a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	689b      	ldr	r3, [r3, #8]
 800d646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d64a:	2b40      	cmp	r3, #64	; 0x40
 800d64c:	d109      	bne.n	800d662 <UART_DMAError+0x62>
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	2b22      	cmp	r3, #34	; 0x22
 800d652:	d106      	bne.n	800d662 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	2200      	movs	r2, #0
 800d658:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d65c:	6978      	ldr	r0, [r7, #20]
 800d65e:	f7ff fe63 	bl	800d328 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d668:	f043 0210 	orr.w	r2, r3, #16
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d672:	6978      	ldr	r0, [r7, #20]
 800d674:	f7fe fd36 	bl	800c0e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d678:	bf00      	nop
 800d67a:	3718      	adds	r7, #24
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b084      	sub	sp, #16
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d68c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2200      	movs	r2, #0
 800d692:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	2200      	movs	r2, #0
 800d69a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d69e:	68f8      	ldr	r0, [r7, #12]
 800d6a0:	f7fe fd20 	bl	800c0e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6a4:	bf00      	nop
 800d6a6:	3710      	adds	r7, #16
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b088      	sub	sp, #32
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	e853 3f00 	ldrex	r3, [r3]
 800d6c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6c8:	61fb      	str	r3, [r7, #28]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	69fb      	ldr	r3, [r7, #28]
 800d6d2:	61bb      	str	r3, [r7, #24]
 800d6d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6d6:	6979      	ldr	r1, [r7, #20]
 800d6d8:	69ba      	ldr	r2, [r7, #24]
 800d6da:	e841 2300 	strex	r3, r2, [r1]
 800d6de:	613b      	str	r3, [r7, #16]
   return(result);
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d1e6      	bne.n	800d6b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2220      	movs	r2, #32
 800d6ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f7f5 fc9f 	bl	8003038 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6fa:	bf00      	nop
 800d6fc:	3720      	adds	r7, #32
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}

0800d702 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d702:	b480      	push	{r7}
 800d704:	b083      	sub	sp, #12
 800d706:	af00      	add	r7, sp, #0
 800d708:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d70a:	bf00      	nop
 800d70c:	370c      	adds	r7, #12
 800d70e:	46bd      	mov	sp, r7
 800d710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d714:	4770      	bx	lr

0800d716 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d716:	b480      	push	{r7}
 800d718:	b083      	sub	sp, #12
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d71e:	bf00      	nop
 800d720:	370c      	adds	r7, #12
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr

0800d72a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d72a:	b480      	push	{r7}
 800d72c:	b083      	sub	sp, #12
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d732:	bf00      	nop
 800d734:	370c      	adds	r7, #12
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr

0800d73e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d73e:	b480      	push	{r7}
 800d740:	b085      	sub	sp, #20
 800d742:	af00      	add	r7, sp, #0
 800d744:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d101      	bne.n	800d754 <HAL_UARTEx_DisableFifoMode+0x16>
 800d750:	2302      	movs	r3, #2
 800d752:	e027      	b.n	800d7a4 <HAL_UARTEx_DisableFifoMode+0x66>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2201      	movs	r2, #1
 800d758:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2224      	movs	r2, #36	; 0x24
 800d760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f022 0201 	bic.w	r2, r2, #1
 800d77a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d782:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2200      	movs	r2, #0
 800d788:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	68fa      	ldr	r2, [r7, #12]
 800d790:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2220      	movs	r2, #32
 800d796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2200      	movs	r2, #0
 800d79e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d7a2:	2300      	movs	r3, #0
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3714      	adds	r7, #20
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d101      	bne.n	800d7c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d7c4:	2302      	movs	r3, #2
 800d7c6:	e02d      	b.n	800d824 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2224      	movs	r2, #36	; 0x24
 800d7d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	681a      	ldr	r2, [r3, #0]
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f022 0201 	bic.w	r2, r2, #1
 800d7ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	689b      	ldr	r3, [r3, #8]
 800d7f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	683a      	ldr	r2, [r7, #0]
 800d800:	430a      	orrs	r2, r1
 800d802:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f000 f84f 	bl	800d8a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	68fa      	ldr	r2, [r7, #12]
 800d810:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2220      	movs	r2, #32
 800d816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2200      	movs	r2, #0
 800d81e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d822:	2300      	movs	r3, #0
}
 800d824:	4618      	mov	r0, r3
 800d826:	3710      	adds	r7, #16
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d101      	bne.n	800d844 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d840:	2302      	movs	r3, #2
 800d842:	e02d      	b.n	800d8a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2201      	movs	r2, #1
 800d848:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2224      	movs	r2, #36	; 0x24
 800d850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	681a      	ldr	r2, [r3, #0]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f022 0201 	bic.w	r2, r2, #1
 800d86a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	689b      	ldr	r3, [r3, #8]
 800d872:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	683a      	ldr	r2, [r7, #0]
 800d87c:	430a      	orrs	r2, r1
 800d87e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f000 f811 	bl	800d8a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	68fa      	ldr	r2, [r7, #12]
 800d88c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2220      	movs	r2, #32
 800d892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2200      	movs	r2, #0
 800d89a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d89e:	2300      	movs	r3, #0
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3710      	adds	r7, #16
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b085      	sub	sp, #20
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d108      	bne.n	800d8ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d8c8:	e031      	b.n	800d92e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d8ca:	2310      	movs	r3, #16
 800d8cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d8ce:	2310      	movs	r3, #16
 800d8d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	689b      	ldr	r3, [r3, #8]
 800d8d8:	0e5b      	lsrs	r3, r3, #25
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	f003 0307 	and.w	r3, r3, #7
 800d8e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	689b      	ldr	r3, [r3, #8]
 800d8e8:	0f5b      	lsrs	r3, r3, #29
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	f003 0307 	and.w	r3, r3, #7
 800d8f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d8f2:	7bbb      	ldrb	r3, [r7, #14]
 800d8f4:	7b3a      	ldrb	r2, [r7, #12]
 800d8f6:	4911      	ldr	r1, [pc, #68]	; (800d93c <UARTEx_SetNbDataToProcess+0x94>)
 800d8f8:	5c8a      	ldrb	r2, [r1, r2]
 800d8fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d8fe:	7b3a      	ldrb	r2, [r7, #12]
 800d900:	490f      	ldr	r1, [pc, #60]	; (800d940 <UARTEx_SetNbDataToProcess+0x98>)
 800d902:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d904:	fb93 f3f2 	sdiv	r3, r3, r2
 800d908:	b29a      	uxth	r2, r3
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d910:	7bfb      	ldrb	r3, [r7, #15]
 800d912:	7b7a      	ldrb	r2, [r7, #13]
 800d914:	4909      	ldr	r1, [pc, #36]	; (800d93c <UARTEx_SetNbDataToProcess+0x94>)
 800d916:	5c8a      	ldrb	r2, [r1, r2]
 800d918:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d91c:	7b7a      	ldrb	r2, [r7, #13]
 800d91e:	4908      	ldr	r1, [pc, #32]	; (800d940 <UARTEx_SetNbDataToProcess+0x98>)
 800d920:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d922:	fb93 f3f2 	sdiv	r3, r3, r2
 800d926:	b29a      	uxth	r2, r3
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d92e:	bf00      	nop
 800d930:	3714      	adds	r7, #20
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	0800dfc0 	.word	0x0800dfc0
 800d940:	0800dfc8 	.word	0x0800dfc8

0800d944 <__cxa_pure_virtual>:
 800d944:	b508      	push	{r3, lr}
 800d946:	f000 f80d 	bl	800d964 <_ZSt9terminatev>

0800d94a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800d94a:	b508      	push	{r3, lr}
 800d94c:	4780      	blx	r0
 800d94e:	f000 f80e 	bl	800d96e <abort>
	...

0800d954 <_ZSt13get_terminatev>:
 800d954:	4b02      	ldr	r3, [pc, #8]	; (800d960 <_ZSt13get_terminatev+0xc>)
 800d956:	6818      	ldr	r0, [r3, #0]
 800d958:	f3bf 8f5b 	dmb	ish
 800d95c:	4770      	bx	lr
 800d95e:	bf00      	nop
 800d960:	24000014 	.word	0x24000014

0800d964 <_ZSt9terminatev>:
 800d964:	b508      	push	{r3, lr}
 800d966:	f7ff fff5 	bl	800d954 <_ZSt13get_terminatev>
 800d96a:	f7ff ffee 	bl	800d94a <_ZN10__cxxabiv111__terminateEPFvvE>

0800d96e <abort>:
 800d96e:	b508      	push	{r3, lr}
 800d970:	2006      	movs	r0, #6
 800d972:	f000 f873 	bl	800da5c <raise>
 800d976:	2001      	movs	r0, #1
 800d978:	f7f6 fd4c 	bl	8004414 <_exit>

0800d97c <__errno>:
 800d97c:	4b01      	ldr	r3, [pc, #4]	; (800d984 <__errno+0x8>)
 800d97e:	6818      	ldr	r0, [r3, #0]
 800d980:	4770      	bx	lr
 800d982:	bf00      	nop
 800d984:	24000018 	.word	0x24000018

0800d988 <__libc_init_array>:
 800d988:	b570      	push	{r4, r5, r6, lr}
 800d98a:	4d0d      	ldr	r5, [pc, #52]	; (800d9c0 <__libc_init_array+0x38>)
 800d98c:	4c0d      	ldr	r4, [pc, #52]	; (800d9c4 <__libc_init_array+0x3c>)
 800d98e:	1b64      	subs	r4, r4, r5
 800d990:	10a4      	asrs	r4, r4, #2
 800d992:	2600      	movs	r6, #0
 800d994:	42a6      	cmp	r6, r4
 800d996:	d109      	bne.n	800d9ac <__libc_init_array+0x24>
 800d998:	4d0b      	ldr	r5, [pc, #44]	; (800d9c8 <__libc_init_array+0x40>)
 800d99a:	4c0c      	ldr	r4, [pc, #48]	; (800d9cc <__libc_init_array+0x44>)
 800d99c:	f000 f9b0 	bl	800dd00 <_init>
 800d9a0:	1b64      	subs	r4, r4, r5
 800d9a2:	10a4      	asrs	r4, r4, #2
 800d9a4:	2600      	movs	r6, #0
 800d9a6:	42a6      	cmp	r6, r4
 800d9a8:	d105      	bne.n	800d9b6 <__libc_init_array+0x2e>
 800d9aa:	bd70      	pop	{r4, r5, r6, pc}
 800d9ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9b0:	4798      	blx	r3
 800d9b2:	3601      	adds	r6, #1
 800d9b4:	e7ee      	b.n	800d994 <__libc_init_array+0xc>
 800d9b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9ba:	4798      	blx	r3
 800d9bc:	3601      	adds	r6, #1
 800d9be:	e7f2      	b.n	800d9a6 <__libc_init_array+0x1e>
 800d9c0:	0800dfd8 	.word	0x0800dfd8
 800d9c4:	0800dfd8 	.word	0x0800dfd8
 800d9c8:	0800dfd8 	.word	0x0800dfd8
 800d9cc:	0800dfec 	.word	0x0800dfec

0800d9d0 <memcpy>:
 800d9d0:	440a      	add	r2, r1
 800d9d2:	4291      	cmp	r1, r2
 800d9d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d9d8:	d100      	bne.n	800d9dc <memcpy+0xc>
 800d9da:	4770      	bx	lr
 800d9dc:	b510      	push	{r4, lr}
 800d9de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9e6:	4291      	cmp	r1, r2
 800d9e8:	d1f9      	bne.n	800d9de <memcpy+0xe>
 800d9ea:	bd10      	pop	{r4, pc}

0800d9ec <memset>:
 800d9ec:	4402      	add	r2, r0
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	d100      	bne.n	800d9f6 <memset+0xa>
 800d9f4:	4770      	bx	lr
 800d9f6:	f803 1b01 	strb.w	r1, [r3], #1
 800d9fa:	e7f9      	b.n	800d9f0 <memset+0x4>

0800d9fc <realloc>:
 800d9fc:	4b02      	ldr	r3, [pc, #8]	; (800da08 <realloc+0xc>)
 800d9fe:	460a      	mov	r2, r1
 800da00:	4601      	mov	r1, r0
 800da02:	6818      	ldr	r0, [r3, #0]
 800da04:	f000 b8da 	b.w	800dbbc <_realloc_r>
 800da08:	24000018 	.word	0x24000018

0800da0c <_raise_r>:
 800da0c:	291f      	cmp	r1, #31
 800da0e:	b538      	push	{r3, r4, r5, lr}
 800da10:	4604      	mov	r4, r0
 800da12:	460d      	mov	r5, r1
 800da14:	d904      	bls.n	800da20 <_raise_r+0x14>
 800da16:	2316      	movs	r3, #22
 800da18:	6003      	str	r3, [r0, #0]
 800da1a:	f04f 30ff 	mov.w	r0, #4294967295
 800da1e:	bd38      	pop	{r3, r4, r5, pc}
 800da20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da22:	b112      	cbz	r2, 800da2a <_raise_r+0x1e>
 800da24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da28:	b94b      	cbnz	r3, 800da3e <_raise_r+0x32>
 800da2a:	4620      	mov	r0, r4
 800da2c:	f000 f830 	bl	800da90 <_getpid_r>
 800da30:	462a      	mov	r2, r5
 800da32:	4601      	mov	r1, r0
 800da34:	4620      	mov	r0, r4
 800da36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da3a:	f000 b817 	b.w	800da6c <_kill_r>
 800da3e:	2b01      	cmp	r3, #1
 800da40:	d00a      	beq.n	800da58 <_raise_r+0x4c>
 800da42:	1c59      	adds	r1, r3, #1
 800da44:	d103      	bne.n	800da4e <_raise_r+0x42>
 800da46:	2316      	movs	r3, #22
 800da48:	6003      	str	r3, [r0, #0]
 800da4a:	2001      	movs	r0, #1
 800da4c:	e7e7      	b.n	800da1e <_raise_r+0x12>
 800da4e:	2400      	movs	r4, #0
 800da50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da54:	4628      	mov	r0, r5
 800da56:	4798      	blx	r3
 800da58:	2000      	movs	r0, #0
 800da5a:	e7e0      	b.n	800da1e <_raise_r+0x12>

0800da5c <raise>:
 800da5c:	4b02      	ldr	r3, [pc, #8]	; (800da68 <raise+0xc>)
 800da5e:	4601      	mov	r1, r0
 800da60:	6818      	ldr	r0, [r3, #0]
 800da62:	f7ff bfd3 	b.w	800da0c <_raise_r>
 800da66:	bf00      	nop
 800da68:	24000018 	.word	0x24000018

0800da6c <_kill_r>:
 800da6c:	b538      	push	{r3, r4, r5, lr}
 800da6e:	4d07      	ldr	r5, [pc, #28]	; (800da8c <_kill_r+0x20>)
 800da70:	2300      	movs	r3, #0
 800da72:	4604      	mov	r4, r0
 800da74:	4608      	mov	r0, r1
 800da76:	4611      	mov	r1, r2
 800da78:	602b      	str	r3, [r5, #0]
 800da7a:	f7f6 fcbb 	bl	80043f4 <_kill>
 800da7e:	1c43      	adds	r3, r0, #1
 800da80:	d102      	bne.n	800da88 <_kill_r+0x1c>
 800da82:	682b      	ldr	r3, [r5, #0]
 800da84:	b103      	cbz	r3, 800da88 <_kill_r+0x1c>
 800da86:	6023      	str	r3, [r4, #0]
 800da88:	bd38      	pop	{r3, r4, r5, pc}
 800da8a:	bf00      	nop
 800da8c:	240010f8 	.word	0x240010f8

0800da90 <_getpid_r>:
 800da90:	f7f6 bca8 	b.w	80043e4 <_getpid>

0800da94 <sbrk_aligned>:
 800da94:	b570      	push	{r4, r5, r6, lr}
 800da96:	4e0e      	ldr	r6, [pc, #56]	; (800dad0 <sbrk_aligned+0x3c>)
 800da98:	460c      	mov	r4, r1
 800da9a:	6831      	ldr	r1, [r6, #0]
 800da9c:	4605      	mov	r5, r0
 800da9e:	b911      	cbnz	r1, 800daa6 <sbrk_aligned+0x12>
 800daa0:	f000 f8bc 	bl	800dc1c <_sbrk_r>
 800daa4:	6030      	str	r0, [r6, #0]
 800daa6:	4621      	mov	r1, r4
 800daa8:	4628      	mov	r0, r5
 800daaa:	f000 f8b7 	bl	800dc1c <_sbrk_r>
 800daae:	1c43      	adds	r3, r0, #1
 800dab0:	d00a      	beq.n	800dac8 <sbrk_aligned+0x34>
 800dab2:	1cc4      	adds	r4, r0, #3
 800dab4:	f024 0403 	bic.w	r4, r4, #3
 800dab8:	42a0      	cmp	r0, r4
 800daba:	d007      	beq.n	800dacc <sbrk_aligned+0x38>
 800dabc:	1a21      	subs	r1, r4, r0
 800dabe:	4628      	mov	r0, r5
 800dac0:	f000 f8ac 	bl	800dc1c <_sbrk_r>
 800dac4:	3001      	adds	r0, #1
 800dac6:	d101      	bne.n	800dacc <sbrk_aligned+0x38>
 800dac8:	f04f 34ff 	mov.w	r4, #4294967295
 800dacc:	4620      	mov	r0, r4
 800dace:	bd70      	pop	{r4, r5, r6, pc}
 800dad0:	240010f4 	.word	0x240010f4

0800dad4 <_malloc_r>:
 800dad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dad8:	1ccd      	adds	r5, r1, #3
 800dada:	f025 0503 	bic.w	r5, r5, #3
 800dade:	3508      	adds	r5, #8
 800dae0:	2d0c      	cmp	r5, #12
 800dae2:	bf38      	it	cc
 800dae4:	250c      	movcc	r5, #12
 800dae6:	2d00      	cmp	r5, #0
 800dae8:	4607      	mov	r7, r0
 800daea:	db01      	blt.n	800daf0 <_malloc_r+0x1c>
 800daec:	42a9      	cmp	r1, r5
 800daee:	d905      	bls.n	800dafc <_malloc_r+0x28>
 800daf0:	230c      	movs	r3, #12
 800daf2:	603b      	str	r3, [r7, #0]
 800daf4:	2600      	movs	r6, #0
 800daf6:	4630      	mov	r0, r6
 800daf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dafc:	4e2e      	ldr	r6, [pc, #184]	; (800dbb8 <_malloc_r+0xe4>)
 800dafe:	f000 f89d 	bl	800dc3c <__malloc_lock>
 800db02:	6833      	ldr	r3, [r6, #0]
 800db04:	461c      	mov	r4, r3
 800db06:	bb34      	cbnz	r4, 800db56 <_malloc_r+0x82>
 800db08:	4629      	mov	r1, r5
 800db0a:	4638      	mov	r0, r7
 800db0c:	f7ff ffc2 	bl	800da94 <sbrk_aligned>
 800db10:	1c43      	adds	r3, r0, #1
 800db12:	4604      	mov	r4, r0
 800db14:	d14d      	bne.n	800dbb2 <_malloc_r+0xde>
 800db16:	6834      	ldr	r4, [r6, #0]
 800db18:	4626      	mov	r6, r4
 800db1a:	2e00      	cmp	r6, #0
 800db1c:	d140      	bne.n	800dba0 <_malloc_r+0xcc>
 800db1e:	6823      	ldr	r3, [r4, #0]
 800db20:	4631      	mov	r1, r6
 800db22:	4638      	mov	r0, r7
 800db24:	eb04 0803 	add.w	r8, r4, r3
 800db28:	f000 f878 	bl	800dc1c <_sbrk_r>
 800db2c:	4580      	cmp	r8, r0
 800db2e:	d13a      	bne.n	800dba6 <_malloc_r+0xd2>
 800db30:	6821      	ldr	r1, [r4, #0]
 800db32:	3503      	adds	r5, #3
 800db34:	1a6d      	subs	r5, r5, r1
 800db36:	f025 0503 	bic.w	r5, r5, #3
 800db3a:	3508      	adds	r5, #8
 800db3c:	2d0c      	cmp	r5, #12
 800db3e:	bf38      	it	cc
 800db40:	250c      	movcc	r5, #12
 800db42:	4629      	mov	r1, r5
 800db44:	4638      	mov	r0, r7
 800db46:	f7ff ffa5 	bl	800da94 <sbrk_aligned>
 800db4a:	3001      	adds	r0, #1
 800db4c:	d02b      	beq.n	800dba6 <_malloc_r+0xd2>
 800db4e:	6823      	ldr	r3, [r4, #0]
 800db50:	442b      	add	r3, r5
 800db52:	6023      	str	r3, [r4, #0]
 800db54:	e00e      	b.n	800db74 <_malloc_r+0xa0>
 800db56:	6822      	ldr	r2, [r4, #0]
 800db58:	1b52      	subs	r2, r2, r5
 800db5a:	d41e      	bmi.n	800db9a <_malloc_r+0xc6>
 800db5c:	2a0b      	cmp	r2, #11
 800db5e:	d916      	bls.n	800db8e <_malloc_r+0xba>
 800db60:	1961      	adds	r1, r4, r5
 800db62:	42a3      	cmp	r3, r4
 800db64:	6025      	str	r5, [r4, #0]
 800db66:	bf18      	it	ne
 800db68:	6059      	strne	r1, [r3, #4]
 800db6a:	6863      	ldr	r3, [r4, #4]
 800db6c:	bf08      	it	eq
 800db6e:	6031      	streq	r1, [r6, #0]
 800db70:	5162      	str	r2, [r4, r5]
 800db72:	604b      	str	r3, [r1, #4]
 800db74:	4638      	mov	r0, r7
 800db76:	f104 060b 	add.w	r6, r4, #11
 800db7a:	f000 f865 	bl	800dc48 <__malloc_unlock>
 800db7e:	f026 0607 	bic.w	r6, r6, #7
 800db82:	1d23      	adds	r3, r4, #4
 800db84:	1af2      	subs	r2, r6, r3
 800db86:	d0b6      	beq.n	800daf6 <_malloc_r+0x22>
 800db88:	1b9b      	subs	r3, r3, r6
 800db8a:	50a3      	str	r3, [r4, r2]
 800db8c:	e7b3      	b.n	800daf6 <_malloc_r+0x22>
 800db8e:	6862      	ldr	r2, [r4, #4]
 800db90:	42a3      	cmp	r3, r4
 800db92:	bf0c      	ite	eq
 800db94:	6032      	streq	r2, [r6, #0]
 800db96:	605a      	strne	r2, [r3, #4]
 800db98:	e7ec      	b.n	800db74 <_malloc_r+0xa0>
 800db9a:	4623      	mov	r3, r4
 800db9c:	6864      	ldr	r4, [r4, #4]
 800db9e:	e7b2      	b.n	800db06 <_malloc_r+0x32>
 800dba0:	4634      	mov	r4, r6
 800dba2:	6876      	ldr	r6, [r6, #4]
 800dba4:	e7b9      	b.n	800db1a <_malloc_r+0x46>
 800dba6:	230c      	movs	r3, #12
 800dba8:	603b      	str	r3, [r7, #0]
 800dbaa:	4638      	mov	r0, r7
 800dbac:	f000 f84c 	bl	800dc48 <__malloc_unlock>
 800dbb0:	e7a1      	b.n	800daf6 <_malloc_r+0x22>
 800dbb2:	6025      	str	r5, [r4, #0]
 800dbb4:	e7de      	b.n	800db74 <_malloc_r+0xa0>
 800dbb6:	bf00      	nop
 800dbb8:	240010f0 	.word	0x240010f0

0800dbbc <_realloc_r>:
 800dbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbc0:	4680      	mov	r8, r0
 800dbc2:	4614      	mov	r4, r2
 800dbc4:	460e      	mov	r6, r1
 800dbc6:	b921      	cbnz	r1, 800dbd2 <_realloc_r+0x16>
 800dbc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbcc:	4611      	mov	r1, r2
 800dbce:	f7ff bf81 	b.w	800dad4 <_malloc_r>
 800dbd2:	b92a      	cbnz	r2, 800dbe0 <_realloc_r+0x24>
 800dbd4:	f000 f83e 	bl	800dc54 <_free_r>
 800dbd8:	4625      	mov	r5, r4
 800dbda:	4628      	mov	r0, r5
 800dbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbe0:	f000 f884 	bl	800dcec <_malloc_usable_size_r>
 800dbe4:	4284      	cmp	r4, r0
 800dbe6:	4607      	mov	r7, r0
 800dbe8:	d802      	bhi.n	800dbf0 <_realloc_r+0x34>
 800dbea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dbee:	d812      	bhi.n	800dc16 <_realloc_r+0x5a>
 800dbf0:	4621      	mov	r1, r4
 800dbf2:	4640      	mov	r0, r8
 800dbf4:	f7ff ff6e 	bl	800dad4 <_malloc_r>
 800dbf8:	4605      	mov	r5, r0
 800dbfa:	2800      	cmp	r0, #0
 800dbfc:	d0ed      	beq.n	800dbda <_realloc_r+0x1e>
 800dbfe:	42bc      	cmp	r4, r7
 800dc00:	4622      	mov	r2, r4
 800dc02:	4631      	mov	r1, r6
 800dc04:	bf28      	it	cs
 800dc06:	463a      	movcs	r2, r7
 800dc08:	f7ff fee2 	bl	800d9d0 <memcpy>
 800dc0c:	4631      	mov	r1, r6
 800dc0e:	4640      	mov	r0, r8
 800dc10:	f000 f820 	bl	800dc54 <_free_r>
 800dc14:	e7e1      	b.n	800dbda <_realloc_r+0x1e>
 800dc16:	4635      	mov	r5, r6
 800dc18:	e7df      	b.n	800dbda <_realloc_r+0x1e>
	...

0800dc1c <_sbrk_r>:
 800dc1c:	b538      	push	{r3, r4, r5, lr}
 800dc1e:	4d06      	ldr	r5, [pc, #24]	; (800dc38 <_sbrk_r+0x1c>)
 800dc20:	2300      	movs	r3, #0
 800dc22:	4604      	mov	r4, r0
 800dc24:	4608      	mov	r0, r1
 800dc26:	602b      	str	r3, [r5, #0]
 800dc28:	f7f6 fbfe 	bl	8004428 <_sbrk>
 800dc2c:	1c43      	adds	r3, r0, #1
 800dc2e:	d102      	bne.n	800dc36 <_sbrk_r+0x1a>
 800dc30:	682b      	ldr	r3, [r5, #0]
 800dc32:	b103      	cbz	r3, 800dc36 <_sbrk_r+0x1a>
 800dc34:	6023      	str	r3, [r4, #0]
 800dc36:	bd38      	pop	{r3, r4, r5, pc}
 800dc38:	240010f8 	.word	0x240010f8

0800dc3c <__malloc_lock>:
 800dc3c:	4801      	ldr	r0, [pc, #4]	; (800dc44 <__malloc_lock+0x8>)
 800dc3e:	f000 b85d 	b.w	800dcfc <__retarget_lock_acquire_recursive>
 800dc42:	bf00      	nop
 800dc44:	240010fc 	.word	0x240010fc

0800dc48 <__malloc_unlock>:
 800dc48:	4801      	ldr	r0, [pc, #4]	; (800dc50 <__malloc_unlock+0x8>)
 800dc4a:	f000 b858 	b.w	800dcfe <__retarget_lock_release_recursive>
 800dc4e:	bf00      	nop
 800dc50:	240010fc 	.word	0x240010fc

0800dc54 <_free_r>:
 800dc54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc56:	2900      	cmp	r1, #0
 800dc58:	d044      	beq.n	800dce4 <_free_r+0x90>
 800dc5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc5e:	9001      	str	r0, [sp, #4]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	f1a1 0404 	sub.w	r4, r1, #4
 800dc66:	bfb8      	it	lt
 800dc68:	18e4      	addlt	r4, r4, r3
 800dc6a:	f7ff ffe7 	bl	800dc3c <__malloc_lock>
 800dc6e:	4a1e      	ldr	r2, [pc, #120]	; (800dce8 <_free_r+0x94>)
 800dc70:	9801      	ldr	r0, [sp, #4]
 800dc72:	6813      	ldr	r3, [r2, #0]
 800dc74:	b933      	cbnz	r3, 800dc84 <_free_r+0x30>
 800dc76:	6063      	str	r3, [r4, #4]
 800dc78:	6014      	str	r4, [r2, #0]
 800dc7a:	b003      	add	sp, #12
 800dc7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc80:	f7ff bfe2 	b.w	800dc48 <__malloc_unlock>
 800dc84:	42a3      	cmp	r3, r4
 800dc86:	d908      	bls.n	800dc9a <_free_r+0x46>
 800dc88:	6825      	ldr	r5, [r4, #0]
 800dc8a:	1961      	adds	r1, r4, r5
 800dc8c:	428b      	cmp	r3, r1
 800dc8e:	bf01      	itttt	eq
 800dc90:	6819      	ldreq	r1, [r3, #0]
 800dc92:	685b      	ldreq	r3, [r3, #4]
 800dc94:	1949      	addeq	r1, r1, r5
 800dc96:	6021      	streq	r1, [r4, #0]
 800dc98:	e7ed      	b.n	800dc76 <_free_r+0x22>
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	685b      	ldr	r3, [r3, #4]
 800dc9e:	b10b      	cbz	r3, 800dca4 <_free_r+0x50>
 800dca0:	42a3      	cmp	r3, r4
 800dca2:	d9fa      	bls.n	800dc9a <_free_r+0x46>
 800dca4:	6811      	ldr	r1, [r2, #0]
 800dca6:	1855      	adds	r5, r2, r1
 800dca8:	42a5      	cmp	r5, r4
 800dcaa:	d10b      	bne.n	800dcc4 <_free_r+0x70>
 800dcac:	6824      	ldr	r4, [r4, #0]
 800dcae:	4421      	add	r1, r4
 800dcb0:	1854      	adds	r4, r2, r1
 800dcb2:	42a3      	cmp	r3, r4
 800dcb4:	6011      	str	r1, [r2, #0]
 800dcb6:	d1e0      	bne.n	800dc7a <_free_r+0x26>
 800dcb8:	681c      	ldr	r4, [r3, #0]
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	6053      	str	r3, [r2, #4]
 800dcbe:	4421      	add	r1, r4
 800dcc0:	6011      	str	r1, [r2, #0]
 800dcc2:	e7da      	b.n	800dc7a <_free_r+0x26>
 800dcc4:	d902      	bls.n	800dccc <_free_r+0x78>
 800dcc6:	230c      	movs	r3, #12
 800dcc8:	6003      	str	r3, [r0, #0]
 800dcca:	e7d6      	b.n	800dc7a <_free_r+0x26>
 800dccc:	6825      	ldr	r5, [r4, #0]
 800dcce:	1961      	adds	r1, r4, r5
 800dcd0:	428b      	cmp	r3, r1
 800dcd2:	bf04      	itt	eq
 800dcd4:	6819      	ldreq	r1, [r3, #0]
 800dcd6:	685b      	ldreq	r3, [r3, #4]
 800dcd8:	6063      	str	r3, [r4, #4]
 800dcda:	bf04      	itt	eq
 800dcdc:	1949      	addeq	r1, r1, r5
 800dcde:	6021      	streq	r1, [r4, #0]
 800dce0:	6054      	str	r4, [r2, #4]
 800dce2:	e7ca      	b.n	800dc7a <_free_r+0x26>
 800dce4:	b003      	add	sp, #12
 800dce6:	bd30      	pop	{r4, r5, pc}
 800dce8:	240010f0 	.word	0x240010f0

0800dcec <_malloc_usable_size_r>:
 800dcec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcf0:	1f18      	subs	r0, r3, #4
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	bfbc      	itt	lt
 800dcf6:	580b      	ldrlt	r3, [r1, r0]
 800dcf8:	18c0      	addlt	r0, r0, r3
 800dcfa:	4770      	bx	lr

0800dcfc <__retarget_lock_acquire_recursive>:
 800dcfc:	4770      	bx	lr

0800dcfe <__retarget_lock_release_recursive>:
 800dcfe:	4770      	bx	lr

0800dd00 <_init>:
 800dd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd02:	bf00      	nop
 800dd04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd06:	bc08      	pop	{r3}
 800dd08:	469e      	mov	lr, r3
 800dd0a:	4770      	bx	lr

0800dd0c <_fini>:
 800dd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd0e:	bf00      	nop
 800dd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd12:	bc08      	pop	{r3}
 800dd14:	469e      	mov	lr, r3
 800dd16:	4770      	bx	lr
