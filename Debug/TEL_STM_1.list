
TEL_STM_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc30  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  0800df00  0800df00  0001df00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e204  0800e204  0001e204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000014  0800e20c  0800e20c  0001e20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e220  0800e220  0001e220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  0800e224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001088  24000080  0800e2a0  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001108  0800e2a0  00021108  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026d52  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000045ab  00000000  00000000  00046dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001590  00000000  00000000  0004b3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001430  00000000  00000000  0004c938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035b16  00000000  00000000  0004dd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cfcc  00000000  00000000  0008387e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153ddb  00000000  00000000  000a084a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f4625  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005e64  00000000  00000000  001f4678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000080 	.word	0x24000080
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800dee8 	.word	0x0800dee8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000084 	.word	0x24000084
 800030c:	0800dee8 	.word	0x0800dee8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00

0800067c <_Z13DC_motor_initv>:
DC_motor fr(25000,10,0.1,0.0005,512,13.2,200);
DC_motor fl(25000,10,0.1,0.0005,512,13.2,200);
DC_motor br(25000,10,0.1,0.0005,512,13.2,200);
DC_motor bl(25000,10,0.1,0.0005,512,13.2,200);

void DC_motor_init(){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8000680:	2100      	movs	r1, #0
 8000682:	481a      	ldr	r0, [pc, #104]	; (80006ec <_Z13DC_motor_initv+0x70>)
 8000684:	f00a f952 	bl	800a92c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8000688:	2104      	movs	r1, #4
 800068a:	4818      	ldr	r0, [pc, #96]	; (80006ec <_Z13DC_motor_initv+0x70>)
 800068c:	f00a f94e 	bl	800a92c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 8000690:	2100      	movs	r1, #0
 8000692:	4817      	ldr	r0, [pc, #92]	; (80006f0 <_Z13DC_motor_initv+0x74>)
 8000694:	f00a f94a 	bl	800a92c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 8000698:	2104      	movs	r1, #4
 800069a:	4815      	ldr	r0, [pc, #84]	; (80006f0 <_Z13DC_motor_initv+0x74>)
 800069c:	f00a f946 	bl	800a92c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80006a0:	2100      	movs	r1, #0
 80006a2:	4814      	ldr	r0, [pc, #80]	; (80006f4 <_Z13DC_motor_initv+0x78>)
 80006a4:	f00a f942 	bl	800a92c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80006a8:	2104      	movs	r1, #4
 80006aa:	4812      	ldr	r0, [pc, #72]	; (80006f4 <_Z13DC_motor_initv+0x78>)
 80006ac:	f00a f93e 	bl	800a92c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	4811      	ldr	r0, [pc, #68]	; (80006f8 <_Z13DC_motor_initv+0x7c>)
 80006b4:	f00a f93a 	bl	800a92c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80006b8:	2104      	movs	r1, #4
 80006ba:	480f      	ldr	r0, [pc, #60]	; (80006f8 <_Z13DC_motor_initv+0x7c>)
 80006bc:	f00a f936 	bl	800a92c <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim13);
 80006c0:	480e      	ldr	r0, [pc, #56]	; (80006fc <_Z13DC_motor_initv+0x80>)
 80006c2:	f009 fe47 	bl	800a354 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_2);
 80006c6:	2104      	movs	r1, #4
 80006c8:	480d      	ldr	r0, [pc, #52]	; (8000700 <_Z13DC_motor_initv+0x84>)
 80006ca:	f009 ff21 	bl	800a510 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 80006ce:	2100      	movs	r1, #0
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <_Z13DC_motor_initv+0x84>)
 80006d2:	f009 ff1d 	bl	800a510 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_2);
 80006d6:	2104      	movs	r1, #4
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <_Z13DC_motor_initv+0x88>)
 80006da:	f009 ff19 	bl	800a510 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 80006de:	2100      	movs	r1, #0
 80006e0:	4808      	ldr	r0, [pc, #32]	; (8000704 <_Z13DC_motor_initv+0x88>)
 80006e2:	f009 ff15 	bl	800a510 <HAL_TIM_PWM_Start_IT>
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	240002e0 	.word	0x240002e0
 80006f0:	240003c4 	.word	0x240003c4
 80006f4:	2400032c 	.word	0x2400032c
 80006f8:	24000378 	.word	0x24000378
 80006fc:	2400045c 	.word	0x2400045c
 8000700:	24000410 	.word	0x24000410
 8000704:	240004a8 	.word	0x240004a8

08000708 <_ZN8DC_motorC1Eddddddd>:


DC_motor::DC_motor(double p, double i, double d, double time, double res, double ratio, double limit){
 8000708:	b480      	push	{r7}
 800070a:	b091      	sub	sp, #68	; 0x44
 800070c:	af00      	add	r7, sp, #0
 800070e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000710:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 8000714:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 8000718:	ed87 2b08 	vstr	d2, [r7, #32]
 800071c:	ed87 3b06 	vstr	d3, [r7, #24]
 8000720:	ed87 4b04 	vstr	d4, [r7, #16]
 8000724:	ed87 5b02 	vstr	d5, [r7, #8]
 8000728:	ed87 6b00 	vstr	d6, [r7]
 800072c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800072e:	2200      	movs	r2, #0
 8000730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	this->p = p;
 8000734:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000736:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800073a:	e9c1 2300 	strd	r2, r3, [r1]
	this->i = i;
 800073e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000740:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000744:	e9c1 2304 	strd	r2, r3, [r1, #16]
	this->d = d;
 8000748:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800074a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800074e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	this->time = time;
 8000752:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000758:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	this->res_encoder = res;
 800075c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800075e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000762:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	this->sr_ratio = ratio;
 8000766:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000768:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800076c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	this->I_limit=limit;
 8000770:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000772:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000776:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
}
 800077a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800077c:	4618      	mov	r0, r3
 800077e:	3744      	adds	r7, #68	; 0x44
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <_ZN8DC_motor10PIDControlEv>:

void DC_motor::PIDControl(void){
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

	pid_check++;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000796:	1c5a      	adds	r2, r3, #1
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	temp = error;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	rps_now = (double) CountNow / 4 / res_encoder / sr_ratio / time;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80007b0:	ee07 3a90 	vmov	s15, r3
 80007b4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007b8:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80007bc:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80007c6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80007d0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80007da:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	error = rps_goal - rps_now;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80007f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	P = p * error;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	ed93 6b00 	vldr	d6, [r3]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8000806:	ee26 7b07 	vmul.f64	d7, d6, d7
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	ed83 7b02 	vstr	d7, [r3, #8]
	sum = i * error * time;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	ed93 6b04 	vldr	d6, [r3, #16]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800081c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8000826:	ee26 7b07 	vmul.f64	d7, d6, d7
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	I = I + sum;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	ed93 6b06 	vldr	d6, [r3, #24]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800083c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	ed83 7b06 	vstr	d7, [r3, #24]
	if (rps_now == 0) {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800084c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000854:	d106      	bne.n	8000864 <_ZN8DC_motor10PIDControlEv+0xdc>
		I = 0;
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	f04f 0200 	mov.w	r2, #0
 800085c:	f04f 0300 	mov.w	r3, #0
 8000860:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}
	if (I >= I_limit) {
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	ed93 6b06 	vldr	d6, [r3, #24]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 8000870:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000878:	db05      	blt.n	8000886 <_ZN8DC_motor10PIDControlEv+0xfe>
		I = I_limit;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8000880:	6879      	ldr	r1, [r7, #4]
 8000882:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}
	if (I < -I_limit) {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	ed93 6b06 	vldr	d6, [r3, #24]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 8000892:	eeb1 7b47 	vneg.f64	d7, d7
 8000896:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089e:	d507      	bpl.n	80008b0 <_ZN8DC_motor10PIDControlEv+0x128>
		I = -I_limit;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 80008a6:	eeb1 7b47 	vneg.f64	d7, d7
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	ed83 7b06 	vstr	d7, [r3, #24]
	}
	D = d * (error - temp) / time;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	ed93 6b08 	vldr	d6, [r3, #32]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 80008c2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80008c6:	ee26 5b07 	vmul.f64	d5, d6, d7
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80008d0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	PID = P + I + D;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	ed93 6b02 	vldr	d6, [r3, #8]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	ed93 7b06 	vldr	d7, [r3, #24]
 80008e6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80008f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <_Z41__static_initialization_and_destruction_0ii>:
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d148      	bne.n	80009aa <_Z41__static_initialization_and_destruction_0ii+0xa2>
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800091e:	4293      	cmp	r3, r2
 8000920:	d143      	bne.n	80009aa <_Z41__static_initialization_and_destruction_0ii+0xa2>
DC_motor fr(25000,10,0.1,0.0005,512,13.2,200);
 8000922:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80009b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000926:	ed9f 5b26 	vldr	d5, [pc, #152]	; 80009c0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 800092a:	ed9f 4b27 	vldr	d4, [pc, #156]	; 80009c8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 800092e:	ed9f 3b28 	vldr	d3, [pc, #160]	; 80009d0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000932:	ed9f 2b29 	vldr	d2, [pc, #164]	; 80009d8 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8000936:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 800093a:	ed9f 0b29 	vldr	d0, [pc, #164]	; 80009e0 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 800093e:	482a      	ldr	r0, [pc, #168]	; (80009e8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8000940:	f7ff fee2 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
DC_motor fl(25000,10,0.1,0.0005,512,13.2,200);
 8000944:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80009b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000948:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 80009c0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 800094c:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 80009c8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000950:	ed9f 3b1f 	vldr	d3, [pc, #124]	; 80009d0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000954:	ed9f 2b20 	vldr	d2, [pc, #128]	; 80009d8 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8000958:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 800095c:	ed9f 0b20 	vldr	d0, [pc, #128]	; 80009e0 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 8000960:	4822      	ldr	r0, [pc, #136]	; (80009ec <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8000962:	f7ff fed1 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
DC_motor br(25000,10,0.1,0.0005,512,13.2,200);
 8000966:	ed9f 6b14 	vldr	d6, [pc, #80]	; 80009b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800096a:	ed9f 5b15 	vldr	d5, [pc, #84]	; 80009c0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 800096e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80009c8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000972:	ed9f 3b17 	vldr	d3, [pc, #92]	; 80009d0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000976:	ed9f 2b18 	vldr	d2, [pc, #96]	; 80009d8 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 800097a:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 800097e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80009e0 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 8000982:	481b      	ldr	r0, [pc, #108]	; (80009f0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8000984:	f7ff fec0 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
DC_motor bl(25000,10,0.1,0.0005,512,13.2,200);
 8000988:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80009b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800098c:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 80009c0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000990:	ed9f 4b0d 	vldr	d4, [pc, #52]	; 80009c8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000994:	ed9f 3b0e 	vldr	d3, [pc, #56]	; 80009d0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000998:	ed9f 2b0f 	vldr	d2, [pc, #60]	; 80009d8 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 800099c:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 80009a0:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80009e0 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 80009a4:	4813      	ldr	r0, [pc, #76]	; (80009f4 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80009a6:	f7ff feaf 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	f3af 8000 	nop.w
 80009b8:	00000000 	.word	0x00000000
 80009bc:	40690000 	.word	0x40690000
 80009c0:	66666666 	.word	0x66666666
 80009c4:	402a6666 	.word	0x402a6666
 80009c8:	00000000 	.word	0x00000000
 80009cc:	40800000 	.word	0x40800000
 80009d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80009d4:	3f40624d 	.word	0x3f40624d
 80009d8:	9999999a 	.word	0x9999999a
 80009dc:	3fb99999 	.word	0x3fb99999
 80009e0:	00000000 	.word	0x00000000
 80009e4:	40d86a00 	.word	0x40d86a00
 80009e8:	240000a0 	.word	0x240000a0
 80009ec:	24000130 	.word	0x24000130
 80009f0:	240001c0 	.word	0x240001c0
 80009f4:	24000250 	.word	0x24000250

080009f8 <_GLOBAL__sub_I_fr>:
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a00:	2001      	movs	r0, #1
 8000a02:	f7ff ff81 	bl	8000908 <_Z41__static_initialization_and_destruction_0ii>
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <_Z10debug_loopv>:

/** debug which function **/
bool mecanum_debug = true;


void debug_loop(){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	while(1){
		if(mecanum_debug) STM::run_mecanum();
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <_Z10debug_loopv+0x14>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d0fb      	beq.n	8000a0c <_Z10debug_loopv+0x4>
 8000a14:	f003 fdce 	bl	80045b4 <_ZN3STM11run_mecanumEv>
 8000a18:	e7f8      	b.n	8000a0c <_Z10debug_loopv+0x4>
 8000a1a:	bf00      	nop
 8000a1c:	24000001 	.word	0x24000001

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a24:	f004 f810 	bl	8004a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a28:	f000 f818 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2c:	f000 fb56 	bl	80010dc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a30:	f000 f884 	bl	8000b3c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a34:	f000 f8d6 	bl	8000be4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a38:	f000 f92a 	bl	8000c90 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000a3c:	f000 f97e 	bl	8000d3c <MX_TIM5_Init>
  MX_TIM12_Init();
 8000a40:	f000 f9d2 	bl	8000de8 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000a44:	f000 fa20 	bl	8000e88 <MX_TIM13_Init>
  MX_TIM15_Init();
 8000a48:	f000 fa42 	bl	8000ed0 <MX_TIM15_Init>
  MX_DMA_Init();
 8000a4c:	f000 fb1e 	bl	800108c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a50:	f000 fad0 	bl	8000ff4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000a54:	f000 fc36 	bl	80012c4 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <main+0x38>
	...

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b09c      	sub	sp, #112	; 0x70
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a66:	224c      	movs	r2, #76	; 0x4c
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f00d f8b2 	bl	800dbd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2220      	movs	r2, #32
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f00d f8ac 	bl	800dbd4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	f007 f981 	bl	8007d84 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b2c      	ldr	r3, [pc, #176]	; (8000b38 <SystemClock_Config+0xdc>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a8e:	4a2a      	ldr	r2, [pc, #168]	; (8000b38 <SystemClock_Config+0xdc>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a94:	6193      	str	r3, [r2, #24]
 8000a96:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <SystemClock_Config+0xdc>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aa2:	bf00      	nop
 8000aa4:	4b24      	ldr	r3, [pc, #144]	; (8000b38 <SystemClock_Config+0xdc>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ab0:	d1f8      	bne.n	8000aa4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abc:	2302      	movs	r3, #2
 8000abe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000ac8:	232a      	movs	r3, #42	; 0x2a
 8000aca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000acc:	2301      	movs	r3, #1
 8000ace:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ad8:	230c      	movs	r3, #12
 8000ada:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f007 f985 	bl	8007df8 <HAL_RCC_OscConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000af4:	f000 fbe0 	bl	80012b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af8:	233f      	movs	r3, #63	; 0x3f
 8000afa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afc:	2303      	movs	r3, #3
 8000afe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000b00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b06:	2308      	movs	r3, #8
 8000b08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b0a:	2340      	movs	r3, #64	; 0x40
 8000b0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b0e:	2340      	movs	r3, #64	; 0x40
 8000b10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b16:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b18:	2340      	movs	r3, #64	; 0x40
 8000b1a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2102      	movs	r1, #2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f007 fd17 	bl	8008554 <HAL_RCC_ClockConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b2c:	f000 fbc4 	bl	80012b8 <Error_Handler>
  }
}
 8000b30:	bf00      	nop
 8000b32:	3770      	adds	r7, #112	; 0x70
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	58024800 	.word	0x58024800

08000b3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08c      	sub	sp, #48	; 0x30
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	2224      	movs	r2, #36	; 0x24
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f00d f842 	bl	800dbd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	463b      	mov	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_TIM2_Init+0xa4>)
 8000b5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b62:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <MX_TIM2_Init+0xa4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <MX_TIM2_Init+0xa4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <MX_TIM2_Init+0xa4>)
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295
 8000b74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <MX_TIM2_Init+0xa4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7c:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <MX_TIM2_Init+0xa4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	4619      	mov	r1, r3
 8000bac:	480c      	ldr	r0, [pc, #48]	; (8000be0 <MX_TIM2_Init+0xa4>)
 8000bae:	f009 fe17 	bl	800a7e0 <HAL_TIM_Encoder_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000bb8:	f000 fb7e 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_TIM2_Init+0xa4>)
 8000bca:	f00a fd3b 	bl	800b644 <HAL_TIMEx_MasterConfigSynchronization>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000bd4:	f000 fb70 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	3730      	adds	r7, #48	; 0x30
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	240002e0 	.word	0x240002e0

08000be4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08c      	sub	sp, #48	; 0x30
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	2224      	movs	r2, #36	; 0x24
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f00c ffee 	bl	800dbd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <MX_TIM3_Init+0xa4>)
 8000c04:	4a21      	ldr	r2, [pc, #132]	; (8000c8c <MX_TIM3_Init+0xa8>)
 8000c06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c08:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <MX_TIM3_Init+0xa4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0e:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <MX_TIM3_Init+0xa4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c14:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MX_TIM3_Init+0xa4>)
 8000c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_TIM3_Init+0xa4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MX_TIM3_Init+0xa4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c30:	2301      	movs	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c40:	2301      	movs	r3, #1
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	4619      	mov	r1, r3
 8000c52:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_TIM3_Init+0xa4>)
 8000c54:	f009 fdc4 	bl	800a7e0 <HAL_TIM_Encoder_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c5e:	f000 fb2b 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c62:	2300      	movs	r3, #0
 8000c64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4806      	ldr	r0, [pc, #24]	; (8000c88 <MX_TIM3_Init+0xa4>)
 8000c70:	f00a fce8 	bl	800b644 <HAL_TIMEx_MasterConfigSynchronization>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c7a:	f000 fb1d 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	3730      	adds	r7, #48	; 0x30
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	2400032c 	.word	0x2400032c
 8000c8c:	40000400 	.word	0x40000400

08000c90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	; 0x30
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c96:	f107 030c 	add.w	r3, r7, #12
 8000c9a:	2224      	movs	r2, #36	; 0x24
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f00c ff98 	bl	800dbd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cae:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000cb0:	4a21      	ldr	r2, [pc, #132]	; (8000d38 <MX_TIM4_Init+0xa8>)
 8000cb2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cba:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000cc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cc6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cec:	2301      	movs	r3, #1
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480d      	ldr	r0, [pc, #52]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000d00:	f009 fd6e 	bl	800a7e0 <HAL_TIM_Encoder_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d0a:	f000 fad5 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d16:	463b      	mov	r3, r7
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4806      	ldr	r0, [pc, #24]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000d1c:	f00a fc92 	bl	800b644 <HAL_TIMEx_MasterConfigSynchronization>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d26:	f000 fac7 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	3730      	adds	r7, #48	; 0x30
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	24000378 	.word	0x24000378
 8000d38:	40000800 	.word	0x40000800

08000d3c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08c      	sub	sp, #48	; 0x30
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	2224      	movs	r2, #36	; 0x24
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f00c ff42 	bl	800dbd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d50:	463b      	mov	r3, r7
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d5a:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <MX_TIM5_Init+0xa4>)
 8000d5c:	4a21      	ldr	r2, [pc, #132]	; (8000de4 <MX_TIM5_Init+0xa8>)
 8000d5e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d60:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <MX_TIM5_Init+0xa4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d66:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <MX_TIM5_Init+0xa4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <MX_TIM5_Init+0xa4>)
 8000d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d72:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d74:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <MX_TIM5_Init+0xa4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7a:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <MX_TIM5_Init+0xa4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d80:	2301      	movs	r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d84:	2300      	movs	r3, #0
 8000d86:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	4619      	mov	r1, r3
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <MX_TIM5_Init+0xa4>)
 8000dac:	f009 fd18 	bl	800a7e0 <HAL_TIM_Encoder_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000db6:	f000 fa7f 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <MX_TIM5_Init+0xa4>)
 8000dc8:	f00a fc3c 	bl	800b644 <HAL_TIMEx_MasterConfigSynchronization>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000dd2:	f000 fa71 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	3730      	adds	r7, #48	; 0x30
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	240003c4 	.word	0x240003c4
 8000de4:	40000c00 	.word	0x40000c00

08000de8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
 8000dfc:	615a      	str	r2, [r3, #20]
 8000dfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000e00:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <MX_TIM12_Init+0x98>)
 8000e02:	4a20      	ldr	r2, [pc, #128]	; (8000e84 <MX_TIM12_Init+0x9c>)
 8000e04:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000e06:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <MX_TIM12_Init+0x98>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <MX_TIM12_Init+0x98>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000e12:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <MX_TIM12_Init+0x98>)
 8000e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e18:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <MX_TIM12_Init+0x98>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <MX_TIM12_Init+0x98>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000e26:	4816      	ldr	r0, [pc, #88]	; (8000e80 <MX_TIM12_Init+0x98>)
 8000e28:	f009 fb1a 	bl	800a460 <HAL_TIM_PWM_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000e32:	f000 fa41 	bl	80012b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e36:	2360      	movs	r3, #96	; 0x60
 8000e38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480c      	ldr	r0, [pc, #48]	; (8000e80 <MX_TIM12_Init+0x98>)
 8000e4e:	f009 ff1b 	bl	800ac88 <HAL_TIM_PWM_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000e58:	f000 fa2e 	bl	80012b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	2204      	movs	r2, #4
 8000e60:	4619      	mov	r1, r3
 8000e62:	4807      	ldr	r0, [pc, #28]	; (8000e80 <MX_TIM12_Init+0x98>)
 8000e64:	f009 ff10 	bl	800ac88 <HAL_TIM_PWM_ConfigChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8000e6e:	f000 fa23 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000e72:	4803      	ldr	r0, [pc, #12]	; (8000e80 <MX_TIM12_Init+0x98>)
 8000e74:	f003 f9f4 	bl	8004260 <HAL_TIM_MspPostInit>

}
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	24000410 	.word	0x24000410
 8000e84:	40001800 	.word	0x40001800

08000e88 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_TIM13_Init+0x40>)
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <MX_TIM13_Init+0x44>)
 8000e90:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 63;
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <MX_TIM13_Init+0x40>)
 8000e94:	223f      	movs	r2, #63	; 0x3f
 8000e96:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <MX_TIM13_Init+0x40>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <MX_TIM13_Init+0x40>)
 8000ea0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ea4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <MX_TIM13_Init+0x40>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_TIM13_Init+0x40>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_TIM13_Init+0x40>)
 8000eb4:	f009 f9f6 	bl	800a2a4 <HAL_TIM_Base_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8000ebe:	f000 f9fb 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	2400045c 	.word	0x2400045c
 8000ecc:	40001c00 	.word	0x40001c00

08000ed0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b098      	sub	sp, #96	; 0x60
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]
 8000ef2:	615a      	str	r2, [r3, #20]
 8000ef4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2234      	movs	r2, #52	; 0x34
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f00c fe69 	bl	800dbd4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000f02:	4b3a      	ldr	r3, [pc, #232]	; (8000fec <MX_TIM15_Init+0x11c>)
 8000f04:	4a3a      	ldr	r2, [pc, #232]	; (8000ff0 <MX_TIM15_Init+0x120>)
 8000f06:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000f08:	4b38      	ldr	r3, [pc, #224]	; (8000fec <MX_TIM15_Init+0x11c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0e:	4b37      	ldr	r3, [pc, #220]	; (8000fec <MX_TIM15_Init+0x11c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000f14:	4b35      	ldr	r3, [pc, #212]	; (8000fec <MX_TIM15_Init+0x11c>)
 8000f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f1a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1c:	4b33      	ldr	r3, [pc, #204]	; (8000fec <MX_TIM15_Init+0x11c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f22:	4b32      	ldr	r3, [pc, #200]	; (8000fec <MX_TIM15_Init+0x11c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f28:	4b30      	ldr	r3, [pc, #192]	; (8000fec <MX_TIM15_Init+0x11c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f2e:	482f      	ldr	r0, [pc, #188]	; (8000fec <MX_TIM15_Init+0x11c>)
 8000f30:	f009 fa96 	bl	800a460 <HAL_TIM_PWM_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000f3a:	f000 f9bd 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4827      	ldr	r0, [pc, #156]	; (8000fec <MX_TIM15_Init+0x11c>)
 8000f4e:	f00a fb79 	bl	800b644 <HAL_TIMEx_MasterConfigSynchronization>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000f58:	f000 f9ae 	bl	80012b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f5c:	2360      	movs	r3, #96	; 0x60
 8000f5e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f64:	2300      	movs	r3, #0
 8000f66:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f70:	2300      	movs	r3, #0
 8000f72:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f74:	2300      	movs	r3, #0
 8000f76:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	4619      	mov	r1, r3
 8000f80:	481a      	ldr	r0, [pc, #104]	; (8000fec <MX_TIM15_Init+0x11c>)
 8000f82:	f009 fe81 	bl	800ac88 <HAL_TIM_PWM_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000f8c:	f000 f994 	bl	80012b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f94:	2204      	movs	r2, #4
 8000f96:	4619      	mov	r1, r3
 8000f98:	4814      	ldr	r0, [pc, #80]	; (8000fec <MX_TIM15_Init+0x11c>)
 8000f9a:	f009 fe75 	bl	800ac88 <HAL_TIM_PWM_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000fa4:	f000 f988 	bl	80012b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4807      	ldr	r0, [pc, #28]	; (8000fec <MX_TIM15_Init+0x11c>)
 8000fd0:	f00a fbd4 	bl	800b77c <HAL_TIMEx_ConfigBreakDeadTime>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000fda:	f000 f96d 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000fde:	4803      	ldr	r0, [pc, #12]	; (8000fec <MX_TIM15_Init+0x11c>)
 8000fe0:	f003 f93e 	bl	8004260 <HAL_TIM_MspPostInit>

}
 8000fe4:	bf00      	nop
 8000fe6:	3760      	adds	r7, #96	; 0x60
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	240004a8 	.word	0x240004a8
 8000ff0:	40014000 	.word	0x40014000

08000ff4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ff8:	4b22      	ldr	r3, [pc, #136]	; (8001084 <MX_USART1_UART_Init+0x90>)
 8000ffa:	4a23      	ldr	r2, [pc, #140]	; (8001088 <MX_USART1_UART_Init+0x94>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ffe:	4b21      	ldr	r3, [pc, #132]	; (8001084 <MX_USART1_UART_Init+0x90>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001004:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <MX_USART1_UART_Init+0x90>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <MX_USART1_UART_Init+0x90>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001012:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <MX_USART1_UART_Init+0x90>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_USART1_UART_Init+0x90>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <MX_USART1_UART_Init+0x90>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_USART1_UART_Init+0x90>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <MX_USART1_UART_Init+0x90>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_USART1_UART_Init+0x90>)
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <MX_USART1_UART_Init+0x90>)
 8001038:	2200      	movs	r2, #0
 800103a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800103c:	4811      	ldr	r0, [pc, #68]	; (8001084 <MX_USART1_UART_Init+0x90>)
 800103e:	f00a fc5b 	bl	800b8f8 <HAL_UART_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001048:	f000 f936 	bl	80012b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800104c:	2100      	movs	r1, #0
 800104e:	480d      	ldr	r0, [pc, #52]	; (8001084 <MX_USART1_UART_Init+0x90>)
 8001050:	f00c fca2 	bl	800d998 <HAL_UARTEx_SetTxFifoThreshold>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800105a:	f000 f92d 	bl	80012b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800105e:	2100      	movs	r1, #0
 8001060:	4808      	ldr	r0, [pc, #32]	; (8001084 <MX_USART1_UART_Init+0x90>)
 8001062:	f00c fcd7 	bl	800da14 <HAL_UARTEx_SetRxFifoThreshold>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800106c:	f000 f924 	bl	80012b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <MX_USART1_UART_Init+0x90>)
 8001072:	f00c fc58 	bl	800d926 <HAL_UARTEx_DisableFifoMode>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800107c:	f000 f91c 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	240004f4 	.word	0x240004f4
 8001088:	40011000 	.word	0x40011000

0800108c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_DMA_Init+0x4c>)
 8001094:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001098:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <MX_DMA_Init+0x4c>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <MX_DMA_Init+0x4c>)
 80010a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2100      	movs	r1, #0
 80010b4:	200b      	movs	r0, #11
 80010b6:	f003 fe34 	bl	8004d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010ba:	200b      	movs	r0, #11
 80010bc:	f003 fe4b 	bl	8004d56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2100      	movs	r1, #0
 80010c4:	200c      	movs	r0, #12
 80010c6:	f003 fe2c 	bl	8004d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80010ca:	200c      	movs	r0, #12
 80010cc:	f003 fe43 	bl	8004d56 <HAL_NVIC_EnableIRQ>

}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	58024400 	.word	0x58024400

080010dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010f2:	4b6b      	ldr	r3, [pc, #428]	; (80012a0 <MX_GPIO_Init+0x1c4>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f8:	4a69      	ldr	r2, [pc, #420]	; (80012a0 <MX_GPIO_Init+0x1c4>)
 80010fa:	f043 0310 	orr.w	r3, r3, #16
 80010fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001102:	4b67      	ldr	r3, [pc, #412]	; (80012a0 <MX_GPIO_Init+0x1c4>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	f003 0310 	and.w	r3, r3, #16
 800110c:	61bb      	str	r3, [r7, #24]
 800110e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001110:	4b63      	ldr	r3, [pc, #396]	; (80012a0 <MX_GPIO_Init+0x1c4>)
 8001112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001116:	4a62      	ldr	r2, [pc, #392]	; (80012a0 <MX_GPIO_Init+0x1c4>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001120:	4b5f      	ldr	r3, [pc, #380]	; (80012a0 <MX_GPIO_Init+0x1c4>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800112e:	4b5c      	ldr	r3, [pc, #368]	; (80012a0 <MX_GPIO_Init+0x1c4>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001134:	4a5a      	ldr	r2, [pc, #360]	; (80012a0 <MX_GPIO_Init+0x1c4>)
 8001136:	f043 0320 	orr.w	r3, r3, #32
 800113a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800113e:	4b58      	ldr	r3, [pc, #352]	; (80012a0 <MX_GPIO_Init+0x1c4>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001144:	f003 0320 	and.w	r3, r3, #32
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114c:	4b54      	ldr	r3, [pc, #336]	; (80012a0 <MX_GPIO_Init+0x1c4>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001152:	4a53      	ldr	r2, [pc, #332]	; (80012a0 <MX_GPIO_Init+0x1c4>)
 8001154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001158:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115c:	4b50      	ldr	r3, [pc, #320]	; (80012a0 <MX_GPIO_Init+0x1c4>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	4b4d      	ldr	r3, [pc, #308]	; (80012a0 <MX_GPIO_Init+0x1c4>)
 800116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001170:	4a4b      	ldr	r2, [pc, #300]	; (80012a0 <MX_GPIO_Init+0x1c4>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800117a:	4b49      	ldr	r3, [pc, #292]	; (80012a0 <MX_GPIO_Init+0x1c4>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b45      	ldr	r3, [pc, #276]	; (80012a0 <MX_GPIO_Init+0x1c4>)
 800118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118e:	4a44      	ldr	r2, [pc, #272]	; (80012a0 <MX_GPIO_Init+0x1c4>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001198:	4b41      	ldr	r3, [pc, #260]	; (80012a0 <MX_GPIO_Init+0x1c4>)
 800119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a6:	4b3e      	ldr	r3, [pc, #248]	; (80012a0 <MX_GPIO_Init+0x1c4>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ac:	4a3c      	ldr	r2, [pc, #240]	; (80012a0 <MX_GPIO_Init+0x1c4>)
 80011ae:	f043 0308 	orr.w	r3, r3, #8
 80011b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b6:	4b3a      	ldr	r3, [pc, #232]	; (80012a0 <MX_GPIO_Init+0x1c4>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80011ca:	4836      	ldr	r0, [pc, #216]	; (80012a4 <MX_GPIO_Init+0x1c8>)
 80011cc:	f006 fdc0 	bl	8007d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_5, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f242 0120 	movw	r1, #8224	; 0x2020
 80011d6:	4834      	ldr	r0, [pc, #208]	; (80012a8 <MX_GPIO_Init+0x1cc>)
 80011d8:	f006 fdba 	bl	8007d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
 80011e2:	4832      	ldr	r0, [pc, #200]	; (80012ac <MX_GPIO_Init+0x1d0>)
 80011e4:	f006 fdb4 	bl	8007d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 80011ee:	4830      	ldr	r0, [pc, #192]	; (80012b0 <MX_GPIO_Init+0x1d4>)
 80011f0:	f006 fdae 	bl	8007d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 80011fa:	482e      	ldr	r0, [pc, #184]	; (80012b4 <MX_GPIO_Init+0x1d8>)
 80011fc:	f006 fda8 	bl	8007d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8;
 8001200:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8001204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4619      	mov	r1, r3
 8001218:	4822      	ldr	r0, [pc, #136]	; (80012a4 <MX_GPIO_Init+0x1c8>)
 800121a:	f006 fbf1 	bl	8007a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 800121e:	f242 0320 	movw	r3, #8224	; 0x2020
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	2301      	movs	r3, #1
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2300      	movs	r3, #0
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	481c      	ldr	r0, [pc, #112]	; (80012a8 <MX_GPIO_Init+0x1cc>)
 8001238:	f006 fbe2 	bl	8007a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF9 PF11 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15;
 800123c:	f44f 430b 	mov.w	r3, #35584	; 0x8b00
 8001240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	2301      	movs	r3, #1
 8001244:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	4619      	mov	r1, r3
 8001254:	4815      	ldr	r0, [pc, #84]	; (80012ac <MX_GPIO_Init+0x1d0>)
 8001256:	f006 fbd3 	bl	8007a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9;
 800125a:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 800125e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001260:	2301      	movs	r3, #1
 8001262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	4619      	mov	r1, r3
 8001272:	480f      	ldr	r0, [pc, #60]	; (80012b0 <MX_GPIO_Init+0x1d4>)
 8001274:	f006 fbc4 	bl	8007a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 8001278:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 800127c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	4808      	ldr	r0, [pc, #32]	; (80012b4 <MX_GPIO_Init+0x1d8>)
 8001292:	f006 fbb5 	bl	8007a00 <HAL_GPIO_Init>

}
 8001296:	bf00      	nop
 8001298:	3730      	adds	r7, #48	; 0x30
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	58024400 	.word	0x58024400
 80012a4:	58021000 	.word	0x58021000
 80012a8:	58020800 	.word	0x58020800
 80012ac:	58021400 	.word	0x58021400
 80012b0:	58020400 	.word	0x58020400
 80012b4:	58020c00 	.word	0x58020c00

080012b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012bc:	b672      	cpsid	i
}
 80012be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <Error_Handler+0x8>
	...

080012c4 <main_function>:
#include "debug.h"
#include "ros_main.h"
#include "stm_main.h"


void main_function(){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	ROS::setup();
 80012c8:	f001 ff8a 	bl	80031e0 <_ZN3ROS5setupEv>
	STM::setup();
 80012cc:	f003 f96c 	bl	80045a8 <_ZN3STM5setupEv>

	while(1){
		if(debug_mode) debug_loop();
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <main_function+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d002      	beq.n	80012de <main_function+0x1a>
 80012d8:	f7ff fb96 	bl	8000a08 <_Z10debug_loopv>
 80012dc:	e7f8      	b.n	80012d0 <main_function+0xc>
		else ROS::loop();
 80012de:	f001 ff8f 	bl	8003200 <_ZN3ROS4loopEv>
		if(debug_mode) debug_loop();
 80012e2:	e7f5      	b.n	80012d0 <main_function+0xc>
 80012e4:	24000000 	.word	0x24000000

080012e8 <_ZN8CAR_INFOC1Ev>:

typedef struct{
	double Vx=0;
	double Vy=0;
	double Omega=0;
} CAR_INFO;
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	e9c1 2300 	strd	r2, r3, [r1]
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	f04f 0300 	mov.w	r3, #0
 8001308:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <_ZN7MecanumC1Ev>:
#include "mecanum.h"
#include "dc_motor.h"

Mecanum mecanum;

Mecanum::Mecanum(void){
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ffd8 	bl	80012e8 <_ZN8CAR_INFOC1Ev>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3318      	adds	r3, #24
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ffd3 	bl	80012e8 <_ZN8CAR_INFOC1Ev>
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <_ZN7MecanumC1Ev+0x60>)
 800134a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	a309      	add	r3, pc, #36	; (adr r3, 8001378 <_ZN7MecanumC1Ev+0x50>)
 8001352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001356:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	a308      	add	r3, pc, #32	; (adr r3, 8001380 <_ZN7MecanumC1Ev+0x58>)
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	DC_motor_init();
 8001366:	f7ff f989 	bl	800067c <_Z13DC_motor_initv>
}
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	f3af 8000 	nop.w
 8001378:	cccccccd 	.word	0xcccccccd
 800137c:	4020cccc 	.word	0x4020cccc
 8001380:	39581062 	.word	0x39581062
 8001384:	400d48b4 	.word	0x400d48b4
 8001388:	40270000 	.word	0x40270000

0800138c <_ZN7Mecanum3runEv>:

// calculate wheel (-> PID) -> calculate car -> pub
void Mecanum::run(void){
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	tf2_wheel_speed();
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 f807 	bl	80013a8 <_ZN7Mecanum15tf2_wheel_speedEv>
	tf2_car_speed();
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f894 	bl	80014c8 <_ZN7Mecanum13tf2_car_speedEv>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <_ZN7Mecanum15tf2_wheel_speedEv>:

// alter wheel speed
void Mecanum::tf2_wheel_speed(void){
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	fr.rps_goal = (CAR_Goal.Vy - CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	ed93 6b02 	vldr	d6, [r3, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	ed93 7b00 	vldr	d7, [r3]
 80013bc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	ed93 5b04 	vldr	d5, [r3, #16]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80013d2:	ee34 7b07 	vadd.f64	d7, d4, d7
 80013d6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013da:	ee36 5b07 	vadd.f64	d5, d6, d7
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80013e4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013e8:	4b32      	ldr	r3, [pc, #200]	; (80014b4 <_ZN7Mecanum15tf2_wheel_speedEv+0x10c>)
 80013ea:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	fl.rps_goal = (CAR_Goal.Vy + CAR_Goal.Vx - CAR_Goal.Omega*(a+b) )/radius;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	ed93 6b02 	vldr	d6, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	ed93 7b00 	vldr	d7, [r3]
 80013fa:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	ed93 5b04 	vldr	d5, [r3, #16]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001410:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001414:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001418:	ee36 5b47 	vsub.f64	d5, d6, d7
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8001422:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001426:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <_ZN7Mecanum15tf2_wheel_speedEv+0x110>)
 8001428:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	bl.rps_goal = (CAR_Goal.Vy - CAR_Goal.Vx - CAR_Goal.Omega*(a+b) )/radius;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	ed93 6b02 	vldr	d6, [r3, #8]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	ed93 7b00 	vldr	d7, [r3]
 8001438:	ee36 6b47 	vsub.f64	d6, d6, d7
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	ed93 5b04 	vldr	d5, [r3, #16]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800144e:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001452:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001456:	ee36 5b47 	vsub.f64	d5, d6, d7
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8001460:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <_ZN7Mecanum15tf2_wheel_speedEv+0x114>)
 8001466:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	br.rps_goal = (CAR_Goal.Vy + CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	ed93 6b02 	vldr	d6, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	ed93 7b00 	vldr	d7, [r3]
 8001476:	ee36 6b07 	vadd.f64	d6, d6, d7
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	ed93 5b04 	vldr	d5, [r3, #16]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800148c:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001490:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001494:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 800149e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <_ZN7Mecanum15tf2_wheel_speedEv+0x118>)
 80014a4:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	240000a0 	.word	0x240000a0
 80014b8:	24000130 	.word	0x24000130
 80014bc:	24000250 	.word	0x24000250
 80014c0:	240001c0 	.word	0x240001c0
 80014c4:	00000000 	.word	0x00000000

080014c8 <_ZN7Mecanum13tf2_car_speedEv>:


// give current car speed
void Mecanum::tf2_car_speed(void){
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	CAR_Now.Vx = (1/4)*radius*(fl.rps_now + fr.rps_now + bl.rps_now + br.rps_now);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80014d6:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80015b0 <_ZN7Mecanum13tf2_car_speedEv+0xe8>
 80014da:	ee27 6b06 	vmul.f64	d6, d7, d6
 80014de:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 80014e0:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 80014e4:	4b35      	ldr	r3, [pc, #212]	; (80015bc <_ZN7Mecanum13tf2_car_speedEv+0xf4>)
 80014e6:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80014ea:	ee35 5b07 	vadd.f64	d5, d5, d7
 80014ee:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <_ZN7Mecanum13tf2_car_speedEv+0xf8>)
 80014f0:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80014f4:	ee35 5b07 	vadd.f64	d5, d5, d7
 80014f8:	4b32      	ldr	r3, [pc, #200]	; (80015c4 <_ZN7Mecanum13tf2_car_speedEv+0xfc>)
 80014fa:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80014fe:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001502:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	ed83 7b06 	vstr	d7, [r3, #24]
	CAR_Now.Vy = (1/4)*radius*(-fl.rps_now + fr.rps_now + bl.rps_now - br.rps_now);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001512:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80015b0 <_ZN7Mecanum13tf2_car_speedEv+0xe8>
 8001516:	ee27 6b06 	vmul.f64	d6, d7, d6
 800151a:	4b28      	ldr	r3, [pc, #160]	; (80015bc <_ZN7Mecanum13tf2_car_speedEv+0xf4>)
 800151c:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001520:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 8001522:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001526:	ee35 5b47 	vsub.f64	d5, d5, d7
 800152a:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <_ZN7Mecanum13tf2_car_speedEv+0xf8>)
 800152c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001530:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001534:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <_ZN7Mecanum13tf2_car_speedEv+0xfc>)
 8001536:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800153a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800153e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	ed83 7b08 	vstr	d7, [r3, #32]
	CAR_Now.Omega = (1/4)*radius*(1/(a+b))*(-fl.rps_now + fr.rps_now - bl.rps_now + br.rps_now);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800154e:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80015b0 <_ZN7Mecanum13tf2_car_speedEv+0xe8>
 8001552:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001562:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001566:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800156a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800156e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <_ZN7Mecanum13tf2_car_speedEv+0xf4>)
 8001574:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 800157a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800157e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001582:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <_ZN7Mecanum13tf2_car_speedEv+0xf8>)
 8001584:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001588:	ee35 5b47 	vsub.f64	d5, d5, d7
 800158c:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <_ZN7Mecanum13tf2_car_speedEv+0xfc>)
 800158e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001592:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001596:	ee26 7b07 	vmul.f64	d7, d6, d7
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	f3af 8000 	nop.w
	...
 80015b8:	24000130 	.word	0x24000130
 80015bc:	240000a0 	.word	0x240000a0
 80015c0:	24000250 	.word	0x24000250
 80015c4:	240001c0 	.word	0x240001c0

080015c8 <_Z41__static_initialization_and_destruction_0ii>:
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d107      	bne.n	80015e8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015de:	4293      	cmp	r3, r2
 80015e0:	d102      	bne.n	80015e8 <_Z41__static_initialization_and_destruction_0ii+0x20>
Mecanum mecanum;
 80015e2:	4803      	ldr	r0, [pc, #12]	; (80015f0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80015e4:	f7ff fea0 	bl	8001328 <_ZN7MecanumC1Ev>
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	24000678 	.word	0x24000678

080015f4 <_GLOBAL__sub_I_mecanum>:
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015fc:	2001      	movs	r0, #1
 80015fe:	f7ff ffe3 	bl	80015c8 <_Z41__static_initialization_and_destruction_0ii>
 8001602:	bd80      	pop	{r7, pc}

08001604 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <_ZN3ros3MsgC1Ev+0x1c>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	0800e1b4 	.word	0x0800e1b4

08001648 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
      data()
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ffe8 	bl	8001628 <_ZN3ros3MsgC1Ev>
 8001658:	4a06      	ldr	r2, [pc, #24]	; (8001674 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3304      	adds	r3, #4
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ffce 	bl	8001604 <_ZN3ros4TimeC1Ev>
    {
    }
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	0800e19c 	.word	0x0800e19c

08001678 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6859      	ldr	r1, [r3, #4]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	4413      	add	r3, r2
 8001690:	b2ca      	uxtb	r2, r1
 8001692:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	0a19      	lsrs	r1, r3, #8
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3301      	adds	r3, #1
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	4413      	add	r3, r2
 80016a2:	b2ca      	uxtb	r2, r1
 80016a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	0c19      	lsrs	r1, r3, #16
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3302      	adds	r3, #2
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	b2ca      	uxtb	r2, r1
 80016b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	0e19      	lsrs	r1, r3, #24
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	3303      	adds	r3, #3
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	4413      	add	r3, r2
 80016c6:	b2ca      	uxtb	r2, r1
 80016c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	3304      	adds	r3, #4
 80016ce:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6899      	ldr	r1, [r3, #8]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	4413      	add	r3, r2
 80016da:	b2ca      	uxtb	r2, r1
 80016dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	0a19      	lsrs	r1, r3, #8
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3301      	adds	r3, #1
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	b2ca      	uxtb	r2, r1
 80016ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	0c19      	lsrs	r1, r3, #16
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	3302      	adds	r3, #2
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	4413      	add	r3, r2
 80016fe:	b2ca      	uxtb	r2, r1
 8001700:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	0e19      	lsrs	r1, r3, #24
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	3303      	adds	r3, #3
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	4413      	add	r3, r2
 8001710:	b2ca      	uxtb	r2, r1
 8001712:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	3304      	adds	r3, #4
 8001718:	60fb      	str	r3, [r7, #12]
      return offset;
 800171a:	68fb      	ldr	r3, [r7, #12]
    }
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	4413      	add	r3, r2
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	3301      	adds	r3, #1
 800174c:	6839      	ldr	r1, [r7, #0]
 800174e:	440b      	add	r3, r1
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	431a      	orrs	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	3302      	adds	r3, #2
 8001762:	6839      	ldr	r1, [r7, #0]
 8001764:	440b      	add	r3, r1
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	041b      	lsls	r3, r3, #16
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3303      	adds	r3, #3
 8001778:	6839      	ldr	r1, [r7, #0]
 800177a:	440b      	add	r3, r1
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	061b      	lsls	r3, r3, #24
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3304      	adds	r3, #4
 800178a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	4413      	add	r3, r2
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3301      	adds	r3, #1
 80017a2:	6839      	ldr	r1, [r7, #0]
 80017a4:	440b      	add	r3, r1
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	3302      	adds	r3, #2
 80017b8:	6839      	ldr	r1, [r7, #0]
 80017ba:	440b      	add	r3, r1
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	041b      	lsls	r3, r3, #16
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	3303      	adds	r3, #3
 80017ce:	6839      	ldr	r1, [r7, #0]
 80017d0:	440b      	add	r3, r1
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	061b      	lsls	r3, r3, #24
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	3304      	adds	r3, #4
 80017e0:	60fb      	str	r3, [r7, #12]
     return offset;
 80017e2:	68fb      	ldr	r3, [r7, #12]
    }
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	0800df00 	.word	0x0800df00

0800180c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	0800df10 	.word	0x0800df10

08001828 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fef8 	bl	8001628 <_ZN3ros3MsgC1Ev>
 8001838:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	809a      	strh	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a09      	ldr	r2, [pc, #36]	; (800186c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a07      	ldr	r2, [pc, #28]	; (800186c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a06      	ldr	r2, [pc, #24]	; (800186c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001854:	611a      	str	r2, [r3, #16]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	615a      	str	r2, [r3, #20]
    {
    }
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	0800e184 	.word	0x0800e184
 800186c:	0800df34 	.word	0x0800df34

08001870 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	8899      	ldrh	r1, [r3, #4]
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	4413      	add	r3, r2
 8001888:	b2ca      	uxtb	r2, r1
 800188a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	889b      	ldrh	r3, [r3, #4]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	b299      	uxth	r1, r3
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	3301      	adds	r3, #1
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	4413      	add	r3, r2
 800189c:	b2ca      	uxtb	r2, r1
 800189e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	3302      	adds	r3, #2
 80018a4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fd30 	bl	8000310 <strlen>
 80018b0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	69b9      	ldr	r1, [r7, #24]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f001 fcce 	bl	800325c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	3304      	adds	r3, #4
 80018c4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	18d0      	adds	r0, r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4619      	mov	r1, r3
 80018d4:	f00c f970 	bl	800dbb8 <memcpy>
      offset += length_topic_name;
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	4413      	add	r3, r2
 80018de:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fd13 	bl	8000310 <strlen>
 80018ea:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	4413      	add	r3, r2
 80018f2:	6979      	ldr	r1, [r7, #20]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f001 fcb1 	bl	800325c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3304      	adds	r3, #4
 80018fe:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	18d0      	adds	r0, r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	4619      	mov	r1, r3
 800190e:	f00c f953 	bl	800dbb8 <memcpy>
      offset += length_message_type;
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	4413      	add	r3, r2
 8001918:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fcf6 	bl	8000310 <strlen>
 8001924:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	4413      	add	r3, r2
 800192c:	6939      	ldr	r1, [r7, #16]
 800192e:	4618      	mov	r0, r3
 8001930:	f001 fc94 	bl	800325c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	3304      	adds	r3, #4
 8001938:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	18d0      	adds	r0, r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4619      	mov	r1, r3
 8001948:	f00c f936 	bl	800dbb8 <memcpy>
      offset += length_md5sum;
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4413      	add	r3, r2
 8001952:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800195a:	68f9      	ldr	r1, [r7, #12]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	4413      	add	r3, r2
 8001962:	b2ca      	uxtb	r2, r1
 8001964:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	0a19      	lsrs	r1, r3, #8
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3301      	adds	r3, #1
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	4413      	add	r3, r2
 8001972:	b2ca      	uxtb	r2, r1
 8001974:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	0c19      	lsrs	r1, r3, #16
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3302      	adds	r3, #2
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	4413      	add	r3, r2
 8001982:	b2ca      	uxtb	r2, r1
 8001984:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	0e19      	lsrs	r1, r3, #24
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3303      	adds	r3, #3
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	4413      	add	r3, r2
 8001992:	b2ca      	uxtb	r2, r1
 8001994:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	61fb      	str	r3, [r7, #28]
      return offset;
 800199c:	69fb      	ldr	r3, [r7, #28]
    }
 800199e:	4618      	mov	r0, r3
 80019a0:	3720      	adds	r7, #32
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b08a      	sub	sp, #40	; 0x28
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	4413      	add	r3, r2
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b29a      	uxth	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	889b      	ldrh	r3, [r3, #4]
 80019c6:	b21a      	sxth	r2, r3
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	3301      	adds	r3, #1
 80019cc:	6839      	ldr	r1, [r7, #0]
 80019ce:	440b      	add	r3, r1
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	4313      	orrs	r3, r2
 80019d8:	b21b      	sxth	r3, r3
 80019da:	b29a      	uxth	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	3302      	adds	r3, #2
 80019e4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	441a      	add	r2, r3
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4611      	mov	r1, r2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f001 fc50 	bl	8003298 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	3304      	adds	r3, #4
 80019fc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	4413      	add	r3, r2
 8001a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d20c      	bcs.n	8001a28 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	441a      	add	r2, r3
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	3b01      	subs	r3, #1
 8001a18:	6839      	ldr	r1, [r7, #0]
 8001a1a:	440b      	add	r3, r1
 8001a1c:	7812      	ldrb	r2, [r2, #0]
 8001a1e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	3301      	adds	r3, #1
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
 8001a26:	e7ec      	b.n	8001a02 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	441a      	add	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	4413      	add	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	441a      	add	r2, r3
 8001a52:	f107 0310 	add.w	r3, r7, #16
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f001 fc1d 	bl	8003298 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	3304      	adds	r3, #4
 8001a62:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	623b      	str	r3, [r7, #32]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	6a3a      	ldr	r2, [r7, #32]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d20c      	bcs.n	8001a8e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	441a      	add	r2, r3
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	6839      	ldr	r1, [r7, #0]
 8001a80:	440b      	add	r3, r1
 8001a82:	7812      	ldrb	r2, [r2, #0]
 8001a84:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	623b      	str	r3, [r7, #32]
 8001a8c:	e7ec      	b.n	8001a68 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4413      	add	r3, r2
 8001a94:	3b01      	subs	r3, #1
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	4413      	add	r3, r2
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	441a      	add	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	4413      	add	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	441a      	add	r2, r3
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	4611      	mov	r1, r2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f001 fbea 	bl	8003298 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	61fb      	str	r3, [r7, #28]
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	69fa      	ldr	r2, [r7, #28]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d20c      	bcs.n	8001af4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	441a      	add	r2, r3
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	6839      	ldr	r1, [r7, #0]
 8001ae6:	440b      	add	r3, r1
 8001ae8:	7812      	ldrb	r2, [r2, #0]
 8001aea:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	3301      	adds	r3, #1
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	e7ec      	b.n	8001ace <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4413      	add	r3, r2
 8001afa:	3b01      	subs	r3, #1
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	441a      	add	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4413      	add	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	6839      	ldr	r1, [r7, #0]
 8001b22:	440a      	add	r2, r1
 8001b24:	7812      	ldrb	r2, [r2, #0]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	6839      	ldr	r1, [r7, #0]
 8001b32:	440b      	add	r3, r1
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	3302      	adds	r3, #2
 8001b42:	6839      	ldr	r1, [r7, #0]
 8001b44:	440b      	add	r3, r1
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	041b      	lsls	r3, r3, #16
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	3303      	adds	r3, #3
 8001b54:	6839      	ldr	r1, [r7, #0]
 8001b56:	440b      	add	r3, r1
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	061b      	lsls	r3, r3, #24
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	61bb      	str	r3, [r7, #24]
     return offset;
 8001b6c:	69bb      	ldr	r3, [r7, #24]
    }
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3728      	adds	r7, #40	; 0x28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	0800df38 	.word	0x0800df38

08001b94 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	0800df54 	.word	0x0800df54

08001bb0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fd34 	bl	8001628 <_ZN3ros3MsgC1Ev>
 8001bc0:	4a06      	ldr	r2, [pc, #24]	; (8001bdc <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	711a      	strb	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001bd0:	609a      	str	r2, [r3, #8]
    {
    }
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	0800e16c 	.word	0x0800e16c
 8001be0:	0800df34 	.word	0x0800df34

08001be4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	7912      	ldrb	r2, [r2, #4]
 8001bfc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3301      	adds	r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fb81 	bl	8000310 <strlen>
 8001c0e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	4413      	add	r3, r2
 8001c16:	68b9      	ldr	r1, [r7, #8]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f001 fb1f 	bl	800325c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	3304      	adds	r3, #4
 8001c22:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	18d0      	adds	r0, r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	4619      	mov	r1, r3
 8001c32:	f00b ffc1 	bl	800dbb8 <memcpy>
      offset += length_msg;
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]
      return offset;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
    }
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	781a      	ldrb	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	3301      	adds	r3, #1
 8001c66:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	441a      	add	r2, r3
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f001 fb0f 	bl	8003298 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4413      	add	r3, r2
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d20c      	bcs.n	8001caa <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	441a      	add	r2, r3
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	6839      	ldr	r1, [r7, #0]
 8001c9c:	440b      	add	r3, r1
 8001c9e:	7812      	ldrb	r2, [r2, #0]
 8001ca0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	e7ec      	b.n	8001c84 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	441a      	add	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4413      	add	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
     return offset;
 8001cce:	693b      	ldr	r3, [r7, #16]
    }
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	0800df78 	.word	0x0800df78

08001cf4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	0800df8c 	.word	0x0800df8c

08001d10 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fc84 	bl	8001628 <_ZN3ros3MsgC1Ev>
 8001d20:	4a0c      	ldr	r2, [pc, #48]	; (8001d54 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	619a      	str	r2, [r3, #24]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	61da      	str	r2, [r3, #28]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	0800e154 	.word	0x0800e154

08001d58 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6859      	ldr	r1, [r3, #4]
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	4413      	add	r3, r2
 8001d70:	b2ca      	uxtb	r2, r1
 8001d72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	0a19      	lsrs	r1, r3, #8
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	4413      	add	r3, r2
 8001d82:	b2ca      	uxtb	r2, r1
 8001d84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	0c19      	lsrs	r1, r3, #16
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	3302      	adds	r3, #2
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	4413      	add	r3, r2
 8001d94:	b2ca      	uxtb	r2, r1
 8001d96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	0e19      	lsrs	r1, r3, #24
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	3303      	adds	r3, #3
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	4413      	add	r3, r2
 8001da6:	b2ca      	uxtb	r2, r1
 8001da8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	3304      	adds	r3, #4
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001db0:	2300      	movs	r3, #0
 8001db2:	623b      	str	r3, [r7, #32]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	6a3a      	ldr	r2, [r7, #32]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d22b      	bcs.n	8001e16 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001dcc:	6939      	ldr	r1, [r7, #16]
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	b2ca      	uxtb	r2, r1
 8001dd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	0a19      	lsrs	r1, r3, #8
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	3301      	adds	r3, #1
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	b2ca      	uxtb	r2, r1
 8001de6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	0c19      	lsrs	r1, r3, #16
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	3302      	adds	r3, #2
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	b2ca      	uxtb	r2, r1
 8001df6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	0e19      	lsrs	r1, r3, #24
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	3303      	adds	r3, #3
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	b2ca      	uxtb	r2, r1
 8001e06:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	3301      	adds	r3, #1
 8001e12:	623b      	str	r3, [r7, #32]
 8001e14:	e7ce      	b.n	8001db4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6919      	ldr	r1, [r3, #16]
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	b2ca      	uxtb	r2, r1
 8001e22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	0a19      	lsrs	r1, r3, #8
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	4413      	add	r3, r2
 8001e32:	b2ca      	uxtb	r2, r1
 8001e34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	0c19      	lsrs	r1, r3, #16
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	3302      	adds	r3, #2
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	b2ca      	uxtb	r2, r1
 8001e46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	0e19      	lsrs	r1, r3, #24
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	3303      	adds	r3, #3
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	4413      	add	r3, r2
 8001e56:	b2ca      	uxtb	r2, r1
 8001e58:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d22b      	bcs.n	8001ec6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699a      	ldr	r2, [r3, #24]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001e7c:	68f9      	ldr	r1, [r7, #12]
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	b2ca      	uxtb	r2, r1
 8001e86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	0a19      	lsrs	r1, r3, #8
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	3301      	adds	r3, #1
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	4413      	add	r3, r2
 8001e94:	b2ca      	uxtb	r2, r1
 8001e96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	0c19      	lsrs	r1, r3, #16
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	3302      	adds	r3, #2
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b2ca      	uxtb	r2, r1
 8001ea6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	0e19      	lsrs	r1, r3, #24
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	3303      	adds	r3, #3
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b2ca      	uxtb	r2, r1
 8001eb6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	3304      	adds	r3, #4
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	e7ce      	b.n	8001e64 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69d9      	ldr	r1, [r3, #28]
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	4413      	add	r3, r2
 8001ed0:	b2ca      	uxtb	r2, r1
 8001ed2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	0a19      	lsrs	r1, r3, #8
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	3301      	adds	r3, #1
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	b2ca      	uxtb	r2, r1
 8001ee4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	0c19      	lsrs	r1, r3, #16
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	3302      	adds	r3, #2
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	b2ca      	uxtb	r2, r1
 8001ef6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	0e19      	lsrs	r1, r3, #24
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	3303      	adds	r3, #3
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	4413      	add	r3, r2
 8001f06:	b2ca      	uxtb	r2, r1
 8001f08:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001f10:	2300      	movs	r3, #0
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d228      	bcs.n	8001f70 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe f9f0 	bl	8000310 <strlen>
 8001f30:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	6979      	ldr	r1, [r7, #20]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f001 f98e 	bl	800325c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	3304      	adds	r3, #4
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	18d0      	adds	r0, r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f00b fe2c 	bl	800dbb8 <memcpy>
      offset += length_stringsi;
 8001f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	4413      	add	r3, r2
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	61bb      	str	r3, [r7, #24]
 8001f6e:	e7d1      	b.n	8001f14 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001f72:	4618      	mov	r0, r3
 8001f74:	3728      	adds	r7, #40	; 0x28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b08e      	sub	sp, #56	; 0x38
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f94:	3301      	adds	r3, #1
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	4413      	add	r3, r2
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	021b      	lsls	r3, r3, #8
 8001f9e:	6a3a      	ldr	r2, [r7, #32]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	041b      	lsls	r3, r3, #16
 8001fb0:	6a3a      	ldr	r2, [r7, #32]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb8:	3303      	adds	r3, #3
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	061b      	lsls	r3, r3, #24
 8001fc2:	6a3a      	ldr	r2, [r7, #32]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fca:	3304      	adds	r3, #4
 8001fcc:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	6a3a      	ldr	r2, [r7, #32]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d90a      	bls.n	8001fee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	f00b fdfe 	bl	800dbe4 <realloc>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a3a      	ldr	r2, [r7, #32]
 8001ff2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d236      	bcs.n	8002070 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800200a:	6839      	ldr	r1, [r7, #0]
 800200c:	440a      	add	r2, r1
 800200e:	7812      	ldrb	r2, [r2, #0]
 8002010:	4313      	orrs	r3, r2
 8002012:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002018:	3301      	adds	r3, #1
 800201a:	6839      	ldr	r1, [r7, #0]
 800201c:	440b      	add	r3, r1
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	021b      	lsls	r3, r3, #8
 8002022:	4313      	orrs	r3, r2
 8002024:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202a:	3302      	adds	r3, #2
 800202c:	6839      	ldr	r1, [r7, #0]
 800202e:	440b      	add	r3, r1
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	041b      	lsls	r3, r3, #16
 8002034:	4313      	orrs	r3, r2
 8002036:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203c:	3303      	adds	r3, #3
 800203e:	6839      	ldr	r1, [r7, #0]
 8002040:	440b      	add	r3, r1
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	061b      	lsls	r3, r3, #24
 8002046:	4313      	orrs	r3, r2
 8002048:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002052:	3304      	adds	r3, #4
 8002054:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	3208      	adds	r2, #8
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206a:	3301      	adds	r3, #1
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
 800206e:	e7c3      	b.n	8001ff8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	4413      	add	r3, r2
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800207a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207c:	3301      	adds	r3, #1
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	4413      	add	r3, r2
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	021b      	lsls	r3, r3, #8
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	4313      	orrs	r3, r2
 800208a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800208c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800208e:	3302      	adds	r3, #2
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	4413      	add	r3, r2
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	041b      	lsls	r3, r3, #16
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	4313      	orrs	r3, r2
 800209c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800209e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a0:	3303      	adds	r3, #3
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	4413      	add	r3, r2
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	061b      	lsls	r3, r3, #24
 80020aa:	69fa      	ldr	r2, [r7, #28]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80020b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b2:	3304      	adds	r3, #4
 80020b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d90a      	bls.n	80020d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	699a      	ldr	r2, [r3, #24]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4619      	mov	r1, r3
 80020ca:	4610      	mov	r0, r2
 80020cc:	f00b fd8a 	bl	800dbe4 <realloc>
 80020d0:	4602      	mov	r2, r0
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80020dc:	2300      	movs	r3, #0
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d236      	bcs.n	8002158 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020f2:	6839      	ldr	r1, [r7, #0]
 80020f4:	440a      	add	r2, r1
 80020f6:	7812      	ldrb	r2, [r2, #0]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002100:	3301      	adds	r3, #1
 8002102:	6839      	ldr	r1, [r7, #0]
 8002104:	440b      	add	r3, r1
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002112:	3302      	adds	r3, #2
 8002114:	6839      	ldr	r1, [r7, #0]
 8002116:	440b      	add	r3, r1
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	041b      	lsls	r3, r3, #16
 800211c:	4313      	orrs	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002124:	3303      	adds	r3, #3
 8002126:	6839      	ldr	r1, [r7, #0]
 8002128:	440b      	add	r3, r1
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	061b      	lsls	r3, r3, #24
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213a:	3304      	adds	r3, #4
 800213c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699a      	ldr	r2, [r3, #24]
 8002142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	3214      	adds	r2, #20
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002152:	3301      	adds	r3, #1
 8002154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002156:	e7c3      	b.n	80020e0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	4413      	add	r3, r2
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002164:	3301      	adds	r3, #1
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	4413      	add	r3, r2
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002176:	3302      	adds	r3, #2
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	4413      	add	r3, r2
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	041b      	lsls	r3, r3, #16
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002188:	3303      	adds	r3, #3
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	4413      	add	r3, r2
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	061b      	lsls	r3, r3, #24
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800219a:	3304      	adds	r3, #4
 800219c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d90a      	bls.n	80021be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4619      	mov	r1, r3
 80021b2:	4610      	mov	r0, r2
 80021b4:	f00b fd16 	bl	800dbe4 <realloc>
 80021b8:	4602      	mov	r2, r0
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80021c4:	2300      	movs	r3, #0
 80021c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d23f      	bcs.n	8002252 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80021d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	441a      	add	r2, r3
 80021d8:	f107 030c 	add.w	r3, r7, #12
 80021dc:	4611      	mov	r1, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f001 f85a 	bl	8003298 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e6:	3304      	adds	r3, #4
 80021e8:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80021ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
 80021ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4413      	add	r3, r2
 80021f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d20c      	bcs.n	8002214 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	441a      	add	r2, r3
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	3b01      	subs	r3, #1
 8002204:	6839      	ldr	r1, [r7, #0]
 8002206:	440b      	add	r3, r1
 8002208:	7812      	ldrb	r2, [r2, #0]
 800220a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	3301      	adds	r3, #1
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
 8002212:	e7ec      	b.n	80021ee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4413      	add	r3, r2
 800221a:	3b01      	subs	r3, #1
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	4413      	add	r3, r2
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002226:	3b01      	subs	r3, #1
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	441a      	add	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002230:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4413      	add	r3, r2
 8002236:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800223c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	3220      	adds	r2, #32
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224c:	3301      	adds	r3, #1
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002250:	e7ba      	b.n	80021c8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002254:	4618      	mov	r0, r3
 8002256:	3738      	adds	r7, #56	; 0x38
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	4b03      	ldr	r3, [pc, #12]	; (8002274 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	0800e0a8 	.word	0x0800e0a8

08002278 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	0800dfb0 	.word	0x0800dfb0

08002294 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	611a      	str	r2, [r3, #16]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
  }
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a42      	ldr	r2, [pc, #264]	; (80023f8 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d068      	beq.n	80023c4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a40      	ldr	r2, [pc, #256]	; (80023fc <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d061      	beq.n	80023c4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a3d      	ldr	r2, [pc, #244]	; (8002400 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d05a      	beq.n	80023c4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a3b      	ldr	r2, [pc, #236]	; (8002404 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d053      	beq.n	80023c4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a38      	ldr	r2, [pc, #224]	; (8002408 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d04c      	beq.n	80023c4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a36      	ldr	r2, [pc, #216]	; (800240c <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d045      	beq.n	80023c4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a33      	ldr	r2, [pc, #204]	; (8002410 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d03e      	beq.n	80023c4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a31      	ldr	r2, [pc, #196]	; (8002414 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d037      	beq.n	80023c4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a2e      	ldr	r2, [pc, #184]	; (8002418 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d030      	beq.n	80023c4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a2c      	ldr	r2, [pc, #176]	; (800241c <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d029      	beq.n	80023c4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a29      	ldr	r2, [pc, #164]	; (8002420 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d022      	beq.n	80023c4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a27      	ldr	r2, [pc, #156]	; (8002424 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d01b      	beq.n	80023c4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a24      	ldr	r2, [pc, #144]	; (8002428 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d014      	beq.n	80023c4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a22      	ldr	r2, [pc, #136]	; (800242c <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d00d      	beq.n	80023c4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a1f      	ldr	r2, [pc, #124]	; (8002430 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d006      	beq.n	80023c4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a1d      	ldr	r2, [pc, #116]	; (8002434 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d109      	bne.n	80023d8 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80023d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023d6:	e008      	b.n	80023ea <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80023e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40020010 	.word	0x40020010
 80023fc:	40020028 	.word	0x40020028
 8002400:	40020040 	.word	0x40020040
 8002404:	40020058 	.word	0x40020058
 8002408:	40020070 	.word	0x40020070
 800240c:	40020088 	.word	0x40020088
 8002410:	400200a0 	.word	0x400200a0
 8002414:	400200b8 	.word	0x400200b8
 8002418:	40020410 	.word	0x40020410
 800241c:	40020428 	.word	0x40020428
 8002420:	40020440 	.word	0x40020440
 8002424:	40020458 	.word	0x40020458
 8002428:	40020470 	.word	0x40020470
 800242c:	40020488 	.word	0x40020488
 8002430:	400204a0 	.word	0x400204a0
 8002434:	400204b8 	.word	0x400204b8

08002438 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a0a      	ldr	r2, [pc, #40]	; (800246c <_ZN13STM32HardwareC1Ev+0x34>)
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	240004f4 	.word	0x240004f4

08002470 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f804 	bl	8002486 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3304      	adds	r3, #4
 8002496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800249a:	4619      	mov	r1, r3
 800249c:	f009 fb0e 	bl	800babc <HAL_UART_Receive_DMA>
    }
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <_ZN13STM32Hardware4readEv>:

    int read(){
 80024a8:	b590      	push	{r4, r7, lr}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
      int c = -1;
 80024b0:	f04f 33ff 	mov.w	r3, #4294967295
 80024b4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ff0d 	bl	80022dc <_ZN13STM32Hardware10getRdmaIndEv>
 80024c2:	4603      	mov	r3, r0
 80024c4:	429c      	cmp	r4, r3
 80024c6:	bf14      	ite	ne
 80024c8:	2301      	movne	r3, #1
 80024ca:	2300      	moveq	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d012      	beq.n	80024f8 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80024d8:	1c59      	adds	r1, r3, #1
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	4413      	add	r3, r2
 80024e4:	791b      	ldrb	r3, [r3, #4]
 80024e6:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80024ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80024f8:	68fb      	ldr	r3, [r7, #12]
    }
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd90      	pop	{r4, r7, pc}
	...

08002504 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002514:	2b20      	cmp	r3, #32
 8002516:	d108      	bne.n	800252a <_ZN13STM32Hardware5flushEv+0x26>
 8002518:	4b27      	ldr	r3, [pc, #156]	; (80025b8 <_ZN13STM32Hardware5flushEv+0xb4>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	f083 0301 	eor.w	r3, r3, #1
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <_ZN13STM32Hardware5flushEv+0x26>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <_ZN13STM32Hardware5flushEv+0x28>
 800252a:	2300      	movs	r3, #0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d03f      	beq.n	80025b0 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002530:	4b21      	ldr	r3, [pc, #132]	; (80025b8 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002542:	429a      	cmp	r2, r3
 8002544:	d031      	beq.n	80025aa <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002552:	429a      	cmp	r2, r3
 8002554:	d20a      	bcs.n	800256c <_ZN13STM32Hardware5flushEv+0x68>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800255c:	b29a      	uxth	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002564:	b29b      	uxth	r3, r3
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	b29b      	uxth	r3, r3
 800256a:	e006      	b.n	800257a <_ZN13STM32Hardware5flushEv+0x76>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002572:	b29b      	uxth	r3, r3
 8002574:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002578:	b29b      	uxth	r3, r3
 800257a:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002586:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	89fa      	ldrh	r2, [r7, #14]
 8002590:	4619      	mov	r1, r3
 8002592:	f009 fa01 	bl	800b998 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800259c:	89fb      	ldrh	r3, [r7, #14]
 800259e:	4413      	add	r3, r2
 80025a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80025aa:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <_ZN13STM32Hardware5flushEv+0xb4>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
      }
    }
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	240006c0 	.word	0x240006c0

080025bc <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
      int n = length;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025d2:	bfa8      	it	ge
 80025d4:	f44f 7300 	movge.w	r3, #512	; 0x200
 80025d8:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80025e0:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	4293      	cmp	r3, r2
 80025e8:	bf28      	it	cs
 80025ea:	4613      	movcs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80025f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4413      	add	r3, r2
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	68b9      	ldr	r1, [r7, #8]
 8002600:	4618      	mov	r0, r3
 8002602:	f00b fad9 	bl	800dbb8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	4413      	add	r3, r2
 8002610:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	429a      	cmp	r2, r3
 8002620:	d00b      	beq.n	800263a <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	18d1      	adds	r1, r2, r3
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	461a      	mov	r2, r3
 8002636:	f00b fabf 	bl	800dbb8 <memcpy>
      }

      flush();
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f7ff ff62 	bl	8002504 <_ZN13STM32Hardware5flushEv>
    }
 8002640:	bf00      	nop
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	f002 fa80 	bl	8004b54 <HAL_GetTick>
 8002654:	4603      	mov	r3, r0
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe ffdc 	bl	8001628 <_ZN3ros3MsgC1Ev>
 8002670:	4a0e      	ldr	r2, [pc, #56]	; (80026ac <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	0800e110 	.word	0x0800e110

080026b0 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80026b0:	b480      	push	{r7}
 80026b2:	b08b      	sub	sp, #44	; 0x2c
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80026c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80026c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ce:	6838      	ldr	r0, [r7, #0]
 80026d0:	4401      	add	r1, r0
 80026d2:	b2d3      	uxtb	r3, r2
 80026d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80026d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	0a02      	lsrs	r2, r0, #8
 80026e4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80026e8:	0a0b      	lsrs	r3, r1, #8
 80026ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ec:	3101      	adds	r1, #1
 80026ee:	6838      	ldr	r0, [r7, #0]
 80026f0:	4401      	add	r1, r0
 80026f2:	b2d3      	uxtb	r3, r2
 80026f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80026f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	0c02      	lsrs	r2, r0, #16
 8002704:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002708:	0c0b      	lsrs	r3, r1, #16
 800270a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800270c:	3102      	adds	r1, #2
 800270e:	6838      	ldr	r0, [r7, #0]
 8002710:	4401      	add	r1, r0
 8002712:	b2d3      	uxtb	r3, r2
 8002714:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002716:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	0e02      	lsrs	r2, r0, #24
 8002724:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002728:	0e0b      	lsrs	r3, r1, #24
 800272a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800272c:	3103      	adds	r1, #3
 800272e:	6838      	ldr	r0, [r7, #0]
 8002730:	4401      	add	r1, r0
 8002732:	b2d3      	uxtb	r3, r2
 8002734:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002736:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	000a      	movs	r2, r1
 8002744:	2300      	movs	r3, #0
 8002746:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002748:	3104      	adds	r1, #4
 800274a:	6838      	ldr	r0, [r7, #0]
 800274c:	4401      	add	r1, r0
 800274e:	b2d3      	uxtb	r3, r2
 8002750:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002752:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	0a0a      	lsrs	r2, r1, #8
 8002760:	2300      	movs	r3, #0
 8002762:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002764:	3105      	adds	r1, #5
 8002766:	6838      	ldr	r0, [r7, #0]
 8002768:	4401      	add	r1, r0
 800276a:	b2d3      	uxtb	r3, r2
 800276c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800276e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	0c0a      	lsrs	r2, r1, #16
 800277c:	2300      	movs	r3, #0
 800277e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002780:	3106      	adds	r1, #6
 8002782:	6838      	ldr	r0, [r7, #0]
 8002784:	4401      	add	r1, r0
 8002786:	b2d3      	uxtb	r3, r2
 8002788:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800278a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	0e0a      	lsrs	r2, r1, #24
 8002798:	2300      	movs	r3, #0
 800279a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800279c:	3107      	adds	r1, #7
 800279e:	6838      	ldr	r0, [r7, #0]
 80027a0:	4401      	add	r1, r0
 80027a2:	b2d3      	uxtb	r3, r2
 80027a4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	3308      	adds	r3, #8
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80027b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80027b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80027ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027bc:	6838      	ldr	r0, [r7, #0]
 80027be:	4401      	add	r1, r0
 80027c0:	b2d3      	uxtb	r3, r2
 80027c2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80027c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	0a02      	lsrs	r2, r0, #8
 80027d2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80027d6:	0a0b      	lsrs	r3, r1, #8
 80027d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027da:	3101      	adds	r1, #1
 80027dc:	6838      	ldr	r0, [r7, #0]
 80027de:	4401      	add	r1, r0
 80027e0:	b2d3      	uxtb	r3, r2
 80027e2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80027e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	0c02      	lsrs	r2, r0, #16
 80027f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80027f6:	0c0b      	lsrs	r3, r1, #16
 80027f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027fa:	3102      	adds	r1, #2
 80027fc:	6838      	ldr	r0, [r7, #0]
 80027fe:	4401      	add	r1, r0
 8002800:	b2d3      	uxtb	r3, r2
 8002802:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002804:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	0e02      	lsrs	r2, r0, #24
 8002812:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002816:	0e0b      	lsrs	r3, r1, #24
 8002818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800281a:	3103      	adds	r1, #3
 800281c:	6838      	ldr	r0, [r7, #0]
 800281e:	4401      	add	r1, r0
 8002820:	b2d3      	uxtb	r3, r2
 8002822:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002824:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	000a      	movs	r2, r1
 8002832:	2300      	movs	r3, #0
 8002834:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002836:	3104      	adds	r1, #4
 8002838:	6838      	ldr	r0, [r7, #0]
 800283a:	4401      	add	r1, r0
 800283c:	b2d3      	uxtb	r3, r2
 800283e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002840:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	0a0a      	lsrs	r2, r1, #8
 800284e:	2300      	movs	r3, #0
 8002850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002852:	3105      	adds	r1, #5
 8002854:	6838      	ldr	r0, [r7, #0]
 8002856:	4401      	add	r1, r0
 8002858:	b2d3      	uxtb	r3, r2
 800285a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 800285c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	0c0a      	lsrs	r2, r1, #16
 800286a:	2300      	movs	r3, #0
 800286c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800286e:	3106      	adds	r1, #6
 8002870:	6838      	ldr	r0, [r7, #0]
 8002872:	4401      	add	r1, r0
 8002874:	b2d3      	uxtb	r3, r2
 8002876:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002878:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	0e0a      	lsrs	r2, r1, #24
 8002886:	2300      	movs	r3, #0
 8002888:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800288a:	3107      	adds	r1, #7
 800288c:	6838      	ldr	r0, [r7, #0]
 800288e:	4401      	add	r1, r0
 8002890:	b2d3      	uxtb	r3, r2
 8002892:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	3308      	adds	r3, #8
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80028a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80028a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028aa:	6838      	ldr	r0, [r7, #0]
 80028ac:	4401      	add	r1, r0
 80028ae:	b2d3      	uxtb	r3, r2
 80028b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80028b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	0a02      	lsrs	r2, r0, #8
 80028c0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80028c4:	0a0b      	lsrs	r3, r1, #8
 80028c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c8:	3101      	adds	r1, #1
 80028ca:	6838      	ldr	r0, [r7, #0]
 80028cc:	4401      	add	r1, r0
 80028ce:	b2d3      	uxtb	r3, r2
 80028d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80028d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	0c02      	lsrs	r2, r0, #16
 80028e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80028e4:	0c0b      	lsrs	r3, r1, #16
 80028e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028e8:	3102      	adds	r1, #2
 80028ea:	6838      	ldr	r0, [r7, #0]
 80028ec:	4401      	add	r1, r0
 80028ee:	b2d3      	uxtb	r3, r2
 80028f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80028f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	f04f 0300 	mov.w	r3, #0
 80028fe:	0e02      	lsrs	r2, r0, #24
 8002900:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002904:	0e0b      	lsrs	r3, r1, #24
 8002906:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002908:	3103      	adds	r1, #3
 800290a:	6838      	ldr	r0, [r7, #0]
 800290c:	4401      	add	r1, r0
 800290e:	b2d3      	uxtb	r3, r2
 8002910:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002912:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	000a      	movs	r2, r1
 8002920:	2300      	movs	r3, #0
 8002922:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002924:	3104      	adds	r1, #4
 8002926:	6838      	ldr	r0, [r7, #0]
 8002928:	4401      	add	r1, r0
 800292a:	b2d3      	uxtb	r3, r2
 800292c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800292e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	0a0a      	lsrs	r2, r1, #8
 800293c:	2300      	movs	r3, #0
 800293e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002940:	3105      	adds	r1, #5
 8002942:	6838      	ldr	r0, [r7, #0]
 8002944:	4401      	add	r1, r0
 8002946:	b2d3      	uxtb	r3, r2
 8002948:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800294a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	0c0a      	lsrs	r2, r1, #16
 8002958:	2300      	movs	r3, #0
 800295a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800295c:	3106      	adds	r1, #6
 800295e:	6838      	ldr	r0, [r7, #0]
 8002960:	4401      	add	r1, r0
 8002962:	b2d3      	uxtb	r3, r2
 8002964:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002966:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	0e0a      	lsrs	r2, r1, #24
 8002974:	2300      	movs	r3, #0
 8002976:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002978:	3107      	adds	r1, #7
 800297a:	6838      	ldr	r0, [r7, #0]
 800297c:	4401      	add	r1, r0
 800297e:	b2d3      	uxtb	r3, r2
 8002980:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	3308      	adds	r3, #8
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800298a:	4618      	mov	r0, r3
 800298c:	372c      	adds	r7, #44	; 0x2c
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002996:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800299a:	b0eb      	sub	sp, #428	; 0x1ac
 800299c:	af00      	add	r7, sp, #0
 800299e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80029a2:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029b8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029bc:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80029c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029c4:	4413      	add	r3, r2
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2200      	movs	r2, #0
 80029cc:	461c      	mov	r4, r3
 80029ce:	4615      	mov	r5, r2
 80029d0:	ea40 0804 	orr.w	r8, r0, r4
 80029d4:	ea41 0905 	orr.w	r9, r1, r5
 80029d8:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029dc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029ea:	4413      	add	r3, r2
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2200      	movs	r2, #0
 80029f2:	469a      	mov	sl, r3
 80029f4:	4693      	mov	fp, r2
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002a02:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002a06:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002a0a:	ea40 0402 	orr.w	r4, r0, r2
 8002a0e:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002a12:	430b      	orrs	r3, r1
 8002a14:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002a18:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002a1c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a20:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a28:	1c9a      	adds	r2, r3, #2
 8002a2a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a2e:	4413      	add	r3, r2
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2200      	movs	r2, #0
 8002a36:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002a3a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002a4a:	464c      	mov	r4, r9
 8002a4c:	0423      	lsls	r3, r4, #16
 8002a4e:	4644      	mov	r4, r8
 8002a50:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002a54:	4644      	mov	r4, r8
 8002a56:	0422      	lsls	r2, r4, #16
 8002a58:	ea40 0402 	orr.w	r4, r0, r2
 8002a5c:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002a60:	430b      	orrs	r3, r1
 8002a62:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002a66:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002a6a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a6e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a72:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a76:	1cda      	adds	r2, r3, #3
 8002a78:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a7c:	4413      	add	r3, r2
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2200      	movs	r2, #0
 8002a84:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002a88:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002a8c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002a90:	4623      	mov	r3, r4
 8002a92:	0a1b      	lsrs	r3, r3, #8
 8002a94:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002a98:	4623      	mov	r3, r4
 8002a9a:	061b      	lsls	r3, r3, #24
 8002a9c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002aa0:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002aa4:	4623      	mov	r3, r4
 8002aa6:	4303      	orrs	r3, r0
 8002aa8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002aac:	462b      	mov	r3, r5
 8002aae:	430b      	orrs	r3, r1
 8002ab0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002ab4:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002ab8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002abc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ac0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ac4:	1d1a      	adds	r2, r3, #4
 8002ac6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002aca:	4413      	add	r3, r2
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002ad6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002ae6:	0023      	movs	r3, r4
 8002ae8:	2200      	movs	r2, #0
 8002aea:	ea40 0402 	orr.w	r4, r0, r2
 8002aee:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002af2:	430b      	orrs	r3, r1
 8002af4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002af8:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002afc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002b00:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b04:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b08:	1d5a      	adds	r2, r3, #5
 8002b0a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b0e:	4413      	add	r3, r2
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2200      	movs	r2, #0
 8002b16:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002b1a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002b2a:	0223      	lsls	r3, r4, #8
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	ea40 0402 	orr.w	r4, r0, r2
 8002b32:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002b36:	430b      	orrs	r3, r1
 8002b38:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002b3c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002b40:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002b44:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b48:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b4c:	1d9a      	adds	r2, r3, #6
 8002b4e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b52:	4413      	add	r3, r2
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002b5e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002b6e:	0423      	lsls	r3, r4, #16
 8002b70:	2200      	movs	r2, #0
 8002b72:	ea40 0402 	orr.w	r4, r0, r2
 8002b76:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002b7a:	430b      	orrs	r3, r1
 8002b7c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b80:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002b84:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002b88:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b8c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b90:	1dda      	adds	r2, r3, #7
 8002b92:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b96:	4413      	add	r3, r2
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002ba2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002bb2:	0623      	lsls	r3, r4, #24
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	ea40 0402 	orr.w	r4, r0, r2
 8002bba:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002bbe:	430b      	orrs	r3, r1
 8002bc0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002bc4:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002bc8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002bcc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002bd0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002bd4:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002bd8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bdc:	3308      	adds	r3, #8
 8002bde:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002bee:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002bf2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002bf6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bfa:	4413      	add	r3, r2
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2200      	movs	r2, #0
 8002c02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002c06:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002c0a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002c0e:	4623      	mov	r3, r4
 8002c10:	4303      	orrs	r3, r0
 8002c12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002c16:	462b      	mov	r3, r5
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c1e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002c22:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c26:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c2a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c34:	4413      	add	r3, r2
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002c40:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002c50:	464c      	mov	r4, r9
 8002c52:	0223      	lsls	r3, r4, #8
 8002c54:	4644      	mov	r4, r8
 8002c56:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002c5a:	4644      	mov	r4, r8
 8002c5c:	0222      	lsls	r2, r4, #8
 8002c5e:	ea40 0402 	orr.w	r4, r0, r2
 8002c62:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002c66:	430b      	orrs	r3, r1
 8002c68:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002c6c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002c70:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c74:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c7c:	1c9a      	adds	r2, r3, #2
 8002c7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c82:	4413      	add	r3, r2
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002c9e:	464c      	mov	r4, r9
 8002ca0:	0423      	lsls	r3, r4, #16
 8002ca2:	4644      	mov	r4, r8
 8002ca4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002ca8:	4644      	mov	r4, r8
 8002caa:	0422      	lsls	r2, r4, #16
 8002cac:	ea40 0402 	orr.w	r4, r0, r2
 8002cb0:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cba:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002cbe:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002cc2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002cc6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cca:	1cda      	adds	r2, r3, #3
 8002ccc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cd0:	4413      	add	r3, r2
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cdc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ce0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002ce4:	4623      	mov	r3, r4
 8002ce6:	0a1b      	lsrs	r3, r3, #8
 8002ce8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002cec:	4623      	mov	r3, r4
 8002cee:	061b      	lsls	r3, r3, #24
 8002cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cf4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002cf8:	4623      	mov	r3, r4
 8002cfa:	4303      	orrs	r3, r0
 8002cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d00:	462b      	mov	r3, r5
 8002d02:	430b      	orrs	r3, r1
 8002d04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d08:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002d0c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002d10:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d14:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d18:	1d1a      	adds	r2, r3, #4
 8002d1a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d1e:	4413      	add	r3, r2
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2200      	movs	r2, #0
 8002d26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d2a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002d3a:	0023      	movs	r3, r4
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	ea40 0402 	orr.w	r4, r0, r2
 8002d42:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002d46:	430b      	orrs	r3, r1
 8002d48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002d4c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002d50:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002d54:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d58:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d5c:	1d5a      	adds	r2, r3, #5
 8002d5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d62:	4413      	add	r3, r2
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d6e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002d7e:	0223      	lsls	r3, r4, #8
 8002d80:	2200      	movs	r2, #0
 8002d82:	ea40 0402 	orr.w	r4, r0, r2
 8002d86:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002d8a:	430b      	orrs	r3, r1
 8002d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d90:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002d94:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002d98:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d9c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002da0:	1d9a      	adds	r2, r3, #6
 8002da2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002da6:	4413      	add	r3, r2
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2200      	movs	r2, #0
 8002dae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002db2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002dc2:	0423      	lsls	r3, r4, #16
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	ea40 0402 	orr.w	r4, r0, r2
 8002dca:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002dce:	430b      	orrs	r3, r1
 8002dd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002dd4:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002dd8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002ddc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002de0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002de4:	1dda      	adds	r2, r3, #7
 8002de6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dea:	4413      	add	r3, r2
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2200      	movs	r2, #0
 8002df2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002df6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002e06:	0623      	lsls	r3, r4, #24
 8002e08:	2200      	movs	r2, #0
 8002e0a:	ea40 0402 	orr.w	r4, r0, r2
 8002e0e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002e12:	430b      	orrs	r3, r1
 8002e14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002e18:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002e1c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002e20:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002e24:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002e28:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002e2c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e30:	3308      	adds	r3, #8
 8002e32:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e42:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e46:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002e4a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e4e:	4413      	add	r3, r2
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2200      	movs	r2, #0
 8002e56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e5a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e5e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002e62:	4623      	mov	r3, r4
 8002e64:	4303      	orrs	r3, r0
 8002e66:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e68:	462b      	mov	r3, r5
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e6e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002e72:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e76:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e7a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e84:	4413      	add	r3, r2
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	673b      	str	r3, [r7, #112]	; 0x70
 8002e8e:	677a      	str	r2, [r7, #116]	; 0x74
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e9c:	464c      	mov	r4, r9
 8002e9e:	0223      	lsls	r3, r4, #8
 8002ea0:	4644      	mov	r4, r8
 8002ea2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002ea6:	4644      	mov	r4, r8
 8002ea8:	0222      	lsls	r2, r4, #8
 8002eaa:	ea40 0402 	orr.w	r4, r0, r2
 8002eae:	66bc      	str	r4, [r7, #104]	; 0x68
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002eb4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002eb8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ebc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ec0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ec4:	1c9a      	adds	r2, r3, #2
 8002ec6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002eca:	4413      	add	r3, r2
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	663b      	str	r3, [r7, #96]	; 0x60
 8002ed4:	667a      	str	r2, [r7, #100]	; 0x64
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ee2:	464c      	mov	r4, r9
 8002ee4:	0423      	lsls	r3, r4, #16
 8002ee6:	4644      	mov	r4, r8
 8002ee8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002eec:	4644      	mov	r4, r8
 8002eee:	0422      	lsls	r2, r4, #16
 8002ef0:	ea40 0402 	orr.w	r4, r0, r2
 8002ef4:	65bc      	str	r4, [r7, #88]	; 0x58
 8002ef6:	430b      	orrs	r3, r1
 8002ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002efa:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002efe:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f02:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f06:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f0a:	1cda      	adds	r2, r3, #3
 8002f0c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f10:	4413      	add	r3, r2
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2200      	movs	r2, #0
 8002f18:	653b      	str	r3, [r7, #80]	; 0x50
 8002f1a:	657a      	str	r2, [r7, #84]	; 0x54
 8002f1c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002f20:	4623      	mov	r3, r4
 8002f22:	0a1b      	lsrs	r3, r3, #8
 8002f24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f26:	4623      	mov	r3, r4
 8002f28:	061b      	lsls	r3, r3, #24
 8002f2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f2c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002f30:	4623      	mov	r3, r4
 8002f32:	4303      	orrs	r3, r0
 8002f34:	643b      	str	r3, [r7, #64]	; 0x40
 8002f36:	462b      	mov	r3, r5
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f3c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002f40:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002f44:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f48:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f4c:	1d1a      	adds	r2, r3, #4
 8002f4e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f52:	4413      	add	r3, r2
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2200      	movs	r2, #0
 8002f5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002f68:	0023      	movs	r3, r4
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	ea40 0402 	orr.w	r4, r0, r2
 8002f70:	633c      	str	r4, [r7, #48]	; 0x30
 8002f72:	430b      	orrs	r3, r1
 8002f74:	637b      	str	r3, [r7, #52]	; 0x34
 8002f76:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002f7a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002f7e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f82:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f86:	1d5a      	adds	r2, r3, #5
 8002f88:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f8c:	4413      	add	r3, r2
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2200      	movs	r2, #0
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002fa2:	0223      	lsls	r3, r4, #8
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	ea40 0402 	orr.w	r4, r0, r2
 8002faa:	623c      	str	r4, [r7, #32]
 8002fac:	430b      	orrs	r3, r1
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002fb4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002fb8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002fbc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fc0:	3306      	adds	r3, #6
 8002fc2:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002fc6:	4413      	add	r3, r2
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2200      	movs	r2, #0
 8002fce:	61bb      	str	r3, [r7, #24]
 8002fd0:	61fa      	str	r2, [r7, #28]
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	69bc      	ldr	r4, [r7, #24]
 8002fdc:	0423      	lsls	r3, r4, #16
 8002fde:	2200      	movs	r2, #0
 8002fe0:	ea40 0402 	orr.w	r4, r0, r2
 8002fe4:	613c      	str	r4, [r7, #16]
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002fee:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002ff2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ff6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ffa:	3307      	adds	r3, #7
 8002ffc:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003000:	4413      	add	r3, r2
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2200      	movs	r2, #0
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	60fa      	str	r2, [r7, #12]
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	68bc      	ldr	r4, [r7, #8]
 8003016:	0623      	lsls	r3, r4, #24
 8003018:	2200      	movs	r2, #0
 800301a:	ea40 0402 	orr.w	r4, r0, r2
 800301e:	603c      	str	r4, [r7, #0]
 8003020:	430b      	orrs	r3, r1
 8003022:	607b      	str	r3, [r7, #4]
 8003024:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003028:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 800302c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003030:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003034:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003038:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800303c:	3308      	adds	r3, #8
 800303e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003042:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003046:	4618      	mov	r0, r3
 8003048:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 800304c:	46bd      	mov	sp, r7
 800304e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003052:	4770      	bx	lr

08003054 <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	4b03      	ldr	r3, [pc, #12]	; (800306c <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 800305e:	4618      	mov	r0, r3
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	0800dfd4 	.word	0x0800dfd4

08003070 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	4b03      	ldr	r3, [pc, #12]	; (8003088 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	0800dfe8 	.word	0x0800dfe8

0800308c <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
      data(0)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4618      	mov	r0, r3
 8003098:	f7fe fac6 	bl	8001628 <_ZN3ros3MsgC1Ev>
 800309c:	4a05      	ldr	r2, [pc, #20]	; (80030b4 <_ZN8std_msgs4BoolC1Ev+0x28>)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	711a      	strb	r2, [r3, #4]
    {
    }
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	0800e0f8 	.word	0x0800e0f8

080030b8 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	791b      	ldrb	r3, [r3, #4]
 80030ca:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	4413      	add	r3, r2
 80030d2:	7a3a      	ldrb	r2, [r7, #8]
 80030d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3301      	adds	r3, #1
 80030da:	60fb      	str	r3, [r7, #12]
      return offset;
 80030dc:	68fb      	ldr	r3, [r7, #12]
    }
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80030ea:	b480      	push	{r7}
 80030ec:	b085      	sub	sp, #20
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
 80030f2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80030fc:	7a3a      	ldrb	r2, [r7, #8]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6839      	ldr	r1, [r7, #0]
 8003102:	440b      	add	r3, r1
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	4313      	orrs	r3, r2
 8003108:	b2db      	uxtb	r3, r3
 800310a:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 800310c:	7a3a      	ldrb	r2, [r7, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	3301      	adds	r3, #1
 8003116:	60fb      	str	r3, [r7, #12]
     return offset;
 8003118:	68fb      	ldr	r3, [r7, #12]
    }
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <_ZN8std_msgs4Bool7getTypeEv>:

    const char * getType(){ return "std_msgs/Bool"; };
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	4b03      	ldr	r3, [pc, #12]	; (8003140 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	0800e00c 	.word	0x0800e00c

08003144 <_ZN8std_msgs4Bool6getMD5Ev>:
    const char * getMD5(){ return "8b94c1b53db61fb6aed406028ad6332a"; };
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	4b03      	ldr	r3, [pc, #12]	; (800315c <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	0800e01c 	.word	0x0800e01c

08003160 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE>:
ros::Subscriber<geometry_msgs::Point> scara_sub("scara_toSTM", ROS::scara_callback);

ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
//ros::Publisher scara_pub("scara_fromSTM", &scara_state);

void ROS::scara_callback(const geometry_msgs::Point &msgs){
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	scara.ARM_Goal.Px = msgs.x;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800316e:	490b      	ldr	r1, [pc, #44]	; (800319c <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003170:	e9c1 2300 	strd	r2, r3, [r1]
	scara.ARM_Goal.Py = msgs.y;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800317a:	4908      	ldr	r1, [pc, #32]	; (800319c <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 800317c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	scara.ARM_Goal.Pz = msgs.z;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003186:	4905      	ldr	r1, [pc, #20]	; (800319c <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003188:	e9c1 2304 	strd	r2, r3, [r1, #16]
	scara.run();
 800318c:	4803      	ldr	r0, [pc, #12]	; (800319c <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 800318e:	f000 fe95 	bl	8003ebc <_ZN5SCARA3runEv>
}
 8003192:	bf00      	nop
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	240010b0 	.word	0x240010b0

080031a0 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE>:

void ROS::mecanum_callback(const geometry_msgs::Point &msgs){
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
	mecanum.CAR_Goal.Vx = msgs.x;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80031ae:	490b      	ldr	r1, [pc, #44]	; (80031dc <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 80031b0:	e9c1 2300 	strd	r2, r3, [r1]
	mecanum.CAR_Goal.Vy = msgs.y;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80031ba:	4908      	ldr	r1, [pc, #32]	; (80031dc <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 80031bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	mecanum.CAR_Goal.Omega = msgs.z;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80031c6:	4905      	ldr	r1, [pc, #20]	; (80031dc <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 80031c8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	mecanum.run();
 80031cc:	4803      	ldr	r0, [pc, #12]	; (80031dc <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 80031ce:	f7fe f8dd 	bl	800138c <_ZN7Mecanum3runEv>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	24000678 	.word	0x24000678

080031e0 <_ZN3ROS5setupEv>:
//	car_speed.z = mecanum.CAR_Now.Omega;
//	mecanum_pub.publish(&car_speed);
//}


void ROS::setup(void){
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
	nh.initNode();
 80031e4:	4804      	ldr	r0, [pc, #16]	; (80031f8 <_ZN3ROS5setupEv+0x18>)
 80031e6:	f000 f941 	bl	800346c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

    nh.subscribe(mecanum_sub);
 80031ea:	4904      	ldr	r1, [pc, #16]	; (80031fc <_ZN3ROS5setupEv+0x1c>)
 80031ec:	4802      	ldr	r0, [pc, #8]	; (80031f8 <_ZN3ROS5setupEv+0x18>)
 80031ee:	f000 f95a 	bl	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>

//    nh.advertise(mecanum_pub);
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	240006c4 	.word	0x240006c4
 80031fc:	24001028 	.word	0x24001028

08003200 <_ZN3ROS4loopEv>:

void ROS::loop(void){
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8003204:	4802      	ldr	r0, [pc, #8]	; (8003210 <_ZN3ROS4loopEv+0x10>)
 8003206:	f000 f979 	bl	80034fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	240006c4 	.word	0x240006c4

08003214 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 800321c:	4805      	ldr	r0, [pc, #20]	; (8003234 <HAL_UART_TxCpltCallback+0x20>)
 800321e:	f000 fb46 	bl	80038ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003222:	4603      	mov	r3, r0
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff f96d 	bl	8002504 <_ZN13STM32Hardware5flushEv>
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	240006c4 	.word	0x240006c4

08003238 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003240:	4805      	ldr	r0, [pc, #20]	; (8003258 <HAL_UART_RxCpltCallback+0x20>)
 8003242:	f000 fb34 	bl	80038ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003246:	4603      	mov	r3, r0
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff f91c 	bl	8002486 <_ZN13STM32Hardware10reset_rbufEv>
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	240006c4 	.word	0x240006c4

0800325c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2b03      	cmp	r3, #3
 800326e:	d80d      	bhi.n	800328c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	fa22 f103 	lsr.w	r1, r2, r3
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4413      	add	r3, r2
 8003280:	b2ca      	uxtb	r2, r1
 8003282:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	3301      	adds	r3, #1
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	e7ee      	b.n	800326a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800328c:	bf00      	nop
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80032a8:	2300      	movs	r3, #0
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d811      	bhi.n	80032d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6839      	ldr	r1, [r7, #0]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	440a      	add	r2, r1
 80032bc:	7812      	ldrb	r2, [r2, #0]
 80032be:	4611      	mov	r1, r2
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	00d2      	lsls	r2, r2, #3
 80032c4:	fa01 f202 	lsl.w	r2, r1, r2
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	3301      	adds	r3, #1
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	e7ea      	b.n	80032ac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	4a04      	ldr	r2, [pc, #16]	; (8003300 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	0800e140 	.word	0x0800e140

08003304 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff ffe8 	bl	80032e4 <_ZN3ros15NodeHandleBase_C1Ev>
 8003314:	4a3a      	ldr	r2, [pc, #232]	; (8003400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3304      	adds	r3, #4
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff f88a 	bl	8002438 <_ZN13STM32HardwareC1Ev>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe fcec 	bl	8001d10 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2b18      	cmp	r3, #24
 8003340:	d80b      	bhi.n	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	2200      	movs	r2, #0
 8003350:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	3301      	adds	r3, #1
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	e7f0      	b.n	800333c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b18      	cmp	r3, #24
 8003362:	d80a      	bhi.n	800337a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	f202 2222 	addw	r2, r2, #546	; 0x222
 800336c:	2100      	movs	r1, #0
 800336e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	3301      	adds	r3, #1
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	e7f1      	b.n	800335e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003384:	d20a      	bcs.n	800339c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4413      	add	r3, r2
 800338c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3301      	adds	r3, #1
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	e7f0      	b.n	800337e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800339c:	2300      	movs	r3, #0
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a6:	d20a      	bcs.n	80033be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4413      	add	r3, r2
 80033ae:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80033b2:	2200      	movs	r2, #0
 80033b4:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	3301      	adds	r3, #1
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	e7f0      	b.n	80033a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	0800e0e4 	.word	0x0800e0e4

08003404 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	4a04      	ldr	r2, [pc, #16]	; (8003420 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	0800e128 	.word	0x0800e128

08003424 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff ffe5 	bl	8003404 <_ZN3ros11Subscriber_C1Ev>
 800343a:	4a0b      	ldr	r2, [pc, #44]	; (8003468 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei+0x44>)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	3310      	adds	r3, #16
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff f90b 	bl	8002660 <_ZN13geometry_msgs5PointC1Ev>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	631a      	str	r2, [r3, #48]	; 0x30
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	609a      	str	r2, [r3, #8]
  };
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	0800e0cc 	.word	0x0800e0cc

0800346c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3304      	adds	r3, #4
 8003478:	4618      	mov	r0, r3
 800347a:	f7fe fff9 	bl	8002470 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80034a6:	b480      	push	{r7}
 80034a8:	b085      	sub	sp, #20
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b18      	cmp	r3, #24
 80034b8:	dc19      	bgt.n	80034ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	f202 2222 	addw	r2, r2, #546	; 0x222
 80034c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10d      	bne.n	80034e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80034ca:	6839      	ldr	r1, [r7, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80034d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	605a      	str	r2, [r3, #4]
        return true;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e004      	b.n	80034f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3301      	adds	r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	e7e2      	b.n	80034b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0xe>
      }
    }
    return false;
 80034ee:	2300      	movs	r3, #0
  }
 80034f0:	4618      	mov	r0, r3
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3304      	adds	r3, #4
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff f89d 	bl	8002648 <_ZN13STM32Hardware4timeEv>
 800350e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800351e:	4293      	cmp	r3, r2
 8003520:	d903      	bls.n	800352a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003530:	2b00      	cmp	r3, #0
 8003532:	d009      	beq.n	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	429a      	cmp	r2, r3
 800353e:	d903      	bls.n	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800354e:	2b00      	cmp	r3, #0
 8003550:	d014      	beq.n	800357c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3304      	adds	r3, #4
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff f876 	bl	8002648 <_ZN13STM32Hardware4timeEv>
 800355c:	4602      	mov	r2, r0
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1ad2      	subs	r2, r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003568:	429a      	cmp	r2, r3
 800356a:	bf8c      	ite	hi
 800356c:	2301      	movhi	r3, #1
 800356e:	2300      	movls	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8003576:	f06f 0301 	mvn.w	r3, #1
 800357a:	e194      	b.n	80038a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3304      	adds	r3, #4
 8003580:	4618      	mov	r0, r3
 8003582:	f7fe ff91 	bl	80024a8 <_ZN13STM32Hardware4readEv>
 8003586:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	f2c0 8174 	blt.w	8003878 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	441a      	add	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035a6:	2b07      	cmp	r3, #7
 80035a8:	d11e      	bne.n	80035e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80035b0:	1c59      	adds	r1, r3, #1
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	b2d1      	uxtb	r1, r2
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	4413      	add	r3, r2
 80035c0:	460a      	mov	r2, r1
 80035c2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80035cc:	1e5a      	subs	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1b4      	bne.n	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2208      	movs	r2, #8
 80035e2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80035e6:	e7af      	b.n	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d128      	bne.n	8003644 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2bff      	cmp	r3, #255	; 0xff
 80035f6:	d10d      	bne.n	8003614 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f103 0214 	add.w	r2, r3, #20
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003612:	e799      	b.n	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3304      	adds	r3, #4
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff f815 	bl	8002648 <_ZN13STM32Hardware4timeEv>
 800361e:	4602      	mov	r2, r0
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	f241 3288 	movw	r2, #5000	; 0x1388
 8003628:	4293      	cmp	r3, r2
 800362a:	bf8c      	ite	hi
 800362c:	2301      	movhi	r3, #1
 800362e:	2300      	movls	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d088      	beq.n	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800363e:	f06f 0301 	mvn.w	r3, #1
 8003642:	e130      	b.n	80038a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800364a:	2b01      	cmp	r3, #1
 800364c:	d118      	bne.n	8003680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2bfe      	cmp	r3, #254	; 0xfe
 8003652:	d107      	bne.n	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003662:	e771      	b.n	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003672:	2b00      	cmp	r3, #0
 8003674:	f47f af68 	bne.w	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f924 	bl	80038c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800367e:	e763      	b.n	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003686:	2b02      	cmp	r3, #2
 8003688:	d113      	bne.n	80036b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80036b0:	e74a      	b.n	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d110      	bne.n	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	441a      	add	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80036dc:	e734      	b.n	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d116      	bne.n	8003716 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80036ee:	425a      	negs	r2, r3
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	bf58      	it	pl
 80036f6:	4253      	negpl	r3, r2
 80036f8:	2bff      	cmp	r3, #255	; 0xff
 80036fa:	d107      	bne.n	800370c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800370a:	e71d      	b.n	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003714:	e718      	b.n	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800371c:	2b05      	cmp	r3, #5
 800371e:	d10f      	bne.n	8003740 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800373e:	e703      	b.n	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003746:	2b06      	cmp	r3, #6
 8003748:	d117      	bne.n	800377a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	021b      	lsls	r3, r3, #8
 8003754:	441a      	add	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2207      	movs	r2, #7
 8003760:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800376a:	2b00      	cmp	r3, #0
 800376c:	f47f aeec 	bne.w	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2208      	movs	r2, #8
 8003774:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003778:	e6e6      	b.n	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003780:	2b08      	cmp	r3, #8
 8003782:	f47f aee1 	bne.w	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003794:	425a      	negs	r2, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	bf58      	it	pl
 800379c:	4253      	negpl	r3, r2
 800379e:	2bff      	cmp	r3, #255	; 0xff
 80037a0:	f47f aed2 	bne.w	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d110      	bne.n	80037d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f889 	bl	80038c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f8a4 	bl	8003902 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80037ca:	f04f 33ff 	mov.w	r3, #4294967295
 80037ce:	e06a      	b.n	80038a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80037d6:	2b0a      	cmp	r3, #10
 80037d8:	d107      	bne.n	80037ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80037e0:	4619      	mov	r1, r3
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f96c 	bl	8003ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80037e8:	e6ae      	b.n	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80037f0:	2b06      	cmp	r3, #6
 80037f2:	d10e      	bne.n	8003812 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003800:	4619      	mov	r1, r3
 8003802:	4610      	mov	r0, r2
 8003804:	f7fe fbb9 	bl	8001f7a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003810:	e69a      	b.n	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003818:	2b0b      	cmp	r3, #11
 800381a:	d104      	bne.n	8003826 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003824:	e690      	b.n	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800382c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800383a:	2b00      	cmp	r3, #0
 800383c:	f43f ae84 	beq.w	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003846:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003850:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800385a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003872:	4611      	mov	r1, r2
 8003874:	4798      	blx	r3
    while (true)
 8003876:	e667      	b.n	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003878:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00f      	beq.n	80038a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003892:	4293      	cmp	r3, r2
 8003894:	d906      	bls.n	80038a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f815 	bl	80038c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80038a4:	2300      	movs	r3, #0
  }
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
    return &hardware_;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3304      	adds	r3, #4
  }
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b086      	sub	sp, #24
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80038ce:	f107 030c 	add.w	r3, r7, #12
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fd feb8 	bl	8001648 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f107 020c 	add.w	r2, r7, #12
 80038e2:	210a      	movs	r1, #10
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	4798      	blx	r3
    rt_time = hardware_.time();
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3304      	adds	r3, #4
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fe feab 	bl	8002648 <_ZN13STM32Hardware4timeEv>
 80038f2:	4602      	mov	r2, r0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80038fa:	bf00      	nop
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003902:	b590      	push	{r4, r7, lr}
 8003904:	b08b      	sub	sp, #44	; 0x2c
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800390a:	f107 030c 	add.w	r3, r7, #12
 800390e:	4618      	mov	r0, r3
 8003910:	f7fd ff8a 	bl	8001828 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003914:	2300      	movs	r3, #0
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	2b18      	cmp	r3, #24
 800391c:	dc63      	bgt.n	80039e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d056      	beq.n	80039de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	b29b      	uxth	r3, r3
 8003942:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	6859      	ldr	r1, [r3, #4]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3308      	adds	r3, #8
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4608      	mov	r0, r1
 800397e:	4798      	blx	r3
 8003980:	4603      	mov	r3, r0
 8003982:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	6859      	ldr	r1, [r3, #4]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	330c      	adds	r3, #12
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4608      	mov	r0, r1
 80039ac:	4798      	blx	r3
 80039ae:	4603      	mov	r3, r0
 80039b0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80039b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039b6:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681c      	ldr	r4, [r3, #0]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe fc78 	bl	80022c2 <_ZN3ros9Publisher15getEndpointTypeEv>
 80039d2:	4601      	mov	r1, r0
 80039d4:	f107 030c 	add.w	r3, r7, #12
 80039d8:	461a      	mov	r2, r3
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	3301      	adds	r3, #1
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
 80039e4:	e798      	b.n	8003918 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80039e6:	2300      	movs	r3, #0
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	2b18      	cmp	r3, #24
 80039ee:	dc5f      	bgt.n	8003ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d053      	beq.n	8003aa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a04:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a16:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a26:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a32:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4608      	mov	r0, r1
 8003a42:	4798      	blx	r3
 8003a44:	4603      	mov	r3, r0
 8003a46:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a58:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	330c      	adds	r3, #12
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4608      	mov	r0, r1
 8003a68:	4798      	blx	r3
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a72:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681c      	ldr	r4, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3304      	adds	r3, #4
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4608      	mov	r0, r1
 8003a9a:	4798      	blx	r3
 8003a9c:	4601      	mov	r1, r0
 8003a9e:	f107 030c 	add.w	r3, r7, #12
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	3301      	adds	r3, #1
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
 8003aae:	e79c      	b.n	80039ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003ab8:	bf00      	nop
 8003aba:	372c      	adds	r7, #44	; 0x2c
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd90      	pop	{r4, r7, pc}

08003ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003aca:	f107 0308 	add.w	r3, r7, #8
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fd fdba 	bl	8001648 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fe fdb5 	bl	8002648 <_ZN13STM32Hardware4timeEv>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003aea:	f107 0308 	add.w	r3, r7, #8
 8003aee:	6839      	ldr	r1, [r7, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fd fe19 	bl	8001728 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	4915      	ldr	r1, [pc, #84]	; (8003b50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003afc:	fba1 1303 	umull	r1, r3, r1, r3
 8003b00:	099b      	lsrs	r3, r3, #6
 8003b02:	4413      	add	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003b06:	6939      	ldr	r1, [r7, #16]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003b0c:	fba3 0302 	umull	r0, r3, r3, r2
 8003b10:	099b      	lsrs	r3, r3, #6
 8003b12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b16:	fb00 f303 	mul.w	r3, r0, r3
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	4a0d      	ldr	r2, [pc, #52]	; (8003b54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003b1e:	fb02 f303 	mul.w	r3, r2, r3
 8003b22:	440b      	add	r3, r1
 8003b24:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003b26:	f107 0308 	add.w	r3, r7, #8
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f8a6 	bl	8003c80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3304      	adds	r3, #4
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fe fd85 	bl	8002648 <_ZN13STM32Hardware4timeEv>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003b46:	bf00      	nop
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	10624dd3 	.word	0x10624dd3
 8003b54:	000f4240 	.word	0x000f4240

08003b58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2b63      	cmp	r3, #99	; 0x63
 8003b68:	dd09      	ble.n	8003b7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003b70:	f083 0301 	eor.w	r3, r3, #1
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e079      	b.n	8003c72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003b8a:	3207      	adds	r2, #7
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	4798      	blx	r3
 8003b92:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	22ff      	movs	r2, #255	; 0xff
 8003b98:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	22fe      	movs	r2, #254	; 0xfe
 8003ba0:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	0a1b      	lsrs	r3, r3, #8
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003bca:	4413      	add	r3, r2
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	b21b      	sxth	r3, r3
 8003be6:	121b      	asrs	r3, r3, #8
 8003be8:	b21b      	sxth	r3, r3
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003bf6:	2305      	movs	r3, #5
 8003bf8:	61bb      	str	r3, [r7, #24]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	3306      	adds	r3, #6
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	dc0d      	bgt.n	8003c20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	4413      	add	r3, r2
 8003c16:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	e7ec      	b.n	8003bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	3307      	adds	r3, #7
 8003c24:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	425a      	negs	r2, r3
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	bf58      	it	pl
 8003c30:	4253      	negpl	r3, r2
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	1c59      	adds	r1, r3, #1
 8003c38:	6179      	str	r1, [r7, #20]
 8003c3a:	43d2      	mvns	r2, r2
 8003c3c:	b2d1      	uxtb	r1, r2
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	4413      	add	r3, r2
 8003c42:	460a      	mov	r2, r1
 8003c44:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c4e:	dc0a      	bgt.n	8003c66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	1d18      	adds	r0, r3, #4
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f7fe fcad 	bl	80025bc <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	e005      	b.n	8003c72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003c66:	4905      	ldr	r1, [pc, #20]	; (8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f849 	bl	8003d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003c6e:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003c72:	4618      	mov	r0, r3
 8003c74:	3720      	adds	r7, #32
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	0800e040 	.word	0x0800e040

08003c80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe fcda 	bl	8002648 <_ZN13STM32Hardware4timeEv>
 8003c94:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4915      	ldr	r1, [pc, #84]	; (8003cf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003c9e:	fba1 1303 	umull	r1, r3, r1, r3
 8003ca2:	099b      	lsrs	r3, r3, #6
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	1e5a      	subs	r2, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	6859      	ldr	r1, [r3, #4]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003cb6:	fba3 0302 	umull	r0, r3, r3, r2
 8003cba:	099b      	lsrs	r3, r3, #6
 8003cbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cc0:	fb00 f303 	mul.w	r3, r0, r3
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	4a0c      	ldr	r2, [pc, #48]	; (8003cf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8003cc8:	fb02 f303 	mul.w	r3, r2, r3
 8003ccc:	1aca      	subs	r2, r1, r3
 8003cce:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003cd0:	4413      	add	r3, r2
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	f7fc fc9c 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003cec:	bf00      	nop
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	10624dd3 	.word	0x10624dd3
 8003cf8:	000f4240 	.word	0x000f4240
 8003cfc:	3b9aca00 	.word	0x3b9aca00

08003d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	2103      	movs	r1, #3
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f804 	bl	8003d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003d14:	bf00      	nop
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	460b      	mov	r3, r1
 8003d26:	607a      	str	r2, [r7, #4]
 8003d28:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003d2a:	f107 0314 	add.w	r3, r7, #20
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fd ff3e 	bl	8001bb0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003d34:	7afb      	ldrb	r3, [r7, #11]
 8003d36:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f107 0214 	add.w	r2, r7, #20
 8003d46:	2107      	movs	r1, #7
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	4798      	blx	r3
  }
 8003d4c:	bf00      	nop
 8003d4e:	3720      	adds	r7, #32
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <_Z41__static_initialization_and_destruction_0ii>:
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d11f      	bne.n	8003da4 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d11a      	bne.n	8003da4 <_Z41__static_initialization_and_destruction_0ii+0x50>
ros::NodeHandle nh;
 8003d6e:	480f      	ldr	r0, [pc, #60]	; (8003dac <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003d70:	f7ff fac8 	bl	8003304 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Bool scara_state;
 8003d74:	480e      	ldr	r0, [pc, #56]	; (8003db0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003d76:	f7ff f989 	bl	800308c <_ZN8std_msgs4BoolC1Ev>
geometry_msgs::Point car_speed;
 8003d7a:	480e      	ldr	r0, [pc, #56]	; (8003db4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003d7c:	f7fe fc70 	bl	8002660 <_ZN13geometry_msgs5PointC1Ev>
ros::Subscriber<geometry_msgs::Point> mecanum_sub("mecanum_toSTM", ROS::mecanum_callback);
 8003d80:	2301      	movs	r3, #1
 8003d82:	4a0d      	ldr	r2, [pc, #52]	; (8003db8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003d84:	490d      	ldr	r1, [pc, #52]	; (8003dbc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003d86:	480e      	ldr	r0, [pc, #56]	; (8003dc0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003d88:	f7ff fb4c 	bl	8003424 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<geometry_msgs::Point> scara_sub("scara_toSTM", ROS::scara_callback);
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	4a0d      	ldr	r2, [pc, #52]	; (8003dc4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003d90:	490d      	ldr	r1, [pc, #52]	; (8003dc8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003d92:	480e      	ldr	r0, [pc, #56]	; (8003dcc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003d94:	f7ff fb46 	bl	8003424 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
 8003d98:	2300      	movs	r3, #0
 8003d9a:	4a06      	ldr	r2, [pc, #24]	; (8003db4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003d9c:	490c      	ldr	r1, [pc, #48]	; (8003dd0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003d9e:	480d      	ldr	r0, [pc, #52]	; (8003dd4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003da0:	f7fe fa78 	bl	8002294 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	240006c4 	.word	0x240006c4
 8003db0:	24001000 	.word	0x24001000
 8003db4:	24001008 	.word	0x24001008
 8003db8:	080031a1 	.word	0x080031a1
 8003dbc:	0800e07c 	.word	0x0800e07c
 8003dc0:	24001028 	.word	0x24001028
 8003dc4:	08003161 	.word	0x08003161
 8003dc8:	0800e08c 	.word	0x0800e08c
 8003dcc:	24001060 	.word	0x24001060
 8003dd0:	0800e098 	.word	0x0800e098
 8003dd4:	24001098 	.word	0x24001098

08003dd8 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3310      	adds	r3, #16
 8003de6:	6839      	ldr	r1, [r7, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fe fdd4 	bl	8002996 <_ZN13geometry_msgs5Point11deserializeEPh>
    this->cb_(msg);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	3210      	adds	r2, #16
 8003df6:	4610      	mov	r0, r2
 8003df8:	4798      	blx	r3
  }
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8003e0e:	4618      	mov	r0, r3
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3310      	adds	r3, #16
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff f914 	bl	8003054 <_ZN13geometry_msgs5Point7getTypeEv>
 8003e2c:	4603      	mov	r3, r0
  }
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3310      	adds	r3, #16
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff f914 	bl	8003070 <_ZN13geometry_msgs5Point6getMD5Ev>
 8003e48:	4603      	mov	r3, r0
  }
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
    return configured_;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <_GLOBAL__sub_I_nh>:
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e74:	2001      	movs	r0, #1
 8003e76:	f7ff ff6d 	bl	8003d54 <_Z41__static_initialization_and_destruction_0ii>
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <_ZN8ARM_INFOC1Ev>:
	double Py;
	double Pz;

	// pub to ROS //
	bool is_finished = false;
} ARM_INFO;
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	761a      	strb	r2, [r3, #24]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <_ZN5SCARAC1Ev>:

class SCARA{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff ffea 	bl	8003e7c <_ZN8ARM_INFOC1Ev>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3320      	adds	r3, #32
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff ffe5 	bl	8003e7c <_ZN8ARM_INFOC1Ev>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <_ZN5SCARA3runEv>:
#include "scara.h"
#include "stepper.h"

SCARA scara;

void SCARA::run(void){
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
	SCARA::tf2_arm_angle();
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f804 	bl	8003ed2 <_ZN5SCARA13tf2_arm_angleEv>
}
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <_ZN5SCARA13tf2_arm_angleEv>:


void SCARA::tf2_arm_angle(void){
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]


}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
	...

08003ee8 <_Z41__static_initialization_and_destruction_0ii>:
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d107      	bne.n	8003f08 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d102      	bne.n	8003f08 <_Z41__static_initialization_and_destruction_0ii+0x20>
SCARA scara;
 8003f02:	4803      	ldr	r0, [pc, #12]	; (8003f10 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003f04:	f7ff ffc8 	bl	8003e98 <_ZN5SCARAC1Ev>
}
 8003f08:	bf00      	nop
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	240010b0 	.word	0x240010b0

08003f14 <_GLOBAL__sub_I_scara>:
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	f7ff ffe3 	bl	8003ee8 <_Z41__static_initialization_and_destruction_0ii>
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f2a:	4b0d      	ldr	r3, [pc, #52]	; (8003f60 <HAL_MspInit+0x3c>)
 8003f2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f30:	4a0b      	ldr	r2, [pc, #44]	; (8003f60 <HAL_MspInit+0x3c>)
 8003f32:	f043 0302 	orr.w	r3, r3, #2
 8003f36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f3a:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <HAL_MspInit+0x3c>)
 8003f3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	607b      	str	r3, [r7, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	2005      	movs	r0, #5
 8003f4e:	f000 fee8 	bl	8004d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003f52:	2005      	movs	r0, #5
 8003f54:	f000 feff 	bl	8004d56 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f58:	bf00      	nop
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	58024400 	.word	0x58024400

08003f64 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b090      	sub	sp, #64	; 0x40
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	60da      	str	r2, [r3, #12]
 8003f7a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f84:	d14e      	bne.n	8004024 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f86:	4b77      	ldr	r3, [pc, #476]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f8c:	4a75      	ldr	r2, [pc, #468]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f96:	4b73      	ldr	r3, [pc, #460]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fa4:	4b6f      	ldr	r3, [pc, #444]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 8003fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003faa:	4a6e      	ldr	r2, [pc, #440]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 8003fac:	f043 0301 	orr.w	r3, r3, #1
 8003fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fb4:	4b6b      	ldr	r3, [pc, #428]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 8003fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fc2:	4b68      	ldr	r3, [pc, #416]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 8003fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fc8:	4a66      	ldr	r2, [pc, #408]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 8003fca:	f043 0302 	orr.w	r3, r3, #2
 8003fce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fd2:	4b64      	ldr	r3, [pc, #400]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 8003fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	623b      	str	r3, [r7, #32]
 8003fde:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003fe0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ff6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	485a      	ldr	r0, [pc, #360]	; (8004168 <HAL_TIM_Encoder_MspInit+0x204>)
 8003ffe:	f003 fcff 	bl	8007a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004002:	2308      	movs	r3, #8
 8004004:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004006:	2302      	movs	r3, #2
 8004008:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400a:	2300      	movs	r3, #0
 800400c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800400e:	2300      	movs	r3, #0
 8004010:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004012:	2301      	movs	r3, #1
 8004014:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800401a:	4619      	mov	r1, r3
 800401c:	4853      	ldr	r0, [pc, #332]	; (800416c <HAL_TIM_Encoder_MspInit+0x208>)
 800401e:	f003 fcef 	bl	8007a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004022:	e09b      	b.n	800415c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a51      	ldr	r2, [pc, #324]	; (8004170 <HAL_TIM_Encoder_MspInit+0x20c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d12e      	bne.n	800408c <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800402e:	4b4d      	ldr	r3, [pc, #308]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 8004030:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004034:	4a4b      	ldr	r2, [pc, #300]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 8004036:	f043 0302 	orr.w	r3, r3, #2
 800403a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800403e:	4b49      	ldr	r3, [pc, #292]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 8004040:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	61fb      	str	r3, [r7, #28]
 800404a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800404c:	4b45      	ldr	r3, [pc, #276]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 800404e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004052:	4a44      	ldr	r2, [pc, #272]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 8004054:	f043 0302 	orr.w	r3, r3, #2
 8004058:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800405c:	4b41      	ldr	r3, [pc, #260]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 800405e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	61bb      	str	r3, [r7, #24]
 8004068:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800406a:	2330      	movs	r3, #48	; 0x30
 800406c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800406e:	2302      	movs	r3, #2
 8004070:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004072:	2300      	movs	r3, #0
 8004074:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004076:	2300      	movs	r3, #0
 8004078:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800407a:	2302      	movs	r3, #2
 800407c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800407e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004082:	4619      	mov	r1, r3
 8004084:	4839      	ldr	r0, [pc, #228]	; (800416c <HAL_TIM_Encoder_MspInit+0x208>)
 8004086:	f003 fcbb 	bl	8007a00 <HAL_GPIO_Init>
}
 800408a:	e067      	b.n	800415c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a38      	ldr	r2, [pc, #224]	; (8004174 <HAL_TIM_Encoder_MspInit+0x210>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d12f      	bne.n	80040f6 <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004096:	4b33      	ldr	r3, [pc, #204]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 8004098:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800409c:	4a31      	ldr	r2, [pc, #196]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 800409e:	f043 0304 	orr.w	r3, r3, #4
 80040a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040a6:	4b2f      	ldr	r3, [pc, #188]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 80040a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040b4:	4b2b      	ldr	r3, [pc, #172]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 80040b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040ba:	4a2a      	ldr	r2, [pc, #168]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 80040bc:	f043 0308 	orr.w	r3, r3, #8
 80040c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040c4:	4b27      	ldr	r3, [pc, #156]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 80040c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80040d2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80040d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d8:	2302      	movs	r3, #2
 80040da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040dc:	2300      	movs	r3, #0
 80040de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e0:	2300      	movs	r3, #0
 80040e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80040e4:	2302      	movs	r3, #2
 80040e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040ec:	4619      	mov	r1, r3
 80040ee:	4822      	ldr	r0, [pc, #136]	; (8004178 <HAL_TIM_Encoder_MspInit+0x214>)
 80040f0:	f003 fc86 	bl	8007a00 <HAL_GPIO_Init>
}
 80040f4:	e032      	b.n	800415c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a20      	ldr	r2, [pc, #128]	; (800417c <HAL_TIM_Encoder_MspInit+0x218>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d12d      	bne.n	800415c <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004100:	4b18      	ldr	r3, [pc, #96]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 8004102:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004106:	4a17      	ldr	r2, [pc, #92]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 8004108:	f043 0308 	orr.w	r3, r3, #8
 800410c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004110:	4b14      	ldr	r3, [pc, #80]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 8004112:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800411e:	4b11      	ldr	r3, [pc, #68]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 8004120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004124:	4a0f      	ldr	r2, [pc, #60]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800412e:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <HAL_TIM_Encoder_MspInit+0x200>)
 8004130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800413c:	2303      	movs	r3, #3
 800413e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004140:	2302      	movs	r3, #2
 8004142:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004144:	2300      	movs	r3, #0
 8004146:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004148:	2300      	movs	r3, #0
 800414a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800414c:	2302      	movs	r3, #2
 800414e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004150:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004154:	4619      	mov	r1, r3
 8004156:	4804      	ldr	r0, [pc, #16]	; (8004168 <HAL_TIM_Encoder_MspInit+0x204>)
 8004158:	f003 fc52 	bl	8007a00 <HAL_GPIO_Init>
}
 800415c:	bf00      	nop
 800415e:	3740      	adds	r7, #64	; 0x40
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	58024400 	.word	0x58024400
 8004168:	58020000 	.word	0x58020000
 800416c:	58020400 	.word	0x58020400
 8004170:	40000400 	.word	0x40000400
 8004174:	40000800 	.word	0x40000800
 8004178:	58020c00 	.word	0x58020c00
 800417c:	40000c00 	.word	0x40000c00

08004180 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1d      	ldr	r2, [pc, #116]	; (8004204 <HAL_TIM_PWM_MspInit+0x84>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d117      	bne.n	80041c2 <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <HAL_TIM_PWM_MspInit+0x88>)
 8004194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004198:	4a1b      	ldr	r2, [pc, #108]	; (8004208 <HAL_TIM_PWM_MspInit+0x88>)
 800419a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800419e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80041a2:	4b19      	ldr	r3, [pc, #100]	; (8004208 <HAL_TIM_PWM_MspInit+0x88>)
 80041a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80041b0:	2200      	movs	r2, #0
 80041b2:	2100      	movs	r1, #0
 80041b4:	202b      	movs	r0, #43	; 0x2b
 80041b6:	f000 fdb4 	bl	8004d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80041ba:	202b      	movs	r0, #43	; 0x2b
 80041bc:	f000 fdcb 	bl	8004d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80041c0:	e01b      	b.n	80041fa <HAL_TIM_PWM_MspInit+0x7a>
  else if(htim_pwm->Instance==TIM15)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a11      	ldr	r2, [pc, #68]	; (800420c <HAL_TIM_PWM_MspInit+0x8c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d116      	bne.n	80041fa <HAL_TIM_PWM_MspInit+0x7a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80041cc:	4b0e      	ldr	r3, [pc, #56]	; (8004208 <HAL_TIM_PWM_MspInit+0x88>)
 80041ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041d2:	4a0d      	ldr	r2, [pc, #52]	; (8004208 <HAL_TIM_PWM_MspInit+0x88>)
 80041d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80041dc:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <HAL_TIM_PWM_MspInit+0x88>)
 80041de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e6:	60bb      	str	r3, [r7, #8]
 80041e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80041ea:	2200      	movs	r2, #0
 80041ec:	2100      	movs	r1, #0
 80041ee:	2074      	movs	r0, #116	; 0x74
 80041f0:	f000 fd97 	bl	8004d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80041f4:	2074      	movs	r0, #116	; 0x74
 80041f6:	f000 fdae 	bl	8004d56 <HAL_NVIC_EnableIRQ>
}
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40001800 	.word	0x40001800
 8004208:	58024400 	.word	0x58024400
 800420c:	40014000 	.word	0x40014000

08004210 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a0e      	ldr	r2, [pc, #56]	; (8004258 <HAL_TIM_Base_MspInit+0x48>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d116      	bne.n	8004250 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004222:	4b0e      	ldr	r3, [pc, #56]	; (800425c <HAL_TIM_Base_MspInit+0x4c>)
 8004224:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004228:	4a0c      	ldr	r2, [pc, #48]	; (800425c <HAL_TIM_Base_MspInit+0x4c>)
 800422a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800422e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004232:	4b0a      	ldr	r3, [pc, #40]	; (800425c <HAL_TIM_Base_MspInit+0x4c>)
 8004234:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004240:	2200      	movs	r2, #0
 8004242:	2100      	movs	r1, #0
 8004244:	202c      	movs	r0, #44	; 0x2c
 8004246:	f000 fd6c 	bl	8004d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800424a:	202c      	movs	r0, #44	; 0x2c
 800424c:	f000 fd83 	bl	8004d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8004250:	bf00      	nop
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40001c00 	.word	0x40001c00
 800425c:	58024400 	.word	0x58024400

08004260 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08a      	sub	sp, #40	; 0x28
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004268:	f107 0314 	add.w	r3, r7, #20
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	605a      	str	r2, [r3, #4]
 8004272:	609a      	str	r2, [r3, #8]
 8004274:	60da      	str	r2, [r3, #12]
 8004276:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a25      	ldr	r2, [pc, #148]	; (8004314 <HAL_TIM_MspPostInit+0xb4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d120      	bne.n	80042c4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004282:	4b25      	ldr	r3, [pc, #148]	; (8004318 <HAL_TIM_MspPostInit+0xb8>)
 8004284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004288:	4a23      	ldr	r2, [pc, #140]	; (8004318 <HAL_TIM_MspPostInit+0xb8>)
 800428a:	f043 0302 	orr.w	r3, r3, #2
 800428e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004292:	4b21      	ldr	r3, [pc, #132]	; (8004318 <HAL_TIM_MspPostInit+0xb8>)
 8004294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80042a0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80042a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a6:	2302      	movs	r3, #2
 80042a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ae:	2300      	movs	r3, #0
 80042b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80042b2:	2302      	movs	r3, #2
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042b6:	f107 0314 	add.w	r3, r7, #20
 80042ba:	4619      	mov	r1, r3
 80042bc:	4817      	ldr	r0, [pc, #92]	; (800431c <HAL_TIM_MspPostInit+0xbc>)
 80042be:	f003 fb9f 	bl	8007a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80042c2:	e023      	b.n	800430c <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM15)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a15      	ldr	r2, [pc, #84]	; (8004320 <HAL_TIM_MspPostInit+0xc0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d11e      	bne.n	800430c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042ce:	4b12      	ldr	r3, [pc, #72]	; (8004318 <HAL_TIM_MspPostInit+0xb8>)
 80042d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042d4:	4a10      	ldr	r2, [pc, #64]	; (8004318 <HAL_TIM_MspPostInit+0xb8>)
 80042d6:	f043 0310 	orr.w	r3, r3, #16
 80042da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042de:	4b0e      	ldr	r3, [pc, #56]	; (8004318 <HAL_TIM_MspPostInit+0xb8>)
 80042e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80042ec:	2360      	movs	r3, #96	; 0x60
 80042ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f0:	2302      	movs	r3, #2
 80042f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f8:	2300      	movs	r3, #0
 80042fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80042fc:	2304      	movs	r3, #4
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004300:	f107 0314 	add.w	r3, r7, #20
 8004304:	4619      	mov	r1, r3
 8004306:	4807      	ldr	r0, [pc, #28]	; (8004324 <HAL_TIM_MspPostInit+0xc4>)
 8004308:	f003 fb7a 	bl	8007a00 <HAL_GPIO_Init>
}
 800430c:	bf00      	nop
 800430e:	3728      	adds	r7, #40	; 0x28
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40001800 	.word	0x40001800
 8004318:	58024400 	.word	0x58024400
 800431c:	58020400 	.word	0x58020400
 8004320:	40014000 	.word	0x40014000
 8004324:	58021000 	.word	0x58021000

08004328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b0b6      	sub	sp, #216	; 0xd8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004330:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	609a      	str	r2, [r3, #8]
 800433c:	60da      	str	r2, [r3, #12]
 800433e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004340:	f107 0310 	add.w	r3, r7, #16
 8004344:	22b4      	movs	r2, #180	; 0xb4
 8004346:	2100      	movs	r1, #0
 8004348:	4618      	mov	r0, r3
 800434a:	f009 fc43 	bl	800dbd4 <memset>
  if(huart->Instance==USART1)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a57      	ldr	r2, [pc, #348]	; (80044b0 <HAL_UART_MspInit+0x188>)
 8004354:	4293      	cmp	r3, r2
 8004356:	f040 80a7 	bne.w	80044a8 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800435a:	2301      	movs	r3, #1
 800435c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800435e:	2300      	movs	r3, #0
 8004360:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004364:	f107 0310 	add.w	r3, r7, #16
 8004368:	4618      	mov	r0, r3
 800436a:	f004 fc7f 	bl	8008c6c <HAL_RCCEx_PeriphCLKConfig>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004374:	f7fc ffa0 	bl	80012b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004378:	4b4e      	ldr	r3, [pc, #312]	; (80044b4 <HAL_UART_MspInit+0x18c>)
 800437a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800437e:	4a4d      	ldr	r2, [pc, #308]	; (80044b4 <HAL_UART_MspInit+0x18c>)
 8004380:	f043 0310 	orr.w	r3, r3, #16
 8004384:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004388:	4b4a      	ldr	r3, [pc, #296]	; (80044b4 <HAL_UART_MspInit+0x18c>)
 800438a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800438e:	f003 0310 	and.w	r3, r3, #16
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004396:	4b47      	ldr	r3, [pc, #284]	; (80044b4 <HAL_UART_MspInit+0x18c>)
 8004398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800439c:	4a45      	ldr	r2, [pc, #276]	; (80044b4 <HAL_UART_MspInit+0x18c>)
 800439e:	f043 0301 	orr.w	r3, r3, #1
 80043a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043a6:	4b43      	ldr	r3, [pc, #268]	; (80044b4 <HAL_UART_MspInit+0x18c>)
 80043a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80043b4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80043b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043bc:	2302      	movs	r3, #2
 80043be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c8:	2300      	movs	r3, #0
 80043ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043ce:	2307      	movs	r3, #7
 80043d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80043d8:	4619      	mov	r1, r3
 80043da:	4837      	ldr	r0, [pc, #220]	; (80044b8 <HAL_UART_MspInit+0x190>)
 80043dc:	f003 fb10 	bl	8007a00 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80043e0:	4b36      	ldr	r3, [pc, #216]	; (80044bc <HAL_UART_MspInit+0x194>)
 80043e2:	4a37      	ldr	r2, [pc, #220]	; (80044c0 <HAL_UART_MspInit+0x198>)
 80043e4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80043e6:	4b35      	ldr	r3, [pc, #212]	; (80044bc <HAL_UART_MspInit+0x194>)
 80043e8:	2229      	movs	r2, #41	; 0x29
 80043ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043ec:	4b33      	ldr	r3, [pc, #204]	; (80044bc <HAL_UART_MspInit+0x194>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043f2:	4b32      	ldr	r3, [pc, #200]	; (80044bc <HAL_UART_MspInit+0x194>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043f8:	4b30      	ldr	r3, [pc, #192]	; (80044bc <HAL_UART_MspInit+0x194>)
 80043fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004400:	4b2e      	ldr	r3, [pc, #184]	; (80044bc <HAL_UART_MspInit+0x194>)
 8004402:	2200      	movs	r2, #0
 8004404:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004406:	4b2d      	ldr	r3, [pc, #180]	; (80044bc <HAL_UART_MspInit+0x194>)
 8004408:	2200      	movs	r2, #0
 800440a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800440c:	4b2b      	ldr	r3, [pc, #172]	; (80044bc <HAL_UART_MspInit+0x194>)
 800440e:	2200      	movs	r2, #0
 8004410:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004412:	4b2a      	ldr	r3, [pc, #168]	; (80044bc <HAL_UART_MspInit+0x194>)
 8004414:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004418:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800441a:	4b28      	ldr	r3, [pc, #160]	; (80044bc <HAL_UART_MspInit+0x194>)
 800441c:	2200      	movs	r2, #0
 800441e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004420:	4826      	ldr	r0, [pc, #152]	; (80044bc <HAL_UART_MspInit+0x194>)
 8004422:	f000 fcb3 	bl	8004d8c <HAL_DMA_Init>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 800442c:	f7fc ff44 	bl	80012b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a22      	ldr	r2, [pc, #136]	; (80044bc <HAL_UART_MspInit+0x194>)
 8004434:	67da      	str	r2, [r3, #124]	; 0x7c
 8004436:	4a21      	ldr	r2, [pc, #132]	; (80044bc <HAL_UART_MspInit+0x194>)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 800443c:	4b21      	ldr	r3, [pc, #132]	; (80044c4 <HAL_UART_MspInit+0x19c>)
 800443e:	4a22      	ldr	r2, [pc, #136]	; (80044c8 <HAL_UART_MspInit+0x1a0>)
 8004440:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004442:	4b20      	ldr	r3, [pc, #128]	; (80044c4 <HAL_UART_MspInit+0x19c>)
 8004444:	222a      	movs	r2, #42	; 0x2a
 8004446:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004448:	4b1e      	ldr	r3, [pc, #120]	; (80044c4 <HAL_UART_MspInit+0x19c>)
 800444a:	2240      	movs	r2, #64	; 0x40
 800444c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800444e:	4b1d      	ldr	r3, [pc, #116]	; (80044c4 <HAL_UART_MspInit+0x19c>)
 8004450:	2200      	movs	r2, #0
 8004452:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004454:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <HAL_UART_MspInit+0x19c>)
 8004456:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800445a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800445c:	4b19      	ldr	r3, [pc, #100]	; (80044c4 <HAL_UART_MspInit+0x19c>)
 800445e:	2200      	movs	r2, #0
 8004460:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004462:	4b18      	ldr	r3, [pc, #96]	; (80044c4 <HAL_UART_MspInit+0x19c>)
 8004464:	2200      	movs	r2, #0
 8004466:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004468:	4b16      	ldr	r3, [pc, #88]	; (80044c4 <HAL_UART_MspInit+0x19c>)
 800446a:	2200      	movs	r2, #0
 800446c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800446e:	4b15      	ldr	r3, [pc, #84]	; (80044c4 <HAL_UART_MspInit+0x19c>)
 8004470:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004474:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004476:	4b13      	ldr	r3, [pc, #76]	; (80044c4 <HAL_UART_MspInit+0x19c>)
 8004478:	2200      	movs	r2, #0
 800447a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800447c:	4811      	ldr	r0, [pc, #68]	; (80044c4 <HAL_UART_MspInit+0x19c>)
 800447e:	f000 fc85 	bl	8004d8c <HAL_DMA_Init>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8004488:	f7fc ff16 	bl	80012b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a0d      	ldr	r2, [pc, #52]	; (80044c4 <HAL_UART_MspInit+0x19c>)
 8004490:	679a      	str	r2, [r3, #120]	; 0x78
 8004492:	4a0c      	ldr	r2, [pc, #48]	; (80044c4 <HAL_UART_MspInit+0x19c>)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004498:	2200      	movs	r2, #0
 800449a:	2100      	movs	r1, #0
 800449c:	2025      	movs	r0, #37	; 0x25
 800449e:	f000 fc40 	bl	8004d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80044a2:	2025      	movs	r0, #37	; 0x25
 80044a4:	f000 fc57 	bl	8004d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80044a8:	bf00      	nop
 80044aa:	37d8      	adds	r7, #216	; 0xd8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40011000 	.word	0x40011000
 80044b4:	58024400 	.word	0x58024400
 80044b8:	58020000 	.word	0x58020000
 80044bc:	24000584 	.word	0x24000584
 80044c0:	40020010 	.word	0x40020010
 80044c4:	240005fc 	.word	0x240005fc
 80044c8:	40020028 	.word	0x40020028

080044cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044d0:	e7fe      	b.n	80044d0 <NMI_Handler+0x4>

080044d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044d2:	b480      	push	{r7}
 80044d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044d6:	e7fe      	b.n	80044d6 <HardFault_Handler+0x4>

080044d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044dc:	e7fe      	b.n	80044dc <MemManage_Handler+0x4>

080044de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044de:	b480      	push	{r7}
 80044e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044e2:	e7fe      	b.n	80044e2 <BusFault_Handler+0x4>

080044e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044e8:	e7fe      	b.n	80044e8 <UsageFault_Handler+0x4>

080044ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044ea:	b480      	push	{r7}
 80044ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044ee:	bf00      	nop
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044fc:	bf00      	nop
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004506:	b480      	push	{r7}
 8004508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800450a:	bf00      	nop
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004518:	f000 fb08 	bl	8004b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800451c:	bf00      	nop
 800451e:	bd80      	pop	{r7, pc}

08004520 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004524:	bf00      	nop
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
	...

08004530 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004534:	4802      	ldr	r0, [pc, #8]	; (8004540 <DMA1_Stream0_IRQHandler+0x10>)
 8004536:	f001 ff51 	bl	80063dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800453a:	bf00      	nop
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	24000584 	.word	0x24000584

08004544 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004548:	4802      	ldr	r0, [pc, #8]	; (8004554 <DMA1_Stream1_IRQHandler+0x10>)
 800454a:	f001 ff47 	bl	80063dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800454e:	bf00      	nop
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	240005fc 	.word	0x240005fc

08004558 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800455c:	4802      	ldr	r0, [pc, #8]	; (8004568 <USART1_IRQHandler+0x10>)
 800455e:	f007 fb03 	bl	800bb68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004562:	bf00      	nop
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	240004f4 	.word	0x240004f4

0800456c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8004570:	4802      	ldr	r0, [pc, #8]	; (800457c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8004572:	f006 fa69 	bl	800aa48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8004576:	bf00      	nop
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	24000410 	.word	0x24000410

08004580 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8004584:	4802      	ldr	r0, [pc, #8]	; (8004590 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8004586:	f006 fa5f 	bl	800aa48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800458a:	bf00      	nop
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	2400045c 	.word	0x2400045c

08004594 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8004598:	4802      	ldr	r0, [pc, #8]	; (80045a4 <TIM15_IRQHandler+0x10>)
 800459a:	f006 fa55 	bl	800aa48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	240004a8 	.word	0x240004a8

080045a8 <_ZN3STM5setupEv>:
#include "stm_main.h"
#include "dc_motor.h"
#include "mecanum.h"

void STM::setup(void){
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
	DC_motor_init();
 80045ac:	f7fc f866 	bl	800067c <_Z13DC_motor_initv>
}
 80045b0:	bf00      	nop
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <_ZN3STM11run_mecanumEv>:

void STM::run_mecanum(void){
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
	mecanum.run();
 80045b8:	4802      	ldr	r0, [pc, #8]	; (80045c4 <_ZN3STM11run_mecanumEv+0x10>)
 80045ba:	f7fc fee7 	bl	800138c <_ZN7Mecanum3runEv>
}
 80045be:	bf00      	nop
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	24000678 	.word	0x24000678

080045c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
	return 1;
 80045cc:	2301      	movs	r3, #1
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <_kill>:

int _kill(int pid, int sig)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80045e2:	f009 fabf 	bl	800db64 <__errno>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2216      	movs	r2, #22
 80045ea:	601a      	str	r2, [r3, #0]
	return -1;
 80045ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <_exit>:

void _exit (int status)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004600:	f04f 31ff 	mov.w	r1, #4294967295
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff ffe7 	bl	80045d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800460a:	e7fe      	b.n	800460a <_exit+0x12>

0800460c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004614:	4a14      	ldr	r2, [pc, #80]	; (8004668 <_sbrk+0x5c>)
 8004616:	4b15      	ldr	r3, [pc, #84]	; (800466c <_sbrk+0x60>)
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004620:	4b13      	ldr	r3, [pc, #76]	; (8004670 <_sbrk+0x64>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d102      	bne.n	800462e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004628:	4b11      	ldr	r3, [pc, #68]	; (8004670 <_sbrk+0x64>)
 800462a:	4a12      	ldr	r2, [pc, #72]	; (8004674 <_sbrk+0x68>)
 800462c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800462e:	4b10      	ldr	r3, [pc, #64]	; (8004670 <_sbrk+0x64>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4413      	add	r3, r2
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	429a      	cmp	r2, r3
 800463a:	d207      	bcs.n	800464c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800463c:	f009 fa92 	bl	800db64 <__errno>
 8004640:	4603      	mov	r3, r0
 8004642:	220c      	movs	r2, #12
 8004644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004646:	f04f 33ff 	mov.w	r3, #4294967295
 800464a:	e009      	b.n	8004660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800464c:	4b08      	ldr	r3, [pc, #32]	; (8004670 <_sbrk+0x64>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004652:	4b07      	ldr	r3, [pc, #28]	; (8004670 <_sbrk+0x64>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4413      	add	r3, r2
 800465a:	4a05      	ldr	r2, [pc, #20]	; (8004670 <_sbrk+0x64>)
 800465c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800465e:	68fb      	ldr	r3, [r7, #12]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	24050000 	.word	0x24050000
 800466c:	00000400 	.word	0x00000400
 8004670:	240010f0 	.word	0x240010f0
 8004674:	24001108 	.word	0x24001108

08004678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800467c:	4b32      	ldr	r3, [pc, #200]	; (8004748 <SystemInit+0xd0>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	4a31      	ldr	r2, [pc, #196]	; (8004748 <SystemInit+0xd0>)
 8004684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800468c:	4b2f      	ldr	r3, [pc, #188]	; (800474c <SystemInit+0xd4>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 030f 	and.w	r3, r3, #15
 8004694:	2b06      	cmp	r3, #6
 8004696:	d807      	bhi.n	80046a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004698:	4b2c      	ldr	r3, [pc, #176]	; (800474c <SystemInit+0xd4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f023 030f 	bic.w	r3, r3, #15
 80046a0:	4a2a      	ldr	r2, [pc, #168]	; (800474c <SystemInit+0xd4>)
 80046a2:	f043 0307 	orr.w	r3, r3, #7
 80046a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80046a8:	4b29      	ldr	r3, [pc, #164]	; (8004750 <SystemInit+0xd8>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a28      	ldr	r2, [pc, #160]	; (8004750 <SystemInit+0xd8>)
 80046ae:	f043 0301 	orr.w	r3, r3, #1
 80046b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80046b4:	4b26      	ldr	r3, [pc, #152]	; (8004750 <SystemInit+0xd8>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80046ba:	4b25      	ldr	r3, [pc, #148]	; (8004750 <SystemInit+0xd8>)
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	4924      	ldr	r1, [pc, #144]	; (8004750 <SystemInit+0xd8>)
 80046c0:	4b24      	ldr	r3, [pc, #144]	; (8004754 <SystemInit+0xdc>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80046c6:	4b21      	ldr	r3, [pc, #132]	; (800474c <SystemInit+0xd4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80046d2:	4b1e      	ldr	r3, [pc, #120]	; (800474c <SystemInit+0xd4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f023 030f 	bic.w	r3, r3, #15
 80046da:	4a1c      	ldr	r2, [pc, #112]	; (800474c <SystemInit+0xd4>)
 80046dc:	f043 0307 	orr.w	r3, r3, #7
 80046e0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80046e2:	4b1b      	ldr	r3, [pc, #108]	; (8004750 <SystemInit+0xd8>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80046e8:	4b19      	ldr	r3, [pc, #100]	; (8004750 <SystemInit+0xd8>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80046ee:	4b18      	ldr	r3, [pc, #96]	; (8004750 <SystemInit+0xd8>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80046f4:	4b16      	ldr	r3, [pc, #88]	; (8004750 <SystemInit+0xd8>)
 80046f6:	4a18      	ldr	r2, [pc, #96]	; (8004758 <SystemInit+0xe0>)
 80046f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80046fa:	4b15      	ldr	r3, [pc, #84]	; (8004750 <SystemInit+0xd8>)
 80046fc:	4a17      	ldr	r2, [pc, #92]	; (800475c <SystemInit+0xe4>)
 80046fe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004700:	4b13      	ldr	r3, [pc, #76]	; (8004750 <SystemInit+0xd8>)
 8004702:	4a17      	ldr	r2, [pc, #92]	; (8004760 <SystemInit+0xe8>)
 8004704:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004706:	4b12      	ldr	r3, [pc, #72]	; (8004750 <SystemInit+0xd8>)
 8004708:	2200      	movs	r2, #0
 800470a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800470c:	4b10      	ldr	r3, [pc, #64]	; (8004750 <SystemInit+0xd8>)
 800470e:	4a14      	ldr	r2, [pc, #80]	; (8004760 <SystemInit+0xe8>)
 8004710:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004712:	4b0f      	ldr	r3, [pc, #60]	; (8004750 <SystemInit+0xd8>)
 8004714:	2200      	movs	r2, #0
 8004716:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004718:	4b0d      	ldr	r3, [pc, #52]	; (8004750 <SystemInit+0xd8>)
 800471a:	4a11      	ldr	r2, [pc, #68]	; (8004760 <SystemInit+0xe8>)
 800471c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800471e:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <SystemInit+0xd8>)
 8004720:	2200      	movs	r2, #0
 8004722:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004724:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <SystemInit+0xd8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a09      	ldr	r2, [pc, #36]	; (8004750 <SystemInit+0xd8>)
 800472a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800472e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004730:	4b07      	ldr	r3, [pc, #28]	; (8004750 <SystemInit+0xd8>)
 8004732:	2200      	movs	r2, #0
 8004734:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004736:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <SystemInit+0xec>)
 8004738:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800473c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800473e:	bf00      	nop
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	e000ed00 	.word	0xe000ed00
 800474c:	52002000 	.word	0x52002000
 8004750:	58024400 	.word	0x58024400
 8004754:	eaf6ed7f 	.word	0xeaf6ed7f
 8004758:	02020200 	.word	0x02020200
 800475c:	01ff0000 	.word	0x01ff0000
 8004760:	01010280 	.word	0x01010280
 8004764:	52004000 	.word	0x52004000

08004768 <HAL_TIM_PeriodElapsedCallback>:
#define STEP_PIN_4 GPIO_PIN_9

//int ms=0;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM13) {
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a90      	ldr	r2, [pc, #576]	; (80049b8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8004776:	4293      	cmp	r3, r2
 8004778:	f040 811a 	bne.w	80049b0 <HAL_TIM_PeriodElapsedCallback+0x248>
//		ms++;
//		if(ms%100==0) ROS::pub_car_vel();


		/*enc 1*/
		fr.CountNow = __HAL_TIM_GetCounter(&htim2);
 800477c:	4b8f      	ldr	r3, [pc, #572]	; (80049bc <HAL_TIM_PeriodElapsedCallback+0x254>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	b29a      	uxth	r2, r3
 8004784:	4b8e      	ldr	r3, [pc, #568]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004786:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		fr.PIDControl();
 800478a:	488d      	ldr	r0, [pc, #564]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800478c:	f7fb fffc 	bl	8000788 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim2,0);
 8004790:	4b8a      	ldr	r3, [pc, #552]	; (80049bc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2200      	movs	r2, #0
 8004796:	625a      	str	r2, [r3, #36]	; 0x24
		if (fr.PID >= 0) {
 8004798:	4b89      	ldr	r3, [pc, #548]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800479a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800479e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80047a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a6:	db0b      	blt.n	80047c0 <HAL_TIM_PeriodElapsedCallback+0x58>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_SET);
 80047a8:	2201      	movs	r2, #1
 80047aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047ae:	4885      	ldr	r0, [pc, #532]	; (80049c4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80047b0:	f003 face 	bl	8007d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_RESET);
 80047b4:	2200      	movs	r2, #0
 80047b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047ba:	4882      	ldr	r0, [pc, #520]	; (80049c4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80047bc:	f003 fac8 	bl	8007d50 <HAL_GPIO_WritePin>
		}
		if (fr.PID < 0) {
 80047c0:	4b7f      	ldr	r3, [pc, #508]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80047c2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80047c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80047ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ce:	d513      	bpl.n	80047f8 <HAL_TIM_PeriodElapsedCallback+0x90>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_RESET);
 80047d0:	2200      	movs	r2, #0
 80047d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047d6:	487b      	ldr	r0, [pc, #492]	; (80049c4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80047d8:	f003 faba 	bl	8007d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_SET);
 80047dc:	2201      	movs	r2, #1
 80047de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047e2:	4878      	ldr	r0, [pc, #480]	; (80049c4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80047e4:	f003 fab4 	bl	8007d50 <HAL_GPIO_WritePin>
			fr.PID = -fr.PID;
 80047e8:	4b75      	ldr	r3, [pc, #468]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80047ea:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80047ee:	eeb1 7b47 	vneg.f64	d7, d7
 80047f2:	4b73      	ldr	r3, [pc, #460]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80047f4:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, (int )fr.PID);
 80047f8:	4b71      	ldr	r3, [pc, #452]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80047fa:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80047fe:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004802:	4b71      	ldr	r3, [pc, #452]	; (80049c8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	ee17 2a90 	vmov	r2, s15
 800480a:	639a      	str	r2, [r3, #56]	; 0x38

		/*enc 2*/
		fl.CountNow = __HAL_TIM_GetCounter(&htim5);
 800480c:	4b6f      	ldr	r3, [pc, #444]	; (80049cc <HAL_TIM_PeriodElapsedCallback+0x264>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	b29a      	uxth	r2, r3
 8004814:	4b6e      	ldr	r3, [pc, #440]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004816:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		fl.PIDControl();
 800481a:	486d      	ldr	r0, [pc, #436]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800481c:	f7fb ffb4 	bl	8000788 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim5,0);
 8004820:	4b6a      	ldr	r3, [pc, #424]	; (80049cc <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2200      	movs	r2, #0
 8004826:	625a      	str	r2, [r3, #36]	; 0x24
		if (fl.PID < 0) {
 8004828:	4b69      	ldr	r3, [pc, #420]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800482a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800482e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004836:	d50b      	bpl.n	8004850 <HAL_TIM_PeriodElapsedCallback+0xe8>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_SET);
 8004838:	2201      	movs	r2, #1
 800483a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800483e:	4865      	ldr	r0, [pc, #404]	; (80049d4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004840:	f003 fa86 	bl	8007d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_RESET);
 8004844:	2200      	movs	r2, #0
 8004846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800484a:	4862      	ldr	r0, [pc, #392]	; (80049d4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800484c:	f003 fa80 	bl	8007d50 <HAL_GPIO_WritePin>
		}
		if (fl.PID >= 0) {
 8004850:	4b5f      	ldr	r3, [pc, #380]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004852:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004856:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800485a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800485e:	db13      	blt.n	8004888 <HAL_TIM_PeriodElapsedCallback+0x120>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_RESET);
 8004860:	2200      	movs	r2, #0
 8004862:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004866:	485b      	ldr	r0, [pc, #364]	; (80049d4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004868:	f003 fa72 	bl	8007d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_SET);
 800486c:	2201      	movs	r2, #1
 800486e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004872:	4858      	ldr	r0, [pc, #352]	; (80049d4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004874:	f003 fa6c 	bl	8007d50 <HAL_GPIO_WritePin>
			fl.PID = -fl.PID;
 8004878:	4b55      	ldr	r3, [pc, #340]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800487a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800487e:	eeb1 7b47 	vneg.f64	d7, d7
 8004882:	4b53      	ldr	r3, [pc, #332]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004884:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, (int )fl.PID);
 8004888:	4b51      	ldr	r3, [pc, #324]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800488a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800488e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004892:	4b4d      	ldr	r3, [pc, #308]	; (80049c8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	ee17 2a90 	vmov	r2, s15
 800489a:	635a      	str	r2, [r3, #52]	; 0x34

		/*enc 3*/
		br.CountNow = __HAL_TIM_GetCounter(&htim3);
 800489c:	4b4e      	ldr	r3, [pc, #312]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	4b4d      	ldr	r3, [pc, #308]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x274>)
 80048a6:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		br.PIDControl();
 80048aa:	484c      	ldr	r0, [pc, #304]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x274>)
 80048ac:	f7fb ff6c 	bl	8000788 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim3,0);
 80048b0:	4b49      	ldr	r3, [pc, #292]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2200      	movs	r2, #0
 80048b6:	625a      	str	r2, [r3, #36]	; 0x24
		if (br.PID < 0) {
 80048b8:	4b48      	ldr	r3, [pc, #288]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x274>)
 80048ba:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80048be:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80048c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c6:	d509      	bpl.n	80048dc <HAL_TIM_PeriodElapsedCallback+0x174>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_SET);
 80048c8:	2201      	movs	r2, #1
 80048ca:	2104      	movs	r1, #4
 80048cc:	4844      	ldr	r0, [pc, #272]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80048ce:	f003 fa3f 	bl	8007d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_RESET);
 80048d2:	2200      	movs	r2, #0
 80048d4:	2108      	movs	r1, #8
 80048d6:	4842      	ldr	r0, [pc, #264]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80048d8:	f003 fa3a 	bl	8007d50 <HAL_GPIO_WritePin>
		}
		if (br.PID >= 0) {
 80048dc:	4b3f      	ldr	r3, [pc, #252]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x274>)
 80048de:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80048e2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80048e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ea:	db11      	blt.n	8004910 <HAL_TIM_PeriodElapsedCallback+0x1a8>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_RESET);
 80048ec:	2200      	movs	r2, #0
 80048ee:	2104      	movs	r1, #4
 80048f0:	483b      	ldr	r0, [pc, #236]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80048f2:	f003 fa2d 	bl	8007d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_SET);
 80048f6:	2201      	movs	r2, #1
 80048f8:	2108      	movs	r1, #8
 80048fa:	4839      	ldr	r0, [pc, #228]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80048fc:	f003 fa28 	bl	8007d50 <HAL_GPIO_WritePin>
			br.PID = -br.PID;
 8004900:	4b36      	ldr	r3, [pc, #216]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004902:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004906:	eeb1 7b47 	vneg.f64	d7, d7
 800490a:	4b34      	ldr	r3, [pc, #208]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x274>)
 800490c:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, (int )br.PID);
 8004910:	4b32      	ldr	r3, [pc, #200]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004912:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004916:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800491a:	4b32      	ldr	r3, [pc, #200]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	ee17 2a90 	vmov	r2, s15
 8004922:	635a      	str	r2, [r3, #52]	; 0x34

		/*enc 4*/
		bl.CountNow = __HAL_TIM_GetCounter(&htim4);
 8004924:	4b30      	ldr	r3, [pc, #192]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	b29a      	uxth	r2, r3
 800492c:	4b2f      	ldr	r3, [pc, #188]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x284>)
 800492e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		bl.PIDControl();
 8004932:	482e      	ldr	r0, [pc, #184]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004934:	f7fb ff28 	bl	8000788 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim4,0);
 8004938:	4b2b      	ldr	r3, [pc, #172]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2200      	movs	r2, #0
 800493e:	625a      	str	r2, [r3, #36]	; 0x24
		if (bl.PID >= 0) {
 8004940:	4b2a      	ldr	r3, [pc, #168]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004942:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004946:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800494a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494e:	db0a      	blt.n	8004966 <HAL_TIM_PeriodElapsedCallback+0x1fe>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_SET);
 8004950:	2201      	movs	r2, #1
 8004952:	2110      	movs	r1, #16
 8004954:	4822      	ldr	r0, [pc, #136]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8004956:	f003 f9fb 	bl	8007d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_RESET);
 800495a:	2200      	movs	r2, #0
 800495c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004960:	4823      	ldr	r0, [pc, #140]	; (80049f0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004962:	f003 f9f5 	bl	8007d50 <HAL_GPIO_WritePin>
		}
		if (bl.PID < 0) {
 8004966:	4b21      	ldr	r3, [pc, #132]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004968:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800496c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004974:	d512      	bpl.n	800499c <HAL_TIM_PeriodElapsedCallback+0x234>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_RESET);
 8004976:	2200      	movs	r2, #0
 8004978:	2110      	movs	r1, #16
 800497a:	4819      	ldr	r0, [pc, #100]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800497c:	f003 f9e8 	bl	8007d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_SET);
 8004980:	2201      	movs	r2, #1
 8004982:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004986:	481a      	ldr	r0, [pc, #104]	; (80049f0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004988:	f003 f9e2 	bl	8007d50 <HAL_GPIO_WritePin>
			bl.PID = -bl.PID;
 800498c:	4b17      	ldr	r3, [pc, #92]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x284>)
 800498e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004992:	eeb1 7b47 	vneg.f64	d7, d7
 8004996:	4b15      	ldr	r3, [pc, #84]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004998:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, (int )bl.PID);
 800499c:	4b13      	ldr	r3, [pc, #76]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x284>)
 800499e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80049a2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80049a6:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	ee17 2a90 	vmov	r2, s15
 80049ae:	639a      	str	r2, [r3, #56]	; 0x38


	}

}
 80049b0:	bf00      	nop
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40001c00 	.word	0x40001c00
 80049bc:	240002e0 	.word	0x240002e0
 80049c0:	240000a0 	.word	0x240000a0
 80049c4:	58020c00 	.word	0x58020c00
 80049c8:	24000410 	.word	0x24000410
 80049cc:	240003c4 	.word	0x240003c4
 80049d0:	24000130 	.word	0x24000130
 80049d4:	58020400 	.word	0x58020400
 80049d8:	2400032c 	.word	0x2400032c
 80049dc:	240001c0 	.word	0x240001c0
 80049e0:	58021000 	.word	0x58021000
 80049e4:	240004a8 	.word	0x240004a8
 80049e8:	24000378 	.word	0x24000378
 80049ec:	24000250 	.word	0x24000250
 80049f0:	58020800 	.word	0x58020800

080049f4 <Reset_Handler>:
 80049f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a2c <LoopFillZerobss+0xe>
 80049f8:	f7ff fe3e 	bl	8004678 <SystemInit>
 80049fc:	480c      	ldr	r0, [pc, #48]	; (8004a30 <LoopFillZerobss+0x12>)
 80049fe:	490d      	ldr	r1, [pc, #52]	; (8004a34 <LoopFillZerobss+0x16>)
 8004a00:	4a0d      	ldr	r2, [pc, #52]	; (8004a38 <LoopFillZerobss+0x1a>)
 8004a02:	2300      	movs	r3, #0
 8004a04:	e002      	b.n	8004a0c <LoopCopyDataInit>

08004a06 <CopyDataInit>:
 8004a06:	58d4      	ldr	r4, [r2, r3]
 8004a08:	50c4      	str	r4, [r0, r3]
 8004a0a:	3304      	adds	r3, #4

08004a0c <LoopCopyDataInit>:
 8004a0c:	18c4      	adds	r4, r0, r3
 8004a0e:	428c      	cmp	r4, r1
 8004a10:	d3f9      	bcc.n	8004a06 <CopyDataInit>
 8004a12:	4a0a      	ldr	r2, [pc, #40]	; (8004a3c <LoopFillZerobss+0x1e>)
 8004a14:	4c0a      	ldr	r4, [pc, #40]	; (8004a40 <LoopFillZerobss+0x22>)
 8004a16:	2300      	movs	r3, #0
 8004a18:	e001      	b.n	8004a1e <LoopFillZerobss>

08004a1a <FillZerobss>:
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	3204      	adds	r2, #4

08004a1e <LoopFillZerobss>:
 8004a1e:	42a2      	cmp	r2, r4
 8004a20:	d3fb      	bcc.n	8004a1a <FillZerobss>
 8004a22:	f009 f8a5 	bl	800db70 <__libc_init_array>
 8004a26:	f7fb fffb 	bl	8000a20 <main>
 8004a2a:	4770      	bx	lr
 8004a2c:	24050000 	.word	0x24050000
 8004a30:	24000000 	.word	0x24000000
 8004a34:	2400007c 	.word	0x2400007c
 8004a38:	0800e224 	.word	0x0800e224
 8004a3c:	24000080 	.word	0x24000080
 8004a40:	24001108 	.word	0x24001108

08004a44 <ADC3_IRQHandler>:
 8004a44:	e7fe      	b.n	8004a44 <ADC3_IRQHandler>
	...

08004a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a4e:	2003      	movs	r0, #3
 8004a50:	f000 f95c 	bl	8004d0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a54:	f003 ff34 	bl	80088c0 <HAL_RCC_GetSysClockFreq>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	4b15      	ldr	r3, [pc, #84]	; (8004ab0 <HAL_Init+0x68>)
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	4913      	ldr	r1, [pc, #76]	; (8004ab4 <HAL_Init+0x6c>)
 8004a66:	5ccb      	ldrb	r3, [r1, r3]
 8004a68:	f003 031f 	and.w	r3, r3, #31
 8004a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a70:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a72:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <HAL_Init+0x68>)
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	4a0e      	ldr	r2, [pc, #56]	; (8004ab4 <HAL_Init+0x6c>)
 8004a7c:	5cd3      	ldrb	r3, [r2, r3]
 8004a7e:	f003 031f 	and.w	r3, r3, #31
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	fa22 f303 	lsr.w	r3, r2, r3
 8004a88:	4a0b      	ldr	r2, [pc, #44]	; (8004ab8 <HAL_Init+0x70>)
 8004a8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a8c:	4a0b      	ldr	r2, [pc, #44]	; (8004abc <HAL_Init+0x74>)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a92:	200f      	movs	r0, #15
 8004a94:	f000 f814 	bl	8004ac0 <HAL_InitTick>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e002      	b.n	8004aa8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004aa2:	f7ff fa3f 	bl	8003f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	58024400 	.word	0x58024400
 8004ab4:	0800e1c4 	.word	0x0800e1c4
 8004ab8:	24000008 	.word	0x24000008
 8004abc:	24000004 	.word	0x24000004

08004ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004ac8:	4b15      	ldr	r3, [pc, #84]	; (8004b20 <HAL_InitTick+0x60>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e021      	b.n	8004b18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004ad4:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <HAL_InitTick+0x64>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	4b11      	ldr	r3, [pc, #68]	; (8004b20 <HAL_InitTick+0x60>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	4619      	mov	r1, r3
 8004ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 f941 	bl	8004d72 <HAL_SYSTICK_Config>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e00e      	b.n	8004b18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b0f      	cmp	r3, #15
 8004afe:	d80a      	bhi.n	8004b16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b00:	2200      	movs	r2, #0
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	f04f 30ff 	mov.w	r0, #4294967295
 8004b08:	f000 f90b 	bl	8004d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b0c:	4a06      	ldr	r2, [pc, #24]	; (8004b28 <HAL_InitTick+0x68>)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	e000      	b.n	8004b18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	24000010 	.word	0x24000010
 8004b24:	24000004 	.word	0x24000004
 8004b28:	2400000c 	.word	0x2400000c

08004b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004b30:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <HAL_IncTick+0x20>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	4b06      	ldr	r3, [pc, #24]	; (8004b50 <HAL_IncTick+0x24>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	4a04      	ldr	r2, [pc, #16]	; (8004b50 <HAL_IncTick+0x24>)
 8004b3e:	6013      	str	r3, [r2, #0]
}
 8004b40:	bf00      	nop
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	24000010 	.word	0x24000010
 8004b50:	240010f4 	.word	0x240010f4

08004b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  return uwTick;
 8004b58:	4b03      	ldr	r3, [pc, #12]	; (8004b68 <HAL_GetTick+0x14>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	240010f4 	.word	0x240010f4

08004b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <__NVIC_SetPriorityGrouping+0x40>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b88:	4013      	ands	r3, r2
 8004b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b94:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b9a:	4a04      	ldr	r2, [pc, #16]	; (8004bac <__NVIC_SetPriorityGrouping+0x40>)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	60d3      	str	r3, [r2, #12]
}
 8004ba0:	bf00      	nop
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	e000ed00 	.word	0xe000ed00
 8004bb0:	05fa0000 	.word	0x05fa0000

08004bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bb8:	4b04      	ldr	r3, [pc, #16]	; (8004bcc <__NVIC_GetPriorityGrouping+0x18>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	0a1b      	lsrs	r3, r3, #8
 8004bbe:	f003 0307 	and.w	r3, r3, #7
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	e000ed00 	.word	0xe000ed00

08004bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	db0b      	blt.n	8004bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	f003 021f 	and.w	r2, r3, #31
 8004be8:	4907      	ldr	r1, [pc, #28]	; (8004c08 <__NVIC_EnableIRQ+0x38>)
 8004bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8004bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	e000e100 	.word	0xe000e100

08004c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	4603      	mov	r3, r0
 8004c14:	6039      	str	r1, [r7, #0]
 8004c16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	db0a      	blt.n	8004c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	490c      	ldr	r1, [pc, #48]	; (8004c58 <__NVIC_SetPriority+0x4c>)
 8004c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c2a:	0112      	lsls	r2, r2, #4
 8004c2c:	b2d2      	uxtb	r2, r2
 8004c2e:	440b      	add	r3, r1
 8004c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c34:	e00a      	b.n	8004c4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	4908      	ldr	r1, [pc, #32]	; (8004c5c <__NVIC_SetPriority+0x50>)
 8004c3c:	88fb      	ldrh	r3, [r7, #6]
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	3b04      	subs	r3, #4
 8004c44:	0112      	lsls	r2, r2, #4
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	440b      	add	r3, r1
 8004c4a:	761a      	strb	r2, [r3, #24]
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	e000e100 	.word	0xe000e100
 8004c5c:	e000ed00 	.word	0xe000ed00

08004c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b089      	sub	sp, #36	; 0x24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f1c3 0307 	rsb	r3, r3, #7
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	bf28      	it	cs
 8004c7e:	2304      	movcs	r3, #4
 8004c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	3304      	adds	r3, #4
 8004c86:	2b06      	cmp	r3, #6
 8004c88:	d902      	bls.n	8004c90 <NVIC_EncodePriority+0x30>
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	3b03      	subs	r3, #3
 8004c8e:	e000      	b.n	8004c92 <NVIC_EncodePriority+0x32>
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c94:	f04f 32ff 	mov.w	r2, #4294967295
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	43da      	mvns	r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	401a      	ands	r2, r3
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb2:	43d9      	mvns	r1, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb8:	4313      	orrs	r3, r2
         );
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3724      	adds	r7, #36	; 0x24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
	...

08004cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cd8:	d301      	bcc.n	8004cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e00f      	b.n	8004cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cde:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <SysTick_Config+0x40>)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ce6:	210f      	movs	r1, #15
 8004ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cec:	f7ff ff8e 	bl	8004c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cf0:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <SysTick_Config+0x40>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cf6:	4b04      	ldr	r3, [pc, #16]	; (8004d08 <SysTick_Config+0x40>)
 8004cf8:	2207      	movs	r2, #7
 8004cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	e000e010 	.word	0xe000e010

08004d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff ff29 	bl	8004b6c <__NVIC_SetPriorityGrouping>
}
 8004d1a:	bf00      	nop
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b086      	sub	sp, #24
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	4603      	mov	r3, r0
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d30:	f7ff ff40 	bl	8004bb4 <__NVIC_GetPriorityGrouping>
 8004d34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	6978      	ldr	r0, [r7, #20]
 8004d3c:	f7ff ff90 	bl	8004c60 <NVIC_EncodePriority>
 8004d40:	4602      	mov	r2, r0
 8004d42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d46:	4611      	mov	r1, r2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff ff5f 	bl	8004c0c <__NVIC_SetPriority>
}
 8004d4e:	bf00      	nop
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff ff33 	bl	8004bd0 <__NVIC_EnableIRQ>
}
 8004d6a:	bf00      	nop
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b082      	sub	sp, #8
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7ff ffa4 	bl	8004cc8 <SysTick_Config>
 8004d80:	4603      	mov	r3, r0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004d94:	f7ff fede 	bl	8004b54 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e314      	b.n	80053ce <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a66      	ldr	r2, [pc, #408]	; (8004f44 <HAL_DMA_Init+0x1b8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d04a      	beq.n	8004e44 <HAL_DMA_Init+0xb8>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a65      	ldr	r2, [pc, #404]	; (8004f48 <HAL_DMA_Init+0x1bc>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d045      	beq.n	8004e44 <HAL_DMA_Init+0xb8>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a63      	ldr	r2, [pc, #396]	; (8004f4c <HAL_DMA_Init+0x1c0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d040      	beq.n	8004e44 <HAL_DMA_Init+0xb8>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a62      	ldr	r2, [pc, #392]	; (8004f50 <HAL_DMA_Init+0x1c4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d03b      	beq.n	8004e44 <HAL_DMA_Init+0xb8>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a60      	ldr	r2, [pc, #384]	; (8004f54 <HAL_DMA_Init+0x1c8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d036      	beq.n	8004e44 <HAL_DMA_Init+0xb8>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a5f      	ldr	r2, [pc, #380]	; (8004f58 <HAL_DMA_Init+0x1cc>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d031      	beq.n	8004e44 <HAL_DMA_Init+0xb8>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a5d      	ldr	r2, [pc, #372]	; (8004f5c <HAL_DMA_Init+0x1d0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d02c      	beq.n	8004e44 <HAL_DMA_Init+0xb8>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a5c      	ldr	r2, [pc, #368]	; (8004f60 <HAL_DMA_Init+0x1d4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d027      	beq.n	8004e44 <HAL_DMA_Init+0xb8>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a5a      	ldr	r2, [pc, #360]	; (8004f64 <HAL_DMA_Init+0x1d8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d022      	beq.n	8004e44 <HAL_DMA_Init+0xb8>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a59      	ldr	r2, [pc, #356]	; (8004f68 <HAL_DMA_Init+0x1dc>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d01d      	beq.n	8004e44 <HAL_DMA_Init+0xb8>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a57      	ldr	r2, [pc, #348]	; (8004f6c <HAL_DMA_Init+0x1e0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d018      	beq.n	8004e44 <HAL_DMA_Init+0xb8>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a56      	ldr	r2, [pc, #344]	; (8004f70 <HAL_DMA_Init+0x1e4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d013      	beq.n	8004e44 <HAL_DMA_Init+0xb8>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a54      	ldr	r2, [pc, #336]	; (8004f74 <HAL_DMA_Init+0x1e8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d00e      	beq.n	8004e44 <HAL_DMA_Init+0xb8>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a53      	ldr	r2, [pc, #332]	; (8004f78 <HAL_DMA_Init+0x1ec>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d009      	beq.n	8004e44 <HAL_DMA_Init+0xb8>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a51      	ldr	r2, [pc, #324]	; (8004f7c <HAL_DMA_Init+0x1f0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d004      	beq.n	8004e44 <HAL_DMA_Init+0xb8>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a50      	ldr	r2, [pc, #320]	; (8004f80 <HAL_DMA_Init+0x1f4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d101      	bne.n	8004e48 <HAL_DMA_Init+0xbc>
 8004e44:	2301      	movs	r3, #1
 8004e46:	e000      	b.n	8004e4a <HAL_DMA_Init+0xbe>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 813c 	beq.w	80050c8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a37      	ldr	r2, [pc, #220]	; (8004f44 <HAL_DMA_Init+0x1b8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d04a      	beq.n	8004f00 <HAL_DMA_Init+0x174>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a36      	ldr	r2, [pc, #216]	; (8004f48 <HAL_DMA_Init+0x1bc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d045      	beq.n	8004f00 <HAL_DMA_Init+0x174>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a34      	ldr	r2, [pc, #208]	; (8004f4c <HAL_DMA_Init+0x1c0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d040      	beq.n	8004f00 <HAL_DMA_Init+0x174>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a33      	ldr	r2, [pc, #204]	; (8004f50 <HAL_DMA_Init+0x1c4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d03b      	beq.n	8004f00 <HAL_DMA_Init+0x174>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a31      	ldr	r2, [pc, #196]	; (8004f54 <HAL_DMA_Init+0x1c8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d036      	beq.n	8004f00 <HAL_DMA_Init+0x174>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a30      	ldr	r2, [pc, #192]	; (8004f58 <HAL_DMA_Init+0x1cc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d031      	beq.n	8004f00 <HAL_DMA_Init+0x174>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a2e      	ldr	r2, [pc, #184]	; (8004f5c <HAL_DMA_Init+0x1d0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d02c      	beq.n	8004f00 <HAL_DMA_Init+0x174>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a2d      	ldr	r2, [pc, #180]	; (8004f60 <HAL_DMA_Init+0x1d4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d027      	beq.n	8004f00 <HAL_DMA_Init+0x174>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a2b      	ldr	r2, [pc, #172]	; (8004f64 <HAL_DMA_Init+0x1d8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d022      	beq.n	8004f00 <HAL_DMA_Init+0x174>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a2a      	ldr	r2, [pc, #168]	; (8004f68 <HAL_DMA_Init+0x1dc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d01d      	beq.n	8004f00 <HAL_DMA_Init+0x174>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a28      	ldr	r2, [pc, #160]	; (8004f6c <HAL_DMA_Init+0x1e0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d018      	beq.n	8004f00 <HAL_DMA_Init+0x174>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a27      	ldr	r2, [pc, #156]	; (8004f70 <HAL_DMA_Init+0x1e4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d013      	beq.n	8004f00 <HAL_DMA_Init+0x174>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a25      	ldr	r2, [pc, #148]	; (8004f74 <HAL_DMA_Init+0x1e8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00e      	beq.n	8004f00 <HAL_DMA_Init+0x174>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a24      	ldr	r2, [pc, #144]	; (8004f78 <HAL_DMA_Init+0x1ec>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d009      	beq.n	8004f00 <HAL_DMA_Init+0x174>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a22      	ldr	r2, [pc, #136]	; (8004f7c <HAL_DMA_Init+0x1f0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d004      	beq.n	8004f00 <HAL_DMA_Init+0x174>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a21      	ldr	r2, [pc, #132]	; (8004f80 <HAL_DMA_Init+0x1f4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d108      	bne.n	8004f12 <HAL_DMA_Init+0x186>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0201 	bic.w	r2, r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	e007      	b.n	8004f22 <HAL_DMA_Init+0x196>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0201 	bic.w	r2, r2, #1
 8004f20:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f22:	e02f      	b.n	8004f84 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f24:	f7ff fe16 	bl	8004b54 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b05      	cmp	r3, #5
 8004f30:	d928      	bls.n	8004f84 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2220      	movs	r2, #32
 8004f36:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2203      	movs	r2, #3
 8004f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e244      	b.n	80053ce <HAL_DMA_Init+0x642>
 8004f44:	40020010 	.word	0x40020010
 8004f48:	40020028 	.word	0x40020028
 8004f4c:	40020040 	.word	0x40020040
 8004f50:	40020058 	.word	0x40020058
 8004f54:	40020070 	.word	0x40020070
 8004f58:	40020088 	.word	0x40020088
 8004f5c:	400200a0 	.word	0x400200a0
 8004f60:	400200b8 	.word	0x400200b8
 8004f64:	40020410 	.word	0x40020410
 8004f68:	40020428 	.word	0x40020428
 8004f6c:	40020440 	.word	0x40020440
 8004f70:	40020458 	.word	0x40020458
 8004f74:	40020470 	.word	0x40020470
 8004f78:	40020488 	.word	0x40020488
 8004f7c:	400204a0 	.word	0x400204a0
 8004f80:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1c8      	bne.n	8004f24 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4b84      	ldr	r3, [pc, #528]	; (80051b0 <HAL_DMA_Init+0x424>)
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004faa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fb6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fc2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d107      	bne.n	8004fe8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2b28      	cmp	r3, #40	; 0x28
 8004fee:	d903      	bls.n	8004ff8 <HAL_DMA_Init+0x26c>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ff6:	d91f      	bls.n	8005038 <HAL_DMA_Init+0x2ac>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	2b3e      	cmp	r3, #62	; 0x3e
 8004ffe:	d903      	bls.n	8005008 <HAL_DMA_Init+0x27c>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b42      	cmp	r3, #66	; 0x42
 8005006:	d917      	bls.n	8005038 <HAL_DMA_Init+0x2ac>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b46      	cmp	r3, #70	; 0x46
 800500e:	d903      	bls.n	8005018 <HAL_DMA_Init+0x28c>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	2b48      	cmp	r3, #72	; 0x48
 8005016:	d90f      	bls.n	8005038 <HAL_DMA_Init+0x2ac>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b4e      	cmp	r3, #78	; 0x4e
 800501e:	d903      	bls.n	8005028 <HAL_DMA_Init+0x29c>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b52      	cmp	r3, #82	; 0x52
 8005026:	d907      	bls.n	8005038 <HAL_DMA_Init+0x2ac>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	2b73      	cmp	r3, #115	; 0x73
 800502e:	d905      	bls.n	800503c <HAL_DMA_Init+0x2b0>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b77      	cmp	r3, #119	; 0x77
 8005036:	d801      	bhi.n	800503c <HAL_DMA_Init+0x2b0>
 8005038:	2301      	movs	r3, #1
 800503a:	e000      	b.n	800503e <HAL_DMA_Init+0x2b2>
 800503c:	2300      	movs	r3, #0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005048:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f023 0307 	bic.w	r3, r3, #7
 8005060:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	4313      	orrs	r3, r2
 800506a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	2b04      	cmp	r3, #4
 8005072:	d117      	bne.n	80050a4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00e      	beq.n	80050a4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f002 fb30 	bl	80076ec <DMA_CheckFifoParam>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d008      	beq.n	80050a4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2240      	movs	r2, #64	; 0x40
 8005096:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e194      	b.n	80053ce <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f002 fa6b 	bl	8007588 <DMA_CalcBaseAndBitshift>
 80050b2:	4603      	mov	r3, r0
 80050b4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ba:	f003 031f 	and.w	r3, r3, #31
 80050be:	223f      	movs	r2, #63	; 0x3f
 80050c0:	409a      	lsls	r2, r3
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	609a      	str	r2, [r3, #8]
 80050c6:	e0ca      	b.n	800525e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a39      	ldr	r2, [pc, #228]	; (80051b4 <HAL_DMA_Init+0x428>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d022      	beq.n	8005118 <HAL_DMA_Init+0x38c>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a38      	ldr	r2, [pc, #224]	; (80051b8 <HAL_DMA_Init+0x42c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d01d      	beq.n	8005118 <HAL_DMA_Init+0x38c>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a36      	ldr	r2, [pc, #216]	; (80051bc <HAL_DMA_Init+0x430>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d018      	beq.n	8005118 <HAL_DMA_Init+0x38c>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a35      	ldr	r2, [pc, #212]	; (80051c0 <HAL_DMA_Init+0x434>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <HAL_DMA_Init+0x38c>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a33      	ldr	r2, [pc, #204]	; (80051c4 <HAL_DMA_Init+0x438>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00e      	beq.n	8005118 <HAL_DMA_Init+0x38c>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a32      	ldr	r2, [pc, #200]	; (80051c8 <HAL_DMA_Init+0x43c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d009      	beq.n	8005118 <HAL_DMA_Init+0x38c>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a30      	ldr	r2, [pc, #192]	; (80051cc <HAL_DMA_Init+0x440>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d004      	beq.n	8005118 <HAL_DMA_Init+0x38c>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a2f      	ldr	r2, [pc, #188]	; (80051d0 <HAL_DMA_Init+0x444>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d101      	bne.n	800511c <HAL_DMA_Init+0x390>
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <HAL_DMA_Init+0x392>
 800511c:	2300      	movs	r3, #0
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 8094 	beq.w	800524c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a22      	ldr	r2, [pc, #136]	; (80051b4 <HAL_DMA_Init+0x428>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d021      	beq.n	8005172 <HAL_DMA_Init+0x3e6>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a21      	ldr	r2, [pc, #132]	; (80051b8 <HAL_DMA_Init+0x42c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d01c      	beq.n	8005172 <HAL_DMA_Init+0x3e6>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a1f      	ldr	r2, [pc, #124]	; (80051bc <HAL_DMA_Init+0x430>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d017      	beq.n	8005172 <HAL_DMA_Init+0x3e6>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a1e      	ldr	r2, [pc, #120]	; (80051c0 <HAL_DMA_Init+0x434>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d012      	beq.n	8005172 <HAL_DMA_Init+0x3e6>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a1c      	ldr	r2, [pc, #112]	; (80051c4 <HAL_DMA_Init+0x438>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00d      	beq.n	8005172 <HAL_DMA_Init+0x3e6>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a1b      	ldr	r2, [pc, #108]	; (80051c8 <HAL_DMA_Init+0x43c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d008      	beq.n	8005172 <HAL_DMA_Init+0x3e6>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a19      	ldr	r2, [pc, #100]	; (80051cc <HAL_DMA_Init+0x440>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d003      	beq.n	8005172 <HAL_DMA_Init+0x3e6>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a18      	ldr	r2, [pc, #96]	; (80051d0 <HAL_DMA_Init+0x444>)
 8005170:	4293      	cmp	r3, r2
 8005172:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4b11      	ldr	r3, [pc, #68]	; (80051d4 <HAL_DMA_Init+0x448>)
 8005190:	4013      	ands	r3, r2
 8005192:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	2b40      	cmp	r3, #64	; 0x40
 800519a:	d01d      	beq.n	80051d8 <HAL_DMA_Init+0x44c>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	2b80      	cmp	r3, #128	; 0x80
 80051a2:	d102      	bne.n	80051aa <HAL_DMA_Init+0x41e>
 80051a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051a8:	e017      	b.n	80051da <HAL_DMA_Init+0x44e>
 80051aa:	2300      	movs	r3, #0
 80051ac:	e015      	b.n	80051da <HAL_DMA_Init+0x44e>
 80051ae:	bf00      	nop
 80051b0:	fe10803f 	.word	0xfe10803f
 80051b4:	58025408 	.word	0x58025408
 80051b8:	5802541c 	.word	0x5802541c
 80051bc:	58025430 	.word	0x58025430
 80051c0:	58025444 	.word	0x58025444
 80051c4:	58025458 	.word	0x58025458
 80051c8:	5802546c 	.word	0x5802546c
 80051cc:	58025480 	.word	0x58025480
 80051d0:	58025494 	.word	0x58025494
 80051d4:	fffe000f 	.word	0xfffe000f
 80051d8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	68d2      	ldr	r2, [r2, #12]
 80051de:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80051e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005200:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005208:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	4b6e      	ldr	r3, [pc, #440]	; (80053d8 <HAL_DMA_Init+0x64c>)
 8005220:	4413      	add	r3, r2
 8005222:	4a6e      	ldr	r2, [pc, #440]	; (80053dc <HAL_DMA_Init+0x650>)
 8005224:	fba2 2303 	umull	r2, r3, r2, r3
 8005228:	091b      	lsrs	r3, r3, #4
 800522a:	009a      	lsls	r2, r3, #2
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f002 f9a9 	bl	8007588 <DMA_CalcBaseAndBitshift>
 8005236:	4603      	mov	r3, r0
 8005238:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523e:	f003 031f 	and.w	r3, r3, #31
 8005242:	2201      	movs	r2, #1
 8005244:	409a      	lsls	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	605a      	str	r2, [r3, #4]
 800524a:	e008      	b.n	800525e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2240      	movs	r2, #64	; 0x40
 8005250:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2203      	movs	r2, #3
 8005256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e0b7      	b.n	80053ce <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a5f      	ldr	r2, [pc, #380]	; (80053e0 <HAL_DMA_Init+0x654>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d072      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a5d      	ldr	r2, [pc, #372]	; (80053e4 <HAL_DMA_Init+0x658>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d06d      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a5c      	ldr	r2, [pc, #368]	; (80053e8 <HAL_DMA_Init+0x65c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d068      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a5a      	ldr	r2, [pc, #360]	; (80053ec <HAL_DMA_Init+0x660>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d063      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a59      	ldr	r2, [pc, #356]	; (80053f0 <HAL_DMA_Init+0x664>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d05e      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a57      	ldr	r2, [pc, #348]	; (80053f4 <HAL_DMA_Init+0x668>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d059      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a56      	ldr	r2, [pc, #344]	; (80053f8 <HAL_DMA_Init+0x66c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d054      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a54      	ldr	r2, [pc, #336]	; (80053fc <HAL_DMA_Init+0x670>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d04f      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a53      	ldr	r2, [pc, #332]	; (8005400 <HAL_DMA_Init+0x674>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d04a      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a51      	ldr	r2, [pc, #324]	; (8005404 <HAL_DMA_Init+0x678>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d045      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a50      	ldr	r2, [pc, #320]	; (8005408 <HAL_DMA_Init+0x67c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d040      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a4e      	ldr	r2, [pc, #312]	; (800540c <HAL_DMA_Init+0x680>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d03b      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a4d      	ldr	r2, [pc, #308]	; (8005410 <HAL_DMA_Init+0x684>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d036      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a4b      	ldr	r2, [pc, #300]	; (8005414 <HAL_DMA_Init+0x688>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d031      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a4a      	ldr	r2, [pc, #296]	; (8005418 <HAL_DMA_Init+0x68c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d02c      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a48      	ldr	r2, [pc, #288]	; (800541c <HAL_DMA_Init+0x690>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d027      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a47      	ldr	r2, [pc, #284]	; (8005420 <HAL_DMA_Init+0x694>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d022      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a45      	ldr	r2, [pc, #276]	; (8005424 <HAL_DMA_Init+0x698>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d01d      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a44      	ldr	r2, [pc, #272]	; (8005428 <HAL_DMA_Init+0x69c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d018      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a42      	ldr	r2, [pc, #264]	; (800542c <HAL_DMA_Init+0x6a0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d013      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a41      	ldr	r2, [pc, #260]	; (8005430 <HAL_DMA_Init+0x6a4>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00e      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a3f      	ldr	r2, [pc, #252]	; (8005434 <HAL_DMA_Init+0x6a8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d009      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a3e      	ldr	r2, [pc, #248]	; (8005438 <HAL_DMA_Init+0x6ac>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d004      	beq.n	800534e <HAL_DMA_Init+0x5c2>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a3c      	ldr	r2, [pc, #240]	; (800543c <HAL_DMA_Init+0x6b0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d101      	bne.n	8005352 <HAL_DMA_Init+0x5c6>
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <HAL_DMA_Init+0x5c8>
 8005352:	2300      	movs	r3, #0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d032      	beq.n	80053be <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f002 fa43 	bl	80077e4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	2b80      	cmp	r3, #128	; 0x80
 8005364:	d102      	bne.n	800536c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005374:	b2d2      	uxtb	r2, r2
 8005376:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005380:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d010      	beq.n	80053ac <HAL_DMA_Init+0x620>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b08      	cmp	r3, #8
 8005390:	d80c      	bhi.n	80053ac <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f002 fac0 	bl	8007918 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80053a8:	605a      	str	r2, [r3, #4]
 80053aa:	e008      	b.n	80053be <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	a7fdabf8 	.word	0xa7fdabf8
 80053dc:	cccccccd 	.word	0xcccccccd
 80053e0:	40020010 	.word	0x40020010
 80053e4:	40020028 	.word	0x40020028
 80053e8:	40020040 	.word	0x40020040
 80053ec:	40020058 	.word	0x40020058
 80053f0:	40020070 	.word	0x40020070
 80053f4:	40020088 	.word	0x40020088
 80053f8:	400200a0 	.word	0x400200a0
 80053fc:	400200b8 	.word	0x400200b8
 8005400:	40020410 	.word	0x40020410
 8005404:	40020428 	.word	0x40020428
 8005408:	40020440 	.word	0x40020440
 800540c:	40020458 	.word	0x40020458
 8005410:	40020470 	.word	0x40020470
 8005414:	40020488 	.word	0x40020488
 8005418:	400204a0 	.word	0x400204a0
 800541c:	400204b8 	.word	0x400204b8
 8005420:	58025408 	.word	0x58025408
 8005424:	5802541c 	.word	0x5802541c
 8005428:	58025430 	.word	0x58025430
 800542c:	58025444 	.word	0x58025444
 8005430:	58025458 	.word	0x58025458
 8005434:	5802546c 	.word	0x5802546c
 8005438:	58025480 	.word	0x58025480
 800543c:	58025494 	.word	0x58025494

08005440 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e226      	b.n	80058aa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005462:	2b01      	cmp	r3, #1
 8005464:	d101      	bne.n	800546a <HAL_DMA_Start_IT+0x2a>
 8005466:	2302      	movs	r3, #2
 8005468:	e21f      	b.n	80058aa <HAL_DMA_Start_IT+0x46a>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b01      	cmp	r3, #1
 800547c:	f040 820a 	bne.w	8005894 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a68      	ldr	r2, [pc, #416]	; (8005634 <HAL_DMA_Start_IT+0x1f4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d04a      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a66      	ldr	r2, [pc, #408]	; (8005638 <HAL_DMA_Start_IT+0x1f8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d045      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a65      	ldr	r2, [pc, #404]	; (800563c <HAL_DMA_Start_IT+0x1fc>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d040      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a63      	ldr	r2, [pc, #396]	; (8005640 <HAL_DMA_Start_IT+0x200>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d03b      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a62      	ldr	r2, [pc, #392]	; (8005644 <HAL_DMA_Start_IT+0x204>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d036      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a60      	ldr	r2, [pc, #384]	; (8005648 <HAL_DMA_Start_IT+0x208>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d031      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a5f      	ldr	r2, [pc, #380]	; (800564c <HAL_DMA_Start_IT+0x20c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d02c      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a5d      	ldr	r2, [pc, #372]	; (8005650 <HAL_DMA_Start_IT+0x210>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d027      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a5c      	ldr	r2, [pc, #368]	; (8005654 <HAL_DMA_Start_IT+0x214>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d022      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a5a      	ldr	r2, [pc, #360]	; (8005658 <HAL_DMA_Start_IT+0x218>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d01d      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a59      	ldr	r2, [pc, #356]	; (800565c <HAL_DMA_Start_IT+0x21c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d018      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a57      	ldr	r2, [pc, #348]	; (8005660 <HAL_DMA_Start_IT+0x220>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d013      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a56      	ldr	r2, [pc, #344]	; (8005664 <HAL_DMA_Start_IT+0x224>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00e      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a54      	ldr	r2, [pc, #336]	; (8005668 <HAL_DMA_Start_IT+0x228>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d009      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a53      	ldr	r2, [pc, #332]	; (800566c <HAL_DMA_Start_IT+0x22c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d004      	beq.n	800552e <HAL_DMA_Start_IT+0xee>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a51      	ldr	r2, [pc, #324]	; (8005670 <HAL_DMA_Start_IT+0x230>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d108      	bne.n	8005540 <HAL_DMA_Start_IT+0x100>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0201 	bic.w	r2, r2, #1
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	e007      	b.n	8005550 <HAL_DMA_Start_IT+0x110>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0201 	bic.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	68b9      	ldr	r1, [r7, #8]
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f001 fe6a 	bl	8007230 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a34      	ldr	r2, [pc, #208]	; (8005634 <HAL_DMA_Start_IT+0x1f4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d04a      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a33      	ldr	r2, [pc, #204]	; (8005638 <HAL_DMA_Start_IT+0x1f8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d045      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a31      	ldr	r2, [pc, #196]	; (800563c <HAL_DMA_Start_IT+0x1fc>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d040      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a30      	ldr	r2, [pc, #192]	; (8005640 <HAL_DMA_Start_IT+0x200>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d03b      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a2e      	ldr	r2, [pc, #184]	; (8005644 <HAL_DMA_Start_IT+0x204>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d036      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a2d      	ldr	r2, [pc, #180]	; (8005648 <HAL_DMA_Start_IT+0x208>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d031      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a2b      	ldr	r2, [pc, #172]	; (800564c <HAL_DMA_Start_IT+0x20c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d02c      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a2a      	ldr	r2, [pc, #168]	; (8005650 <HAL_DMA_Start_IT+0x210>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d027      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a28      	ldr	r2, [pc, #160]	; (8005654 <HAL_DMA_Start_IT+0x214>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d022      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a27      	ldr	r2, [pc, #156]	; (8005658 <HAL_DMA_Start_IT+0x218>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d01d      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a25      	ldr	r2, [pc, #148]	; (800565c <HAL_DMA_Start_IT+0x21c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d018      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a24      	ldr	r2, [pc, #144]	; (8005660 <HAL_DMA_Start_IT+0x220>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d013      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a22      	ldr	r2, [pc, #136]	; (8005664 <HAL_DMA_Start_IT+0x224>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00e      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a21      	ldr	r2, [pc, #132]	; (8005668 <HAL_DMA_Start_IT+0x228>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d009      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a1f      	ldr	r2, [pc, #124]	; (800566c <HAL_DMA_Start_IT+0x22c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d004      	beq.n	80055fc <HAL_DMA_Start_IT+0x1bc>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a1e      	ldr	r2, [pc, #120]	; (8005670 <HAL_DMA_Start_IT+0x230>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d101      	bne.n	8005600 <HAL_DMA_Start_IT+0x1c0>
 80055fc:	2301      	movs	r3, #1
 80055fe:	e000      	b.n	8005602 <HAL_DMA_Start_IT+0x1c2>
 8005600:	2300      	movs	r3, #0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d036      	beq.n	8005674 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f023 021e 	bic.w	r2, r3, #30
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0216 	orr.w	r2, r2, #22
 8005618:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	2b00      	cmp	r3, #0
 8005620:	d03e      	beq.n	80056a0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f042 0208 	orr.w	r2, r2, #8
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	e035      	b.n	80056a0 <HAL_DMA_Start_IT+0x260>
 8005634:	40020010 	.word	0x40020010
 8005638:	40020028 	.word	0x40020028
 800563c:	40020040 	.word	0x40020040
 8005640:	40020058 	.word	0x40020058
 8005644:	40020070 	.word	0x40020070
 8005648:	40020088 	.word	0x40020088
 800564c:	400200a0 	.word	0x400200a0
 8005650:	400200b8 	.word	0x400200b8
 8005654:	40020410 	.word	0x40020410
 8005658:	40020428 	.word	0x40020428
 800565c:	40020440 	.word	0x40020440
 8005660:	40020458 	.word	0x40020458
 8005664:	40020470 	.word	0x40020470
 8005668:	40020488 	.word	0x40020488
 800566c:	400204a0 	.word	0x400204a0
 8005670:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f023 020e 	bic.w	r2, r3, #14
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 020a 	orr.w	r2, r2, #10
 8005686:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	2b00      	cmp	r3, #0
 800568e:	d007      	beq.n	80056a0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0204 	orr.w	r2, r2, #4
 800569e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a83      	ldr	r2, [pc, #524]	; (80058b4 <HAL_DMA_Start_IT+0x474>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d072      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a82      	ldr	r2, [pc, #520]	; (80058b8 <HAL_DMA_Start_IT+0x478>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d06d      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a80      	ldr	r2, [pc, #512]	; (80058bc <HAL_DMA_Start_IT+0x47c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d068      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a7f      	ldr	r2, [pc, #508]	; (80058c0 <HAL_DMA_Start_IT+0x480>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d063      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a7d      	ldr	r2, [pc, #500]	; (80058c4 <HAL_DMA_Start_IT+0x484>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d05e      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a7c      	ldr	r2, [pc, #496]	; (80058c8 <HAL_DMA_Start_IT+0x488>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d059      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a7a      	ldr	r2, [pc, #488]	; (80058cc <HAL_DMA_Start_IT+0x48c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d054      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a79      	ldr	r2, [pc, #484]	; (80058d0 <HAL_DMA_Start_IT+0x490>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d04f      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a77      	ldr	r2, [pc, #476]	; (80058d4 <HAL_DMA_Start_IT+0x494>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d04a      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a76      	ldr	r2, [pc, #472]	; (80058d8 <HAL_DMA_Start_IT+0x498>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d045      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a74      	ldr	r2, [pc, #464]	; (80058dc <HAL_DMA_Start_IT+0x49c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d040      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a73      	ldr	r2, [pc, #460]	; (80058e0 <HAL_DMA_Start_IT+0x4a0>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d03b      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a71      	ldr	r2, [pc, #452]	; (80058e4 <HAL_DMA_Start_IT+0x4a4>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d036      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a70      	ldr	r2, [pc, #448]	; (80058e8 <HAL_DMA_Start_IT+0x4a8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d031      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a6e      	ldr	r2, [pc, #440]	; (80058ec <HAL_DMA_Start_IT+0x4ac>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d02c      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a6d      	ldr	r2, [pc, #436]	; (80058f0 <HAL_DMA_Start_IT+0x4b0>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d027      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a6b      	ldr	r2, [pc, #428]	; (80058f4 <HAL_DMA_Start_IT+0x4b4>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d022      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a6a      	ldr	r2, [pc, #424]	; (80058f8 <HAL_DMA_Start_IT+0x4b8>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d01d      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a68      	ldr	r2, [pc, #416]	; (80058fc <HAL_DMA_Start_IT+0x4bc>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d018      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a67      	ldr	r2, [pc, #412]	; (8005900 <HAL_DMA_Start_IT+0x4c0>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d013      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a65      	ldr	r2, [pc, #404]	; (8005904 <HAL_DMA_Start_IT+0x4c4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00e      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a64      	ldr	r2, [pc, #400]	; (8005908 <HAL_DMA_Start_IT+0x4c8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d009      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a62      	ldr	r2, [pc, #392]	; (800590c <HAL_DMA_Start_IT+0x4cc>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d004      	beq.n	8005790 <HAL_DMA_Start_IT+0x350>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a61      	ldr	r2, [pc, #388]	; (8005910 <HAL_DMA_Start_IT+0x4d0>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d101      	bne.n	8005794 <HAL_DMA_Start_IT+0x354>
 8005790:	2301      	movs	r3, #1
 8005792:	e000      	b.n	8005796 <HAL_DMA_Start_IT+0x356>
 8005794:	2300      	movs	r3, #0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d01a      	beq.n	80057d0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d007      	beq.n	80057b8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057b6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d007      	beq.n	80057d0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057ce:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a37      	ldr	r2, [pc, #220]	; (80058b4 <HAL_DMA_Start_IT+0x474>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d04a      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a36      	ldr	r2, [pc, #216]	; (80058b8 <HAL_DMA_Start_IT+0x478>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d045      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a34      	ldr	r2, [pc, #208]	; (80058bc <HAL_DMA_Start_IT+0x47c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d040      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a33      	ldr	r2, [pc, #204]	; (80058c0 <HAL_DMA_Start_IT+0x480>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d03b      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a31      	ldr	r2, [pc, #196]	; (80058c4 <HAL_DMA_Start_IT+0x484>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d036      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a30      	ldr	r2, [pc, #192]	; (80058c8 <HAL_DMA_Start_IT+0x488>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d031      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a2e      	ldr	r2, [pc, #184]	; (80058cc <HAL_DMA_Start_IT+0x48c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d02c      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a2d      	ldr	r2, [pc, #180]	; (80058d0 <HAL_DMA_Start_IT+0x490>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d027      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a2b      	ldr	r2, [pc, #172]	; (80058d4 <HAL_DMA_Start_IT+0x494>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d022      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a2a      	ldr	r2, [pc, #168]	; (80058d8 <HAL_DMA_Start_IT+0x498>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d01d      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a28      	ldr	r2, [pc, #160]	; (80058dc <HAL_DMA_Start_IT+0x49c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d018      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a27      	ldr	r2, [pc, #156]	; (80058e0 <HAL_DMA_Start_IT+0x4a0>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d013      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a25      	ldr	r2, [pc, #148]	; (80058e4 <HAL_DMA_Start_IT+0x4a4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d00e      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a24      	ldr	r2, [pc, #144]	; (80058e8 <HAL_DMA_Start_IT+0x4a8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d009      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a22      	ldr	r2, [pc, #136]	; (80058ec <HAL_DMA_Start_IT+0x4ac>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d004      	beq.n	8005870 <HAL_DMA_Start_IT+0x430>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a21      	ldr	r2, [pc, #132]	; (80058f0 <HAL_DMA_Start_IT+0x4b0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d108      	bne.n	8005882 <HAL_DMA_Start_IT+0x442>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0201 	orr.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	e012      	b.n	80058a8 <HAL_DMA_Start_IT+0x468>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 0201 	orr.w	r2, r2, #1
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	e009      	b.n	80058a8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800589a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80058a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3718      	adds	r7, #24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	40020010 	.word	0x40020010
 80058b8:	40020028 	.word	0x40020028
 80058bc:	40020040 	.word	0x40020040
 80058c0:	40020058 	.word	0x40020058
 80058c4:	40020070 	.word	0x40020070
 80058c8:	40020088 	.word	0x40020088
 80058cc:	400200a0 	.word	0x400200a0
 80058d0:	400200b8 	.word	0x400200b8
 80058d4:	40020410 	.word	0x40020410
 80058d8:	40020428 	.word	0x40020428
 80058dc:	40020440 	.word	0x40020440
 80058e0:	40020458 	.word	0x40020458
 80058e4:	40020470 	.word	0x40020470
 80058e8:	40020488 	.word	0x40020488
 80058ec:	400204a0 	.word	0x400204a0
 80058f0:	400204b8 	.word	0x400204b8
 80058f4:	58025408 	.word	0x58025408
 80058f8:	5802541c 	.word	0x5802541c
 80058fc:	58025430 	.word	0x58025430
 8005900:	58025444 	.word	0x58025444
 8005904:	58025458 	.word	0x58025458
 8005908:	5802546c 	.word	0x5802546c
 800590c:	58025480 	.word	0x58025480
 8005910:	58025494 	.word	0x58025494

08005914 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800591c:	f7ff f91a 	bl	8004b54 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e2dc      	b.n	8005ee6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d008      	beq.n	800594a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2280      	movs	r2, #128	; 0x80
 800593c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e2cd      	b.n	8005ee6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a76      	ldr	r2, [pc, #472]	; (8005b28 <HAL_DMA_Abort+0x214>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d04a      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a74      	ldr	r2, [pc, #464]	; (8005b2c <HAL_DMA_Abort+0x218>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d045      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a73      	ldr	r2, [pc, #460]	; (8005b30 <HAL_DMA_Abort+0x21c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d040      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a71      	ldr	r2, [pc, #452]	; (8005b34 <HAL_DMA_Abort+0x220>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d03b      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a70      	ldr	r2, [pc, #448]	; (8005b38 <HAL_DMA_Abort+0x224>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d036      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a6e      	ldr	r2, [pc, #440]	; (8005b3c <HAL_DMA_Abort+0x228>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d031      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a6d      	ldr	r2, [pc, #436]	; (8005b40 <HAL_DMA_Abort+0x22c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d02c      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a6b      	ldr	r2, [pc, #428]	; (8005b44 <HAL_DMA_Abort+0x230>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d027      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a6a      	ldr	r2, [pc, #424]	; (8005b48 <HAL_DMA_Abort+0x234>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d022      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a68      	ldr	r2, [pc, #416]	; (8005b4c <HAL_DMA_Abort+0x238>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d01d      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a67      	ldr	r2, [pc, #412]	; (8005b50 <HAL_DMA_Abort+0x23c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d018      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a65      	ldr	r2, [pc, #404]	; (8005b54 <HAL_DMA_Abort+0x240>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d013      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a64      	ldr	r2, [pc, #400]	; (8005b58 <HAL_DMA_Abort+0x244>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00e      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a62      	ldr	r2, [pc, #392]	; (8005b5c <HAL_DMA_Abort+0x248>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d009      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a61      	ldr	r2, [pc, #388]	; (8005b60 <HAL_DMA_Abort+0x24c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d004      	beq.n	80059ea <HAL_DMA_Abort+0xd6>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a5f      	ldr	r2, [pc, #380]	; (8005b64 <HAL_DMA_Abort+0x250>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d101      	bne.n	80059ee <HAL_DMA_Abort+0xda>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <HAL_DMA_Abort+0xdc>
 80059ee:	2300      	movs	r3, #0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d013      	beq.n	8005a1c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 021e 	bic.w	r2, r2, #30
 8005a02:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	695a      	ldr	r2, [r3, #20]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a12:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	e00a      	b.n	8005a32 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 020e 	bic.w	r2, r2, #14
 8005a2a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a3c      	ldr	r2, [pc, #240]	; (8005b28 <HAL_DMA_Abort+0x214>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d072      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a3a      	ldr	r2, [pc, #232]	; (8005b2c <HAL_DMA_Abort+0x218>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d06d      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a39      	ldr	r2, [pc, #228]	; (8005b30 <HAL_DMA_Abort+0x21c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d068      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a37      	ldr	r2, [pc, #220]	; (8005b34 <HAL_DMA_Abort+0x220>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d063      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a36      	ldr	r2, [pc, #216]	; (8005b38 <HAL_DMA_Abort+0x224>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d05e      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a34      	ldr	r2, [pc, #208]	; (8005b3c <HAL_DMA_Abort+0x228>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d059      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a33      	ldr	r2, [pc, #204]	; (8005b40 <HAL_DMA_Abort+0x22c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d054      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a31      	ldr	r2, [pc, #196]	; (8005b44 <HAL_DMA_Abort+0x230>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d04f      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a30      	ldr	r2, [pc, #192]	; (8005b48 <HAL_DMA_Abort+0x234>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d04a      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a2e      	ldr	r2, [pc, #184]	; (8005b4c <HAL_DMA_Abort+0x238>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d045      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a2d      	ldr	r2, [pc, #180]	; (8005b50 <HAL_DMA_Abort+0x23c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d040      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a2b      	ldr	r2, [pc, #172]	; (8005b54 <HAL_DMA_Abort+0x240>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d03b      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a2a      	ldr	r2, [pc, #168]	; (8005b58 <HAL_DMA_Abort+0x244>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d036      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a28      	ldr	r2, [pc, #160]	; (8005b5c <HAL_DMA_Abort+0x248>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d031      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a27      	ldr	r2, [pc, #156]	; (8005b60 <HAL_DMA_Abort+0x24c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d02c      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a25      	ldr	r2, [pc, #148]	; (8005b64 <HAL_DMA_Abort+0x250>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d027      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a24      	ldr	r2, [pc, #144]	; (8005b68 <HAL_DMA_Abort+0x254>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d022      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a22      	ldr	r2, [pc, #136]	; (8005b6c <HAL_DMA_Abort+0x258>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d01d      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a21      	ldr	r2, [pc, #132]	; (8005b70 <HAL_DMA_Abort+0x25c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d018      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a1f      	ldr	r2, [pc, #124]	; (8005b74 <HAL_DMA_Abort+0x260>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d013      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1e      	ldr	r2, [pc, #120]	; (8005b78 <HAL_DMA_Abort+0x264>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00e      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a1c      	ldr	r2, [pc, #112]	; (8005b7c <HAL_DMA_Abort+0x268>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d009      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a1b      	ldr	r2, [pc, #108]	; (8005b80 <HAL_DMA_Abort+0x26c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d004      	beq.n	8005b22 <HAL_DMA_Abort+0x20e>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a19      	ldr	r2, [pc, #100]	; (8005b84 <HAL_DMA_Abort+0x270>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d132      	bne.n	8005b88 <HAL_DMA_Abort+0x274>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e031      	b.n	8005b8a <HAL_DMA_Abort+0x276>
 8005b26:	bf00      	nop
 8005b28:	40020010 	.word	0x40020010
 8005b2c:	40020028 	.word	0x40020028
 8005b30:	40020040 	.word	0x40020040
 8005b34:	40020058 	.word	0x40020058
 8005b38:	40020070 	.word	0x40020070
 8005b3c:	40020088 	.word	0x40020088
 8005b40:	400200a0 	.word	0x400200a0
 8005b44:	400200b8 	.word	0x400200b8
 8005b48:	40020410 	.word	0x40020410
 8005b4c:	40020428 	.word	0x40020428
 8005b50:	40020440 	.word	0x40020440
 8005b54:	40020458 	.word	0x40020458
 8005b58:	40020470 	.word	0x40020470
 8005b5c:	40020488 	.word	0x40020488
 8005b60:	400204a0 	.word	0x400204a0
 8005b64:	400204b8 	.word	0x400204b8
 8005b68:	58025408 	.word	0x58025408
 8005b6c:	5802541c 	.word	0x5802541c
 8005b70:	58025430 	.word	0x58025430
 8005b74:	58025444 	.word	0x58025444
 8005b78:	58025458 	.word	0x58025458
 8005b7c:	5802546c 	.word	0x5802546c
 8005b80:	58025480 	.word	0x58025480
 8005b84:	58025494 	.word	0x58025494
 8005b88:	2300      	movs	r3, #0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d007      	beq.n	8005b9e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a6d      	ldr	r2, [pc, #436]	; (8005d58 <HAL_DMA_Abort+0x444>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d04a      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a6b      	ldr	r2, [pc, #428]	; (8005d5c <HAL_DMA_Abort+0x448>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d045      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a6a      	ldr	r2, [pc, #424]	; (8005d60 <HAL_DMA_Abort+0x44c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d040      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a68      	ldr	r2, [pc, #416]	; (8005d64 <HAL_DMA_Abort+0x450>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d03b      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a67      	ldr	r2, [pc, #412]	; (8005d68 <HAL_DMA_Abort+0x454>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d036      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a65      	ldr	r2, [pc, #404]	; (8005d6c <HAL_DMA_Abort+0x458>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d031      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a64      	ldr	r2, [pc, #400]	; (8005d70 <HAL_DMA_Abort+0x45c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d02c      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a62      	ldr	r2, [pc, #392]	; (8005d74 <HAL_DMA_Abort+0x460>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d027      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a61      	ldr	r2, [pc, #388]	; (8005d78 <HAL_DMA_Abort+0x464>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d022      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a5f      	ldr	r2, [pc, #380]	; (8005d7c <HAL_DMA_Abort+0x468>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d01d      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a5e      	ldr	r2, [pc, #376]	; (8005d80 <HAL_DMA_Abort+0x46c>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d018      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a5c      	ldr	r2, [pc, #368]	; (8005d84 <HAL_DMA_Abort+0x470>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d013      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a5b      	ldr	r2, [pc, #364]	; (8005d88 <HAL_DMA_Abort+0x474>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00e      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a59      	ldr	r2, [pc, #356]	; (8005d8c <HAL_DMA_Abort+0x478>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d009      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a58      	ldr	r2, [pc, #352]	; (8005d90 <HAL_DMA_Abort+0x47c>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d004      	beq.n	8005c3e <HAL_DMA_Abort+0x32a>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a56      	ldr	r2, [pc, #344]	; (8005d94 <HAL_DMA_Abort+0x480>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d108      	bne.n	8005c50 <HAL_DMA_Abort+0x33c>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0201 	bic.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	e007      	b.n	8005c60 <HAL_DMA_Abort+0x34c>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0201 	bic.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c60:	e013      	b.n	8005c8a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c62:	f7fe ff77 	bl	8004b54 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b05      	cmp	r3, #5
 8005c6e:	d90c      	bls.n	8005c8a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2220      	movs	r2, #32
 8005c74:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2203      	movs	r2, #3
 8005c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e12d      	b.n	8005ee6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e5      	bne.n	8005c62 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a2f      	ldr	r2, [pc, #188]	; (8005d58 <HAL_DMA_Abort+0x444>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d04a      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a2d      	ldr	r2, [pc, #180]	; (8005d5c <HAL_DMA_Abort+0x448>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d045      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a2c      	ldr	r2, [pc, #176]	; (8005d60 <HAL_DMA_Abort+0x44c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d040      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a2a      	ldr	r2, [pc, #168]	; (8005d64 <HAL_DMA_Abort+0x450>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d03b      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a29      	ldr	r2, [pc, #164]	; (8005d68 <HAL_DMA_Abort+0x454>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d036      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a27      	ldr	r2, [pc, #156]	; (8005d6c <HAL_DMA_Abort+0x458>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d031      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a26      	ldr	r2, [pc, #152]	; (8005d70 <HAL_DMA_Abort+0x45c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d02c      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a24      	ldr	r2, [pc, #144]	; (8005d74 <HAL_DMA_Abort+0x460>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d027      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a23      	ldr	r2, [pc, #140]	; (8005d78 <HAL_DMA_Abort+0x464>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d022      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a21      	ldr	r2, [pc, #132]	; (8005d7c <HAL_DMA_Abort+0x468>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d01d      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a20      	ldr	r2, [pc, #128]	; (8005d80 <HAL_DMA_Abort+0x46c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d018      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a1e      	ldr	r2, [pc, #120]	; (8005d84 <HAL_DMA_Abort+0x470>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d013      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a1d      	ldr	r2, [pc, #116]	; (8005d88 <HAL_DMA_Abort+0x474>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00e      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a1b      	ldr	r2, [pc, #108]	; (8005d8c <HAL_DMA_Abort+0x478>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d009      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a1a      	ldr	r2, [pc, #104]	; (8005d90 <HAL_DMA_Abort+0x47c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d004      	beq.n	8005d36 <HAL_DMA_Abort+0x422>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a18      	ldr	r2, [pc, #96]	; (8005d94 <HAL_DMA_Abort+0x480>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d101      	bne.n	8005d3a <HAL_DMA_Abort+0x426>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <HAL_DMA_Abort+0x428>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d02b      	beq.n	8005d98 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d44:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d4a:	f003 031f 	and.w	r3, r3, #31
 8005d4e:	223f      	movs	r2, #63	; 0x3f
 8005d50:	409a      	lsls	r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	609a      	str	r2, [r3, #8]
 8005d56:	e02a      	b.n	8005dae <HAL_DMA_Abort+0x49a>
 8005d58:	40020010 	.word	0x40020010
 8005d5c:	40020028 	.word	0x40020028
 8005d60:	40020040 	.word	0x40020040
 8005d64:	40020058 	.word	0x40020058
 8005d68:	40020070 	.word	0x40020070
 8005d6c:	40020088 	.word	0x40020088
 8005d70:	400200a0 	.word	0x400200a0
 8005d74:	400200b8 	.word	0x400200b8
 8005d78:	40020410 	.word	0x40020410
 8005d7c:	40020428 	.word	0x40020428
 8005d80:	40020440 	.word	0x40020440
 8005d84:	40020458 	.word	0x40020458
 8005d88:	40020470 	.word	0x40020470
 8005d8c:	40020488 	.word	0x40020488
 8005d90:	400204a0 	.word	0x400204a0
 8005d94:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da2:	f003 031f 	and.w	r3, r3, #31
 8005da6:	2201      	movs	r2, #1
 8005da8:	409a      	lsls	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a4f      	ldr	r2, [pc, #316]	; (8005ef0 <HAL_DMA_Abort+0x5dc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d072      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a4d      	ldr	r2, [pc, #308]	; (8005ef4 <HAL_DMA_Abort+0x5e0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d06d      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a4c      	ldr	r2, [pc, #304]	; (8005ef8 <HAL_DMA_Abort+0x5e4>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d068      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a4a      	ldr	r2, [pc, #296]	; (8005efc <HAL_DMA_Abort+0x5e8>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d063      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a49      	ldr	r2, [pc, #292]	; (8005f00 <HAL_DMA_Abort+0x5ec>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d05e      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a47      	ldr	r2, [pc, #284]	; (8005f04 <HAL_DMA_Abort+0x5f0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d059      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a46      	ldr	r2, [pc, #280]	; (8005f08 <HAL_DMA_Abort+0x5f4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d054      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a44      	ldr	r2, [pc, #272]	; (8005f0c <HAL_DMA_Abort+0x5f8>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d04f      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a43      	ldr	r2, [pc, #268]	; (8005f10 <HAL_DMA_Abort+0x5fc>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d04a      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a41      	ldr	r2, [pc, #260]	; (8005f14 <HAL_DMA_Abort+0x600>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d045      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a40      	ldr	r2, [pc, #256]	; (8005f18 <HAL_DMA_Abort+0x604>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d040      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a3e      	ldr	r2, [pc, #248]	; (8005f1c <HAL_DMA_Abort+0x608>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d03b      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a3d      	ldr	r2, [pc, #244]	; (8005f20 <HAL_DMA_Abort+0x60c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d036      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a3b      	ldr	r2, [pc, #236]	; (8005f24 <HAL_DMA_Abort+0x610>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d031      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a3a      	ldr	r2, [pc, #232]	; (8005f28 <HAL_DMA_Abort+0x614>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d02c      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a38      	ldr	r2, [pc, #224]	; (8005f2c <HAL_DMA_Abort+0x618>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d027      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a37      	ldr	r2, [pc, #220]	; (8005f30 <HAL_DMA_Abort+0x61c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d022      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a35      	ldr	r2, [pc, #212]	; (8005f34 <HAL_DMA_Abort+0x620>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d01d      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a34      	ldr	r2, [pc, #208]	; (8005f38 <HAL_DMA_Abort+0x624>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d018      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a32      	ldr	r2, [pc, #200]	; (8005f3c <HAL_DMA_Abort+0x628>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d013      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a31      	ldr	r2, [pc, #196]	; (8005f40 <HAL_DMA_Abort+0x62c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d00e      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a2f      	ldr	r2, [pc, #188]	; (8005f44 <HAL_DMA_Abort+0x630>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d009      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a2e      	ldr	r2, [pc, #184]	; (8005f48 <HAL_DMA_Abort+0x634>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d004      	beq.n	8005e9e <HAL_DMA_Abort+0x58a>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a2c      	ldr	r2, [pc, #176]	; (8005f4c <HAL_DMA_Abort+0x638>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d101      	bne.n	8005ea2 <HAL_DMA_Abort+0x58e>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <HAL_DMA_Abort+0x590>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d015      	beq.n	8005ed4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005eb0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00c      	beq.n	8005ed4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ec4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ec8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ed2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	40020010 	.word	0x40020010
 8005ef4:	40020028 	.word	0x40020028
 8005ef8:	40020040 	.word	0x40020040
 8005efc:	40020058 	.word	0x40020058
 8005f00:	40020070 	.word	0x40020070
 8005f04:	40020088 	.word	0x40020088
 8005f08:	400200a0 	.word	0x400200a0
 8005f0c:	400200b8 	.word	0x400200b8
 8005f10:	40020410 	.word	0x40020410
 8005f14:	40020428 	.word	0x40020428
 8005f18:	40020440 	.word	0x40020440
 8005f1c:	40020458 	.word	0x40020458
 8005f20:	40020470 	.word	0x40020470
 8005f24:	40020488 	.word	0x40020488
 8005f28:	400204a0 	.word	0x400204a0
 8005f2c:	400204b8 	.word	0x400204b8
 8005f30:	58025408 	.word	0x58025408
 8005f34:	5802541c 	.word	0x5802541c
 8005f38:	58025430 	.word	0x58025430
 8005f3c:	58025444 	.word	0x58025444
 8005f40:	58025458 	.word	0x58025458
 8005f44:	5802546c 	.word	0x5802546c
 8005f48:	58025480 	.word	0x58025480
 8005f4c:	58025494 	.word	0x58025494

08005f50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e237      	b.n	80063d2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d004      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2280      	movs	r2, #128	; 0x80
 8005f72:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e22c      	b.n	80063d2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a5c      	ldr	r2, [pc, #368]	; (80060f0 <HAL_DMA_Abort_IT+0x1a0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d04a      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a5b      	ldr	r2, [pc, #364]	; (80060f4 <HAL_DMA_Abort_IT+0x1a4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d045      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a59      	ldr	r2, [pc, #356]	; (80060f8 <HAL_DMA_Abort_IT+0x1a8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d040      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a58      	ldr	r2, [pc, #352]	; (80060fc <HAL_DMA_Abort_IT+0x1ac>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d03b      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a56      	ldr	r2, [pc, #344]	; (8006100 <HAL_DMA_Abort_IT+0x1b0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d036      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a55      	ldr	r2, [pc, #340]	; (8006104 <HAL_DMA_Abort_IT+0x1b4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d031      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a53      	ldr	r2, [pc, #332]	; (8006108 <HAL_DMA_Abort_IT+0x1b8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d02c      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a52      	ldr	r2, [pc, #328]	; (800610c <HAL_DMA_Abort_IT+0x1bc>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d027      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a50      	ldr	r2, [pc, #320]	; (8006110 <HAL_DMA_Abort_IT+0x1c0>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d022      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a4f      	ldr	r2, [pc, #316]	; (8006114 <HAL_DMA_Abort_IT+0x1c4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d01d      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a4d      	ldr	r2, [pc, #308]	; (8006118 <HAL_DMA_Abort_IT+0x1c8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d018      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a4c      	ldr	r2, [pc, #304]	; (800611c <HAL_DMA_Abort_IT+0x1cc>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d013      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a4a      	ldr	r2, [pc, #296]	; (8006120 <HAL_DMA_Abort_IT+0x1d0>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00e      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a49      	ldr	r2, [pc, #292]	; (8006124 <HAL_DMA_Abort_IT+0x1d4>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d009      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a47      	ldr	r2, [pc, #284]	; (8006128 <HAL_DMA_Abort_IT+0x1d8>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d004      	beq.n	8006018 <HAL_DMA_Abort_IT+0xc8>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a46      	ldr	r2, [pc, #280]	; (800612c <HAL_DMA_Abort_IT+0x1dc>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d101      	bne.n	800601c <HAL_DMA_Abort_IT+0xcc>
 8006018:	2301      	movs	r3, #1
 800601a:	e000      	b.n	800601e <HAL_DMA_Abort_IT+0xce>
 800601c:	2300      	movs	r3, #0
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 8086 	beq.w	8006130 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2204      	movs	r2, #4
 8006028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a2f      	ldr	r2, [pc, #188]	; (80060f0 <HAL_DMA_Abort_IT+0x1a0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d04a      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a2e      	ldr	r2, [pc, #184]	; (80060f4 <HAL_DMA_Abort_IT+0x1a4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d045      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a2c      	ldr	r2, [pc, #176]	; (80060f8 <HAL_DMA_Abort_IT+0x1a8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d040      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a2b      	ldr	r2, [pc, #172]	; (80060fc <HAL_DMA_Abort_IT+0x1ac>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d03b      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a29      	ldr	r2, [pc, #164]	; (8006100 <HAL_DMA_Abort_IT+0x1b0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d036      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a28      	ldr	r2, [pc, #160]	; (8006104 <HAL_DMA_Abort_IT+0x1b4>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d031      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a26      	ldr	r2, [pc, #152]	; (8006108 <HAL_DMA_Abort_IT+0x1b8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d02c      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a25      	ldr	r2, [pc, #148]	; (800610c <HAL_DMA_Abort_IT+0x1bc>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d027      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a23      	ldr	r2, [pc, #140]	; (8006110 <HAL_DMA_Abort_IT+0x1c0>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d022      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a22      	ldr	r2, [pc, #136]	; (8006114 <HAL_DMA_Abort_IT+0x1c4>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d01d      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a20      	ldr	r2, [pc, #128]	; (8006118 <HAL_DMA_Abort_IT+0x1c8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d018      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a1f      	ldr	r2, [pc, #124]	; (800611c <HAL_DMA_Abort_IT+0x1cc>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d013      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a1d      	ldr	r2, [pc, #116]	; (8006120 <HAL_DMA_Abort_IT+0x1d0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d00e      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a1c      	ldr	r2, [pc, #112]	; (8006124 <HAL_DMA_Abort_IT+0x1d4>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d009      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a1a      	ldr	r2, [pc, #104]	; (8006128 <HAL_DMA_Abort_IT+0x1d8>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d004      	beq.n	80060cc <HAL_DMA_Abort_IT+0x17c>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a19      	ldr	r2, [pc, #100]	; (800612c <HAL_DMA_Abort_IT+0x1dc>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d108      	bne.n	80060de <HAL_DMA_Abort_IT+0x18e>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0201 	bic.w	r2, r2, #1
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	e178      	b.n	80063d0 <HAL_DMA_Abort_IT+0x480>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0201 	bic.w	r2, r2, #1
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	e16f      	b.n	80063d0 <HAL_DMA_Abort_IT+0x480>
 80060f0:	40020010 	.word	0x40020010
 80060f4:	40020028 	.word	0x40020028
 80060f8:	40020040 	.word	0x40020040
 80060fc:	40020058 	.word	0x40020058
 8006100:	40020070 	.word	0x40020070
 8006104:	40020088 	.word	0x40020088
 8006108:	400200a0 	.word	0x400200a0
 800610c:	400200b8 	.word	0x400200b8
 8006110:	40020410 	.word	0x40020410
 8006114:	40020428 	.word	0x40020428
 8006118:	40020440 	.word	0x40020440
 800611c:	40020458 	.word	0x40020458
 8006120:	40020470 	.word	0x40020470
 8006124:	40020488 	.word	0x40020488
 8006128:	400204a0 	.word	0x400204a0
 800612c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 020e 	bic.w	r2, r2, #14
 800613e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a6c      	ldr	r2, [pc, #432]	; (80062f8 <HAL_DMA_Abort_IT+0x3a8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d04a      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a6b      	ldr	r2, [pc, #428]	; (80062fc <HAL_DMA_Abort_IT+0x3ac>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d045      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a69      	ldr	r2, [pc, #420]	; (8006300 <HAL_DMA_Abort_IT+0x3b0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d040      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a68      	ldr	r2, [pc, #416]	; (8006304 <HAL_DMA_Abort_IT+0x3b4>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d03b      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a66      	ldr	r2, [pc, #408]	; (8006308 <HAL_DMA_Abort_IT+0x3b8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d036      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a65      	ldr	r2, [pc, #404]	; (800630c <HAL_DMA_Abort_IT+0x3bc>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d031      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a63      	ldr	r2, [pc, #396]	; (8006310 <HAL_DMA_Abort_IT+0x3c0>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d02c      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a62      	ldr	r2, [pc, #392]	; (8006314 <HAL_DMA_Abort_IT+0x3c4>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d027      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a60      	ldr	r2, [pc, #384]	; (8006318 <HAL_DMA_Abort_IT+0x3c8>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d022      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a5f      	ldr	r2, [pc, #380]	; (800631c <HAL_DMA_Abort_IT+0x3cc>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d01d      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a5d      	ldr	r2, [pc, #372]	; (8006320 <HAL_DMA_Abort_IT+0x3d0>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d018      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a5c      	ldr	r2, [pc, #368]	; (8006324 <HAL_DMA_Abort_IT+0x3d4>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d013      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a5a      	ldr	r2, [pc, #360]	; (8006328 <HAL_DMA_Abort_IT+0x3d8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00e      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a59      	ldr	r2, [pc, #356]	; (800632c <HAL_DMA_Abort_IT+0x3dc>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d009      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a57      	ldr	r2, [pc, #348]	; (8006330 <HAL_DMA_Abort_IT+0x3e0>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d004      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x290>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a56      	ldr	r2, [pc, #344]	; (8006334 <HAL_DMA_Abort_IT+0x3e4>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d108      	bne.n	80061f2 <HAL_DMA_Abort_IT+0x2a2>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 0201 	bic.w	r2, r2, #1
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	e007      	b.n	8006202 <HAL_DMA_Abort_IT+0x2b2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0201 	bic.w	r2, r2, #1
 8006200:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a3c      	ldr	r2, [pc, #240]	; (80062f8 <HAL_DMA_Abort_IT+0x3a8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d072      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a3a      	ldr	r2, [pc, #232]	; (80062fc <HAL_DMA_Abort_IT+0x3ac>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d06d      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a39      	ldr	r2, [pc, #228]	; (8006300 <HAL_DMA_Abort_IT+0x3b0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d068      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a37      	ldr	r2, [pc, #220]	; (8006304 <HAL_DMA_Abort_IT+0x3b4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d063      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a36      	ldr	r2, [pc, #216]	; (8006308 <HAL_DMA_Abort_IT+0x3b8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d05e      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a34      	ldr	r2, [pc, #208]	; (800630c <HAL_DMA_Abort_IT+0x3bc>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d059      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a33      	ldr	r2, [pc, #204]	; (8006310 <HAL_DMA_Abort_IT+0x3c0>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d054      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a31      	ldr	r2, [pc, #196]	; (8006314 <HAL_DMA_Abort_IT+0x3c4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d04f      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a30      	ldr	r2, [pc, #192]	; (8006318 <HAL_DMA_Abort_IT+0x3c8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d04a      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a2e      	ldr	r2, [pc, #184]	; (800631c <HAL_DMA_Abort_IT+0x3cc>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d045      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a2d      	ldr	r2, [pc, #180]	; (8006320 <HAL_DMA_Abort_IT+0x3d0>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d040      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a2b      	ldr	r2, [pc, #172]	; (8006324 <HAL_DMA_Abort_IT+0x3d4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d03b      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a2a      	ldr	r2, [pc, #168]	; (8006328 <HAL_DMA_Abort_IT+0x3d8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d036      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a28      	ldr	r2, [pc, #160]	; (800632c <HAL_DMA_Abort_IT+0x3dc>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d031      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a27      	ldr	r2, [pc, #156]	; (8006330 <HAL_DMA_Abort_IT+0x3e0>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d02c      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a25      	ldr	r2, [pc, #148]	; (8006334 <HAL_DMA_Abort_IT+0x3e4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d027      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a24      	ldr	r2, [pc, #144]	; (8006338 <HAL_DMA_Abort_IT+0x3e8>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d022      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a22      	ldr	r2, [pc, #136]	; (800633c <HAL_DMA_Abort_IT+0x3ec>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d01d      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a21      	ldr	r2, [pc, #132]	; (8006340 <HAL_DMA_Abort_IT+0x3f0>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d018      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a1f      	ldr	r2, [pc, #124]	; (8006344 <HAL_DMA_Abort_IT+0x3f4>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d013      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a1e      	ldr	r2, [pc, #120]	; (8006348 <HAL_DMA_Abort_IT+0x3f8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d00e      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a1c      	ldr	r2, [pc, #112]	; (800634c <HAL_DMA_Abort_IT+0x3fc>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d009      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1b      	ldr	r2, [pc, #108]	; (8006350 <HAL_DMA_Abort_IT+0x400>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d004      	beq.n	80062f2 <HAL_DMA_Abort_IT+0x3a2>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a19      	ldr	r2, [pc, #100]	; (8006354 <HAL_DMA_Abort_IT+0x404>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d132      	bne.n	8006358 <HAL_DMA_Abort_IT+0x408>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e031      	b.n	800635a <HAL_DMA_Abort_IT+0x40a>
 80062f6:	bf00      	nop
 80062f8:	40020010 	.word	0x40020010
 80062fc:	40020028 	.word	0x40020028
 8006300:	40020040 	.word	0x40020040
 8006304:	40020058 	.word	0x40020058
 8006308:	40020070 	.word	0x40020070
 800630c:	40020088 	.word	0x40020088
 8006310:	400200a0 	.word	0x400200a0
 8006314:	400200b8 	.word	0x400200b8
 8006318:	40020410 	.word	0x40020410
 800631c:	40020428 	.word	0x40020428
 8006320:	40020440 	.word	0x40020440
 8006324:	40020458 	.word	0x40020458
 8006328:	40020470 	.word	0x40020470
 800632c:	40020488 	.word	0x40020488
 8006330:	400204a0 	.word	0x400204a0
 8006334:	400204b8 	.word	0x400204b8
 8006338:	58025408 	.word	0x58025408
 800633c:	5802541c 	.word	0x5802541c
 8006340:	58025430 	.word	0x58025430
 8006344:	58025444 	.word	0x58025444
 8006348:	58025458 	.word	0x58025458
 800634c:	5802546c 	.word	0x5802546c
 8006350:	58025480 	.word	0x58025480
 8006354:	58025494 	.word	0x58025494
 8006358:	2300      	movs	r3, #0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d028      	beq.n	80063b0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800636c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006372:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006378:	f003 031f 	and.w	r3, r3, #31
 800637c:	2201      	movs	r2, #1
 800637e:	409a      	lsls	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800638c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00c      	beq.n	80063b0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063a4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80063ae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop

080063dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08a      	sub	sp, #40	; 0x28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80063e8:	4b67      	ldr	r3, [pc, #412]	; (8006588 <HAL_DMA_IRQHandler+0x1ac>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a67      	ldr	r2, [pc, #412]	; (800658c <HAL_DMA_IRQHandler+0x1b0>)
 80063ee:	fba2 2303 	umull	r2, r3, r2, r3
 80063f2:	0a9b      	lsrs	r3, r3, #10
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006400:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a5f      	ldr	r2, [pc, #380]	; (8006590 <HAL_DMA_IRQHandler+0x1b4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d04a      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a5d      	ldr	r2, [pc, #372]	; (8006594 <HAL_DMA_IRQHandler+0x1b8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d045      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a5c      	ldr	r2, [pc, #368]	; (8006598 <HAL_DMA_IRQHandler+0x1bc>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d040      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a5a      	ldr	r2, [pc, #360]	; (800659c <HAL_DMA_IRQHandler+0x1c0>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d03b      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a59      	ldr	r2, [pc, #356]	; (80065a0 <HAL_DMA_IRQHandler+0x1c4>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d036      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a57      	ldr	r2, [pc, #348]	; (80065a4 <HAL_DMA_IRQHandler+0x1c8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d031      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a56      	ldr	r2, [pc, #344]	; (80065a8 <HAL_DMA_IRQHandler+0x1cc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d02c      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a54      	ldr	r2, [pc, #336]	; (80065ac <HAL_DMA_IRQHandler+0x1d0>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d027      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a53      	ldr	r2, [pc, #332]	; (80065b0 <HAL_DMA_IRQHandler+0x1d4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d022      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a51      	ldr	r2, [pc, #324]	; (80065b4 <HAL_DMA_IRQHandler+0x1d8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d01d      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a50      	ldr	r2, [pc, #320]	; (80065b8 <HAL_DMA_IRQHandler+0x1dc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d018      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a4e      	ldr	r2, [pc, #312]	; (80065bc <HAL_DMA_IRQHandler+0x1e0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d013      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a4d      	ldr	r2, [pc, #308]	; (80065c0 <HAL_DMA_IRQHandler+0x1e4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00e      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a4b      	ldr	r2, [pc, #300]	; (80065c4 <HAL_DMA_IRQHandler+0x1e8>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d009      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a4a      	ldr	r2, [pc, #296]	; (80065c8 <HAL_DMA_IRQHandler+0x1ec>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d004      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a48      	ldr	r2, [pc, #288]	; (80065cc <HAL_DMA_IRQHandler+0x1f0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d101      	bne.n	80064b2 <HAL_DMA_IRQHandler+0xd6>
 80064ae:	2301      	movs	r3, #1
 80064b0:	e000      	b.n	80064b4 <HAL_DMA_IRQHandler+0xd8>
 80064b2:	2300      	movs	r3, #0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 842b 	beq.w	8006d10 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064be:	f003 031f 	and.w	r3, r3, #31
 80064c2:	2208      	movs	r2, #8
 80064c4:	409a      	lsls	r2, r3
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	4013      	ands	r3, r2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 80a2 	beq.w	8006614 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a2e      	ldr	r2, [pc, #184]	; (8006590 <HAL_DMA_IRQHandler+0x1b4>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d04a      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a2d      	ldr	r2, [pc, #180]	; (8006594 <HAL_DMA_IRQHandler+0x1b8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d045      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a2b      	ldr	r2, [pc, #172]	; (8006598 <HAL_DMA_IRQHandler+0x1bc>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d040      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a2a      	ldr	r2, [pc, #168]	; (800659c <HAL_DMA_IRQHandler+0x1c0>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d03b      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a28      	ldr	r2, [pc, #160]	; (80065a0 <HAL_DMA_IRQHandler+0x1c4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d036      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a27      	ldr	r2, [pc, #156]	; (80065a4 <HAL_DMA_IRQHandler+0x1c8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d031      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a25      	ldr	r2, [pc, #148]	; (80065a8 <HAL_DMA_IRQHandler+0x1cc>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d02c      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a24      	ldr	r2, [pc, #144]	; (80065ac <HAL_DMA_IRQHandler+0x1d0>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d027      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a22      	ldr	r2, [pc, #136]	; (80065b0 <HAL_DMA_IRQHandler+0x1d4>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d022      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a21      	ldr	r2, [pc, #132]	; (80065b4 <HAL_DMA_IRQHandler+0x1d8>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d01d      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a1f      	ldr	r2, [pc, #124]	; (80065b8 <HAL_DMA_IRQHandler+0x1dc>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d018      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a1e      	ldr	r2, [pc, #120]	; (80065bc <HAL_DMA_IRQHandler+0x1e0>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d013      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a1c      	ldr	r2, [pc, #112]	; (80065c0 <HAL_DMA_IRQHandler+0x1e4>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00e      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a1b      	ldr	r2, [pc, #108]	; (80065c4 <HAL_DMA_IRQHandler+0x1e8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d009      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a19      	ldr	r2, [pc, #100]	; (80065c8 <HAL_DMA_IRQHandler+0x1ec>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d004      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a18      	ldr	r2, [pc, #96]	; (80065cc <HAL_DMA_IRQHandler+0x1f0>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d12f      	bne.n	80065d0 <HAL_DMA_IRQHandler+0x1f4>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0304 	and.w	r3, r3, #4
 800657a:	2b00      	cmp	r3, #0
 800657c:	bf14      	ite	ne
 800657e:	2301      	movne	r3, #1
 8006580:	2300      	moveq	r3, #0
 8006582:	b2db      	uxtb	r3, r3
 8006584:	e02e      	b.n	80065e4 <HAL_DMA_IRQHandler+0x208>
 8006586:	bf00      	nop
 8006588:	24000004 	.word	0x24000004
 800658c:	1b4e81b5 	.word	0x1b4e81b5
 8006590:	40020010 	.word	0x40020010
 8006594:	40020028 	.word	0x40020028
 8006598:	40020040 	.word	0x40020040
 800659c:	40020058 	.word	0x40020058
 80065a0:	40020070 	.word	0x40020070
 80065a4:	40020088 	.word	0x40020088
 80065a8:	400200a0 	.word	0x400200a0
 80065ac:	400200b8 	.word	0x400200b8
 80065b0:	40020410 	.word	0x40020410
 80065b4:	40020428 	.word	0x40020428
 80065b8:	40020440 	.word	0x40020440
 80065bc:	40020458 	.word	0x40020458
 80065c0:	40020470 	.word	0x40020470
 80065c4:	40020488 	.word	0x40020488
 80065c8:	400204a0 	.word	0x400204a0
 80065cc:	400204b8 	.word	0x400204b8
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	2b00      	cmp	r3, #0
 80065dc:	bf14      	ite	ne
 80065de:	2301      	movne	r3, #1
 80065e0:	2300      	moveq	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d015      	beq.n	8006614 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0204 	bic.w	r2, r2, #4
 80065f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fc:	f003 031f 	and.w	r3, r3, #31
 8006600:	2208      	movs	r2, #8
 8006602:	409a      	lsls	r2, r3
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660c:	f043 0201 	orr.w	r2, r3, #1
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006618:	f003 031f 	and.w	r3, r3, #31
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	fa22 f303 	lsr.w	r3, r2, r3
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d06e      	beq.n	8006708 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a69      	ldr	r2, [pc, #420]	; (80067d4 <HAL_DMA_IRQHandler+0x3f8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d04a      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a67      	ldr	r2, [pc, #412]	; (80067d8 <HAL_DMA_IRQHandler+0x3fc>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d045      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a66      	ldr	r2, [pc, #408]	; (80067dc <HAL_DMA_IRQHandler+0x400>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d040      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a64      	ldr	r2, [pc, #400]	; (80067e0 <HAL_DMA_IRQHandler+0x404>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d03b      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a63      	ldr	r2, [pc, #396]	; (80067e4 <HAL_DMA_IRQHandler+0x408>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d036      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a61      	ldr	r2, [pc, #388]	; (80067e8 <HAL_DMA_IRQHandler+0x40c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d031      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a60      	ldr	r2, [pc, #384]	; (80067ec <HAL_DMA_IRQHandler+0x410>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d02c      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a5e      	ldr	r2, [pc, #376]	; (80067f0 <HAL_DMA_IRQHandler+0x414>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d027      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a5d      	ldr	r2, [pc, #372]	; (80067f4 <HAL_DMA_IRQHandler+0x418>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d022      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a5b      	ldr	r2, [pc, #364]	; (80067f8 <HAL_DMA_IRQHandler+0x41c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d01d      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a5a      	ldr	r2, [pc, #360]	; (80067fc <HAL_DMA_IRQHandler+0x420>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d018      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a58      	ldr	r2, [pc, #352]	; (8006800 <HAL_DMA_IRQHandler+0x424>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d013      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a57      	ldr	r2, [pc, #348]	; (8006804 <HAL_DMA_IRQHandler+0x428>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d00e      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a55      	ldr	r2, [pc, #340]	; (8006808 <HAL_DMA_IRQHandler+0x42c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d009      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a54      	ldr	r2, [pc, #336]	; (800680c <HAL_DMA_IRQHandler+0x430>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d004      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a52      	ldr	r2, [pc, #328]	; (8006810 <HAL_DMA_IRQHandler+0x434>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d10a      	bne.n	80066e0 <HAL_DMA_IRQHandler+0x304>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	bf14      	ite	ne
 80066d8:	2301      	movne	r3, #1
 80066da:	2300      	moveq	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	e003      	b.n	80066e8 <HAL_DMA_IRQHandler+0x30c>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2300      	movs	r3, #0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00d      	beq.n	8006708 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f0:	f003 031f 	and.w	r3, r3, #31
 80066f4:	2201      	movs	r2, #1
 80066f6:	409a      	lsls	r2, r3
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006700:	f043 0202 	orr.w	r2, r3, #2
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800670c:	f003 031f 	and.w	r3, r3, #31
 8006710:	2204      	movs	r2, #4
 8006712:	409a      	lsls	r2, r3
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	4013      	ands	r3, r2
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 808f 	beq.w	800683c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a2c      	ldr	r2, [pc, #176]	; (80067d4 <HAL_DMA_IRQHandler+0x3f8>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d04a      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a2a      	ldr	r2, [pc, #168]	; (80067d8 <HAL_DMA_IRQHandler+0x3fc>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d045      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a29      	ldr	r2, [pc, #164]	; (80067dc <HAL_DMA_IRQHandler+0x400>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d040      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a27      	ldr	r2, [pc, #156]	; (80067e0 <HAL_DMA_IRQHandler+0x404>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d03b      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a26      	ldr	r2, [pc, #152]	; (80067e4 <HAL_DMA_IRQHandler+0x408>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d036      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a24      	ldr	r2, [pc, #144]	; (80067e8 <HAL_DMA_IRQHandler+0x40c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d031      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a23      	ldr	r2, [pc, #140]	; (80067ec <HAL_DMA_IRQHandler+0x410>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d02c      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a21      	ldr	r2, [pc, #132]	; (80067f0 <HAL_DMA_IRQHandler+0x414>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d027      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a20      	ldr	r2, [pc, #128]	; (80067f4 <HAL_DMA_IRQHandler+0x418>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d022      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a1e      	ldr	r2, [pc, #120]	; (80067f8 <HAL_DMA_IRQHandler+0x41c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d01d      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a1d      	ldr	r2, [pc, #116]	; (80067fc <HAL_DMA_IRQHandler+0x420>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d018      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a1b      	ldr	r2, [pc, #108]	; (8006800 <HAL_DMA_IRQHandler+0x424>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d013      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a1a      	ldr	r2, [pc, #104]	; (8006804 <HAL_DMA_IRQHandler+0x428>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d00e      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a18      	ldr	r2, [pc, #96]	; (8006808 <HAL_DMA_IRQHandler+0x42c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d009      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a17      	ldr	r2, [pc, #92]	; (800680c <HAL_DMA_IRQHandler+0x430>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d004      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a15      	ldr	r2, [pc, #84]	; (8006810 <HAL_DMA_IRQHandler+0x434>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d12a      	bne.n	8006814 <HAL_DMA_IRQHandler+0x438>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	bf14      	ite	ne
 80067cc:	2301      	movne	r3, #1
 80067ce:	2300      	moveq	r3, #0
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	e023      	b.n	800681c <HAL_DMA_IRQHandler+0x440>
 80067d4:	40020010 	.word	0x40020010
 80067d8:	40020028 	.word	0x40020028
 80067dc:	40020040 	.word	0x40020040
 80067e0:	40020058 	.word	0x40020058
 80067e4:	40020070 	.word	0x40020070
 80067e8:	40020088 	.word	0x40020088
 80067ec:	400200a0 	.word	0x400200a0
 80067f0:	400200b8 	.word	0x400200b8
 80067f4:	40020410 	.word	0x40020410
 80067f8:	40020428 	.word	0x40020428
 80067fc:	40020440 	.word	0x40020440
 8006800:	40020458 	.word	0x40020458
 8006804:	40020470 	.word	0x40020470
 8006808:	40020488 	.word	0x40020488
 800680c:	400204a0 	.word	0x400204a0
 8006810:	400204b8 	.word	0x400204b8
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2300      	movs	r3, #0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00d      	beq.n	800683c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006824:	f003 031f 	and.w	r3, r3, #31
 8006828:	2204      	movs	r2, #4
 800682a:	409a      	lsls	r2, r3
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006834:	f043 0204 	orr.w	r2, r3, #4
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006840:	f003 031f 	and.w	r3, r3, #31
 8006844:	2210      	movs	r2, #16
 8006846:	409a      	lsls	r2, r3
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	4013      	ands	r3, r2
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 80a6 	beq.w	800699e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a85      	ldr	r2, [pc, #532]	; (8006a6c <HAL_DMA_IRQHandler+0x690>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d04a      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a83      	ldr	r2, [pc, #524]	; (8006a70 <HAL_DMA_IRQHandler+0x694>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d045      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a82      	ldr	r2, [pc, #520]	; (8006a74 <HAL_DMA_IRQHandler+0x698>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d040      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a80      	ldr	r2, [pc, #512]	; (8006a78 <HAL_DMA_IRQHandler+0x69c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d03b      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a7f      	ldr	r2, [pc, #508]	; (8006a7c <HAL_DMA_IRQHandler+0x6a0>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d036      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a7d      	ldr	r2, [pc, #500]	; (8006a80 <HAL_DMA_IRQHandler+0x6a4>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d031      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a7c      	ldr	r2, [pc, #496]	; (8006a84 <HAL_DMA_IRQHandler+0x6a8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d02c      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a7a      	ldr	r2, [pc, #488]	; (8006a88 <HAL_DMA_IRQHandler+0x6ac>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d027      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a79      	ldr	r2, [pc, #484]	; (8006a8c <HAL_DMA_IRQHandler+0x6b0>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d022      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a77      	ldr	r2, [pc, #476]	; (8006a90 <HAL_DMA_IRQHandler+0x6b4>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d01d      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a76      	ldr	r2, [pc, #472]	; (8006a94 <HAL_DMA_IRQHandler+0x6b8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d018      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a74      	ldr	r2, [pc, #464]	; (8006a98 <HAL_DMA_IRQHandler+0x6bc>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d013      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a73      	ldr	r2, [pc, #460]	; (8006a9c <HAL_DMA_IRQHandler+0x6c0>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d00e      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a71      	ldr	r2, [pc, #452]	; (8006aa0 <HAL_DMA_IRQHandler+0x6c4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d009      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a70      	ldr	r2, [pc, #448]	; (8006aa4 <HAL_DMA_IRQHandler+0x6c8>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d004      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a6e      	ldr	r2, [pc, #440]	; (8006aa8 <HAL_DMA_IRQHandler+0x6cc>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d10a      	bne.n	8006908 <HAL_DMA_IRQHandler+0x52c>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0308 	and.w	r3, r3, #8
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	bf14      	ite	ne
 8006900:	2301      	movne	r3, #1
 8006902:	2300      	moveq	r3, #0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	e009      	b.n	800691c <HAL_DMA_IRQHandler+0x540>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0304 	and.w	r3, r3, #4
 8006912:	2b00      	cmp	r3, #0
 8006914:	bf14      	ite	ne
 8006916:	2301      	movne	r3, #1
 8006918:	2300      	moveq	r3, #0
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d03e      	beq.n	800699e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006924:	f003 031f 	and.w	r3, r3, #31
 8006928:	2210      	movs	r2, #16
 800692a:	409a      	lsls	r2, r3
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d018      	beq.n	8006970 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d108      	bne.n	800695e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006950:	2b00      	cmp	r3, #0
 8006952:	d024      	beq.n	800699e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	4798      	blx	r3
 800695c:	e01f      	b.n	800699e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006962:	2b00      	cmp	r3, #0
 8006964:	d01b      	beq.n	800699e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	4798      	blx	r3
 800696e:	e016      	b.n	800699e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697a:	2b00      	cmp	r3, #0
 800697c:	d107      	bne.n	800698e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f022 0208 	bic.w	r2, r2, #8
 800698c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069a2:	f003 031f 	and.w	r3, r3, #31
 80069a6:	2220      	movs	r2, #32
 80069a8:	409a      	lsls	r2, r3
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	4013      	ands	r3, r2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 8110 	beq.w	8006bd4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a2c      	ldr	r2, [pc, #176]	; (8006a6c <HAL_DMA_IRQHandler+0x690>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d04a      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a2b      	ldr	r2, [pc, #172]	; (8006a70 <HAL_DMA_IRQHandler+0x694>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d045      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a29      	ldr	r2, [pc, #164]	; (8006a74 <HAL_DMA_IRQHandler+0x698>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d040      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a28      	ldr	r2, [pc, #160]	; (8006a78 <HAL_DMA_IRQHandler+0x69c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d03b      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a26      	ldr	r2, [pc, #152]	; (8006a7c <HAL_DMA_IRQHandler+0x6a0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d036      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a25      	ldr	r2, [pc, #148]	; (8006a80 <HAL_DMA_IRQHandler+0x6a4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d031      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a23      	ldr	r2, [pc, #140]	; (8006a84 <HAL_DMA_IRQHandler+0x6a8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d02c      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a22      	ldr	r2, [pc, #136]	; (8006a88 <HAL_DMA_IRQHandler+0x6ac>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d027      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a20      	ldr	r2, [pc, #128]	; (8006a8c <HAL_DMA_IRQHandler+0x6b0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d022      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a1f      	ldr	r2, [pc, #124]	; (8006a90 <HAL_DMA_IRQHandler+0x6b4>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d01d      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a1d      	ldr	r2, [pc, #116]	; (8006a94 <HAL_DMA_IRQHandler+0x6b8>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d018      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a1c      	ldr	r2, [pc, #112]	; (8006a98 <HAL_DMA_IRQHandler+0x6bc>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d013      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a1a      	ldr	r2, [pc, #104]	; (8006a9c <HAL_DMA_IRQHandler+0x6c0>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00e      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a19      	ldr	r2, [pc, #100]	; (8006aa0 <HAL_DMA_IRQHandler+0x6c4>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d009      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a17      	ldr	r2, [pc, #92]	; (8006aa4 <HAL_DMA_IRQHandler+0x6c8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d004      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a16      	ldr	r2, [pc, #88]	; (8006aa8 <HAL_DMA_IRQHandler+0x6cc>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d12b      	bne.n	8006aac <HAL_DMA_IRQHandler+0x6d0>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0310 	and.w	r3, r3, #16
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	bf14      	ite	ne
 8006a62:	2301      	movne	r3, #1
 8006a64:	2300      	moveq	r3, #0
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	e02a      	b.n	8006ac0 <HAL_DMA_IRQHandler+0x6e4>
 8006a6a:	bf00      	nop
 8006a6c:	40020010 	.word	0x40020010
 8006a70:	40020028 	.word	0x40020028
 8006a74:	40020040 	.word	0x40020040
 8006a78:	40020058 	.word	0x40020058
 8006a7c:	40020070 	.word	0x40020070
 8006a80:	40020088 	.word	0x40020088
 8006a84:	400200a0 	.word	0x400200a0
 8006a88:	400200b8 	.word	0x400200b8
 8006a8c:	40020410 	.word	0x40020410
 8006a90:	40020428 	.word	0x40020428
 8006a94:	40020440 	.word	0x40020440
 8006a98:	40020458 	.word	0x40020458
 8006a9c:	40020470 	.word	0x40020470
 8006aa0:	40020488 	.word	0x40020488
 8006aa4:	400204a0 	.word	0x400204a0
 8006aa8:	400204b8 	.word	0x400204b8
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	bf14      	ite	ne
 8006aba:	2301      	movne	r3, #1
 8006abc:	2300      	moveq	r3, #0
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 8087 	beq.w	8006bd4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2220      	movs	r2, #32
 8006ad0:	409a      	lsls	r2, r3
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	d139      	bne.n	8006b56 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 0216 	bic.w	r2, r2, #22
 8006af0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	695a      	ldr	r2, [r3, #20]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b00:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d103      	bne.n	8006b12 <HAL_DMA_IRQHandler+0x736>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d007      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 0208 	bic.w	r2, r2, #8
 8006b20:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b26:	f003 031f 	and.w	r3, r3, #31
 8006b2a:	223f      	movs	r2, #63	; 0x3f
 8006b2c:	409a      	lsls	r2, r3
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 834a 	beq.w	80071e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	4798      	blx	r3
          }
          return;
 8006b54:	e344      	b.n	80071e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d018      	beq.n	8006b96 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d108      	bne.n	8006b84 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d02c      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	4798      	blx	r3
 8006b82:	e027      	b.n	8006bd4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d023      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	4798      	blx	r3
 8006b94:	e01e      	b.n	8006bd4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10f      	bne.n	8006bc4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0210 	bic.w	r2, r2, #16
 8006bb2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 8306 	beq.w	80071ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 8088 	beq.w	8006cfc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2204      	movs	r2, #4
 8006bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a7a      	ldr	r2, [pc, #488]	; (8006de4 <HAL_DMA_IRQHandler+0xa08>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d04a      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a79      	ldr	r2, [pc, #484]	; (8006de8 <HAL_DMA_IRQHandler+0xa0c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d045      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a77      	ldr	r2, [pc, #476]	; (8006dec <HAL_DMA_IRQHandler+0xa10>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d040      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a76      	ldr	r2, [pc, #472]	; (8006df0 <HAL_DMA_IRQHandler+0xa14>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d03b      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a74      	ldr	r2, [pc, #464]	; (8006df4 <HAL_DMA_IRQHandler+0xa18>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d036      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a73      	ldr	r2, [pc, #460]	; (8006df8 <HAL_DMA_IRQHandler+0xa1c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d031      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a71      	ldr	r2, [pc, #452]	; (8006dfc <HAL_DMA_IRQHandler+0xa20>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d02c      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a70      	ldr	r2, [pc, #448]	; (8006e00 <HAL_DMA_IRQHandler+0xa24>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d027      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a6e      	ldr	r2, [pc, #440]	; (8006e04 <HAL_DMA_IRQHandler+0xa28>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d022      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a6d      	ldr	r2, [pc, #436]	; (8006e08 <HAL_DMA_IRQHandler+0xa2c>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d01d      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a6b      	ldr	r2, [pc, #428]	; (8006e0c <HAL_DMA_IRQHandler+0xa30>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d018      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a6a      	ldr	r2, [pc, #424]	; (8006e10 <HAL_DMA_IRQHandler+0xa34>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d013      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a68      	ldr	r2, [pc, #416]	; (8006e14 <HAL_DMA_IRQHandler+0xa38>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d00e      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a67      	ldr	r2, [pc, #412]	; (8006e18 <HAL_DMA_IRQHandler+0xa3c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d009      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a65      	ldr	r2, [pc, #404]	; (8006e1c <HAL_DMA_IRQHandler+0xa40>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d004      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a64      	ldr	r2, [pc, #400]	; (8006e20 <HAL_DMA_IRQHandler+0xa44>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d108      	bne.n	8006ca6 <HAL_DMA_IRQHandler+0x8ca>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 0201 	bic.w	r2, r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	e007      	b.n	8006cb6 <HAL_DMA_IRQHandler+0x8da>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 0201 	bic.w	r2, r2, #1
 8006cb4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d307      	bcc.n	8006cd2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1f2      	bne.n	8006cb6 <HAL_DMA_IRQHandler+0x8da>
 8006cd0:	e000      	b.n	8006cd4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006cd2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d004      	beq.n	8006cec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2203      	movs	r2, #3
 8006ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006cea:	e003      	b.n	8006cf4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 8272 	beq.w	80071ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4798      	blx	r3
 8006d0e:	e26c      	b.n	80071ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a43      	ldr	r2, [pc, #268]	; (8006e24 <HAL_DMA_IRQHandler+0xa48>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d022      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x984>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a42      	ldr	r2, [pc, #264]	; (8006e28 <HAL_DMA_IRQHandler+0xa4c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d01d      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x984>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a40      	ldr	r2, [pc, #256]	; (8006e2c <HAL_DMA_IRQHandler+0xa50>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d018      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x984>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a3f      	ldr	r2, [pc, #252]	; (8006e30 <HAL_DMA_IRQHandler+0xa54>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d013      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x984>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a3d      	ldr	r2, [pc, #244]	; (8006e34 <HAL_DMA_IRQHandler+0xa58>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d00e      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x984>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a3c      	ldr	r2, [pc, #240]	; (8006e38 <HAL_DMA_IRQHandler+0xa5c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d009      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x984>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a3a      	ldr	r2, [pc, #232]	; (8006e3c <HAL_DMA_IRQHandler+0xa60>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d004      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x984>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a39      	ldr	r2, [pc, #228]	; (8006e40 <HAL_DMA_IRQHandler+0xa64>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d101      	bne.n	8006d64 <HAL_DMA_IRQHandler+0x988>
 8006d60:	2301      	movs	r3, #1
 8006d62:	e000      	b.n	8006d66 <HAL_DMA_IRQHandler+0x98a>
 8006d64:	2300      	movs	r3, #0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 823f 	beq.w	80071ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d78:	f003 031f 	and.w	r3, r3, #31
 8006d7c:	2204      	movs	r2, #4
 8006d7e:	409a      	lsls	r2, r3
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	4013      	ands	r3, r2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 80cd 	beq.w	8006f24 <HAL_DMA_IRQHandler+0xb48>
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	f003 0304 	and.w	r3, r3, #4
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 80c7 	beq.w	8006f24 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d9a:	f003 031f 	and.w	r3, r3, #31
 8006d9e:	2204      	movs	r2, #4
 8006da0:	409a      	lsls	r2, r3
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d049      	beq.n	8006e44 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d109      	bne.n	8006dce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 8210 	beq.w	80071e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dcc:	e20a      	b.n	80071e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 8206 	beq.w	80071e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006de0:	e200      	b.n	80071e4 <HAL_DMA_IRQHandler+0xe08>
 8006de2:	bf00      	nop
 8006de4:	40020010 	.word	0x40020010
 8006de8:	40020028 	.word	0x40020028
 8006dec:	40020040 	.word	0x40020040
 8006df0:	40020058 	.word	0x40020058
 8006df4:	40020070 	.word	0x40020070
 8006df8:	40020088 	.word	0x40020088
 8006dfc:	400200a0 	.word	0x400200a0
 8006e00:	400200b8 	.word	0x400200b8
 8006e04:	40020410 	.word	0x40020410
 8006e08:	40020428 	.word	0x40020428
 8006e0c:	40020440 	.word	0x40020440
 8006e10:	40020458 	.word	0x40020458
 8006e14:	40020470 	.word	0x40020470
 8006e18:	40020488 	.word	0x40020488
 8006e1c:	400204a0 	.word	0x400204a0
 8006e20:	400204b8 	.word	0x400204b8
 8006e24:	58025408 	.word	0x58025408
 8006e28:	5802541c 	.word	0x5802541c
 8006e2c:	58025430 	.word	0x58025430
 8006e30:	58025444 	.word	0x58025444
 8006e34:	58025458 	.word	0x58025458
 8006e38:	5802546c 	.word	0x5802546c
 8006e3c:	58025480 	.word	0x58025480
 8006e40:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f003 0320 	and.w	r3, r3, #32
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d160      	bne.n	8006f10 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a7f      	ldr	r2, [pc, #508]	; (8007050 <HAL_DMA_IRQHandler+0xc74>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d04a      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a7d      	ldr	r2, [pc, #500]	; (8007054 <HAL_DMA_IRQHandler+0xc78>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d045      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a7c      	ldr	r2, [pc, #496]	; (8007058 <HAL_DMA_IRQHandler+0xc7c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d040      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a7a      	ldr	r2, [pc, #488]	; (800705c <HAL_DMA_IRQHandler+0xc80>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d03b      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a79      	ldr	r2, [pc, #484]	; (8007060 <HAL_DMA_IRQHandler+0xc84>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d036      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a77      	ldr	r2, [pc, #476]	; (8007064 <HAL_DMA_IRQHandler+0xc88>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d031      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a76      	ldr	r2, [pc, #472]	; (8007068 <HAL_DMA_IRQHandler+0xc8c>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d02c      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a74      	ldr	r2, [pc, #464]	; (800706c <HAL_DMA_IRQHandler+0xc90>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d027      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a73      	ldr	r2, [pc, #460]	; (8007070 <HAL_DMA_IRQHandler+0xc94>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d022      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a71      	ldr	r2, [pc, #452]	; (8007074 <HAL_DMA_IRQHandler+0xc98>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d01d      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a70      	ldr	r2, [pc, #448]	; (8007078 <HAL_DMA_IRQHandler+0xc9c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d018      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a6e      	ldr	r2, [pc, #440]	; (800707c <HAL_DMA_IRQHandler+0xca0>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d013      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a6d      	ldr	r2, [pc, #436]	; (8007080 <HAL_DMA_IRQHandler+0xca4>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d00e      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a6b      	ldr	r2, [pc, #428]	; (8007084 <HAL_DMA_IRQHandler+0xca8>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d009      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a6a      	ldr	r2, [pc, #424]	; (8007088 <HAL_DMA_IRQHandler+0xcac>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d004      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a68      	ldr	r2, [pc, #416]	; (800708c <HAL_DMA_IRQHandler+0xcb0>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d108      	bne.n	8006f00 <HAL_DMA_IRQHandler+0xb24>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0208 	bic.w	r2, r2, #8
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	e007      	b.n	8006f10 <HAL_DMA_IRQHandler+0xb34>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 0204 	bic.w	r2, r2, #4
 8006f0e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 8165 	beq.w	80071e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f22:	e15f      	b.n	80071e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f28:	f003 031f 	and.w	r3, r3, #31
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	409a      	lsls	r2, r3
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	4013      	ands	r3, r2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 80c5 	beq.w	80070c4 <HAL_DMA_IRQHandler+0xce8>
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	f003 0302 	and.w	r3, r3, #2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 80bf 	beq.w	80070c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	2202      	movs	r2, #2
 8006f50:	409a      	lsls	r2, r3
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d018      	beq.n	8006f92 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d109      	bne.n	8006f7e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 813a 	beq.w	80071e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f7c:	e134      	b.n	80071e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 8130 	beq.w	80071e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f90:	e12a      	b.n	80071e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	f003 0320 	and.w	r3, r3, #32
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f040 8089 	bne.w	80070b0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a2b      	ldr	r2, [pc, #172]	; (8007050 <HAL_DMA_IRQHandler+0xc74>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d04a      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a29      	ldr	r2, [pc, #164]	; (8007054 <HAL_DMA_IRQHandler+0xc78>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d045      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a28      	ldr	r2, [pc, #160]	; (8007058 <HAL_DMA_IRQHandler+0xc7c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d040      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a26      	ldr	r2, [pc, #152]	; (800705c <HAL_DMA_IRQHandler+0xc80>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d03b      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a25      	ldr	r2, [pc, #148]	; (8007060 <HAL_DMA_IRQHandler+0xc84>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d036      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a23      	ldr	r2, [pc, #140]	; (8007064 <HAL_DMA_IRQHandler+0xc88>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d031      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a22      	ldr	r2, [pc, #136]	; (8007068 <HAL_DMA_IRQHandler+0xc8c>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d02c      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a20      	ldr	r2, [pc, #128]	; (800706c <HAL_DMA_IRQHandler+0xc90>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d027      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a1f      	ldr	r2, [pc, #124]	; (8007070 <HAL_DMA_IRQHandler+0xc94>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d022      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a1d      	ldr	r2, [pc, #116]	; (8007074 <HAL_DMA_IRQHandler+0xc98>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d01d      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a1c      	ldr	r2, [pc, #112]	; (8007078 <HAL_DMA_IRQHandler+0xc9c>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d018      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a1a      	ldr	r2, [pc, #104]	; (800707c <HAL_DMA_IRQHandler+0xca0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d013      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a19      	ldr	r2, [pc, #100]	; (8007080 <HAL_DMA_IRQHandler+0xca4>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00e      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a17      	ldr	r2, [pc, #92]	; (8007084 <HAL_DMA_IRQHandler+0xca8>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d009      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a16      	ldr	r2, [pc, #88]	; (8007088 <HAL_DMA_IRQHandler+0xcac>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d004      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a14      	ldr	r2, [pc, #80]	; (800708c <HAL_DMA_IRQHandler+0xcb0>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d128      	bne.n	8007090 <HAL_DMA_IRQHandler+0xcb4>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 0214 	bic.w	r2, r2, #20
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	e027      	b.n	80070a0 <HAL_DMA_IRQHandler+0xcc4>
 8007050:	40020010 	.word	0x40020010
 8007054:	40020028 	.word	0x40020028
 8007058:	40020040 	.word	0x40020040
 800705c:	40020058 	.word	0x40020058
 8007060:	40020070 	.word	0x40020070
 8007064:	40020088 	.word	0x40020088
 8007068:	400200a0 	.word	0x400200a0
 800706c:	400200b8 	.word	0x400200b8
 8007070:	40020410 	.word	0x40020410
 8007074:	40020428 	.word	0x40020428
 8007078:	40020440 	.word	0x40020440
 800707c:	40020458 	.word	0x40020458
 8007080:	40020470 	.word	0x40020470
 8007084:	40020488 	.word	0x40020488
 8007088:	400204a0 	.word	0x400204a0
 800708c:	400204b8 	.word	0x400204b8
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f022 020a 	bic.w	r2, r2, #10
 800709e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 8097 	beq.w	80071e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070c2:	e091      	b.n	80071e8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c8:	f003 031f 	and.w	r3, r3, #31
 80070cc:	2208      	movs	r2, #8
 80070ce:	409a      	lsls	r2, r3
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	4013      	ands	r3, r2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 8088 	beq.w	80071ea <HAL_DMA_IRQHandler+0xe0e>
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	f003 0308 	and.w	r3, r3, #8
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f000 8082 	beq.w	80071ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a41      	ldr	r2, [pc, #260]	; (80071f0 <HAL_DMA_IRQHandler+0xe14>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d04a      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a3f      	ldr	r2, [pc, #252]	; (80071f4 <HAL_DMA_IRQHandler+0xe18>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d045      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a3e      	ldr	r2, [pc, #248]	; (80071f8 <HAL_DMA_IRQHandler+0xe1c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d040      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a3c      	ldr	r2, [pc, #240]	; (80071fc <HAL_DMA_IRQHandler+0xe20>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d03b      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a3b      	ldr	r2, [pc, #236]	; (8007200 <HAL_DMA_IRQHandler+0xe24>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d036      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a39      	ldr	r2, [pc, #228]	; (8007204 <HAL_DMA_IRQHandler+0xe28>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d031      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a38      	ldr	r2, [pc, #224]	; (8007208 <HAL_DMA_IRQHandler+0xe2c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d02c      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a36      	ldr	r2, [pc, #216]	; (800720c <HAL_DMA_IRQHandler+0xe30>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d027      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a35      	ldr	r2, [pc, #212]	; (8007210 <HAL_DMA_IRQHandler+0xe34>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d022      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a33      	ldr	r2, [pc, #204]	; (8007214 <HAL_DMA_IRQHandler+0xe38>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d01d      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a32      	ldr	r2, [pc, #200]	; (8007218 <HAL_DMA_IRQHandler+0xe3c>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d018      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a30      	ldr	r2, [pc, #192]	; (800721c <HAL_DMA_IRQHandler+0xe40>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d013      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a2f      	ldr	r2, [pc, #188]	; (8007220 <HAL_DMA_IRQHandler+0xe44>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d00e      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a2d      	ldr	r2, [pc, #180]	; (8007224 <HAL_DMA_IRQHandler+0xe48>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d009      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a2c      	ldr	r2, [pc, #176]	; (8007228 <HAL_DMA_IRQHandler+0xe4c>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d004      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a2a      	ldr	r2, [pc, #168]	; (800722c <HAL_DMA_IRQHandler+0xe50>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d108      	bne.n	8007198 <HAL_DMA_IRQHandler+0xdbc>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 021c 	bic.w	r2, r2, #28
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	e007      	b.n	80071a8 <HAL_DMA_IRQHandler+0xdcc>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 020e 	bic.w	r2, r2, #14
 80071a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ac:	f003 031f 	and.w	r3, r3, #31
 80071b0:	2201      	movs	r2, #1
 80071b2:	409a      	lsls	r2, r3
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d009      	beq.n	80071ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	4798      	blx	r3
 80071de:	e004      	b.n	80071ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 80071e0:	bf00      	nop
 80071e2:	e002      	b.n	80071ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071e4:	bf00      	nop
 80071e6:	e000      	b.n	80071ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80071ea:	3728      	adds	r7, #40	; 0x28
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	40020010 	.word	0x40020010
 80071f4:	40020028 	.word	0x40020028
 80071f8:	40020040 	.word	0x40020040
 80071fc:	40020058 	.word	0x40020058
 8007200:	40020070 	.word	0x40020070
 8007204:	40020088 	.word	0x40020088
 8007208:	400200a0 	.word	0x400200a0
 800720c:	400200b8 	.word	0x400200b8
 8007210:	40020410 	.word	0x40020410
 8007214:	40020428 	.word	0x40020428
 8007218:	40020440 	.word	0x40020440
 800721c:	40020458 	.word	0x40020458
 8007220:	40020470 	.word	0x40020470
 8007224:	40020488 	.word	0x40020488
 8007228:	400204a0 	.word	0x400204a0
 800722c:	400204b8 	.word	0x400204b8

08007230 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007230:	b480      	push	{r7}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007242:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007248:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a7f      	ldr	r2, [pc, #508]	; (800744c <DMA_SetConfig+0x21c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d072      	beq.n	800733a <DMA_SetConfig+0x10a>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a7d      	ldr	r2, [pc, #500]	; (8007450 <DMA_SetConfig+0x220>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d06d      	beq.n	800733a <DMA_SetConfig+0x10a>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a7c      	ldr	r2, [pc, #496]	; (8007454 <DMA_SetConfig+0x224>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d068      	beq.n	800733a <DMA_SetConfig+0x10a>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a7a      	ldr	r2, [pc, #488]	; (8007458 <DMA_SetConfig+0x228>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d063      	beq.n	800733a <DMA_SetConfig+0x10a>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a79      	ldr	r2, [pc, #484]	; (800745c <DMA_SetConfig+0x22c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d05e      	beq.n	800733a <DMA_SetConfig+0x10a>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a77      	ldr	r2, [pc, #476]	; (8007460 <DMA_SetConfig+0x230>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d059      	beq.n	800733a <DMA_SetConfig+0x10a>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a76      	ldr	r2, [pc, #472]	; (8007464 <DMA_SetConfig+0x234>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d054      	beq.n	800733a <DMA_SetConfig+0x10a>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a74      	ldr	r2, [pc, #464]	; (8007468 <DMA_SetConfig+0x238>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d04f      	beq.n	800733a <DMA_SetConfig+0x10a>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a73      	ldr	r2, [pc, #460]	; (800746c <DMA_SetConfig+0x23c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d04a      	beq.n	800733a <DMA_SetConfig+0x10a>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a71      	ldr	r2, [pc, #452]	; (8007470 <DMA_SetConfig+0x240>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d045      	beq.n	800733a <DMA_SetConfig+0x10a>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a70      	ldr	r2, [pc, #448]	; (8007474 <DMA_SetConfig+0x244>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d040      	beq.n	800733a <DMA_SetConfig+0x10a>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a6e      	ldr	r2, [pc, #440]	; (8007478 <DMA_SetConfig+0x248>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d03b      	beq.n	800733a <DMA_SetConfig+0x10a>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a6d      	ldr	r2, [pc, #436]	; (800747c <DMA_SetConfig+0x24c>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d036      	beq.n	800733a <DMA_SetConfig+0x10a>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a6b      	ldr	r2, [pc, #428]	; (8007480 <DMA_SetConfig+0x250>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d031      	beq.n	800733a <DMA_SetConfig+0x10a>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a6a      	ldr	r2, [pc, #424]	; (8007484 <DMA_SetConfig+0x254>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d02c      	beq.n	800733a <DMA_SetConfig+0x10a>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a68      	ldr	r2, [pc, #416]	; (8007488 <DMA_SetConfig+0x258>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d027      	beq.n	800733a <DMA_SetConfig+0x10a>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a67      	ldr	r2, [pc, #412]	; (800748c <DMA_SetConfig+0x25c>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d022      	beq.n	800733a <DMA_SetConfig+0x10a>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a65      	ldr	r2, [pc, #404]	; (8007490 <DMA_SetConfig+0x260>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d01d      	beq.n	800733a <DMA_SetConfig+0x10a>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a64      	ldr	r2, [pc, #400]	; (8007494 <DMA_SetConfig+0x264>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d018      	beq.n	800733a <DMA_SetConfig+0x10a>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a62      	ldr	r2, [pc, #392]	; (8007498 <DMA_SetConfig+0x268>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d013      	beq.n	800733a <DMA_SetConfig+0x10a>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a61      	ldr	r2, [pc, #388]	; (800749c <DMA_SetConfig+0x26c>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d00e      	beq.n	800733a <DMA_SetConfig+0x10a>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a5f      	ldr	r2, [pc, #380]	; (80074a0 <DMA_SetConfig+0x270>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d009      	beq.n	800733a <DMA_SetConfig+0x10a>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a5e      	ldr	r2, [pc, #376]	; (80074a4 <DMA_SetConfig+0x274>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d004      	beq.n	800733a <DMA_SetConfig+0x10a>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a5c      	ldr	r2, [pc, #368]	; (80074a8 <DMA_SetConfig+0x278>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d101      	bne.n	800733e <DMA_SetConfig+0x10e>
 800733a:	2301      	movs	r3, #1
 800733c:	e000      	b.n	8007340 <DMA_SetConfig+0x110>
 800733e:	2300      	movs	r3, #0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00d      	beq.n	8007360 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800734c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007352:	2b00      	cmp	r3, #0
 8007354:	d004      	beq.n	8007360 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800735e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a39      	ldr	r2, [pc, #228]	; (800744c <DMA_SetConfig+0x21c>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d04a      	beq.n	8007400 <DMA_SetConfig+0x1d0>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a38      	ldr	r2, [pc, #224]	; (8007450 <DMA_SetConfig+0x220>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d045      	beq.n	8007400 <DMA_SetConfig+0x1d0>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a36      	ldr	r2, [pc, #216]	; (8007454 <DMA_SetConfig+0x224>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d040      	beq.n	8007400 <DMA_SetConfig+0x1d0>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a35      	ldr	r2, [pc, #212]	; (8007458 <DMA_SetConfig+0x228>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d03b      	beq.n	8007400 <DMA_SetConfig+0x1d0>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a33      	ldr	r2, [pc, #204]	; (800745c <DMA_SetConfig+0x22c>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d036      	beq.n	8007400 <DMA_SetConfig+0x1d0>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a32      	ldr	r2, [pc, #200]	; (8007460 <DMA_SetConfig+0x230>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d031      	beq.n	8007400 <DMA_SetConfig+0x1d0>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a30      	ldr	r2, [pc, #192]	; (8007464 <DMA_SetConfig+0x234>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d02c      	beq.n	8007400 <DMA_SetConfig+0x1d0>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a2f      	ldr	r2, [pc, #188]	; (8007468 <DMA_SetConfig+0x238>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d027      	beq.n	8007400 <DMA_SetConfig+0x1d0>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a2d      	ldr	r2, [pc, #180]	; (800746c <DMA_SetConfig+0x23c>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d022      	beq.n	8007400 <DMA_SetConfig+0x1d0>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a2c      	ldr	r2, [pc, #176]	; (8007470 <DMA_SetConfig+0x240>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d01d      	beq.n	8007400 <DMA_SetConfig+0x1d0>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a2a      	ldr	r2, [pc, #168]	; (8007474 <DMA_SetConfig+0x244>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d018      	beq.n	8007400 <DMA_SetConfig+0x1d0>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a29      	ldr	r2, [pc, #164]	; (8007478 <DMA_SetConfig+0x248>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d013      	beq.n	8007400 <DMA_SetConfig+0x1d0>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a27      	ldr	r2, [pc, #156]	; (800747c <DMA_SetConfig+0x24c>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d00e      	beq.n	8007400 <DMA_SetConfig+0x1d0>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a26      	ldr	r2, [pc, #152]	; (8007480 <DMA_SetConfig+0x250>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d009      	beq.n	8007400 <DMA_SetConfig+0x1d0>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a24      	ldr	r2, [pc, #144]	; (8007484 <DMA_SetConfig+0x254>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d004      	beq.n	8007400 <DMA_SetConfig+0x1d0>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a23      	ldr	r2, [pc, #140]	; (8007488 <DMA_SetConfig+0x258>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d101      	bne.n	8007404 <DMA_SetConfig+0x1d4>
 8007400:	2301      	movs	r3, #1
 8007402:	e000      	b.n	8007406 <DMA_SetConfig+0x1d6>
 8007404:	2300      	movs	r3, #0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d059      	beq.n	80074be <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800740e:	f003 031f 	and.w	r3, r3, #31
 8007412:	223f      	movs	r2, #63	; 0x3f
 8007414:	409a      	lsls	r2, r3
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007428:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	2b40      	cmp	r3, #64	; 0x40
 8007438:	d138      	bne.n	80074ac <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800744a:	e086      	b.n	800755a <DMA_SetConfig+0x32a>
 800744c:	40020010 	.word	0x40020010
 8007450:	40020028 	.word	0x40020028
 8007454:	40020040 	.word	0x40020040
 8007458:	40020058 	.word	0x40020058
 800745c:	40020070 	.word	0x40020070
 8007460:	40020088 	.word	0x40020088
 8007464:	400200a0 	.word	0x400200a0
 8007468:	400200b8 	.word	0x400200b8
 800746c:	40020410 	.word	0x40020410
 8007470:	40020428 	.word	0x40020428
 8007474:	40020440 	.word	0x40020440
 8007478:	40020458 	.word	0x40020458
 800747c:	40020470 	.word	0x40020470
 8007480:	40020488 	.word	0x40020488
 8007484:	400204a0 	.word	0x400204a0
 8007488:	400204b8 	.word	0x400204b8
 800748c:	58025408 	.word	0x58025408
 8007490:	5802541c 	.word	0x5802541c
 8007494:	58025430 	.word	0x58025430
 8007498:	58025444 	.word	0x58025444
 800749c:	58025458 	.word	0x58025458
 80074a0:	5802546c 	.word	0x5802546c
 80074a4:	58025480 	.word	0x58025480
 80074a8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	60da      	str	r2, [r3, #12]
}
 80074bc:	e04d      	b.n	800755a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a29      	ldr	r2, [pc, #164]	; (8007568 <DMA_SetConfig+0x338>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d022      	beq.n	800750e <DMA_SetConfig+0x2de>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a27      	ldr	r2, [pc, #156]	; (800756c <DMA_SetConfig+0x33c>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d01d      	beq.n	800750e <DMA_SetConfig+0x2de>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a26      	ldr	r2, [pc, #152]	; (8007570 <DMA_SetConfig+0x340>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d018      	beq.n	800750e <DMA_SetConfig+0x2de>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a24      	ldr	r2, [pc, #144]	; (8007574 <DMA_SetConfig+0x344>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d013      	beq.n	800750e <DMA_SetConfig+0x2de>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a23      	ldr	r2, [pc, #140]	; (8007578 <DMA_SetConfig+0x348>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d00e      	beq.n	800750e <DMA_SetConfig+0x2de>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a21      	ldr	r2, [pc, #132]	; (800757c <DMA_SetConfig+0x34c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d009      	beq.n	800750e <DMA_SetConfig+0x2de>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a20      	ldr	r2, [pc, #128]	; (8007580 <DMA_SetConfig+0x350>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d004      	beq.n	800750e <DMA_SetConfig+0x2de>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a1e      	ldr	r2, [pc, #120]	; (8007584 <DMA_SetConfig+0x354>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d101      	bne.n	8007512 <DMA_SetConfig+0x2e2>
 800750e:	2301      	movs	r3, #1
 8007510:	e000      	b.n	8007514 <DMA_SetConfig+0x2e4>
 8007512:	2300      	movs	r3, #0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d020      	beq.n	800755a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800751c:	f003 031f 	and.w	r3, r3, #31
 8007520:	2201      	movs	r2, #1
 8007522:	409a      	lsls	r2, r3
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	2b40      	cmp	r3, #64	; 0x40
 8007536:	d108      	bne.n	800754a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	60da      	str	r2, [r3, #12]
}
 8007548:	e007      	b.n	800755a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	60da      	str	r2, [r3, #12]
}
 800755a:	bf00      	nop
 800755c:	371c      	adds	r7, #28
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	58025408 	.word	0x58025408
 800756c:	5802541c 	.word	0x5802541c
 8007570:	58025430 	.word	0x58025430
 8007574:	58025444 	.word	0x58025444
 8007578:	58025458 	.word	0x58025458
 800757c:	5802546c 	.word	0x5802546c
 8007580:	58025480 	.word	0x58025480
 8007584:	58025494 	.word	0x58025494

08007588 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a42      	ldr	r2, [pc, #264]	; (80076a0 <DMA_CalcBaseAndBitshift+0x118>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d04a      	beq.n	8007630 <DMA_CalcBaseAndBitshift+0xa8>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a41      	ldr	r2, [pc, #260]	; (80076a4 <DMA_CalcBaseAndBitshift+0x11c>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d045      	beq.n	8007630 <DMA_CalcBaseAndBitshift+0xa8>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a3f      	ldr	r2, [pc, #252]	; (80076a8 <DMA_CalcBaseAndBitshift+0x120>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d040      	beq.n	8007630 <DMA_CalcBaseAndBitshift+0xa8>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a3e      	ldr	r2, [pc, #248]	; (80076ac <DMA_CalcBaseAndBitshift+0x124>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d03b      	beq.n	8007630 <DMA_CalcBaseAndBitshift+0xa8>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a3c      	ldr	r2, [pc, #240]	; (80076b0 <DMA_CalcBaseAndBitshift+0x128>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d036      	beq.n	8007630 <DMA_CalcBaseAndBitshift+0xa8>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a3b      	ldr	r2, [pc, #236]	; (80076b4 <DMA_CalcBaseAndBitshift+0x12c>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d031      	beq.n	8007630 <DMA_CalcBaseAndBitshift+0xa8>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a39      	ldr	r2, [pc, #228]	; (80076b8 <DMA_CalcBaseAndBitshift+0x130>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d02c      	beq.n	8007630 <DMA_CalcBaseAndBitshift+0xa8>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a38      	ldr	r2, [pc, #224]	; (80076bc <DMA_CalcBaseAndBitshift+0x134>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d027      	beq.n	8007630 <DMA_CalcBaseAndBitshift+0xa8>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a36      	ldr	r2, [pc, #216]	; (80076c0 <DMA_CalcBaseAndBitshift+0x138>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d022      	beq.n	8007630 <DMA_CalcBaseAndBitshift+0xa8>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a35      	ldr	r2, [pc, #212]	; (80076c4 <DMA_CalcBaseAndBitshift+0x13c>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d01d      	beq.n	8007630 <DMA_CalcBaseAndBitshift+0xa8>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a33      	ldr	r2, [pc, #204]	; (80076c8 <DMA_CalcBaseAndBitshift+0x140>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d018      	beq.n	8007630 <DMA_CalcBaseAndBitshift+0xa8>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a32      	ldr	r2, [pc, #200]	; (80076cc <DMA_CalcBaseAndBitshift+0x144>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d013      	beq.n	8007630 <DMA_CalcBaseAndBitshift+0xa8>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a30      	ldr	r2, [pc, #192]	; (80076d0 <DMA_CalcBaseAndBitshift+0x148>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d00e      	beq.n	8007630 <DMA_CalcBaseAndBitshift+0xa8>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a2f      	ldr	r2, [pc, #188]	; (80076d4 <DMA_CalcBaseAndBitshift+0x14c>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d009      	beq.n	8007630 <DMA_CalcBaseAndBitshift+0xa8>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a2d      	ldr	r2, [pc, #180]	; (80076d8 <DMA_CalcBaseAndBitshift+0x150>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d004      	beq.n	8007630 <DMA_CalcBaseAndBitshift+0xa8>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a2c      	ldr	r2, [pc, #176]	; (80076dc <DMA_CalcBaseAndBitshift+0x154>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d101      	bne.n	8007634 <DMA_CalcBaseAndBitshift+0xac>
 8007630:	2301      	movs	r3, #1
 8007632:	e000      	b.n	8007636 <DMA_CalcBaseAndBitshift+0xae>
 8007634:	2300      	movs	r3, #0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d024      	beq.n	8007684 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	b2db      	uxtb	r3, r3
 8007640:	3b10      	subs	r3, #16
 8007642:	4a27      	ldr	r2, [pc, #156]	; (80076e0 <DMA_CalcBaseAndBitshift+0x158>)
 8007644:	fba2 2303 	umull	r2, r3, r2, r3
 8007648:	091b      	lsrs	r3, r3, #4
 800764a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f003 0307 	and.w	r3, r3, #7
 8007652:	4a24      	ldr	r2, [pc, #144]	; (80076e4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007654:	5cd3      	ldrb	r3, [r2, r3]
 8007656:	461a      	mov	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2b03      	cmp	r3, #3
 8007660:	d908      	bls.n	8007674 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	461a      	mov	r2, r3
 8007668:	4b1f      	ldr	r3, [pc, #124]	; (80076e8 <DMA_CalcBaseAndBitshift+0x160>)
 800766a:	4013      	ands	r3, r2
 800766c:	1d1a      	adds	r2, r3, #4
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	659a      	str	r2, [r3, #88]	; 0x58
 8007672:	e00d      	b.n	8007690 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	461a      	mov	r2, r3
 800767a:	4b1b      	ldr	r3, [pc, #108]	; (80076e8 <DMA_CalcBaseAndBitshift+0x160>)
 800767c:	4013      	ands	r3, r2
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	6593      	str	r3, [r2, #88]	; 0x58
 8007682:	e005      	b.n	8007690 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007694:	4618      	mov	r0, r3
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	40020010 	.word	0x40020010
 80076a4:	40020028 	.word	0x40020028
 80076a8:	40020040 	.word	0x40020040
 80076ac:	40020058 	.word	0x40020058
 80076b0:	40020070 	.word	0x40020070
 80076b4:	40020088 	.word	0x40020088
 80076b8:	400200a0 	.word	0x400200a0
 80076bc:	400200b8 	.word	0x400200b8
 80076c0:	40020410 	.word	0x40020410
 80076c4:	40020428 	.word	0x40020428
 80076c8:	40020440 	.word	0x40020440
 80076cc:	40020458 	.word	0x40020458
 80076d0:	40020470 	.word	0x40020470
 80076d4:	40020488 	.word	0x40020488
 80076d8:	400204a0 	.word	0x400204a0
 80076dc:	400204b8 	.word	0x400204b8
 80076e0:	aaaaaaab 	.word	0xaaaaaaab
 80076e4:	0800e1d4 	.word	0x0800e1d4
 80076e8:	fffffc00 	.word	0xfffffc00

080076ec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d120      	bne.n	8007742 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007704:	2b03      	cmp	r3, #3
 8007706:	d858      	bhi.n	80077ba <DMA_CheckFifoParam+0xce>
 8007708:	a201      	add	r2, pc, #4	; (adr r2, 8007710 <DMA_CheckFifoParam+0x24>)
 800770a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770e:	bf00      	nop
 8007710:	08007721 	.word	0x08007721
 8007714:	08007733 	.word	0x08007733
 8007718:	08007721 	.word	0x08007721
 800771c:	080077bb 	.word	0x080077bb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d048      	beq.n	80077be <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007730:	e045      	b.n	80077be <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007736:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800773a:	d142      	bne.n	80077c2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007740:	e03f      	b.n	80077c2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800774a:	d123      	bne.n	8007794 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007750:	2b03      	cmp	r3, #3
 8007752:	d838      	bhi.n	80077c6 <DMA_CheckFifoParam+0xda>
 8007754:	a201      	add	r2, pc, #4	; (adr r2, 800775c <DMA_CheckFifoParam+0x70>)
 8007756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775a:	bf00      	nop
 800775c:	0800776d 	.word	0x0800776d
 8007760:	08007773 	.word	0x08007773
 8007764:	0800776d 	.word	0x0800776d
 8007768:	08007785 	.word	0x08007785
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	73fb      	strb	r3, [r7, #15]
        break;
 8007770:	e030      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007776:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d025      	beq.n	80077ca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007782:	e022      	b.n	80077ca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007788:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800778c:	d11f      	bne.n	80077ce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007792:	e01c      	b.n	80077ce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007798:	2b02      	cmp	r3, #2
 800779a:	d902      	bls.n	80077a2 <DMA_CheckFifoParam+0xb6>
 800779c:	2b03      	cmp	r3, #3
 800779e:	d003      	beq.n	80077a8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80077a0:	e018      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	73fb      	strb	r3, [r7, #15]
        break;
 80077a6:	e015      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00e      	beq.n	80077d2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	73fb      	strb	r3, [r7, #15]
    break;
 80077b8:	e00b      	b.n	80077d2 <DMA_CheckFifoParam+0xe6>
        break;
 80077ba:	bf00      	nop
 80077bc:	e00a      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
        break;
 80077be:	bf00      	nop
 80077c0:	e008      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
        break;
 80077c2:	bf00      	nop
 80077c4:	e006      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
        break;
 80077c6:	bf00      	nop
 80077c8:	e004      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
        break;
 80077ca:	bf00      	nop
 80077cc:	e002      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
        break;
 80077ce:	bf00      	nop
 80077d0:	e000      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
    break;
 80077d2:	bf00      	nop
    }
  }

  return status;
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop

080077e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a38      	ldr	r2, [pc, #224]	; (80078d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d022      	beq.n	8007842 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a36      	ldr	r2, [pc, #216]	; (80078dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d01d      	beq.n	8007842 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a35      	ldr	r2, [pc, #212]	; (80078e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d018      	beq.n	8007842 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a33      	ldr	r2, [pc, #204]	; (80078e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d013      	beq.n	8007842 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a32      	ldr	r2, [pc, #200]	; (80078e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d00e      	beq.n	8007842 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a30      	ldr	r2, [pc, #192]	; (80078ec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d009      	beq.n	8007842 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a2f      	ldr	r2, [pc, #188]	; (80078f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d004      	beq.n	8007842 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a2d      	ldr	r2, [pc, #180]	; (80078f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d101      	bne.n	8007846 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007842:	2301      	movs	r3, #1
 8007844:	e000      	b.n	8007848 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007846:	2300      	movs	r3, #0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d01a      	beq.n	8007882 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	b2db      	uxtb	r3, r3
 8007852:	3b08      	subs	r3, #8
 8007854:	4a28      	ldr	r2, [pc, #160]	; (80078f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007856:	fba2 2303 	umull	r2, r3, r2, r3
 800785a:	091b      	lsrs	r3, r3, #4
 800785c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	4b26      	ldr	r3, [pc, #152]	; (80078fc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007862:	4413      	add	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	461a      	mov	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a24      	ldr	r2, [pc, #144]	; (8007900 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007870:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f003 031f 	and.w	r3, r3, #31
 8007878:	2201      	movs	r2, #1
 800787a:	409a      	lsls	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007880:	e024      	b.n	80078cc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	b2db      	uxtb	r3, r3
 8007888:	3b10      	subs	r3, #16
 800788a:	4a1e      	ldr	r2, [pc, #120]	; (8007904 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800788c:	fba2 2303 	umull	r2, r3, r2, r3
 8007890:	091b      	lsrs	r3, r3, #4
 8007892:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	4a1c      	ldr	r2, [pc, #112]	; (8007908 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d806      	bhi.n	80078aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	4a1b      	ldr	r2, [pc, #108]	; (800790c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d902      	bls.n	80078aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	3308      	adds	r3, #8
 80078a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	4b18      	ldr	r3, [pc, #96]	; (8007910 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80078ae:	4413      	add	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	461a      	mov	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a16      	ldr	r2, [pc, #88]	; (8007914 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80078bc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f003 031f 	and.w	r3, r3, #31
 80078c4:	2201      	movs	r2, #1
 80078c6:	409a      	lsls	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	669a      	str	r2, [r3, #104]	; 0x68
}
 80078cc:	bf00      	nop
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	58025408 	.word	0x58025408
 80078dc:	5802541c 	.word	0x5802541c
 80078e0:	58025430 	.word	0x58025430
 80078e4:	58025444 	.word	0x58025444
 80078e8:	58025458 	.word	0x58025458
 80078ec:	5802546c 	.word	0x5802546c
 80078f0:	58025480 	.word	0x58025480
 80078f4:	58025494 	.word	0x58025494
 80078f8:	cccccccd 	.word	0xcccccccd
 80078fc:	16009600 	.word	0x16009600
 8007900:	58025880 	.word	0x58025880
 8007904:	aaaaaaab 	.word	0xaaaaaaab
 8007908:	400204b8 	.word	0x400204b8
 800790c:	4002040f 	.word	0x4002040f
 8007910:	10008200 	.word	0x10008200
 8007914:	40020880 	.word	0x40020880

08007918 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	b2db      	uxtb	r3, r3
 8007926:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d04a      	beq.n	80079c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2b08      	cmp	r3, #8
 8007932:	d847      	bhi.n	80079c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a25      	ldr	r2, [pc, #148]	; (80079d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d022      	beq.n	8007984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a24      	ldr	r2, [pc, #144]	; (80079d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d01d      	beq.n	8007984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a22      	ldr	r2, [pc, #136]	; (80079d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d018      	beq.n	8007984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a21      	ldr	r2, [pc, #132]	; (80079dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d013      	beq.n	8007984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a1f      	ldr	r2, [pc, #124]	; (80079e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d00e      	beq.n	8007984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a1e      	ldr	r2, [pc, #120]	; (80079e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d009      	beq.n	8007984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a1c      	ldr	r2, [pc, #112]	; (80079e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d004      	beq.n	8007984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a1b      	ldr	r2, [pc, #108]	; (80079ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d101      	bne.n	8007988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007984:	2301      	movs	r3, #1
 8007986:	e000      	b.n	800798a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007988:	2300      	movs	r3, #0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00a      	beq.n	80079a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	4b17      	ldr	r3, [pc, #92]	; (80079f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007992:	4413      	add	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	461a      	mov	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a15      	ldr	r2, [pc, #84]	; (80079f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80079a0:	671a      	str	r2, [r3, #112]	; 0x70
 80079a2:	e009      	b.n	80079b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	4b14      	ldr	r3, [pc, #80]	; (80079f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80079a8:	4413      	add	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	461a      	mov	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a11      	ldr	r2, [pc, #68]	; (80079fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80079b6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	2201      	movs	r2, #1
 80079be:	409a      	lsls	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80079c4:	bf00      	nop
 80079c6:	3714      	adds	r7, #20
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr
 80079d0:	58025408 	.word	0x58025408
 80079d4:	5802541c 	.word	0x5802541c
 80079d8:	58025430 	.word	0x58025430
 80079dc:	58025444 	.word	0x58025444
 80079e0:	58025458 	.word	0x58025458
 80079e4:	5802546c 	.word	0x5802546c
 80079e8:	58025480 	.word	0x58025480
 80079ec:	58025494 	.word	0x58025494
 80079f0:	1600963f 	.word	0x1600963f
 80079f4:	58025940 	.word	0x58025940
 80079f8:	1000823f 	.word	0x1000823f
 80079fc:	40020940 	.word	0x40020940

08007a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b089      	sub	sp, #36	; 0x24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007a0e:	4b86      	ldr	r3, [pc, #536]	; (8007c28 <HAL_GPIO_Init+0x228>)
 8007a10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a12:	e18c      	b.n	8007d2e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	2101      	movs	r1, #1
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a20:	4013      	ands	r3, r2
 8007a22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f000 817e 	beq.w	8007d28 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	f003 0303 	and.w	r3, r3, #3
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d005      	beq.n	8007a44 <HAL_GPIO_Init+0x44>
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f003 0303 	and.w	r3, r3, #3
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d130      	bne.n	8007aa6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	2203      	movs	r2, #3
 8007a50:	fa02 f303 	lsl.w	r3, r2, r3
 8007a54:	43db      	mvns	r3, r3
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	4013      	ands	r3, r2
 8007a5a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	68da      	ldr	r2, [r3, #12]
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	fa02 f303 	lsl.w	r3, r2, r3
 8007a68:	69ba      	ldr	r2, [r7, #24]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a82:	43db      	mvns	r3, r3
 8007a84:	69ba      	ldr	r2, [r7, #24]
 8007a86:	4013      	ands	r3, r2
 8007a88:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	091b      	lsrs	r3, r3, #4
 8007a90:	f003 0201 	and.w	r2, r3, #1
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9a:	69ba      	ldr	r2, [r7, #24]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	69ba      	ldr	r2, [r7, #24]
 8007aa4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	f003 0303 	and.w	r3, r3, #3
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d017      	beq.n	8007ae2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	2203      	movs	r2, #3
 8007abe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac2:	43db      	mvns	r3, r3
 8007ac4:	69ba      	ldr	r2, [r7, #24]
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	689a      	ldr	r2, [r3, #8]
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	69ba      	ldr	r2, [r7, #24]
 8007ae0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f003 0303 	and.w	r3, r3, #3
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d123      	bne.n	8007b36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	08da      	lsrs	r2, r3, #3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	3208      	adds	r2, #8
 8007af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	f003 0307 	and.w	r3, r3, #7
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	220f      	movs	r2, #15
 8007b06:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0a:	43db      	mvns	r3, r3
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	4013      	ands	r3, r2
 8007b10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	691a      	ldr	r2, [r3, #16]
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	f003 0307 	and.w	r3, r3, #7
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b22:	69ba      	ldr	r2, [r7, #24]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	08da      	lsrs	r2, r3, #3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	3208      	adds	r2, #8
 8007b30:	69b9      	ldr	r1, [r7, #24]
 8007b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	005b      	lsls	r3, r3, #1
 8007b40:	2203      	movs	r2, #3
 8007b42:	fa02 f303 	lsl.w	r3, r2, r3
 8007b46:	43db      	mvns	r3, r3
 8007b48:	69ba      	ldr	r2, [r7, #24]
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	f003 0203 	and.w	r2, r3, #3
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	005b      	lsls	r3, r3, #1
 8007b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5e:	69ba      	ldr	r2, [r7, #24]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	69ba      	ldr	r2, [r7, #24]
 8007b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 80d8 	beq.w	8007d28 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b78:	4b2c      	ldr	r3, [pc, #176]	; (8007c2c <HAL_GPIO_Init+0x22c>)
 8007b7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b7e:	4a2b      	ldr	r2, [pc, #172]	; (8007c2c <HAL_GPIO_Init+0x22c>)
 8007b80:	f043 0302 	orr.w	r3, r3, #2
 8007b84:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007b88:	4b28      	ldr	r3, [pc, #160]	; (8007c2c <HAL_GPIO_Init+0x22c>)
 8007b8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	60fb      	str	r3, [r7, #12]
 8007b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b96:	4a26      	ldr	r2, [pc, #152]	; (8007c30 <HAL_GPIO_Init+0x230>)
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	089b      	lsrs	r3, r3, #2
 8007b9c:	3302      	adds	r3, #2
 8007b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	f003 0303 	and.w	r3, r3, #3
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	220f      	movs	r2, #15
 8007bae:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb2:	43db      	mvns	r3, r3
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a1d      	ldr	r2, [pc, #116]	; (8007c34 <HAL_GPIO_Init+0x234>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d04a      	beq.n	8007c58 <HAL_GPIO_Init+0x258>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a1c      	ldr	r2, [pc, #112]	; (8007c38 <HAL_GPIO_Init+0x238>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d02b      	beq.n	8007c22 <HAL_GPIO_Init+0x222>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a1b      	ldr	r2, [pc, #108]	; (8007c3c <HAL_GPIO_Init+0x23c>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d025      	beq.n	8007c1e <HAL_GPIO_Init+0x21e>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a1a      	ldr	r2, [pc, #104]	; (8007c40 <HAL_GPIO_Init+0x240>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d01f      	beq.n	8007c1a <HAL_GPIO_Init+0x21a>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a19      	ldr	r2, [pc, #100]	; (8007c44 <HAL_GPIO_Init+0x244>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d019      	beq.n	8007c16 <HAL_GPIO_Init+0x216>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a18      	ldr	r2, [pc, #96]	; (8007c48 <HAL_GPIO_Init+0x248>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d013      	beq.n	8007c12 <HAL_GPIO_Init+0x212>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a17      	ldr	r2, [pc, #92]	; (8007c4c <HAL_GPIO_Init+0x24c>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d00d      	beq.n	8007c0e <HAL_GPIO_Init+0x20e>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a16      	ldr	r2, [pc, #88]	; (8007c50 <HAL_GPIO_Init+0x250>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d007      	beq.n	8007c0a <HAL_GPIO_Init+0x20a>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a15      	ldr	r2, [pc, #84]	; (8007c54 <HAL_GPIO_Init+0x254>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d101      	bne.n	8007c06 <HAL_GPIO_Init+0x206>
 8007c02:	2309      	movs	r3, #9
 8007c04:	e029      	b.n	8007c5a <HAL_GPIO_Init+0x25a>
 8007c06:	230a      	movs	r3, #10
 8007c08:	e027      	b.n	8007c5a <HAL_GPIO_Init+0x25a>
 8007c0a:	2307      	movs	r3, #7
 8007c0c:	e025      	b.n	8007c5a <HAL_GPIO_Init+0x25a>
 8007c0e:	2306      	movs	r3, #6
 8007c10:	e023      	b.n	8007c5a <HAL_GPIO_Init+0x25a>
 8007c12:	2305      	movs	r3, #5
 8007c14:	e021      	b.n	8007c5a <HAL_GPIO_Init+0x25a>
 8007c16:	2304      	movs	r3, #4
 8007c18:	e01f      	b.n	8007c5a <HAL_GPIO_Init+0x25a>
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e01d      	b.n	8007c5a <HAL_GPIO_Init+0x25a>
 8007c1e:	2302      	movs	r3, #2
 8007c20:	e01b      	b.n	8007c5a <HAL_GPIO_Init+0x25a>
 8007c22:	2301      	movs	r3, #1
 8007c24:	e019      	b.n	8007c5a <HAL_GPIO_Init+0x25a>
 8007c26:	bf00      	nop
 8007c28:	58000080 	.word	0x58000080
 8007c2c:	58024400 	.word	0x58024400
 8007c30:	58000400 	.word	0x58000400
 8007c34:	58020000 	.word	0x58020000
 8007c38:	58020400 	.word	0x58020400
 8007c3c:	58020800 	.word	0x58020800
 8007c40:	58020c00 	.word	0x58020c00
 8007c44:	58021000 	.word	0x58021000
 8007c48:	58021400 	.word	0x58021400
 8007c4c:	58021800 	.word	0x58021800
 8007c50:	58021c00 	.word	0x58021c00
 8007c54:	58022400 	.word	0x58022400
 8007c58:	2300      	movs	r3, #0
 8007c5a:	69fa      	ldr	r2, [r7, #28]
 8007c5c:	f002 0203 	and.w	r2, r2, #3
 8007c60:	0092      	lsls	r2, r2, #2
 8007c62:	4093      	lsls	r3, r2
 8007c64:	69ba      	ldr	r2, [r7, #24]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c6a:	4938      	ldr	r1, [pc, #224]	; (8007d4c <HAL_GPIO_Init+0x34c>)
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	089b      	lsrs	r3, r3, #2
 8007c70:	3302      	adds	r3, #2
 8007c72:	69ba      	ldr	r2, [r7, #24]
 8007c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	43db      	mvns	r3, r3
 8007c84:	69ba      	ldr	r2, [r7, #24]
 8007c86:	4013      	ands	r3, r2
 8007c88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d003      	beq.n	8007c9e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	43db      	mvns	r3, r3
 8007cb2:	69ba      	ldr	r2, [r7, #24]
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d003      	beq.n	8007ccc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007cc4:	69ba      	ldr	r2, [r7, #24]
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	43db      	mvns	r3, r3
 8007cde:	69ba      	ldr	r2, [r7, #24]
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d003      	beq.n	8007cf8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	43db      	mvns	r3, r3
 8007d08:	69ba      	ldr	r2, [r7, #24]
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d003      	beq.n	8007d22 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007d1a:	69ba      	ldr	r2, [r7, #24]
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	fa22 f303 	lsr.w	r3, r2, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f47f ae6b 	bne.w	8007a14 <HAL_GPIO_Init+0x14>
  }
}
 8007d3e:	bf00      	nop
 8007d40:	bf00      	nop
 8007d42:	3724      	adds	r7, #36	; 0x24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	58000400 	.word	0x58000400

08007d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	807b      	strh	r3, [r7, #2]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d60:	787b      	ldrb	r3, [r7, #1]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d003      	beq.n	8007d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d66:	887a      	ldrh	r2, [r7, #2]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007d6c:	e003      	b.n	8007d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007d6e:	887b      	ldrh	r3, [r7, #2]
 8007d70:	041a      	lsls	r2, r3, #16
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	619a      	str	r2, [r3, #24]
}
 8007d76:	bf00      	nop
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
	...

08007d84 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007d8c:	4b19      	ldr	r3, [pc, #100]	; (8007df4 <HAL_PWREx_ConfigSupply+0x70>)
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	f003 0304 	and.w	r3, r3, #4
 8007d94:	2b04      	cmp	r3, #4
 8007d96:	d00a      	beq.n	8007dae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007d98:	4b16      	ldr	r3, [pc, #88]	; (8007df4 <HAL_PWREx_ConfigSupply+0x70>)
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	f003 0307 	and.w	r3, r3, #7
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d001      	beq.n	8007daa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e01f      	b.n	8007dea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	e01d      	b.n	8007dea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007dae:	4b11      	ldr	r3, [pc, #68]	; (8007df4 <HAL_PWREx_ConfigSupply+0x70>)
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f023 0207 	bic.w	r2, r3, #7
 8007db6:	490f      	ldr	r1, [pc, #60]	; (8007df4 <HAL_PWREx_ConfigSupply+0x70>)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007dbe:	f7fc fec9 	bl	8004b54 <HAL_GetTick>
 8007dc2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007dc4:	e009      	b.n	8007dda <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007dc6:	f7fc fec5 	bl	8004b54 <HAL_GetTick>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dd4:	d901      	bls.n	8007dda <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e007      	b.n	8007dea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007dda:	4b06      	ldr	r3, [pc, #24]	; (8007df4 <HAL_PWREx_ConfigSupply+0x70>)
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007de6:	d1ee      	bne.n	8007dc6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	58024800 	.word	0x58024800

08007df8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b08c      	sub	sp, #48	; 0x30
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e39d      	b.n	8008546 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 8087 	beq.w	8007f26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e18:	4b88      	ldr	r3, [pc, #544]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e22:	4b86      	ldr	r3, [pc, #536]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e26:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2a:	2b10      	cmp	r3, #16
 8007e2c:	d007      	beq.n	8007e3e <HAL_RCC_OscConfig+0x46>
 8007e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e30:	2b18      	cmp	r3, #24
 8007e32:	d110      	bne.n	8007e56 <HAL_RCC_OscConfig+0x5e>
 8007e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e36:	f003 0303 	and.w	r3, r3, #3
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d10b      	bne.n	8007e56 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e3e:	4b7f      	ldr	r3, [pc, #508]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d06c      	beq.n	8007f24 <HAL_RCC_OscConfig+0x12c>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d168      	bne.n	8007f24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e377      	b.n	8008546 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e5e:	d106      	bne.n	8007e6e <HAL_RCC_OscConfig+0x76>
 8007e60:	4b76      	ldr	r3, [pc, #472]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a75      	ldr	r2, [pc, #468]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e6a:	6013      	str	r3, [r2, #0]
 8007e6c:	e02e      	b.n	8007ecc <HAL_RCC_OscConfig+0xd4>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10c      	bne.n	8007e90 <HAL_RCC_OscConfig+0x98>
 8007e76:	4b71      	ldr	r3, [pc, #452]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a70      	ldr	r2, [pc, #448]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e80:	6013      	str	r3, [r2, #0]
 8007e82:	4b6e      	ldr	r3, [pc, #440]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a6d      	ldr	r2, [pc, #436]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007e88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e8c:	6013      	str	r3, [r2, #0]
 8007e8e:	e01d      	b.n	8007ecc <HAL_RCC_OscConfig+0xd4>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e98:	d10c      	bne.n	8007eb4 <HAL_RCC_OscConfig+0xbc>
 8007e9a:	4b68      	ldr	r3, [pc, #416]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a67      	ldr	r2, [pc, #412]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ea4:	6013      	str	r3, [r2, #0]
 8007ea6:	4b65      	ldr	r3, [pc, #404]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a64      	ldr	r2, [pc, #400]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eb0:	6013      	str	r3, [r2, #0]
 8007eb2:	e00b      	b.n	8007ecc <HAL_RCC_OscConfig+0xd4>
 8007eb4:	4b61      	ldr	r3, [pc, #388]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a60      	ldr	r2, [pc, #384]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ebe:	6013      	str	r3, [r2, #0]
 8007ec0:	4b5e      	ldr	r3, [pc, #376]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a5d      	ldr	r2, [pc, #372]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d013      	beq.n	8007efc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed4:	f7fc fe3e 	bl	8004b54 <HAL_GetTick>
 8007ed8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007eda:	e008      	b.n	8007eee <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007edc:	f7fc fe3a 	bl	8004b54 <HAL_GetTick>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	2b64      	cmp	r3, #100	; 0x64
 8007ee8:	d901      	bls.n	8007eee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e32b      	b.n	8008546 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007eee:	4b53      	ldr	r3, [pc, #332]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d0f0      	beq.n	8007edc <HAL_RCC_OscConfig+0xe4>
 8007efa:	e014      	b.n	8007f26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007efc:	f7fc fe2a 	bl	8004b54 <HAL_GetTick>
 8007f00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f02:	e008      	b.n	8007f16 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f04:	f7fc fe26 	bl	8004b54 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	2b64      	cmp	r3, #100	; 0x64
 8007f10:	d901      	bls.n	8007f16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e317      	b.n	8008546 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f16:	4b49      	ldr	r3, [pc, #292]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1f0      	bne.n	8007f04 <HAL_RCC_OscConfig+0x10c>
 8007f22:	e000      	b.n	8007f26 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 0302 	and.w	r3, r3, #2
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f000 808c 	beq.w	800804c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f34:	4b41      	ldr	r3, [pc, #260]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f3c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f3e:	4b3f      	ldr	r3, [pc, #252]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f42:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d007      	beq.n	8007f5a <HAL_RCC_OscConfig+0x162>
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	2b18      	cmp	r3, #24
 8007f4e:	d137      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x1c8>
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	f003 0303 	and.w	r3, r3, #3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d132      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f5a:	4b38      	ldr	r3, [pc, #224]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 0304 	and.w	r3, r3, #4
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d005      	beq.n	8007f72 <HAL_RCC_OscConfig+0x17a>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e2e9      	b.n	8008546 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f72:	4b32      	ldr	r3, [pc, #200]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f023 0219 	bic.w	r2, r3, #25
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	492f      	ldr	r1, [pc, #188]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007f80:	4313      	orrs	r3, r2
 8007f82:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007f84:	f7fc fde6 	bl	8004b54 <HAL_GetTick>
 8007f88:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f8a:	e008      	b.n	8007f9e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f8c:	f7fc fde2 	bl	8004b54 <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d901      	bls.n	8007f9e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e2d3      	b.n	8008546 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f9e:	4b27      	ldr	r3, [pc, #156]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0304 	and.w	r3, r3, #4
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d0f0      	beq.n	8007f8c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007faa:	4b24      	ldr	r3, [pc, #144]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	061b      	lsls	r3, r3, #24
 8007fb8:	4920      	ldr	r1, [pc, #128]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fbe:	e045      	b.n	800804c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d026      	beq.n	8008016 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007fc8:	4b1c      	ldr	r3, [pc, #112]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f023 0219 	bic.w	r2, r3, #25
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	4919      	ldr	r1, [pc, #100]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fda:	f7fc fdbb 	bl	8004b54 <HAL_GetTick>
 8007fde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fe0:	e008      	b.n	8007ff4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fe2:	f7fc fdb7 	bl	8004b54 <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	d901      	bls.n	8007ff4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e2a8      	b.n	8008546 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ff4:	4b11      	ldr	r3, [pc, #68]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0304 	and.w	r3, r3, #4
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d0f0      	beq.n	8007fe2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008000:	4b0e      	ldr	r3, [pc, #56]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	061b      	lsls	r3, r3, #24
 800800e:	490b      	ldr	r1, [pc, #44]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8008010:	4313      	orrs	r3, r2
 8008012:	604b      	str	r3, [r1, #4]
 8008014:	e01a      	b.n	800804c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008016:	4b09      	ldr	r3, [pc, #36]	; (800803c <HAL_RCC_OscConfig+0x244>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a08      	ldr	r2, [pc, #32]	; (800803c <HAL_RCC_OscConfig+0x244>)
 800801c:	f023 0301 	bic.w	r3, r3, #1
 8008020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008022:	f7fc fd97 	bl	8004b54 <HAL_GetTick>
 8008026:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008028:	e00a      	b.n	8008040 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800802a:	f7fc fd93 	bl	8004b54 <HAL_GetTick>
 800802e:	4602      	mov	r2, r0
 8008030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	2b02      	cmp	r3, #2
 8008036:	d903      	bls.n	8008040 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008038:	2303      	movs	r3, #3
 800803a:	e284      	b.n	8008546 <HAL_RCC_OscConfig+0x74e>
 800803c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008040:	4b96      	ldr	r3, [pc, #600]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0304 	and.w	r3, r3, #4
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1ee      	bne.n	800802a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0310 	and.w	r3, r3, #16
 8008054:	2b00      	cmp	r3, #0
 8008056:	d06a      	beq.n	800812e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008058:	4b90      	ldr	r3, [pc, #576]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008060:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008062:	4b8e      	ldr	r3, [pc, #568]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 8008064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008066:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	2b08      	cmp	r3, #8
 800806c:	d007      	beq.n	800807e <HAL_RCC_OscConfig+0x286>
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	2b18      	cmp	r3, #24
 8008072:	d11b      	bne.n	80080ac <HAL_RCC_OscConfig+0x2b4>
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	f003 0303 	and.w	r3, r3, #3
 800807a:	2b01      	cmp	r3, #1
 800807c:	d116      	bne.n	80080ac <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800807e:	4b87      	ldr	r3, [pc, #540]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008086:	2b00      	cmp	r3, #0
 8008088:	d005      	beq.n	8008096 <HAL_RCC_OscConfig+0x29e>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	2b80      	cmp	r3, #128	; 0x80
 8008090:	d001      	beq.n	8008096 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e257      	b.n	8008546 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008096:	4b81      	ldr	r3, [pc, #516]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	061b      	lsls	r3, r3, #24
 80080a4:	497d      	ldr	r1, [pc, #500]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080aa:	e040      	b.n	800812e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d023      	beq.n	80080fc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80080b4:	4b79      	ldr	r3, [pc, #484]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a78      	ldr	r2, [pc, #480]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 80080ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080c0:	f7fc fd48 	bl	8004b54 <HAL_GetTick>
 80080c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080c6:	e008      	b.n	80080da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80080c8:	f7fc fd44 	bl	8004b54 <HAL_GetTick>
 80080cc:	4602      	mov	r2, r0
 80080ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d901      	bls.n	80080da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e235      	b.n	8008546 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080da:	4b70      	ldr	r3, [pc, #448]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d0f0      	beq.n	80080c8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080e6:	4b6d      	ldr	r3, [pc, #436]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	061b      	lsls	r3, r3, #24
 80080f4:	4969      	ldr	r1, [pc, #420]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	60cb      	str	r3, [r1, #12]
 80080fa:	e018      	b.n	800812e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80080fc:	4b67      	ldr	r3, [pc, #412]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a66      	ldr	r2, [pc, #408]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 8008102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008108:	f7fc fd24 	bl	8004b54 <HAL_GetTick>
 800810c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800810e:	e008      	b.n	8008122 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008110:	f7fc fd20 	bl	8004b54 <HAL_GetTick>
 8008114:	4602      	mov	r2, r0
 8008116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	2b02      	cmp	r3, #2
 800811c:	d901      	bls.n	8008122 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e211      	b.n	8008546 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008122:	4b5e      	ldr	r3, [pc, #376]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1f0      	bne.n	8008110 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0308 	and.w	r3, r3, #8
 8008136:	2b00      	cmp	r3, #0
 8008138:	d036      	beq.n	80081a8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d019      	beq.n	8008176 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008142:	4b56      	ldr	r3, [pc, #344]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 8008144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008146:	4a55      	ldr	r2, [pc, #340]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 8008148:	f043 0301 	orr.w	r3, r3, #1
 800814c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800814e:	f7fc fd01 	bl	8004b54 <HAL_GetTick>
 8008152:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008154:	e008      	b.n	8008168 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008156:	f7fc fcfd 	bl	8004b54 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	2b02      	cmp	r3, #2
 8008162:	d901      	bls.n	8008168 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e1ee      	b.n	8008546 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008168:	4b4c      	ldr	r3, [pc, #304]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 800816a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d0f0      	beq.n	8008156 <HAL_RCC_OscConfig+0x35e>
 8008174:	e018      	b.n	80081a8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008176:	4b49      	ldr	r3, [pc, #292]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 8008178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800817a:	4a48      	ldr	r2, [pc, #288]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 800817c:	f023 0301 	bic.w	r3, r3, #1
 8008180:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008182:	f7fc fce7 	bl	8004b54 <HAL_GetTick>
 8008186:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008188:	e008      	b.n	800819c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800818a:	f7fc fce3 	bl	8004b54 <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	2b02      	cmp	r3, #2
 8008196:	d901      	bls.n	800819c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e1d4      	b.n	8008546 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800819c:	4b3f      	ldr	r3, [pc, #252]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 800819e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081a0:	f003 0302 	and.w	r3, r3, #2
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1f0      	bne.n	800818a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 0320 	and.w	r3, r3, #32
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d036      	beq.n	8008222 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d019      	beq.n	80081f0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80081bc:	4b37      	ldr	r3, [pc, #220]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a36      	ldr	r2, [pc, #216]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 80081c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80081c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081c8:	f7fc fcc4 	bl	8004b54 <HAL_GetTick>
 80081cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80081ce:	e008      	b.n	80081e2 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80081d0:	f7fc fcc0 	bl	8004b54 <HAL_GetTick>
 80081d4:	4602      	mov	r2, r0
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d901      	bls.n	80081e2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e1b1      	b.n	8008546 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80081e2:	4b2e      	ldr	r3, [pc, #184]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d0f0      	beq.n	80081d0 <HAL_RCC_OscConfig+0x3d8>
 80081ee:	e018      	b.n	8008222 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80081f0:	4b2a      	ldr	r3, [pc, #168]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a29      	ldr	r2, [pc, #164]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 80081f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081fc:	f7fc fcaa 	bl	8004b54 <HAL_GetTick>
 8008200:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008202:	e008      	b.n	8008216 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008204:	f7fc fca6 	bl	8004b54 <HAL_GetTick>
 8008208:	4602      	mov	r2, r0
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	2b02      	cmp	r3, #2
 8008210:	d901      	bls.n	8008216 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e197      	b.n	8008546 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008216:	4b21      	ldr	r3, [pc, #132]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1f0      	bne.n	8008204 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0304 	and.w	r3, r3, #4
 800822a:	2b00      	cmp	r3, #0
 800822c:	f000 8086 	beq.w	800833c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008230:	4b1b      	ldr	r3, [pc, #108]	; (80082a0 <HAL_RCC_OscConfig+0x4a8>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a1a      	ldr	r2, [pc, #104]	; (80082a0 <HAL_RCC_OscConfig+0x4a8>)
 8008236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800823a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800823c:	f7fc fc8a 	bl	8004b54 <HAL_GetTick>
 8008240:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008242:	e008      	b.n	8008256 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008244:	f7fc fc86 	bl	8004b54 <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	2b64      	cmp	r3, #100	; 0x64
 8008250:	d901      	bls.n	8008256 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008252:	2303      	movs	r3, #3
 8008254:	e177      	b.n	8008546 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008256:	4b12      	ldr	r3, [pc, #72]	; (80082a0 <HAL_RCC_OscConfig+0x4a8>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800825e:	2b00      	cmp	r3, #0
 8008260:	d0f0      	beq.n	8008244 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d106      	bne.n	8008278 <HAL_RCC_OscConfig+0x480>
 800826a:	4b0c      	ldr	r3, [pc, #48]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 800826c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826e:	4a0b      	ldr	r2, [pc, #44]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 8008270:	f043 0301 	orr.w	r3, r3, #1
 8008274:	6713      	str	r3, [r2, #112]	; 0x70
 8008276:	e032      	b.n	80082de <HAL_RCC_OscConfig+0x4e6>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d111      	bne.n	80082a4 <HAL_RCC_OscConfig+0x4ac>
 8008280:	4b06      	ldr	r3, [pc, #24]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 8008282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008284:	4a05      	ldr	r2, [pc, #20]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 8008286:	f023 0301 	bic.w	r3, r3, #1
 800828a:	6713      	str	r3, [r2, #112]	; 0x70
 800828c:	4b03      	ldr	r3, [pc, #12]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 800828e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008290:	4a02      	ldr	r2, [pc, #8]	; (800829c <HAL_RCC_OscConfig+0x4a4>)
 8008292:	f023 0304 	bic.w	r3, r3, #4
 8008296:	6713      	str	r3, [r2, #112]	; 0x70
 8008298:	e021      	b.n	80082de <HAL_RCC_OscConfig+0x4e6>
 800829a:	bf00      	nop
 800829c:	58024400 	.word	0x58024400
 80082a0:	58024800 	.word	0x58024800
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	2b05      	cmp	r3, #5
 80082aa:	d10c      	bne.n	80082c6 <HAL_RCC_OscConfig+0x4ce>
 80082ac:	4b83      	ldr	r3, [pc, #524]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 80082ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082b0:	4a82      	ldr	r2, [pc, #520]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 80082b2:	f043 0304 	orr.w	r3, r3, #4
 80082b6:	6713      	str	r3, [r2, #112]	; 0x70
 80082b8:	4b80      	ldr	r3, [pc, #512]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 80082ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082bc:	4a7f      	ldr	r2, [pc, #508]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 80082be:	f043 0301 	orr.w	r3, r3, #1
 80082c2:	6713      	str	r3, [r2, #112]	; 0x70
 80082c4:	e00b      	b.n	80082de <HAL_RCC_OscConfig+0x4e6>
 80082c6:	4b7d      	ldr	r3, [pc, #500]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 80082c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ca:	4a7c      	ldr	r2, [pc, #496]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 80082cc:	f023 0301 	bic.w	r3, r3, #1
 80082d0:	6713      	str	r3, [r2, #112]	; 0x70
 80082d2:	4b7a      	ldr	r3, [pc, #488]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 80082d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082d6:	4a79      	ldr	r2, [pc, #484]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 80082d8:	f023 0304 	bic.w	r3, r3, #4
 80082dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d015      	beq.n	8008312 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082e6:	f7fc fc35 	bl	8004b54 <HAL_GetTick>
 80082ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082ec:	e00a      	b.n	8008304 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082ee:	f7fc fc31 	bl	8004b54 <HAL_GetTick>
 80082f2:	4602      	mov	r2, r0
 80082f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d901      	bls.n	8008304 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e120      	b.n	8008546 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008304:	4b6d      	ldr	r3, [pc, #436]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 8008306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008308:	f003 0302 	and.w	r3, r3, #2
 800830c:	2b00      	cmp	r3, #0
 800830e:	d0ee      	beq.n	80082ee <HAL_RCC_OscConfig+0x4f6>
 8008310:	e014      	b.n	800833c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008312:	f7fc fc1f 	bl	8004b54 <HAL_GetTick>
 8008316:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008318:	e00a      	b.n	8008330 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800831a:	f7fc fc1b 	bl	8004b54 <HAL_GetTick>
 800831e:	4602      	mov	r2, r0
 8008320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	f241 3288 	movw	r2, #5000	; 0x1388
 8008328:	4293      	cmp	r3, r2
 800832a:	d901      	bls.n	8008330 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e10a      	b.n	8008546 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008330:	4b62      	ldr	r3, [pc, #392]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 8008332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008334:	f003 0302 	and.w	r3, r3, #2
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1ee      	bne.n	800831a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 80ff 	beq.w	8008544 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008346:	4b5d      	ldr	r3, [pc, #372]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800834e:	2b18      	cmp	r3, #24
 8008350:	f000 80ba 	beq.w	80084c8 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	2b02      	cmp	r3, #2
 800835a:	f040 8095 	bne.w	8008488 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800835e:	4b57      	ldr	r3, [pc, #348]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a56      	ldr	r2, [pc, #344]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 8008364:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800836a:	f7fc fbf3 	bl	8004b54 <HAL_GetTick>
 800836e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008370:	e008      	b.n	8008384 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008372:	f7fc fbef 	bl	8004b54 <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	2b02      	cmp	r3, #2
 800837e:	d901      	bls.n	8008384 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008380:	2303      	movs	r3, #3
 8008382:	e0e0      	b.n	8008546 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008384:	4b4d      	ldr	r3, [pc, #308]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1f0      	bne.n	8008372 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008390:	4b4a      	ldr	r3, [pc, #296]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 8008392:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008394:	4b4a      	ldr	r3, [pc, #296]	; (80084c0 <HAL_RCC_OscConfig+0x6c8>)
 8008396:	4013      	ands	r3, r2
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80083a0:	0112      	lsls	r2, r2, #4
 80083a2:	430a      	orrs	r2, r1
 80083a4:	4945      	ldr	r1, [pc, #276]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	628b      	str	r3, [r1, #40]	; 0x28
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ae:	3b01      	subs	r3, #1
 80083b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b8:	3b01      	subs	r3, #1
 80083ba:	025b      	lsls	r3, r3, #9
 80083bc:	b29b      	uxth	r3, r3
 80083be:	431a      	orrs	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c4:	3b01      	subs	r3, #1
 80083c6:	041b      	lsls	r3, r3, #16
 80083c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80083cc:	431a      	orrs	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083d2:	3b01      	subs	r3, #1
 80083d4:	061b      	lsls	r3, r3, #24
 80083d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80083da:	4938      	ldr	r1, [pc, #224]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 80083dc:	4313      	orrs	r3, r2
 80083de:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80083e0:	4b36      	ldr	r3, [pc, #216]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 80083e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e4:	4a35      	ldr	r2, [pc, #212]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 80083e6:	f023 0301 	bic.w	r3, r3, #1
 80083ea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80083ec:	4b33      	ldr	r3, [pc, #204]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 80083ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083f0:	4b34      	ldr	r3, [pc, #208]	; (80084c4 <HAL_RCC_OscConfig+0x6cc>)
 80083f2:	4013      	ands	r3, r2
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80083f8:	00d2      	lsls	r2, r2, #3
 80083fa:	4930      	ldr	r1, [pc, #192]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 80083fc:	4313      	orrs	r3, r2
 80083fe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008400:	4b2e      	ldr	r3, [pc, #184]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 8008402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008404:	f023 020c 	bic.w	r2, r3, #12
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840c:	492b      	ldr	r1, [pc, #172]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 800840e:	4313      	orrs	r3, r2
 8008410:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008412:	4b2a      	ldr	r3, [pc, #168]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 8008414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008416:	f023 0202 	bic.w	r2, r3, #2
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800841e:	4927      	ldr	r1, [pc, #156]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 8008420:	4313      	orrs	r3, r2
 8008422:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008424:	4b25      	ldr	r3, [pc, #148]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 8008426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008428:	4a24      	ldr	r2, [pc, #144]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 800842a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800842e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008430:	4b22      	ldr	r3, [pc, #136]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 8008432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008434:	4a21      	ldr	r2, [pc, #132]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 8008436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800843a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800843c:	4b1f      	ldr	r3, [pc, #124]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 800843e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008440:	4a1e      	ldr	r2, [pc, #120]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 8008442:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008446:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008448:	4b1c      	ldr	r3, [pc, #112]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 800844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844c:	4a1b      	ldr	r2, [pc, #108]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 800844e:	f043 0301 	orr.w	r3, r3, #1
 8008452:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008454:	4b19      	ldr	r3, [pc, #100]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a18      	ldr	r2, [pc, #96]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 800845a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800845e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008460:	f7fc fb78 	bl	8004b54 <HAL_GetTick>
 8008464:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008466:	e008      	b.n	800847a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008468:	f7fc fb74 	bl	8004b54 <HAL_GetTick>
 800846c:	4602      	mov	r2, r0
 800846e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	2b02      	cmp	r3, #2
 8008474:	d901      	bls.n	800847a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e065      	b.n	8008546 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800847a:	4b10      	ldr	r3, [pc, #64]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d0f0      	beq.n	8008468 <HAL_RCC_OscConfig+0x670>
 8008486:	e05d      	b.n	8008544 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008488:	4b0c      	ldr	r3, [pc, #48]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a0b      	ldr	r2, [pc, #44]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 800848e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008494:	f7fc fb5e 	bl	8004b54 <HAL_GetTick>
 8008498:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800849a:	e008      	b.n	80084ae <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800849c:	f7fc fb5a 	bl	8004b54 <HAL_GetTick>
 80084a0:	4602      	mov	r2, r0
 80084a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d901      	bls.n	80084ae <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	e04b      	b.n	8008546 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084ae:	4b03      	ldr	r3, [pc, #12]	; (80084bc <HAL_RCC_OscConfig+0x6c4>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1f0      	bne.n	800849c <HAL_RCC_OscConfig+0x6a4>
 80084ba:	e043      	b.n	8008544 <HAL_RCC_OscConfig+0x74c>
 80084bc:	58024400 	.word	0x58024400
 80084c0:	fffffc0c 	.word	0xfffffc0c
 80084c4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80084c8:	4b21      	ldr	r3, [pc, #132]	; (8008550 <HAL_RCC_OscConfig+0x758>)
 80084ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80084ce:	4b20      	ldr	r3, [pc, #128]	; (8008550 <HAL_RCC_OscConfig+0x758>)
 80084d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d031      	beq.n	8008540 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f003 0203 	and.w	r2, r3, #3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d12a      	bne.n	8008540 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	091b      	lsrs	r3, r3, #4
 80084ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d122      	bne.n	8008540 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008504:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008506:	429a      	cmp	r2, r3
 8008508:	d11a      	bne.n	8008540 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	0a5b      	lsrs	r3, r3, #9
 800850e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008516:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008518:	429a      	cmp	r2, r3
 800851a:	d111      	bne.n	8008540 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	0c1b      	lsrs	r3, r3, #16
 8008520:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008528:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800852a:	429a      	cmp	r2, r3
 800852c:	d108      	bne.n	8008540 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	0e1b      	lsrs	r3, r3, #24
 8008532:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800853a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800853c:	429a      	cmp	r2, r3
 800853e:	d001      	beq.n	8008544 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e000      	b.n	8008546 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3730      	adds	r7, #48	; 0x30
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	58024400 	.word	0x58024400

08008554 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d101      	bne.n	8008568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e19c      	b.n	80088a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008568:	4b8a      	ldr	r3, [pc, #552]	; (8008794 <HAL_RCC_ClockConfig+0x240>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 030f 	and.w	r3, r3, #15
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	429a      	cmp	r2, r3
 8008574:	d910      	bls.n	8008598 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008576:	4b87      	ldr	r3, [pc, #540]	; (8008794 <HAL_RCC_ClockConfig+0x240>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f023 020f 	bic.w	r2, r3, #15
 800857e:	4985      	ldr	r1, [pc, #532]	; (8008794 <HAL_RCC_ClockConfig+0x240>)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	4313      	orrs	r3, r2
 8008584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008586:	4b83      	ldr	r3, [pc, #524]	; (8008794 <HAL_RCC_ClockConfig+0x240>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 030f 	and.w	r3, r3, #15
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	429a      	cmp	r2, r3
 8008592:	d001      	beq.n	8008598 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	e184      	b.n	80088a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 0304 	and.w	r3, r3, #4
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d010      	beq.n	80085c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	691a      	ldr	r2, [r3, #16]
 80085a8:	4b7b      	ldr	r3, [pc, #492]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d908      	bls.n	80085c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085b4:	4b78      	ldr	r3, [pc, #480]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	4975      	ldr	r1, [pc, #468]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 80085c2:	4313      	orrs	r3, r2
 80085c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 0308 	and.w	r3, r3, #8
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d010      	beq.n	80085f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	695a      	ldr	r2, [r3, #20]
 80085d6:	4b70      	ldr	r3, [pc, #448]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085de:	429a      	cmp	r2, r3
 80085e0:	d908      	bls.n	80085f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80085e2:	4b6d      	ldr	r3, [pc, #436]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 80085e4:	69db      	ldr	r3, [r3, #28]
 80085e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	496a      	ldr	r1, [pc, #424]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 0310 	and.w	r3, r3, #16
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d010      	beq.n	8008622 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	699a      	ldr	r2, [r3, #24]
 8008604:	4b64      	ldr	r3, [pc, #400]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 8008606:	69db      	ldr	r3, [r3, #28]
 8008608:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800860c:	429a      	cmp	r2, r3
 800860e:	d908      	bls.n	8008622 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008610:	4b61      	ldr	r3, [pc, #388]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 8008612:	69db      	ldr	r3, [r3, #28]
 8008614:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	495e      	ldr	r1, [pc, #376]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 800861e:	4313      	orrs	r3, r2
 8008620:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 0320 	and.w	r3, r3, #32
 800862a:	2b00      	cmp	r3, #0
 800862c:	d010      	beq.n	8008650 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	69da      	ldr	r2, [r3, #28]
 8008632:	4b59      	ldr	r3, [pc, #356]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800863a:	429a      	cmp	r2, r3
 800863c:	d908      	bls.n	8008650 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800863e:	4b56      	ldr	r3, [pc, #344]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	69db      	ldr	r3, [r3, #28]
 800864a:	4953      	ldr	r1, [pc, #332]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 800864c:	4313      	orrs	r3, r2
 800864e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0302 	and.w	r3, r3, #2
 8008658:	2b00      	cmp	r3, #0
 800865a:	d010      	beq.n	800867e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68da      	ldr	r2, [r3, #12]
 8008660:	4b4d      	ldr	r3, [pc, #308]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	f003 030f 	and.w	r3, r3, #15
 8008668:	429a      	cmp	r2, r3
 800866a:	d908      	bls.n	800867e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800866c:	4b4a      	ldr	r3, [pc, #296]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	f023 020f 	bic.w	r2, r3, #15
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	4947      	ldr	r1, [pc, #284]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 800867a:	4313      	orrs	r3, r2
 800867c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b00      	cmp	r3, #0
 8008688:	d055      	beq.n	8008736 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800868a:	4b43      	ldr	r3, [pc, #268]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	4940      	ldr	r1, [pc, #256]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 8008698:	4313      	orrs	r3, r2
 800869a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d107      	bne.n	80086b4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086a4:	4b3c      	ldr	r3, [pc, #240]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d121      	bne.n	80086f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e0f6      	b.n	80088a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	2b03      	cmp	r3, #3
 80086ba:	d107      	bne.n	80086cc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086bc:	4b36      	ldr	r3, [pc, #216]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d115      	bne.n	80086f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e0ea      	b.n	80088a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d107      	bne.n	80086e4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086d4:	4b30      	ldr	r3, [pc, #192]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d109      	bne.n	80086f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	e0de      	b.n	80088a2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086e4:	4b2c      	ldr	r3, [pc, #176]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 0304 	and.w	r3, r3, #4
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d101      	bne.n	80086f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e0d6      	b.n	80088a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086f4:	4b28      	ldr	r3, [pc, #160]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	f023 0207 	bic.w	r2, r3, #7
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	4925      	ldr	r1, [pc, #148]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 8008702:	4313      	orrs	r3, r2
 8008704:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008706:	f7fc fa25 	bl	8004b54 <HAL_GetTick>
 800870a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800870c:	e00a      	b.n	8008724 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800870e:	f7fc fa21 	bl	8004b54 <HAL_GetTick>
 8008712:	4602      	mov	r2, r0
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	f241 3288 	movw	r2, #5000	; 0x1388
 800871c:	4293      	cmp	r3, r2
 800871e:	d901      	bls.n	8008724 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e0be      	b.n	80088a2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008724:	4b1c      	ldr	r3, [pc, #112]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	00db      	lsls	r3, r3, #3
 8008732:	429a      	cmp	r2, r3
 8008734:	d1eb      	bne.n	800870e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	2b00      	cmp	r3, #0
 8008740:	d010      	beq.n	8008764 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68da      	ldr	r2, [r3, #12]
 8008746:	4b14      	ldr	r3, [pc, #80]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	f003 030f 	and.w	r3, r3, #15
 800874e:	429a      	cmp	r2, r3
 8008750:	d208      	bcs.n	8008764 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008752:	4b11      	ldr	r3, [pc, #68]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 8008754:	699b      	ldr	r3, [r3, #24]
 8008756:	f023 020f 	bic.w	r2, r3, #15
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	490e      	ldr	r1, [pc, #56]	; (8008798 <HAL_RCC_ClockConfig+0x244>)
 8008760:	4313      	orrs	r3, r2
 8008762:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008764:	4b0b      	ldr	r3, [pc, #44]	; (8008794 <HAL_RCC_ClockConfig+0x240>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 030f 	and.w	r3, r3, #15
 800876c:	683a      	ldr	r2, [r7, #0]
 800876e:	429a      	cmp	r2, r3
 8008770:	d214      	bcs.n	800879c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008772:	4b08      	ldr	r3, [pc, #32]	; (8008794 <HAL_RCC_ClockConfig+0x240>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f023 020f 	bic.w	r2, r3, #15
 800877a:	4906      	ldr	r1, [pc, #24]	; (8008794 <HAL_RCC_ClockConfig+0x240>)
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	4313      	orrs	r3, r2
 8008780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008782:	4b04      	ldr	r3, [pc, #16]	; (8008794 <HAL_RCC_ClockConfig+0x240>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 030f 	and.w	r3, r3, #15
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	429a      	cmp	r2, r3
 800878e:	d005      	beq.n	800879c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e086      	b.n	80088a2 <HAL_RCC_ClockConfig+0x34e>
 8008794:	52002000 	.word	0x52002000
 8008798:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0304 	and.w	r3, r3, #4
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d010      	beq.n	80087ca <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	691a      	ldr	r2, [r3, #16]
 80087ac:	4b3f      	ldr	r3, [pc, #252]	; (80088ac <HAL_RCC_ClockConfig+0x358>)
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d208      	bcs.n	80087ca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80087b8:	4b3c      	ldr	r3, [pc, #240]	; (80088ac <HAL_RCC_ClockConfig+0x358>)
 80087ba:	699b      	ldr	r3, [r3, #24]
 80087bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	4939      	ldr	r1, [pc, #228]	; (80088ac <HAL_RCC_ClockConfig+0x358>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0308 	and.w	r3, r3, #8
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d010      	beq.n	80087f8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	695a      	ldr	r2, [r3, #20]
 80087da:	4b34      	ldr	r3, [pc, #208]	; (80088ac <HAL_RCC_ClockConfig+0x358>)
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d208      	bcs.n	80087f8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80087e6:	4b31      	ldr	r3, [pc, #196]	; (80088ac <HAL_RCC_ClockConfig+0x358>)
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	492e      	ldr	r1, [pc, #184]	; (80088ac <HAL_RCC_ClockConfig+0x358>)
 80087f4:	4313      	orrs	r3, r2
 80087f6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0310 	and.w	r3, r3, #16
 8008800:	2b00      	cmp	r3, #0
 8008802:	d010      	beq.n	8008826 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	699a      	ldr	r2, [r3, #24]
 8008808:	4b28      	ldr	r3, [pc, #160]	; (80088ac <HAL_RCC_ClockConfig+0x358>)
 800880a:	69db      	ldr	r3, [r3, #28]
 800880c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008810:	429a      	cmp	r2, r3
 8008812:	d208      	bcs.n	8008826 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008814:	4b25      	ldr	r3, [pc, #148]	; (80088ac <HAL_RCC_ClockConfig+0x358>)
 8008816:	69db      	ldr	r3, [r3, #28]
 8008818:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	4922      	ldr	r1, [pc, #136]	; (80088ac <HAL_RCC_ClockConfig+0x358>)
 8008822:	4313      	orrs	r3, r2
 8008824:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 0320 	and.w	r3, r3, #32
 800882e:	2b00      	cmp	r3, #0
 8008830:	d010      	beq.n	8008854 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	69da      	ldr	r2, [r3, #28]
 8008836:	4b1d      	ldr	r3, [pc, #116]	; (80088ac <HAL_RCC_ClockConfig+0x358>)
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800883e:	429a      	cmp	r2, r3
 8008840:	d208      	bcs.n	8008854 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008842:	4b1a      	ldr	r3, [pc, #104]	; (80088ac <HAL_RCC_ClockConfig+0x358>)
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	69db      	ldr	r3, [r3, #28]
 800884e:	4917      	ldr	r1, [pc, #92]	; (80088ac <HAL_RCC_ClockConfig+0x358>)
 8008850:	4313      	orrs	r3, r2
 8008852:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008854:	f000 f834 	bl	80088c0 <HAL_RCC_GetSysClockFreq>
 8008858:	4602      	mov	r2, r0
 800885a:	4b14      	ldr	r3, [pc, #80]	; (80088ac <HAL_RCC_ClockConfig+0x358>)
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	0a1b      	lsrs	r3, r3, #8
 8008860:	f003 030f 	and.w	r3, r3, #15
 8008864:	4912      	ldr	r1, [pc, #72]	; (80088b0 <HAL_RCC_ClockConfig+0x35c>)
 8008866:	5ccb      	ldrb	r3, [r1, r3]
 8008868:	f003 031f 	and.w	r3, r3, #31
 800886c:	fa22 f303 	lsr.w	r3, r2, r3
 8008870:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008872:	4b0e      	ldr	r3, [pc, #56]	; (80088ac <HAL_RCC_ClockConfig+0x358>)
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	f003 030f 	and.w	r3, r3, #15
 800887a:	4a0d      	ldr	r2, [pc, #52]	; (80088b0 <HAL_RCC_ClockConfig+0x35c>)
 800887c:	5cd3      	ldrb	r3, [r2, r3]
 800887e:	f003 031f 	and.w	r3, r3, #31
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	fa22 f303 	lsr.w	r3, r2, r3
 8008888:	4a0a      	ldr	r2, [pc, #40]	; (80088b4 <HAL_RCC_ClockConfig+0x360>)
 800888a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800888c:	4a0a      	ldr	r2, [pc, #40]	; (80088b8 <HAL_RCC_ClockConfig+0x364>)
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008892:	4b0a      	ldr	r3, [pc, #40]	; (80088bc <HAL_RCC_ClockConfig+0x368>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4618      	mov	r0, r3
 8008898:	f7fc f912 	bl	8004ac0 <HAL_InitTick>
 800889c:	4603      	mov	r3, r0
 800889e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80088a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3718      	adds	r7, #24
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	58024400 	.word	0x58024400
 80088b0:	0800e1c4 	.word	0x0800e1c4
 80088b4:	24000008 	.word	0x24000008
 80088b8:	24000004 	.word	0x24000004
 80088bc:	2400000c 	.word	0x2400000c

080088c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b089      	sub	sp, #36	; 0x24
 80088c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088c6:	4bb3      	ldr	r3, [pc, #716]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088ce:	2b18      	cmp	r3, #24
 80088d0:	f200 8155 	bhi.w	8008b7e <HAL_RCC_GetSysClockFreq+0x2be>
 80088d4:	a201      	add	r2, pc, #4	; (adr r2, 80088dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80088d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088da:	bf00      	nop
 80088dc:	08008941 	.word	0x08008941
 80088e0:	08008b7f 	.word	0x08008b7f
 80088e4:	08008b7f 	.word	0x08008b7f
 80088e8:	08008b7f 	.word	0x08008b7f
 80088ec:	08008b7f 	.word	0x08008b7f
 80088f0:	08008b7f 	.word	0x08008b7f
 80088f4:	08008b7f 	.word	0x08008b7f
 80088f8:	08008b7f 	.word	0x08008b7f
 80088fc:	08008967 	.word	0x08008967
 8008900:	08008b7f 	.word	0x08008b7f
 8008904:	08008b7f 	.word	0x08008b7f
 8008908:	08008b7f 	.word	0x08008b7f
 800890c:	08008b7f 	.word	0x08008b7f
 8008910:	08008b7f 	.word	0x08008b7f
 8008914:	08008b7f 	.word	0x08008b7f
 8008918:	08008b7f 	.word	0x08008b7f
 800891c:	0800896d 	.word	0x0800896d
 8008920:	08008b7f 	.word	0x08008b7f
 8008924:	08008b7f 	.word	0x08008b7f
 8008928:	08008b7f 	.word	0x08008b7f
 800892c:	08008b7f 	.word	0x08008b7f
 8008930:	08008b7f 	.word	0x08008b7f
 8008934:	08008b7f 	.word	0x08008b7f
 8008938:	08008b7f 	.word	0x08008b7f
 800893c:	08008973 	.word	0x08008973
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008940:	4b94      	ldr	r3, [pc, #592]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 0320 	and.w	r3, r3, #32
 8008948:	2b00      	cmp	r3, #0
 800894a:	d009      	beq.n	8008960 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800894c:	4b91      	ldr	r3, [pc, #580]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	08db      	lsrs	r3, r3, #3
 8008952:	f003 0303 	and.w	r3, r3, #3
 8008956:	4a90      	ldr	r2, [pc, #576]	; (8008b98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008958:	fa22 f303 	lsr.w	r3, r2, r3
 800895c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800895e:	e111      	b.n	8008b84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008960:	4b8d      	ldr	r3, [pc, #564]	; (8008b98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008962:	61bb      	str	r3, [r7, #24]
    break;
 8008964:	e10e      	b.n	8008b84 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008966:	4b8d      	ldr	r3, [pc, #564]	; (8008b9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008968:	61bb      	str	r3, [r7, #24]
    break;
 800896a:	e10b      	b.n	8008b84 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800896c:	4b8c      	ldr	r3, [pc, #560]	; (8008ba0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800896e:	61bb      	str	r3, [r7, #24]
    break;
 8008970:	e108      	b.n	8008b84 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008972:	4b88      	ldr	r3, [pc, #544]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008976:	f003 0303 	and.w	r3, r3, #3
 800897a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800897c:	4b85      	ldr	r3, [pc, #532]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800897e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008980:	091b      	lsrs	r3, r3, #4
 8008982:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008986:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008988:	4b82      	ldr	r3, [pc, #520]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800898a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008992:	4b80      	ldr	r3, [pc, #512]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008996:	08db      	lsrs	r3, r3, #3
 8008998:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	fb02 f303 	mul.w	r3, r2, r3
 80089a2:	ee07 3a90 	vmov	s15, r3
 80089a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089aa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f000 80e1 	beq.w	8008b78 <HAL_RCC_GetSysClockFreq+0x2b8>
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	f000 8083 	beq.w	8008ac4 <HAL_RCC_GetSysClockFreq+0x204>
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	f200 80a1 	bhi.w	8008b08 <HAL_RCC_GetSysClockFreq+0x248>
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d003      	beq.n	80089d4 <HAL_RCC_GetSysClockFreq+0x114>
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d056      	beq.n	8008a80 <HAL_RCC_GetSysClockFreq+0x1c0>
 80089d2:	e099      	b.n	8008b08 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089d4:	4b6f      	ldr	r3, [pc, #444]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 0320 	and.w	r3, r3, #32
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d02d      	beq.n	8008a3c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089e0:	4b6c      	ldr	r3, [pc, #432]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	08db      	lsrs	r3, r3, #3
 80089e6:	f003 0303 	and.w	r3, r3, #3
 80089ea:	4a6b      	ldr	r2, [pc, #428]	; (8008b98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089ec:	fa22 f303 	lsr.w	r3, r2, r3
 80089f0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	ee07 3a90 	vmov	s15, r3
 80089f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a0a:	4b62      	ldr	r3, [pc, #392]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a12:	ee07 3a90 	vmov	s15, r3
 8008a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a1e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008ba4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008a3a:	e087      	b.n	8008b4c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	ee07 3a90 	vmov	s15, r3
 8008a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a46:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008ba8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a4e:	4b51      	ldr	r3, [pc, #324]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a56:	ee07 3a90 	vmov	s15, r3
 8008a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a62:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008ba4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a7e:	e065      	b.n	8008b4c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	ee07 3a90 	vmov	s15, r3
 8008a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008bac <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a92:	4b40      	ldr	r3, [pc, #256]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a9a:	ee07 3a90 	vmov	s15, r3
 8008a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aa6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008ba4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008abe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ac2:	e043      	b.n	8008b4c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	ee07 3a90 	vmov	s15, r3
 8008aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ace:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008bb0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ad6:	4b2f      	ldr	r3, [pc, #188]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ade:	ee07 3a90 	vmov	s15, r3
 8008ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008ba4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b06:	e021      	b.n	8008b4c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	ee07 3a90 	vmov	s15, r3
 8008b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b12:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008bac <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b1a:	4b1e      	ldr	r3, [pc, #120]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b22:	ee07 3a90 	vmov	s15, r3
 8008b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b2e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008ba4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b4a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008b4c:	4b11      	ldr	r3, [pc, #68]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b50:	0a5b      	lsrs	r3, r3, #9
 8008b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b56:	3301      	adds	r3, #1
 8008b58:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	ee07 3a90 	vmov	s15, r3
 8008b60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b64:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b70:	ee17 3a90 	vmov	r3, s15
 8008b74:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008b76:	e005      	b.n	8008b84 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	61bb      	str	r3, [r7, #24]
    break;
 8008b7c:	e002      	b.n	8008b84 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008b7e:	4b07      	ldr	r3, [pc, #28]	; (8008b9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008b80:	61bb      	str	r3, [r7, #24]
    break;
 8008b82:	bf00      	nop
  }

  return sysclockfreq;
 8008b84:	69bb      	ldr	r3, [r7, #24]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3724      	adds	r7, #36	; 0x24
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	58024400 	.word	0x58024400
 8008b98:	03d09000 	.word	0x03d09000
 8008b9c:	003d0900 	.word	0x003d0900
 8008ba0:	007a1200 	.word	0x007a1200
 8008ba4:	46000000 	.word	0x46000000
 8008ba8:	4c742400 	.word	0x4c742400
 8008bac:	4a742400 	.word	0x4a742400
 8008bb0:	4af42400 	.word	0x4af42400

08008bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008bba:	f7ff fe81 	bl	80088c0 <HAL_RCC_GetSysClockFreq>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	4b10      	ldr	r3, [pc, #64]	; (8008c04 <HAL_RCC_GetHCLKFreq+0x50>)
 8008bc2:	699b      	ldr	r3, [r3, #24]
 8008bc4:	0a1b      	lsrs	r3, r3, #8
 8008bc6:	f003 030f 	and.w	r3, r3, #15
 8008bca:	490f      	ldr	r1, [pc, #60]	; (8008c08 <HAL_RCC_GetHCLKFreq+0x54>)
 8008bcc:	5ccb      	ldrb	r3, [r1, r3]
 8008bce:	f003 031f 	and.w	r3, r3, #31
 8008bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bd8:	4b0a      	ldr	r3, [pc, #40]	; (8008c04 <HAL_RCC_GetHCLKFreq+0x50>)
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	f003 030f 	and.w	r3, r3, #15
 8008be0:	4a09      	ldr	r2, [pc, #36]	; (8008c08 <HAL_RCC_GetHCLKFreq+0x54>)
 8008be2:	5cd3      	ldrb	r3, [r2, r3]
 8008be4:	f003 031f 	and.w	r3, r3, #31
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	fa22 f303 	lsr.w	r3, r2, r3
 8008bee:	4a07      	ldr	r2, [pc, #28]	; (8008c0c <HAL_RCC_GetHCLKFreq+0x58>)
 8008bf0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008bf2:	4a07      	ldr	r2, [pc, #28]	; (8008c10 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008bf8:	4b04      	ldr	r3, [pc, #16]	; (8008c0c <HAL_RCC_GetHCLKFreq+0x58>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3708      	adds	r7, #8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	58024400 	.word	0x58024400
 8008c08:	0800e1c4 	.word	0x0800e1c4
 8008c0c:	24000008 	.word	0x24000008
 8008c10:	24000004 	.word	0x24000004

08008c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008c18:	f7ff ffcc 	bl	8008bb4 <HAL_RCC_GetHCLKFreq>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	4b06      	ldr	r3, [pc, #24]	; (8008c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	091b      	lsrs	r3, r3, #4
 8008c24:	f003 0307 	and.w	r3, r3, #7
 8008c28:	4904      	ldr	r1, [pc, #16]	; (8008c3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c2a:	5ccb      	ldrb	r3, [r1, r3]
 8008c2c:	f003 031f 	and.w	r3, r3, #31
 8008c30:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	58024400 	.word	0x58024400
 8008c3c:	0800e1c4 	.word	0x0800e1c4

08008c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008c44:	f7ff ffb6 	bl	8008bb4 <HAL_RCC_GetHCLKFreq>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	4b06      	ldr	r3, [pc, #24]	; (8008c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	0a1b      	lsrs	r3, r3, #8
 8008c50:	f003 0307 	and.w	r3, r3, #7
 8008c54:	4904      	ldr	r1, [pc, #16]	; (8008c68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c56:	5ccb      	ldrb	r3, [r1, r3]
 8008c58:	f003 031f 	and.w	r3, r3, #31
 8008c5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	58024400 	.word	0x58024400
 8008c68:	0800e1c4 	.word	0x0800e1c4

08008c6c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008c74:	2300      	movs	r3, #0
 8008c76:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c78:	2300      	movs	r3, #0
 8008c7a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d03f      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c90:	d02a      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008c92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c96:	d824      	bhi.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008c98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c9c:	d018      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008c9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ca2:	d81e      	bhi.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d003      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008ca8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cac:	d007      	beq.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008cae:	e018      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cb0:	4ba4      	ldr	r3, [pc, #656]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb4:	4aa3      	ldr	r2, [pc, #652]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008cbc:	e015      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	2102      	movs	r1, #2
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f001 f989 	bl	8009fdc <RCCEx_PLL2_Config>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008cce:	e00c      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	3324      	adds	r3, #36	; 0x24
 8008cd4:	2102      	movs	r1, #2
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f001 fa32 	bl	800a140 <RCCEx_PLL3_Config>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008ce0:	e003      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ce6:	e000      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d109      	bne.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008cf0:	4b94      	ldr	r3, [pc, #592]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cfc:	4991      	ldr	r1, [pc, #580]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	650b      	str	r3, [r1, #80]	; 0x50
 8008d02:	e001      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d04:	7dfb      	ldrb	r3, [r7, #23]
 8008d06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d03d      	beq.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d18:	2b04      	cmp	r3, #4
 8008d1a:	d826      	bhi.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008d1c:	a201      	add	r2, pc, #4	; (adr r2, 8008d24 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d22:	bf00      	nop
 8008d24:	08008d39 	.word	0x08008d39
 8008d28:	08008d47 	.word	0x08008d47
 8008d2c:	08008d59 	.word	0x08008d59
 8008d30:	08008d71 	.word	0x08008d71
 8008d34:	08008d71 	.word	0x08008d71
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d38:	4b82      	ldr	r3, [pc, #520]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3c:	4a81      	ldr	r2, [pc, #516]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d44:	e015      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	3304      	adds	r3, #4
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f001 f945 	bl	8009fdc <RCCEx_PLL2_Config>
 8008d52:	4603      	mov	r3, r0
 8008d54:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d56:	e00c      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3324      	adds	r3, #36	; 0x24
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f001 f9ee 	bl	800a140 <RCCEx_PLL3_Config>
 8008d64:	4603      	mov	r3, r0
 8008d66:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d68:	e003      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	75fb      	strb	r3, [r7, #23]
      break;
 8008d6e:	e000      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008d70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d72:	7dfb      	ldrb	r3, [r7, #23]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d109      	bne.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d78:	4b72      	ldr	r3, [pc, #456]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d7c:	f023 0207 	bic.w	r2, r3, #7
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d84:	496f      	ldr	r1, [pc, #444]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d86:	4313      	orrs	r3, r2
 8008d88:	650b      	str	r3, [r1, #80]	; 0x50
 8008d8a:	e001      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d8c:	7dfb      	ldrb	r3, [r7, #23]
 8008d8e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d051      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008da2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008da6:	d036      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008da8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008dac:	d830      	bhi.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008dae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008db2:	d032      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8008db4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008db8:	d82a      	bhi.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008dba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008dbe:	d02e      	beq.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008dc0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008dc4:	d824      	bhi.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008dc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008dca:	d018      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008dcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008dd0:	d81e      	bhi.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d003      	beq.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x172>
 8008dd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dda:	d007      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008ddc:	e018      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dde:	4b59      	ldr	r3, [pc, #356]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de2:	4a58      	ldr	r2, [pc, #352]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008de8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008dea:	e019      	b.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	3304      	adds	r3, #4
 8008df0:	2100      	movs	r1, #0
 8008df2:	4618      	mov	r0, r3
 8008df4:	f001 f8f2 	bl	8009fdc <RCCEx_PLL2_Config>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008dfc:	e010      	b.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	3324      	adds	r3, #36	; 0x24
 8008e02:	2100      	movs	r1, #0
 8008e04:	4618      	mov	r0, r3
 8008e06:	f001 f99b 	bl	800a140 <RCCEx_PLL3_Config>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e0e:	e007      	b.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	75fb      	strb	r3, [r7, #23]
      break;
 8008e14:	e004      	b.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008e16:	bf00      	nop
 8008e18:	e002      	b.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008e1a:	bf00      	nop
 8008e1c:	e000      	b.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008e1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d10a      	bne.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008e26:	4b47      	ldr	r3, [pc, #284]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e2a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008e34:	4943      	ldr	r1, [pc, #268]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e36:	4313      	orrs	r3, r2
 8008e38:	658b      	str	r3, [r1, #88]	; 0x58
 8008e3a:	e001      	b.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e3c:	7dfb      	ldrb	r3, [r7, #23]
 8008e3e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d051      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e52:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008e56:	d036      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008e58:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008e5c:	d830      	bhi.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008e5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e62:	d032      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8008e64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e68:	d82a      	bhi.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008e6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e6e:	d02e      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008e70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e74:	d824      	bhi.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008e76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e7a:	d018      	beq.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008e7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e80:	d81e      	bhi.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d003      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008e86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e8a:	d007      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008e8c:	e018      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e8e:	4b2d      	ldr	r3, [pc, #180]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e92:	4a2c      	ldr	r2, [pc, #176]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e9a:	e019      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f001 f89a 	bl	8009fdc <RCCEx_PLL2_Config>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008eac:	e010      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	3324      	adds	r3, #36	; 0x24
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f001 f943 	bl	800a140 <RCCEx_PLL3_Config>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ebe:	e007      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ec4:	e004      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008ec6:	bf00      	nop
 8008ec8:	e002      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008eca:	bf00      	nop
 8008ecc:	e000      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008ece:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ed0:	7dfb      	ldrb	r3, [r7, #23]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10a      	bne.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008ed6:	4b1b      	ldr	r3, [pc, #108]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eda:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008ee4:	4917      	ldr	r1, [pc, #92]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	658b      	str	r3, [r1, #88]	; 0x58
 8008eea:	e001      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eec:	7dfb      	ldrb	r3, [r7, #23]
 8008eee:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d035      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f00:	2b30      	cmp	r3, #48	; 0x30
 8008f02:	d01c      	beq.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f04:	2b30      	cmp	r3, #48	; 0x30
 8008f06:	d817      	bhi.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008f08:	2b20      	cmp	r3, #32
 8008f0a:	d00c      	beq.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008f0c:	2b20      	cmp	r3, #32
 8008f0e:	d813      	bhi.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d019      	beq.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8008f14:	2b10      	cmp	r3, #16
 8008f16:	d10f      	bne.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f18:	4b0a      	ldr	r3, [pc, #40]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1c:	4a09      	ldr	r2, [pc, #36]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008f24:	e011      	b.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	3304      	adds	r3, #4
 8008f2a:	2102      	movs	r1, #2
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f001 f855 	bl	8009fdc <RCCEx_PLL2_Config>
 8008f32:	4603      	mov	r3, r0
 8008f34:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008f36:	e008      	b.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f3c:	e005      	b.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8008f3e:	bf00      	nop
 8008f40:	e003      	b.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008f42:	bf00      	nop
 8008f44:	58024400 	.word	0x58024400
      break;
 8008f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f4a:	7dfb      	ldrb	r3, [r7, #23]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d109      	bne.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008f50:	4ba3      	ldr	r3, [pc, #652]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f5c:	49a0      	ldr	r1, [pc, #640]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008f62:	e001      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f64:	7dfb      	ldrb	r3, [r7, #23]
 8008f66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d047      	beq.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f7c:	d030      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008f7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f82:	d82a      	bhi.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008f84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f88:	d02c      	beq.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008f8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f8e:	d824      	bhi.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f94:	d018      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f9a:	d81e      	bhi.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d003      	beq.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fa4:	d007      	beq.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008fa6:	e018      	b.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fa8:	4b8d      	ldr	r3, [pc, #564]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fac:	4a8c      	ldr	r2, [pc, #560]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008fb4:	e017      	b.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	3304      	adds	r3, #4
 8008fba:	2100      	movs	r1, #0
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f001 f80d 	bl	8009fdc <RCCEx_PLL2_Config>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008fc6:	e00e      	b.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	3324      	adds	r3, #36	; 0x24
 8008fcc:	2100      	movs	r1, #0
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f001 f8b6 	bl	800a140 <RCCEx_PLL3_Config>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008fd8:	e005      	b.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	75fb      	strb	r3, [r7, #23]
      break;
 8008fde:	e002      	b.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008fe0:	bf00      	nop
 8008fe2:	e000      	b.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008fe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fe6:	7dfb      	ldrb	r3, [r7, #23]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d109      	bne.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008fec:	4b7c      	ldr	r3, [pc, #496]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ff0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ff8:	4979      	ldr	r1, [pc, #484]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	650b      	str	r3, [r1, #80]	; 0x50
 8008ffe:	e001      	b.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009000:	7dfb      	ldrb	r3, [r7, #23]
 8009002:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d049      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009018:	d02e      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800901a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800901e:	d828      	bhi.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009020:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009024:	d02a      	beq.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009026:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800902a:	d822      	bhi.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800902c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009030:	d026      	beq.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009032:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009036:	d81c      	bhi.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009038:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800903c:	d010      	beq.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800903e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009042:	d816      	bhi.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009044:	2b00      	cmp	r3, #0
 8009046:	d01d      	beq.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800904c:	d111      	bne.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	3304      	adds	r3, #4
 8009052:	2101      	movs	r1, #1
 8009054:	4618      	mov	r0, r3
 8009056:	f000 ffc1 	bl	8009fdc <RCCEx_PLL2_Config>
 800905a:	4603      	mov	r3, r0
 800905c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800905e:	e012      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	3324      	adds	r3, #36	; 0x24
 8009064:	2101      	movs	r1, #1
 8009066:	4618      	mov	r0, r3
 8009068:	f001 f86a 	bl	800a140 <RCCEx_PLL3_Config>
 800906c:	4603      	mov	r3, r0
 800906e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009070:	e009      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	75fb      	strb	r3, [r7, #23]
      break;
 8009076:	e006      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009078:	bf00      	nop
 800907a:	e004      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800907c:	bf00      	nop
 800907e:	e002      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009080:	bf00      	nop
 8009082:	e000      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009084:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009086:	7dfb      	ldrb	r3, [r7, #23]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d109      	bne.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800908c:	4b54      	ldr	r3, [pc, #336]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800908e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009090:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009098:	4951      	ldr	r1, [pc, #324]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800909a:	4313      	orrs	r3, r2
 800909c:	650b      	str	r3, [r1, #80]	; 0x50
 800909e:	e001      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090a0:	7dfb      	ldrb	r3, [r7, #23]
 80090a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d04b      	beq.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80090b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090ba:	d02e      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80090bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090c0:	d828      	bhi.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80090c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090c6:	d02a      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80090c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090cc:	d822      	bhi.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80090ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090d2:	d026      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80090d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090d8:	d81c      	bhi.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80090da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090de:	d010      	beq.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80090e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090e4:	d816      	bhi.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d01d      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80090ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090ee:	d111      	bne.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3304      	adds	r3, #4
 80090f4:	2101      	movs	r1, #1
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 ff70 	bl	8009fdc <RCCEx_PLL2_Config>
 80090fc:	4603      	mov	r3, r0
 80090fe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009100:	e012      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	3324      	adds	r3, #36	; 0x24
 8009106:	2101      	movs	r1, #1
 8009108:	4618      	mov	r0, r3
 800910a:	f001 f819 	bl	800a140 <RCCEx_PLL3_Config>
 800910e:	4603      	mov	r3, r0
 8009110:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009112:	e009      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	75fb      	strb	r3, [r7, #23]
      break;
 8009118:	e006      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800911a:	bf00      	nop
 800911c:	e004      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800911e:	bf00      	nop
 8009120:	e002      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009122:	bf00      	nop
 8009124:	e000      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009128:	7dfb      	ldrb	r3, [r7, #23]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d10a      	bne.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800912e:	4b2c      	ldr	r3, [pc, #176]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009132:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800913c:	4928      	ldr	r1, [pc, #160]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800913e:	4313      	orrs	r3, r2
 8009140:	658b      	str	r3, [r1, #88]	; 0x58
 8009142:	e001      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009144:	7dfb      	ldrb	r3, [r7, #23]
 8009146:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009150:	2b00      	cmp	r3, #0
 8009152:	d02f      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800915c:	d00e      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800915e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009162:	d814      	bhi.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009164:	2b00      	cmp	r3, #0
 8009166:	d015      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009168:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800916c:	d10f      	bne.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800916e:	4b1c      	ldr	r3, [pc, #112]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009172:	4a1b      	ldr	r2, [pc, #108]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009178:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800917a:	e00c      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	3304      	adds	r3, #4
 8009180:	2101      	movs	r1, #1
 8009182:	4618      	mov	r0, r3
 8009184:	f000 ff2a 	bl	8009fdc <RCCEx_PLL2_Config>
 8009188:	4603      	mov	r3, r0
 800918a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800918c:	e003      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	75fb      	strb	r3, [r7, #23]
      break;
 8009192:	e000      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009196:	7dfb      	ldrb	r3, [r7, #23]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d109      	bne.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800919c:	4b10      	ldr	r3, [pc, #64]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800919e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091a8:	490d      	ldr	r1, [pc, #52]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80091aa:	4313      	orrs	r3, r2
 80091ac:	650b      	str	r3, [r1, #80]	; 0x50
 80091ae:	e001      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b0:	7dfb      	ldrb	r3, [r7, #23]
 80091b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d034      	beq.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091c4:	2b03      	cmp	r3, #3
 80091c6:	d81d      	bhi.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80091c8:	a201      	add	r2, pc, #4	; (adr r2, 80091d0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80091ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ce:	bf00      	nop
 80091d0:	0800920b 	.word	0x0800920b
 80091d4:	080091e5 	.word	0x080091e5
 80091d8:	080091f3 	.word	0x080091f3
 80091dc:	0800920b 	.word	0x0800920b
 80091e0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091e4:	4bb1      	ldr	r3, [pc, #708]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80091e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e8:	4ab0      	ldr	r2, [pc, #704]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80091ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80091f0:	e00c      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	3304      	adds	r3, #4
 80091f6:	2102      	movs	r1, #2
 80091f8:	4618      	mov	r0, r3
 80091fa:	f000 feef 	bl	8009fdc <RCCEx_PLL2_Config>
 80091fe:	4603      	mov	r3, r0
 8009200:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009202:	e003      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	75fb      	strb	r3, [r7, #23]
      break;
 8009208:	e000      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800920a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800920c:	7dfb      	ldrb	r3, [r7, #23]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d109      	bne.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009212:	4ba6      	ldr	r3, [pc, #664]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009216:	f023 0203 	bic.w	r2, r3, #3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800921e:	49a3      	ldr	r1, [pc, #652]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009220:	4313      	orrs	r3, r2
 8009222:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009224:	e001      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009226:	7dfb      	ldrb	r3, [r7, #23]
 8009228:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009232:	2b00      	cmp	r3, #0
 8009234:	f000 8086 	beq.w	8009344 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009238:	4b9d      	ldr	r3, [pc, #628]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a9c      	ldr	r2, [pc, #624]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800923e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009242:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009244:	f7fb fc86 	bl	8004b54 <HAL_GetTick>
 8009248:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800924a:	e009      	b.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800924c:	f7fb fc82 	bl	8004b54 <HAL_GetTick>
 8009250:	4602      	mov	r2, r0
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	2b64      	cmp	r3, #100	; 0x64
 8009258:	d902      	bls.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800925a:	2303      	movs	r3, #3
 800925c:	75fb      	strb	r3, [r7, #23]
        break;
 800925e:	e005      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009260:	4b93      	ldr	r3, [pc, #588]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009268:	2b00      	cmp	r3, #0
 800926a:	d0ef      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800926c:	7dfb      	ldrb	r3, [r7, #23]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d166      	bne.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009272:	4b8e      	ldr	r3, [pc, #568]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009274:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800927c:	4053      	eors	r3, r2
 800927e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009282:	2b00      	cmp	r3, #0
 8009284:	d013      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009286:	4b89      	ldr	r3, [pc, #548]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800928a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800928e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009290:	4b86      	ldr	r3, [pc, #536]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009294:	4a85      	ldr	r2, [pc, #532]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800929a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800929c:	4b83      	ldr	r3, [pc, #524]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800929e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a0:	4a82      	ldr	r2, [pc, #520]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092a6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80092a8:	4a80      	ldr	r2, [pc, #512]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092b8:	d115      	bne.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092ba:	f7fb fc4b 	bl	8004b54 <HAL_GetTick>
 80092be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092c0:	e00b      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092c2:	f7fb fc47 	bl	8004b54 <HAL_GetTick>
 80092c6:	4602      	mov	r2, r0
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d902      	bls.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80092d4:	2303      	movs	r3, #3
 80092d6:	75fb      	strb	r3, [r7, #23]
            break;
 80092d8:	e005      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092da:	4b74      	ldr	r3, [pc, #464]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092de:	f003 0302 	and.w	r3, r3, #2
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d0ed      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80092e6:	7dfb      	ldrb	r3, [r7, #23]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d126      	bne.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092fa:	d10d      	bne.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80092fc:	4b6b      	ldr	r3, [pc, #428]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800930a:	0919      	lsrs	r1, r3, #4
 800930c:	4b69      	ldr	r3, [pc, #420]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800930e:	400b      	ands	r3, r1
 8009310:	4966      	ldr	r1, [pc, #408]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009312:	4313      	orrs	r3, r2
 8009314:	610b      	str	r3, [r1, #16]
 8009316:	e005      	b.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009318:	4b64      	ldr	r3, [pc, #400]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	4a63      	ldr	r2, [pc, #396]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800931e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009322:	6113      	str	r3, [r2, #16]
 8009324:	4b61      	ldr	r3, [pc, #388]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009326:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800932e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009332:	495e      	ldr	r1, [pc, #376]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009334:	4313      	orrs	r3, r2
 8009336:	670b      	str	r3, [r1, #112]	; 0x70
 8009338:	e004      	b.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800933a:	7dfb      	ldrb	r3, [r7, #23]
 800933c:	75bb      	strb	r3, [r7, #22]
 800933e:	e001      	b.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009340:	7dfb      	ldrb	r3, [r7, #23]
 8009342:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	2b00      	cmp	r3, #0
 800934e:	d07e      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009354:	2b28      	cmp	r3, #40	; 0x28
 8009356:	d867      	bhi.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8009358:	a201      	add	r2, pc, #4	; (adr r2, 8009360 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800935a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935e:	bf00      	nop
 8009360:	0800942f 	.word	0x0800942f
 8009364:	08009429 	.word	0x08009429
 8009368:	08009429 	.word	0x08009429
 800936c:	08009429 	.word	0x08009429
 8009370:	08009429 	.word	0x08009429
 8009374:	08009429 	.word	0x08009429
 8009378:	08009429 	.word	0x08009429
 800937c:	08009429 	.word	0x08009429
 8009380:	08009405 	.word	0x08009405
 8009384:	08009429 	.word	0x08009429
 8009388:	08009429 	.word	0x08009429
 800938c:	08009429 	.word	0x08009429
 8009390:	08009429 	.word	0x08009429
 8009394:	08009429 	.word	0x08009429
 8009398:	08009429 	.word	0x08009429
 800939c:	08009429 	.word	0x08009429
 80093a0:	08009417 	.word	0x08009417
 80093a4:	08009429 	.word	0x08009429
 80093a8:	08009429 	.word	0x08009429
 80093ac:	08009429 	.word	0x08009429
 80093b0:	08009429 	.word	0x08009429
 80093b4:	08009429 	.word	0x08009429
 80093b8:	08009429 	.word	0x08009429
 80093bc:	08009429 	.word	0x08009429
 80093c0:	0800942f 	.word	0x0800942f
 80093c4:	08009429 	.word	0x08009429
 80093c8:	08009429 	.word	0x08009429
 80093cc:	08009429 	.word	0x08009429
 80093d0:	08009429 	.word	0x08009429
 80093d4:	08009429 	.word	0x08009429
 80093d8:	08009429 	.word	0x08009429
 80093dc:	08009429 	.word	0x08009429
 80093e0:	0800942f 	.word	0x0800942f
 80093e4:	08009429 	.word	0x08009429
 80093e8:	08009429 	.word	0x08009429
 80093ec:	08009429 	.word	0x08009429
 80093f0:	08009429 	.word	0x08009429
 80093f4:	08009429 	.word	0x08009429
 80093f8:	08009429 	.word	0x08009429
 80093fc:	08009429 	.word	0x08009429
 8009400:	0800942f 	.word	0x0800942f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	3304      	adds	r3, #4
 8009408:	2101      	movs	r1, #1
 800940a:	4618      	mov	r0, r3
 800940c:	f000 fde6 	bl	8009fdc <RCCEx_PLL2_Config>
 8009410:	4603      	mov	r3, r0
 8009412:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009414:	e00c      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	3324      	adds	r3, #36	; 0x24
 800941a:	2101      	movs	r1, #1
 800941c:	4618      	mov	r0, r3
 800941e:	f000 fe8f 	bl	800a140 <RCCEx_PLL3_Config>
 8009422:	4603      	mov	r3, r0
 8009424:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009426:	e003      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	75fb      	strb	r3, [r7, #23]
      break;
 800942c:	e000      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800942e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009430:	7dfb      	ldrb	r3, [r7, #23]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d109      	bne.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009436:	4b1d      	ldr	r3, [pc, #116]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800943a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009442:	491a      	ldr	r1, [pc, #104]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009444:	4313      	orrs	r3, r2
 8009446:	654b      	str	r3, [r1, #84]	; 0x54
 8009448:	e001      	b.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800944a:	7dfb      	ldrb	r3, [r7, #23]
 800944c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f003 0302 	and.w	r3, r3, #2
 8009456:	2b00      	cmp	r3, #0
 8009458:	d03e      	beq.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800945e:	2b05      	cmp	r3, #5
 8009460:	d820      	bhi.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8009462:	a201      	add	r2, pc, #4	; (adr r2, 8009468 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8009464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009468:	080094b9 	.word	0x080094b9
 800946c:	08009481 	.word	0x08009481
 8009470:	08009493 	.word	0x08009493
 8009474:	080094b9 	.word	0x080094b9
 8009478:	080094b9 	.word	0x080094b9
 800947c:	080094b9 	.word	0x080094b9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	3304      	adds	r3, #4
 8009484:	2101      	movs	r1, #1
 8009486:	4618      	mov	r0, r3
 8009488:	f000 fda8 	bl	8009fdc <RCCEx_PLL2_Config>
 800948c:	4603      	mov	r3, r0
 800948e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009490:	e013      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	3324      	adds	r3, #36	; 0x24
 8009496:	2101      	movs	r1, #1
 8009498:	4618      	mov	r0, r3
 800949a:	f000 fe51 	bl	800a140 <RCCEx_PLL3_Config>
 800949e:	4603      	mov	r3, r0
 80094a0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80094a2:	e00a      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	75fb      	strb	r3, [r7, #23]
      break;
 80094a8:	e007      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80094aa:	bf00      	nop
 80094ac:	58024400 	.word	0x58024400
 80094b0:	58024800 	.word	0x58024800
 80094b4:	00ffffcf 	.word	0x00ffffcf
      break;
 80094b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d109      	bne.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80094c0:	4b9f      	ldr	r3, [pc, #636]	; (8009740 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80094c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094c4:	f023 0207 	bic.w	r2, r3, #7
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094cc:	499c      	ldr	r1, [pc, #624]	; (8009740 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80094ce:	4313      	orrs	r3, r2
 80094d0:	654b      	str	r3, [r1, #84]	; 0x54
 80094d2:	e001      	b.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094d4:	7dfb      	ldrb	r3, [r7, #23]
 80094d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 0304 	and.w	r3, r3, #4
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d039      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094ea:	2b05      	cmp	r3, #5
 80094ec:	d820      	bhi.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80094ee:	a201      	add	r2, pc, #4	; (adr r2, 80094f4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80094f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f4:	08009537 	.word	0x08009537
 80094f8:	0800950d 	.word	0x0800950d
 80094fc:	0800951f 	.word	0x0800951f
 8009500:	08009537 	.word	0x08009537
 8009504:	08009537 	.word	0x08009537
 8009508:	08009537 	.word	0x08009537
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	3304      	adds	r3, #4
 8009510:	2101      	movs	r1, #1
 8009512:	4618      	mov	r0, r3
 8009514:	f000 fd62 	bl	8009fdc <RCCEx_PLL2_Config>
 8009518:	4603      	mov	r3, r0
 800951a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800951c:	e00c      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	3324      	adds	r3, #36	; 0x24
 8009522:	2101      	movs	r1, #1
 8009524:	4618      	mov	r0, r3
 8009526:	f000 fe0b 	bl	800a140 <RCCEx_PLL3_Config>
 800952a:	4603      	mov	r3, r0
 800952c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800952e:	e003      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	75fb      	strb	r3, [r7, #23]
      break;
 8009534:	e000      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8009536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009538:	7dfb      	ldrb	r3, [r7, #23]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10a      	bne.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800953e:	4b80      	ldr	r3, [pc, #512]	; (8009740 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009542:	f023 0207 	bic.w	r2, r3, #7
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800954c:	497c      	ldr	r1, [pc, #496]	; (8009740 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800954e:	4313      	orrs	r3, r2
 8009550:	658b      	str	r3, [r1, #88]	; 0x58
 8009552:	e001      	b.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009554:	7dfb      	ldrb	r3, [r7, #23]
 8009556:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 0320 	and.w	r3, r3, #32
 8009560:	2b00      	cmp	r3, #0
 8009562:	d04b      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800956a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800956e:	d02e      	beq.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x962>
 8009570:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009574:	d828      	bhi.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800957a:	d02a      	beq.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800957c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009580:	d822      	bhi.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009582:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009586:	d026      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009588:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800958c:	d81c      	bhi.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800958e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009592:	d010      	beq.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8009594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009598:	d816      	bhi.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800959a:	2b00      	cmp	r3, #0
 800959c:	d01d      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800959e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095a2:	d111      	bne.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	3304      	adds	r3, #4
 80095a8:	2100      	movs	r1, #0
 80095aa:	4618      	mov	r0, r3
 80095ac:	f000 fd16 	bl	8009fdc <RCCEx_PLL2_Config>
 80095b0:	4603      	mov	r3, r0
 80095b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80095b4:	e012      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	3324      	adds	r3, #36	; 0x24
 80095ba:	2102      	movs	r1, #2
 80095bc:	4618      	mov	r0, r3
 80095be:	f000 fdbf 	bl	800a140 <RCCEx_PLL3_Config>
 80095c2:	4603      	mov	r3, r0
 80095c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80095c6:	e009      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	75fb      	strb	r3, [r7, #23]
      break;
 80095cc:	e006      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80095ce:	bf00      	nop
 80095d0:	e004      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80095d2:	bf00      	nop
 80095d4:	e002      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80095d6:	bf00      	nop
 80095d8:	e000      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80095da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095dc:	7dfb      	ldrb	r3, [r7, #23]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d10a      	bne.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80095e2:	4b57      	ldr	r3, [pc, #348]	; (8009740 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80095e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095f0:	4953      	ldr	r1, [pc, #332]	; (8009740 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80095f2:	4313      	orrs	r3, r2
 80095f4:	654b      	str	r3, [r1, #84]	; 0x54
 80095f6:	e001      	b.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095f8:	7dfb      	ldrb	r3, [r7, #23]
 80095fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009604:	2b00      	cmp	r3, #0
 8009606:	d04b      	beq.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800960e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009612:	d02e      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8009614:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009618:	d828      	bhi.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800961a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800961e:	d02a      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009624:	d822      	bhi.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009626:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800962a:	d026      	beq.n	800967a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800962c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009630:	d81c      	bhi.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009636:	d010      	beq.n	800965a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8009638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800963c:	d816      	bhi.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800963e:	2b00      	cmp	r3, #0
 8009640:	d01d      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009646:	d111      	bne.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	3304      	adds	r3, #4
 800964c:	2100      	movs	r1, #0
 800964e:	4618      	mov	r0, r3
 8009650:	f000 fcc4 	bl	8009fdc <RCCEx_PLL2_Config>
 8009654:	4603      	mov	r3, r0
 8009656:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009658:	e012      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	3324      	adds	r3, #36	; 0x24
 800965e:	2102      	movs	r1, #2
 8009660:	4618      	mov	r0, r3
 8009662:	f000 fd6d 	bl	800a140 <RCCEx_PLL3_Config>
 8009666:	4603      	mov	r3, r0
 8009668:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800966a:	e009      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	75fb      	strb	r3, [r7, #23]
      break;
 8009670:	e006      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009672:	bf00      	nop
 8009674:	e004      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009676:	bf00      	nop
 8009678:	e002      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800967a:	bf00      	nop
 800967c:	e000      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800967e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009680:	7dfb      	ldrb	r3, [r7, #23]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10a      	bne.n	800969c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009686:	4b2e      	ldr	r3, [pc, #184]	; (8009740 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800968a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009694:	492a      	ldr	r1, [pc, #168]	; (8009740 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009696:	4313      	orrs	r3, r2
 8009698:	658b      	str	r3, [r1, #88]	; 0x58
 800969a:	e001      	b.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800969c:	7dfb      	ldrb	r3, [r7, #23]
 800969e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d04d      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80096b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80096b6:	d02e      	beq.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80096b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80096bc:	d828      	bhi.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80096be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096c2:	d02a      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80096c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096c8:	d822      	bhi.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80096ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80096ce:	d026      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80096d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80096d4:	d81c      	bhi.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80096d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096da:	d010      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80096dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096e0:	d816      	bhi.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d01d      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80096e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096ea:	d111      	bne.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	3304      	adds	r3, #4
 80096f0:	2100      	movs	r1, #0
 80096f2:	4618      	mov	r0, r3
 80096f4:	f000 fc72 	bl	8009fdc <RCCEx_PLL2_Config>
 80096f8:	4603      	mov	r3, r0
 80096fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80096fc:	e012      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	3324      	adds	r3, #36	; 0x24
 8009702:	2102      	movs	r1, #2
 8009704:	4618      	mov	r0, r3
 8009706:	f000 fd1b 	bl	800a140 <RCCEx_PLL3_Config>
 800970a:	4603      	mov	r3, r0
 800970c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800970e:	e009      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	75fb      	strb	r3, [r7, #23]
      break;
 8009714:	e006      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009716:	bf00      	nop
 8009718:	e004      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800971a:	bf00      	nop
 800971c:	e002      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800971e:	bf00      	nop
 8009720:	e000      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009722:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009724:	7dfb      	ldrb	r3, [r7, #23]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10c      	bne.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800972a:	4b05      	ldr	r3, [pc, #20]	; (8009740 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800972c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800972e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009738:	4901      	ldr	r1, [pc, #4]	; (8009740 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800973a:	4313      	orrs	r3, r2
 800973c:	658b      	str	r3, [r1, #88]	; 0x58
 800973e:	e003      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009740:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009744:	7dfb      	ldrb	r3, [r7, #23]
 8009746:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 0308 	and.w	r3, r3, #8
 8009750:	2b00      	cmp	r3, #0
 8009752:	d018      	beq.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800975c:	d10a      	bne.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	3324      	adds	r3, #36	; 0x24
 8009762:	2102      	movs	r1, #2
 8009764:	4618      	mov	r0, r3
 8009766:	f000 fceb 	bl	800a140 <RCCEx_PLL3_Config>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009774:	4b8a      	ldr	r3, [pc, #552]	; (80099a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009778:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009780:	4987      	ldr	r1, [pc, #540]	; (80099a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009782:	4313      	orrs	r3, r2
 8009784:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f003 0310 	and.w	r3, r3, #16
 800978e:	2b00      	cmp	r3, #0
 8009790:	d01a      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800979c:	d10a      	bne.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	3324      	adds	r3, #36	; 0x24
 80097a2:	2102      	movs	r1, #2
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 fccb 	bl	800a140 <RCCEx_PLL3_Config>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80097b4:	4b7a      	ldr	r3, [pc, #488]	; (80099a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097c2:	4977      	ldr	r1, [pc, #476]	; (80099a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097c4:	4313      	orrs	r3, r2
 80097c6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d034      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097de:	d01d      	beq.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80097e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097e4:	d817      	bhi.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d003      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80097ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097ee:	d009      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80097f0:	e011      	b.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	3304      	adds	r3, #4
 80097f6:	2100      	movs	r1, #0
 80097f8:	4618      	mov	r0, r3
 80097fa:	f000 fbef 	bl	8009fdc <RCCEx_PLL2_Config>
 80097fe:	4603      	mov	r3, r0
 8009800:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009802:	e00c      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	3324      	adds	r3, #36	; 0x24
 8009808:	2102      	movs	r1, #2
 800980a:	4618      	mov	r0, r3
 800980c:	f000 fc98 	bl	800a140 <RCCEx_PLL3_Config>
 8009810:	4603      	mov	r3, r0
 8009812:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009814:	e003      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	75fb      	strb	r3, [r7, #23]
      break;
 800981a:	e000      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800981c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800981e:	7dfb      	ldrb	r3, [r7, #23]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10a      	bne.n	800983a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009824:	4b5e      	ldr	r3, [pc, #376]	; (80099a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009828:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009832:	495b      	ldr	r1, [pc, #364]	; (80099a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009834:	4313      	orrs	r3, r2
 8009836:	658b      	str	r3, [r1, #88]	; 0x58
 8009838:	e001      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800983a:	7dfb      	ldrb	r3, [r7, #23]
 800983c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009846:	2b00      	cmp	r3, #0
 8009848:	d033      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009850:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009854:	d01c      	beq.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009856:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800985a:	d816      	bhi.n	800988a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800985c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009860:	d003      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009862:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009866:	d007      	beq.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009868:	e00f      	b.n	800988a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800986a:	4b4d      	ldr	r3, [pc, #308]	; (80099a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800986c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986e:	4a4c      	ldr	r2, [pc, #304]	; (80099a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009874:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009876:	e00c      	b.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	3324      	adds	r3, #36	; 0x24
 800987c:	2101      	movs	r1, #1
 800987e:	4618      	mov	r0, r3
 8009880:	f000 fc5e 	bl	800a140 <RCCEx_PLL3_Config>
 8009884:	4603      	mov	r3, r0
 8009886:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009888:	e003      	b.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	75fb      	strb	r3, [r7, #23]
      break;
 800988e:	e000      	b.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8009890:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009892:	7dfb      	ldrb	r3, [r7, #23]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d10a      	bne.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009898:	4b41      	ldr	r3, [pc, #260]	; (80099a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800989a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800989c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098a6:	493e      	ldr	r1, [pc, #248]	; (80099a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098a8:	4313      	orrs	r3, r2
 80098aa:	654b      	str	r3, [r1, #84]	; 0x54
 80098ac:	e001      	b.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ae:	7dfb      	ldrb	r3, [r7, #23]
 80098b0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d029      	beq.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d003      	beq.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80098c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098ca:	d007      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80098cc:	e00f      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098ce:	4b34      	ldr	r3, [pc, #208]	; (80099a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d2:	4a33      	ldr	r2, [pc, #204]	; (80099a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80098da:	e00b      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	3304      	adds	r3, #4
 80098e0:	2102      	movs	r1, #2
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 fb7a 	bl	8009fdc <RCCEx_PLL2_Config>
 80098e8:	4603      	mov	r3, r0
 80098ea:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80098ec:	e002      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	75fb      	strb	r3, [r7, #23]
      break;
 80098f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098f4:	7dfb      	ldrb	r3, [r7, #23]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d109      	bne.n	800990e <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80098fa:	4b29      	ldr	r3, [pc, #164]	; (80099a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009906:	4926      	ldr	r1, [pc, #152]	; (80099a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009908:	4313      	orrs	r3, r2
 800990a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800990c:	e001      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800990e:	7dfb      	ldrb	r3, [r7, #23]
 8009910:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00a      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	3324      	adds	r3, #36	; 0x24
 8009922:	2102      	movs	r1, #2
 8009924:	4618      	mov	r0, r3
 8009926:	f000 fc0b 	bl	800a140 <RCCEx_PLL3_Config>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d033      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009944:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009948:	d017      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800994a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800994e:	d811      	bhi.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009954:	d013      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8009956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800995a:	d80b      	bhi.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800995c:	2b00      	cmp	r3, #0
 800995e:	d010      	beq.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8009960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009964:	d106      	bne.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009966:	4b0e      	ldr	r3, [pc, #56]	; (80099a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996a:	4a0d      	ldr	r2, [pc, #52]	; (80099a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800996c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009970:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009972:	e007      	b.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	75fb      	strb	r3, [r7, #23]
      break;
 8009978:	e004      	b.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800997a:	bf00      	nop
 800997c:	e002      	b.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800997e:	bf00      	nop
 8009980:	e000      	b.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009982:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009984:	7dfb      	ldrb	r3, [r7, #23]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d10c      	bne.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800998a:	4b05      	ldr	r3, [pc, #20]	; (80099a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800998c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800998e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009996:	4902      	ldr	r1, [pc, #8]	; (80099a0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009998:	4313      	orrs	r3, r2
 800999a:	654b      	str	r3, [r1, #84]	; 0x54
 800999c:	e004      	b.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800999e:	bf00      	nop
 80099a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099a4:	7dfb      	ldrb	r3, [r7, #23]
 80099a6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d008      	beq.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80099b4:	4b29      	ldr	r3, [pc, #164]	; (8009a5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099c0:	4926      	ldr	r1, [pc, #152]	; (8009a5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d008      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80099d2:	4b22      	ldr	r3, [pc, #136]	; (8009a5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099de:	491f      	ldr	r1, [pc, #124]	; (8009a5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099e0:	4313      	orrs	r3, r2
 80099e2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00d      	beq.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80099f0:	4b1a      	ldr	r3, [pc, #104]	; (8009a5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	4a19      	ldr	r2, [pc, #100]	; (8009a5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80099fa:	6113      	str	r3, [r2, #16]
 80099fc:	4b17      	ldr	r3, [pc, #92]	; (8009a5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099fe:	691a      	ldr	r2, [r3, #16]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a06:	4915      	ldr	r1, [pc, #84]	; (8009a5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	da08      	bge.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009a14:	4b11      	ldr	r3, [pc, #68]	; (8009a5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a18:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a20:	490e      	ldr	r1, [pc, #56]	; (8009a5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a22:	4313      	orrs	r3, r2
 8009a24:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d009      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009a32:	4b0a      	ldr	r3, [pc, #40]	; (8009a5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a40:	4906      	ldr	r1, [pc, #24]	; (8009a5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a42:	4313      	orrs	r3, r2
 8009a44:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009a46:	7dbb      	ldrb	r3, [r7, #22]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d101      	bne.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	e000      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009a50:	2301      	movs	r3, #1
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3718      	adds	r7, #24
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	58024400 	.word	0x58024400

08009a60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009a64:	f7ff f8a6 	bl	8008bb4 <HAL_RCC_GetHCLKFreq>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	4b06      	ldr	r3, [pc, #24]	; (8009a84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009a6c:	6a1b      	ldr	r3, [r3, #32]
 8009a6e:	091b      	lsrs	r3, r3, #4
 8009a70:	f003 0307 	and.w	r3, r3, #7
 8009a74:	4904      	ldr	r1, [pc, #16]	; (8009a88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009a76:	5ccb      	ldrb	r3, [r1, r3]
 8009a78:	f003 031f 	and.w	r3, r3, #31
 8009a7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	58024400 	.word	0x58024400
 8009a88:	0800e1c4 	.word	0x0800e1c4

08009a8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b089      	sub	sp, #36	; 0x24
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a94:	4ba1      	ldr	r3, [pc, #644]	; (8009d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a98:	f003 0303 	and.w	r3, r3, #3
 8009a9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009a9e:	4b9f      	ldr	r3, [pc, #636]	; (8009d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa2:	0b1b      	lsrs	r3, r3, #12
 8009aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009aa8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009aaa:	4b9c      	ldr	r3, [pc, #624]	; (8009d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aae:	091b      	lsrs	r3, r3, #4
 8009ab0:	f003 0301 	and.w	r3, r3, #1
 8009ab4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009ab6:	4b99      	ldr	r3, [pc, #612]	; (8009d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aba:	08db      	lsrs	r3, r3, #3
 8009abc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ac0:	693a      	ldr	r2, [r7, #16]
 8009ac2:	fb02 f303 	mul.w	r3, r2, r3
 8009ac6:	ee07 3a90 	vmov	s15, r3
 8009aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ace:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f000 8111 	beq.w	8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	f000 8083 	beq.w	8009be8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	f200 80a1 	bhi.w	8009c2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d003      	beq.n	8009af8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d056      	beq.n	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009af6:	e099      	b.n	8009c2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009af8:	4b88      	ldr	r3, [pc, #544]	; (8009d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 0320 	and.w	r3, r3, #32
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d02d      	beq.n	8009b60 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b04:	4b85      	ldr	r3, [pc, #532]	; (8009d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	08db      	lsrs	r3, r3, #3
 8009b0a:	f003 0303 	and.w	r3, r3, #3
 8009b0e:	4a84      	ldr	r2, [pc, #528]	; (8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009b10:	fa22 f303 	lsr.w	r3, r2, r3
 8009b14:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	ee07 3a90 	vmov	s15, r3
 8009b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	ee07 3a90 	vmov	s15, r3
 8009b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b2e:	4b7b      	ldr	r3, [pc, #492]	; (8009d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b36:	ee07 3a90 	vmov	s15, r3
 8009b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b5a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009b5e:	e087      	b.n	8009c70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	ee07 3a90 	vmov	s15, r3
 8009b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009d28 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b72:	4b6a      	ldr	r3, [pc, #424]	; (8009d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b7a:	ee07 3a90 	vmov	s15, r3
 8009b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b86:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ba2:	e065      	b.n	8009c70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	ee07 3a90 	vmov	s15, r3
 8009baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bb6:	4b59      	ldr	r3, [pc, #356]	; (8009d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bbe:	ee07 3a90 	vmov	s15, r3
 8009bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009be2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009be6:	e043      	b.n	8009c70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	ee07 3a90 	vmov	s15, r3
 8009bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009d30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bfa:	4b48      	ldr	r3, [pc, #288]	; (8009d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c02:	ee07 3a90 	vmov	s15, r3
 8009c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c2a:	e021      	b.n	8009c70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	ee07 3a90 	vmov	s15, r3
 8009c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c3e:	4b37      	ldr	r3, [pc, #220]	; (8009d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c46:	ee07 3a90 	vmov	s15, r3
 8009c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c52:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009c70:	4b2a      	ldr	r3, [pc, #168]	; (8009d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c74:	0a5b      	lsrs	r3, r3, #9
 8009c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c7a:	ee07 3a90 	vmov	s15, r3
 8009c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c96:	ee17 2a90 	vmov	r2, s15
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009c9e:	4b1f      	ldr	r3, [pc, #124]	; (8009d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca2:	0c1b      	lsrs	r3, r3, #16
 8009ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ca8:	ee07 3a90 	vmov	s15, r3
 8009cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cc4:	ee17 2a90 	vmov	r2, s15
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009ccc:	4b13      	ldr	r3, [pc, #76]	; (8009d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd0:	0e1b      	lsrs	r3, r3, #24
 8009cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cd6:	ee07 3a90 	vmov	s15, r3
 8009cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ce2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ce6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cf2:	ee17 2a90 	vmov	r2, s15
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009cfa:	e008      	b.n	8009d0e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	609a      	str	r2, [r3, #8]
}
 8009d0e:	bf00      	nop
 8009d10:	3724      	adds	r7, #36	; 0x24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	58024400 	.word	0x58024400
 8009d20:	03d09000 	.word	0x03d09000
 8009d24:	46000000 	.word	0x46000000
 8009d28:	4c742400 	.word	0x4c742400
 8009d2c:	4a742400 	.word	0x4a742400
 8009d30:	4af42400 	.word	0x4af42400

08009d34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b089      	sub	sp, #36	; 0x24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d3c:	4ba1      	ldr	r3, [pc, #644]	; (8009fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d40:	f003 0303 	and.w	r3, r3, #3
 8009d44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009d46:	4b9f      	ldr	r3, [pc, #636]	; (8009fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d4a:	0d1b      	lsrs	r3, r3, #20
 8009d4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009d52:	4b9c      	ldr	r3, [pc, #624]	; (8009fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d56:	0a1b      	lsrs	r3, r3, #8
 8009d58:	f003 0301 	and.w	r3, r3, #1
 8009d5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009d5e:	4b99      	ldr	r3, [pc, #612]	; (8009fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d62:	08db      	lsrs	r3, r3, #3
 8009d64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d68:	693a      	ldr	r2, [r7, #16]
 8009d6a:	fb02 f303 	mul.w	r3, r2, r3
 8009d6e:	ee07 3a90 	vmov	s15, r3
 8009d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f000 8111 	beq.w	8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	f000 8083 	beq.w	8009e90 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	f200 80a1 	bhi.w	8009ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d003      	beq.n	8009da0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d056      	beq.n	8009e4c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009d9e:	e099      	b.n	8009ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009da0:	4b88      	ldr	r3, [pc, #544]	; (8009fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 0320 	and.w	r3, r3, #32
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d02d      	beq.n	8009e08 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009dac:	4b85      	ldr	r3, [pc, #532]	; (8009fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	08db      	lsrs	r3, r3, #3
 8009db2:	f003 0303 	and.w	r3, r3, #3
 8009db6:	4a84      	ldr	r2, [pc, #528]	; (8009fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009db8:	fa22 f303 	lsr.w	r3, r2, r3
 8009dbc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	ee07 3a90 	vmov	s15, r3
 8009dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	ee07 3a90 	vmov	s15, r3
 8009dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dd6:	4b7b      	ldr	r3, [pc, #492]	; (8009fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dde:	ee07 3a90 	vmov	s15, r3
 8009de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dea:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e02:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009e06:	e087      	b.n	8009f18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	ee07 3a90 	vmov	s15, r3
 8009e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e1a:	4b6a      	ldr	r3, [pc, #424]	; (8009fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e22:	ee07 3a90 	vmov	s15, r3
 8009e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e4a:	e065      	b.n	8009f18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	ee07 3a90 	vmov	s15, r3
 8009e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e5e:	4b59      	ldr	r3, [pc, #356]	; (8009fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e66:	ee07 3a90 	vmov	s15, r3
 8009e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e72:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e8e:	e043      	b.n	8009f18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	ee07 3a90 	vmov	s15, r3
 8009e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ea2:	4b48      	ldr	r3, [pc, #288]	; (8009fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eaa:	ee07 3a90 	vmov	s15, r3
 8009eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eb6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ece:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ed2:	e021      	b.n	8009f18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	ee07 3a90 	vmov	s15, r3
 8009eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ede:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ee6:	4b37      	ldr	r3, [pc, #220]	; (8009fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eee:	ee07 3a90 	vmov	s15, r3
 8009ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009efa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009f18:	4b2a      	ldr	r3, [pc, #168]	; (8009fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f1c:	0a5b      	lsrs	r3, r3, #9
 8009f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f22:	ee07 3a90 	vmov	s15, r3
 8009f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f32:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f3e:	ee17 2a90 	vmov	r2, s15
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009f46:	4b1f      	ldr	r3, [pc, #124]	; (8009fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4a:	0c1b      	lsrs	r3, r3, #16
 8009f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f50:	ee07 3a90 	vmov	s15, r3
 8009f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f60:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f6c:	ee17 2a90 	vmov	r2, s15
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009f74:	4b13      	ldr	r3, [pc, #76]	; (8009fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f78:	0e1b      	lsrs	r3, r3, #24
 8009f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f7e:	ee07 3a90 	vmov	s15, r3
 8009f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f9a:	ee17 2a90 	vmov	r2, s15
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009fa2:	e008      	b.n	8009fb6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	609a      	str	r2, [r3, #8]
}
 8009fb6:	bf00      	nop
 8009fb8:	3724      	adds	r7, #36	; 0x24
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	58024400 	.word	0x58024400
 8009fc8:	03d09000 	.word	0x03d09000
 8009fcc:	46000000 	.word	0x46000000
 8009fd0:	4c742400 	.word	0x4c742400
 8009fd4:	4a742400 	.word	0x4a742400
 8009fd8:	4af42400 	.word	0x4af42400

08009fdc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009fea:	4b53      	ldr	r3, [pc, #332]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 8009fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fee:	f003 0303 	and.w	r3, r3, #3
 8009ff2:	2b03      	cmp	r3, #3
 8009ff4:	d101      	bne.n	8009ffa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e099      	b.n	800a12e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009ffa:	4b4f      	ldr	r3, [pc, #316]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a4e      	ldr	r2, [pc, #312]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a000:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a004:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a006:	f7fa fda5 	bl	8004b54 <HAL_GetTick>
 800a00a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a00c:	e008      	b.n	800a020 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a00e:	f7fa fda1 	bl	8004b54 <HAL_GetTick>
 800a012:	4602      	mov	r2, r0
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	1ad3      	subs	r3, r2, r3
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d901      	bls.n	800a020 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a01c:	2303      	movs	r3, #3
 800a01e:	e086      	b.n	800a12e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a020:	4b45      	ldr	r3, [pc, #276]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1f0      	bne.n	800a00e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a02c:	4b42      	ldr	r3, [pc, #264]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a030:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	031b      	lsls	r3, r3, #12
 800a03a:	493f      	ldr	r1, [pc, #252]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a03c:	4313      	orrs	r3, r2
 800a03e:	628b      	str	r3, [r1, #40]	; 0x28
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	3b01      	subs	r3, #1
 800a046:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	3b01      	subs	r3, #1
 800a050:	025b      	lsls	r3, r3, #9
 800a052:	b29b      	uxth	r3, r3
 800a054:	431a      	orrs	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	3b01      	subs	r3, #1
 800a05c:	041b      	lsls	r3, r3, #16
 800a05e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a062:	431a      	orrs	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	3b01      	subs	r3, #1
 800a06a:	061b      	lsls	r3, r3, #24
 800a06c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a070:	4931      	ldr	r1, [pc, #196]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a072:	4313      	orrs	r3, r2
 800a074:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a076:	4b30      	ldr	r3, [pc, #192]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	695b      	ldr	r3, [r3, #20]
 800a082:	492d      	ldr	r1, [pc, #180]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a084:	4313      	orrs	r3, r2
 800a086:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a088:	4b2b      	ldr	r3, [pc, #172]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a08c:	f023 0220 	bic.w	r2, r3, #32
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	699b      	ldr	r3, [r3, #24]
 800a094:	4928      	ldr	r1, [pc, #160]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a096:	4313      	orrs	r3, r2
 800a098:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a09a:	4b27      	ldr	r3, [pc, #156]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09e:	4a26      	ldr	r2, [pc, #152]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0a0:	f023 0310 	bic.w	r3, r3, #16
 800a0a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a0a6:	4b24      	ldr	r3, [pc, #144]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0aa:	4b24      	ldr	r3, [pc, #144]	; (800a13c <RCCEx_PLL2_Config+0x160>)
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	69d2      	ldr	r2, [r2, #28]
 800a0b2:	00d2      	lsls	r2, r2, #3
 800a0b4:	4920      	ldr	r1, [pc, #128]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a0ba:	4b1f      	ldr	r3, [pc, #124]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0be:	4a1e      	ldr	r2, [pc, #120]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0c0:	f043 0310 	orr.w	r3, r3, #16
 800a0c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d106      	bne.n	800a0da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a0cc:	4b1a      	ldr	r3, [pc, #104]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d0:	4a19      	ldr	r2, [pc, #100]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0d8:	e00f      	b.n	800a0fa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d106      	bne.n	800a0ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a0e0:	4b15      	ldr	r3, [pc, #84]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e4:	4a14      	ldr	r2, [pc, #80]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0ec:	e005      	b.n	800a0fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a0ee:	4b12      	ldr	r3, [pc, #72]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f2:	4a11      	ldr	r2, [pc, #68]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a0f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a0fa:	4b0f      	ldr	r3, [pc, #60]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a0e      	ldr	r2, [pc, #56]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a100:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a106:	f7fa fd25 	bl	8004b54 <HAL_GetTick>
 800a10a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a10c:	e008      	b.n	800a120 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a10e:	f7fa fd21 	bl	8004b54 <HAL_GetTick>
 800a112:	4602      	mov	r2, r0
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d901      	bls.n	800a120 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a11c:	2303      	movs	r3, #3
 800a11e:	e006      	b.n	800a12e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a120:	4b05      	ldr	r3, [pc, #20]	; (800a138 <RCCEx_PLL2_Config+0x15c>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d0f0      	beq.n	800a10e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3710      	adds	r7, #16
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	58024400 	.word	0x58024400
 800a13c:	ffff0007 	.word	0xffff0007

0800a140 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a14a:	2300      	movs	r3, #0
 800a14c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a14e:	4b53      	ldr	r3, [pc, #332]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a152:	f003 0303 	and.w	r3, r3, #3
 800a156:	2b03      	cmp	r3, #3
 800a158:	d101      	bne.n	800a15e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	e099      	b.n	800a292 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a15e:	4b4f      	ldr	r3, [pc, #316]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a4e      	ldr	r2, [pc, #312]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a16a:	f7fa fcf3 	bl	8004b54 <HAL_GetTick>
 800a16e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a170:	e008      	b.n	800a184 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a172:	f7fa fcef 	bl	8004b54 <HAL_GetTick>
 800a176:	4602      	mov	r2, r0
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	d901      	bls.n	800a184 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a180:	2303      	movs	r3, #3
 800a182:	e086      	b.n	800a292 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a184:	4b45      	ldr	r3, [pc, #276]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d1f0      	bne.n	800a172 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a190:	4b42      	ldr	r3, [pc, #264]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a194:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	051b      	lsls	r3, r3, #20
 800a19e:	493f      	ldr	r1, [pc, #252]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	628b      	str	r3, [r1, #40]	; 0x28
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	025b      	lsls	r3, r3, #9
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	431a      	orrs	r2, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	041b      	lsls	r3, r3, #16
 800a1c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a1c6:	431a      	orrs	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	061b      	lsls	r3, r3, #24
 800a1d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a1d4:	4931      	ldr	r1, [pc, #196]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a1da:	4b30      	ldr	r3, [pc, #192]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	695b      	ldr	r3, [r3, #20]
 800a1e6:	492d      	ldr	r1, [pc, #180]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a1ec:	4b2b      	ldr	r3, [pc, #172]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	699b      	ldr	r3, [r3, #24]
 800a1f8:	4928      	ldr	r1, [pc, #160]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a1fe:	4b27      	ldr	r3, [pc, #156]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a202:	4a26      	ldr	r2, [pc, #152]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a208:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a20a:	4b24      	ldr	r3, [pc, #144]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a20c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a20e:	4b24      	ldr	r3, [pc, #144]	; (800a2a0 <RCCEx_PLL3_Config+0x160>)
 800a210:	4013      	ands	r3, r2
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	69d2      	ldr	r2, [r2, #28]
 800a216:	00d2      	lsls	r2, r2, #3
 800a218:	4920      	ldr	r1, [pc, #128]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a21a:	4313      	orrs	r3, r2
 800a21c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a21e:	4b1f      	ldr	r3, [pc, #124]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a222:	4a1e      	ldr	r2, [pc, #120]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a228:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d106      	bne.n	800a23e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a230:	4b1a      	ldr	r3, [pc, #104]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a234:	4a19      	ldr	r2, [pc, #100]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a236:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a23a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a23c:	e00f      	b.n	800a25e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	2b01      	cmp	r3, #1
 800a242:	d106      	bne.n	800a252 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a244:	4b15      	ldr	r3, [pc, #84]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a248:	4a14      	ldr	r2, [pc, #80]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a24a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a24e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a250:	e005      	b.n	800a25e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a252:	4b12      	ldr	r3, [pc, #72]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a256:	4a11      	ldr	r2, [pc, #68]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a258:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a25c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a25e:	4b0f      	ldr	r3, [pc, #60]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a0e      	ldr	r2, [pc, #56]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a26a:	f7fa fc73 	bl	8004b54 <HAL_GetTick>
 800a26e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a270:	e008      	b.n	800a284 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a272:	f7fa fc6f 	bl	8004b54 <HAL_GetTick>
 800a276:	4602      	mov	r2, r0
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d901      	bls.n	800a284 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a280:	2303      	movs	r3, #3
 800a282:	e006      	b.n	800a292 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a284:	4b05      	ldr	r3, [pc, #20]	; (800a29c <RCCEx_PLL3_Config+0x15c>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d0f0      	beq.n	800a272 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a290:	7bfb      	ldrb	r3, [r7, #15]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	58024400 	.word	0x58024400
 800a2a0:	ffff0007 	.word	0xffff0007

0800a2a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d101      	bne.n	800a2b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e049      	b.n	800a34a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d106      	bne.n	800a2d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7f9 ffa0 	bl	8004210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2202      	movs	r2, #2
 800a2d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	3304      	adds	r3, #4
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	4610      	mov	r0, r2
 800a2e4:	f000 fe0c 	bl	800af00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
	...

0800a354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b01      	cmp	r3, #1
 800a366:	d001      	beq.n	800a36c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a368:	2301      	movs	r3, #1
 800a36a:	e05e      	b.n	800a42a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2202      	movs	r2, #2
 800a370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68da      	ldr	r2, [r3, #12]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f042 0201 	orr.w	r2, r2, #1
 800a382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a2b      	ldr	r2, [pc, #172]	; (800a438 <HAL_TIM_Base_Start_IT+0xe4>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d02c      	beq.n	800a3e8 <HAL_TIM_Base_Start_IT+0x94>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a396:	d027      	beq.n	800a3e8 <HAL_TIM_Base_Start_IT+0x94>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a27      	ldr	r2, [pc, #156]	; (800a43c <HAL_TIM_Base_Start_IT+0xe8>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d022      	beq.n	800a3e8 <HAL_TIM_Base_Start_IT+0x94>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a26      	ldr	r2, [pc, #152]	; (800a440 <HAL_TIM_Base_Start_IT+0xec>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d01d      	beq.n	800a3e8 <HAL_TIM_Base_Start_IT+0x94>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a24      	ldr	r2, [pc, #144]	; (800a444 <HAL_TIM_Base_Start_IT+0xf0>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d018      	beq.n	800a3e8 <HAL_TIM_Base_Start_IT+0x94>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a23      	ldr	r2, [pc, #140]	; (800a448 <HAL_TIM_Base_Start_IT+0xf4>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d013      	beq.n	800a3e8 <HAL_TIM_Base_Start_IT+0x94>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a21      	ldr	r2, [pc, #132]	; (800a44c <HAL_TIM_Base_Start_IT+0xf8>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d00e      	beq.n	800a3e8 <HAL_TIM_Base_Start_IT+0x94>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a20      	ldr	r2, [pc, #128]	; (800a450 <HAL_TIM_Base_Start_IT+0xfc>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d009      	beq.n	800a3e8 <HAL_TIM_Base_Start_IT+0x94>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a1e      	ldr	r2, [pc, #120]	; (800a454 <HAL_TIM_Base_Start_IT+0x100>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d004      	beq.n	800a3e8 <HAL_TIM_Base_Start_IT+0x94>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a1d      	ldr	r2, [pc, #116]	; (800a458 <HAL_TIM_Base_Start_IT+0x104>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d115      	bne.n	800a414 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	689a      	ldr	r2, [r3, #8]
 800a3ee:	4b1b      	ldr	r3, [pc, #108]	; (800a45c <HAL_TIM_Base_Start_IT+0x108>)
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2b06      	cmp	r3, #6
 800a3f8:	d015      	beq.n	800a426 <HAL_TIM_Base_Start_IT+0xd2>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a400:	d011      	beq.n	800a426 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f042 0201 	orr.w	r2, r2, #1
 800a410:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a412:	e008      	b.n	800a426 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f042 0201 	orr.w	r2, r2, #1
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	e000      	b.n	800a428 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a426:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3714      	adds	r7, #20
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	40010000 	.word	0x40010000
 800a43c:	40000400 	.word	0x40000400
 800a440:	40000800 	.word	0x40000800
 800a444:	40000c00 	.word	0x40000c00
 800a448:	40010400 	.word	0x40010400
 800a44c:	40001800 	.word	0x40001800
 800a450:	40014000 	.word	0x40014000
 800a454:	4000e000 	.word	0x4000e000
 800a458:	4000e400 	.word	0x4000e400
 800a45c:	00010007 	.word	0x00010007

0800a460 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d101      	bne.n	800a472 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	e049      	b.n	800a506 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d106      	bne.n	800a48c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7f9 fe7a 	bl	8004180 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2202      	movs	r2, #2
 800a490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	3304      	adds	r3, #4
 800a49c:	4619      	mov	r1, r3
 800a49e:	4610      	mov	r0, r2
 800a4a0:	f000 fd2e 	bl	800af00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
	...

0800a510 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a51a:	2300      	movs	r3, #0
 800a51c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d109      	bne.n	800a538 <HAL_TIM_PWM_Start_IT+0x28>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	bf14      	ite	ne
 800a530:	2301      	movne	r3, #1
 800a532:	2300      	moveq	r3, #0
 800a534:	b2db      	uxtb	r3, r3
 800a536:	e03c      	b.n	800a5b2 <HAL_TIM_PWM_Start_IT+0xa2>
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	2b04      	cmp	r3, #4
 800a53c:	d109      	bne.n	800a552 <HAL_TIM_PWM_Start_IT+0x42>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b01      	cmp	r3, #1
 800a548:	bf14      	ite	ne
 800a54a:	2301      	movne	r3, #1
 800a54c:	2300      	moveq	r3, #0
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	e02f      	b.n	800a5b2 <HAL_TIM_PWM_Start_IT+0xa2>
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	2b08      	cmp	r3, #8
 800a556:	d109      	bne.n	800a56c <HAL_TIM_PWM_Start_IT+0x5c>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	2b01      	cmp	r3, #1
 800a562:	bf14      	ite	ne
 800a564:	2301      	movne	r3, #1
 800a566:	2300      	moveq	r3, #0
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	e022      	b.n	800a5b2 <HAL_TIM_PWM_Start_IT+0xa2>
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	2b0c      	cmp	r3, #12
 800a570:	d109      	bne.n	800a586 <HAL_TIM_PWM_Start_IT+0x76>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	bf14      	ite	ne
 800a57e:	2301      	movne	r3, #1
 800a580:	2300      	moveq	r3, #0
 800a582:	b2db      	uxtb	r3, r3
 800a584:	e015      	b.n	800a5b2 <HAL_TIM_PWM_Start_IT+0xa2>
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	2b10      	cmp	r3, #16
 800a58a:	d109      	bne.n	800a5a0 <HAL_TIM_PWM_Start_IT+0x90>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a592:	b2db      	uxtb	r3, r3
 800a594:	2b01      	cmp	r3, #1
 800a596:	bf14      	ite	ne
 800a598:	2301      	movne	r3, #1
 800a59a:	2300      	moveq	r3, #0
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	e008      	b.n	800a5b2 <HAL_TIM_PWM_Start_IT+0xa2>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	bf14      	ite	ne
 800a5ac:	2301      	movne	r3, #1
 800a5ae:	2300      	moveq	r3, #0
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d001      	beq.n	800a5ba <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e0f6      	b.n	800a7a8 <HAL_TIM_PWM_Start_IT+0x298>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d104      	bne.n	800a5ca <HAL_TIM_PWM_Start_IT+0xba>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2202      	movs	r2, #2
 800a5c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5c8:	e023      	b.n	800a612 <HAL_TIM_PWM_Start_IT+0x102>
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	2b04      	cmp	r3, #4
 800a5ce:	d104      	bne.n	800a5da <HAL_TIM_PWM_Start_IT+0xca>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2202      	movs	r2, #2
 800a5d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5d8:	e01b      	b.n	800a612 <HAL_TIM_PWM_Start_IT+0x102>
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	2b08      	cmp	r3, #8
 800a5de:	d104      	bne.n	800a5ea <HAL_TIM_PWM_Start_IT+0xda>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2202      	movs	r2, #2
 800a5e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5e8:	e013      	b.n	800a612 <HAL_TIM_PWM_Start_IT+0x102>
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	2b0c      	cmp	r3, #12
 800a5ee:	d104      	bne.n	800a5fa <HAL_TIM_PWM_Start_IT+0xea>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2202      	movs	r2, #2
 800a5f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5f8:	e00b      	b.n	800a612 <HAL_TIM_PWM_Start_IT+0x102>
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	2b10      	cmp	r3, #16
 800a5fe:	d104      	bne.n	800a60a <HAL_TIM_PWM_Start_IT+0xfa>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2202      	movs	r2, #2
 800a604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a608:	e003      	b.n	800a612 <HAL_TIM_PWM_Start_IT+0x102>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2202      	movs	r2, #2
 800a60e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	2b0c      	cmp	r3, #12
 800a616:	d841      	bhi.n	800a69c <HAL_TIM_PWM_Start_IT+0x18c>
 800a618:	a201      	add	r2, pc, #4	; (adr r2, 800a620 <HAL_TIM_PWM_Start_IT+0x110>)
 800a61a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61e:	bf00      	nop
 800a620:	0800a655 	.word	0x0800a655
 800a624:	0800a69d 	.word	0x0800a69d
 800a628:	0800a69d 	.word	0x0800a69d
 800a62c:	0800a69d 	.word	0x0800a69d
 800a630:	0800a667 	.word	0x0800a667
 800a634:	0800a69d 	.word	0x0800a69d
 800a638:	0800a69d 	.word	0x0800a69d
 800a63c:	0800a69d 	.word	0x0800a69d
 800a640:	0800a679 	.word	0x0800a679
 800a644:	0800a69d 	.word	0x0800a69d
 800a648:	0800a69d 	.word	0x0800a69d
 800a64c:	0800a69d 	.word	0x0800a69d
 800a650:	0800a68b 	.word	0x0800a68b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	68da      	ldr	r2, [r3, #12]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f042 0202 	orr.w	r2, r2, #2
 800a662:	60da      	str	r2, [r3, #12]
      break;
 800a664:	e01d      	b.n	800a6a2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	68da      	ldr	r2, [r3, #12]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f042 0204 	orr.w	r2, r2, #4
 800a674:	60da      	str	r2, [r3, #12]
      break;
 800a676:	e014      	b.n	800a6a2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68da      	ldr	r2, [r3, #12]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f042 0208 	orr.w	r2, r2, #8
 800a686:	60da      	str	r2, [r3, #12]
      break;
 800a688:	e00b      	b.n	800a6a2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68da      	ldr	r2, [r3, #12]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f042 0210 	orr.w	r2, r2, #16
 800a698:	60da      	str	r2, [r3, #12]
      break;
 800a69a:	e002      	b.n	800a6a2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	73fb      	strb	r3, [r7, #15]
      break;
 800a6a0:	bf00      	nop
  }

  if (status == HAL_OK)
 800a6a2:	7bfb      	ldrb	r3, [r7, #15]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d17e      	bne.n	800a7a6 <HAL_TIM_PWM_Start_IT+0x296>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	6839      	ldr	r1, [r7, #0]
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f000 ffa1 	bl	800b5f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a3d      	ldr	r2, [pc, #244]	; (800a7b0 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d013      	beq.n	800a6e8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a3b      	ldr	r2, [pc, #236]	; (800a7b4 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d00e      	beq.n	800a6e8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a3a      	ldr	r2, [pc, #232]	; (800a7b8 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d009      	beq.n	800a6e8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a38      	ldr	r2, [pc, #224]	; (800a7bc <HAL_TIM_PWM_Start_IT+0x2ac>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d004      	beq.n	800a6e8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a37      	ldr	r2, [pc, #220]	; (800a7c0 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d101      	bne.n	800a6ec <HAL_TIM_PWM_Start_IT+0x1dc>
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e000      	b.n	800a6ee <HAL_TIM_PWM_Start_IT+0x1de>
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d007      	beq.n	800a702 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a700:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a2a      	ldr	r2, [pc, #168]	; (800a7b0 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d02c      	beq.n	800a766 <HAL_TIM_PWM_Start_IT+0x256>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a714:	d027      	beq.n	800a766 <HAL_TIM_PWM_Start_IT+0x256>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a2a      	ldr	r2, [pc, #168]	; (800a7c4 <HAL_TIM_PWM_Start_IT+0x2b4>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d022      	beq.n	800a766 <HAL_TIM_PWM_Start_IT+0x256>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a28      	ldr	r2, [pc, #160]	; (800a7c8 <HAL_TIM_PWM_Start_IT+0x2b8>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d01d      	beq.n	800a766 <HAL_TIM_PWM_Start_IT+0x256>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a27      	ldr	r2, [pc, #156]	; (800a7cc <HAL_TIM_PWM_Start_IT+0x2bc>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d018      	beq.n	800a766 <HAL_TIM_PWM_Start_IT+0x256>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a1e      	ldr	r2, [pc, #120]	; (800a7b4 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d013      	beq.n	800a766 <HAL_TIM_PWM_Start_IT+0x256>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a23      	ldr	r2, [pc, #140]	; (800a7d0 <HAL_TIM_PWM_Start_IT+0x2c0>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d00e      	beq.n	800a766 <HAL_TIM_PWM_Start_IT+0x256>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a1a      	ldr	r2, [pc, #104]	; (800a7b8 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d009      	beq.n	800a766 <HAL_TIM_PWM_Start_IT+0x256>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a1f      	ldr	r2, [pc, #124]	; (800a7d4 <HAL_TIM_PWM_Start_IT+0x2c4>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d004      	beq.n	800a766 <HAL_TIM_PWM_Start_IT+0x256>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a1d      	ldr	r2, [pc, #116]	; (800a7d8 <HAL_TIM_PWM_Start_IT+0x2c8>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d115      	bne.n	800a792 <HAL_TIM_PWM_Start_IT+0x282>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	689a      	ldr	r2, [r3, #8]
 800a76c:	4b1b      	ldr	r3, [pc, #108]	; (800a7dc <HAL_TIM_PWM_Start_IT+0x2cc>)
 800a76e:	4013      	ands	r3, r2
 800a770:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	2b06      	cmp	r3, #6
 800a776:	d015      	beq.n	800a7a4 <HAL_TIM_PWM_Start_IT+0x294>
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a77e:	d011      	beq.n	800a7a4 <HAL_TIM_PWM_Start_IT+0x294>
      {
        __HAL_TIM_ENABLE(htim);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f042 0201 	orr.w	r2, r2, #1
 800a78e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a790:	e008      	b.n	800a7a4 <HAL_TIM_PWM_Start_IT+0x294>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f042 0201 	orr.w	r2, r2, #1
 800a7a0:	601a      	str	r2, [r3, #0]
 800a7a2:	e000      	b.n	800a7a6 <HAL_TIM_PWM_Start_IT+0x296>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7a4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a7a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	40010000 	.word	0x40010000
 800a7b4:	40010400 	.word	0x40010400
 800a7b8:	40014000 	.word	0x40014000
 800a7bc:	40014400 	.word	0x40014400
 800a7c0:	40014800 	.word	0x40014800
 800a7c4:	40000400 	.word	0x40000400
 800a7c8:	40000800 	.word	0x40000800
 800a7cc:	40000c00 	.word	0x40000c00
 800a7d0:	40001800 	.word	0x40001800
 800a7d4:	4000e000 	.word	0x4000e000
 800a7d8:	4000e400 	.word	0x4000e400
 800a7dc:	00010007 	.word	0x00010007

0800a7e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b086      	sub	sp, #24
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e08f      	b.n	800a914 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d106      	bne.n	800a80e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f7f9 fbab 	bl	8003f64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2202      	movs	r2, #2
 800a812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	6899      	ldr	r1, [r3, #8]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	4b3e      	ldr	r3, [pc, #248]	; (800a91c <HAL_TIM_Encoder_Init+0x13c>)
 800a822:	400b      	ands	r3, r1
 800a824:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	3304      	adds	r3, #4
 800a82e:	4619      	mov	r1, r3
 800a830:	4610      	mov	r0, r2
 800a832:	f000 fb65 	bl	800af00 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	699b      	ldr	r3, [r3, #24]
 800a844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	6a1b      	ldr	r3, [r3, #32]
 800a84c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	4313      	orrs	r3, r2
 800a856:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a858:	693a      	ldr	r2, [r7, #16]
 800a85a:	4b31      	ldr	r3, [pc, #196]	; (800a920 <HAL_TIM_Encoder_Init+0x140>)
 800a85c:	4013      	ands	r3, r2
 800a85e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	689a      	ldr	r2, [r3, #8]
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	699b      	ldr	r3, [r3, #24]
 800a868:	021b      	lsls	r3, r3, #8
 800a86a:	4313      	orrs	r3, r2
 800a86c:	693a      	ldr	r2, [r7, #16]
 800a86e:	4313      	orrs	r3, r2
 800a870:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	4b2b      	ldr	r3, [pc, #172]	; (800a924 <HAL_TIM_Encoder_Init+0x144>)
 800a876:	4013      	ands	r3, r2
 800a878:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a87a:	693a      	ldr	r2, [r7, #16]
 800a87c:	4b2a      	ldr	r3, [pc, #168]	; (800a928 <HAL_TIM_Encoder_Init+0x148>)
 800a87e:	4013      	ands	r3, r2
 800a880:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	68da      	ldr	r2, [r3, #12]
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	69db      	ldr	r3, [r3, #28]
 800a88a:	021b      	lsls	r3, r3, #8
 800a88c:	4313      	orrs	r3, r2
 800a88e:	693a      	ldr	r2, [r7, #16]
 800a890:	4313      	orrs	r3, r2
 800a892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	691b      	ldr	r3, [r3, #16]
 800a898:	011a      	lsls	r2, r3, #4
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	6a1b      	ldr	r3, [r3, #32]
 800a89e:	031b      	lsls	r3, r3, #12
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a8ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a8b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	685a      	ldr	r2, [r3, #4]
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	695b      	ldr	r3, [r3, #20]
 800a8c0:	011b      	lsls	r3, r3, #4
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	697a      	ldr	r2, [r7, #20]
 800a8d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	693a      	ldr	r2, [r7, #16]
 800a8d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2201      	movs	r2, #1
 800a906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2201      	movs	r2, #1
 800a90e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3718      	adds	r7, #24
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	fffebff8 	.word	0xfffebff8
 800a920:	fffffcfc 	.word	0xfffffcfc
 800a924:	fffff3f3 	.word	0xfffff3f3
 800a928:	ffff0f0f 	.word	0xffff0f0f

0800a92c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a93c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a944:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a94c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a954:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d110      	bne.n	800a97e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a95c:	7bfb      	ldrb	r3, [r7, #15]
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d102      	bne.n	800a968 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a962:	7b7b      	ldrb	r3, [r7, #13]
 800a964:	2b01      	cmp	r3, #1
 800a966:	d001      	beq.n	800a96c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	e069      	b.n	800aa40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2202      	movs	r2, #2
 800a970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2202      	movs	r2, #2
 800a978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a97c:	e031      	b.n	800a9e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	2b04      	cmp	r3, #4
 800a982:	d110      	bne.n	800a9a6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a984:	7bbb      	ldrb	r3, [r7, #14]
 800a986:	2b01      	cmp	r3, #1
 800a988:	d102      	bne.n	800a990 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a98a:	7b3b      	ldrb	r3, [r7, #12]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d001      	beq.n	800a994 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	e055      	b.n	800aa40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2202      	movs	r2, #2
 800a998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2202      	movs	r2, #2
 800a9a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9a4:	e01d      	b.n	800a9e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a9a6:	7bfb      	ldrb	r3, [r7, #15]
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d108      	bne.n	800a9be <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a9ac:	7bbb      	ldrb	r3, [r7, #14]
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d105      	bne.n	800a9be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a9b2:	7b7b      	ldrb	r3, [r7, #13]
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d102      	bne.n	800a9be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a9b8:	7b3b      	ldrb	r3, [r7, #12]
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d001      	beq.n	800a9c2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e03e      	b.n	800aa40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2202      	movs	r2, #2
 800a9c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2202      	movs	r2, #2
 800a9ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2202      	movs	r2, #2
 800a9d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2202      	movs	r2, #2
 800a9de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d003      	beq.n	800a9f0 <HAL_TIM_Encoder_Start+0xc4>
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	2b04      	cmp	r3, #4
 800a9ec:	d008      	beq.n	800aa00 <HAL_TIM_Encoder_Start+0xd4>
 800a9ee:	e00f      	b.n	800aa10 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f000 fdfd 	bl	800b5f8 <TIM_CCxChannelCmd>
      break;
 800a9fe:	e016      	b.n	800aa2e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2201      	movs	r2, #1
 800aa06:	2104      	movs	r1, #4
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f000 fdf5 	bl	800b5f8 <TIM_CCxChannelCmd>
      break;
 800aa0e:	e00e      	b.n	800aa2e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2201      	movs	r2, #1
 800aa16:	2100      	movs	r1, #0
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f000 fded 	bl	800b5f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2201      	movs	r2, #1
 800aa24:	2104      	movs	r1, #4
 800aa26:	4618      	mov	r0, r3
 800aa28:	f000 fde6 	bl	800b5f8 <TIM_CCxChannelCmd>
      break;
 800aa2c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f042 0201 	orr.w	r2, r2, #1
 800aa3c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800aa3e:	2300      	movs	r3, #0
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3710      	adds	r7, #16
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	691b      	ldr	r3, [r3, #16]
 800aa56:	f003 0302 	and.w	r3, r3, #2
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d122      	bne.n	800aaa4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	f003 0302 	and.w	r3, r3, #2
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	d11b      	bne.n	800aaa4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f06f 0202 	mvn.w	r2, #2
 800aa74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	699b      	ldr	r3, [r3, #24]
 800aa82:	f003 0303 	and.w	r3, r3, #3
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d003      	beq.n	800aa92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 fa1a 	bl	800aec4 <HAL_TIM_IC_CaptureCallback>
 800aa90:	e005      	b.n	800aa9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 fa0c 	bl	800aeb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 fa1d 	bl	800aed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	691b      	ldr	r3, [r3, #16]
 800aaaa:	f003 0304 	and.w	r3, r3, #4
 800aaae:	2b04      	cmp	r3, #4
 800aab0:	d122      	bne.n	800aaf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	f003 0304 	and.w	r3, r3, #4
 800aabc:	2b04      	cmp	r3, #4
 800aabe:	d11b      	bne.n	800aaf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f06f 0204 	mvn.w	r2, #4
 800aac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2202      	movs	r2, #2
 800aace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	699b      	ldr	r3, [r3, #24]
 800aad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d003      	beq.n	800aae6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 f9f0 	bl	800aec4 <HAL_TIM_IC_CaptureCallback>
 800aae4:	e005      	b.n	800aaf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 f9e2 	bl	800aeb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f9f3 	bl	800aed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	f003 0308 	and.w	r3, r3, #8
 800ab02:	2b08      	cmp	r3, #8
 800ab04:	d122      	bne.n	800ab4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	f003 0308 	and.w	r3, r3, #8
 800ab10:	2b08      	cmp	r3, #8
 800ab12:	d11b      	bne.n	800ab4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f06f 0208 	mvn.w	r2, #8
 800ab1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2204      	movs	r2, #4
 800ab22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	69db      	ldr	r3, [r3, #28]
 800ab2a:	f003 0303 	and.w	r3, r3, #3
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d003      	beq.n	800ab3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f9c6 	bl	800aec4 <HAL_TIM_IC_CaptureCallback>
 800ab38:	e005      	b.n	800ab46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 f9b8 	bl	800aeb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 f9c9 	bl	800aed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	f003 0310 	and.w	r3, r3, #16
 800ab56:	2b10      	cmp	r3, #16
 800ab58:	d122      	bne.n	800aba0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	f003 0310 	and.w	r3, r3, #16
 800ab64:	2b10      	cmp	r3, #16
 800ab66:	d11b      	bne.n	800aba0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f06f 0210 	mvn.w	r2, #16
 800ab70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2208      	movs	r2, #8
 800ab76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	69db      	ldr	r3, [r3, #28]
 800ab7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d003      	beq.n	800ab8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f99c 	bl	800aec4 <HAL_TIM_IC_CaptureCallback>
 800ab8c:	e005      	b.n	800ab9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 f98e 	bl	800aeb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 f99f 	bl	800aed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	f003 0301 	and.w	r3, r3, #1
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d10e      	bne.n	800abcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	f003 0301 	and.w	r3, r3, #1
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d107      	bne.n	800abcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f06f 0201 	mvn.w	r2, #1
 800abc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f7f9 fdce 	bl	8004768 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abd6:	2b80      	cmp	r3, #128	; 0x80
 800abd8:	d10e      	bne.n	800abf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abe4:	2b80      	cmp	r3, #128	; 0x80
 800abe6:	d107      	bne.n	800abf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800abf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 fe6c 	bl	800b8d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	691b      	ldr	r3, [r3, #16]
 800abfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac06:	d10e      	bne.n	800ac26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68db      	ldr	r3, [r3, #12]
 800ac0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac12:	2b80      	cmp	r3, #128	; 0x80
 800ac14:	d107      	bne.n	800ac26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 fe5f 	bl	800b8e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac30:	2b40      	cmp	r3, #64	; 0x40
 800ac32:	d10e      	bne.n	800ac52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac3e:	2b40      	cmp	r3, #64	; 0x40
 800ac40:	d107      	bne.n	800ac52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 f94d 	bl	800aeec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	691b      	ldr	r3, [r3, #16]
 800ac58:	f003 0320 	and.w	r3, r3, #32
 800ac5c:	2b20      	cmp	r3, #32
 800ac5e:	d10e      	bne.n	800ac7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	f003 0320 	and.w	r3, r3, #32
 800ac6a:	2b20      	cmp	r3, #32
 800ac6c:	d107      	bne.n	800ac7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f06f 0220 	mvn.w	r2, #32
 800ac76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 fe1f 	bl	800b8bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac7e:	bf00      	nop
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
	...

0800ac88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b086      	sub	sp, #24
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac94:	2300      	movs	r3, #0
 800ac96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d101      	bne.n	800aca6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aca2:	2302      	movs	r3, #2
 800aca4:	e0ff      	b.n	800aea6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2201      	movs	r2, #1
 800acaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2b14      	cmp	r3, #20
 800acb2:	f200 80f0 	bhi.w	800ae96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800acb6:	a201      	add	r2, pc, #4	; (adr r2, 800acbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800acb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acbc:	0800ad11 	.word	0x0800ad11
 800acc0:	0800ae97 	.word	0x0800ae97
 800acc4:	0800ae97 	.word	0x0800ae97
 800acc8:	0800ae97 	.word	0x0800ae97
 800accc:	0800ad51 	.word	0x0800ad51
 800acd0:	0800ae97 	.word	0x0800ae97
 800acd4:	0800ae97 	.word	0x0800ae97
 800acd8:	0800ae97 	.word	0x0800ae97
 800acdc:	0800ad93 	.word	0x0800ad93
 800ace0:	0800ae97 	.word	0x0800ae97
 800ace4:	0800ae97 	.word	0x0800ae97
 800ace8:	0800ae97 	.word	0x0800ae97
 800acec:	0800add3 	.word	0x0800add3
 800acf0:	0800ae97 	.word	0x0800ae97
 800acf4:	0800ae97 	.word	0x0800ae97
 800acf8:	0800ae97 	.word	0x0800ae97
 800acfc:	0800ae15 	.word	0x0800ae15
 800ad00:	0800ae97 	.word	0x0800ae97
 800ad04:	0800ae97 	.word	0x0800ae97
 800ad08:	0800ae97 	.word	0x0800ae97
 800ad0c:	0800ae55 	.word	0x0800ae55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	68b9      	ldr	r1, [r7, #8]
 800ad16:	4618      	mov	r0, r3
 800ad18:	f000 f998 	bl	800b04c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	699a      	ldr	r2, [r3, #24]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f042 0208 	orr.w	r2, r2, #8
 800ad2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	699a      	ldr	r2, [r3, #24]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f022 0204 	bic.w	r2, r2, #4
 800ad3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	6999      	ldr	r1, [r3, #24]
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	691a      	ldr	r2, [r3, #16]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	430a      	orrs	r2, r1
 800ad4c:	619a      	str	r2, [r3, #24]
      break;
 800ad4e:	e0a5      	b.n	800ae9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	68b9      	ldr	r1, [r7, #8]
 800ad56:	4618      	mov	r0, r3
 800ad58:	f000 fa08 	bl	800b16c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	699a      	ldr	r2, [r3, #24]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	699a      	ldr	r2, [r3, #24]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	6999      	ldr	r1, [r3, #24]
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	021a      	lsls	r2, r3, #8
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	430a      	orrs	r2, r1
 800ad8e:	619a      	str	r2, [r3, #24]
      break;
 800ad90:	e084      	b.n	800ae9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	68b9      	ldr	r1, [r7, #8]
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f000 fa71 	bl	800b280 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	69da      	ldr	r2, [r3, #28]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f042 0208 	orr.w	r2, r2, #8
 800adac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	69da      	ldr	r2, [r3, #28]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f022 0204 	bic.w	r2, r2, #4
 800adbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	69d9      	ldr	r1, [r3, #28]
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	691a      	ldr	r2, [r3, #16]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	430a      	orrs	r2, r1
 800adce:	61da      	str	r2, [r3, #28]
      break;
 800add0:	e064      	b.n	800ae9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68b9      	ldr	r1, [r7, #8]
 800add8:	4618      	mov	r0, r3
 800adda:	f000 fad9 	bl	800b390 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	69da      	ldr	r2, [r3, #28]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800adec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	69da      	ldr	r2, [r3, #28]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800adfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	69d9      	ldr	r1, [r3, #28]
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	691b      	ldr	r3, [r3, #16]
 800ae08:	021a      	lsls	r2, r3, #8
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	430a      	orrs	r2, r1
 800ae10:	61da      	str	r2, [r3, #28]
      break;
 800ae12:	e043      	b.n	800ae9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	68b9      	ldr	r1, [r7, #8]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f000 fb22 	bl	800b464 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f042 0208 	orr.w	r2, r2, #8
 800ae2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f022 0204 	bic.w	r2, r2, #4
 800ae3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	691a      	ldr	r2, [r3, #16]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	430a      	orrs	r2, r1
 800ae50:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ae52:	e023      	b.n	800ae9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	68b9      	ldr	r1, [r7, #8]
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f000 fb66 	bl	800b52c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	691b      	ldr	r3, [r3, #16]
 800ae8a:	021a      	lsls	r2, r3, #8
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	430a      	orrs	r2, r1
 800ae92:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ae94:	e002      	b.n	800ae9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	75fb      	strb	r3, [r7, #23]
      break;
 800ae9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aea4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3718      	adds	r7, #24
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop

0800aeb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aeb8:	bf00      	nop
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b083      	sub	sp, #12
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aecc:	bf00      	nop
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aee0:	bf00      	nop
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aef4:	bf00      	nop
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800af00:	b480      	push	{r7}
 800af02:	b085      	sub	sp, #20
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	4a44      	ldr	r2, [pc, #272]	; (800b024 <TIM_Base_SetConfig+0x124>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d013      	beq.n	800af40 <TIM_Base_SetConfig+0x40>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af1e:	d00f      	beq.n	800af40 <TIM_Base_SetConfig+0x40>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4a41      	ldr	r2, [pc, #260]	; (800b028 <TIM_Base_SetConfig+0x128>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d00b      	beq.n	800af40 <TIM_Base_SetConfig+0x40>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a40      	ldr	r2, [pc, #256]	; (800b02c <TIM_Base_SetConfig+0x12c>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d007      	beq.n	800af40 <TIM_Base_SetConfig+0x40>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	4a3f      	ldr	r2, [pc, #252]	; (800b030 <TIM_Base_SetConfig+0x130>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d003      	beq.n	800af40 <TIM_Base_SetConfig+0x40>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a3e      	ldr	r2, [pc, #248]	; (800b034 <TIM_Base_SetConfig+0x134>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d108      	bne.n	800af52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	68fa      	ldr	r2, [r7, #12]
 800af4e:	4313      	orrs	r3, r2
 800af50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	4a33      	ldr	r2, [pc, #204]	; (800b024 <TIM_Base_SetConfig+0x124>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d027      	beq.n	800afaa <TIM_Base_SetConfig+0xaa>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af60:	d023      	beq.n	800afaa <TIM_Base_SetConfig+0xaa>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	4a30      	ldr	r2, [pc, #192]	; (800b028 <TIM_Base_SetConfig+0x128>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d01f      	beq.n	800afaa <TIM_Base_SetConfig+0xaa>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4a2f      	ldr	r2, [pc, #188]	; (800b02c <TIM_Base_SetConfig+0x12c>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d01b      	beq.n	800afaa <TIM_Base_SetConfig+0xaa>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4a2e      	ldr	r2, [pc, #184]	; (800b030 <TIM_Base_SetConfig+0x130>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d017      	beq.n	800afaa <TIM_Base_SetConfig+0xaa>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4a2d      	ldr	r2, [pc, #180]	; (800b034 <TIM_Base_SetConfig+0x134>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d013      	beq.n	800afaa <TIM_Base_SetConfig+0xaa>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4a2c      	ldr	r2, [pc, #176]	; (800b038 <TIM_Base_SetConfig+0x138>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d00f      	beq.n	800afaa <TIM_Base_SetConfig+0xaa>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	4a2b      	ldr	r2, [pc, #172]	; (800b03c <TIM_Base_SetConfig+0x13c>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d00b      	beq.n	800afaa <TIM_Base_SetConfig+0xaa>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4a2a      	ldr	r2, [pc, #168]	; (800b040 <TIM_Base_SetConfig+0x140>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d007      	beq.n	800afaa <TIM_Base_SetConfig+0xaa>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4a29      	ldr	r2, [pc, #164]	; (800b044 <TIM_Base_SetConfig+0x144>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d003      	beq.n	800afaa <TIM_Base_SetConfig+0xaa>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	4a28      	ldr	r2, [pc, #160]	; (800b048 <TIM_Base_SetConfig+0x148>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d108      	bne.n	800afbc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	68db      	ldr	r3, [r3, #12]
 800afb6:	68fa      	ldr	r2, [r7, #12]
 800afb8:	4313      	orrs	r3, r2
 800afba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	695b      	ldr	r3, [r3, #20]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	68fa      	ldr	r2, [r7, #12]
 800afce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	689a      	ldr	r2, [r3, #8]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4a10      	ldr	r2, [pc, #64]	; (800b024 <TIM_Base_SetConfig+0x124>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d00f      	beq.n	800b008 <TIM_Base_SetConfig+0x108>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	4a12      	ldr	r2, [pc, #72]	; (800b034 <TIM_Base_SetConfig+0x134>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d00b      	beq.n	800b008 <TIM_Base_SetConfig+0x108>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4a11      	ldr	r2, [pc, #68]	; (800b038 <TIM_Base_SetConfig+0x138>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d007      	beq.n	800b008 <TIM_Base_SetConfig+0x108>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4a10      	ldr	r2, [pc, #64]	; (800b03c <TIM_Base_SetConfig+0x13c>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d003      	beq.n	800b008 <TIM_Base_SetConfig+0x108>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a0f      	ldr	r2, [pc, #60]	; (800b040 <TIM_Base_SetConfig+0x140>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d103      	bne.n	800b010 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	691a      	ldr	r2, [r3, #16]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2201      	movs	r2, #1
 800b014:	615a      	str	r2, [r3, #20]
}
 800b016:	bf00      	nop
 800b018:	3714      	adds	r7, #20
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	40010000 	.word	0x40010000
 800b028:	40000400 	.word	0x40000400
 800b02c:	40000800 	.word	0x40000800
 800b030:	40000c00 	.word	0x40000c00
 800b034:	40010400 	.word	0x40010400
 800b038:	40014000 	.word	0x40014000
 800b03c:	40014400 	.word	0x40014400
 800b040:	40014800 	.word	0x40014800
 800b044:	4000e000 	.word	0x4000e000
 800b048:	4000e400 	.word	0x4000e400

0800b04c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b087      	sub	sp, #28
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6a1b      	ldr	r3, [r3, #32]
 800b05a:	f023 0201 	bic.w	r2, r3, #1
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a1b      	ldr	r3, [r3, #32]
 800b066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	699b      	ldr	r3, [r3, #24]
 800b072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	4b37      	ldr	r3, [pc, #220]	; (800b154 <TIM_OC1_SetConfig+0x108>)
 800b078:	4013      	ands	r3, r2
 800b07a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f023 0303 	bic.w	r3, r3, #3
 800b082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	4313      	orrs	r3, r2
 800b08c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	f023 0302 	bic.w	r3, r3, #2
 800b094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	689b      	ldr	r3, [r3, #8]
 800b09a:	697a      	ldr	r2, [r7, #20]
 800b09c:	4313      	orrs	r3, r2
 800b09e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	4a2d      	ldr	r2, [pc, #180]	; (800b158 <TIM_OC1_SetConfig+0x10c>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d00f      	beq.n	800b0c8 <TIM_OC1_SetConfig+0x7c>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	4a2c      	ldr	r2, [pc, #176]	; (800b15c <TIM_OC1_SetConfig+0x110>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d00b      	beq.n	800b0c8 <TIM_OC1_SetConfig+0x7c>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4a2b      	ldr	r2, [pc, #172]	; (800b160 <TIM_OC1_SetConfig+0x114>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d007      	beq.n	800b0c8 <TIM_OC1_SetConfig+0x7c>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a2a      	ldr	r2, [pc, #168]	; (800b164 <TIM_OC1_SetConfig+0x118>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d003      	beq.n	800b0c8 <TIM_OC1_SetConfig+0x7c>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4a29      	ldr	r2, [pc, #164]	; (800b168 <TIM_OC1_SetConfig+0x11c>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d10c      	bne.n	800b0e2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	f023 0308 	bic.w	r3, r3, #8
 800b0ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	697a      	ldr	r2, [r7, #20]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	f023 0304 	bic.w	r3, r3, #4
 800b0e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4a1c      	ldr	r2, [pc, #112]	; (800b158 <TIM_OC1_SetConfig+0x10c>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d00f      	beq.n	800b10a <TIM_OC1_SetConfig+0xbe>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4a1b      	ldr	r2, [pc, #108]	; (800b15c <TIM_OC1_SetConfig+0x110>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d00b      	beq.n	800b10a <TIM_OC1_SetConfig+0xbe>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a1a      	ldr	r2, [pc, #104]	; (800b160 <TIM_OC1_SetConfig+0x114>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d007      	beq.n	800b10a <TIM_OC1_SetConfig+0xbe>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a19      	ldr	r2, [pc, #100]	; (800b164 <TIM_OC1_SetConfig+0x118>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d003      	beq.n	800b10a <TIM_OC1_SetConfig+0xbe>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a18      	ldr	r2, [pc, #96]	; (800b168 <TIM_OC1_SetConfig+0x11c>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d111      	bne.n	800b12e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	695b      	ldr	r3, [r3, #20]
 800b11e:	693a      	ldr	r2, [r7, #16]
 800b120:	4313      	orrs	r3, r2
 800b122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	699b      	ldr	r3, [r3, #24]
 800b128:	693a      	ldr	r2, [r7, #16]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	693a      	ldr	r2, [r7, #16]
 800b132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	68fa      	ldr	r2, [r7, #12]
 800b138:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	685a      	ldr	r2, [r3, #4]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	697a      	ldr	r2, [r7, #20]
 800b146:	621a      	str	r2, [r3, #32]
}
 800b148:	bf00      	nop
 800b14a:	371c      	adds	r7, #28
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr
 800b154:	fffeff8f 	.word	0xfffeff8f
 800b158:	40010000 	.word	0x40010000
 800b15c:	40010400 	.word	0x40010400
 800b160:	40014000 	.word	0x40014000
 800b164:	40014400 	.word	0x40014400
 800b168:	40014800 	.word	0x40014800

0800b16c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b087      	sub	sp, #28
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6a1b      	ldr	r3, [r3, #32]
 800b17a:	f023 0210 	bic.w	r2, r3, #16
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6a1b      	ldr	r3, [r3, #32]
 800b186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	699b      	ldr	r3, [r3, #24]
 800b192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	4b34      	ldr	r3, [pc, #208]	; (800b268 <TIM_OC2_SetConfig+0xfc>)
 800b198:	4013      	ands	r3, r2
 800b19a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	021b      	lsls	r3, r3, #8
 800b1aa:	68fa      	ldr	r2, [r7, #12]
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	f023 0320 	bic.w	r3, r3, #32
 800b1b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	011b      	lsls	r3, r3, #4
 800b1be:	697a      	ldr	r2, [r7, #20]
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4a29      	ldr	r2, [pc, #164]	; (800b26c <TIM_OC2_SetConfig+0x100>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d003      	beq.n	800b1d4 <TIM_OC2_SetConfig+0x68>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4a28      	ldr	r2, [pc, #160]	; (800b270 <TIM_OC2_SetConfig+0x104>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d10d      	bne.n	800b1f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	011b      	lsls	r3, r3, #4
 800b1e2:	697a      	ldr	r2, [r7, #20]
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	4a1e      	ldr	r2, [pc, #120]	; (800b26c <TIM_OC2_SetConfig+0x100>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d00f      	beq.n	800b218 <TIM_OC2_SetConfig+0xac>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	4a1d      	ldr	r2, [pc, #116]	; (800b270 <TIM_OC2_SetConfig+0x104>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d00b      	beq.n	800b218 <TIM_OC2_SetConfig+0xac>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	4a1c      	ldr	r2, [pc, #112]	; (800b274 <TIM_OC2_SetConfig+0x108>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d007      	beq.n	800b218 <TIM_OC2_SetConfig+0xac>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4a1b      	ldr	r2, [pc, #108]	; (800b278 <TIM_OC2_SetConfig+0x10c>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d003      	beq.n	800b218 <TIM_OC2_SetConfig+0xac>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	4a1a      	ldr	r2, [pc, #104]	; (800b27c <TIM_OC2_SetConfig+0x110>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d113      	bne.n	800b240 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b21e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b226:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	695b      	ldr	r3, [r3, #20]
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	693a      	ldr	r2, [r7, #16]
 800b230:	4313      	orrs	r3, r2
 800b232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	699b      	ldr	r3, [r3, #24]
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	693a      	ldr	r2, [r7, #16]
 800b23c:	4313      	orrs	r3, r2
 800b23e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	693a      	ldr	r2, [r7, #16]
 800b244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	685a      	ldr	r2, [r3, #4]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	697a      	ldr	r2, [r7, #20]
 800b258:	621a      	str	r2, [r3, #32]
}
 800b25a:	bf00      	nop
 800b25c:	371c      	adds	r7, #28
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	feff8fff 	.word	0xfeff8fff
 800b26c:	40010000 	.word	0x40010000
 800b270:	40010400 	.word	0x40010400
 800b274:	40014000 	.word	0x40014000
 800b278:	40014400 	.word	0x40014400
 800b27c:	40014800 	.word	0x40014800

0800b280 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b280:	b480      	push	{r7}
 800b282:	b087      	sub	sp, #28
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a1b      	ldr	r3, [r3, #32]
 800b28e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6a1b      	ldr	r3, [r3, #32]
 800b29a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	69db      	ldr	r3, [r3, #28]
 800b2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b2a8:	68fa      	ldr	r2, [r7, #12]
 800b2aa:	4b33      	ldr	r3, [pc, #204]	; (800b378 <TIM_OC3_SetConfig+0xf8>)
 800b2ac:	4013      	ands	r3, r2
 800b2ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f023 0303 	bic.w	r3, r3, #3
 800b2b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b2c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	021b      	lsls	r3, r3, #8
 800b2d0:	697a      	ldr	r2, [r7, #20]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a28      	ldr	r2, [pc, #160]	; (800b37c <TIM_OC3_SetConfig+0xfc>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d003      	beq.n	800b2e6 <TIM_OC3_SetConfig+0x66>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a27      	ldr	r2, [pc, #156]	; (800b380 <TIM_OC3_SetConfig+0x100>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d10d      	bne.n	800b302 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b2ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	68db      	ldr	r3, [r3, #12]
 800b2f2:	021b      	lsls	r3, r3, #8
 800b2f4:	697a      	ldr	r2, [r7, #20]
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4a1d      	ldr	r2, [pc, #116]	; (800b37c <TIM_OC3_SetConfig+0xfc>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d00f      	beq.n	800b32a <TIM_OC3_SetConfig+0xaa>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a1c      	ldr	r2, [pc, #112]	; (800b380 <TIM_OC3_SetConfig+0x100>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d00b      	beq.n	800b32a <TIM_OC3_SetConfig+0xaa>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4a1b      	ldr	r2, [pc, #108]	; (800b384 <TIM_OC3_SetConfig+0x104>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d007      	beq.n	800b32a <TIM_OC3_SetConfig+0xaa>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a1a      	ldr	r2, [pc, #104]	; (800b388 <TIM_OC3_SetConfig+0x108>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d003      	beq.n	800b32a <TIM_OC3_SetConfig+0xaa>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4a19      	ldr	r2, [pc, #100]	; (800b38c <TIM_OC3_SetConfig+0x10c>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d113      	bne.n	800b352 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	695b      	ldr	r3, [r3, #20]
 800b33e:	011b      	lsls	r3, r3, #4
 800b340:	693a      	ldr	r2, [r7, #16]
 800b342:	4313      	orrs	r3, r2
 800b344:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	699b      	ldr	r3, [r3, #24]
 800b34a:	011b      	lsls	r3, r3, #4
 800b34c:	693a      	ldr	r2, [r7, #16]
 800b34e:	4313      	orrs	r3, r2
 800b350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	693a      	ldr	r2, [r7, #16]
 800b356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	685a      	ldr	r2, [r3, #4]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	697a      	ldr	r2, [r7, #20]
 800b36a:	621a      	str	r2, [r3, #32]
}
 800b36c:	bf00      	nop
 800b36e:	371c      	adds	r7, #28
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr
 800b378:	fffeff8f 	.word	0xfffeff8f
 800b37c:	40010000 	.word	0x40010000
 800b380:	40010400 	.word	0x40010400
 800b384:	40014000 	.word	0x40014000
 800b388:	40014400 	.word	0x40014400
 800b38c:	40014800 	.word	0x40014800

0800b390 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b390:	b480      	push	{r7}
 800b392:	b087      	sub	sp, #28
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a1b      	ldr	r3, [r3, #32]
 800b39e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6a1b      	ldr	r3, [r3, #32]
 800b3aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	69db      	ldr	r3, [r3, #28]
 800b3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	4b24      	ldr	r3, [pc, #144]	; (800b44c <TIM_OC4_SetConfig+0xbc>)
 800b3bc:	4013      	ands	r3, r2
 800b3be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	021b      	lsls	r3, r3, #8
 800b3ce:	68fa      	ldr	r2, [r7, #12]
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b3da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	031b      	lsls	r3, r3, #12
 800b3e2:	693a      	ldr	r2, [r7, #16]
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4a19      	ldr	r2, [pc, #100]	; (800b450 <TIM_OC4_SetConfig+0xc0>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d00f      	beq.n	800b410 <TIM_OC4_SetConfig+0x80>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4a18      	ldr	r2, [pc, #96]	; (800b454 <TIM_OC4_SetConfig+0xc4>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d00b      	beq.n	800b410 <TIM_OC4_SetConfig+0x80>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	4a17      	ldr	r2, [pc, #92]	; (800b458 <TIM_OC4_SetConfig+0xc8>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d007      	beq.n	800b410 <TIM_OC4_SetConfig+0x80>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4a16      	ldr	r2, [pc, #88]	; (800b45c <TIM_OC4_SetConfig+0xcc>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d003      	beq.n	800b410 <TIM_OC4_SetConfig+0x80>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	4a15      	ldr	r2, [pc, #84]	; (800b460 <TIM_OC4_SetConfig+0xd0>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d109      	bne.n	800b424 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b416:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	695b      	ldr	r3, [r3, #20]
 800b41c:	019b      	lsls	r3, r3, #6
 800b41e:	697a      	ldr	r2, [r7, #20]
 800b420:	4313      	orrs	r3, r2
 800b422:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	697a      	ldr	r2, [r7, #20]
 800b428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	685a      	ldr	r2, [r3, #4]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	693a      	ldr	r2, [r7, #16]
 800b43c:	621a      	str	r2, [r3, #32]
}
 800b43e:	bf00      	nop
 800b440:	371c      	adds	r7, #28
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop
 800b44c:	feff8fff 	.word	0xfeff8fff
 800b450:	40010000 	.word	0x40010000
 800b454:	40010400 	.word	0x40010400
 800b458:	40014000 	.word	0x40014000
 800b45c:	40014400 	.word	0x40014400
 800b460:	40014800 	.word	0x40014800

0800b464 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b464:	b480      	push	{r7}
 800b466:	b087      	sub	sp, #28
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a1b      	ldr	r3, [r3, #32]
 800b472:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6a1b      	ldr	r3, [r3, #32]
 800b47e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b48a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	4b21      	ldr	r3, [pc, #132]	; (800b514 <TIM_OC5_SetConfig+0xb0>)
 800b490:	4013      	ands	r3, r2
 800b492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	68fa      	ldr	r2, [r7, #12]
 800b49a:	4313      	orrs	r3, r2
 800b49c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b4a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	041b      	lsls	r3, r3, #16
 800b4ac:	693a      	ldr	r2, [r7, #16]
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4a18      	ldr	r2, [pc, #96]	; (800b518 <TIM_OC5_SetConfig+0xb4>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d00f      	beq.n	800b4da <TIM_OC5_SetConfig+0x76>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4a17      	ldr	r2, [pc, #92]	; (800b51c <TIM_OC5_SetConfig+0xb8>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d00b      	beq.n	800b4da <TIM_OC5_SetConfig+0x76>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4a16      	ldr	r2, [pc, #88]	; (800b520 <TIM_OC5_SetConfig+0xbc>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d007      	beq.n	800b4da <TIM_OC5_SetConfig+0x76>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4a15      	ldr	r2, [pc, #84]	; (800b524 <TIM_OC5_SetConfig+0xc0>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d003      	beq.n	800b4da <TIM_OC5_SetConfig+0x76>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4a14      	ldr	r2, [pc, #80]	; (800b528 <TIM_OC5_SetConfig+0xc4>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d109      	bne.n	800b4ee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	695b      	ldr	r3, [r3, #20]
 800b4e6:	021b      	lsls	r3, r3, #8
 800b4e8:	697a      	ldr	r2, [r7, #20]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	697a      	ldr	r2, [r7, #20]
 800b4f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	685a      	ldr	r2, [r3, #4]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	693a      	ldr	r2, [r7, #16]
 800b506:	621a      	str	r2, [r3, #32]
}
 800b508:	bf00      	nop
 800b50a:	371c      	adds	r7, #28
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr
 800b514:	fffeff8f 	.word	0xfffeff8f
 800b518:	40010000 	.word	0x40010000
 800b51c:	40010400 	.word	0x40010400
 800b520:	40014000 	.word	0x40014000
 800b524:	40014400 	.word	0x40014400
 800b528:	40014800 	.word	0x40014800

0800b52c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b087      	sub	sp, #28
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a1b      	ldr	r3, [r3, #32]
 800b53a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a1b      	ldr	r3, [r3, #32]
 800b546:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	4b22      	ldr	r3, [pc, #136]	; (800b5e0 <TIM_OC6_SetConfig+0xb4>)
 800b558:	4013      	ands	r3, r2
 800b55a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	021b      	lsls	r3, r3, #8
 800b562:	68fa      	ldr	r2, [r7, #12]
 800b564:	4313      	orrs	r3, r2
 800b566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b56e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	051b      	lsls	r3, r3, #20
 800b576:	693a      	ldr	r2, [r7, #16]
 800b578:	4313      	orrs	r3, r2
 800b57a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4a19      	ldr	r2, [pc, #100]	; (800b5e4 <TIM_OC6_SetConfig+0xb8>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d00f      	beq.n	800b5a4 <TIM_OC6_SetConfig+0x78>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	4a18      	ldr	r2, [pc, #96]	; (800b5e8 <TIM_OC6_SetConfig+0xbc>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d00b      	beq.n	800b5a4 <TIM_OC6_SetConfig+0x78>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a17      	ldr	r2, [pc, #92]	; (800b5ec <TIM_OC6_SetConfig+0xc0>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d007      	beq.n	800b5a4 <TIM_OC6_SetConfig+0x78>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4a16      	ldr	r2, [pc, #88]	; (800b5f0 <TIM_OC6_SetConfig+0xc4>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d003      	beq.n	800b5a4 <TIM_OC6_SetConfig+0x78>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	4a15      	ldr	r2, [pc, #84]	; (800b5f4 <TIM_OC6_SetConfig+0xc8>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d109      	bne.n	800b5b8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b5aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	695b      	ldr	r3, [r3, #20]
 800b5b0:	029b      	lsls	r3, r3, #10
 800b5b2:	697a      	ldr	r2, [r7, #20]
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	697a      	ldr	r2, [r7, #20]
 800b5bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	685a      	ldr	r2, [r3, #4]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	693a      	ldr	r2, [r7, #16]
 800b5d0:	621a      	str	r2, [r3, #32]
}
 800b5d2:	bf00      	nop
 800b5d4:	371c      	adds	r7, #28
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop
 800b5e0:	feff8fff 	.word	0xfeff8fff
 800b5e4:	40010000 	.word	0x40010000
 800b5e8:	40010400 	.word	0x40010400
 800b5ec:	40014000 	.word	0x40014000
 800b5f0:	40014400 	.word	0x40014400
 800b5f4:	40014800 	.word	0x40014800

0800b5f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b087      	sub	sp, #28
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	f003 031f 	and.w	r3, r3, #31
 800b60a:	2201      	movs	r2, #1
 800b60c:	fa02 f303 	lsl.w	r3, r2, r3
 800b610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	6a1a      	ldr	r2, [r3, #32]
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	43db      	mvns	r3, r3
 800b61a:	401a      	ands	r2, r3
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6a1a      	ldr	r2, [r3, #32]
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	f003 031f 	and.w	r3, r3, #31
 800b62a:	6879      	ldr	r1, [r7, #4]
 800b62c:	fa01 f303 	lsl.w	r3, r1, r3
 800b630:	431a      	orrs	r2, r3
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	621a      	str	r2, [r3, #32]
}
 800b636:	bf00      	nop
 800b638:	371c      	adds	r7, #28
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
	...

0800b644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b644:	b480      	push	{r7}
 800b646:	b085      	sub	sp, #20
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b654:	2b01      	cmp	r3, #1
 800b656:	d101      	bne.n	800b65c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b658:	2302      	movs	r3, #2
 800b65a:	e077      	b.n	800b74c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2201      	movs	r2, #1
 800b660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2202      	movs	r2, #2
 800b668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a35      	ldr	r2, [pc, #212]	; (800b758 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d004      	beq.n	800b690 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4a34      	ldr	r2, [pc, #208]	; (800b75c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d108      	bne.n	800b6a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b696:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a25      	ldr	r2, [pc, #148]	; (800b758 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d02c      	beq.n	800b720 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6ce:	d027      	beq.n	800b720 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a22      	ldr	r2, [pc, #136]	; (800b760 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d022      	beq.n	800b720 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a21      	ldr	r2, [pc, #132]	; (800b764 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d01d      	beq.n	800b720 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a1f      	ldr	r2, [pc, #124]	; (800b768 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d018      	beq.n	800b720 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4a1a      	ldr	r2, [pc, #104]	; (800b75c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d013      	beq.n	800b720 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a1b      	ldr	r2, [pc, #108]	; (800b76c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d00e      	beq.n	800b720 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4a1a      	ldr	r2, [pc, #104]	; (800b770 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d009      	beq.n	800b720 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4a18      	ldr	r2, [pc, #96]	; (800b774 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d004      	beq.n	800b720 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	4a17      	ldr	r2, [pc, #92]	; (800b778 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d10c      	bne.n	800b73a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b726:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	689b      	ldr	r3, [r3, #8]
 800b72c:	68ba      	ldr	r2, [r7, #8]
 800b72e:	4313      	orrs	r3, r2
 800b730:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	68ba      	ldr	r2, [r7, #8]
 800b738:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2201      	movs	r2, #1
 800b73e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2200      	movs	r2, #0
 800b746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b74a:	2300      	movs	r3, #0
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3714      	adds	r7, #20
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr
 800b758:	40010000 	.word	0x40010000
 800b75c:	40010400 	.word	0x40010400
 800b760:	40000400 	.word	0x40000400
 800b764:	40000800 	.word	0x40000800
 800b768:	40000c00 	.word	0x40000c00
 800b76c:	40001800 	.word	0x40001800
 800b770:	40014000 	.word	0x40014000
 800b774:	4000e000 	.word	0x4000e000
 800b778:	4000e400 	.word	0x4000e400

0800b77c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b085      	sub	sp, #20
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b786:	2300      	movs	r3, #0
 800b788:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b790:	2b01      	cmp	r3, #1
 800b792:	d101      	bne.n	800b798 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b794:	2302      	movs	r3, #2
 800b796:	e087      	b.n	800b8a8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2201      	movs	r2, #1
 800b79c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	691b      	ldr	r3, [r3, #16]
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	695b      	ldr	r3, [r3, #20]
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7fe:	4313      	orrs	r3, r2
 800b800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	699b      	ldr	r3, [r3, #24]
 800b80c:	041b      	lsls	r3, r3, #16
 800b80e:	4313      	orrs	r3, r2
 800b810:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a27      	ldr	r2, [pc, #156]	; (800b8b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d004      	beq.n	800b826 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a25      	ldr	r2, [pc, #148]	; (800b8b8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d106      	bne.n	800b834 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	69db      	ldr	r3, [r3, #28]
 800b830:	4313      	orrs	r3, r2
 800b832:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4a1e      	ldr	r2, [pc, #120]	; (800b8b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d004      	beq.n	800b848 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a1d      	ldr	r2, [pc, #116]	; (800b8b8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d126      	bne.n	800b896 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b852:	051b      	lsls	r3, r3, #20
 800b854:	4313      	orrs	r3, r2
 800b856:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	6a1b      	ldr	r3, [r3, #32]
 800b862:	4313      	orrs	r3, r2
 800b864:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b870:	4313      	orrs	r3, r2
 800b872:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a0e      	ldr	r2, [pc, #56]	; (800b8b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d004      	beq.n	800b888 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a0d      	ldr	r2, [pc, #52]	; (800b8b8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d106      	bne.n	800b896 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b892:	4313      	orrs	r3, r2
 800b894:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	68fa      	ldr	r2, [r7, #12]
 800b89c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3714      	adds	r7, #20
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr
 800b8b4:	40010000 	.word	0x40010000
 800b8b8:	40010400 	.word	0x40010400

0800b8bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8c4:	bf00      	nop
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8d8:	bf00      	nop
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b8ec:	bf00      	nop
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d101      	bne.n	800b90a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b906:	2301      	movs	r3, #1
 800b908:	e042      	b.n	800b990 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b910:	2b00      	cmp	r3, #0
 800b912:	d106      	bne.n	800b922 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f7f8 fd03 	bl	8004328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2224      	movs	r2, #36	; 0x24
 800b926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f022 0201 	bic.w	r2, r2, #1
 800b938:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 fcdc 	bl	800c2f8 <UART_SetConfig>
 800b940:	4603      	mov	r3, r0
 800b942:	2b01      	cmp	r3, #1
 800b944:	d101      	bne.n	800b94a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	e022      	b.n	800b990 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d002      	beq.n	800b958 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f001 fb3c 	bl	800cfd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	685a      	ldr	r2, [r3, #4]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b966:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	689a      	ldr	r2, [r3, #8]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b976:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	681a      	ldr	r2, [r3, #0]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f042 0201 	orr.w	r2, r2, #1
 800b986:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f001 fbc3 	bl	800d114 <UART_CheckIdleState>
 800b98e:	4603      	mov	r3, r0
}
 800b990:	4618      	mov	r0, r3
 800b992:	3708      	adds	r7, #8
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b08a      	sub	sp, #40	; 0x28
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9ac:	2b20      	cmp	r3, #32
 800b9ae:	d17a      	bne.n	800baa6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d002      	beq.n	800b9bc <HAL_UART_Transmit_DMA+0x24>
 800b9b6:	88fb      	ldrh	r3, [r7, #6]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d101      	bne.n	800b9c0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	e073      	b.n	800baa8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	d101      	bne.n	800b9ce <HAL_UART_Transmit_DMA+0x36>
 800b9ca:	2302      	movs	r3, #2
 800b9cc:	e06c      	b.n	800baa8 <HAL_UART_Transmit_DMA+0x110>
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	68ba      	ldr	r2, [r7, #8]
 800b9da:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	88fa      	ldrh	r2, [r7, #6]
 800b9e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	88fa      	ldrh	r2, [r7, #6]
 800b9e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2221      	movs	r2, #33	; 0x21
 800b9f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d02c      	beq.n	800ba5e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba08:	4a29      	ldr	r2, [pc, #164]	; (800bab0 <HAL_UART_Transmit_DMA+0x118>)
 800ba0a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba10:	4a28      	ldr	r2, [pc, #160]	; (800bab4 <HAL_UART_Transmit_DMA+0x11c>)
 800ba12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba18:	4a27      	ldr	r2, [pc, #156]	; (800bab8 <HAL_UART_Transmit_DMA+0x120>)
 800ba1a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba20:	2200      	movs	r2, #0
 800ba22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	3328      	adds	r3, #40	; 0x28
 800ba34:	461a      	mov	r2, r3
 800ba36:	88fb      	ldrh	r3, [r7, #6]
 800ba38:	f7f9 fd02 	bl	8005440 <HAL_DMA_Start_IT>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00d      	beq.n	800ba5e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2210      	movs	r2, #16
 800ba46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2220      	movs	r2, #32
 800ba56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e024      	b.n	800baa8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	2240      	movs	r2, #64	; 0x40
 800ba64:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	3308      	adds	r3, #8
 800ba74:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	e853 3f00 	ldrex	r3, [r3]
 800ba7c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba84:	627b      	str	r3, [r7, #36]	; 0x24
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	3308      	adds	r3, #8
 800ba8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba8e:	623a      	str	r2, [r7, #32]
 800ba90:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba92:	69f9      	ldr	r1, [r7, #28]
 800ba94:	6a3a      	ldr	r2, [r7, #32]
 800ba96:	e841 2300 	strex	r3, r2, [r1]
 800ba9a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba9c:	69bb      	ldr	r3, [r7, #24]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d1e5      	bne.n	800ba6e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800baa2:	2300      	movs	r3, #0
 800baa4:	e000      	b.n	800baa8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800baa6:	2302      	movs	r3, #2
  }
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3728      	adds	r7, #40	; 0x28
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	0800d5dd 	.word	0x0800d5dd
 800bab4:	0800d673 	.word	0x0800d673
 800bab8:	0800d7e9 	.word	0x0800d7e9

0800babc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b08a      	sub	sp, #40	; 0x28
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	4613      	mov	r3, r2
 800bac8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bad0:	2b20      	cmp	r3, #32
 800bad2:	d142      	bne.n	800bb5a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d002      	beq.n	800bae0 <HAL_UART_Receive_DMA+0x24>
 800bada:	88fb      	ldrh	r3, [r7, #6]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d101      	bne.n	800bae4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bae0:	2301      	movs	r3, #1
 800bae2:	e03b      	b.n	800bb5c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800baea:	2b01      	cmp	r3, #1
 800baec:	d101      	bne.n	800baf2 <HAL_UART_Receive_DMA+0x36>
 800baee:	2302      	movs	r3, #2
 800baf0:	e034      	b.n	800bb5c <HAL_UART_Receive_DMA+0xa0>
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2201      	movs	r2, #1
 800baf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2200      	movs	r2, #0
 800bafe:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a17      	ldr	r2, [pc, #92]	; (800bb64 <HAL_UART_Receive_DMA+0xa8>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d01f      	beq.n	800bb4a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d018      	beq.n	800bb4a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	e853 3f00 	ldrex	r3, [r3]
 800bb24:	613b      	str	r3, [r7, #16]
   return(result);
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bb2c:	627b      	str	r3, [r7, #36]	; 0x24
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	461a      	mov	r2, r3
 800bb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb36:	623b      	str	r3, [r7, #32]
 800bb38:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb3a:	69f9      	ldr	r1, [r7, #28]
 800bb3c:	6a3a      	ldr	r2, [r7, #32]
 800bb3e:	e841 2300 	strex	r3, r2, [r1]
 800bb42:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d1e6      	bne.n	800bb18 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bb4a:	88fb      	ldrh	r3, [r7, #6]
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	68b9      	ldr	r1, [r7, #8]
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f001 fbf3 	bl	800d33c <UART_Start_Receive_DMA>
 800bb56:	4603      	mov	r3, r0
 800bb58:	e000      	b.n	800bb5c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bb5a:	2302      	movs	r3, #2
  }
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3728      	adds	r7, #40	; 0x28
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	58000c00 	.word	0x58000c00

0800bb68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b0ba      	sub	sp, #232	; 0xe8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	69db      	ldr	r3, [r3, #28]
 800bb76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bb8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bb92:	f640 030f 	movw	r3, #2063	; 0x80f
 800bb96:	4013      	ands	r3, r2
 800bb98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bb9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d11b      	bne.n	800bbdc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bba8:	f003 0320 	and.w	r3, r3, #32
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d015      	beq.n	800bbdc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bbb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbb4:	f003 0320 	and.w	r3, r3, #32
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d105      	bne.n	800bbc8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bbbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d009      	beq.n	800bbdc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	f000 835a 	beq.w	800c286 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	4798      	blx	r3
      }
      return;
 800bbda:	e354      	b.n	800c286 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bbdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	f000 811f 	beq.w	800be24 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bbe6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bbea:	4b8b      	ldr	r3, [pc, #556]	; (800be18 <HAL_UART_IRQHandler+0x2b0>)
 800bbec:	4013      	ands	r3, r2
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d106      	bne.n	800bc00 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bbf2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bbf6:	4b89      	ldr	r3, [pc, #548]	; (800be1c <HAL_UART_IRQHandler+0x2b4>)
 800bbf8:	4013      	ands	r3, r2
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	f000 8112 	beq.w	800be24 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bc00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc04:	f003 0301 	and.w	r3, r3, #1
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d011      	beq.n	800bc30 <HAL_UART_IRQHandler+0xc8>
 800bc0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00b      	beq.n	800bc30 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc26:	f043 0201 	orr.w	r2, r3, #1
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc34:	f003 0302 	and.w	r3, r3, #2
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d011      	beq.n	800bc60 <HAL_UART_IRQHandler+0xf8>
 800bc3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc40:	f003 0301 	and.w	r3, r3, #1
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00b      	beq.n	800bc60 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2202      	movs	r2, #2
 800bc4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc56:	f043 0204 	orr.w	r2, r3, #4
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc64:	f003 0304 	and.w	r3, r3, #4
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d011      	beq.n	800bc90 <HAL_UART_IRQHandler+0x128>
 800bc6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc70:	f003 0301 	and.w	r3, r3, #1
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d00b      	beq.n	800bc90 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2204      	movs	r2, #4
 800bc7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc86:	f043 0202 	orr.w	r2, r3, #2
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bc90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc94:	f003 0308 	and.w	r3, r3, #8
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d017      	beq.n	800bccc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bca0:	f003 0320 	and.w	r3, r3, #32
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d105      	bne.n	800bcb4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bca8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bcac:	4b5a      	ldr	r3, [pc, #360]	; (800be18 <HAL_UART_IRQHandler+0x2b0>)
 800bcae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00b      	beq.n	800bccc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2208      	movs	r2, #8
 800bcba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcc2:	f043 0208 	orr.w	r2, r3, #8
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d012      	beq.n	800bcfe <HAL_UART_IRQHandler+0x196>
 800bcd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d00c      	beq.n	800bcfe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bcec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcf4:	f043 0220 	orr.w	r2, r3, #32
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	f000 82c0 	beq.w	800c28a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bd0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd0e:	f003 0320 	and.w	r3, r3, #32
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d013      	beq.n	800bd3e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bd16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd1a:	f003 0320 	and.w	r3, r3, #32
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d105      	bne.n	800bd2e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bd22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d007      	beq.n	800bd3e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d003      	beq.n	800bd3e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	689b      	ldr	r3, [r3, #8]
 800bd4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd52:	2b40      	cmp	r3, #64	; 0x40
 800bd54:	d005      	beq.n	800bd62 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bd56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d04f      	beq.n	800be02 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f001 fbd4 	bl	800d510 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd72:	2b40      	cmp	r3, #64	; 0x40
 800bd74:	d141      	bne.n	800bdfa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	3308      	adds	r3, #8
 800bd7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bd84:	e853 3f00 	ldrex	r3, [r3]
 800bd88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bd8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	3308      	adds	r3, #8
 800bd9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bda2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bda6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bdae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bdb2:	e841 2300 	strex	r3, r2, [r1]
 800bdb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bdba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1d9      	bne.n	800bd76 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d013      	beq.n	800bdf2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdce:	4a14      	ldr	r2, [pc, #80]	; (800be20 <HAL_UART_IRQHandler+0x2b8>)
 800bdd0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7fa f8ba 	bl	8005f50 <HAL_DMA_Abort_IT>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d017      	beq.n	800be12 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bde6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bdec:	4610      	mov	r0, r2
 800bdee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdf0:	e00f      	b.n	800be12 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 fa6a 	bl	800c2cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdf8:	e00b      	b.n	800be12 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 fa66 	bl	800c2cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be00:	e007      	b.n	800be12 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 fa62 	bl	800c2cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800be10:	e23b      	b.n	800c28a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be12:	bf00      	nop
    return;
 800be14:	e239      	b.n	800c28a <HAL_UART_IRQHandler+0x722>
 800be16:	bf00      	nop
 800be18:	10000001 	.word	0x10000001
 800be1c:	04000120 	.word	0x04000120
 800be20:	0800d869 	.word	0x0800d869

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be28:	2b01      	cmp	r3, #1
 800be2a:	f040 81ce 	bne.w	800c1ca <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800be2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be32:	f003 0310 	and.w	r3, r3, #16
 800be36:	2b00      	cmp	r3, #0
 800be38:	f000 81c7 	beq.w	800c1ca <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800be3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be40:	f003 0310 	and.w	r3, r3, #16
 800be44:	2b00      	cmp	r3, #0
 800be46:	f000 81c0 	beq.w	800c1ca <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2210      	movs	r2, #16
 800be50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be5c:	2b40      	cmp	r3, #64	; 0x40
 800be5e:	f040 813b 	bne.w	800c0d8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a8b      	ldr	r2, [pc, #556]	; (800c098 <HAL_UART_IRQHandler+0x530>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d059      	beq.n	800bf22 <HAL_UART_IRQHandler+0x3ba>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a89      	ldr	r2, [pc, #548]	; (800c09c <HAL_UART_IRQHandler+0x534>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d053      	beq.n	800bf22 <HAL_UART_IRQHandler+0x3ba>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a87      	ldr	r2, [pc, #540]	; (800c0a0 <HAL_UART_IRQHandler+0x538>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d04d      	beq.n	800bf22 <HAL_UART_IRQHandler+0x3ba>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a85      	ldr	r2, [pc, #532]	; (800c0a4 <HAL_UART_IRQHandler+0x53c>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d047      	beq.n	800bf22 <HAL_UART_IRQHandler+0x3ba>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4a83      	ldr	r2, [pc, #524]	; (800c0a8 <HAL_UART_IRQHandler+0x540>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d041      	beq.n	800bf22 <HAL_UART_IRQHandler+0x3ba>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a81      	ldr	r2, [pc, #516]	; (800c0ac <HAL_UART_IRQHandler+0x544>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d03b      	beq.n	800bf22 <HAL_UART_IRQHandler+0x3ba>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a7f      	ldr	r2, [pc, #508]	; (800c0b0 <HAL_UART_IRQHandler+0x548>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d035      	beq.n	800bf22 <HAL_UART_IRQHandler+0x3ba>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a7d      	ldr	r2, [pc, #500]	; (800c0b4 <HAL_UART_IRQHandler+0x54c>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d02f      	beq.n	800bf22 <HAL_UART_IRQHandler+0x3ba>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a7b      	ldr	r2, [pc, #492]	; (800c0b8 <HAL_UART_IRQHandler+0x550>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d029      	beq.n	800bf22 <HAL_UART_IRQHandler+0x3ba>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4a79      	ldr	r2, [pc, #484]	; (800c0bc <HAL_UART_IRQHandler+0x554>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d023      	beq.n	800bf22 <HAL_UART_IRQHandler+0x3ba>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4a77      	ldr	r2, [pc, #476]	; (800c0c0 <HAL_UART_IRQHandler+0x558>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d01d      	beq.n	800bf22 <HAL_UART_IRQHandler+0x3ba>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a75      	ldr	r2, [pc, #468]	; (800c0c4 <HAL_UART_IRQHandler+0x55c>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d017      	beq.n	800bf22 <HAL_UART_IRQHandler+0x3ba>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a73      	ldr	r2, [pc, #460]	; (800c0c8 <HAL_UART_IRQHandler+0x560>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d011      	beq.n	800bf22 <HAL_UART_IRQHandler+0x3ba>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a71      	ldr	r2, [pc, #452]	; (800c0cc <HAL_UART_IRQHandler+0x564>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d00b      	beq.n	800bf22 <HAL_UART_IRQHandler+0x3ba>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4a6f      	ldr	r2, [pc, #444]	; (800c0d0 <HAL_UART_IRQHandler+0x568>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d005      	beq.n	800bf22 <HAL_UART_IRQHandler+0x3ba>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4a6d      	ldr	r2, [pc, #436]	; (800c0d4 <HAL_UART_IRQHandler+0x56c>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d105      	bne.n	800bf2e <HAL_UART_IRQHandler+0x3c6>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	e004      	b.n	800bf38 <HAL_UART_IRQHandler+0x3d0>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bf3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f000 81a4 	beq.w	800c28e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bf4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf50:	429a      	cmp	r2, r3
 800bf52:	f080 819c 	bcs.w	800c28e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf64:	69db      	ldr	r3, [r3, #28]
 800bf66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf6a:	f000 8086 	beq.w	800c07a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf7a:	e853 3f00 	ldrex	r3, [r3]
 800bf7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bf82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	461a      	mov	r2, r3
 800bf94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bf98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf9c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bfa4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bfa8:	e841 2300 	strex	r3, r2, [r1]
 800bfac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bfb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1da      	bne.n	800bf6e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	3308      	adds	r3, #8
 800bfbe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bfc2:	e853 3f00 	ldrex	r3, [r3]
 800bfc6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bfc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfca:	f023 0301 	bic.w	r3, r3, #1
 800bfce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	3308      	adds	r3, #8
 800bfd8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bfdc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bfe0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bfe4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bfe8:	e841 2300 	strex	r3, r2, [r1]
 800bfec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bfee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d1e1      	bne.n	800bfb8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	3308      	adds	r3, #8
 800bffa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bffc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bffe:	e853 3f00 	ldrex	r3, [r3]
 800c002:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c00a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	3308      	adds	r3, #8
 800c014:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c018:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c01a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c01e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c020:	e841 2300 	strex	r3, r2, [r1]
 800c024:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d1e3      	bne.n	800bff4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2220      	movs	r2, #32
 800c030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c042:	e853 3f00 	ldrex	r3, [r3]
 800c046:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c04a:	f023 0310 	bic.w	r3, r3, #16
 800c04e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	461a      	mov	r2, r3
 800c058:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c05c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c05e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c060:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c062:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c064:	e841 2300 	strex	r3, r2, [r1]
 800c068:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c06a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d1e4      	bne.n	800c03a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c074:	4618      	mov	r0, r3
 800c076:	f7f9 fc4d 	bl	8005914 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c086:	b29b      	uxth	r3, r3
 800c088:	1ad3      	subs	r3, r2, r3
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	4619      	mov	r1, r3
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 f926 	bl	800c2e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c094:	e0fb      	b.n	800c28e <HAL_UART_IRQHandler+0x726>
 800c096:	bf00      	nop
 800c098:	40020010 	.word	0x40020010
 800c09c:	40020028 	.word	0x40020028
 800c0a0:	40020040 	.word	0x40020040
 800c0a4:	40020058 	.word	0x40020058
 800c0a8:	40020070 	.word	0x40020070
 800c0ac:	40020088 	.word	0x40020088
 800c0b0:	400200a0 	.word	0x400200a0
 800c0b4:	400200b8 	.word	0x400200b8
 800c0b8:	40020410 	.word	0x40020410
 800c0bc:	40020428 	.word	0x40020428
 800c0c0:	40020440 	.word	0x40020440
 800c0c4:	40020458 	.word	0x40020458
 800c0c8:	40020470 	.word	0x40020470
 800c0cc:	40020488 	.word	0x40020488
 800c0d0:	400204a0 	.word	0x400204a0
 800c0d4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	1ad3      	subs	r3, r2, r3
 800c0e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0f2:	b29b      	uxth	r3, r3
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	f000 80cc 	beq.w	800c292 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c0fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	f000 80c7 	beq.w	800c292 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10c:	e853 3f00 	ldrex	r3, [r3]
 800c110:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c114:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c118:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	461a      	mov	r2, r3
 800c122:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c126:	647b      	str	r3, [r7, #68]	; 0x44
 800c128:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c12a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c12c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c12e:	e841 2300 	strex	r3, r2, [r1]
 800c132:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c136:	2b00      	cmp	r3, #0
 800c138:	d1e4      	bne.n	800c104 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	3308      	adds	r3, #8
 800c140:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c144:	e853 3f00 	ldrex	r3, [r3]
 800c148:	623b      	str	r3, [r7, #32]
   return(result);
 800c14a:	6a3a      	ldr	r2, [r7, #32]
 800c14c:	4b54      	ldr	r3, [pc, #336]	; (800c2a0 <HAL_UART_IRQHandler+0x738>)
 800c14e:	4013      	ands	r3, r2
 800c150:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	3308      	adds	r3, #8
 800c15a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c15e:	633a      	str	r2, [r7, #48]	; 0x30
 800c160:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c162:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c166:	e841 2300 	strex	r3, r2, [r1]
 800c16a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d1e3      	bne.n	800c13a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2220      	movs	r2, #32
 800c176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	e853 3f00 	ldrex	r3, [r3]
 800c192:	60fb      	str	r3, [r7, #12]
   return(result);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f023 0310 	bic.w	r3, r3, #16
 800c19a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c1a8:	61fb      	str	r3, [r7, #28]
 800c1aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ac:	69b9      	ldr	r1, [r7, #24]
 800c1ae:	69fa      	ldr	r2, [r7, #28]
 800c1b0:	e841 2300 	strex	r3, r2, [r1]
 800c1b4:	617b      	str	r3, [r7, #20]
   return(result);
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d1e4      	bne.n	800c186 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c1bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 f88c 	bl	800c2e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c1c8:	e063      	b.n	800c292 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c1ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d00e      	beq.n	800c1f4 <HAL_UART_IRQHandler+0x68c>
 800c1d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d008      	beq.n	800c1f4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c1ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f001 fb7c 	bl	800d8ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c1f2:	e051      	b.n	800c298 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c1f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d014      	beq.n	800c22a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d105      	bne.n	800c218 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c20c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c210:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c214:	2b00      	cmp	r3, #0
 800c216:	d008      	beq.n	800c22a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d03a      	beq.n	800c296 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	4798      	blx	r3
    }
    return;
 800c228:	e035      	b.n	800c296 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c22a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c22e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c232:	2b00      	cmp	r3, #0
 800c234:	d009      	beq.n	800c24a <HAL_UART_IRQHandler+0x6e2>
 800c236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c23a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d003      	beq.n	800c24a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f001 fb26 	bl	800d894 <UART_EndTransmit_IT>
    return;
 800c248:	e026      	b.n	800c298 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c24a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c24e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c252:	2b00      	cmp	r3, #0
 800c254:	d009      	beq.n	800c26a <HAL_UART_IRQHandler+0x702>
 800c256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c25a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d003      	beq.n	800c26a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f001 fb55 	bl	800d912 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c268:	e016      	b.n	800c298 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c26a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c26e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c272:	2b00      	cmp	r3, #0
 800c274:	d010      	beq.n	800c298 <HAL_UART_IRQHandler+0x730>
 800c276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	da0c      	bge.n	800c298 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f001 fb3d 	bl	800d8fe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c284:	e008      	b.n	800c298 <HAL_UART_IRQHandler+0x730>
      return;
 800c286:	bf00      	nop
 800c288:	e006      	b.n	800c298 <HAL_UART_IRQHandler+0x730>
    return;
 800c28a:	bf00      	nop
 800c28c:	e004      	b.n	800c298 <HAL_UART_IRQHandler+0x730>
      return;
 800c28e:	bf00      	nop
 800c290:	e002      	b.n	800c298 <HAL_UART_IRQHandler+0x730>
      return;
 800c292:	bf00      	nop
 800c294:	e000      	b.n	800c298 <HAL_UART_IRQHandler+0x730>
    return;
 800c296:	bf00      	nop
  }
}
 800c298:	37e8      	adds	r7, #232	; 0xe8
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	effffffe 	.word	0xeffffffe

0800c2a4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c2ac:	bf00      	nop
 800c2ae:	370c      	adds	r7, #12
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c2c0:	bf00      	nop
 800c2c2:	370c      	adds	r7, #12
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr

0800c2cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c2d4:	bf00      	nop
 800c2d6:	370c      	adds	r7, #12
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr

0800c2e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c2ec:	bf00      	nop
 800c2ee:	370c      	adds	r7, #12
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c2fc:	b092      	sub	sp, #72	; 0x48
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c302:	2300      	movs	r3, #0
 800c304:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	689a      	ldr	r2, [r3, #8]
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	431a      	orrs	r2, r3
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	695b      	ldr	r3, [r3, #20]
 800c316:	431a      	orrs	r2, r3
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	69db      	ldr	r3, [r3, #28]
 800c31c:	4313      	orrs	r3, r2
 800c31e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	4bbe      	ldr	r3, [pc, #760]	; (800c620 <UART_SetConfig+0x328>)
 800c328:	4013      	ands	r3, r2
 800c32a:	697a      	ldr	r2, [r7, #20]
 800c32c:	6812      	ldr	r2, [r2, #0]
 800c32e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c330:	430b      	orrs	r3, r1
 800c332:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	68da      	ldr	r2, [r3, #12]
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	430a      	orrs	r2, r1
 800c348:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	699b      	ldr	r3, [r3, #24]
 800c34e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4ab3      	ldr	r2, [pc, #716]	; (800c624 <UART_SetConfig+0x32c>)
 800c356:	4293      	cmp	r3, r2
 800c358:	d004      	beq.n	800c364 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	6a1b      	ldr	r3, [r3, #32]
 800c35e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c360:	4313      	orrs	r3, r2
 800c362:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	689a      	ldr	r2, [r3, #8]
 800c36a:	4baf      	ldr	r3, [pc, #700]	; (800c628 <UART_SetConfig+0x330>)
 800c36c:	4013      	ands	r3, r2
 800c36e:	697a      	ldr	r2, [r7, #20]
 800c370:	6812      	ldr	r2, [r2, #0]
 800c372:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c374:	430b      	orrs	r3, r1
 800c376:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c37e:	f023 010f 	bic.w	r1, r3, #15
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	430a      	orrs	r2, r1
 800c38c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	4aa6      	ldr	r2, [pc, #664]	; (800c62c <UART_SetConfig+0x334>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d177      	bne.n	800c488 <UART_SetConfig+0x190>
 800c398:	4ba5      	ldr	r3, [pc, #660]	; (800c630 <UART_SetConfig+0x338>)
 800c39a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c39c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c3a0:	2b28      	cmp	r3, #40	; 0x28
 800c3a2:	d86d      	bhi.n	800c480 <UART_SetConfig+0x188>
 800c3a4:	a201      	add	r2, pc, #4	; (adr r2, 800c3ac <UART_SetConfig+0xb4>)
 800c3a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3aa:	bf00      	nop
 800c3ac:	0800c451 	.word	0x0800c451
 800c3b0:	0800c481 	.word	0x0800c481
 800c3b4:	0800c481 	.word	0x0800c481
 800c3b8:	0800c481 	.word	0x0800c481
 800c3bc:	0800c481 	.word	0x0800c481
 800c3c0:	0800c481 	.word	0x0800c481
 800c3c4:	0800c481 	.word	0x0800c481
 800c3c8:	0800c481 	.word	0x0800c481
 800c3cc:	0800c459 	.word	0x0800c459
 800c3d0:	0800c481 	.word	0x0800c481
 800c3d4:	0800c481 	.word	0x0800c481
 800c3d8:	0800c481 	.word	0x0800c481
 800c3dc:	0800c481 	.word	0x0800c481
 800c3e0:	0800c481 	.word	0x0800c481
 800c3e4:	0800c481 	.word	0x0800c481
 800c3e8:	0800c481 	.word	0x0800c481
 800c3ec:	0800c461 	.word	0x0800c461
 800c3f0:	0800c481 	.word	0x0800c481
 800c3f4:	0800c481 	.word	0x0800c481
 800c3f8:	0800c481 	.word	0x0800c481
 800c3fc:	0800c481 	.word	0x0800c481
 800c400:	0800c481 	.word	0x0800c481
 800c404:	0800c481 	.word	0x0800c481
 800c408:	0800c481 	.word	0x0800c481
 800c40c:	0800c469 	.word	0x0800c469
 800c410:	0800c481 	.word	0x0800c481
 800c414:	0800c481 	.word	0x0800c481
 800c418:	0800c481 	.word	0x0800c481
 800c41c:	0800c481 	.word	0x0800c481
 800c420:	0800c481 	.word	0x0800c481
 800c424:	0800c481 	.word	0x0800c481
 800c428:	0800c481 	.word	0x0800c481
 800c42c:	0800c471 	.word	0x0800c471
 800c430:	0800c481 	.word	0x0800c481
 800c434:	0800c481 	.word	0x0800c481
 800c438:	0800c481 	.word	0x0800c481
 800c43c:	0800c481 	.word	0x0800c481
 800c440:	0800c481 	.word	0x0800c481
 800c444:	0800c481 	.word	0x0800c481
 800c448:	0800c481 	.word	0x0800c481
 800c44c:	0800c479 	.word	0x0800c479
 800c450:	2301      	movs	r3, #1
 800c452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c456:	e326      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c458:	2304      	movs	r3, #4
 800c45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c45e:	e322      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c460:	2308      	movs	r3, #8
 800c462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c466:	e31e      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c468:	2310      	movs	r3, #16
 800c46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c46e:	e31a      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c470:	2320      	movs	r3, #32
 800c472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c476:	e316      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c478:	2340      	movs	r3, #64	; 0x40
 800c47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c47e:	e312      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c480:	2380      	movs	r3, #128	; 0x80
 800c482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c486:	e30e      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a69      	ldr	r2, [pc, #420]	; (800c634 <UART_SetConfig+0x33c>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d130      	bne.n	800c4f4 <UART_SetConfig+0x1fc>
 800c492:	4b67      	ldr	r3, [pc, #412]	; (800c630 <UART_SetConfig+0x338>)
 800c494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c496:	f003 0307 	and.w	r3, r3, #7
 800c49a:	2b05      	cmp	r3, #5
 800c49c:	d826      	bhi.n	800c4ec <UART_SetConfig+0x1f4>
 800c49e:	a201      	add	r2, pc, #4	; (adr r2, 800c4a4 <UART_SetConfig+0x1ac>)
 800c4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a4:	0800c4bd 	.word	0x0800c4bd
 800c4a8:	0800c4c5 	.word	0x0800c4c5
 800c4ac:	0800c4cd 	.word	0x0800c4cd
 800c4b0:	0800c4d5 	.word	0x0800c4d5
 800c4b4:	0800c4dd 	.word	0x0800c4dd
 800c4b8:	0800c4e5 	.word	0x0800c4e5
 800c4bc:	2300      	movs	r3, #0
 800c4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4c2:	e2f0      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c4c4:	2304      	movs	r3, #4
 800c4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ca:	e2ec      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c4cc:	2308      	movs	r3, #8
 800c4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4d2:	e2e8      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c4d4:	2310      	movs	r3, #16
 800c4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4da:	e2e4      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c4dc:	2320      	movs	r3, #32
 800c4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4e2:	e2e0      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c4e4:	2340      	movs	r3, #64	; 0x40
 800c4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ea:	e2dc      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c4ec:	2380      	movs	r3, #128	; 0x80
 800c4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4f2:	e2d8      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a4f      	ldr	r2, [pc, #316]	; (800c638 <UART_SetConfig+0x340>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d130      	bne.n	800c560 <UART_SetConfig+0x268>
 800c4fe:	4b4c      	ldr	r3, [pc, #304]	; (800c630 <UART_SetConfig+0x338>)
 800c500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c502:	f003 0307 	and.w	r3, r3, #7
 800c506:	2b05      	cmp	r3, #5
 800c508:	d826      	bhi.n	800c558 <UART_SetConfig+0x260>
 800c50a:	a201      	add	r2, pc, #4	; (adr r2, 800c510 <UART_SetConfig+0x218>)
 800c50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c510:	0800c529 	.word	0x0800c529
 800c514:	0800c531 	.word	0x0800c531
 800c518:	0800c539 	.word	0x0800c539
 800c51c:	0800c541 	.word	0x0800c541
 800c520:	0800c549 	.word	0x0800c549
 800c524:	0800c551 	.word	0x0800c551
 800c528:	2300      	movs	r3, #0
 800c52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c52e:	e2ba      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c530:	2304      	movs	r3, #4
 800c532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c536:	e2b6      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c538:	2308      	movs	r3, #8
 800c53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c53e:	e2b2      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c540:	2310      	movs	r3, #16
 800c542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c546:	e2ae      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c548:	2320      	movs	r3, #32
 800c54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c54e:	e2aa      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c550:	2340      	movs	r3, #64	; 0x40
 800c552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c556:	e2a6      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c558:	2380      	movs	r3, #128	; 0x80
 800c55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c55e:	e2a2      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a35      	ldr	r2, [pc, #212]	; (800c63c <UART_SetConfig+0x344>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d130      	bne.n	800c5cc <UART_SetConfig+0x2d4>
 800c56a:	4b31      	ldr	r3, [pc, #196]	; (800c630 <UART_SetConfig+0x338>)
 800c56c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c56e:	f003 0307 	and.w	r3, r3, #7
 800c572:	2b05      	cmp	r3, #5
 800c574:	d826      	bhi.n	800c5c4 <UART_SetConfig+0x2cc>
 800c576:	a201      	add	r2, pc, #4	; (adr r2, 800c57c <UART_SetConfig+0x284>)
 800c578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c57c:	0800c595 	.word	0x0800c595
 800c580:	0800c59d 	.word	0x0800c59d
 800c584:	0800c5a5 	.word	0x0800c5a5
 800c588:	0800c5ad 	.word	0x0800c5ad
 800c58c:	0800c5b5 	.word	0x0800c5b5
 800c590:	0800c5bd 	.word	0x0800c5bd
 800c594:	2300      	movs	r3, #0
 800c596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c59a:	e284      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c59c:	2304      	movs	r3, #4
 800c59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5a2:	e280      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c5a4:	2308      	movs	r3, #8
 800c5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5aa:	e27c      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c5ac:	2310      	movs	r3, #16
 800c5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5b2:	e278      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c5b4:	2320      	movs	r3, #32
 800c5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ba:	e274      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c5bc:	2340      	movs	r3, #64	; 0x40
 800c5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5c2:	e270      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c5c4:	2380      	movs	r3, #128	; 0x80
 800c5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ca:	e26c      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a1b      	ldr	r2, [pc, #108]	; (800c640 <UART_SetConfig+0x348>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d142      	bne.n	800c65c <UART_SetConfig+0x364>
 800c5d6:	4b16      	ldr	r3, [pc, #88]	; (800c630 <UART_SetConfig+0x338>)
 800c5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5da:	f003 0307 	and.w	r3, r3, #7
 800c5de:	2b05      	cmp	r3, #5
 800c5e0:	d838      	bhi.n	800c654 <UART_SetConfig+0x35c>
 800c5e2:	a201      	add	r2, pc, #4	; (adr r2, 800c5e8 <UART_SetConfig+0x2f0>)
 800c5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e8:	0800c601 	.word	0x0800c601
 800c5ec:	0800c609 	.word	0x0800c609
 800c5f0:	0800c611 	.word	0x0800c611
 800c5f4:	0800c619 	.word	0x0800c619
 800c5f8:	0800c645 	.word	0x0800c645
 800c5fc:	0800c64d 	.word	0x0800c64d
 800c600:	2300      	movs	r3, #0
 800c602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c606:	e24e      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c608:	2304      	movs	r3, #4
 800c60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c60e:	e24a      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c610:	2308      	movs	r3, #8
 800c612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c616:	e246      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c618:	2310      	movs	r3, #16
 800c61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c61e:	e242      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c620:	cfff69f3 	.word	0xcfff69f3
 800c624:	58000c00 	.word	0x58000c00
 800c628:	11fff4ff 	.word	0x11fff4ff
 800c62c:	40011000 	.word	0x40011000
 800c630:	58024400 	.word	0x58024400
 800c634:	40004400 	.word	0x40004400
 800c638:	40004800 	.word	0x40004800
 800c63c:	40004c00 	.word	0x40004c00
 800c640:	40005000 	.word	0x40005000
 800c644:	2320      	movs	r3, #32
 800c646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c64a:	e22c      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c64c:	2340      	movs	r3, #64	; 0x40
 800c64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c652:	e228      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c654:	2380      	movs	r3, #128	; 0x80
 800c656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c65a:	e224      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4ab1      	ldr	r2, [pc, #708]	; (800c928 <UART_SetConfig+0x630>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d176      	bne.n	800c754 <UART_SetConfig+0x45c>
 800c666:	4bb1      	ldr	r3, [pc, #708]	; (800c92c <UART_SetConfig+0x634>)
 800c668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c66a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c66e:	2b28      	cmp	r3, #40	; 0x28
 800c670:	d86c      	bhi.n	800c74c <UART_SetConfig+0x454>
 800c672:	a201      	add	r2, pc, #4	; (adr r2, 800c678 <UART_SetConfig+0x380>)
 800c674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c678:	0800c71d 	.word	0x0800c71d
 800c67c:	0800c74d 	.word	0x0800c74d
 800c680:	0800c74d 	.word	0x0800c74d
 800c684:	0800c74d 	.word	0x0800c74d
 800c688:	0800c74d 	.word	0x0800c74d
 800c68c:	0800c74d 	.word	0x0800c74d
 800c690:	0800c74d 	.word	0x0800c74d
 800c694:	0800c74d 	.word	0x0800c74d
 800c698:	0800c725 	.word	0x0800c725
 800c69c:	0800c74d 	.word	0x0800c74d
 800c6a0:	0800c74d 	.word	0x0800c74d
 800c6a4:	0800c74d 	.word	0x0800c74d
 800c6a8:	0800c74d 	.word	0x0800c74d
 800c6ac:	0800c74d 	.word	0x0800c74d
 800c6b0:	0800c74d 	.word	0x0800c74d
 800c6b4:	0800c74d 	.word	0x0800c74d
 800c6b8:	0800c72d 	.word	0x0800c72d
 800c6bc:	0800c74d 	.word	0x0800c74d
 800c6c0:	0800c74d 	.word	0x0800c74d
 800c6c4:	0800c74d 	.word	0x0800c74d
 800c6c8:	0800c74d 	.word	0x0800c74d
 800c6cc:	0800c74d 	.word	0x0800c74d
 800c6d0:	0800c74d 	.word	0x0800c74d
 800c6d4:	0800c74d 	.word	0x0800c74d
 800c6d8:	0800c735 	.word	0x0800c735
 800c6dc:	0800c74d 	.word	0x0800c74d
 800c6e0:	0800c74d 	.word	0x0800c74d
 800c6e4:	0800c74d 	.word	0x0800c74d
 800c6e8:	0800c74d 	.word	0x0800c74d
 800c6ec:	0800c74d 	.word	0x0800c74d
 800c6f0:	0800c74d 	.word	0x0800c74d
 800c6f4:	0800c74d 	.word	0x0800c74d
 800c6f8:	0800c73d 	.word	0x0800c73d
 800c6fc:	0800c74d 	.word	0x0800c74d
 800c700:	0800c74d 	.word	0x0800c74d
 800c704:	0800c74d 	.word	0x0800c74d
 800c708:	0800c74d 	.word	0x0800c74d
 800c70c:	0800c74d 	.word	0x0800c74d
 800c710:	0800c74d 	.word	0x0800c74d
 800c714:	0800c74d 	.word	0x0800c74d
 800c718:	0800c745 	.word	0x0800c745
 800c71c:	2301      	movs	r3, #1
 800c71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c722:	e1c0      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c724:	2304      	movs	r3, #4
 800c726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c72a:	e1bc      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c72c:	2308      	movs	r3, #8
 800c72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c732:	e1b8      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c734:	2310      	movs	r3, #16
 800c736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c73a:	e1b4      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c73c:	2320      	movs	r3, #32
 800c73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c742:	e1b0      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c744:	2340      	movs	r3, #64	; 0x40
 800c746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c74a:	e1ac      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c74c:	2380      	movs	r3, #128	; 0x80
 800c74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c752:	e1a8      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a75      	ldr	r2, [pc, #468]	; (800c930 <UART_SetConfig+0x638>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d130      	bne.n	800c7c0 <UART_SetConfig+0x4c8>
 800c75e:	4b73      	ldr	r3, [pc, #460]	; (800c92c <UART_SetConfig+0x634>)
 800c760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c762:	f003 0307 	and.w	r3, r3, #7
 800c766:	2b05      	cmp	r3, #5
 800c768:	d826      	bhi.n	800c7b8 <UART_SetConfig+0x4c0>
 800c76a:	a201      	add	r2, pc, #4	; (adr r2, 800c770 <UART_SetConfig+0x478>)
 800c76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c770:	0800c789 	.word	0x0800c789
 800c774:	0800c791 	.word	0x0800c791
 800c778:	0800c799 	.word	0x0800c799
 800c77c:	0800c7a1 	.word	0x0800c7a1
 800c780:	0800c7a9 	.word	0x0800c7a9
 800c784:	0800c7b1 	.word	0x0800c7b1
 800c788:	2300      	movs	r3, #0
 800c78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c78e:	e18a      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c790:	2304      	movs	r3, #4
 800c792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c796:	e186      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c798:	2308      	movs	r3, #8
 800c79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c79e:	e182      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c7a0:	2310      	movs	r3, #16
 800c7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7a6:	e17e      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c7a8:	2320      	movs	r3, #32
 800c7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ae:	e17a      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c7b0:	2340      	movs	r3, #64	; 0x40
 800c7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7b6:	e176      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c7b8:	2380      	movs	r3, #128	; 0x80
 800c7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7be:	e172      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4a5b      	ldr	r2, [pc, #364]	; (800c934 <UART_SetConfig+0x63c>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d130      	bne.n	800c82c <UART_SetConfig+0x534>
 800c7ca:	4b58      	ldr	r3, [pc, #352]	; (800c92c <UART_SetConfig+0x634>)
 800c7cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7ce:	f003 0307 	and.w	r3, r3, #7
 800c7d2:	2b05      	cmp	r3, #5
 800c7d4:	d826      	bhi.n	800c824 <UART_SetConfig+0x52c>
 800c7d6:	a201      	add	r2, pc, #4	; (adr r2, 800c7dc <UART_SetConfig+0x4e4>)
 800c7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7dc:	0800c7f5 	.word	0x0800c7f5
 800c7e0:	0800c7fd 	.word	0x0800c7fd
 800c7e4:	0800c805 	.word	0x0800c805
 800c7e8:	0800c80d 	.word	0x0800c80d
 800c7ec:	0800c815 	.word	0x0800c815
 800c7f0:	0800c81d 	.word	0x0800c81d
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7fa:	e154      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c7fc:	2304      	movs	r3, #4
 800c7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c802:	e150      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c804:	2308      	movs	r3, #8
 800c806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c80a:	e14c      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c80c:	2310      	movs	r3, #16
 800c80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c812:	e148      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c814:	2320      	movs	r3, #32
 800c816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c81a:	e144      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c81c:	2340      	movs	r3, #64	; 0x40
 800c81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c822:	e140      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c824:	2380      	movs	r3, #128	; 0x80
 800c826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c82a:	e13c      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a41      	ldr	r2, [pc, #260]	; (800c938 <UART_SetConfig+0x640>)
 800c832:	4293      	cmp	r3, r2
 800c834:	f040 8082 	bne.w	800c93c <UART_SetConfig+0x644>
 800c838:	4b3c      	ldr	r3, [pc, #240]	; (800c92c <UART_SetConfig+0x634>)
 800c83a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c83c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c840:	2b28      	cmp	r3, #40	; 0x28
 800c842:	d86d      	bhi.n	800c920 <UART_SetConfig+0x628>
 800c844:	a201      	add	r2, pc, #4	; (adr r2, 800c84c <UART_SetConfig+0x554>)
 800c846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c84a:	bf00      	nop
 800c84c:	0800c8f1 	.word	0x0800c8f1
 800c850:	0800c921 	.word	0x0800c921
 800c854:	0800c921 	.word	0x0800c921
 800c858:	0800c921 	.word	0x0800c921
 800c85c:	0800c921 	.word	0x0800c921
 800c860:	0800c921 	.word	0x0800c921
 800c864:	0800c921 	.word	0x0800c921
 800c868:	0800c921 	.word	0x0800c921
 800c86c:	0800c8f9 	.word	0x0800c8f9
 800c870:	0800c921 	.word	0x0800c921
 800c874:	0800c921 	.word	0x0800c921
 800c878:	0800c921 	.word	0x0800c921
 800c87c:	0800c921 	.word	0x0800c921
 800c880:	0800c921 	.word	0x0800c921
 800c884:	0800c921 	.word	0x0800c921
 800c888:	0800c921 	.word	0x0800c921
 800c88c:	0800c901 	.word	0x0800c901
 800c890:	0800c921 	.word	0x0800c921
 800c894:	0800c921 	.word	0x0800c921
 800c898:	0800c921 	.word	0x0800c921
 800c89c:	0800c921 	.word	0x0800c921
 800c8a0:	0800c921 	.word	0x0800c921
 800c8a4:	0800c921 	.word	0x0800c921
 800c8a8:	0800c921 	.word	0x0800c921
 800c8ac:	0800c909 	.word	0x0800c909
 800c8b0:	0800c921 	.word	0x0800c921
 800c8b4:	0800c921 	.word	0x0800c921
 800c8b8:	0800c921 	.word	0x0800c921
 800c8bc:	0800c921 	.word	0x0800c921
 800c8c0:	0800c921 	.word	0x0800c921
 800c8c4:	0800c921 	.word	0x0800c921
 800c8c8:	0800c921 	.word	0x0800c921
 800c8cc:	0800c911 	.word	0x0800c911
 800c8d0:	0800c921 	.word	0x0800c921
 800c8d4:	0800c921 	.word	0x0800c921
 800c8d8:	0800c921 	.word	0x0800c921
 800c8dc:	0800c921 	.word	0x0800c921
 800c8e0:	0800c921 	.word	0x0800c921
 800c8e4:	0800c921 	.word	0x0800c921
 800c8e8:	0800c921 	.word	0x0800c921
 800c8ec:	0800c919 	.word	0x0800c919
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8f6:	e0d6      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c8f8:	2304      	movs	r3, #4
 800c8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8fe:	e0d2      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c900:	2308      	movs	r3, #8
 800c902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c906:	e0ce      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c908:	2310      	movs	r3, #16
 800c90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c90e:	e0ca      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c910:	2320      	movs	r3, #32
 800c912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c916:	e0c6      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c918:	2340      	movs	r3, #64	; 0x40
 800c91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c91e:	e0c2      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c920:	2380      	movs	r3, #128	; 0x80
 800c922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c926:	e0be      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800c928:	40011400 	.word	0x40011400
 800c92c:	58024400 	.word	0x58024400
 800c930:	40007800 	.word	0x40007800
 800c934:	40007c00 	.word	0x40007c00
 800c938:	40011800 	.word	0x40011800
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4aad      	ldr	r2, [pc, #692]	; (800cbf8 <UART_SetConfig+0x900>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d176      	bne.n	800ca34 <UART_SetConfig+0x73c>
 800c946:	4bad      	ldr	r3, [pc, #692]	; (800cbfc <UART_SetConfig+0x904>)
 800c948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c94a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c94e:	2b28      	cmp	r3, #40	; 0x28
 800c950:	d86c      	bhi.n	800ca2c <UART_SetConfig+0x734>
 800c952:	a201      	add	r2, pc, #4	; (adr r2, 800c958 <UART_SetConfig+0x660>)
 800c954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c958:	0800c9fd 	.word	0x0800c9fd
 800c95c:	0800ca2d 	.word	0x0800ca2d
 800c960:	0800ca2d 	.word	0x0800ca2d
 800c964:	0800ca2d 	.word	0x0800ca2d
 800c968:	0800ca2d 	.word	0x0800ca2d
 800c96c:	0800ca2d 	.word	0x0800ca2d
 800c970:	0800ca2d 	.word	0x0800ca2d
 800c974:	0800ca2d 	.word	0x0800ca2d
 800c978:	0800ca05 	.word	0x0800ca05
 800c97c:	0800ca2d 	.word	0x0800ca2d
 800c980:	0800ca2d 	.word	0x0800ca2d
 800c984:	0800ca2d 	.word	0x0800ca2d
 800c988:	0800ca2d 	.word	0x0800ca2d
 800c98c:	0800ca2d 	.word	0x0800ca2d
 800c990:	0800ca2d 	.word	0x0800ca2d
 800c994:	0800ca2d 	.word	0x0800ca2d
 800c998:	0800ca0d 	.word	0x0800ca0d
 800c99c:	0800ca2d 	.word	0x0800ca2d
 800c9a0:	0800ca2d 	.word	0x0800ca2d
 800c9a4:	0800ca2d 	.word	0x0800ca2d
 800c9a8:	0800ca2d 	.word	0x0800ca2d
 800c9ac:	0800ca2d 	.word	0x0800ca2d
 800c9b0:	0800ca2d 	.word	0x0800ca2d
 800c9b4:	0800ca2d 	.word	0x0800ca2d
 800c9b8:	0800ca15 	.word	0x0800ca15
 800c9bc:	0800ca2d 	.word	0x0800ca2d
 800c9c0:	0800ca2d 	.word	0x0800ca2d
 800c9c4:	0800ca2d 	.word	0x0800ca2d
 800c9c8:	0800ca2d 	.word	0x0800ca2d
 800c9cc:	0800ca2d 	.word	0x0800ca2d
 800c9d0:	0800ca2d 	.word	0x0800ca2d
 800c9d4:	0800ca2d 	.word	0x0800ca2d
 800c9d8:	0800ca1d 	.word	0x0800ca1d
 800c9dc:	0800ca2d 	.word	0x0800ca2d
 800c9e0:	0800ca2d 	.word	0x0800ca2d
 800c9e4:	0800ca2d 	.word	0x0800ca2d
 800c9e8:	0800ca2d 	.word	0x0800ca2d
 800c9ec:	0800ca2d 	.word	0x0800ca2d
 800c9f0:	0800ca2d 	.word	0x0800ca2d
 800c9f4:	0800ca2d 	.word	0x0800ca2d
 800c9f8:	0800ca25 	.word	0x0800ca25
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca02:	e050      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800ca04:	2304      	movs	r3, #4
 800ca06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca0a:	e04c      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800ca0c:	2308      	movs	r3, #8
 800ca0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca12:	e048      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800ca14:	2310      	movs	r3, #16
 800ca16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca1a:	e044      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800ca1c:	2320      	movs	r3, #32
 800ca1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca22:	e040      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800ca24:	2340      	movs	r3, #64	; 0x40
 800ca26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca2a:	e03c      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800ca2c:	2380      	movs	r3, #128	; 0x80
 800ca2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca32:	e038      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4a71      	ldr	r2, [pc, #452]	; (800cc00 <UART_SetConfig+0x908>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d130      	bne.n	800caa0 <UART_SetConfig+0x7a8>
 800ca3e:	4b6f      	ldr	r3, [pc, #444]	; (800cbfc <UART_SetConfig+0x904>)
 800ca40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca42:	f003 0307 	and.w	r3, r3, #7
 800ca46:	2b05      	cmp	r3, #5
 800ca48:	d826      	bhi.n	800ca98 <UART_SetConfig+0x7a0>
 800ca4a:	a201      	add	r2, pc, #4	; (adr r2, 800ca50 <UART_SetConfig+0x758>)
 800ca4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca50:	0800ca69 	.word	0x0800ca69
 800ca54:	0800ca71 	.word	0x0800ca71
 800ca58:	0800ca79 	.word	0x0800ca79
 800ca5c:	0800ca81 	.word	0x0800ca81
 800ca60:	0800ca89 	.word	0x0800ca89
 800ca64:	0800ca91 	.word	0x0800ca91
 800ca68:	2302      	movs	r3, #2
 800ca6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca6e:	e01a      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800ca70:	2304      	movs	r3, #4
 800ca72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca76:	e016      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800ca78:	2308      	movs	r3, #8
 800ca7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca7e:	e012      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800ca80:	2310      	movs	r3, #16
 800ca82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca86:	e00e      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800ca88:	2320      	movs	r3, #32
 800ca8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca8e:	e00a      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800ca90:	2340      	movs	r3, #64	; 0x40
 800ca92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca96:	e006      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800ca98:	2380      	movs	r3, #128	; 0x80
 800ca9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca9e:	e002      	b.n	800caa6 <UART_SetConfig+0x7ae>
 800caa0:	2380      	movs	r3, #128	; 0x80
 800caa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4a55      	ldr	r2, [pc, #340]	; (800cc00 <UART_SetConfig+0x908>)
 800caac:	4293      	cmp	r3, r2
 800caae:	f040 80f8 	bne.w	800cca2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cab2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cab6:	2b20      	cmp	r3, #32
 800cab8:	dc46      	bgt.n	800cb48 <UART_SetConfig+0x850>
 800caba:	2b02      	cmp	r3, #2
 800cabc:	db75      	blt.n	800cbaa <UART_SetConfig+0x8b2>
 800cabe:	3b02      	subs	r3, #2
 800cac0:	2b1e      	cmp	r3, #30
 800cac2:	d872      	bhi.n	800cbaa <UART_SetConfig+0x8b2>
 800cac4:	a201      	add	r2, pc, #4	; (adr r2, 800cacc <UART_SetConfig+0x7d4>)
 800cac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caca:	bf00      	nop
 800cacc:	0800cb4f 	.word	0x0800cb4f
 800cad0:	0800cbab 	.word	0x0800cbab
 800cad4:	0800cb57 	.word	0x0800cb57
 800cad8:	0800cbab 	.word	0x0800cbab
 800cadc:	0800cbab 	.word	0x0800cbab
 800cae0:	0800cbab 	.word	0x0800cbab
 800cae4:	0800cb67 	.word	0x0800cb67
 800cae8:	0800cbab 	.word	0x0800cbab
 800caec:	0800cbab 	.word	0x0800cbab
 800caf0:	0800cbab 	.word	0x0800cbab
 800caf4:	0800cbab 	.word	0x0800cbab
 800caf8:	0800cbab 	.word	0x0800cbab
 800cafc:	0800cbab 	.word	0x0800cbab
 800cb00:	0800cbab 	.word	0x0800cbab
 800cb04:	0800cb77 	.word	0x0800cb77
 800cb08:	0800cbab 	.word	0x0800cbab
 800cb0c:	0800cbab 	.word	0x0800cbab
 800cb10:	0800cbab 	.word	0x0800cbab
 800cb14:	0800cbab 	.word	0x0800cbab
 800cb18:	0800cbab 	.word	0x0800cbab
 800cb1c:	0800cbab 	.word	0x0800cbab
 800cb20:	0800cbab 	.word	0x0800cbab
 800cb24:	0800cbab 	.word	0x0800cbab
 800cb28:	0800cbab 	.word	0x0800cbab
 800cb2c:	0800cbab 	.word	0x0800cbab
 800cb30:	0800cbab 	.word	0x0800cbab
 800cb34:	0800cbab 	.word	0x0800cbab
 800cb38:	0800cbab 	.word	0x0800cbab
 800cb3c:	0800cbab 	.word	0x0800cbab
 800cb40:	0800cbab 	.word	0x0800cbab
 800cb44:	0800cb9d 	.word	0x0800cb9d
 800cb48:	2b40      	cmp	r3, #64	; 0x40
 800cb4a:	d02a      	beq.n	800cba2 <UART_SetConfig+0x8aa>
 800cb4c:	e02d      	b.n	800cbaa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cb4e:	f7fc ff87 	bl	8009a60 <HAL_RCCEx_GetD3PCLK1Freq>
 800cb52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb54:	e02f      	b.n	800cbb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fc ff96 	bl	8009a8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb64:	e027      	b.n	800cbb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb66:	f107 0318 	add.w	r3, r7, #24
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7fd f8e2 	bl	8009d34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb74:	e01f      	b.n	800cbb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb76:	4b21      	ldr	r3, [pc, #132]	; (800cbfc <UART_SetConfig+0x904>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f003 0320 	and.w	r3, r3, #32
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d009      	beq.n	800cb96 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb82:	4b1e      	ldr	r3, [pc, #120]	; (800cbfc <UART_SetConfig+0x904>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	08db      	lsrs	r3, r3, #3
 800cb88:	f003 0303 	and.w	r3, r3, #3
 800cb8c:	4a1d      	ldr	r2, [pc, #116]	; (800cc04 <UART_SetConfig+0x90c>)
 800cb8e:	fa22 f303 	lsr.w	r3, r2, r3
 800cb92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb94:	e00f      	b.n	800cbb6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cb96:	4b1b      	ldr	r3, [pc, #108]	; (800cc04 <UART_SetConfig+0x90c>)
 800cb98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb9a:	e00c      	b.n	800cbb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cb9c:	4b1a      	ldr	r3, [pc, #104]	; (800cc08 <UART_SetConfig+0x910>)
 800cb9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cba0:	e009      	b.n	800cbb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cba8:	e005      	b.n	800cbb6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cbae:	2301      	movs	r3, #1
 800cbb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cbb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cbb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	f000 81ee 	beq.w	800cf9a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc2:	4a12      	ldr	r2, [pc, #72]	; (800cc0c <UART_SetConfig+0x914>)
 800cbc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbc8:	461a      	mov	r2, r3
 800cbca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbcc:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbd0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	685a      	ldr	r2, [r3, #4]
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	005b      	lsls	r3, r3, #1
 800cbda:	4413      	add	r3, r2
 800cbdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d305      	bcc.n	800cbee <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cbe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d910      	bls.n	800cc10 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cbf4:	e1d1      	b.n	800cf9a <UART_SetConfig+0xca2>
 800cbf6:	bf00      	nop
 800cbf8:	40011c00 	.word	0x40011c00
 800cbfc:	58024400 	.word	0x58024400
 800cc00:	58000c00 	.word	0x58000c00
 800cc04:	03d09000 	.word	0x03d09000
 800cc08:	003d0900 	.word	0x003d0900
 800cc0c:	0800e1dc 	.word	0x0800e1dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc12:	2200      	movs	r2, #0
 800cc14:	60bb      	str	r3, [r7, #8]
 800cc16:	60fa      	str	r2, [r7, #12]
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc1c:	4ac0      	ldr	r2, [pc, #768]	; (800cf20 <UART_SetConfig+0xc28>)
 800cc1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	2200      	movs	r2, #0
 800cc26:	603b      	str	r3, [r7, #0]
 800cc28:	607a      	str	r2, [r7, #4]
 800cc2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cc32:	f7f3 fb75 	bl	8000320 <__aeabi_uldivmod>
 800cc36:	4602      	mov	r2, r0
 800cc38:	460b      	mov	r3, r1
 800cc3a:	4610      	mov	r0, r2
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	f04f 0200 	mov.w	r2, #0
 800cc42:	f04f 0300 	mov.w	r3, #0
 800cc46:	020b      	lsls	r3, r1, #8
 800cc48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cc4c:	0202      	lsls	r2, r0, #8
 800cc4e:	6979      	ldr	r1, [r7, #20]
 800cc50:	6849      	ldr	r1, [r1, #4]
 800cc52:	0849      	lsrs	r1, r1, #1
 800cc54:	2000      	movs	r0, #0
 800cc56:	460c      	mov	r4, r1
 800cc58:	4605      	mov	r5, r0
 800cc5a:	eb12 0804 	adds.w	r8, r2, r4
 800cc5e:	eb43 0905 	adc.w	r9, r3, r5
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	2200      	movs	r2, #0
 800cc68:	469a      	mov	sl, r3
 800cc6a:	4693      	mov	fp, r2
 800cc6c:	4652      	mov	r2, sl
 800cc6e:	465b      	mov	r3, fp
 800cc70:	4640      	mov	r0, r8
 800cc72:	4649      	mov	r1, r9
 800cc74:	f7f3 fb54 	bl	8000320 <__aeabi_uldivmod>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	460b      	mov	r3, r1
 800cc7c:	4613      	mov	r3, r2
 800cc7e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc86:	d308      	bcc.n	800cc9a <UART_SetConfig+0x9a2>
 800cc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc8e:	d204      	bcs.n	800cc9a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc96:	60da      	str	r2, [r3, #12]
 800cc98:	e17f      	b.n	800cf9a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cca0:	e17b      	b.n	800cf9a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	69db      	ldr	r3, [r3, #28]
 800cca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccaa:	f040 80bd 	bne.w	800ce28 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ccae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ccb2:	2b20      	cmp	r3, #32
 800ccb4:	dc48      	bgt.n	800cd48 <UART_SetConfig+0xa50>
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	db7b      	blt.n	800cdb2 <UART_SetConfig+0xaba>
 800ccba:	2b20      	cmp	r3, #32
 800ccbc:	d879      	bhi.n	800cdb2 <UART_SetConfig+0xaba>
 800ccbe:	a201      	add	r2, pc, #4	; (adr r2, 800ccc4 <UART_SetConfig+0x9cc>)
 800ccc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc4:	0800cd4f 	.word	0x0800cd4f
 800ccc8:	0800cd57 	.word	0x0800cd57
 800cccc:	0800cdb3 	.word	0x0800cdb3
 800ccd0:	0800cdb3 	.word	0x0800cdb3
 800ccd4:	0800cd5f 	.word	0x0800cd5f
 800ccd8:	0800cdb3 	.word	0x0800cdb3
 800ccdc:	0800cdb3 	.word	0x0800cdb3
 800cce0:	0800cdb3 	.word	0x0800cdb3
 800cce4:	0800cd6f 	.word	0x0800cd6f
 800cce8:	0800cdb3 	.word	0x0800cdb3
 800ccec:	0800cdb3 	.word	0x0800cdb3
 800ccf0:	0800cdb3 	.word	0x0800cdb3
 800ccf4:	0800cdb3 	.word	0x0800cdb3
 800ccf8:	0800cdb3 	.word	0x0800cdb3
 800ccfc:	0800cdb3 	.word	0x0800cdb3
 800cd00:	0800cdb3 	.word	0x0800cdb3
 800cd04:	0800cd7f 	.word	0x0800cd7f
 800cd08:	0800cdb3 	.word	0x0800cdb3
 800cd0c:	0800cdb3 	.word	0x0800cdb3
 800cd10:	0800cdb3 	.word	0x0800cdb3
 800cd14:	0800cdb3 	.word	0x0800cdb3
 800cd18:	0800cdb3 	.word	0x0800cdb3
 800cd1c:	0800cdb3 	.word	0x0800cdb3
 800cd20:	0800cdb3 	.word	0x0800cdb3
 800cd24:	0800cdb3 	.word	0x0800cdb3
 800cd28:	0800cdb3 	.word	0x0800cdb3
 800cd2c:	0800cdb3 	.word	0x0800cdb3
 800cd30:	0800cdb3 	.word	0x0800cdb3
 800cd34:	0800cdb3 	.word	0x0800cdb3
 800cd38:	0800cdb3 	.word	0x0800cdb3
 800cd3c:	0800cdb3 	.word	0x0800cdb3
 800cd40:	0800cdb3 	.word	0x0800cdb3
 800cd44:	0800cda5 	.word	0x0800cda5
 800cd48:	2b40      	cmp	r3, #64	; 0x40
 800cd4a:	d02e      	beq.n	800cdaa <UART_SetConfig+0xab2>
 800cd4c:	e031      	b.n	800cdb2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd4e:	f7fb ff61 	bl	8008c14 <HAL_RCC_GetPCLK1Freq>
 800cd52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd54:	e033      	b.n	800cdbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd56:	f7fb ff73 	bl	8008c40 <HAL_RCC_GetPCLK2Freq>
 800cd5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd5c:	e02f      	b.n	800cdbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7fc fe92 	bl	8009a8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd6c:	e027      	b.n	800cdbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd6e:	f107 0318 	add.w	r3, r7, #24
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7fc ffde 	bl	8009d34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd7c:	e01f      	b.n	800cdbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd7e:	4b69      	ldr	r3, [pc, #420]	; (800cf24 <UART_SetConfig+0xc2c>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f003 0320 	and.w	r3, r3, #32
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d009      	beq.n	800cd9e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd8a:	4b66      	ldr	r3, [pc, #408]	; (800cf24 <UART_SetConfig+0xc2c>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	08db      	lsrs	r3, r3, #3
 800cd90:	f003 0303 	and.w	r3, r3, #3
 800cd94:	4a64      	ldr	r2, [pc, #400]	; (800cf28 <UART_SetConfig+0xc30>)
 800cd96:	fa22 f303 	lsr.w	r3, r2, r3
 800cd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd9c:	e00f      	b.n	800cdbe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800cd9e:	4b62      	ldr	r3, [pc, #392]	; (800cf28 <UART_SetConfig+0xc30>)
 800cda0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cda2:	e00c      	b.n	800cdbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cda4:	4b61      	ldr	r3, [pc, #388]	; (800cf2c <UART_SetConfig+0xc34>)
 800cda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cda8:	e009      	b.n	800cdbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cdaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cdae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdb0:	e005      	b.n	800cdbe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cdbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cdbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	f000 80ea 	beq.w	800cf9a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdca:	4a55      	ldr	r2, [pc, #340]	; (800cf20 <UART_SetConfig+0xc28>)
 800cdcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdd4:	fbb3 f3f2 	udiv	r3, r3, r2
 800cdd8:	005a      	lsls	r2, r3, #1
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	085b      	lsrs	r3, r3, #1
 800cde0:	441a      	add	r2, r3
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdee:	2b0f      	cmp	r3, #15
 800cdf0:	d916      	bls.n	800ce20 <UART_SetConfig+0xb28>
 800cdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdf8:	d212      	bcs.n	800ce20 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfc:	b29b      	uxth	r3, r3
 800cdfe:	f023 030f 	bic.w	r3, r3, #15
 800ce02:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ce04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce06:	085b      	lsrs	r3, r3, #1
 800ce08:	b29b      	uxth	r3, r3
 800ce0a:	f003 0307 	and.w	r3, r3, #7
 800ce0e:	b29a      	uxth	r2, r3
 800ce10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ce12:	4313      	orrs	r3, r2
 800ce14:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ce1c:	60da      	str	r2, [r3, #12]
 800ce1e:	e0bc      	b.n	800cf9a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ce20:	2301      	movs	r3, #1
 800ce22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ce26:	e0b8      	b.n	800cf9a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ce28:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ce2c:	2b20      	cmp	r3, #32
 800ce2e:	dc4b      	bgt.n	800cec8 <UART_SetConfig+0xbd0>
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	f2c0 8087 	blt.w	800cf44 <UART_SetConfig+0xc4c>
 800ce36:	2b20      	cmp	r3, #32
 800ce38:	f200 8084 	bhi.w	800cf44 <UART_SetConfig+0xc4c>
 800ce3c:	a201      	add	r2, pc, #4	; (adr r2, 800ce44 <UART_SetConfig+0xb4c>)
 800ce3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce42:	bf00      	nop
 800ce44:	0800cecf 	.word	0x0800cecf
 800ce48:	0800ced7 	.word	0x0800ced7
 800ce4c:	0800cf45 	.word	0x0800cf45
 800ce50:	0800cf45 	.word	0x0800cf45
 800ce54:	0800cedf 	.word	0x0800cedf
 800ce58:	0800cf45 	.word	0x0800cf45
 800ce5c:	0800cf45 	.word	0x0800cf45
 800ce60:	0800cf45 	.word	0x0800cf45
 800ce64:	0800ceef 	.word	0x0800ceef
 800ce68:	0800cf45 	.word	0x0800cf45
 800ce6c:	0800cf45 	.word	0x0800cf45
 800ce70:	0800cf45 	.word	0x0800cf45
 800ce74:	0800cf45 	.word	0x0800cf45
 800ce78:	0800cf45 	.word	0x0800cf45
 800ce7c:	0800cf45 	.word	0x0800cf45
 800ce80:	0800cf45 	.word	0x0800cf45
 800ce84:	0800ceff 	.word	0x0800ceff
 800ce88:	0800cf45 	.word	0x0800cf45
 800ce8c:	0800cf45 	.word	0x0800cf45
 800ce90:	0800cf45 	.word	0x0800cf45
 800ce94:	0800cf45 	.word	0x0800cf45
 800ce98:	0800cf45 	.word	0x0800cf45
 800ce9c:	0800cf45 	.word	0x0800cf45
 800cea0:	0800cf45 	.word	0x0800cf45
 800cea4:	0800cf45 	.word	0x0800cf45
 800cea8:	0800cf45 	.word	0x0800cf45
 800ceac:	0800cf45 	.word	0x0800cf45
 800ceb0:	0800cf45 	.word	0x0800cf45
 800ceb4:	0800cf45 	.word	0x0800cf45
 800ceb8:	0800cf45 	.word	0x0800cf45
 800cebc:	0800cf45 	.word	0x0800cf45
 800cec0:	0800cf45 	.word	0x0800cf45
 800cec4:	0800cf37 	.word	0x0800cf37
 800cec8:	2b40      	cmp	r3, #64	; 0x40
 800ceca:	d037      	beq.n	800cf3c <UART_SetConfig+0xc44>
 800cecc:	e03a      	b.n	800cf44 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cece:	f7fb fea1 	bl	8008c14 <HAL_RCC_GetPCLK1Freq>
 800ced2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ced4:	e03c      	b.n	800cf50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ced6:	f7fb feb3 	bl	8008c40 <HAL_RCC_GetPCLK2Freq>
 800ceda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cedc:	e038      	b.n	800cf50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7fc fdd2 	bl	8009a8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceec:	e030      	b.n	800cf50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ceee:	f107 0318 	add.w	r3, r7, #24
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7fc ff1e 	bl	8009d34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cef8:	69fb      	ldr	r3, [r7, #28]
 800cefa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cefc:	e028      	b.n	800cf50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cefe:	4b09      	ldr	r3, [pc, #36]	; (800cf24 <UART_SetConfig+0xc2c>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f003 0320 	and.w	r3, r3, #32
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d012      	beq.n	800cf30 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cf0a:	4b06      	ldr	r3, [pc, #24]	; (800cf24 <UART_SetConfig+0xc2c>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	08db      	lsrs	r3, r3, #3
 800cf10:	f003 0303 	and.w	r3, r3, #3
 800cf14:	4a04      	ldr	r2, [pc, #16]	; (800cf28 <UART_SetConfig+0xc30>)
 800cf16:	fa22 f303 	lsr.w	r3, r2, r3
 800cf1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cf1c:	e018      	b.n	800cf50 <UART_SetConfig+0xc58>
 800cf1e:	bf00      	nop
 800cf20:	0800e1dc 	.word	0x0800e1dc
 800cf24:	58024400 	.word	0x58024400
 800cf28:	03d09000 	.word	0x03d09000
 800cf2c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800cf30:	4b24      	ldr	r3, [pc, #144]	; (800cfc4 <UART_SetConfig+0xccc>)
 800cf32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf34:	e00c      	b.n	800cf50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cf36:	4b24      	ldr	r3, [pc, #144]	; (800cfc8 <UART_SetConfig+0xcd0>)
 800cf38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf3a:	e009      	b.n	800cf50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf42:	e005      	b.n	800cf50 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800cf44:	2300      	movs	r3, #0
 800cf46:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cf4e:	bf00      	nop
    }

    if (pclk != 0U)
 800cf50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d021      	beq.n	800cf9a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf5a:	4a1c      	ldr	r2, [pc, #112]	; (800cfcc <UART_SetConfig+0xcd4>)
 800cf5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf60:	461a      	mov	r2, r3
 800cf62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf64:	fbb3 f2f2 	udiv	r2, r3, r2
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	085b      	lsrs	r3, r3, #1
 800cf6e:	441a      	add	r2, r3
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf78:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7c:	2b0f      	cmp	r3, #15
 800cf7e:	d909      	bls.n	800cf94 <UART_SetConfig+0xc9c>
 800cf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf86:	d205      	bcs.n	800cf94 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf8a:	b29a      	uxth	r2, r3
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	60da      	str	r2, [r3, #12]
 800cf92:	e002      	b.n	800cf9a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cf94:	2301      	movs	r3, #1
 800cf96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	2200      	movs	r2, #0
 800cfae:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cfb6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3748      	adds	r7, #72	; 0x48
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cfc4:	03d09000 	.word	0x03d09000
 800cfc8:	003d0900 	.word	0x003d0900
 800cfcc:	0800e1dc 	.word	0x0800e1dc

0800cfd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfdc:	f003 0301 	and.w	r3, r3, #1
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d00a      	beq.n	800cffa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	430a      	orrs	r2, r1
 800cff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cffe:	f003 0302 	and.w	r3, r3, #2
 800d002:	2b00      	cmp	r3, #0
 800d004:	d00a      	beq.n	800d01c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	430a      	orrs	r2, r1
 800d01a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d020:	f003 0304 	and.w	r3, r3, #4
 800d024:	2b00      	cmp	r3, #0
 800d026:	d00a      	beq.n	800d03e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	430a      	orrs	r2, r1
 800d03c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d042:	f003 0308 	and.w	r3, r3, #8
 800d046:	2b00      	cmp	r3, #0
 800d048:	d00a      	beq.n	800d060 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	430a      	orrs	r2, r1
 800d05e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d064:	f003 0310 	and.w	r3, r3, #16
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d00a      	beq.n	800d082 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	689b      	ldr	r3, [r3, #8]
 800d072:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	430a      	orrs	r2, r1
 800d080:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d086:	f003 0320 	and.w	r3, r3, #32
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d00a      	beq.n	800d0a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	689b      	ldr	r3, [r3, #8]
 800d094:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	430a      	orrs	r2, r1
 800d0a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d01a      	beq.n	800d0e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	430a      	orrs	r2, r1
 800d0c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d0ce:	d10a      	bne.n	800d0e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	685b      	ldr	r3, [r3, #4]
 800d0d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	430a      	orrs	r2, r1
 800d0e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d00a      	beq.n	800d108 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	430a      	orrs	r2, r1
 800d106:	605a      	str	r2, [r3, #4]
  }
}
 800d108:	bf00      	nop
 800d10a:	370c      	adds	r7, #12
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr

0800d114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b086      	sub	sp, #24
 800d118:	af02      	add	r7, sp, #8
 800d11a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2200      	movs	r2, #0
 800d120:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d124:	f7f7 fd16 	bl	8004b54 <HAL_GetTick>
 800d128:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f003 0308 	and.w	r3, r3, #8
 800d134:	2b08      	cmp	r3, #8
 800d136:	d10e      	bne.n	800d156 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d138:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d13c:	9300      	str	r3, [sp, #0]
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2200      	movs	r2, #0
 800d142:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f000 f82f 	bl	800d1aa <UART_WaitOnFlagUntilTimeout>
 800d14c:	4603      	mov	r3, r0
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d001      	beq.n	800d156 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d152:	2303      	movs	r3, #3
 800d154:	e025      	b.n	800d1a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f003 0304 	and.w	r3, r3, #4
 800d160:	2b04      	cmp	r3, #4
 800d162:	d10e      	bne.n	800d182 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d168:	9300      	str	r3, [sp, #0]
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2200      	movs	r2, #0
 800d16e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 f819 	bl	800d1aa <UART_WaitOnFlagUntilTimeout>
 800d178:	4603      	mov	r3, r0
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d001      	beq.n	800d182 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d17e:	2303      	movs	r3, #3
 800d180:	e00f      	b.n	800d1a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2220      	movs	r2, #32
 800d186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2220      	movs	r2, #32
 800d18e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2200      	movs	r2, #0
 800d196:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d1a0:	2300      	movs	r3, #0
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3710      	adds	r7, #16
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}

0800d1aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d1aa:	b580      	push	{r7, lr}
 800d1ac:	b09c      	sub	sp, #112	; 0x70
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	60f8      	str	r0, [r7, #12]
 800d1b2:	60b9      	str	r1, [r7, #8]
 800d1b4:	603b      	str	r3, [r7, #0]
 800d1b6:	4613      	mov	r3, r2
 800d1b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d1ba:	e0a9      	b.n	800d310 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d1bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1c2:	f000 80a5 	beq.w	800d310 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d1c6:	f7f7 fcc5 	bl	8004b54 <HAL_GetTick>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	1ad3      	subs	r3, r2, r3
 800d1d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d302      	bcc.n	800d1dc <UART_WaitOnFlagUntilTimeout+0x32>
 800d1d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d140      	bne.n	800d25e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1e4:	e853 3f00 	ldrex	r3, [r3]
 800d1e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d1ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d1f0:	667b      	str	r3, [r7, #100]	; 0x64
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d1fc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d200:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d202:	e841 2300 	strex	r3, r2, [r1]
 800d206:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d1e6      	bne.n	800d1dc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	3308      	adds	r3, #8
 800d214:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d218:	e853 3f00 	ldrex	r3, [r3]
 800d21c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d220:	f023 0301 	bic.w	r3, r3, #1
 800d224:	663b      	str	r3, [r7, #96]	; 0x60
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	3308      	adds	r3, #8
 800d22c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d22e:	64ba      	str	r2, [r7, #72]	; 0x48
 800d230:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d232:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d234:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d236:	e841 2300 	strex	r3, r2, [r1]
 800d23a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d23c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d1e5      	bne.n	800d20e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2220      	movs	r2, #32
 800d246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2220      	movs	r2, #32
 800d24e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2200      	movs	r2, #0
 800d256:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d25a:	2303      	movs	r3, #3
 800d25c:	e069      	b.n	800d332 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f003 0304 	and.w	r3, r3, #4
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d051      	beq.n	800d310 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	69db      	ldr	r3, [r3, #28]
 800d272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d27a:	d149      	bne.n	800d310 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d284:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28e:	e853 3f00 	ldrex	r3, [r3]
 800d292:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d296:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d29a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2a4:	637b      	str	r3, [r7, #52]	; 0x34
 800d2a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d2aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2ac:	e841 2300 	strex	r3, r2, [r1]
 800d2b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d1e6      	bne.n	800d286 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	3308      	adds	r3, #8
 800d2be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	e853 3f00 	ldrex	r3, [r3]
 800d2c6:	613b      	str	r3, [r7, #16]
   return(result);
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	f023 0301 	bic.w	r3, r3, #1
 800d2ce:	66bb      	str	r3, [r7, #104]	; 0x68
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	3308      	adds	r3, #8
 800d2d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d2d8:	623a      	str	r2, [r7, #32]
 800d2da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2dc:	69f9      	ldr	r1, [r7, #28]
 800d2de:	6a3a      	ldr	r2, [r7, #32]
 800d2e0:	e841 2300 	strex	r3, r2, [r1]
 800d2e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d2e6:	69bb      	ldr	r3, [r7, #24]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d1e5      	bne.n	800d2b8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	2220      	movs	r2, #32
 800d2f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2220      	movs	r2, #32
 800d2f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2220      	movs	r2, #32
 800d300:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2200      	movs	r2, #0
 800d308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d30c:	2303      	movs	r3, #3
 800d30e:	e010      	b.n	800d332 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	69da      	ldr	r2, [r3, #28]
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	4013      	ands	r3, r2
 800d31a:	68ba      	ldr	r2, [r7, #8]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	bf0c      	ite	eq
 800d320:	2301      	moveq	r3, #1
 800d322:	2300      	movne	r3, #0
 800d324:	b2db      	uxtb	r3, r3
 800d326:	461a      	mov	r2, r3
 800d328:	79fb      	ldrb	r3, [r7, #7]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	f43f af46 	beq.w	800d1bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d330:	2300      	movs	r3, #0
}
 800d332:	4618      	mov	r0, r3
 800d334:	3770      	adds	r7, #112	; 0x70
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
	...

0800d33c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b096      	sub	sp, #88	; 0x58
 800d340:	af00      	add	r7, sp, #0
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	4613      	mov	r3, r2
 800d348:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	68ba      	ldr	r2, [r7, #8]
 800d34e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	88fa      	ldrh	r2, [r7, #6]
 800d354:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2200      	movs	r2, #0
 800d35c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2222      	movs	r2, #34	; 0x22
 800d364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d02c      	beq.n	800d3ca <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d374:	4a42      	ldr	r2, [pc, #264]	; (800d480 <UART_Start_Receive_DMA+0x144>)
 800d376:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d37c:	4a41      	ldr	r2, [pc, #260]	; (800d484 <UART_Start_Receive_DMA+0x148>)
 800d37e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d384:	4a40      	ldr	r2, [pc, #256]	; (800d488 <UART_Start_Receive_DMA+0x14c>)
 800d386:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d38c:	2200      	movs	r2, #0
 800d38e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	3324      	adds	r3, #36	; 0x24
 800d39a:	4619      	mov	r1, r3
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	88fb      	ldrh	r3, [r7, #6]
 800d3a4:	f7f8 f84c 	bl	8005440 <HAL_DMA_Start_IT>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d00d      	beq.n	800d3ca <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2210      	movs	r2, #16
 800d3b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2220      	movs	r2, #32
 800d3c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	e055      	b.n	800d476 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	691b      	ldr	r3, [r3, #16]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d018      	beq.n	800d40c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3e2:	e853 3f00 	ldrex	r3, [r3]
 800d3e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3ee:	657b      	str	r3, [r7, #84]	; 0x54
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3fa:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d3fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d400:	e841 2300 	strex	r3, r2, [r1]
 800d404:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d1e6      	bne.n	800d3da <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	3308      	adds	r3, #8
 800d412:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d416:	e853 3f00 	ldrex	r3, [r3]
 800d41a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41e:	f043 0301 	orr.w	r3, r3, #1
 800d422:	653b      	str	r3, [r7, #80]	; 0x50
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	3308      	adds	r3, #8
 800d42a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d42c:	637a      	str	r2, [r7, #52]	; 0x34
 800d42e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d430:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d434:	e841 2300 	strex	r3, r2, [r1]
 800d438:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d1e5      	bne.n	800d40c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	3308      	adds	r3, #8
 800d446:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	e853 3f00 	ldrex	r3, [r3]
 800d44e:	613b      	str	r3, [r7, #16]
   return(result);
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d456:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	3308      	adds	r3, #8
 800d45e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d460:	623a      	str	r2, [r7, #32]
 800d462:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d464:	69f9      	ldr	r1, [r7, #28]
 800d466:	6a3a      	ldr	r2, [r7, #32]
 800d468:	e841 2300 	strex	r3, r2, [r1]
 800d46c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d46e:	69bb      	ldr	r3, [r7, #24]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d1e5      	bne.n	800d440 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d474:	2300      	movs	r3, #0
}
 800d476:	4618      	mov	r0, r3
 800d478:	3758      	adds	r7, #88	; 0x58
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	bf00      	nop
 800d480:	0800d68f 	.word	0x0800d68f
 800d484:	0800d7b1 	.word	0x0800d7b1
 800d488:	0800d7e9 	.word	0x0800d7e9

0800d48c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d48c:	b480      	push	{r7}
 800d48e:	b08f      	sub	sp, #60	; 0x3c
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d49a:	6a3b      	ldr	r3, [r7, #32]
 800d49c:	e853 3f00 	ldrex	r3, [r3]
 800d4a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d4a8:	637b      	str	r3, [r7, #52]	; 0x34
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4b4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4ba:	e841 2300 	strex	r3, r2, [r1]
 800d4be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d1e6      	bne.n	800d494 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	3308      	adds	r3, #8
 800d4cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	e853 3f00 	ldrex	r3, [r3]
 800d4d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d4dc:	633b      	str	r3, [r7, #48]	; 0x30
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	3308      	adds	r3, #8
 800d4e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4e6:	61ba      	str	r2, [r7, #24]
 800d4e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ea:	6979      	ldr	r1, [r7, #20]
 800d4ec:	69ba      	ldr	r2, [r7, #24]
 800d4ee:	e841 2300 	strex	r3, r2, [r1]
 800d4f2:	613b      	str	r3, [r7, #16]
   return(result);
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d1e5      	bne.n	800d4c6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2220      	movs	r2, #32
 800d4fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d502:	bf00      	nop
 800d504:	373c      	adds	r7, #60	; 0x3c
 800d506:	46bd      	mov	sp, r7
 800d508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50c:	4770      	bx	lr
	...

0800d510 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d510:	b480      	push	{r7}
 800d512:	b095      	sub	sp, #84	; 0x54
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d520:	e853 3f00 	ldrex	r3, [r3]
 800d524:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d528:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d52c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	461a      	mov	r2, r3
 800d534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d536:	643b      	str	r3, [r7, #64]	; 0x40
 800d538:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d53a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d53c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d53e:	e841 2300 	strex	r3, r2, [r1]
 800d542:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d546:	2b00      	cmp	r3, #0
 800d548:	d1e6      	bne.n	800d518 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	3308      	adds	r3, #8
 800d550:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d552:	6a3b      	ldr	r3, [r7, #32]
 800d554:	e853 3f00 	ldrex	r3, [r3]
 800d558:	61fb      	str	r3, [r7, #28]
   return(result);
 800d55a:	69fa      	ldr	r2, [r7, #28]
 800d55c:	4b1e      	ldr	r3, [pc, #120]	; (800d5d8 <UART_EndRxTransfer+0xc8>)
 800d55e:	4013      	ands	r3, r2
 800d560:	64bb      	str	r3, [r7, #72]	; 0x48
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	3308      	adds	r3, #8
 800d568:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d56a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d56c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d56e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d572:	e841 2300 	strex	r3, r2, [r1]
 800d576:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d1e5      	bne.n	800d54a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d582:	2b01      	cmp	r3, #1
 800d584:	d118      	bne.n	800d5b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	e853 3f00 	ldrex	r3, [r3]
 800d592:	60bb      	str	r3, [r7, #8]
   return(result);
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	f023 0310 	bic.w	r3, r3, #16
 800d59a:	647b      	str	r3, [r7, #68]	; 0x44
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5a4:	61bb      	str	r3, [r7, #24]
 800d5a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a8:	6979      	ldr	r1, [r7, #20]
 800d5aa:	69ba      	ldr	r2, [r7, #24]
 800d5ac:	e841 2300 	strex	r3, r2, [r1]
 800d5b0:	613b      	str	r3, [r7, #16]
   return(result);
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d1e6      	bne.n	800d586 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2220      	movs	r2, #32
 800d5bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d5cc:	bf00      	nop
 800d5ce:	3754      	adds	r7, #84	; 0x54
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d6:	4770      	bx	lr
 800d5d8:	effffffe 	.word	0xeffffffe

0800d5dc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b090      	sub	sp, #64	; 0x40
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	69db      	ldr	r3, [r3, #28]
 800d5ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5f2:	d037      	beq.n	800d664 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d5f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d5fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	3308      	adds	r3, #8
 800d602:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d606:	e853 3f00 	ldrex	r3, [r3]
 800d60a:	623b      	str	r3, [r7, #32]
   return(result);
 800d60c:	6a3b      	ldr	r3, [r7, #32]
 800d60e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d612:	63bb      	str	r3, [r7, #56]	; 0x38
 800d614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	3308      	adds	r3, #8
 800d61a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d61c:	633a      	str	r2, [r7, #48]	; 0x30
 800d61e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d620:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d624:	e841 2300 	strex	r3, r2, [r1]
 800d628:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d1e5      	bne.n	800d5fc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	e853 3f00 	ldrex	r3, [r3]
 800d63c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d644:	637b      	str	r3, [r7, #52]	; 0x34
 800d646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	461a      	mov	r2, r3
 800d64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d64e:	61fb      	str	r3, [r7, #28]
 800d650:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d652:	69b9      	ldr	r1, [r7, #24]
 800d654:	69fa      	ldr	r2, [r7, #28]
 800d656:	e841 2300 	strex	r3, r2, [r1]
 800d65a:	617b      	str	r3, [r7, #20]
   return(result);
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d1e6      	bne.n	800d630 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d662:	e002      	b.n	800d66a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d664:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d666:	f7f5 fdd5 	bl	8003214 <HAL_UART_TxCpltCallback>
}
 800d66a:	bf00      	nop
 800d66c:	3740      	adds	r7, #64	; 0x40
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}

0800d672 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d672:	b580      	push	{r7, lr}
 800d674:	b084      	sub	sp, #16
 800d676:	af00      	add	r7, sp, #0
 800d678:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d67e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d680:	68f8      	ldr	r0, [r7, #12]
 800d682:	f7fe fe0f 	bl	800c2a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d686:	bf00      	nop
 800d688:	3710      	adds	r7, #16
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}

0800d68e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d68e:	b580      	push	{r7, lr}
 800d690:	b09c      	sub	sp, #112	; 0x70
 800d692:	af00      	add	r7, sp, #0
 800d694:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d69a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	69db      	ldr	r3, [r3, #28]
 800d6a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6a4:	d071      	beq.n	800d78a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d6a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d6ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6b6:	e853 3f00 	ldrex	r3, [r3]
 800d6ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d6bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d6c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d6c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	461a      	mov	r2, r3
 800d6ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d6cc:	65bb      	str	r3, [r7, #88]	; 0x58
 800d6ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d6d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d6d4:	e841 2300 	strex	r3, r2, [r1]
 800d6d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d6da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d1e6      	bne.n	800d6ae <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	3308      	adds	r3, #8
 800d6e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ea:	e853 3f00 	ldrex	r3, [r3]
 800d6ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d6f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6f2:	f023 0301 	bic.w	r3, r3, #1
 800d6f6:	667b      	str	r3, [r7, #100]	; 0x64
 800d6f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	3308      	adds	r3, #8
 800d6fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d700:	647a      	str	r2, [r7, #68]	; 0x44
 800d702:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d704:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d706:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d708:	e841 2300 	strex	r3, r2, [r1]
 800d70c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d70e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d710:	2b00      	cmp	r3, #0
 800d712:	d1e5      	bne.n	800d6e0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	3308      	adds	r3, #8
 800d71a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71e:	e853 3f00 	ldrex	r3, [r3]
 800d722:	623b      	str	r3, [r7, #32]
   return(result);
 800d724:	6a3b      	ldr	r3, [r7, #32]
 800d726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d72a:	663b      	str	r3, [r7, #96]	; 0x60
 800d72c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	3308      	adds	r3, #8
 800d732:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d734:	633a      	str	r2, [r7, #48]	; 0x30
 800d736:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d738:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d73a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d73c:	e841 2300 	strex	r3, r2, [r1]
 800d740:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d744:	2b00      	cmp	r3, #0
 800d746:	d1e5      	bne.n	800d714 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d74a:	2220      	movs	r2, #32
 800d74c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d754:	2b01      	cmp	r3, #1
 800d756:	d118      	bne.n	800d78a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	e853 3f00 	ldrex	r3, [r3]
 800d764:	60fb      	str	r3, [r7, #12]
   return(result);
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	f023 0310 	bic.w	r3, r3, #16
 800d76c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d76e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	461a      	mov	r2, r3
 800d774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d776:	61fb      	str	r3, [r7, #28]
 800d778:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d77a:	69b9      	ldr	r1, [r7, #24]
 800d77c:	69fa      	ldr	r2, [r7, #28]
 800d77e:	e841 2300 	strex	r3, r2, [r1]
 800d782:	617b      	str	r3, [r7, #20]
   return(result);
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d1e6      	bne.n	800d758 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d78a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d78c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d78e:	2b01      	cmp	r3, #1
 800d790:	d107      	bne.n	800d7a2 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d794:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d798:	4619      	mov	r1, r3
 800d79a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d79c:	f7fe fda0 	bl	800c2e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d7a0:	e002      	b.n	800d7a8 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800d7a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d7a4:	f7f5 fd48 	bl	8003238 <HAL_UART_RxCpltCallback>
}
 800d7a8:	bf00      	nop
 800d7aa:	3770      	adds	r7, #112	; 0x70
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7bc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7c2:	2b01      	cmp	r3, #1
 800d7c4:	d109      	bne.n	800d7da <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d7cc:	085b      	lsrs	r3, r3, #1
 800d7ce:	b29b      	uxth	r3, r3
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	68f8      	ldr	r0, [r7, #12]
 800d7d4:	f7fe fd84 	bl	800c2e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d7d8:	e002      	b.n	800d7e0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d7da:	68f8      	ldr	r0, [r7, #12]
 800d7dc:	f7fe fd6c 	bl	800c2b8 <HAL_UART_RxHalfCpltCallback>
}
 800d7e0:	bf00      	nop
 800d7e2:	3710      	adds	r7, #16
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b086      	sub	sp, #24
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7f4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7fc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d804:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	689b      	ldr	r3, [r3, #8]
 800d80c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d810:	2b80      	cmp	r3, #128	; 0x80
 800d812:	d109      	bne.n	800d828 <UART_DMAError+0x40>
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	2b21      	cmp	r3, #33	; 0x21
 800d818:	d106      	bne.n	800d828 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	2200      	movs	r2, #0
 800d81e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d822:	6978      	ldr	r0, [r7, #20]
 800d824:	f7ff fe32 	bl	800d48c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	689b      	ldr	r3, [r3, #8]
 800d82e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d832:	2b40      	cmp	r3, #64	; 0x40
 800d834:	d109      	bne.n	800d84a <UART_DMAError+0x62>
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	2b22      	cmp	r3, #34	; 0x22
 800d83a:	d106      	bne.n	800d84a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	2200      	movs	r2, #0
 800d840:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d844:	6978      	ldr	r0, [r7, #20]
 800d846:	f7ff fe63 	bl	800d510 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d850:	f043 0210 	orr.w	r2, r3, #16
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d85a:	6978      	ldr	r0, [r7, #20]
 800d85c:	f7fe fd36 	bl	800c2cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d860:	bf00      	nop
 800d862:	3718      	adds	r7, #24
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}

0800d868 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b084      	sub	sp, #16
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d874:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	2200      	movs	r2, #0
 800d87a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	2200      	movs	r2, #0
 800d882:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d886:	68f8      	ldr	r0, [r7, #12]
 800d888:	f7fe fd20 	bl	800c2cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d88c:	bf00      	nop
 800d88e:	3710      	adds	r7, #16
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b088      	sub	sp, #32
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	e853 3f00 	ldrex	r3, [r3]
 800d8a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8b0:	61fb      	str	r3, [r7, #28]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	69fb      	ldr	r3, [r7, #28]
 800d8ba:	61bb      	str	r3, [r7, #24]
 800d8bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8be:	6979      	ldr	r1, [r7, #20]
 800d8c0:	69ba      	ldr	r2, [r7, #24]
 800d8c2:	e841 2300 	strex	r3, r2, [r1]
 800d8c6:	613b      	str	r3, [r7, #16]
   return(result);
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d1e6      	bne.n	800d89c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2220      	movs	r2, #32
 800d8d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2200      	movs	r2, #0
 800d8da:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f7f5 fc99 	bl	8003214 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d8e2:	bf00      	nop
 800d8e4:	3720      	adds	r7, #32
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}

0800d8ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d8ea:	b480      	push	{r7}
 800d8ec:	b083      	sub	sp, #12
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d8f2:	bf00      	nop
 800d8f4:	370c      	adds	r7, #12
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr

0800d8fe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d8fe:	b480      	push	{r7}
 800d900:	b083      	sub	sp, #12
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d906:	bf00      	nop
 800d908:	370c      	adds	r7, #12
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr

0800d912 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d912:	b480      	push	{r7}
 800d914:	b083      	sub	sp, #12
 800d916:	af00      	add	r7, sp, #0
 800d918:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d91a:	bf00      	nop
 800d91c:	370c      	adds	r7, #12
 800d91e:	46bd      	mov	sp, r7
 800d920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d924:	4770      	bx	lr

0800d926 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d926:	b480      	push	{r7}
 800d928:	b085      	sub	sp, #20
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d934:	2b01      	cmp	r3, #1
 800d936:	d101      	bne.n	800d93c <HAL_UARTEx_DisableFifoMode+0x16>
 800d938:	2302      	movs	r3, #2
 800d93a:	e027      	b.n	800d98c <HAL_UARTEx_DisableFifoMode+0x66>
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2201      	movs	r2, #1
 800d940:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2224      	movs	r2, #36	; 0x24
 800d948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	681a      	ldr	r2, [r3, #0]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f022 0201 	bic.w	r2, r2, #1
 800d962:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d96a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2200      	movs	r2, #0
 800d970:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	68fa      	ldr	r2, [r7, #12]
 800d978:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2220      	movs	r2, #32
 800d97e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2200      	movs	r2, #0
 800d986:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d98a:	2300      	movs	r3, #0
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3714      	adds	r7, #20
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr

0800d998 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b084      	sub	sp, #16
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	d101      	bne.n	800d9b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d9ac:	2302      	movs	r3, #2
 800d9ae:	e02d      	b.n	800da0c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2224      	movs	r2, #36	; 0x24
 800d9bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f022 0201 	bic.w	r2, r2, #1
 800d9d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	689b      	ldr	r3, [r3, #8]
 800d9de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	683a      	ldr	r2, [r7, #0]
 800d9e8:	430a      	orrs	r2, r1
 800d9ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f000 f84f 	bl	800da90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	68fa      	ldr	r2, [r7, #12]
 800d9f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2220      	movs	r2, #32
 800d9fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800da0a:	2300      	movs	r3, #0
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3710      	adds	r7, #16
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b084      	sub	sp, #16
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800da24:	2b01      	cmp	r3, #1
 800da26:	d101      	bne.n	800da2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800da28:	2302      	movs	r3, #2
 800da2a:	e02d      	b.n	800da88 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2201      	movs	r2, #1
 800da30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2224      	movs	r2, #36	; 0x24
 800da38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	681a      	ldr	r2, [r3, #0]
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f022 0201 	bic.w	r2, r2, #1
 800da52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	689b      	ldr	r3, [r3, #8]
 800da5a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	683a      	ldr	r2, [r7, #0]
 800da64:	430a      	orrs	r2, r1
 800da66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f000 f811 	bl	800da90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	68fa      	ldr	r2, [r7, #12]
 800da74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2220      	movs	r2, #32
 800da7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2200      	movs	r2, #0
 800da82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800da86:	2300      	movs	r3, #0
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3710      	adds	r7, #16
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800da90:	b480      	push	{r7}
 800da92:	b085      	sub	sp, #20
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d108      	bne.n	800dab2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2201      	movs	r2, #1
 800daa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2201      	movs	r2, #1
 800daac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dab0:	e031      	b.n	800db16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dab2:	2310      	movs	r3, #16
 800dab4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dab6:	2310      	movs	r3, #16
 800dab8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	689b      	ldr	r3, [r3, #8]
 800dac0:	0e5b      	lsrs	r3, r3, #25
 800dac2:	b2db      	uxtb	r3, r3
 800dac4:	f003 0307 	and.w	r3, r3, #7
 800dac8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	689b      	ldr	r3, [r3, #8]
 800dad0:	0f5b      	lsrs	r3, r3, #29
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	f003 0307 	and.w	r3, r3, #7
 800dad8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dada:	7bbb      	ldrb	r3, [r7, #14]
 800dadc:	7b3a      	ldrb	r2, [r7, #12]
 800dade:	4911      	ldr	r1, [pc, #68]	; (800db24 <UARTEx_SetNbDataToProcess+0x94>)
 800dae0:	5c8a      	ldrb	r2, [r1, r2]
 800dae2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dae6:	7b3a      	ldrb	r2, [r7, #12]
 800dae8:	490f      	ldr	r1, [pc, #60]	; (800db28 <UARTEx_SetNbDataToProcess+0x98>)
 800daea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800daec:	fb93 f3f2 	sdiv	r3, r3, r2
 800daf0:	b29a      	uxth	r2, r3
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800daf8:	7bfb      	ldrb	r3, [r7, #15]
 800dafa:	7b7a      	ldrb	r2, [r7, #13]
 800dafc:	4909      	ldr	r1, [pc, #36]	; (800db24 <UARTEx_SetNbDataToProcess+0x94>)
 800dafe:	5c8a      	ldrb	r2, [r1, r2]
 800db00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800db04:	7b7a      	ldrb	r2, [r7, #13]
 800db06:	4908      	ldr	r1, [pc, #32]	; (800db28 <UARTEx_SetNbDataToProcess+0x98>)
 800db08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800db0a:	fb93 f3f2 	sdiv	r3, r3, r2
 800db0e:	b29a      	uxth	r2, r3
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800db16:	bf00      	nop
 800db18:	3714      	adds	r7, #20
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr
 800db22:	bf00      	nop
 800db24:	0800e1f4 	.word	0x0800e1f4
 800db28:	0800e1fc 	.word	0x0800e1fc

0800db2c <__cxa_pure_virtual>:
 800db2c:	b508      	push	{r3, lr}
 800db2e:	f000 f80d 	bl	800db4c <_ZSt9terminatev>

0800db32 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800db32:	b508      	push	{r3, lr}
 800db34:	4780      	blx	r0
 800db36:	f000 f80e 	bl	800db56 <abort>
	...

0800db3c <_ZSt13get_terminatev>:
 800db3c:	4b02      	ldr	r3, [pc, #8]	; (800db48 <_ZSt13get_terminatev+0xc>)
 800db3e:	6818      	ldr	r0, [r3, #0]
 800db40:	f3bf 8f5b 	dmb	ish
 800db44:	4770      	bx	lr
 800db46:	bf00      	nop
 800db48:	24000014 	.word	0x24000014

0800db4c <_ZSt9terminatev>:
 800db4c:	b508      	push	{r3, lr}
 800db4e:	f7ff fff5 	bl	800db3c <_ZSt13get_terminatev>
 800db52:	f7ff ffee 	bl	800db32 <_ZN10__cxxabiv111__terminateEPFvvE>

0800db56 <abort>:
 800db56:	b508      	push	{r3, lr}
 800db58:	2006      	movs	r0, #6
 800db5a:	f000 f873 	bl	800dc44 <raise>
 800db5e:	2001      	movs	r0, #1
 800db60:	f7f6 fd4a 	bl	80045f8 <_exit>

0800db64 <__errno>:
 800db64:	4b01      	ldr	r3, [pc, #4]	; (800db6c <__errno+0x8>)
 800db66:	6818      	ldr	r0, [r3, #0]
 800db68:	4770      	bx	lr
 800db6a:	bf00      	nop
 800db6c:	24000018 	.word	0x24000018

0800db70 <__libc_init_array>:
 800db70:	b570      	push	{r4, r5, r6, lr}
 800db72:	4d0d      	ldr	r5, [pc, #52]	; (800dba8 <__libc_init_array+0x38>)
 800db74:	4c0d      	ldr	r4, [pc, #52]	; (800dbac <__libc_init_array+0x3c>)
 800db76:	1b64      	subs	r4, r4, r5
 800db78:	10a4      	asrs	r4, r4, #2
 800db7a:	2600      	movs	r6, #0
 800db7c:	42a6      	cmp	r6, r4
 800db7e:	d109      	bne.n	800db94 <__libc_init_array+0x24>
 800db80:	4d0b      	ldr	r5, [pc, #44]	; (800dbb0 <__libc_init_array+0x40>)
 800db82:	4c0c      	ldr	r4, [pc, #48]	; (800dbb4 <__libc_init_array+0x44>)
 800db84:	f000 f9b0 	bl	800dee8 <_init>
 800db88:	1b64      	subs	r4, r4, r5
 800db8a:	10a4      	asrs	r4, r4, #2
 800db8c:	2600      	movs	r6, #0
 800db8e:	42a6      	cmp	r6, r4
 800db90:	d105      	bne.n	800db9e <__libc_init_array+0x2e>
 800db92:	bd70      	pop	{r4, r5, r6, pc}
 800db94:	f855 3b04 	ldr.w	r3, [r5], #4
 800db98:	4798      	blx	r3
 800db9a:	3601      	adds	r6, #1
 800db9c:	e7ee      	b.n	800db7c <__libc_init_array+0xc>
 800db9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800dba2:	4798      	blx	r3
 800dba4:	3601      	adds	r6, #1
 800dba6:	e7f2      	b.n	800db8e <__libc_init_array+0x1e>
 800dba8:	0800e20c 	.word	0x0800e20c
 800dbac:	0800e20c 	.word	0x0800e20c
 800dbb0:	0800e20c 	.word	0x0800e20c
 800dbb4:	0800e220 	.word	0x0800e220

0800dbb8 <memcpy>:
 800dbb8:	440a      	add	r2, r1
 800dbba:	4291      	cmp	r1, r2
 800dbbc:	f100 33ff 	add.w	r3, r0, #4294967295
 800dbc0:	d100      	bne.n	800dbc4 <memcpy+0xc>
 800dbc2:	4770      	bx	lr
 800dbc4:	b510      	push	{r4, lr}
 800dbc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbce:	4291      	cmp	r1, r2
 800dbd0:	d1f9      	bne.n	800dbc6 <memcpy+0xe>
 800dbd2:	bd10      	pop	{r4, pc}

0800dbd4 <memset>:
 800dbd4:	4402      	add	r2, r0
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	4293      	cmp	r3, r2
 800dbda:	d100      	bne.n	800dbde <memset+0xa>
 800dbdc:	4770      	bx	lr
 800dbde:	f803 1b01 	strb.w	r1, [r3], #1
 800dbe2:	e7f9      	b.n	800dbd8 <memset+0x4>

0800dbe4 <realloc>:
 800dbe4:	4b02      	ldr	r3, [pc, #8]	; (800dbf0 <realloc+0xc>)
 800dbe6:	460a      	mov	r2, r1
 800dbe8:	4601      	mov	r1, r0
 800dbea:	6818      	ldr	r0, [r3, #0]
 800dbec:	f000 b8da 	b.w	800dda4 <_realloc_r>
 800dbf0:	24000018 	.word	0x24000018

0800dbf4 <_raise_r>:
 800dbf4:	291f      	cmp	r1, #31
 800dbf6:	b538      	push	{r3, r4, r5, lr}
 800dbf8:	4604      	mov	r4, r0
 800dbfa:	460d      	mov	r5, r1
 800dbfc:	d904      	bls.n	800dc08 <_raise_r+0x14>
 800dbfe:	2316      	movs	r3, #22
 800dc00:	6003      	str	r3, [r0, #0]
 800dc02:	f04f 30ff 	mov.w	r0, #4294967295
 800dc06:	bd38      	pop	{r3, r4, r5, pc}
 800dc08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc0a:	b112      	cbz	r2, 800dc12 <_raise_r+0x1e>
 800dc0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc10:	b94b      	cbnz	r3, 800dc26 <_raise_r+0x32>
 800dc12:	4620      	mov	r0, r4
 800dc14:	f000 f830 	bl	800dc78 <_getpid_r>
 800dc18:	462a      	mov	r2, r5
 800dc1a:	4601      	mov	r1, r0
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc22:	f000 b817 	b.w	800dc54 <_kill_r>
 800dc26:	2b01      	cmp	r3, #1
 800dc28:	d00a      	beq.n	800dc40 <_raise_r+0x4c>
 800dc2a:	1c59      	adds	r1, r3, #1
 800dc2c:	d103      	bne.n	800dc36 <_raise_r+0x42>
 800dc2e:	2316      	movs	r3, #22
 800dc30:	6003      	str	r3, [r0, #0]
 800dc32:	2001      	movs	r0, #1
 800dc34:	e7e7      	b.n	800dc06 <_raise_r+0x12>
 800dc36:	2400      	movs	r4, #0
 800dc38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc3c:	4628      	mov	r0, r5
 800dc3e:	4798      	blx	r3
 800dc40:	2000      	movs	r0, #0
 800dc42:	e7e0      	b.n	800dc06 <_raise_r+0x12>

0800dc44 <raise>:
 800dc44:	4b02      	ldr	r3, [pc, #8]	; (800dc50 <raise+0xc>)
 800dc46:	4601      	mov	r1, r0
 800dc48:	6818      	ldr	r0, [r3, #0]
 800dc4a:	f7ff bfd3 	b.w	800dbf4 <_raise_r>
 800dc4e:	bf00      	nop
 800dc50:	24000018 	.word	0x24000018

0800dc54 <_kill_r>:
 800dc54:	b538      	push	{r3, r4, r5, lr}
 800dc56:	4d07      	ldr	r5, [pc, #28]	; (800dc74 <_kill_r+0x20>)
 800dc58:	2300      	movs	r3, #0
 800dc5a:	4604      	mov	r4, r0
 800dc5c:	4608      	mov	r0, r1
 800dc5e:	4611      	mov	r1, r2
 800dc60:	602b      	str	r3, [r5, #0]
 800dc62:	f7f6 fcb9 	bl	80045d8 <_kill>
 800dc66:	1c43      	adds	r3, r0, #1
 800dc68:	d102      	bne.n	800dc70 <_kill_r+0x1c>
 800dc6a:	682b      	ldr	r3, [r5, #0]
 800dc6c:	b103      	cbz	r3, 800dc70 <_kill_r+0x1c>
 800dc6e:	6023      	str	r3, [r4, #0]
 800dc70:	bd38      	pop	{r3, r4, r5, pc}
 800dc72:	bf00      	nop
 800dc74:	24001100 	.word	0x24001100

0800dc78 <_getpid_r>:
 800dc78:	f7f6 bca6 	b.w	80045c8 <_getpid>

0800dc7c <sbrk_aligned>:
 800dc7c:	b570      	push	{r4, r5, r6, lr}
 800dc7e:	4e0e      	ldr	r6, [pc, #56]	; (800dcb8 <sbrk_aligned+0x3c>)
 800dc80:	460c      	mov	r4, r1
 800dc82:	6831      	ldr	r1, [r6, #0]
 800dc84:	4605      	mov	r5, r0
 800dc86:	b911      	cbnz	r1, 800dc8e <sbrk_aligned+0x12>
 800dc88:	f000 f8bc 	bl	800de04 <_sbrk_r>
 800dc8c:	6030      	str	r0, [r6, #0]
 800dc8e:	4621      	mov	r1, r4
 800dc90:	4628      	mov	r0, r5
 800dc92:	f000 f8b7 	bl	800de04 <_sbrk_r>
 800dc96:	1c43      	adds	r3, r0, #1
 800dc98:	d00a      	beq.n	800dcb0 <sbrk_aligned+0x34>
 800dc9a:	1cc4      	adds	r4, r0, #3
 800dc9c:	f024 0403 	bic.w	r4, r4, #3
 800dca0:	42a0      	cmp	r0, r4
 800dca2:	d007      	beq.n	800dcb4 <sbrk_aligned+0x38>
 800dca4:	1a21      	subs	r1, r4, r0
 800dca6:	4628      	mov	r0, r5
 800dca8:	f000 f8ac 	bl	800de04 <_sbrk_r>
 800dcac:	3001      	adds	r0, #1
 800dcae:	d101      	bne.n	800dcb4 <sbrk_aligned+0x38>
 800dcb0:	f04f 34ff 	mov.w	r4, #4294967295
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	bd70      	pop	{r4, r5, r6, pc}
 800dcb8:	240010fc 	.word	0x240010fc

0800dcbc <_malloc_r>:
 800dcbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcc0:	1ccd      	adds	r5, r1, #3
 800dcc2:	f025 0503 	bic.w	r5, r5, #3
 800dcc6:	3508      	adds	r5, #8
 800dcc8:	2d0c      	cmp	r5, #12
 800dcca:	bf38      	it	cc
 800dccc:	250c      	movcc	r5, #12
 800dcce:	2d00      	cmp	r5, #0
 800dcd0:	4607      	mov	r7, r0
 800dcd2:	db01      	blt.n	800dcd8 <_malloc_r+0x1c>
 800dcd4:	42a9      	cmp	r1, r5
 800dcd6:	d905      	bls.n	800dce4 <_malloc_r+0x28>
 800dcd8:	230c      	movs	r3, #12
 800dcda:	603b      	str	r3, [r7, #0]
 800dcdc:	2600      	movs	r6, #0
 800dcde:	4630      	mov	r0, r6
 800dce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dce4:	4e2e      	ldr	r6, [pc, #184]	; (800dda0 <_malloc_r+0xe4>)
 800dce6:	f000 f89d 	bl	800de24 <__malloc_lock>
 800dcea:	6833      	ldr	r3, [r6, #0]
 800dcec:	461c      	mov	r4, r3
 800dcee:	bb34      	cbnz	r4, 800dd3e <_malloc_r+0x82>
 800dcf0:	4629      	mov	r1, r5
 800dcf2:	4638      	mov	r0, r7
 800dcf4:	f7ff ffc2 	bl	800dc7c <sbrk_aligned>
 800dcf8:	1c43      	adds	r3, r0, #1
 800dcfa:	4604      	mov	r4, r0
 800dcfc:	d14d      	bne.n	800dd9a <_malloc_r+0xde>
 800dcfe:	6834      	ldr	r4, [r6, #0]
 800dd00:	4626      	mov	r6, r4
 800dd02:	2e00      	cmp	r6, #0
 800dd04:	d140      	bne.n	800dd88 <_malloc_r+0xcc>
 800dd06:	6823      	ldr	r3, [r4, #0]
 800dd08:	4631      	mov	r1, r6
 800dd0a:	4638      	mov	r0, r7
 800dd0c:	eb04 0803 	add.w	r8, r4, r3
 800dd10:	f000 f878 	bl	800de04 <_sbrk_r>
 800dd14:	4580      	cmp	r8, r0
 800dd16:	d13a      	bne.n	800dd8e <_malloc_r+0xd2>
 800dd18:	6821      	ldr	r1, [r4, #0]
 800dd1a:	3503      	adds	r5, #3
 800dd1c:	1a6d      	subs	r5, r5, r1
 800dd1e:	f025 0503 	bic.w	r5, r5, #3
 800dd22:	3508      	adds	r5, #8
 800dd24:	2d0c      	cmp	r5, #12
 800dd26:	bf38      	it	cc
 800dd28:	250c      	movcc	r5, #12
 800dd2a:	4629      	mov	r1, r5
 800dd2c:	4638      	mov	r0, r7
 800dd2e:	f7ff ffa5 	bl	800dc7c <sbrk_aligned>
 800dd32:	3001      	adds	r0, #1
 800dd34:	d02b      	beq.n	800dd8e <_malloc_r+0xd2>
 800dd36:	6823      	ldr	r3, [r4, #0]
 800dd38:	442b      	add	r3, r5
 800dd3a:	6023      	str	r3, [r4, #0]
 800dd3c:	e00e      	b.n	800dd5c <_malloc_r+0xa0>
 800dd3e:	6822      	ldr	r2, [r4, #0]
 800dd40:	1b52      	subs	r2, r2, r5
 800dd42:	d41e      	bmi.n	800dd82 <_malloc_r+0xc6>
 800dd44:	2a0b      	cmp	r2, #11
 800dd46:	d916      	bls.n	800dd76 <_malloc_r+0xba>
 800dd48:	1961      	adds	r1, r4, r5
 800dd4a:	42a3      	cmp	r3, r4
 800dd4c:	6025      	str	r5, [r4, #0]
 800dd4e:	bf18      	it	ne
 800dd50:	6059      	strne	r1, [r3, #4]
 800dd52:	6863      	ldr	r3, [r4, #4]
 800dd54:	bf08      	it	eq
 800dd56:	6031      	streq	r1, [r6, #0]
 800dd58:	5162      	str	r2, [r4, r5]
 800dd5a:	604b      	str	r3, [r1, #4]
 800dd5c:	4638      	mov	r0, r7
 800dd5e:	f104 060b 	add.w	r6, r4, #11
 800dd62:	f000 f865 	bl	800de30 <__malloc_unlock>
 800dd66:	f026 0607 	bic.w	r6, r6, #7
 800dd6a:	1d23      	adds	r3, r4, #4
 800dd6c:	1af2      	subs	r2, r6, r3
 800dd6e:	d0b6      	beq.n	800dcde <_malloc_r+0x22>
 800dd70:	1b9b      	subs	r3, r3, r6
 800dd72:	50a3      	str	r3, [r4, r2]
 800dd74:	e7b3      	b.n	800dcde <_malloc_r+0x22>
 800dd76:	6862      	ldr	r2, [r4, #4]
 800dd78:	42a3      	cmp	r3, r4
 800dd7a:	bf0c      	ite	eq
 800dd7c:	6032      	streq	r2, [r6, #0]
 800dd7e:	605a      	strne	r2, [r3, #4]
 800dd80:	e7ec      	b.n	800dd5c <_malloc_r+0xa0>
 800dd82:	4623      	mov	r3, r4
 800dd84:	6864      	ldr	r4, [r4, #4]
 800dd86:	e7b2      	b.n	800dcee <_malloc_r+0x32>
 800dd88:	4634      	mov	r4, r6
 800dd8a:	6876      	ldr	r6, [r6, #4]
 800dd8c:	e7b9      	b.n	800dd02 <_malloc_r+0x46>
 800dd8e:	230c      	movs	r3, #12
 800dd90:	603b      	str	r3, [r7, #0]
 800dd92:	4638      	mov	r0, r7
 800dd94:	f000 f84c 	bl	800de30 <__malloc_unlock>
 800dd98:	e7a1      	b.n	800dcde <_malloc_r+0x22>
 800dd9a:	6025      	str	r5, [r4, #0]
 800dd9c:	e7de      	b.n	800dd5c <_malloc_r+0xa0>
 800dd9e:	bf00      	nop
 800dda0:	240010f8 	.word	0x240010f8

0800dda4 <_realloc_r>:
 800dda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dda8:	4680      	mov	r8, r0
 800ddaa:	4614      	mov	r4, r2
 800ddac:	460e      	mov	r6, r1
 800ddae:	b921      	cbnz	r1, 800ddba <_realloc_r+0x16>
 800ddb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddb4:	4611      	mov	r1, r2
 800ddb6:	f7ff bf81 	b.w	800dcbc <_malloc_r>
 800ddba:	b92a      	cbnz	r2, 800ddc8 <_realloc_r+0x24>
 800ddbc:	f000 f83e 	bl	800de3c <_free_r>
 800ddc0:	4625      	mov	r5, r4
 800ddc2:	4628      	mov	r0, r5
 800ddc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddc8:	f000 f884 	bl	800ded4 <_malloc_usable_size_r>
 800ddcc:	4284      	cmp	r4, r0
 800ddce:	4607      	mov	r7, r0
 800ddd0:	d802      	bhi.n	800ddd8 <_realloc_r+0x34>
 800ddd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ddd6:	d812      	bhi.n	800ddfe <_realloc_r+0x5a>
 800ddd8:	4621      	mov	r1, r4
 800ddda:	4640      	mov	r0, r8
 800dddc:	f7ff ff6e 	bl	800dcbc <_malloc_r>
 800dde0:	4605      	mov	r5, r0
 800dde2:	2800      	cmp	r0, #0
 800dde4:	d0ed      	beq.n	800ddc2 <_realloc_r+0x1e>
 800dde6:	42bc      	cmp	r4, r7
 800dde8:	4622      	mov	r2, r4
 800ddea:	4631      	mov	r1, r6
 800ddec:	bf28      	it	cs
 800ddee:	463a      	movcs	r2, r7
 800ddf0:	f7ff fee2 	bl	800dbb8 <memcpy>
 800ddf4:	4631      	mov	r1, r6
 800ddf6:	4640      	mov	r0, r8
 800ddf8:	f000 f820 	bl	800de3c <_free_r>
 800ddfc:	e7e1      	b.n	800ddc2 <_realloc_r+0x1e>
 800ddfe:	4635      	mov	r5, r6
 800de00:	e7df      	b.n	800ddc2 <_realloc_r+0x1e>
	...

0800de04 <_sbrk_r>:
 800de04:	b538      	push	{r3, r4, r5, lr}
 800de06:	4d06      	ldr	r5, [pc, #24]	; (800de20 <_sbrk_r+0x1c>)
 800de08:	2300      	movs	r3, #0
 800de0a:	4604      	mov	r4, r0
 800de0c:	4608      	mov	r0, r1
 800de0e:	602b      	str	r3, [r5, #0]
 800de10:	f7f6 fbfc 	bl	800460c <_sbrk>
 800de14:	1c43      	adds	r3, r0, #1
 800de16:	d102      	bne.n	800de1e <_sbrk_r+0x1a>
 800de18:	682b      	ldr	r3, [r5, #0]
 800de1a:	b103      	cbz	r3, 800de1e <_sbrk_r+0x1a>
 800de1c:	6023      	str	r3, [r4, #0]
 800de1e:	bd38      	pop	{r3, r4, r5, pc}
 800de20:	24001100 	.word	0x24001100

0800de24 <__malloc_lock>:
 800de24:	4801      	ldr	r0, [pc, #4]	; (800de2c <__malloc_lock+0x8>)
 800de26:	f000 b85d 	b.w	800dee4 <__retarget_lock_acquire_recursive>
 800de2a:	bf00      	nop
 800de2c:	24001104 	.word	0x24001104

0800de30 <__malloc_unlock>:
 800de30:	4801      	ldr	r0, [pc, #4]	; (800de38 <__malloc_unlock+0x8>)
 800de32:	f000 b858 	b.w	800dee6 <__retarget_lock_release_recursive>
 800de36:	bf00      	nop
 800de38:	24001104 	.word	0x24001104

0800de3c <_free_r>:
 800de3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de3e:	2900      	cmp	r1, #0
 800de40:	d044      	beq.n	800decc <_free_r+0x90>
 800de42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de46:	9001      	str	r0, [sp, #4]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	f1a1 0404 	sub.w	r4, r1, #4
 800de4e:	bfb8      	it	lt
 800de50:	18e4      	addlt	r4, r4, r3
 800de52:	f7ff ffe7 	bl	800de24 <__malloc_lock>
 800de56:	4a1e      	ldr	r2, [pc, #120]	; (800ded0 <_free_r+0x94>)
 800de58:	9801      	ldr	r0, [sp, #4]
 800de5a:	6813      	ldr	r3, [r2, #0]
 800de5c:	b933      	cbnz	r3, 800de6c <_free_r+0x30>
 800de5e:	6063      	str	r3, [r4, #4]
 800de60:	6014      	str	r4, [r2, #0]
 800de62:	b003      	add	sp, #12
 800de64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de68:	f7ff bfe2 	b.w	800de30 <__malloc_unlock>
 800de6c:	42a3      	cmp	r3, r4
 800de6e:	d908      	bls.n	800de82 <_free_r+0x46>
 800de70:	6825      	ldr	r5, [r4, #0]
 800de72:	1961      	adds	r1, r4, r5
 800de74:	428b      	cmp	r3, r1
 800de76:	bf01      	itttt	eq
 800de78:	6819      	ldreq	r1, [r3, #0]
 800de7a:	685b      	ldreq	r3, [r3, #4]
 800de7c:	1949      	addeq	r1, r1, r5
 800de7e:	6021      	streq	r1, [r4, #0]
 800de80:	e7ed      	b.n	800de5e <_free_r+0x22>
 800de82:	461a      	mov	r2, r3
 800de84:	685b      	ldr	r3, [r3, #4]
 800de86:	b10b      	cbz	r3, 800de8c <_free_r+0x50>
 800de88:	42a3      	cmp	r3, r4
 800de8a:	d9fa      	bls.n	800de82 <_free_r+0x46>
 800de8c:	6811      	ldr	r1, [r2, #0]
 800de8e:	1855      	adds	r5, r2, r1
 800de90:	42a5      	cmp	r5, r4
 800de92:	d10b      	bne.n	800deac <_free_r+0x70>
 800de94:	6824      	ldr	r4, [r4, #0]
 800de96:	4421      	add	r1, r4
 800de98:	1854      	adds	r4, r2, r1
 800de9a:	42a3      	cmp	r3, r4
 800de9c:	6011      	str	r1, [r2, #0]
 800de9e:	d1e0      	bne.n	800de62 <_free_r+0x26>
 800dea0:	681c      	ldr	r4, [r3, #0]
 800dea2:	685b      	ldr	r3, [r3, #4]
 800dea4:	6053      	str	r3, [r2, #4]
 800dea6:	4421      	add	r1, r4
 800dea8:	6011      	str	r1, [r2, #0]
 800deaa:	e7da      	b.n	800de62 <_free_r+0x26>
 800deac:	d902      	bls.n	800deb4 <_free_r+0x78>
 800deae:	230c      	movs	r3, #12
 800deb0:	6003      	str	r3, [r0, #0]
 800deb2:	e7d6      	b.n	800de62 <_free_r+0x26>
 800deb4:	6825      	ldr	r5, [r4, #0]
 800deb6:	1961      	adds	r1, r4, r5
 800deb8:	428b      	cmp	r3, r1
 800deba:	bf04      	itt	eq
 800debc:	6819      	ldreq	r1, [r3, #0]
 800debe:	685b      	ldreq	r3, [r3, #4]
 800dec0:	6063      	str	r3, [r4, #4]
 800dec2:	bf04      	itt	eq
 800dec4:	1949      	addeq	r1, r1, r5
 800dec6:	6021      	streq	r1, [r4, #0]
 800dec8:	6054      	str	r4, [r2, #4]
 800deca:	e7ca      	b.n	800de62 <_free_r+0x26>
 800decc:	b003      	add	sp, #12
 800dece:	bd30      	pop	{r4, r5, pc}
 800ded0:	240010f8 	.word	0x240010f8

0800ded4 <_malloc_usable_size_r>:
 800ded4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ded8:	1f18      	subs	r0, r3, #4
 800deda:	2b00      	cmp	r3, #0
 800dedc:	bfbc      	itt	lt
 800dede:	580b      	ldrlt	r3, [r1, r0]
 800dee0:	18c0      	addlt	r0, r0, r3
 800dee2:	4770      	bx	lr

0800dee4 <__retarget_lock_acquire_recursive>:
 800dee4:	4770      	bx	lr

0800dee6 <__retarget_lock_release_recursive>:
 800dee6:	4770      	bx	lr

0800dee8 <_init>:
 800dee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deea:	bf00      	nop
 800deec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deee:	bc08      	pop	{r3}
 800def0:	469e      	mov	lr, r3
 800def2:	4770      	bx	lr

0800def4 <_fini>:
 800def4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800def6:	bf00      	nop
 800def8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800defa:	bc08      	pop	{r3}
 800defc:	469e      	mov	lr, r3
 800defe:	4770      	bx	lr
